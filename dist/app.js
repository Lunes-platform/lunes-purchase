/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	module.exports = __webpack_require__(328);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";
	
	__webpack_require__(2);
	
	__webpack_require__(323);
	
	__webpack_require__(325);
	
	if (global._babelPolyfill) {
	  throw new Error("only one instance of babel-polyfill is allowed");
	}
	global._babelPolyfill = true;
	
	var DEFINE_PROPERTY = "defineProperty";
	function define(O, key, value) {
	  O[key] || Object[DEFINE_PROPERTY](O, key, {
	    writable: true,
	    configurable: true,
	    value: value
	  });
	}
	
	define(String.prototype, "padLeft", "".padStart);
	define(String.prototype, "padRight", "".padEnd);
	
	"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function (key) {
	  [][key] && define(Array, key, Function.call.bind([][key]));
	});
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(3);
	__webpack_require__(51);
	__webpack_require__(52);
	__webpack_require__(53);
	__webpack_require__(54);
	__webpack_require__(56);
	__webpack_require__(59);
	__webpack_require__(60);
	__webpack_require__(61);
	__webpack_require__(62);
	__webpack_require__(63);
	__webpack_require__(64);
	__webpack_require__(65);
	__webpack_require__(66);
	__webpack_require__(67);
	__webpack_require__(69);
	__webpack_require__(71);
	__webpack_require__(73);
	__webpack_require__(75);
	__webpack_require__(78);
	__webpack_require__(79);
	__webpack_require__(80);
	__webpack_require__(84);
	__webpack_require__(86);
	__webpack_require__(88);
	__webpack_require__(91);
	__webpack_require__(92);
	__webpack_require__(93);
	__webpack_require__(94);
	__webpack_require__(96);
	__webpack_require__(97);
	__webpack_require__(98);
	__webpack_require__(99);
	__webpack_require__(100);
	__webpack_require__(101);
	__webpack_require__(102);
	__webpack_require__(104);
	__webpack_require__(105);
	__webpack_require__(106);
	__webpack_require__(108);
	__webpack_require__(109);
	__webpack_require__(110);
	__webpack_require__(112);
	__webpack_require__(114);
	__webpack_require__(115);
	__webpack_require__(116);
	__webpack_require__(117);
	__webpack_require__(118);
	__webpack_require__(119);
	__webpack_require__(120);
	__webpack_require__(121);
	__webpack_require__(122);
	__webpack_require__(123);
	__webpack_require__(124);
	__webpack_require__(125);
	__webpack_require__(126);
	__webpack_require__(131);
	__webpack_require__(132);
	__webpack_require__(136);
	__webpack_require__(137);
	__webpack_require__(138);
	__webpack_require__(139);
	__webpack_require__(141);
	__webpack_require__(142);
	__webpack_require__(143);
	__webpack_require__(144);
	__webpack_require__(145);
	__webpack_require__(146);
	__webpack_require__(147);
	__webpack_require__(148);
	__webpack_require__(149);
	__webpack_require__(150);
	__webpack_require__(151);
	__webpack_require__(152);
	__webpack_require__(153);
	__webpack_require__(154);
	__webpack_require__(155);
	__webpack_require__(157);
	__webpack_require__(158);
	__webpack_require__(160);
	__webpack_require__(161);
	__webpack_require__(167);
	__webpack_require__(168);
	__webpack_require__(170);
	__webpack_require__(171);
	__webpack_require__(172);
	__webpack_require__(176);
	__webpack_require__(177);
	__webpack_require__(178);
	__webpack_require__(179);
	__webpack_require__(180);
	__webpack_require__(182);
	__webpack_require__(183);
	__webpack_require__(184);
	__webpack_require__(185);
	__webpack_require__(188);
	__webpack_require__(190);
	__webpack_require__(191);
	__webpack_require__(192);
	__webpack_require__(194);
	__webpack_require__(196);
	__webpack_require__(198);
	__webpack_require__(199);
	__webpack_require__(200);
	__webpack_require__(202);
	__webpack_require__(203);
	__webpack_require__(204);
	__webpack_require__(205);
	__webpack_require__(215);
	__webpack_require__(219);
	__webpack_require__(220);
	__webpack_require__(222);
	__webpack_require__(223);
	__webpack_require__(227);
	__webpack_require__(228);
	__webpack_require__(230);
	__webpack_require__(231);
	__webpack_require__(232);
	__webpack_require__(233);
	__webpack_require__(234);
	__webpack_require__(235);
	__webpack_require__(236);
	__webpack_require__(237);
	__webpack_require__(238);
	__webpack_require__(239);
	__webpack_require__(240);
	__webpack_require__(241);
	__webpack_require__(242);
	__webpack_require__(243);
	__webpack_require__(244);
	__webpack_require__(245);
	__webpack_require__(246);
	__webpack_require__(247);
	__webpack_require__(248);
	__webpack_require__(250);
	__webpack_require__(251);
	__webpack_require__(252);
	__webpack_require__(253);
	__webpack_require__(254);
	__webpack_require__(256);
	__webpack_require__(257);
	__webpack_require__(258);
	__webpack_require__(261);
	__webpack_require__(262);
	__webpack_require__(263);
	__webpack_require__(264);
	__webpack_require__(265);
	__webpack_require__(266);
	__webpack_require__(267);
	__webpack_require__(268);
	__webpack_require__(270);
	__webpack_require__(271);
	__webpack_require__(273);
	__webpack_require__(274);
	__webpack_require__(275);
	__webpack_require__(276);
	__webpack_require__(279);
	__webpack_require__(280);
	__webpack_require__(282);
	__webpack_require__(283);
	__webpack_require__(284);
	__webpack_require__(285);
	__webpack_require__(287);
	__webpack_require__(288);
	__webpack_require__(289);
	__webpack_require__(290);
	__webpack_require__(291);
	__webpack_require__(292);
	__webpack_require__(293);
	__webpack_require__(294);
	__webpack_require__(295);
	__webpack_require__(296);
	__webpack_require__(298);
	__webpack_require__(299);
	__webpack_require__(300);
	__webpack_require__(301);
	__webpack_require__(302);
	__webpack_require__(303);
	__webpack_require__(304);
	__webpack_require__(305);
	__webpack_require__(306);
	__webpack_require__(307);
	__webpack_require__(308);
	__webpack_require__(310);
	__webpack_require__(311);
	__webpack_require__(312);
	__webpack_require__(313);
	__webpack_require__(314);
	__webpack_require__(315);
	__webpack_require__(316);
	__webpack_require__(317);
	__webpack_require__(318);
	__webpack_require__(319);
	__webpack_require__(320);
	__webpack_require__(321);
	__webpack_require__(322);
	module.exports = __webpack_require__(9);

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// ECMAScript 6 symbols shim
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var global = __webpack_require__(4);
	var has = __webpack_require__(5);
	var DESCRIPTORS = __webpack_require__(6);
	var $export = __webpack_require__(8);
	var redefine = __webpack_require__(18);
	var META = __webpack_require__(22).KEY;
	var $fails = __webpack_require__(7);
	var shared = __webpack_require__(23);
	var setToStringTag = __webpack_require__(24);
	var uid = __webpack_require__(19);
	var wks = __webpack_require__(25);
	var wksExt = __webpack_require__(26);
	var wksDefine = __webpack_require__(27);
	var enumKeys = __webpack_require__(29);
	var isArray = __webpack_require__(44);
	var anObject = __webpack_require__(12);
	var isObject = __webpack_require__(13);
	var toIObject = __webpack_require__(32);
	var toPrimitive = __webpack_require__(16);
	var createDesc = __webpack_require__(17);
	var _create = __webpack_require__(45);
	var gOPNExt = __webpack_require__(48);
	var $GOPD = __webpack_require__(50);
	var $DP = __webpack_require__(11);
	var $keys = __webpack_require__(30);
	var gOPD = $GOPD.f;
	var dP = $DP.f;
	var gOPN = gOPNExt.f;
	var $Symbol = global.Symbol;
	var $JSON = global.JSON;
	var _stringify = $JSON && $JSON.stringify;
	var PROTOTYPE = 'prototype';
	var HIDDEN = wks('_hidden');
	var TO_PRIMITIVE = wks('toPrimitive');
	var isEnum = {}.propertyIsEnumerable;
	var SymbolRegistry = shared('symbol-registry');
	var AllSymbols = shared('symbols');
	var OPSymbols = shared('op-symbols');
	var ObjectProto = Object[PROTOTYPE];
	var USE_NATIVE = typeof $Symbol == 'function';
	var QObject = global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
	
	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function () {
	  return _create(dP({}, 'a', {
	    get: function get() {
	      return dP(this, 'a', { value: 7 }).a;
	    }
	  })).a != 7;
	}) ? function (it, key, D) {
	  var protoDesc = gOPD(ObjectProto, key);
	  if (protoDesc) delete ObjectProto[key];
	  dP(it, key, D);
	  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
	} : dP;
	
	var wrap = function wrap(tag) {
	  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
	  sym._k = tag;
	  return sym;
	};
	
	var isSymbol = USE_NATIVE && _typeof($Symbol.iterator) == 'symbol' ? function (it) {
	  return (typeof it === 'undefined' ? 'undefined' : _typeof(it)) == 'symbol';
	} : function (it) {
	  return it instanceof $Symbol;
	};
	
	var $defineProperty = function defineProperty(it, key, D) {
	  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
	  anObject(it);
	  key = toPrimitive(key, true);
	  anObject(D);
	  if (has(AllSymbols, key)) {
	    if (!D.enumerable) {
	      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
	      D = _create(D, { enumerable: createDesc(0, false) });
	    }return setSymbolDesc(it, key, D);
	  }return dP(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P) {
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P));
	  var i = 0;
	  var l = keys.length;
	  var key;
	  while (l > i) {
	    $defineProperty(it, key = keys[i++], P[key]);
	  }return it;
	};
	var $create = function create(it, P) {
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key) {
	  var E = isEnum.call(this, key = toPrimitive(key, true));
	  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
	  it = toIObject(it);
	  key = toPrimitive(key, true);
	  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
	  var D = gOPD(it, key);
	  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it) {
	  var names = gOPN(toIObject(it));
	  var result = [];
	  var i = 0;
	  var key;
	  while (names.length > i) {
	    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
	  }return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
	  var IS_OP = it === ObjectProto;
	  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
	  var result = [];
	  var i = 0;
	  var key;
	  while (names.length > i) {
	    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
	  }return result;
	};
	
	// 19.4.1.1 Symbol([description])
	if (!USE_NATIVE) {
	  $Symbol = function _Symbol() {
	    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
	    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function $set(value) {
	      if (this === ObjectProto) $set.call(OPSymbols, value);
	      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, createDesc(1, value));
	    };
	    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
	    return wrap(tag);
	  };
	  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
	    return this._k;
	  });
	
	  $GOPD.f = $getOwnPropertyDescriptor;
	  $DP.f = $defineProperty;
	  __webpack_require__(49).f = gOPNExt.f = $getOwnPropertyNames;
	  __webpack_require__(43).f = $propertyIsEnumerable;
	  __webpack_require__(42).f = $getOwnPropertySymbols;
	
	  if (DESCRIPTORS && !__webpack_require__(28)) {
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }
	
	  wksExt.f = function (name) {
	    return wrap(wks(name));
	  };
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });
	
	for (var es6Symbols =
	// 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'.split(','), j = 0; es6Symbols.length > j;) {
	  wks(es6Symbols[j++]);
	}for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) {
	  wksDefine(wellKnownSymbols[k++]);
	}$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function _for(key) {
	    return has(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(sym) {
	    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
	    for (var key in SymbolRegistry) {
	      if (SymbolRegistry[key] === sym) return key;
	    }
	  },
	  useSetter: function useSetter() {
	    setter = true;
	  },
	  useSimple: function useSimple() {
	    setter = false;
	  }
	});
	
	$export($export.S + $export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});
	
	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it) {
	    var args = [it];
	    var i = 1;
	    var replacer, $replacer;
	    while (arguments.length > i) {
	      args.push(arguments[i++]);
	    }$replacer = replacer = args[1];
	    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
	    if (!isArray(replacer)) replacer = function replacer(key, value) {
	      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
	      if (!isSymbol(value)) return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});
	
	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(10)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);

/***/ },
/* 4 */
/***/ function(module, exports) {

	'use strict';
	
	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self
	// eslint-disable-next-line no-new-func
	: Function('return this')();
	if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

/***/ },
/* 5 */
/***/ function(module, exports) {

	"use strict";
	
	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function (it, key) {
	  return hasOwnProperty.call(it, key);
	};

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(7)(function () {
	  return Object.defineProperty({}, 'a', { get: function get() {
	      return 7;
	    } }).a != 7;
	});

/***/ },
/* 7 */
/***/ function(module, exports) {

	"use strict";
	
	module.exports = function (exec) {
	  try {
	    return !!exec();
	  } catch (e) {
	    return true;
	  }
	};

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var global = __webpack_require__(4);
	var core = __webpack_require__(9);
	var hide = __webpack_require__(10);
	var redefine = __webpack_require__(18);
	var ctx = __webpack_require__(20);
	var PROTOTYPE = 'prototype';
	
	var $export = function $export(type, name, source) {
	  var IS_FORCED = type & $export.F;
	  var IS_GLOBAL = type & $export.G;
	  var IS_STATIC = type & $export.S;
	  var IS_PROTO = type & $export.P;
	  var IS_BIND = type & $export.B;
	  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
	  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
	  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
	  var key, own, out, exp;
	  if (IS_GLOBAL) source = name;
	  for (key in source) {
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    // export native or passed
	    out = (own ? target : source)[key];
	    // bind timers to global for call from export context
	    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // extend global
	    if (target) redefine(target, key, out, type & $export.U);
	    // export
	    if (exports[key] != out) hide(exports, key, exp);
	    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
	  }
	};
	global.core = core;
	// type bitmap
	$export.F = 1; // forced
	$export.G = 2; // global
	$export.S = 4; // static
	$export.P = 8; // proto
	$export.B = 16; // bind
	$export.W = 32; // wrap
	$export.U = 64; // safe
	$export.R = 128; // real proto method for `library`
	module.exports = $export;

/***/ },
/* 9 */
/***/ function(module, exports) {

	'use strict';
	
	var core = module.exports = { version: '2.5.3' };
	if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var dP = __webpack_require__(11);
	var createDesc = __webpack_require__(17);
	module.exports = __webpack_require__(6) ? function (object, key, value) {
	  return dP.f(object, key, createDesc(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var anObject = __webpack_require__(12);
	var IE8_DOM_DEFINE = __webpack_require__(14);
	var toPrimitive = __webpack_require__(16);
	var dP = Object.defineProperty;
	
	exports.f = __webpack_require__(6) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if (IE8_DOM_DEFINE) try {
	    return dP(O, P, Attributes);
	  } catch (e) {/* empty */}
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isObject = __webpack_require__(13);
	module.exports = function (it) {
	  if (!isObject(it)) throw TypeError(it + ' is not an object!');
	  return it;
	};

/***/ },
/* 13 */
/***/ function(module, exports) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	module.exports = function (it) {
	  return (typeof it === 'undefined' ? 'undefined' : _typeof(it)) === 'object' ? it !== null : typeof it === 'function';
	};

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = !__webpack_require__(6) && !__webpack_require__(7)(function () {
	  return Object.defineProperty(__webpack_require__(15)('div'), 'a', { get: function get() {
	      return 7;
	    } }).a != 7;
	});

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isObject = __webpack_require__(13);
	var document = __webpack_require__(4).document;
	// typeof document.createElement is 'object' in old IE
	var is = isObject(document) && isObject(document.createElement);
	module.exports = function (it) {
	  return is ? document.createElement(it) : {};
	};

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(13);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function (it, S) {
	  if (!isObject(it)) return it;
	  var fn, val;
	  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
	  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
	  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};

/***/ },
/* 17 */
/***/ function(module, exports) {

	"use strict";
	
	module.exports = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var global = __webpack_require__(4);
	var hide = __webpack_require__(10);
	var has = __webpack_require__(5);
	var SRC = __webpack_require__(19)('src');
	var TO_STRING = 'toString';
	var $toString = Function[TO_STRING];
	var TPL = ('' + $toString).split(TO_STRING);
	
	__webpack_require__(9).inspectSource = function (it) {
	  return $toString.call(it);
	};
	
	(module.exports = function (O, key, val, safe) {
	  var isFunction = typeof val == 'function';
	  if (isFunction) has(val, 'name') || hide(val, 'name', key);
	  if (O[key] === val) return;
	  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
	  if (O === global) {
	    O[key] = val;
	  } else if (!safe) {
	    delete O[key];
	    hide(O, key, val);
	  } else if (O[key]) {
	    O[key] = val;
	  } else {
	    hide(O, key, val);
	  }
	  // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
	})(Function.prototype, TO_STRING, function toString() {
	  return typeof this == 'function' && this[SRC] || $toString.call(this);
	});

/***/ },
/* 19 */
/***/ function(module, exports) {

	'use strict';
	
	var id = 0;
	var px = Math.random();
	module.exports = function (key) {
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// optional / simple context binding
	var aFunction = __webpack_require__(21);
	module.exports = function (fn, that, length) {
	  aFunction(fn);
	  if (that === undefined) return fn;
	  switch (length) {
	    case 1:
	      return function (a) {
	        return fn.call(that, a);
	      };
	    case 2:
	      return function (a, b) {
	        return fn.call(that, a, b);
	      };
	    case 3:
	      return function (a, b, c) {
	        return fn.call(that, a, b, c);
	      };
	  }
	  return function () /* ...args */{
	    return fn.apply(that, arguments);
	  };
	};

/***/ },
/* 21 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function (it) {
	  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
	  return it;
	};

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var META = __webpack_require__(19)('meta');
	var isObject = __webpack_require__(13);
	var has = __webpack_require__(5);
	var setDesc = __webpack_require__(11).f;
	var id = 0;
	var isExtensible = Object.isExtensible || function () {
	  return true;
	};
	var FREEZE = !__webpack_require__(7)(function () {
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function setMeta(it) {
	  setDesc(it, META, { value: {
	      i: 'O' + ++id, // object ID
	      w: {} // weak collections IDs
	    } });
	};
	var fastKey = function fastKey(it, create) {
	  // return primitive with prefix
	  if (!isObject(it)) return (typeof it === 'undefined' ? 'undefined' : _typeof(it)) == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if (!has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return 'F';
	    // not necessary to add metadata
	    if (!create) return 'E';
	    // add missing metadata
	    setMeta(it);
	    // return object ID
	  }return it[META].i;
	};
	var getWeak = function getWeak(it, create) {
	  if (!has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return true;
	    // not necessary to add metadata
	    if (!create) return false;
	    // add missing metadata
	    setMeta(it);
	    // return hash weak collections IDs
	  }return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function onFreeze(it) {
	  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY: META,
	  NEED: false,
	  fastKey: fastKey,
	  getWeak: getWeak,
	  onFreeze: onFreeze
	};

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var global = __webpack_require__(4);
	var SHARED = '__core-js_shared__';
	var store = global[SHARED] || (global[SHARED] = {});
	module.exports = function (key) {
	  return store[key] || (store[key] = {});
	};

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var def = __webpack_require__(11).f;
	var has = __webpack_require__(5);
	var TAG = __webpack_require__(25)('toStringTag');
	
	module.exports = function (it, tag, stat) {
	  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
	};

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var store = __webpack_require__(23)('wks');
	var uid = __webpack_require__(19);
	var _Symbol = __webpack_require__(4).Symbol;
	var USE_SYMBOL = typeof _Symbol == 'function';
	
	var $exports = module.exports = function (name) {
	  return store[name] || (store[name] = USE_SYMBOL && _Symbol[name] || (USE_SYMBOL ? _Symbol : uid)('Symbol.' + name));
	};
	
	$exports.store = store;

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.f = __webpack_require__(25);

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var global = __webpack_require__(4);
	var core = __webpack_require__(9);
	var LIBRARY = __webpack_require__(28);
	var wksExt = __webpack_require__(26);
	var defineProperty = __webpack_require__(11).f;
	module.exports = function (name) {
	  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
	  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
	};

/***/ },
/* 28 */
/***/ function(module, exports) {

	"use strict";
	
	module.exports = false;

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// all enumerable object keys, includes symbols
	var getKeys = __webpack_require__(30);
	var gOPS = __webpack_require__(42);
	var pIE = __webpack_require__(43);
	module.exports = function (it) {
	  var result = getKeys(it);
	  var getSymbols = gOPS.f;
	  if (getSymbols) {
	    var symbols = getSymbols(it);
	    var isEnum = pIE.f;
	    var i = 0;
	    var key;
	    while (symbols.length > i) {
	      if (isEnum.call(it, key = symbols[i++])) result.push(key);
	    }
	  }return result;
	};

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys = __webpack_require__(31);
	var enumBugKeys = __webpack_require__(41);
	
	module.exports = Object.keys || function keys(O) {
	  return $keys(O, enumBugKeys);
	};

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var has = __webpack_require__(5);
	var toIObject = __webpack_require__(32);
	var arrayIndexOf = __webpack_require__(36)(false);
	var IE_PROTO = __webpack_require__(40)('IE_PROTO');
	
	module.exports = function (object, names) {
	  var O = toIObject(object);
	  var i = 0;
	  var result = [];
	  var key;
	  for (key in O) {
	    if (key != IE_PROTO) has(O, key) && result.push(key);
	  } // Don't enum bug & hidden keys
	  while (names.length > i) {
	    if (has(O, key = names[i++])) {
	      ~arrayIndexOf(result, key) || result.push(key);
	    }
	  }return result;
	};

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(33);
	var defined = __webpack_require__(35);
	module.exports = function (it) {
	  return IObject(defined(it));
	};

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(34);
	// eslint-disable-next-line no-prototype-builtins
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};

/***/ },
/* 34 */
/***/ function(module, exports) {

	"use strict";
	
	var toString = {}.toString;
	
	module.exports = function (it) {
	  return toString.call(it).slice(8, -1);
	};

/***/ },
/* 35 */
/***/ function(module, exports) {

	"use strict";
	
	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function (it) {
	  if (it == undefined) throw TypeError("Can't call method on  " + it);
	  return it;
	};

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(32);
	var toLength = __webpack_require__(37);
	var toAbsoluteIndex = __webpack_require__(39);
	module.exports = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = toIObject($this);
	    var length = toLength(O.length);
	    var index = toAbsoluteIndex(fromIndex, length);
	    var value;
	    // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      // eslint-disable-next-line no-self-compare
	      if (value != value) return true;
	      // Array#indexOf ignores holes, Array#includes - not
	    } else for (; length > index; index++) {
	      if (IS_INCLUDES || index in O) {
	        if (O[index] === el) return IS_INCLUDES || index || 0;
	      }
	    }return !IS_INCLUDES && -1;
	  };
	};

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 7.1.15 ToLength
	var toInteger = __webpack_require__(38);
	var min = Math.min;
	module.exports = function (it) {
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};

/***/ },
/* 38 */
/***/ function(module, exports) {

	"use strict";
	
	// 7.1.4 ToInteger
	var ceil = Math.ceil;
	var floor = Math.floor;
	module.exports = function (it) {
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var toInteger = __webpack_require__(38);
	var max = Math.max;
	var min = Math.min;
	module.exports = function (index, length) {
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var shared = __webpack_require__(23)('keys');
	var uid = __webpack_require__(19);
	module.exports = function (key) {
	  return shared[key] || (shared[key] = uid(key));
	};

/***/ },
/* 41 */
/***/ function(module, exports) {

	'use strict';
	
	// IE 8- don't enum bug keys
	module.exports = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');

/***/ },
/* 42 */
/***/ function(module, exports) {

	"use strict";
	
	exports.f = Object.getOwnPropertySymbols;

/***/ },
/* 43 */
/***/ function(module, exports) {

	"use strict";
	
	exports.f = {}.propertyIsEnumerable;

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(34);
	module.exports = Array.isArray || function isArray(arg) {
	  return cof(arg) == 'Array';
	};

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject = __webpack_require__(12);
	var dPs = __webpack_require__(46);
	var enumBugKeys = __webpack_require__(41);
	var IE_PROTO = __webpack_require__(40)('IE_PROTO');
	var Empty = function Empty() {/* empty */};
	var PROTOTYPE = 'prototype';
	
	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var _createDict = function createDict() {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(15)('iframe');
	  var i = enumBugKeys.length;
	  var lt = '<';
	  var gt = '>';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(47).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  _createDict = iframeDocument.F;
	  while (i--) {
	    delete _createDict[PROTOTYPE][enumBugKeys[i]];
	  }return _createDict();
	};
	
	module.exports = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty();
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = _createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var dP = __webpack_require__(11);
	var anObject = __webpack_require__(12);
	var getKeys = __webpack_require__(30);
	
	module.exports = __webpack_require__(6) ? Object.defineProperties : function defineProperties(O, Properties) {
	  anObject(O);
	  var keys = getKeys(Properties);
	  var length = keys.length;
	  var i = 0;
	  var P;
	  while (length > i) {
	    dP.f(O, P = keys[i++], Properties[P]);
	  }return O;
	};

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var document = __webpack_require__(4).document;
	module.exports = document && document.documentElement;

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = __webpack_require__(32);
	var gOPN = __webpack_require__(49).f;
	var toString = {}.toString;
	
	var windowNames = (typeof window === 'undefined' ? 'undefined' : _typeof(window)) == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
	
	var getWindowNames = function getWindowNames(it) {
	  try {
	    return gOPN(it);
	  } catch (e) {
	    return windowNames.slice();
	  }
	};
	
	module.exports.f = function getOwnPropertyNames(it) {
	  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
	};

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	var $keys = __webpack_require__(31);
	var hiddenKeys = __webpack_require__(41).concat('length', 'prototype');
	
	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return $keys(O, hiddenKeys);
	};

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var pIE = __webpack_require__(43);
	var createDesc = __webpack_require__(17);
	var toIObject = __webpack_require__(32);
	var toPrimitive = __webpack_require__(16);
	var has = __webpack_require__(5);
	var IE8_DOM_DEFINE = __webpack_require__(14);
	var gOPD = Object.getOwnPropertyDescriptor;
	
	exports.f = __webpack_require__(6) ? gOPD : function getOwnPropertyDescriptor(O, P) {
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if (IE8_DOM_DEFINE) try {
	    return gOPD(O, P);
	  } catch (e) {/* empty */}
	  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
	};

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $export = __webpack_require__(8);
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	$export($export.S, 'Object', { create: __webpack_require__(45) });

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $export = __webpack_require__(8);
	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	$export($export.S + $export.F * !__webpack_require__(6), 'Object', { defineProperty: __webpack_require__(11).f });

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $export = __webpack_require__(8);
	// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
	$export($export.S + $export.F * !__webpack_require__(6), 'Object', { defineProperties: __webpack_require__(46) });

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	var toIObject = __webpack_require__(32);
	var $getOwnPropertyDescriptor = __webpack_require__(50).f;
	
	__webpack_require__(55)('getOwnPropertyDescriptor', function () {
	  return function getOwnPropertyDescriptor(it, key) {
	    return $getOwnPropertyDescriptor(toIObject(it), key);
	  };
	});

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(8);
	var core = __webpack_require__(9);
	var fails = __webpack_require__(7);
	module.exports = function (KEY, exec) {
	  var fn = (core.Object || {})[KEY] || Object[KEY];
	  var exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function () {
	    fn(1);
	  }), 'Object', exp);
	};

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 19.1.2.9 Object.getPrototypeOf(O)
	var toObject = __webpack_require__(57);
	var $getPrototypeOf = __webpack_require__(58);
	
	__webpack_require__(55)('getPrototypeOf', function () {
	  return function getPrototypeOf(it) {
	    return $getPrototypeOf(toObject(it));
	  };
	});

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(35);
	module.exports = function (it) {
	  return Object(defined(it));
	};

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has = __webpack_require__(5);
	var toObject = __webpack_require__(57);
	var IE_PROTO = __webpack_require__(40)('IE_PROTO');
	var ObjectProto = Object.prototype;
	
	module.exports = Object.getPrototypeOf || function (O) {
	  O = toObject(O);
	  if (has(O, IE_PROTO)) return O[IE_PROTO];
	  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
	    return O.constructor.prototype;
	  }return O instanceof Object ? ObjectProto : null;
	};

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 19.1.2.14 Object.keys(O)
	var toObject = __webpack_require__(57);
	var $keys = __webpack_require__(30);
	
	__webpack_require__(55)('keys', function () {
	  return function keys(it) {
	    return $keys(toObject(it));
	  };
	});

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 19.1.2.7 Object.getOwnPropertyNames(O)
	__webpack_require__(55)('getOwnPropertyNames', function () {
	  return __webpack_require__(48).f;
	});

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 19.1.2.5 Object.freeze(O)
	var isObject = __webpack_require__(13);
	var meta = __webpack_require__(22).onFreeze;
	
	__webpack_require__(55)('freeze', function ($freeze) {
	  return function freeze(it) {
	    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
	  };
	});

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 19.1.2.17 Object.seal(O)
	var isObject = __webpack_require__(13);
	var meta = __webpack_require__(22).onFreeze;
	
	__webpack_require__(55)('seal', function ($seal) {
	  return function seal(it) {
	    return $seal && isObject(it) ? $seal(meta(it)) : it;
	  };
	});

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 19.1.2.15 Object.preventExtensions(O)
	var isObject = __webpack_require__(13);
	var meta = __webpack_require__(22).onFreeze;
	
	__webpack_require__(55)('preventExtensions', function ($preventExtensions) {
	  return function preventExtensions(it) {
	    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
	  };
	});

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 19.1.2.12 Object.isFrozen(O)
	var isObject = __webpack_require__(13);
	
	__webpack_require__(55)('isFrozen', function ($isFrozen) {
	  return function isFrozen(it) {
	    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
	  };
	});

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 19.1.2.13 Object.isSealed(O)
	var isObject = __webpack_require__(13);
	
	__webpack_require__(55)('isSealed', function ($isSealed) {
	  return function isSealed(it) {
	    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
	  };
	});

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 19.1.2.11 Object.isExtensible(O)
	var isObject = __webpack_require__(13);
	
	__webpack_require__(55)('isExtensible', function ($isExtensible) {
	  return function isExtensible(it) {
	    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
	  };
	});

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 19.1.3.1 Object.assign(target, source)
	var $export = __webpack_require__(8);
	
	$export($export.S + $export.F, 'Object', { assign: __webpack_require__(68) });

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 19.1.2.1 Object.assign(target, source, ...)
	
	var getKeys = __webpack_require__(30);
	var gOPS = __webpack_require__(42);
	var pIE = __webpack_require__(43);
	var toObject = __webpack_require__(57);
	var IObject = __webpack_require__(33);
	var $assign = Object.assign;
	
	// should work with symbols and should have deterministic property order (V8 bug)
	module.exports = !$assign || __webpack_require__(7)(function () {
	  var A = {};
	  var B = {};
	  // eslint-disable-next-line no-undef
	  var S = Symbol();
	  var K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function (k) {
	    B[k] = k;
	  });
	  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
	}) ? function assign(target, source) {
	  // eslint-disable-line no-unused-vars
	  var T = toObject(target);
	  var aLen = arguments.length;
	  var index = 1;
	  var getSymbols = gOPS.f;
	  var isEnum = pIE.f;
	  while (aLen > index) {
	    var S = IObject(arguments[index++]);
	    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
	    var length = keys.length;
	    var j = 0;
	    var key;
	    while (length > j) {
	      if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
	    }
	  }return T;
	} : $assign;

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 19.1.3.10 Object.is(value1, value2)
	var $export = __webpack_require__(8);
	$export($export.S, 'Object', { is: __webpack_require__(70) });

/***/ },
/* 70 */
/***/ function(module, exports) {

	"use strict";
	
	// 7.2.9 SameValue(x, y)
	module.exports = Object.is || function is(x, y) {
	  // eslint-disable-next-line no-self-compare
	  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
	};

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = __webpack_require__(8);
	$export($export.S, 'Object', { setPrototypeOf: __webpack_require__(72).set });

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var isObject = __webpack_require__(13);
	var anObject = __webpack_require__(12);
	var check = function check(O, proto) {
	  anObject(O);
	  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	  function (test, buggy, set) {
	    try {
	      set = __webpack_require__(20)(Function.call, __webpack_require__(50).f(Object.prototype, '__proto__').set, 2);
	      set(test, []);
	      buggy = !(test instanceof Array);
	    } catch (e) {
	      buggy = true;
	    }
	    return function setPrototypeOf(O, proto) {
	      check(O, proto);
	      if (buggy) O.__proto__ = proto;else set(O, proto);
	      return O;
	    };
	  }({}, false) : undefined),
	  check: check
	};

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 19.1.3.6 Object.prototype.toString()
	
	var classof = __webpack_require__(74);
	var test = {};
	test[__webpack_require__(25)('toStringTag')] = 'z';
	if (test + '' != '[object z]') {
	  __webpack_require__(18)(Object.prototype, 'toString', function toString() {
	    return '[object ' + classof(this) + ']';
	  }, true);
	}

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(34);
	var TAG = __webpack_require__(25)('toStringTag');
	// ES3 wrong here
	var ARG = cof(function () {
	  return arguments;
	}()) == 'Arguments';
	
	// fallback for IE11 Script Access Denied error
	var tryGet = function tryGet(it, key) {
	  try {
	    return it[key];
	  } catch (e) {/* empty */}
	};
	
	module.exports = function (it) {
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	  // @@toStringTag case
	  : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
	  // builtinTag case
	  : ARG ? cof(O)
	  // ES3 arguments fallback
	  : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
	var $export = __webpack_require__(8);
	
	$export($export.P, 'Function', { bind: __webpack_require__(76) });

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var aFunction = __webpack_require__(21);
	var isObject = __webpack_require__(13);
	var invoke = __webpack_require__(77);
	var arraySlice = [].slice;
	var factories = {};
	
	var construct = function construct(F, len, args) {
	  if (!(len in factories)) {
	    for (var n = [], i = 0; i < len; i++) {
	      n[i] = 'a[' + i + ']';
	    } // eslint-disable-next-line no-new-func
	    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
	  }return factories[len](F, args);
	};
	
	module.exports = Function.bind || function bind(that /* , ...args */) {
	  var fn = aFunction(this);
	  var partArgs = arraySlice.call(arguments, 1);
	  var bound = function bound() /* args... */{
	    var args = partArgs.concat(arraySlice.call(arguments));
	    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
	  };
	  if (isObject(fn.prototype)) bound.prototype = fn.prototype;
	  return bound;
	};

/***/ },
/* 77 */
/***/ function(module, exports) {

	"use strict";
	
	// fast apply, http://jsperf.lnkit.com/fast-apply/5
	module.exports = function (fn, args, that) {
	                  var un = that === undefined;
	                  switch (args.length) {
	                                    case 0:
	                                                      return un ? fn() : fn.call(that);
	                                    case 1:
	                                                      return un ? fn(args[0]) : fn.call(that, args[0]);
	                                    case 2:
	                                                      return un ? fn(args[0], args[1]) : fn.call(that, args[0], args[1]);
	                                    case 3:
	                                                      return un ? fn(args[0], args[1], args[2]) : fn.call(that, args[0], args[1], args[2]);
	                                    case 4:
	                                                      return un ? fn(args[0], args[1], args[2], args[3]) : fn.call(that, args[0], args[1], args[2], args[3]);
	                  }return fn.apply(that, args);
	};

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var dP = __webpack_require__(11).f;
	var FProto = Function.prototype;
	var nameRE = /^\s*function ([^ (]*)/;
	var NAME = 'name';
	
	// 19.2.4.2 name
	NAME in FProto || __webpack_require__(6) && dP(FProto, NAME, {
	  configurable: true,
	  get: function get() {
	    try {
	      return ('' + this).match(nameRE)[1];
	    } catch (e) {
	      return '';
	    }
	  }
	});

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isObject = __webpack_require__(13);
	var getPrototypeOf = __webpack_require__(58);
	var HAS_INSTANCE = __webpack_require__(25)('hasInstance');
	var FunctionProto = Function.prototype;
	// 19.2.3.6 Function.prototype[@@hasInstance](V)
	if (!(HAS_INSTANCE in FunctionProto)) __webpack_require__(11).f(FunctionProto, HAS_INSTANCE, { value: function value(O) {
	    if (typeof this != 'function' || !isObject(O)) return false;
	    if (!isObject(this.prototype)) return O instanceof this;
	    // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
	    while (O = getPrototypeOf(O)) {
	      if (this.prototype === O) return true;
	    }return false;
	  } });

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $export = __webpack_require__(8);
	var $parseInt = __webpack_require__(81);
	// 18.2.5 parseInt(string, radix)
	$export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $parseInt = __webpack_require__(4).parseInt;
	var $trim = __webpack_require__(82).trim;
	var ws = __webpack_require__(83);
	var hex = /^[-+]?0[xX]/;
	
	module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
	  var string = $trim(String(str), 3);
	  return $parseInt(string, radix >>> 0 || (hex.test(string) ? 16 : 10));
	} : $parseInt;

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $export = __webpack_require__(8);
	var defined = __webpack_require__(35);
	var fails = __webpack_require__(7);
	var spaces = __webpack_require__(83);
	var space = '[' + spaces + ']';
	var non = '\u200B\x85';
	var ltrim = RegExp('^' + space + space + '*');
	var rtrim = RegExp(space + space + '*$');
	
	var exporter = function exporter(KEY, exec, ALIAS) {
	  var exp = {};
	  var FORCE = fails(function () {
	    return !!spaces[KEY]() || non[KEY]() != non;
	  });
	  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
	  if (ALIAS) exp[ALIAS] = fn;
	  $export($export.P + $export.F * FORCE, 'String', exp);
	};
	
	// 1 -> String#trimLeft
	// 2 -> String#trimRight
	// 3 -> String#trim
	var trim = exporter.trim = function (string, TYPE) {
	  string = String(defined(string));
	  if (TYPE & 1) string = string.replace(ltrim, '');
	  if (TYPE & 2) string = string.replace(rtrim, '');
	  return string;
	};
	
	module.exports = exporter;

/***/ },
/* 83 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = '\t\n\x0B\f\r \xA0\u1680\u180E\u2000\u2001\u2002\u2003' + '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $export = __webpack_require__(8);
	var $parseFloat = __webpack_require__(85);
	// 18.2.4 parseFloat(string)
	$export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $parseFloat = __webpack_require__(4).parseFloat;
	var $trim = __webpack_require__(82).trim;
	
	module.exports = 1 / $parseFloat(__webpack_require__(83) + '-0') !== -Infinity ? function parseFloat(str) {
	  var string = $trim(String(str), 3);
	  var result = $parseFloat(string);
	  return result === 0 && string.charAt(0) == '-' ? -0 : result;
	} : $parseFloat;

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var global = __webpack_require__(4);
	var has = __webpack_require__(5);
	var cof = __webpack_require__(34);
	var inheritIfRequired = __webpack_require__(87);
	var toPrimitive = __webpack_require__(16);
	var fails = __webpack_require__(7);
	var gOPN = __webpack_require__(49).f;
	var gOPD = __webpack_require__(50).f;
	var dP = __webpack_require__(11).f;
	var $trim = __webpack_require__(82).trim;
	var NUMBER = 'Number';
	var $Number = global[NUMBER];
	var Base = $Number;
	var proto = $Number.prototype;
	// Opera ~12 has broken Object#toString
	var BROKEN_COF = cof(__webpack_require__(45)(proto)) == NUMBER;
	var TRIM = 'trim' in String.prototype;
	
	// 7.1.3 ToNumber(argument)
	var toNumber = function toNumber(argument) {
	  var it = toPrimitive(argument, false);
	  if (typeof it == 'string' && it.length > 2) {
	    it = TRIM ? it.trim() : $trim(it, 3);
	    var first = it.charCodeAt(0);
	    var third, radix, maxCode;
	    if (first === 43 || first === 45) {
	      third = it.charCodeAt(2);
	      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
	    } else if (first === 48) {
	      switch (it.charCodeAt(1)) {
	        case 66:case 98:
	          radix = 2;maxCode = 49;break; // fast equal /^0b[01]+$/i
	        case 79:case 111:
	          radix = 8;maxCode = 55;break; // fast equal /^0o[0-7]+$/i
	        default:
	          return +it;
	      }
	      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
	        code = digits.charCodeAt(i);
	        // parseInt parses a string to a first unavailable symbol
	        // but ToNumber should return NaN if a string contains unavailable symbols
	        if (code < 48 || code > maxCode) return NaN;
	      }return parseInt(digits, radix);
	    }
	  }return +it;
	};
	
	if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
	  $Number = function Number(value) {
	    var it = arguments.length < 1 ? 0 : value;
	    var that = this;
	    return that instanceof $Number
	    // check on 1..constructor(foo) case
	    && (BROKEN_COF ? fails(function () {
	      proto.valueOf.call(that);
	    }) : cof(that) != NUMBER) ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
	  };
	  for (var keys = __webpack_require__(6) ? gOPN(Base) : (
	  // ES3:
	  'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
	  // ES6 (in case, if modules with ES6 Number statics required before):
	  'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' + 'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger').split(','), j = 0, key; keys.length > j; j++) {
	    if (has(Base, key = keys[j]) && !has($Number, key)) {
	      dP($Number, key, gOPD(Base, key));
	    }
	  }
	  $Number.prototype = proto;
	  proto.constructor = $Number;
	  __webpack_require__(18)(global, NUMBER, $Number);
	}

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isObject = __webpack_require__(13);
	var setPrototypeOf = __webpack_require__(72).set;
	module.exports = function (that, target, C) {
	  var S = target.constructor;
	  var P;
	  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
	    setPrototypeOf(that, P);
	  }return that;
	};

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $export = __webpack_require__(8);
	var toInteger = __webpack_require__(38);
	var aNumberValue = __webpack_require__(89);
	var repeat = __webpack_require__(90);
	var $toFixed = 1.0.toFixed;
	var floor = Math.floor;
	var data = [0, 0, 0, 0, 0, 0];
	var ERROR = 'Number.toFixed: incorrect invocation!';
	var ZERO = '0';
	
	var multiply = function multiply(n, c) {
	  var i = -1;
	  var c2 = c;
	  while (++i < 6) {
	    c2 += n * data[i];
	    data[i] = c2 % 1e7;
	    c2 = floor(c2 / 1e7);
	  }
	};
	var divide = function divide(n) {
	  var i = 6;
	  var c = 0;
	  while (--i >= 0) {
	    c += data[i];
	    data[i] = floor(c / n);
	    c = c % n * 1e7;
	  }
	};
	var numToString = function numToString() {
	  var i = 6;
	  var s = '';
	  while (--i >= 0) {
	    if (s !== '' || i === 0 || data[i] !== 0) {
	      var t = String(data[i]);
	      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
	    }
	  }return s;
	};
	var pow = function pow(x, n, acc) {
	  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
	};
	var log = function log(x) {
	  var n = 0;
	  var x2 = x;
	  while (x2 >= 4096) {
	    n += 12;
	    x2 /= 4096;
	  }
	  while (x2 >= 2) {
	    n += 1;
	    x2 /= 2;
	  }return n;
	};
	
	$export($export.P + $export.F * (!!$toFixed && (0.00008.toFixed(3) !== '0.000' || 0.9.toFixed(0) !== '1' || 1.255.toFixed(2) !== '1.25' || 1000000000000000128.0.toFixed(0) !== '1000000000000000128') || !__webpack_require__(7)(function () {
	  // V8 ~ Android 4.3-
	  $toFixed.call({});
	})), 'Number', {
	  toFixed: function toFixed(fractionDigits) {
	    var x = aNumberValue(this, ERROR);
	    var f = toInteger(fractionDigits);
	    var s = '';
	    var m = ZERO;
	    var e, z, j, k;
	    if (f < 0 || f > 20) throw RangeError(ERROR);
	    // eslint-disable-next-line no-self-compare
	    if (x != x) return 'NaN';
	    if (x <= -1e21 || x >= 1e21) return String(x);
	    if (x < 0) {
	      s = '-';
	      x = -x;
	    }
	    if (x > 1e-21) {
	      e = log(x * pow(2, 69, 1)) - 69;
	      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
	      z *= 0x10000000000000;
	      e = 52 - e;
	      if (e > 0) {
	        multiply(0, z);
	        j = f;
	        while (j >= 7) {
	          multiply(1e7, 0);
	          j -= 7;
	        }
	        multiply(pow(10, j, 1), 0);
	        j = e - 1;
	        while (j >= 23) {
	          divide(1 << 23);
	          j -= 23;
	        }
	        divide(1 << j);
	        multiply(1, 1);
	        divide(2);
	        m = numToString();
	      } else {
	        multiply(0, z);
	        multiply(1 << -e, 0);
	        m = numToString() + repeat.call(ZERO, f);
	      }
	    }
	    if (f > 0) {
	      k = m.length;
	      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
	    } else {
	      m = s + m;
	    }return m;
	  }
	});

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var cof = __webpack_require__(34);
	module.exports = function (it, msg) {
	  if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);
	  return +it;
	};

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var toInteger = __webpack_require__(38);
	var defined = __webpack_require__(35);
	
	module.exports = function repeat(count) {
	  var str = String(defined(this));
	  var res = '';
	  var n = toInteger(count);
	  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
	  for (; n > 0; (n >>>= 1) && (str += str)) {
	    if (n & 1) res += str;
	  }return res;
	};

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $export = __webpack_require__(8);
	var $fails = __webpack_require__(7);
	var aNumberValue = __webpack_require__(89);
	var $toPrecision = 1.0.toPrecision;
	
	$export($export.P + $export.F * ($fails(function () {
	  // IE7-
	  return $toPrecision.call(1, undefined) !== '1';
	}) || !$fails(function () {
	  // V8 ~ Android 4.3-
	  $toPrecision.call({});
	})), 'Number', {
	  toPrecision: function toPrecision(precision) {
	    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
	    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
	  }
	});

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 20.1.2.1 Number.EPSILON
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 20.1.2.2 Number.isFinite(number)
	var $export = __webpack_require__(8);
	var _isFinite = __webpack_require__(4).isFinite;
	
	$export($export.S, 'Number', {
	  isFinite: function isFinite(it) {
	    return typeof it == 'number' && _isFinite(it);
	  }
	});

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 20.1.2.3 Number.isInteger(number)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Number', { isInteger: __webpack_require__(95) });

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 20.1.2.3 Number.isInteger(number)
	var isObject = __webpack_require__(13);
	var floor = Math.floor;
	module.exports = function isInteger(it) {
	  return !isObject(it) && isFinite(it) && floor(it) === it;
	};

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 20.1.2.4 Number.isNaN(number)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Number', {
	  isNaN: function isNaN(number) {
	    // eslint-disable-next-line no-self-compare
	    return number != number;
	  }
	});

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 20.1.2.5 Number.isSafeInteger(number)
	var $export = __webpack_require__(8);
	var isInteger = __webpack_require__(95);
	var abs = Math.abs;
	
	$export($export.S, 'Number', {
	  isSafeInteger: function isSafeInteger(number) {
	    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
	  }
	});

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 20.1.2.6 Number.MAX_SAFE_INTEGER
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 20.1.2.10 Number.MIN_SAFE_INTEGER
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $export = __webpack_require__(8);
	var $parseFloat = __webpack_require__(85);
	// 20.1.2.12 Number.parseFloat(string)
	$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $export = __webpack_require__(8);
	var $parseInt = __webpack_require__(81);
	// 20.1.2.13 Number.parseInt(string, radix)
	$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 20.2.2.3 Math.acosh(x)
	var $export = __webpack_require__(8);
	var log1p = __webpack_require__(103);
	var sqrt = Math.sqrt;
	var $acosh = Math.acosh;
	
	$export($export.S + $export.F * !($acosh
	// V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
	&& Math.floor($acosh(Number.MAX_VALUE)) == 710
	// Tor Browser bug: Math.acosh(Infinity) -> NaN
	&& $acosh(Infinity) == Infinity), 'Math', {
	  acosh: function acosh(x) {
	    return (x = +x) < 1 ? NaN : x > 94906265.62425156 ? Math.log(x) + Math.LN2 : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
	  }
	});

/***/ },
/* 103 */
/***/ function(module, exports) {

	"use strict";
	
	// 20.2.2.20 Math.log1p(x)
	module.exports = Math.log1p || function log1p(x) {
	  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
	};

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 20.2.2.5 Math.asinh(x)
	var $export = __webpack_require__(8);
	var $asinh = Math.asinh;
	
	function asinh(x) {
	  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
	}
	
	// Tor Browser bug: Math.asinh(0) -> -0
	$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 20.2.2.7 Math.atanh(x)
	var $export = __webpack_require__(8);
	var $atanh = Math.atanh;
	
	// Tor Browser bug: Math.atanh(-0) -> 0
	$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
	  atanh: function atanh(x) {
	    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
	  }
	});

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 20.2.2.9 Math.cbrt(x)
	var $export = __webpack_require__(8);
	var sign = __webpack_require__(107);
	
	$export($export.S, 'Math', {
	  cbrt: function cbrt(x) {
	    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
	  }
	});

/***/ },
/* 107 */
/***/ function(module, exports) {

	"use strict";
	
	// 20.2.2.28 Math.sign(x)
	module.exports = Math.sign || function sign(x) {
	  // eslint-disable-next-line no-self-compare
	  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
	};

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 20.2.2.11 Math.clz32(x)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  clz32: function clz32(x) {
	    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
	  }
	});

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 20.2.2.12 Math.cosh(x)
	var $export = __webpack_require__(8);
	var exp = Math.exp;
	
	$export($export.S, 'Math', {
	  cosh: function cosh(x) {
	    return (exp(x = +x) + exp(-x)) / 2;
	  }
	});

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 20.2.2.14 Math.expm1(x)
	var $export = __webpack_require__(8);
	var $expm1 = __webpack_require__(111);
	
	$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });

/***/ },
/* 111 */
/***/ function(module, exports) {

	"use strict";
	
	// 20.2.2.14 Math.expm1(x)
	var $expm1 = Math.expm1;
	module.exports = !$expm1
	// Old FF bug
	|| $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
	// Tor Browser bug
	|| $expm1(-2e-17) != -2e-17 ? function expm1(x) {
	  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
	} : $expm1;

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 20.2.2.16 Math.fround(x)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', { fround: __webpack_require__(113) });

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 20.2.2.16 Math.fround(x)
	var sign = __webpack_require__(107);
	var pow = Math.pow;
	var EPSILON = pow(2, -52);
	var EPSILON32 = pow(2, -23);
	var MAX32 = pow(2, 127) * (2 - EPSILON32);
	var MIN32 = pow(2, -126);
	
	var roundTiesToEven = function roundTiesToEven(n) {
	  return n + 1 / EPSILON - 1 / EPSILON;
	};
	
	module.exports = Math.fround || function fround(x) {
	  var $abs = Math.abs(x);
	  var $sign = sign(x);
	  var a, result;
	  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
	  a = (1 + EPSILON32 / EPSILON) * $abs;
	  result = a - (a - $abs);
	  // eslint-disable-next-line no-self-compare
	  if (result > MAX32 || result != result) return $sign * Infinity;
	  return $sign * result;
	};

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
	var $export = __webpack_require__(8);
	var abs = Math.abs;
	
	$export($export.S, 'Math', {
	  hypot: function hypot(value1, value2) {
	    // eslint-disable-line no-unused-vars
	    var sum = 0;
	    var i = 0;
	    var aLen = arguments.length;
	    var larg = 0;
	    var arg, div;
	    while (i < aLen) {
	      arg = abs(arguments[i++]);
	      if (larg < arg) {
	        div = larg / arg;
	        sum = sum * div * div + 1;
	        larg = arg;
	      } else if (arg > 0) {
	        div = arg / larg;
	        sum += div * div;
	      } else sum += arg;
	    }
	    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
	  }
	});

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 20.2.2.18 Math.imul(x, y)
	var $export = __webpack_require__(8);
	var $imul = Math.imul;
	
	// some WebKit versions fails with big numbers, some has wrong arity
	$export($export.S + $export.F * __webpack_require__(7)(function () {
	  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
	}), 'Math', {
	  imul: function imul(x, y) {
	    var UINT16 = 0xffff;
	    var xn = +x;
	    var yn = +y;
	    var xl = UINT16 & xn;
	    var yl = UINT16 & yn;
	    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
	  }
	});

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 20.2.2.21 Math.log10(x)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  log10: function log10(x) {
	    return Math.log(x) * Math.LOG10E;
	  }
	});

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 20.2.2.20 Math.log1p(x)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', { log1p: __webpack_require__(103) });

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 20.2.2.22 Math.log2(x)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  log2: function log2(x) {
	    return Math.log(x) / Math.LN2;
	  }
	});

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 20.2.2.28 Math.sign(x)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', { sign: __webpack_require__(107) });

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 20.2.2.30 Math.sinh(x)
	var $export = __webpack_require__(8);
	var expm1 = __webpack_require__(111);
	var exp = Math.exp;
	
	// V8 near Chromium 38 has a problem with very small numbers
	$export($export.S + $export.F * __webpack_require__(7)(function () {
	  return !Math.sinh(-2e-17) != -2e-17;
	}), 'Math', {
	  sinh: function sinh(x) {
	    return Math.abs(x = +x) < 1 ? (expm1(x) - expm1(-x)) / 2 : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
	  }
	});

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 20.2.2.33 Math.tanh(x)
	var $export = __webpack_require__(8);
	var expm1 = __webpack_require__(111);
	var exp = Math.exp;
	
	$export($export.S, 'Math', {
	  tanh: function tanh(x) {
	    var a = expm1(x = +x);
	    var b = expm1(-x);
	    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
	  }
	});

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 20.2.2.34 Math.trunc(x)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  trunc: function trunc(it) {
	    return (it > 0 ? Math.floor : Math.ceil)(it);
	  }
	});

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $export = __webpack_require__(8);
	var toAbsoluteIndex = __webpack_require__(39);
	var fromCharCode = String.fromCharCode;
	var $fromCodePoint = String.fromCodePoint;
	
	// length should be 1, old FF problem
	$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
	  // 21.1.2.2 String.fromCodePoint(...codePoints)
	  fromCodePoint: function fromCodePoint(x) {
	    // eslint-disable-line no-unused-vars
	    var res = [];
	    var aLen = arguments.length;
	    var i = 0;
	    var code;
	    while (aLen > i) {
	      code = +arguments[i++];
	      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
	      res.push(code < 0x10000 ? fromCharCode(code) : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00));
	    }return res.join('');
	  }
	});

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $export = __webpack_require__(8);
	var toIObject = __webpack_require__(32);
	var toLength = __webpack_require__(37);
	
	$export($export.S, 'String', {
	  // 21.1.2.4 String.raw(callSite, ...substitutions)
	  raw: function raw(callSite) {
	    var tpl = toIObject(callSite.raw);
	    var len = toLength(tpl.length);
	    var aLen = arguments.length;
	    var res = [];
	    var i = 0;
	    while (len > i) {
	      res.push(String(tpl[i++]));
	      if (i < aLen) res.push(String(arguments[i]));
	    }return res.join('');
	  }
	});

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 21.1.3.25 String.prototype.trim()
	
	__webpack_require__(82)('trim', function ($trim) {
	  return function trim() {
	    return $trim(this, 3);
	  };
	});

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $at = __webpack_require__(127)(true);
	
	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(128)(String, 'String', function (iterated) {
	  this._t = String(iterated); // target
	  this._i = 0; // next index
	  // 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var index = this._i;
	  var point;
	  if (index >= O.length) return { value: undefined, done: true };
	  point = $at(O, index);
	  this._i += point.length;
	  return { value: point, done: false };
	});

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var toInteger = __webpack_require__(38);
	var defined = __webpack_require__(35);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function (TO_STRING) {
	  return function (that, pos) {
	    var s = String(defined(that));
	    var i = toInteger(pos);
	    var l = s.length;
	    var a, b;
	    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var LIBRARY = __webpack_require__(28);
	var $export = __webpack_require__(8);
	var redefine = __webpack_require__(18);
	var hide = __webpack_require__(10);
	var has = __webpack_require__(5);
	var Iterators = __webpack_require__(129);
	var $iterCreate = __webpack_require__(130);
	var setToStringTag = __webpack_require__(24);
	var getPrototypeOf = __webpack_require__(58);
	var ITERATOR = __webpack_require__(25)('iterator');
	var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
	var FF_ITERATOR = '@@iterator';
	var KEYS = 'keys';
	var VALUES = 'values';
	
	var returnThis = function returnThis() {
	  return this;
	};
	
	module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function getMethod(kind) {
	    if (!BUGGY && kind in proto) return proto[kind];
	    switch (kind) {
	      case KEYS:
	        return function keys() {
	          return new Constructor(this, kind);
	        };
	      case VALUES:
	        return function values() {
	          return new Constructor(this, kind);
	        };
	    }return function entries() {
	      return new Constructor(this, kind);
	    };
	  };
	  var TAG = NAME + ' Iterator';
	  var DEF_VALUES = DEFAULT == VALUES;
	  var VALUES_BUG = false;
	  var proto = Base.prototype;
	  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
	  var $default = !BUGGY && $native || getMethod(DEFAULT);
	  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
	  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
	  var methods, key, IteratorPrototype;
	  // Fix native
	  if ($anyNative) {
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
	    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if (DEF_VALUES && $native && $native.name !== VALUES) {
	    VALUES_BUG = true;
	    $default = function values() {
	      return $native.call(this);
	    };
	  }
	  // Define iterator
	  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG] = returnThis;
	  if (DEFAULT) {
	    methods = {
	      values: DEF_VALUES ? $default : getMethod(VALUES),
	      keys: IS_SET ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if (FORCED) for (key in methods) {
	      if (!(key in proto)) redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};

/***/ },
/* 129 */
/***/ function(module, exports) {

	"use strict";
	
	module.exports = {};

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var create = __webpack_require__(45);
	var descriptor = __webpack_require__(17);
	var setToStringTag = __webpack_require__(24);
	var IteratorPrototype = {};
	
	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(10)(IteratorPrototype, __webpack_require__(25)('iterator'), function () {
	  return this;
	});
	
	module.exports = function (Constructor, NAME, next) {
	  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
	  setToStringTag(Constructor, NAME + ' Iterator');
	};

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $export = __webpack_require__(8);
	var $at = __webpack_require__(127)(false);
	$export($export.P, 'String', {
	  // 21.1.3.3 String.prototype.codePointAt(pos)
	  codePointAt: function codePointAt(pos) {
	    return $at(this, pos);
	  }
	});

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
	'use strict';
	
	var $export = __webpack_require__(8);
	var toLength = __webpack_require__(37);
	var context = __webpack_require__(133);
	var ENDS_WITH = 'endsWith';
	var $endsWith = ''[ENDS_WITH];
	
	$export($export.P + $export.F * __webpack_require__(135)(ENDS_WITH), 'String', {
	  endsWith: function endsWith(searchString /* , endPosition = @length */) {
	    var that = context(this, searchString, ENDS_WITH);
	    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
	    var len = toLength(that.length);
	    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
	    var search = String(searchString);
	    return $endsWith ? $endsWith.call(that, search, end) : that.slice(end - search.length, end) === search;
	  }
	});

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// helper for String#{startsWith, endsWith, includes}
	var isRegExp = __webpack_require__(134);
	var defined = __webpack_require__(35);
	
	module.exports = function (that, searchString, NAME) {
	  if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
	  return String(defined(that));
	};

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 7.2.8 IsRegExp(argument)
	var isObject = __webpack_require__(13);
	var cof = __webpack_require__(34);
	var MATCH = __webpack_require__(25)('match');
	module.exports = function (it) {
	  var isRegExp;
	  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
	};

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var MATCH = __webpack_require__(25)('match');
	module.exports = function (KEY) {
	  var re = /./;
	  try {
	    '/./'[KEY](re);
	  } catch (e) {
	    try {
	      re[MATCH] = false;
	      return !'/./'[KEY](re);
	    } catch (f) {/* empty */}
	  }return true;
	};

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	// 21.1.3.7 String.prototype.includes(searchString, position = 0)
	'use strict';
	
	var $export = __webpack_require__(8);
	var context = __webpack_require__(133);
	var INCLUDES = 'includes';
	
	$export($export.P + $export.F * __webpack_require__(135)(INCLUDES), 'String', {
	  includes: function includes(searchString /* , position = 0 */) {
	    return !!~context(this, searchString, INCLUDES).indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $export = __webpack_require__(8);
	
	$export($export.P, 'String', {
	  // 21.1.3.13 String.prototype.repeat(count)
	  repeat: __webpack_require__(90)
	});

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	// 21.1.3.18 String.prototype.startsWith(searchString [, position ])
	'use strict';
	
	var $export = __webpack_require__(8);
	var toLength = __webpack_require__(37);
	var context = __webpack_require__(133);
	var STARTS_WITH = 'startsWith';
	var $startsWith = ''[STARTS_WITH];
	
	$export($export.P + $export.F * __webpack_require__(135)(STARTS_WITH), 'String', {
	  startsWith: function startsWith(searchString /* , position = 0 */) {
	    var that = context(this, searchString, STARTS_WITH);
	    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
	    var search = String(searchString);
	    return $startsWith ? $startsWith.call(that, search, index) : that.slice(index, index + search.length) === search;
	  }
	});

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.2 String.prototype.anchor(name)
	
	__webpack_require__(140)('anchor', function (createHTML) {
	  return function anchor(name) {
	    return createHTML(this, 'a', 'name', name);
	  };
	});

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $export = __webpack_require__(8);
	var fails = __webpack_require__(7);
	var defined = __webpack_require__(35);
	var quot = /"/g;
	// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
	var createHTML = function createHTML(string, tag, attribute, value) {
	  var S = String(defined(string));
	  var p1 = '<' + tag;
	  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
	  return p1 + '>' + S + '</' + tag + '>';
	};
	module.exports = function (NAME, exec) {
	  var O = {};
	  O[NAME] = exec(createHTML);
	  $export($export.P + $export.F * fails(function () {
	    var test = ''[NAME]('"');
	    return test !== test.toLowerCase() || test.split('"').length > 3;
	  }), 'String', O);
	};

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.3 String.prototype.big()
	
	__webpack_require__(140)('big', function (createHTML) {
	  return function big() {
	    return createHTML(this, 'big', '', '');
	  };
	});

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.4 String.prototype.blink()
	
	__webpack_require__(140)('blink', function (createHTML) {
	  return function blink() {
	    return createHTML(this, 'blink', '', '');
	  };
	});

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.5 String.prototype.bold()
	
	__webpack_require__(140)('bold', function (createHTML) {
	  return function bold() {
	    return createHTML(this, 'b', '', '');
	  };
	});

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.6 String.prototype.fixed()
	
	__webpack_require__(140)('fixed', function (createHTML) {
	  return function fixed() {
	    return createHTML(this, 'tt', '', '');
	  };
	});

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.7 String.prototype.fontcolor(color)
	
	__webpack_require__(140)('fontcolor', function (createHTML) {
	  return function fontcolor(color) {
	    return createHTML(this, 'font', 'color', color);
	  };
	});

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.8 String.prototype.fontsize(size)
	
	__webpack_require__(140)('fontsize', function (createHTML) {
	  return function fontsize(size) {
	    return createHTML(this, 'font', 'size', size);
	  };
	});

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.9 String.prototype.italics()
	
	__webpack_require__(140)('italics', function (createHTML) {
	  return function italics() {
	    return createHTML(this, 'i', '', '');
	  };
	});

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.10 String.prototype.link(url)
	
	__webpack_require__(140)('link', function (createHTML) {
	  return function link(url) {
	    return createHTML(this, 'a', 'href', url);
	  };
	});

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.11 String.prototype.small()
	
	__webpack_require__(140)('small', function (createHTML) {
	  return function small() {
	    return createHTML(this, 'small', '', '');
	  };
	});

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.12 String.prototype.strike()
	
	__webpack_require__(140)('strike', function (createHTML) {
	  return function strike() {
	    return createHTML(this, 'strike', '', '');
	  };
	});

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.13 String.prototype.sub()
	
	__webpack_require__(140)('sub', function (createHTML) {
	  return function sub() {
	    return createHTML(this, 'sub', '', '');
	  };
	});

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.14 String.prototype.sup()
	
	__webpack_require__(140)('sup', function (createHTML) {
	  return function sup() {
	    return createHTML(this, 'sup', '', '');
	  };
	});

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 20.3.3.1 / 15.9.4.4 Date.now()
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Date', { now: function now() {
	    return new Date().getTime();
	  } });

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $export = __webpack_require__(8);
	var toObject = __webpack_require__(57);
	var toPrimitive = __webpack_require__(16);
	
	$export($export.P + $export.F * __webpack_require__(7)(function () {
	  return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({ toISOString: function toISOString() {
	      return 1;
	    } }) !== 1;
	}), 'Date', {
	  // eslint-disable-next-line no-unused-vars
	  toJSON: function toJSON(key) {
	    var O = toObject(this);
	    var pv = toPrimitive(O);
	    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
	  }
	});

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
	var $export = __webpack_require__(8);
	var toISOString = __webpack_require__(156);
	
	// PhantomJS / old WebKit has a broken implementations
	$export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {
	  toISOString: toISOString
	});

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
	
	var fails = __webpack_require__(7);
	var getTime = Date.prototype.getTime;
	var $toISOString = Date.prototype.toISOString;
	
	var lz = function lz(num) {
	  return num > 9 ? num : '0' + num;
	};
	
	// PhantomJS / old WebKit has a broken implementations
	module.exports = fails(function () {
	  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
	}) || !fails(function () {
	  $toISOString.call(new Date(NaN));
	}) ? function toISOString() {
	  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
	  var d = this;
	  var y = d.getUTCFullYear();
	  var m = d.getUTCMilliseconds();
	  var s = y < 0 ? '-' : y > 9999 ? '+' : '';
	  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) + '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) + 'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) + ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
	} : $toISOString;

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var DateProto = Date.prototype;
	var INVALID_DATE = 'Invalid Date';
	var TO_STRING = 'toString';
	var $toString = DateProto[TO_STRING];
	var getTime = DateProto.getTime;
	if (new Date(NaN) + '' != INVALID_DATE) {
	  __webpack_require__(18)(DateProto, TO_STRING, function toString() {
	    var value = getTime.call(this);
	    // eslint-disable-next-line no-self-compare
	    return value === value ? $toString.call(this) : INVALID_DATE;
	  });
	}

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var TO_PRIMITIVE = __webpack_require__(25)('toPrimitive');
	var proto = Date.prototype;
	
	if (!(TO_PRIMITIVE in proto)) __webpack_require__(10)(proto, TO_PRIMITIVE, __webpack_require__(159));

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var anObject = __webpack_require__(12);
	var toPrimitive = __webpack_require__(16);
	var NUMBER = 'number';
	
	module.exports = function (hint) {
	  if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');
	  return toPrimitive(anObject(this), hint != NUMBER);
	};

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Array', { isArray: __webpack_require__(44) });

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var ctx = __webpack_require__(20);
	var $export = __webpack_require__(8);
	var toObject = __webpack_require__(57);
	var call = __webpack_require__(162);
	var isArrayIter = __webpack_require__(163);
	var toLength = __webpack_require__(37);
	var createProperty = __webpack_require__(164);
	var getIterFn = __webpack_require__(165);
	
	$export($export.S + $export.F * !__webpack_require__(166)(function (iter) {
	  Array.from(iter);
	}), 'Array', {
	  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
	  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
	    var O = toObject(arrayLike);
	    var C = typeof this == 'function' ? this : Array;
	    var aLen = arguments.length;
	    var mapfn = aLen > 1 ? arguments[1] : undefined;
	    var mapping = mapfn !== undefined;
	    var index = 0;
	    var iterFn = getIterFn(O);
	    var length, result, step, iterator;
	    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
	    // if object isn't iterable or it's array with default iterator - use simple case
	    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
	      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
	        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
	      }
	    } else {
	      length = toLength(O.length);
	      for (result = new C(length); length > index; index++) {
	        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
	      }
	    }
	    result.length = index;
	    return result;
	  }
	});

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// call something on iterator step with safe closing on error
	var anObject = __webpack_require__(12);
	module.exports = function (iterator, fn, value, entries) {
	  try {
	    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
	    // 7.4.6 IteratorClose(iterator, completion)
	  } catch (e) {
	    var ret = iterator['return'];
	    if (ret !== undefined) anObject(ret.call(iterator));
	    throw e;
	  }
	};

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// check on default Array iterator
	var Iterators = __webpack_require__(129);
	var ITERATOR = __webpack_require__(25)('iterator');
	var ArrayProto = Array.prototype;
	
	module.exports = function (it) {
	  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
	};

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $defineProperty = __webpack_require__(11);
	var createDesc = __webpack_require__(17);
	
	module.exports = function (object, index, value) {
	  if (index in object) $defineProperty.f(object, index, createDesc(0, value));else object[index] = value;
	};

/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var classof = __webpack_require__(74);
	var ITERATOR = __webpack_require__(25)('iterator');
	var Iterators = __webpack_require__(129);
	module.exports = __webpack_require__(9).getIteratorMethod = function (it) {
	  if (it != undefined) return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
	};

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var ITERATOR = __webpack_require__(25)('iterator');
	var SAFE_CLOSING = false;
	
	try {
	  var riter = [7][ITERATOR]();
	  riter['return'] = function () {
	    SAFE_CLOSING = true;
	  };
	  // eslint-disable-next-line no-throw-literal
	  Array.from(riter, function () {
	    throw 2;
	  });
	} catch (e) {/* empty */}
	
	module.exports = function (exec, skipClosing) {
	  if (!skipClosing && !SAFE_CLOSING) return false;
	  var safe = false;
	  try {
	    var arr = [7];
	    var iter = arr[ITERATOR]();
	    iter.next = function () {
	      return { done: safe = true };
	    };
	    arr[ITERATOR] = function () {
	      return iter;
	    };
	    exec(arr);
	  } catch (e) {/* empty */}
	  return safe;
	};

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $export = __webpack_require__(8);
	var createProperty = __webpack_require__(164);
	
	// WebKit Array.of isn't generic
	$export($export.S + $export.F * __webpack_require__(7)(function () {
	  function F() {/* empty */}
	  return !(Array.of.call(F) instanceof F);
	}), 'Array', {
	  // 22.1.2.3 Array.of( ...items)
	  of: function of() /* ...args */{
	    var index = 0;
	    var aLen = arguments.length;
	    var result = new (typeof this == 'function' ? this : Array)(aLen);
	    while (aLen > index) {
	      createProperty(result, index, arguments[index++]);
	    }result.length = aLen;
	    return result;
	  }
	});

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 22.1.3.13 Array.prototype.join(separator)
	
	var $export = __webpack_require__(8);
	var toIObject = __webpack_require__(32);
	var arrayJoin = [].join;
	
	// fallback for not array-like strings
	$export($export.P + $export.F * (__webpack_require__(33) != Object || !__webpack_require__(169)(arrayJoin)), 'Array', {
	  join: function join(separator) {
	    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
	  }
	});

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var fails = __webpack_require__(7);
	
	module.exports = function (method, arg) {
	  return !!method && fails(function () {
	    // eslint-disable-next-line no-useless-call
	    arg ? method.call(null, function () {/* empty */}, 1) : method.call(null);
	  });
	};

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $export = __webpack_require__(8);
	var html = __webpack_require__(47);
	var cof = __webpack_require__(34);
	var toAbsoluteIndex = __webpack_require__(39);
	var toLength = __webpack_require__(37);
	var arraySlice = [].slice;
	
	// fallback for not array-like ES3 strings and DOM objects
	$export($export.P + $export.F * __webpack_require__(7)(function () {
	  if (html) arraySlice.call(html);
	}), 'Array', {
	  slice: function slice(begin, end) {
	    var len = toLength(this.length);
	    var klass = cof(this);
	    end = end === undefined ? len : end;
	    if (klass == 'Array') return arraySlice.call(this, begin, end);
	    var start = toAbsoluteIndex(begin, len);
	    var upTo = toAbsoluteIndex(end, len);
	    var size = toLength(upTo - start);
	    var cloned = new Array(size);
	    var i = 0;
	    for (; i < size; i++) {
	      cloned[i] = klass == 'String' ? this.charAt(start + i) : this[start + i];
	    }return cloned;
	  }
	});

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $export = __webpack_require__(8);
	var aFunction = __webpack_require__(21);
	var toObject = __webpack_require__(57);
	var fails = __webpack_require__(7);
	var $sort = [].sort;
	var test = [1, 2, 3];
	
	$export($export.P + $export.F * (fails(function () {
	  // IE8-
	  test.sort(undefined);
	}) || !fails(function () {
	  // V8 bug
	  test.sort(null);
	  // Old WebKit
	}) || !__webpack_require__(169)($sort)), 'Array', {
	  // 22.1.3.25 Array.prototype.sort(comparefn)
	  sort: function sort(comparefn) {
	    return comparefn === undefined ? $sort.call(toObject(this)) : $sort.call(toObject(this), aFunction(comparefn));
	  }
	});

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $export = __webpack_require__(8);
	var $forEach = __webpack_require__(173)(0);
	var STRICT = __webpack_require__(169)([].forEach, true);
	
	$export($export.P + $export.F * !STRICT, 'Array', {
	  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
	  forEach: function forEach(callbackfn /* , thisArg */) {
	    return $forEach(this, callbackfn, arguments[1]);
	  }
	});

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 0 -> Array#forEach
	// 1 -> Array#map
	// 2 -> Array#filter
	// 3 -> Array#some
	// 4 -> Array#every
	// 5 -> Array#find
	// 6 -> Array#findIndex
	var ctx = __webpack_require__(20);
	var IObject = __webpack_require__(33);
	var toObject = __webpack_require__(57);
	var toLength = __webpack_require__(37);
	var asc = __webpack_require__(174);
	module.exports = function (TYPE, $create) {
	  var IS_MAP = TYPE == 1;
	  var IS_FILTER = TYPE == 2;
	  var IS_SOME = TYPE == 3;
	  var IS_EVERY = TYPE == 4;
	  var IS_FIND_INDEX = TYPE == 6;
	  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
	  var create = $create || asc;
	  return function ($this, callbackfn, that) {
	    var O = toObject($this);
	    var self = IObject(O);
	    var f = ctx(callbackfn, that, 3);
	    var length = toLength(self.length);
	    var index = 0;
	    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
	    var val, res;
	    for (; length > index; index++) {
	      if (NO_HOLES || index in self) {
	        val = self[index];
	        res = f(val, index, O);
	        if (TYPE) {
	          if (IS_MAP) result[index] = res; // map
	          else if (res) switch (TYPE) {
	              case 3:
	                return true; // some
	              case 5:
	                return val; // find
	              case 6:
	                return index; // findIndex
	              case 2:
	                result.push(val); // filter
	            } else if (IS_EVERY) return false; // every
	        }
	      }
	    }return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
	  };
	};

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
	var speciesConstructor = __webpack_require__(175);
	
	module.exports = function (original, length) {
	  return new (speciesConstructor(original))(length);
	};

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isObject = __webpack_require__(13);
	var isArray = __webpack_require__(44);
	var SPECIES = __webpack_require__(25)('species');
	
	module.exports = function (original) {
	  var C;
	  if (isArray(original)) {
	    C = original.constructor;
	    // cross-realm fallback
	    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
	    if (isObject(C)) {
	      C = C[SPECIES];
	      if (C === null) C = undefined;
	    }
	  }return C === undefined ? Array : C;
	};

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $export = __webpack_require__(8);
	var $map = __webpack_require__(173)(1);
	
	$export($export.P + $export.F * !__webpack_require__(169)([].map, true), 'Array', {
	  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
	  map: function map(callbackfn /* , thisArg */) {
	    return $map(this, callbackfn, arguments[1]);
	  }
	});

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $export = __webpack_require__(8);
	var $filter = __webpack_require__(173)(2);
	
	$export($export.P + $export.F * !__webpack_require__(169)([].filter, true), 'Array', {
	  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
	  filter: function filter(callbackfn /* , thisArg */) {
	    return $filter(this, callbackfn, arguments[1]);
	  }
	});

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $export = __webpack_require__(8);
	var $some = __webpack_require__(173)(3);
	
	$export($export.P + $export.F * !__webpack_require__(169)([].some, true), 'Array', {
	  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
	  some: function some(callbackfn /* , thisArg */) {
	    return $some(this, callbackfn, arguments[1]);
	  }
	});

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $export = __webpack_require__(8);
	var $every = __webpack_require__(173)(4);
	
	$export($export.P + $export.F * !__webpack_require__(169)([].every, true), 'Array', {
	  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
	  every: function every(callbackfn /* , thisArg */) {
	    return $every(this, callbackfn, arguments[1]);
	  }
	});

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $export = __webpack_require__(8);
	var $reduce = __webpack_require__(181);
	
	$export($export.P + $export.F * !__webpack_require__(169)([].reduce, true), 'Array', {
	  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
	  reduce: function reduce(callbackfn /* , initialValue */) {
	    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
	  }
	});

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var aFunction = __webpack_require__(21);
	var toObject = __webpack_require__(57);
	var IObject = __webpack_require__(33);
	var toLength = __webpack_require__(37);
	
	module.exports = function (that, callbackfn, aLen, memo, isRight) {
	  aFunction(callbackfn);
	  var O = toObject(that);
	  var self = IObject(O);
	  var length = toLength(O.length);
	  var index = isRight ? length - 1 : 0;
	  var i = isRight ? -1 : 1;
	  if (aLen < 2) for (;;) {
	    if (index in self) {
	      memo = self[index];
	      index += i;
	      break;
	    }
	    index += i;
	    if (isRight ? index < 0 : length <= index) {
	      throw TypeError('Reduce of empty array with no initial value');
	    }
	  }
	  for (; isRight ? index >= 0 : length > index; index += i) {
	    if (index in self) {
	      memo = callbackfn(memo, self[index], index, O);
	    }
	  }return memo;
	};

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $export = __webpack_require__(8);
	var $reduce = __webpack_require__(181);
	
	$export($export.P + $export.F * !__webpack_require__(169)([].reduceRight, true), 'Array', {
	  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
	  reduceRight: function reduceRight(callbackfn /* , initialValue */) {
	    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
	  }
	});

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $export = __webpack_require__(8);
	var $indexOf = __webpack_require__(36)(false);
	var $native = [].indexOf;
	var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;
	
	$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(169)($native)), 'Array', {
	  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
	  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
	    return NEGATIVE_ZERO
	    // convert -0 to +0
	    ? $native.apply(this, arguments) || 0 : $indexOf(this, searchElement, arguments[1]);
	  }
	});

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $export = __webpack_require__(8);
	var toIObject = __webpack_require__(32);
	var toInteger = __webpack_require__(38);
	var toLength = __webpack_require__(37);
	var $native = [].lastIndexOf;
	var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;
	
	$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(169)($native)), 'Array', {
	  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
	  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
	    // convert -0 to +0
	    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
	    var O = toIObject(this);
	    var length = toLength(O.length);
	    var index = length - 1;
	    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
	    if (index < 0) index = length + index;
	    for (; index >= 0; index--) {
	      if (index in O) if (O[index] === searchElement) return index || 0;
	    }return -1;
	  }
	});

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
	var $export = __webpack_require__(8);
	
	$export($export.P, 'Array', { copyWithin: __webpack_require__(186) });
	
	__webpack_require__(187)('copyWithin');

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
	'use strict';
	
	var toObject = __webpack_require__(57);
	var toAbsoluteIndex = __webpack_require__(39);
	var toLength = __webpack_require__(37);
	
	module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
	  var O = toObject(this);
	  var len = toLength(O.length);
	  var to = toAbsoluteIndex(target, len);
	  var from = toAbsoluteIndex(start, len);
	  var end = arguments.length > 2 ? arguments[2] : undefined;
	  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
	  var inc = 1;
	  if (from < to && to < from + count) {
	    inc = -1;
	    from += count - 1;
	    to += count - 1;
	  }
	  while (count-- > 0) {
	    if (from in O) O[to] = O[from];else delete O[to];
	    to += inc;
	    from += inc;
	  }return O;
	};

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 22.1.3.31 Array.prototype[@@unscopables]
	var UNSCOPABLES = __webpack_require__(25)('unscopables');
	var ArrayProto = Array.prototype;
	if (ArrayProto[UNSCOPABLES] == undefined) __webpack_require__(10)(ArrayProto, UNSCOPABLES, {});
	module.exports = function (key) {
	  ArrayProto[UNSCOPABLES][key] = true;
	};

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
	var $export = __webpack_require__(8);
	
	$export($export.P, 'Array', { fill: __webpack_require__(189) });
	
	__webpack_require__(187)('fill');

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
	'use strict';
	
	var toObject = __webpack_require__(57);
	var toAbsoluteIndex = __webpack_require__(39);
	var toLength = __webpack_require__(37);
	module.exports = function fill(value /* , start = 0, end = @length */) {
	  var O = toObject(this);
	  var length = toLength(O.length);
	  var aLen = arguments.length;
	  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
	  var end = aLen > 2 ? arguments[2] : undefined;
	  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
	  while (endPos > index) {
	    O[index++] = value;
	  }return O;
	};

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
	
	var $export = __webpack_require__(8);
	var $find = __webpack_require__(173)(5);
	var KEY = 'find';
	var forced = true;
	// Shouldn't skip holes
	if (KEY in []) Array(1)[KEY](function () {
	  forced = false;
	});
	$export($export.P + $export.F * forced, 'Array', {
	  find: function find(callbackfn /* , that = undefined */) {
	    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});
	__webpack_require__(187)(KEY);

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
	
	var $export = __webpack_require__(8);
	var $find = __webpack_require__(173)(6);
	var KEY = 'findIndex';
	var forced = true;
	// Shouldn't skip holes
	if (KEY in []) Array(1)[KEY](function () {
	  forced = false;
	});
	$export($export.P + $export.F * forced, 'Array', {
	  findIndex: function findIndex(callbackfn /* , that = undefined */) {
	    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});
	__webpack_require__(187)(KEY);

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(193)('Array');

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var global = __webpack_require__(4);
	var dP = __webpack_require__(11);
	var DESCRIPTORS = __webpack_require__(6);
	var SPECIES = __webpack_require__(25)('species');
	
	module.exports = function (KEY) {
	  var C = global[KEY];
	  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
	    configurable: true,
	    get: function get() {
	      return this;
	    }
	  });
	};

/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var addToUnscopables = __webpack_require__(187);
	var step = __webpack_require__(195);
	var Iterators = __webpack_require__(129);
	var toIObject = __webpack_require__(32);
	
	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(128)(Array, 'Array', function (iterated, kind) {
	  this._t = toIObject(iterated); // target
	  this._i = 0; // next index
	  this._k = kind; // kind
	  // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var kind = this._k;
	  var index = this._i++;
	  if (!O || index >= O.length) {
	    this._t = undefined;
	    return step(1);
	  }
	  if (kind == 'keys') return step(0, index);
	  if (kind == 'values') return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');
	
	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;
	
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');

/***/ },
/* 195 */
/***/ function(module, exports) {

	"use strict";
	
	module.exports = function (done, value) {
	  return { value: value, done: !!done };
	};

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var global = __webpack_require__(4);
	var inheritIfRequired = __webpack_require__(87);
	var dP = __webpack_require__(11).f;
	var gOPN = __webpack_require__(49).f;
	var isRegExp = __webpack_require__(134);
	var $flags = __webpack_require__(197);
	var $RegExp = global.RegExp;
	var Base = $RegExp;
	var proto = $RegExp.prototype;
	var re1 = /a/g;
	var re2 = /a/g;
	// "new" creates a new object, old webkit buggy here
	var CORRECT_NEW = new $RegExp(re1) !== re1;
	
	if (__webpack_require__(6) && (!CORRECT_NEW || __webpack_require__(7)(function () {
	  re2[__webpack_require__(25)('match')] = false;
	  // RegExp constructor can alter flags and IsRegExp works correct with @@match
	  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
	}))) {
	  $RegExp = function RegExp(p, f) {
	    var tiRE = this instanceof $RegExp;
	    var piRE = isRegExp(p);
	    var fiU = f === undefined;
	    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p : inheritIfRequired(CORRECT_NEW ? new Base(piRE && !fiU ? p.source : p, f) : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f), tiRE ? this : proto, $RegExp);
	  };
	  var proxy = function proxy(key) {
	    key in $RegExp || dP($RegExp, key, {
	      configurable: true,
	      get: function get() {
	        return Base[key];
	      },
	      set: function set(it) {
	        Base[key] = it;
	      }
	    });
	  };
	  for (var keys = gOPN(Base), i = 0; keys.length > i;) {
	    proxy(keys[i++]);
	  }proto.constructor = $RegExp;
	  $RegExp.prototype = proto;
	  __webpack_require__(18)(global, 'RegExp', $RegExp);
	}
	
	__webpack_require__(193)('RegExp');

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 21.2.5.3 get RegExp.prototype.flags
	
	var anObject = __webpack_require__(12);
	module.exports = function () {
	  var that = anObject(this);
	  var result = '';
	  if (that.global) result += 'g';
	  if (that.ignoreCase) result += 'i';
	  if (that.multiline) result += 'm';
	  if (that.unicode) result += 'u';
	  if (that.sticky) result += 'y';
	  return result;
	};

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(199);
	var anObject = __webpack_require__(12);
	var $flags = __webpack_require__(197);
	var DESCRIPTORS = __webpack_require__(6);
	var TO_STRING = 'toString';
	var $toString = /./[TO_STRING];
	
	var define = function define(fn) {
	  __webpack_require__(18)(RegExp.prototype, TO_STRING, fn, true);
	};
	
	// 21.2.5.14 RegExp.prototype.toString()
	if (__webpack_require__(7)(function () {
	  return $toString.call({ source: 'a', flags: 'b' }) != '/a/b';
	})) {
	  define(function toString() {
	    var R = anObject(this);
	    return '/'.concat(R.source, '/', 'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
	  });
	  // FF44- RegExp#toString has a wrong name
	} else if ($toString.name != TO_STRING) {
	  define(function toString() {
	    return $toString.call(this);
	  });
	}

/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 21.2.5.3 get RegExp.prototype.flags()
	if (__webpack_require__(6) && /./g.flags != 'g') __webpack_require__(11).f(RegExp.prototype, 'flags', {
	  configurable: true,
	  get: __webpack_require__(197)
	});

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// @@match logic
	__webpack_require__(201)('match', 1, function (defined, MATCH, $match) {
	  // 21.1.3.11 String.prototype.match(regexp)
	  return [function match(regexp) {
	    'use strict';
	
	    var O = defined(this);
	    var fn = regexp == undefined ? undefined : regexp[MATCH];
	    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
	  }, $match];
	});

/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var hide = __webpack_require__(10);
	var redefine = __webpack_require__(18);
	var fails = __webpack_require__(7);
	var defined = __webpack_require__(35);
	var wks = __webpack_require__(25);
	
	module.exports = function (KEY, length, exec) {
	  var SYMBOL = wks(KEY);
	  var fns = exec(defined, SYMBOL, ''[KEY]);
	  var strfn = fns[0];
	  var rxfn = fns[1];
	  if (fails(function () {
	    var O = {};
	    O[SYMBOL] = function () {
	      return 7;
	    };
	    return ''[KEY](O) != 7;
	  })) {
	    redefine(String.prototype, KEY, strfn);
	    hide(RegExp.prototype, SYMBOL, length == 2
	    // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
	    // 21.2.5.11 RegExp.prototype[@@split](string, limit)
	    ? function (string, arg) {
	      return rxfn.call(string, this, arg);
	    }
	    // 21.2.5.6 RegExp.prototype[@@match](string)
	    // 21.2.5.9 RegExp.prototype[@@search](string)
	    : function (string) {
	      return rxfn.call(string, this);
	    });
	  }
	};

/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// @@replace logic
	__webpack_require__(201)('replace', 2, function (defined, REPLACE, $replace) {
	  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
	  return [function replace(searchValue, replaceValue) {
	    'use strict';
	
	    var O = defined(this);
	    var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
	    return fn !== undefined ? fn.call(searchValue, O, replaceValue) : $replace.call(String(O), searchValue, replaceValue);
	  }, $replace];
	});

/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// @@search logic
	__webpack_require__(201)('search', 1, function (defined, SEARCH, $search) {
	  // 21.1.3.15 String.prototype.search(regexp)
	  return [function search(regexp) {
	    'use strict';
	
	    var O = defined(this);
	    var fn = regexp == undefined ? undefined : regexp[SEARCH];
	    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
	  }, $search];
	});

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// @@split logic
	__webpack_require__(201)('split', 2, function (defined, SPLIT, $split) {
	  'use strict';
	
	  var isRegExp = __webpack_require__(134);
	  var _split = $split;
	  var $push = [].push;
	  var $SPLIT = 'split';
	  var LENGTH = 'length';
	  var LAST_INDEX = 'lastIndex';
	  if ('abbc'[$SPLIT](/(b)*/)[1] == 'c' || 'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 || 'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 || '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 || '.'[$SPLIT](/()()/)[LENGTH] > 1 || ''[$SPLIT](/.?/)[LENGTH]) {
	    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
	    // based on es5-shim implementation, need to rework it
	    $split = function $split(separator, limit) {
	      var string = String(this);
	      if (separator === undefined && limit === 0) return [];
	      // If `separator` is not a regex, use native split
	      if (!isRegExp(separator)) return _split.call(string, separator, limit);
	      var output = [];
	      var flags = (separator.ignoreCase ? 'i' : '') + (separator.multiline ? 'm' : '') + (separator.unicode ? 'u' : '') + (separator.sticky ? 'y' : '');
	      var lastLastIndex = 0;
	      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
	      // Make `global` and avoid `lastIndex` issues by working with a copy
	      var separatorCopy = new RegExp(separator.source, flags + 'g');
	      var separator2, match, lastIndex, lastLength, i;
	      // Doesn't need flags gy, but they don't hurt
	      if (!NPCG) separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
	      while (match = separatorCopy.exec(string)) {
	        // `separatorCopy.lastIndex` is not reliable cross-browser
	        lastIndex = match.index + match[0][LENGTH];
	        if (lastIndex > lastLastIndex) {
	          output.push(string.slice(lastLastIndex, match.index));
	          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
	          // eslint-disable-next-line no-loop-func
	          if (!NPCG && match[LENGTH] > 1) match[0].replace(separator2, function () {
	            for (i = 1; i < arguments[LENGTH] - 2; i++) {
	              if (arguments[i] === undefined) match[i] = undefined;
	            }
	          });
	          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
	          lastLength = match[0][LENGTH];
	          lastLastIndex = lastIndex;
	          if (output[LENGTH] >= splitLimit) break;
	        }
	        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
	      }
	      if (lastLastIndex === string[LENGTH]) {
	        if (lastLength || !separatorCopy.test('')) output.push('');
	      } else output.push(string.slice(lastLastIndex));
	      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
	    };
	    // Chakra, V8
	  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
	    $split = function $split(separator, limit) {
	      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
	    };
	  }
	  // 21.1.3.17 String.prototype.split(separator, limit)
	  return [function split(separator, limit) {
	    var O = defined(this);
	    var fn = separator == undefined ? undefined : separator[SPLIT];
	    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
	  }, $split];
	});

/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var LIBRARY = __webpack_require__(28);
	var global = __webpack_require__(4);
	var ctx = __webpack_require__(20);
	var classof = __webpack_require__(74);
	var $export = __webpack_require__(8);
	var isObject = __webpack_require__(13);
	var aFunction = __webpack_require__(21);
	var anInstance = __webpack_require__(206);
	var forOf = __webpack_require__(207);
	var speciesConstructor = __webpack_require__(208);
	var task = __webpack_require__(209).set;
	var microtask = __webpack_require__(210)();
	var newPromiseCapabilityModule = __webpack_require__(211);
	var perform = __webpack_require__(212);
	var promiseResolve = __webpack_require__(213);
	var PROMISE = 'Promise';
	var TypeError = global.TypeError;
	var process = global.process;
	var $Promise = global[PROMISE];
	var isNode = classof(process) == 'process';
	var empty = function empty() {/* empty */};
	var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
	var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;
	
	var USE_NATIVE = !!function () {
	  try {
	    // correct subclassing with @@species support
	    var promise = $Promise.resolve(1);
	    var FakePromise = (promise.constructor = {})[__webpack_require__(25)('species')] = function (exec) {
	      exec(empty, empty);
	    };
	    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
	  } catch (e) {/* empty */}
	}();
	
	// helpers
	var isThenable = function isThenable(it) {
	  var then;
	  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
	};
	var notify = function notify(promise, isReject) {
	  if (promise._n) return;
	  promise._n = true;
	  var chain = promise._c;
	  microtask(function () {
	    var value = promise._v;
	    var ok = promise._s == 1;
	    var i = 0;
	    var run = function run(reaction) {
	      var handler = ok ? reaction.ok : reaction.fail;
	      var resolve = reaction.resolve;
	      var reject = reaction.reject;
	      var domain = reaction.domain;
	      var result, then;
	      try {
	        if (handler) {
	          if (!ok) {
	            if (promise._h == 2) onHandleUnhandled(promise);
	            promise._h = 1;
	          }
	          if (handler === true) result = value;else {
	            if (domain) domain.enter();
	            result = handler(value);
	            if (domain) domain.exit();
	          }
	          if (result === reaction.promise) {
	            reject(TypeError('Promise-chain cycle'));
	          } else if (then = isThenable(result)) {
	            then.call(result, resolve, reject);
	          } else resolve(result);
	        } else reject(value);
	      } catch (e) {
	        reject(e);
	      }
	    };
	    while (chain.length > i) {
	      run(chain[i++]);
	    } // variable length - can't use forEach
	    promise._c = [];
	    promise._n = false;
	    if (isReject && !promise._h) onUnhandled(promise);
	  });
	};
	var onUnhandled = function onUnhandled(promise) {
	  task.call(global, function () {
	    var value = promise._v;
	    var unhandled = isUnhandled(promise);
	    var result, handler, console;
	    if (unhandled) {
	      result = perform(function () {
	        if (isNode) {
	          process.emit('unhandledRejection', value, promise);
	        } else if (handler = global.onunhandledrejection) {
	          handler({ promise: promise, reason: value });
	        } else if ((console = global.console) && console.error) {
	          console.error('Unhandled promise rejection', value);
	        }
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
	    }promise._a = undefined;
	    if (unhandled && result.e) throw result.v;
	  });
	};
	var isUnhandled = function isUnhandled(promise) {
	  return promise._h !== 1 && (promise._a || promise._c).length === 0;
	};
	var onHandleUnhandled = function onHandleUnhandled(promise) {
	  task.call(global, function () {
	    var handler;
	    if (isNode) {
	      process.emit('rejectionHandled', promise);
	    } else if (handler = global.onrejectionhandled) {
	      handler({ promise: promise, reason: promise._v });
	    }
	  });
	};
	var $reject = function $reject(value) {
	  var promise = this;
	  if (promise._d) return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  promise._v = value;
	  promise._s = 2;
	  if (!promise._a) promise._a = promise._c.slice();
	  notify(promise, true);
	};
	var $resolve = function $resolve(value) {
	  var promise = this;
	  var then;
	  if (promise._d) return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  try {
	    if (promise === value) throw TypeError("Promise can't be resolved itself");
	    if (then = isThenable(value)) {
	      microtask(function () {
	        var wrapper = { _w: promise, _d: false }; // wrap
	        try {
	          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
	        } catch (e) {
	          $reject.call(wrapper, e);
	        }
	      });
	    } else {
	      promise._v = value;
	      promise._s = 1;
	      notify(promise, false);
	    }
	  } catch (e) {
	    $reject.call({ _w: promise, _d: false }, e); // wrap
	  }
	};
	
	// constructor polyfill
	if (!USE_NATIVE) {
	  // 25.4.3.1 Promise(executor)
	  $Promise = function Promise(executor) {
	    anInstance(this, $Promise, PROMISE, '_h');
	    aFunction(executor);
	    Internal.call(this);
	    try {
	      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
	    } catch (err) {
	      $reject.call(this, err);
	    }
	  };
	  // eslint-disable-next-line no-unused-vars
	  Internal = function Promise(executor) {
	    this._c = []; // <- awaiting reactions
	    this._a = undefined; // <- checked in isUnhandled reactions
	    this._s = 0; // <- state
	    this._d = false; // <- done
	    this._v = undefined; // <- value
	    this._h = 0; // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
	    this._n = false; // <- notify
	  };
	  Internal.prototype = __webpack_require__(214)($Promise.prototype, {
	    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
	    then: function then(onFulfilled, onRejected) {
	      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
	      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
	      reaction.fail = typeof onRejected == 'function' && onRejected;
	      reaction.domain = isNode ? process.domain : undefined;
	      this._c.push(reaction);
	      if (this._a) this._a.push(reaction);
	      if (this._s) notify(this, false);
	      return reaction.promise;
	    },
	    // 25.4.5.1 Promise.prototype.catch(onRejected)
	    'catch': function _catch(onRejected) {
	      return this.then(undefined, onRejected);
	    }
	  });
	  OwnPromiseCapability = function OwnPromiseCapability() {
	    var promise = new Internal();
	    this.promise = promise;
	    this.resolve = ctx($resolve, promise, 1);
	    this.reject = ctx($reject, promise, 1);
	  };
	  newPromiseCapabilityModule.f = newPromiseCapability = function newPromiseCapability(C) {
	    return C === $Promise || C === Wrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
	  };
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
	__webpack_require__(24)($Promise, PROMISE);
	__webpack_require__(193)(PROMISE);
	Wrapper = __webpack_require__(9)[PROMISE];
	
	// statics
	$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
	  // 25.4.4.5 Promise.reject(r)
	  reject: function reject(r) {
	    var capability = newPromiseCapability(this);
	    var $$reject = capability.reject;
	    $$reject(r);
	    return capability.promise;
	  }
	});
	$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
	  // 25.4.4.6 Promise.resolve(x)
	  resolve: function resolve(x) {
	    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
	  }
	});
	$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(166)(function (iter) {
	  $Promise.all(iter)['catch'](empty);
	})), PROMISE, {
	  // 25.4.4.1 Promise.all(iterable)
	  all: function all(iterable) {
	    var C = this;
	    var capability = newPromiseCapability(C);
	    var resolve = capability.resolve;
	    var reject = capability.reject;
	    var result = perform(function () {
	      var values = [];
	      var index = 0;
	      var remaining = 1;
	      forOf(iterable, false, function (promise) {
	        var $index = index++;
	        var alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        C.resolve(promise).then(function (value) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[$index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if (result.e) reject(result.v);
	    return capability.promise;
	  },
	  // 25.4.4.4 Promise.race(iterable)
	  race: function race(iterable) {
	    var C = this;
	    var capability = newPromiseCapability(C);
	    var reject = capability.reject;
	    var result = perform(function () {
	      forOf(iterable, false, function (promise) {
	        C.resolve(promise).then(capability.resolve, reject);
	      });
	    });
	    if (result.e) reject(result.v);
	    return capability.promise;
	  }
	});

/***/ },
/* 206 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function (it, Constructor, name, forbiddenField) {
	  if (!(it instanceof Constructor) || forbiddenField !== undefined && forbiddenField in it) {
	    throw TypeError(name + ': incorrect invocation!');
	  }return it;
	};

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var ctx = __webpack_require__(20);
	var call = __webpack_require__(162);
	var isArrayIter = __webpack_require__(163);
	var anObject = __webpack_require__(12);
	var toLength = __webpack_require__(37);
	var getIterFn = __webpack_require__(165);
	var BREAK = {};
	var RETURN = {};
	var _exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
	  var iterFn = ITERATOR ? function () {
	    return iterable;
	  } : getIterFn(iterable);
	  var f = ctx(fn, that, entries ? 2 : 1);
	  var index = 0;
	  var length, step, iterator, result;
	  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
	  // fast case for arrays with default iterator
	  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
	    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
	    if (result === BREAK || result === RETURN) return result;
	  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
	    result = call(iterator, f, step.value, entries);
	    if (result === BREAK || result === RETURN) return result;
	  }
	};
	_exports.BREAK = BREAK;
	_exports.RETURN = RETURN;

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 7.3.20 SpeciesConstructor(O, defaultConstructor)
	var anObject = __webpack_require__(12);
	var aFunction = __webpack_require__(21);
	var SPECIES = __webpack_require__(25)('species');
	module.exports = function (O, D) {
	  var C = anObject(O).constructor;
	  var S;
	  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
	};

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var ctx = __webpack_require__(20);
	var invoke = __webpack_require__(77);
	var html = __webpack_require__(47);
	var cel = __webpack_require__(15);
	var global = __webpack_require__(4);
	var process = global.process;
	var setTask = global.setImmediate;
	var clearTask = global.clearImmediate;
	var MessageChannel = global.MessageChannel;
	var Dispatch = global.Dispatch;
	var counter = 0;
	var queue = {};
	var ONREADYSTATECHANGE = 'onreadystatechange';
	var defer, channel, port;
	var run = function run() {
	  var id = +this;
	  // eslint-disable-next-line no-prototype-builtins
	  if (queue.hasOwnProperty(id)) {
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	};
	var listener = function listener(event) {
	  run.call(event.data);
	};
	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if (!setTask || !clearTask) {
	  setTask = function setImmediate(fn) {
	    var args = [];
	    var i = 1;
	    while (arguments.length > i) {
	      args.push(arguments[i++]);
	    }queue[++counter] = function () {
	      // eslint-disable-next-line no-new-func
	      invoke(typeof fn == 'function' ? fn : Function(fn), args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clearTask = function clearImmediate(id) {
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if (__webpack_require__(34)(process) == 'process') {
	    defer = function defer(id) {
	      process.nextTick(ctx(run, id, 1));
	    };
	    // Sphere (JS game engine) Dispatch API
	  } else if (Dispatch && Dispatch.now) {
	    defer = function defer(id) {
	      Dispatch.now(ctx(run, id, 1));
	    };
	    // Browsers with MessageChannel, includes WebWorkers
	  } else if (MessageChannel) {
	    channel = new MessageChannel();
	    port = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = ctx(port.postMessage, port, 1);
	    // Browsers with postMessage, skip WebWorkers
	    // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
	    defer = function defer(id) {
	      global.postMessage(id + '', '*');
	    };
	    global.addEventListener('message', listener, false);
	    // IE8-
	  } else if (ONREADYSTATECHANGE in cel('script')) {
	    defer = function defer(id) {
	      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
	        html.removeChild(this);
	        run.call(id);
	      };
	    };
	    // Rest old browsers
	  } else {
	    defer = function defer(id) {
	      setTimeout(ctx(run, id, 1), 0);
	    };
	  }
	}
	module.exports = {
	  set: setTask,
	  clear: clearTask
	};

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var global = __webpack_require__(4);
	var macrotask = __webpack_require__(209).set;
	var Observer = global.MutationObserver || global.WebKitMutationObserver;
	var process = global.process;
	var Promise = global.Promise;
	var isNode = __webpack_require__(34)(process) == 'process';
	
	module.exports = function () {
	  var head, last, notify;
	
	  var flush = function flush() {
	    var parent, fn;
	    if (isNode && (parent = process.domain)) parent.exit();
	    while (head) {
	      fn = head.fn;
	      head = head.next;
	      try {
	        fn();
	      } catch (e) {
	        if (head) notify();else last = undefined;
	        throw e;
	      }
	    }last = undefined;
	    if (parent) parent.enter();
	  };
	
	  // Node.js
	  if (isNode) {
	    notify = function notify() {
	      process.nextTick(flush);
	    };
	    // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
	  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
	    var toggle = true;
	    var node = document.createTextNode('');
	    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
	    notify = function notify() {
	      node.data = toggle = !toggle;
	    };
	    // environments with maybe non-completely correct, but existent Promise
	  } else if (Promise && Promise.resolve) {
	    var promise = Promise.resolve();
	    notify = function notify() {
	      promise.then(flush);
	    };
	    // for other environments - macrotask based on:
	    // - setImmediate
	    // - MessageChannel
	    // - window.postMessag
	    // - onreadystatechange
	    // - setTimeout
	  } else {
	    notify = function notify() {
	      // strange IE + webpack dev server bug - use .call(global)
	      macrotask.call(global, flush);
	    };
	  }
	
	  return function (fn) {
	    var task = { fn: fn, next: undefined };
	    if (last) last.next = task;
	    if (!head) {
	      head = task;
	      notify();
	    }last = task;
	  };
	};

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 25.4.1.5 NewPromiseCapability(C)
	
	var aFunction = __webpack_require__(21);
	
	function PromiseCapability(C) {
	  var resolve, reject;
	  this.promise = new C(function ($$resolve, $$reject) {
	    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject = $$reject;
	  });
	  this.resolve = aFunction(resolve);
	  this.reject = aFunction(reject);
	}
	
	module.exports.f = function (C) {
	  return new PromiseCapability(C);
	};

/***/ },
/* 212 */
/***/ function(module, exports) {

	"use strict";
	
	module.exports = function (exec) {
	  try {
	    return { e: false, v: exec() };
	  } catch (e) {
	    return { e: true, v: e };
	  }
	};

/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var anObject = __webpack_require__(12);
	var isObject = __webpack_require__(13);
	var newPromiseCapability = __webpack_require__(211);
	
	module.exports = function (C, x) {
	  anObject(C);
	  if (isObject(x) && x.constructor === C) return x;
	  var promiseCapability = newPromiseCapability.f(C);
	  var resolve = promiseCapability.resolve;
	  resolve(x);
	  return promiseCapability.promise;
	};

/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var redefine = __webpack_require__(18);
	module.exports = function (target, src, safe) {
	  for (var key in src) {
	    redefine(target, key, src[key], safe);
	  }return target;
	};

/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var strong = __webpack_require__(216);
	var validate = __webpack_require__(217);
	var MAP = 'Map';
	
	// 23.1 Map Objects
	module.exports = __webpack_require__(218)(MAP, function (get) {
	  return function Map() {
	    return get(this, arguments.length > 0 ? arguments[0] : undefined);
	  };
	}, {
	  // 23.1.3.6 Map.prototype.get(key)
	  get: function get(key) {
	    var entry = strong.getEntry(validate(this, MAP), key);
	    return entry && entry.v;
	  },
	  // 23.1.3.9 Map.prototype.set(key, value)
	  set: function set(key, value) {
	    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
	  }
	}, strong, true);

/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var dP = __webpack_require__(11).f;
	var create = __webpack_require__(45);
	var redefineAll = __webpack_require__(214);
	var ctx = __webpack_require__(20);
	var anInstance = __webpack_require__(206);
	var forOf = __webpack_require__(207);
	var $iterDefine = __webpack_require__(128);
	var step = __webpack_require__(195);
	var setSpecies = __webpack_require__(193);
	var DESCRIPTORS = __webpack_require__(6);
	var fastKey = __webpack_require__(22).fastKey;
	var validate = __webpack_require__(217);
	var SIZE = DESCRIPTORS ? '_s' : 'size';
	
	var getEntry = function getEntry(that, key) {
	  // fast case
	  var index = fastKey(key);
	  var entry;
	  if (index !== 'F') return that._i[index];
	  // frozen object case
	  for (entry = that._f; entry; entry = entry.n) {
	    if (entry.k == key) return entry;
	  }
	};
	
	module.exports = {
	  getConstructor: function getConstructor(wrapper, NAME, IS_MAP, ADDER) {
	    var C = wrapper(function (that, iterable) {
	      anInstance(that, C, NAME, '_i');
	      that._t = NAME; // collection type
	      that._i = create(null); // index
	      that._f = undefined; // first entry
	      that._l = undefined; // last entry
	      that[SIZE] = 0; // size
	      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    redefineAll(C.prototype, {
	      // 23.1.3.1 Map.prototype.clear()
	      // 23.2.3.2 Set.prototype.clear()
	      clear: function clear() {
	        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
	          entry.r = true;
	          if (entry.p) entry.p = entry.p.n = undefined;
	          delete data[entry.i];
	        }
	        that._f = that._l = undefined;
	        that[SIZE] = 0;
	      },
	      // 23.1.3.3 Map.prototype.delete(key)
	      // 23.2.3.4 Set.prototype.delete(value)
	      'delete': function _delete(key) {
	        var that = validate(this, NAME);
	        var entry = getEntry(that, key);
	        if (entry) {
	          var next = entry.n;
	          var prev = entry.p;
	          delete that._i[entry.i];
	          entry.r = true;
	          if (prev) prev.n = next;
	          if (next) next.p = prev;
	          if (that._f == entry) that._f = next;
	          if (that._l == entry) that._l = prev;
	          that[SIZE]--;
	        }return !!entry;
	      },
	      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
	      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
	      forEach: function forEach(callbackfn /* , that = undefined */) {
	        validate(this, NAME);
	        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
	        var entry;
	        while (entry = entry ? entry.n : this._f) {
	          f(entry.v, entry.k, this);
	          // revert to the last existing entry
	          while (entry && entry.r) {
	            entry = entry.p;
	          }
	        }
	      },
	      // 23.1.3.7 Map.prototype.has(key)
	      // 23.2.3.7 Set.prototype.has(value)
	      has: function has(key) {
	        return !!getEntry(validate(this, NAME), key);
	      }
	    });
	    if (DESCRIPTORS) dP(C.prototype, 'size', {
	      get: function get() {
	        return validate(this, NAME)[SIZE];
	      }
	    });
	    return C;
	  },
	  def: function def(that, key, value) {
	    var entry = getEntry(that, key);
	    var prev, index;
	    // change existing entry
	    if (entry) {
	      entry.v = value;
	      // create new entry
	    } else {
	      that._l = entry = {
	        i: index = fastKey(key, true), // <- index
	        k: key, // <- key
	        v: value, // <- value
	        p: prev = that._l, // <- previous entry
	        n: undefined, // <- next entry
	        r: false // <- removed
	      };
	      if (!that._f) that._f = entry;
	      if (prev) prev.n = entry;
	      that[SIZE]++;
	      // add to index
	      if (index !== 'F') that._i[index] = entry;
	    }return that;
	  },
	  getEntry: getEntry,
	  setStrong: function setStrong(C, NAME, IS_MAP) {
	    // add .keys, .values, .entries, [@@iterator]
	    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
	    $iterDefine(C, NAME, function (iterated, kind) {
	      this._t = validate(iterated, NAME); // target
	      this._k = kind; // kind
	      this._l = undefined; // previous
	    }, function () {
	      var that = this;
	      var kind = that._k;
	      var entry = that._l;
	      // revert to the last existing entry
	      while (entry && entry.r) {
	        entry = entry.p;
	      } // get next entry
	      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
	        // or finish the iteration
	        that._t = undefined;
	        return step(1);
	      }
	      // return step by kind
	      if (kind == 'keys') return step(0, entry.k);
	      if (kind == 'values') return step(0, entry.v);
	      return step(0, [entry.k, entry.v]);
	    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);
	
	    // add [@@species], 23.1.2.2, 23.2.2.2
	    setSpecies(NAME);
	  }
	};

/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isObject = __webpack_require__(13);
	module.exports = function (it, TYPE) {
	  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
	  return it;
	};

/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var global = __webpack_require__(4);
	var $export = __webpack_require__(8);
	var redefine = __webpack_require__(18);
	var redefineAll = __webpack_require__(214);
	var meta = __webpack_require__(22);
	var forOf = __webpack_require__(207);
	var anInstance = __webpack_require__(206);
	var isObject = __webpack_require__(13);
	var fails = __webpack_require__(7);
	var $iterDetect = __webpack_require__(166);
	var setToStringTag = __webpack_require__(24);
	var inheritIfRequired = __webpack_require__(87);
	
	module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
	  var Base = global[NAME];
	  var C = Base;
	  var ADDER = IS_MAP ? 'set' : 'add';
	  var proto = C && C.prototype;
	  var O = {};
	  var fixMethod = function fixMethod(KEY) {
	    var fn = proto[KEY];
	    redefine(proto, KEY, KEY == 'delete' ? function (a) {
	      return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
	    } : KEY == 'has' ? function has(a) {
	      return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
	    } : KEY == 'get' ? function get(a) {
	      return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
	    } : KEY == 'add' ? function add(a) {
	      fn.call(this, a === 0 ? 0 : a);return this;
	    } : function set(a, b) {
	      fn.call(this, a === 0 ? 0 : a, b);return this;
	    });
	  };
	  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
	    new C().entries().next();
	  }))) {
	    // create collection constructor
	    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
	    redefineAll(C.prototype, methods);
	    meta.NEED = true;
	  } else {
	    var instance = new C();
	    // early implementations not supports chaining
	    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
	    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
	    var THROWS_ON_PRIMITIVES = fails(function () {
	      instance.has(1);
	    });
	    // most early implementations doesn't supports iterables, most modern - not close it correctly
	    var ACCEPT_ITERABLES = $iterDetect(function (iter) {
	      new C(iter);
	    }); // eslint-disable-line no-new
	    // for early implementations -0 and +0 not the same
	    var BUGGY_ZERO = !IS_WEAK && fails(function () {
	      // V8 ~ Chromium 42- fails only with 5+ elements
	      var $instance = new C();
	      var index = 5;
	      while (index--) {
	        $instance[ADDER](index, index);
	      }return !$instance.has(-0);
	    });
	    if (!ACCEPT_ITERABLES) {
	      C = wrapper(function (target, iterable) {
	        anInstance(target, C, NAME);
	        var that = inheritIfRequired(new Base(), target, C);
	        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
	        return that;
	      });
	      C.prototype = proto;
	      proto.constructor = C;
	    }
	    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
	      fixMethod('delete');
	      fixMethod('has');
	      IS_MAP && fixMethod('get');
	    }
	    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
	    // weak collections should not contains .clear method
	    if (IS_WEAK && proto.clear) delete proto.clear;
	  }
	
	  setToStringTag(C, NAME);
	
	  O[NAME] = C;
	  $export($export.G + $export.W + $export.F * (C != Base), O);
	
	  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);
	
	  return C;
	};

/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var strong = __webpack_require__(216);
	var validate = __webpack_require__(217);
	var SET = 'Set';
	
	// 23.2 Set Objects
	module.exports = __webpack_require__(218)(SET, function (get) {
	  return function Set() {
	    return get(this, arguments.length > 0 ? arguments[0] : undefined);
	  };
	}, {
	  // 23.2.3.1 Set.prototype.add(value)
	  add: function add(value) {
	    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
	  }
	}, strong);

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var each = __webpack_require__(173)(0);
	var redefine = __webpack_require__(18);
	var meta = __webpack_require__(22);
	var assign = __webpack_require__(68);
	var weak = __webpack_require__(221);
	var isObject = __webpack_require__(13);
	var fails = __webpack_require__(7);
	var validate = __webpack_require__(217);
	var WEAK_MAP = 'WeakMap';
	var getWeak = meta.getWeak;
	var isExtensible = Object.isExtensible;
	var uncaughtFrozenStore = weak.ufstore;
	var tmp = {};
	var InternalMap;
	
	var wrapper = function wrapper(get) {
	  return function WeakMap() {
	    return get(this, arguments.length > 0 ? arguments[0] : undefined);
	  };
	};
	
	var methods = {
	  // 23.3.3.3 WeakMap.prototype.get(key)
	  get: function get(key) {
	    if (isObject(key)) {
	      var data = getWeak(key);
	      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
	      return data ? data[this._i] : undefined;
	    }
	  },
	  // 23.3.3.5 WeakMap.prototype.set(key, value)
	  set: function set(key, value) {
	    return weak.def(validate(this, WEAK_MAP), key, value);
	  }
	};
	
	// 23.3 WeakMap Objects
	var $WeakMap = module.exports = __webpack_require__(218)(WEAK_MAP, wrapper, methods, weak, true, true);
	
	// IE11 WeakMap frozen keys fix
	if (fails(function () {
	  return new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7;
	})) {
	  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
	  assign(InternalMap.prototype, methods);
	  meta.NEED = true;
	  each(['delete', 'has', 'get', 'set'], function (key) {
	    var proto = $WeakMap.prototype;
	    var method = proto[key];
	    redefine(proto, key, function (a, b) {
	      // store frozen objects on internal weakmap shim
	      if (isObject(a) && !isExtensible(a)) {
	        if (!this._f) this._f = new InternalMap();
	        var result = this._f[key](a, b);
	        return key == 'set' ? this : result;
	        // store all the rest on native weakmap
	      }return method.call(this, a, b);
	    });
	  });
	}

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var redefineAll = __webpack_require__(214);
	var getWeak = __webpack_require__(22).getWeak;
	var anObject = __webpack_require__(12);
	var isObject = __webpack_require__(13);
	var anInstance = __webpack_require__(206);
	var forOf = __webpack_require__(207);
	var createArrayMethod = __webpack_require__(173);
	var $has = __webpack_require__(5);
	var validate = __webpack_require__(217);
	var arrayFind = createArrayMethod(5);
	var arrayFindIndex = createArrayMethod(6);
	var id = 0;
	
	// fallback for uncaught frozen keys
	var uncaughtFrozenStore = function uncaughtFrozenStore(that) {
	  return that._l || (that._l = new UncaughtFrozenStore());
	};
	var UncaughtFrozenStore = function UncaughtFrozenStore() {
	  this.a = [];
	};
	var findUncaughtFrozen = function findUncaughtFrozen(store, key) {
	  return arrayFind(store.a, function (it) {
	    return it[0] === key;
	  });
	};
	UncaughtFrozenStore.prototype = {
	  get: function get(key) {
	    var entry = findUncaughtFrozen(this, key);
	    if (entry) return entry[1];
	  },
	  has: function has(key) {
	    return !!findUncaughtFrozen(this, key);
	  },
	  set: function set(key, value) {
	    var entry = findUncaughtFrozen(this, key);
	    if (entry) entry[1] = value;else this.a.push([key, value]);
	  },
	  'delete': function _delete(key) {
	    var index = arrayFindIndex(this.a, function (it) {
	      return it[0] === key;
	    });
	    if (~index) this.a.splice(index, 1);
	    return !!~index;
	  }
	};
	
	module.exports = {
	  getConstructor: function getConstructor(wrapper, NAME, IS_MAP, ADDER) {
	    var C = wrapper(function (that, iterable) {
	      anInstance(that, C, NAME, '_i');
	      that._t = NAME; // collection type
	      that._i = id++; // collection id
	      that._l = undefined; // leak store for uncaught frozen objects
	      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    redefineAll(C.prototype, {
	      // 23.3.3.2 WeakMap.prototype.delete(key)
	      // 23.4.3.3 WeakSet.prototype.delete(value)
	      'delete': function _delete(key) {
	        if (!isObject(key)) return false;
	        var data = getWeak(key);
	        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
	        return data && $has(data, this._i) && delete data[this._i];
	      },
	      // 23.3.3.4 WeakMap.prototype.has(key)
	      // 23.4.3.4 WeakSet.prototype.has(value)
	      has: function has(key) {
	        if (!isObject(key)) return false;
	        var data = getWeak(key);
	        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
	        return data && $has(data, this._i);
	      }
	    });
	    return C;
	  },
	  def: function def(that, key, value) {
	    var data = getWeak(anObject(key), true);
	    if (data === true) uncaughtFrozenStore(that).set(key, value);else data[that._i] = value;
	    return that;
	  },
	  ufstore: uncaughtFrozenStore
	};

/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var weak = __webpack_require__(221);
	var validate = __webpack_require__(217);
	var WEAK_SET = 'WeakSet';
	
	// 23.4 WeakSet Objects
	__webpack_require__(218)(WEAK_SET, function (get) {
	  return function WeakSet() {
	    return get(this, arguments.length > 0 ? arguments[0] : undefined);
	  };
	}, {
	  // 23.4.3.1 WeakSet.prototype.add(value)
	  add: function add(value) {
	    return weak.def(validate(this, WEAK_SET), value, true);
	  }
	}, weak, false, true);

/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $export = __webpack_require__(8);
	var $typed = __webpack_require__(224);
	var buffer = __webpack_require__(225);
	var anObject = __webpack_require__(12);
	var toAbsoluteIndex = __webpack_require__(39);
	var toLength = __webpack_require__(37);
	var isObject = __webpack_require__(13);
	var ArrayBuffer = __webpack_require__(4).ArrayBuffer;
	var speciesConstructor = __webpack_require__(208);
	var $ArrayBuffer = buffer.ArrayBuffer;
	var $DataView = buffer.DataView;
	var $isView = $typed.ABV && ArrayBuffer.isView;
	var $slice = $ArrayBuffer.prototype.slice;
	var VIEW = $typed.VIEW;
	var ARRAY_BUFFER = 'ArrayBuffer';
	
	$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });
	
	$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
	  // 24.1.3.1 ArrayBuffer.isView(arg)
	  isView: function isView(it) {
	    return $isView && $isView(it) || isObject(it) && VIEW in it;
	  }
	});
	
	$export($export.P + $export.U + $export.F * __webpack_require__(7)(function () {
	  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
	}), ARRAY_BUFFER, {
	  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
	  slice: function slice(start, end) {
	    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix
	    var len = anObject(this).byteLength;
	    var first = toAbsoluteIndex(start, len);
	    var final = toAbsoluteIndex(end === undefined ? len : end, len);
	    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(final - first));
	    var viewS = new $DataView(this);
	    var viewT = new $DataView(result);
	    var index = 0;
	    while (first < final) {
	      viewT.setUint8(index++, viewS.getUint8(first++));
	    }return result;
	  }
	});
	
	__webpack_require__(193)(ARRAY_BUFFER);

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var global = __webpack_require__(4);
	var hide = __webpack_require__(10);
	var uid = __webpack_require__(19);
	var TYPED = uid('typed_array');
	var VIEW = uid('view');
	var ABV = !!(global.ArrayBuffer && global.DataView);
	var CONSTR = ABV;
	var i = 0;
	var l = 9;
	var Typed;
	
	var TypedArrayConstructors = 'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'.split(',');
	
	while (i < l) {
	  if (Typed = global[TypedArrayConstructors[i++]]) {
	    hide(Typed.prototype, TYPED, true);
	    hide(Typed.prototype, VIEW, true);
	  } else CONSTR = false;
	}
	
	module.exports = {
	  ABV: ABV,
	  CONSTR: CONSTR,
	  TYPED: TYPED,
	  VIEW: VIEW
	};

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var global = __webpack_require__(4);
	var DESCRIPTORS = __webpack_require__(6);
	var LIBRARY = __webpack_require__(28);
	var $typed = __webpack_require__(224);
	var hide = __webpack_require__(10);
	var redefineAll = __webpack_require__(214);
	var fails = __webpack_require__(7);
	var anInstance = __webpack_require__(206);
	var toInteger = __webpack_require__(38);
	var toLength = __webpack_require__(37);
	var toIndex = __webpack_require__(226);
	var gOPN = __webpack_require__(49).f;
	var dP = __webpack_require__(11).f;
	var arrayFill = __webpack_require__(189);
	var setToStringTag = __webpack_require__(24);
	var ARRAY_BUFFER = 'ArrayBuffer';
	var DATA_VIEW = 'DataView';
	var PROTOTYPE = 'prototype';
	var WRONG_LENGTH = 'Wrong length!';
	var WRONG_INDEX = 'Wrong index!';
	var $ArrayBuffer = global[ARRAY_BUFFER];
	var $DataView = global[DATA_VIEW];
	var Math = global.Math;
	var RangeError = global.RangeError;
	// eslint-disable-next-line no-shadow-restricted-names
	var Infinity = global.Infinity;
	var BaseBuffer = $ArrayBuffer;
	var abs = Math.abs;
	var pow = Math.pow;
	var floor = Math.floor;
	var log = Math.log;
	var LN2 = Math.LN2;
	var BUFFER = 'buffer';
	var BYTE_LENGTH = 'byteLength';
	var BYTE_OFFSET = 'byteOffset';
	var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;
	var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;
	var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;
	
	// IEEE754 conversions based on https://github.com/feross/ieee754
	function packIEEE754(value, mLen, nBytes) {
	  var buffer = new Array(nBytes);
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
	  var i = 0;
	  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
	  var e, m, c;
	  value = abs(value);
	  // eslint-disable-next-line no-self-compare
	  if (value != value || value === Infinity) {
	    // eslint-disable-next-line no-self-compare
	    m = value != value ? 1 : 0;
	    e = eMax;
	  } else {
	    e = floor(log(value) / LN2);
	    if (value * (c = pow(2, -e)) < 1) {
	      e--;
	      c *= 2;
	    }
	    if (e + eBias >= 1) {
	      value += rt / c;
	    } else {
	      value += rt * pow(2, 1 - eBias);
	    }
	    if (value * c >= 2) {
	      e++;
	      c /= 2;
	    }
	    if (e + eBias >= eMax) {
	      m = 0;
	      e = eMax;
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * pow(2, eBias - 1) * pow(2, mLen);
	      e = 0;
	    }
	  }
	  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8) {}
	  e = e << mLen | m;
	  eLen += mLen;
	  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8) {}
	  buffer[--i] |= s * 128;
	  return buffer;
	}
	function unpackIEEE754(buffer, mLen, nBytes) {
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var nBits = eLen - 7;
	  var i = nBytes - 1;
	  var s = buffer[i--];
	  var e = s & 127;
	  var m;
	  s >>= 7;
	  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8) {}
	  m = e & (1 << -nBits) - 1;
	  e >>= -nBits;
	  nBits += mLen;
	  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8) {}
	  if (e === 0) {
	    e = 1 - eBias;
	  } else if (e === eMax) {
	    return m ? NaN : s ? -Infinity : Infinity;
	  } else {
	    m = m + pow(2, mLen);
	    e = e - eBias;
	  }return (s ? -1 : 1) * m * pow(2, e - mLen);
	}
	
	function unpackI32(bytes) {
	  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
	}
	function packI8(it) {
	  return [it & 0xff];
	}
	function packI16(it) {
	  return [it & 0xff, it >> 8 & 0xff];
	}
	function packI32(it) {
	  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
	}
	function packF64(it) {
	  return packIEEE754(it, 52, 8);
	}
	function packF32(it) {
	  return packIEEE754(it, 23, 4);
	}
	
	function addGetter(C, key, internal) {
	  dP(C[PROTOTYPE], key, { get: function get() {
	      return this[internal];
	    } });
	}
	
	function get(view, bytes, index, isLittleEndian) {
	  var numIndex = +index;
	  var intIndex = toIndex(numIndex);
	  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
	  var store = view[$BUFFER]._b;
	  var start = intIndex + view[$OFFSET];
	  var pack = store.slice(start, start + bytes);
	  return isLittleEndian ? pack : pack.reverse();
	}
	function set(view, bytes, index, conversion, value, isLittleEndian) {
	  var numIndex = +index;
	  var intIndex = toIndex(numIndex);
	  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
	  var store = view[$BUFFER]._b;
	  var start = intIndex + view[$OFFSET];
	  var pack = conversion(+value);
	  for (var i = 0; i < bytes; i++) {
	    store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
	  }
	}
	
	if (!$typed.ABV) {
	  $ArrayBuffer = function ArrayBuffer(length) {
	    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
	    var byteLength = toIndex(length);
	    this._b = arrayFill.call(new Array(byteLength), 0);
	    this[$LENGTH] = byteLength;
	  };
	
	  $DataView = function DataView(buffer, byteOffset, byteLength) {
	    anInstance(this, $DataView, DATA_VIEW);
	    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
	    var bufferLength = buffer[$LENGTH];
	    var offset = toInteger(byteOffset);
	    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
	    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
	    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
	    this[$BUFFER] = buffer;
	    this[$OFFSET] = offset;
	    this[$LENGTH] = byteLength;
	  };
	
	  if (DESCRIPTORS) {
	    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
	    addGetter($DataView, BUFFER, '_b');
	    addGetter($DataView, BYTE_LENGTH, '_l');
	    addGetter($DataView, BYTE_OFFSET, '_o');
	  }
	
	  redefineAll($DataView[PROTOTYPE], {
	    getInt8: function getInt8(byteOffset) {
	      return get(this, 1, byteOffset)[0] << 24 >> 24;
	    },
	    getUint8: function getUint8(byteOffset) {
	      return get(this, 1, byteOffset)[0];
	    },
	    getInt16: function getInt16(byteOffset /* , littleEndian */) {
	      var bytes = get(this, 2, byteOffset, arguments[1]);
	      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
	    },
	    getUint16: function getUint16(byteOffset /* , littleEndian */) {
	      var bytes = get(this, 2, byteOffset, arguments[1]);
	      return bytes[1] << 8 | bytes[0];
	    },
	    getInt32: function getInt32(byteOffset /* , littleEndian */) {
	      return unpackI32(get(this, 4, byteOffset, arguments[1]));
	    },
	    getUint32: function getUint32(byteOffset /* , littleEndian */) {
	      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
	    },
	    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
	      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
	    },
	    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
	      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
	    },
	    setInt8: function setInt8(byteOffset, value) {
	      set(this, 1, byteOffset, packI8, value);
	    },
	    setUint8: function setUint8(byteOffset, value) {
	      set(this, 1, byteOffset, packI8, value);
	    },
	    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
	      set(this, 2, byteOffset, packI16, value, arguments[2]);
	    },
	    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
	      set(this, 2, byteOffset, packI16, value, arguments[2]);
	    },
	    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
	      set(this, 4, byteOffset, packI32, value, arguments[2]);
	    },
	    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
	      set(this, 4, byteOffset, packI32, value, arguments[2]);
	    },
	    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
	      set(this, 4, byteOffset, packF32, value, arguments[2]);
	    },
	    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
	      set(this, 8, byteOffset, packF64, value, arguments[2]);
	    }
	  });
	} else {
	  if (!fails(function () {
	    $ArrayBuffer(1);
	  }) || !fails(function () {
	    new $ArrayBuffer(-1); // eslint-disable-line no-new
	  }) || fails(function () {
	    new $ArrayBuffer(); // eslint-disable-line no-new
	    new $ArrayBuffer(1.5); // eslint-disable-line no-new
	    new $ArrayBuffer(NaN); // eslint-disable-line no-new
	    return $ArrayBuffer.name != ARRAY_BUFFER;
	  })) {
	    $ArrayBuffer = function ArrayBuffer(length) {
	      anInstance(this, $ArrayBuffer);
	      return new BaseBuffer(toIndex(length));
	    };
	    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
	    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
	      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
	    }
	    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
	  }
	  // iOS Safari 7.x bug
	  var view = new $DataView(new $ArrayBuffer(2));
	  var $setInt8 = $DataView[PROTOTYPE].setInt8;
	  view.setInt8(0, 2147483648);
	  view.setInt8(1, 2147483649);
	  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
	    setInt8: function setInt8(byteOffset, value) {
	      $setInt8.call(this, byteOffset, value << 24 >> 24);
	    },
	    setUint8: function setUint8(byteOffset, value) {
	      $setInt8.call(this, byteOffset, value << 24 >> 24);
	    }
	  }, true);
	}
	setToStringTag($ArrayBuffer, ARRAY_BUFFER);
	setToStringTag($DataView, DATA_VIEW);
	hide($DataView[PROTOTYPE], $typed.VIEW, true);
	exports[ARRAY_BUFFER] = $ArrayBuffer;
	exports[DATA_VIEW] = $DataView;

/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// https://tc39.github.io/ecma262/#sec-toindex
	var toInteger = __webpack_require__(38);
	var toLength = __webpack_require__(37);
	module.exports = function (it) {
	  if (it === undefined) return 0;
	  var number = toInteger(it);
	  var length = toLength(number);
	  if (number !== length) throw RangeError('Wrong length!');
	  return length;
	};

/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $export = __webpack_require__(8);
	$export($export.G + $export.W + $export.F * !__webpack_require__(224).ABV, {
	  DataView: __webpack_require__(225).DataView
	});

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(229)('Int8', 1, function (init) {
	  return function Int8Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	if (__webpack_require__(6)) {
	  var LIBRARY = __webpack_require__(28);
	  var global = __webpack_require__(4);
	  var fails = __webpack_require__(7);
	  var $export = __webpack_require__(8);
	  var $typed = __webpack_require__(224);
	  var $buffer = __webpack_require__(225);
	  var ctx = __webpack_require__(20);
	  var anInstance = __webpack_require__(206);
	  var propertyDesc = __webpack_require__(17);
	  var hide = __webpack_require__(10);
	  var redefineAll = __webpack_require__(214);
	  var toInteger = __webpack_require__(38);
	  var toLength = __webpack_require__(37);
	  var toIndex = __webpack_require__(226);
	  var toAbsoluteIndex = __webpack_require__(39);
	  var toPrimitive = __webpack_require__(16);
	  var has = __webpack_require__(5);
	  var classof = __webpack_require__(74);
	  var isObject = __webpack_require__(13);
	  var toObject = __webpack_require__(57);
	  var isArrayIter = __webpack_require__(163);
	  var create = __webpack_require__(45);
	  var getPrototypeOf = __webpack_require__(58);
	  var gOPN = __webpack_require__(49).f;
	  var getIterFn = __webpack_require__(165);
	  var uid = __webpack_require__(19);
	  var wks = __webpack_require__(25);
	  var createArrayMethod = __webpack_require__(173);
	  var createArrayIncludes = __webpack_require__(36);
	  var speciesConstructor = __webpack_require__(208);
	  var ArrayIterators = __webpack_require__(194);
	  var Iterators = __webpack_require__(129);
	  var $iterDetect = __webpack_require__(166);
	  var setSpecies = __webpack_require__(193);
	  var arrayFill = __webpack_require__(189);
	  var arrayCopyWithin = __webpack_require__(186);
	  var $DP = __webpack_require__(11);
	  var $GOPD = __webpack_require__(50);
	  var dP = $DP.f;
	  var gOPD = $GOPD.f;
	  var RangeError = global.RangeError;
	  var TypeError = global.TypeError;
	  var Uint8Array = global.Uint8Array;
	  var ARRAY_BUFFER = 'ArrayBuffer';
	  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
	  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
	  var PROTOTYPE = 'prototype';
	  var ArrayProto = Array[PROTOTYPE];
	  var $ArrayBuffer = $buffer.ArrayBuffer;
	  var $DataView = $buffer.DataView;
	  var arrayForEach = createArrayMethod(0);
	  var arrayFilter = createArrayMethod(2);
	  var arraySome = createArrayMethod(3);
	  var arrayEvery = createArrayMethod(4);
	  var arrayFind = createArrayMethod(5);
	  var arrayFindIndex = createArrayMethod(6);
	  var arrayIncludes = createArrayIncludes(true);
	  var arrayIndexOf = createArrayIncludes(false);
	  var arrayValues = ArrayIterators.values;
	  var arrayKeys = ArrayIterators.keys;
	  var arrayEntries = ArrayIterators.entries;
	  var arrayLastIndexOf = ArrayProto.lastIndexOf;
	  var arrayReduce = ArrayProto.reduce;
	  var arrayReduceRight = ArrayProto.reduceRight;
	  var arrayJoin = ArrayProto.join;
	  var arraySort = ArrayProto.sort;
	  var arraySlice = ArrayProto.slice;
	  var arrayToString = ArrayProto.toString;
	  var arrayToLocaleString = ArrayProto.toLocaleString;
	  var ITERATOR = wks('iterator');
	  var TAG = wks('toStringTag');
	  var TYPED_CONSTRUCTOR = uid('typed_constructor');
	  var DEF_CONSTRUCTOR = uid('def_constructor');
	  var ALL_CONSTRUCTORS = $typed.CONSTR;
	  var TYPED_ARRAY = $typed.TYPED;
	  var VIEW = $typed.VIEW;
	  var WRONG_LENGTH = 'Wrong length!';
	
	  var $map = createArrayMethod(1, function (O, length) {
	    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
	  });
	
	  var LITTLE_ENDIAN = fails(function () {
	    // eslint-disable-next-line no-undef
	    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
	  });
	
	  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
	    new Uint8Array(1).set({});
	  });
	
	  var toOffset = function toOffset(it, BYTES) {
	    var offset = toInteger(it);
	    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
	    return offset;
	  };
	
	  var validate = function validate(it) {
	    if (isObject(it) && TYPED_ARRAY in it) return it;
	    throw TypeError(it + ' is not a typed array!');
	  };
	
	  var allocate = function allocate(C, length) {
	    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
	      throw TypeError('It is not a typed array constructor!');
	    }return new C(length);
	  };
	
	  var speciesFromList = function speciesFromList(O, list) {
	    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
	  };
	
	  var fromList = function fromList(C, list) {
	    var index = 0;
	    var length = list.length;
	    var result = allocate(C, length);
	    while (length > index) {
	      result[index] = list[index++];
	    }return result;
	  };
	
	  var addGetter = function addGetter(it, key, internal) {
	    dP(it, key, { get: function get() {
	        return this._d[internal];
	      } });
	  };
	
	  var $from = function from(source /* , mapfn, thisArg */) {
	    var O = toObject(source);
	    var aLen = arguments.length;
	    var mapfn = aLen > 1 ? arguments[1] : undefined;
	    var mapping = mapfn !== undefined;
	    var iterFn = getIterFn(O);
	    var i, length, values, result, step, iterator;
	    if (iterFn != undefined && !isArrayIter(iterFn)) {
	      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
	        values.push(step.value);
	      }O = values;
	    }
	    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
	    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
	      result[i] = mapping ? mapfn(O[i], i) : O[i];
	    }
	    return result;
	  };
	
	  var $of = function of() /* ...items */{
	    var index = 0;
	    var length = arguments.length;
	    var result = allocate(this, length);
	    while (length > index) {
	      result[index] = arguments[index++];
	    }return result;
	  };
	
	  // iOS Safari 6.x fails here
	  var TO_LOCALE_BUG = !!Uint8Array && fails(function () {
	    arrayToLocaleString.call(new Uint8Array(1));
	  });
	
	  var $toLocaleString = function toLocaleString() {
	    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
	  };
	
	  var proto = {
	    copyWithin: function copyWithin(target, start /* , end */) {
	      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    every: function every(callbackfn /* , thisArg */) {
	      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    fill: function fill(value /* , start, end */) {
	      // eslint-disable-line no-unused-vars
	      return arrayFill.apply(validate(this), arguments);
	    },
	    filter: function filter(callbackfn /* , thisArg */) {
	      return speciesFromList(this, arrayFilter(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined));
	    },
	    find: function find(predicate /* , thisArg */) {
	      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    findIndex: function findIndex(predicate /* , thisArg */) {
	      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    forEach: function forEach(callbackfn /* , thisArg */) {
	      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    indexOf: function indexOf(searchElement /* , fromIndex */) {
	      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    includes: function includes(searchElement /* , fromIndex */) {
	      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    join: function join(separator) {
	      // eslint-disable-line no-unused-vars
	      return arrayJoin.apply(validate(this), arguments);
	    },
	    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) {
	      // eslint-disable-line no-unused-vars
	      return arrayLastIndexOf.apply(validate(this), arguments);
	    },
	    map: function map(mapfn /* , thisArg */) {
	      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    reduce: function reduce(callbackfn /* , initialValue */) {
	      // eslint-disable-line no-unused-vars
	      return arrayReduce.apply(validate(this), arguments);
	    },
	    reduceRight: function reduceRight(callbackfn /* , initialValue */) {
	      // eslint-disable-line no-unused-vars
	      return arrayReduceRight.apply(validate(this), arguments);
	    },
	    reverse: function reverse() {
	      var that = this;
	      var length = validate(that).length;
	      var middle = Math.floor(length / 2);
	      var index = 0;
	      var value;
	      while (index < middle) {
	        value = that[index];
	        that[index++] = that[--length];
	        that[length] = value;
	      }return that;
	    },
	    some: function some(callbackfn /* , thisArg */) {
	      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    sort: function sort(comparefn) {
	      return arraySort.call(validate(this), comparefn);
	    },
	    subarray: function subarray(begin, end) {
	      var O = validate(this);
	      var length = O.length;
	      var $begin = toAbsoluteIndex(begin, length);
	      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(O.buffer, O.byteOffset + $begin * O.BYTES_PER_ELEMENT, toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin));
	    }
	  };
	
	  var $slice = function slice(start, end) {
	    return speciesFromList(this, arraySlice.call(validate(this), start, end));
	  };
	
	  var $set = function set(arrayLike /* , offset */) {
	    validate(this);
	    var offset = toOffset(arguments[1], 1);
	    var length = this.length;
	    var src = toObject(arrayLike);
	    var len = toLength(src.length);
	    var index = 0;
	    if (len + offset > length) throw RangeError(WRONG_LENGTH);
	    while (index < len) {
	      this[offset + index] = src[index++];
	    }
	  };
	
	  var $iterators = {
	    entries: function entries() {
	      return arrayEntries.call(validate(this));
	    },
	    keys: function keys() {
	      return arrayKeys.call(validate(this));
	    },
	    values: function values() {
	      return arrayValues.call(validate(this));
	    }
	  };
	
	  var isTAIndex = function isTAIndex(target, key) {
	    return isObject(target) && target[TYPED_ARRAY] && (typeof key === 'undefined' ? 'undefined' : _typeof(key)) != 'symbol' && key in target && String(+key) == String(key);
	  };
	  var $getDesc = function getOwnPropertyDescriptor(target, key) {
	    return isTAIndex(target, key = toPrimitive(key, true)) ? propertyDesc(2, target[key]) : gOPD(target, key);
	  };
	  var $setDesc = function defineProperty(target, key, desc) {
	    if (isTAIndex(target, key = toPrimitive(key, true)) && isObject(desc) && has(desc, 'value') && !has(desc, 'get') && !has(desc, 'set')
	    // TODO: add validation descriptor w/o calling accessors
	    && !desc.configurable && (!has(desc, 'writable') || desc.writable) && (!has(desc, 'enumerable') || desc.enumerable)) {
	      target[key] = desc.value;
	      return target;
	    }return dP(target, key, desc);
	  };
	
	  if (!ALL_CONSTRUCTORS) {
	    $GOPD.f = $getDesc;
	    $DP.f = $setDesc;
	  }
	
	  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
	    getOwnPropertyDescriptor: $getDesc,
	    defineProperty: $setDesc
	  });
	
	  if (fails(function () {
	    arrayToString.call({});
	  })) {
	    arrayToString = arrayToLocaleString = function toString() {
	      return arrayJoin.call(this);
	    };
	  }
	
	  var $TypedArrayPrototype$ = redefineAll({}, proto);
	  redefineAll($TypedArrayPrototype$, $iterators);
	  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
	  redefineAll($TypedArrayPrototype$, {
	    slice: $slice,
	    set: $set,
	    constructor: function constructor() {/* noop */},
	    toString: arrayToString,
	    toLocaleString: $toLocaleString
	  });
	  addGetter($TypedArrayPrototype$, 'buffer', 'b');
	  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
	  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
	  addGetter($TypedArrayPrototype$, 'length', 'e');
	  dP($TypedArrayPrototype$, TAG, {
	    get: function get() {
	      return this[TYPED_ARRAY];
	    }
	  });
	
	  // eslint-disable-next-line max-statements
	  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
	    CLAMPED = !!CLAMPED;
	    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
	    var GETTER = 'get' + KEY;
	    var SETTER = 'set' + KEY;
	    var TypedArray = global[NAME];
	    var Base = TypedArray || {};
	    var TAC = TypedArray && getPrototypeOf(TypedArray);
	    var FORCED = !TypedArray || !$typed.ABV;
	    var O = {};
	    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
	    var getter = function getter(that, index) {
	      var data = that._d;
	      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
	    };
	    var setter = function setter(that, index, value) {
	      var data = that._d;
	      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
	      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
	    };
	    var addElement = function addElement(that, index) {
	      dP(that, index, {
	        get: function get() {
	          return getter(this, index);
	        },
	        set: function set(value) {
	          return setter(this, index, value);
	        },
	        enumerable: true
	      });
	    };
	    if (FORCED) {
	      TypedArray = wrapper(function (that, data, $offset, $length) {
	        anInstance(that, TypedArray, NAME, '_d');
	        var index = 0;
	        var offset = 0;
	        var buffer, byteLength, length, klass;
	        if (!isObject(data)) {
	          length = toIndex(data);
	          byteLength = length * BYTES;
	          buffer = new $ArrayBuffer(byteLength);
	        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
	          buffer = data;
	          offset = toOffset($offset, BYTES);
	          var $len = data.byteLength;
	          if ($length === undefined) {
	            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
	            byteLength = $len - offset;
	            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
	          } else {
	            byteLength = toLength($length) * BYTES;
	            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
	          }
	          length = byteLength / BYTES;
	        } else if (TYPED_ARRAY in data) {
	          return fromList(TypedArray, data);
	        } else {
	          return $from.call(TypedArray, data);
	        }
	        hide(that, '_d', {
	          b: buffer,
	          o: offset,
	          l: byteLength,
	          e: length,
	          v: new $DataView(buffer)
	        });
	        while (index < length) {
	          addElement(that, index++);
	        }
	      });
	      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
	      hide(TypedArrayPrototype, 'constructor', TypedArray);
	    } else if (!fails(function () {
	      TypedArray(1);
	    }) || !fails(function () {
	      new TypedArray(-1); // eslint-disable-line no-new
	    }) || !$iterDetect(function (iter) {
	      new TypedArray(); // eslint-disable-line no-new
	      new TypedArray(null); // eslint-disable-line no-new
	      new TypedArray(1.5); // eslint-disable-line no-new
	      new TypedArray(iter); // eslint-disable-line no-new
	    }, true)) {
	      TypedArray = wrapper(function (that, data, $offset, $length) {
	        anInstance(that, TypedArray, NAME);
	        var klass;
	        // `ws` module bug, temporarily remove validation length for Uint8Array
	        // https://github.com/websockets/ws/pull/645
	        if (!isObject(data)) return new Base(toIndex(data));
	        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
	          return $length !== undefined ? new Base(data, toOffset($offset, BYTES), $length) : $offset !== undefined ? new Base(data, toOffset($offset, BYTES)) : new Base(data);
	        }
	        if (TYPED_ARRAY in data) return fromList(TypedArray, data);
	        return $from.call(TypedArray, data);
	      });
	      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
	        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
	      });
	      TypedArray[PROTOTYPE] = TypedArrayPrototype;
	      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
	    }
	    var $nativeIterator = TypedArrayPrototype[ITERATOR];
	    var CORRECT_ITER_NAME = !!$nativeIterator && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
	    var $iterator = $iterators.values;
	    hide(TypedArray, TYPED_CONSTRUCTOR, true);
	    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
	    hide(TypedArrayPrototype, VIEW, true);
	    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);
	
	    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
	      dP(TypedArrayPrototype, TAG, {
	        get: function get() {
	          return NAME;
	        }
	      });
	    }
	
	    O[NAME] = TypedArray;
	
	    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);
	
	    $export($export.S, NAME, {
	      BYTES_PER_ELEMENT: BYTES
	    });
	
	    $export($export.S + $export.F * fails(function () {
	      Base.of.call(TypedArray, 1);
	    }), NAME, {
	      from: $from,
	      of: $of
	    });
	
	    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);
	
	    $export($export.P, NAME, proto);
	
	    setSpecies(NAME);
	
	    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });
	
	    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);
	
	    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;
	
	    $export($export.P + $export.F * fails(function () {
	      new TypedArray(1).slice();
	    }), NAME, { slice: $slice });
	
	    $export($export.P + $export.F * (fails(function () {
	      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
	    }) || !fails(function () {
	      TypedArrayPrototype.toLocaleString.call([1, 2]);
	    })), NAME, { toLocaleString: $toLocaleString });
	
	    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
	    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
	  };
	} else module.exports = function () {/* empty */};

/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(229)('Uint8', 1, function (init) {
	  return function Uint8Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(229)('Uint8', 1, function (init) {
	  return function Uint8ClampedArray(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	}, true);

/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(229)('Int16', 2, function (init) {
	  return function Int16Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(229)('Uint16', 2, function (init) {
	  return function Uint16Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(229)('Int32', 4, function (init) {
	  return function Int32Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(229)('Uint32', 4, function (init) {
	  return function Uint32Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(229)('Float32', 4, function (init) {
	  return function Float32Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(229)('Float64', 8, function (init) {
	  return function Float64Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
	var $export = __webpack_require__(8);
	var aFunction = __webpack_require__(21);
	var anObject = __webpack_require__(12);
	var rApply = (__webpack_require__(4).Reflect || {}).apply;
	var fApply = Function.apply;
	// MS Edge argumentsList argument is optional
	$export($export.S + $export.F * !__webpack_require__(7)(function () {
	  rApply(function () {/* empty */});
	}), 'Reflect', {
	  apply: function apply(target, thisArgument, argumentsList) {
	    var T = aFunction(target);
	    var L = anObject(argumentsList);
	    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
	  }
	});

/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
	var $export = __webpack_require__(8);
	var create = __webpack_require__(45);
	var aFunction = __webpack_require__(21);
	var anObject = __webpack_require__(12);
	var isObject = __webpack_require__(13);
	var fails = __webpack_require__(7);
	var bind = __webpack_require__(76);
	var rConstruct = (__webpack_require__(4).Reflect || {}).construct;
	
	// MS Edge supports only 2 arguments and argumentsList argument is optional
	// FF Nightly sets third argument as `new.target`, but does not create `this` from it
	var NEW_TARGET_BUG = fails(function () {
	  function F() {/* empty */}
	  return !(rConstruct(function () {/* empty */}, [], F) instanceof F);
	});
	var ARGS_BUG = !fails(function () {
	  rConstruct(function () {/* empty */});
	});
	
	$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
	  construct: function construct(Target, args /* , newTarget */) {
	    aFunction(Target);
	    anObject(args);
	    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
	    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
	    if (Target == newTarget) {
	      // w/o altered newTarget, optimization for 0-4 arguments
	      switch (args.length) {
	        case 0:
	          return new Target();
	        case 1:
	          return new Target(args[0]);
	        case 2:
	          return new Target(args[0], args[1]);
	        case 3:
	          return new Target(args[0], args[1], args[2]);
	        case 4:
	          return new Target(args[0], args[1], args[2], args[3]);
	      }
	      // w/o altered newTarget, lot of arguments case
	      var $args = [null];
	      $args.push.apply($args, args);
	      return new (bind.apply(Target, $args))();
	    }
	    // with altered newTarget, not support built-in constructors
	    var proto = newTarget.prototype;
	    var instance = create(isObject(proto) ? proto : Object.prototype);
	    var result = Function.apply.call(Target, instance, args);
	    return isObject(result) ? result : instance;
	  }
	});

/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
	var dP = __webpack_require__(11);
	var $export = __webpack_require__(8);
	var anObject = __webpack_require__(12);
	var toPrimitive = __webpack_require__(16);
	
	// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
	$export($export.S + $export.F * __webpack_require__(7)(function () {
	  // eslint-disable-next-line no-undef
	  Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });
	}), 'Reflect', {
	  defineProperty: function defineProperty(target, propertyKey, attributes) {
	    anObject(target);
	    propertyKey = toPrimitive(propertyKey, true);
	    anObject(attributes);
	    try {
	      dP.f(target, propertyKey, attributes);
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }
	});

/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 26.1.4 Reflect.deleteProperty(target, propertyKey)
	var $export = __webpack_require__(8);
	var gOPD = __webpack_require__(50).f;
	var anObject = __webpack_require__(12);
	
	$export($export.S, 'Reflect', {
	  deleteProperty: function deleteProperty(target, propertyKey) {
	    var desc = gOPD(anObject(target), propertyKey);
	    return desc && !desc.configurable ? false : delete target[propertyKey];
	  }
	});

/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 26.1.5 Reflect.enumerate(target)
	
	var $export = __webpack_require__(8);
	var anObject = __webpack_require__(12);
	var Enumerate = function Enumerate(iterated) {
	  this._t = anObject(iterated); // target
	  this._i = 0; // next index
	  var keys = this._k = []; // keys
	  var key;
	  for (key in iterated) {
	    keys.push(key);
	  }
	};
	__webpack_require__(130)(Enumerate, 'Object', function () {
	  var that = this;
	  var keys = that._k;
	  var key;
	  do {
	    if (that._i >= keys.length) return { value: undefined, done: true };
	  } while (!((key = keys[that._i++]) in that._t));
	  return { value: key, done: false };
	});
	
	$export($export.S, 'Reflect', {
	  enumerate: function enumerate(target) {
	    return new Enumerate(target);
	  }
	});

/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 26.1.6 Reflect.get(target, propertyKey [, receiver])
	var gOPD = __webpack_require__(50);
	var getPrototypeOf = __webpack_require__(58);
	var has = __webpack_require__(5);
	var $export = __webpack_require__(8);
	var isObject = __webpack_require__(13);
	var anObject = __webpack_require__(12);
	
	function get(target, propertyKey /* , receiver */) {
	  var receiver = arguments.length < 3 ? target : arguments[2];
	  var desc, proto;
	  if (anObject(target) === receiver) return target[propertyKey];
	  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value') ? desc.value : desc.get !== undefined ? desc.get.call(receiver) : undefined;
	  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
	}
	
	$export($export.S, 'Reflect', { get: get });

/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
	var gOPD = __webpack_require__(50);
	var $export = __webpack_require__(8);
	var anObject = __webpack_require__(12);
	
	$export($export.S, 'Reflect', {
	  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
	    return gOPD.f(anObject(target), propertyKey);
	  }
	});

/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 26.1.8 Reflect.getPrototypeOf(target)
	var $export = __webpack_require__(8);
	var getProto = __webpack_require__(58);
	var anObject = __webpack_require__(12);
	
	$export($export.S, 'Reflect', {
	  getPrototypeOf: function getPrototypeOf(target) {
	    return getProto(anObject(target));
	  }
	});

/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 26.1.9 Reflect.has(target, propertyKey)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Reflect', {
	  has: function has(target, propertyKey) {
	    return propertyKey in target;
	  }
	});

/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 26.1.10 Reflect.isExtensible(target)
	var $export = __webpack_require__(8);
	var anObject = __webpack_require__(12);
	var $isExtensible = Object.isExtensible;
	
	$export($export.S, 'Reflect', {
	  isExtensible: function isExtensible(target) {
	    anObject(target);
	    return $isExtensible ? $isExtensible(target) : true;
	  }
	});

/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 26.1.11 Reflect.ownKeys(target)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Reflect', { ownKeys: __webpack_require__(249) });

/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// all object keys, includes non-enumerable and symbols
	var gOPN = __webpack_require__(49);
	var gOPS = __webpack_require__(42);
	var anObject = __webpack_require__(12);
	var Reflect = __webpack_require__(4).Reflect;
	module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
	  var keys = gOPN.f(anObject(it));
	  var getSymbols = gOPS.f;
	  return getSymbols ? keys.concat(getSymbols(it)) : keys;
	};

/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 26.1.12 Reflect.preventExtensions(target)
	var $export = __webpack_require__(8);
	var anObject = __webpack_require__(12);
	var $preventExtensions = Object.preventExtensions;
	
	$export($export.S, 'Reflect', {
	  preventExtensions: function preventExtensions(target) {
	    anObject(target);
	    try {
	      if ($preventExtensions) $preventExtensions(target);
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }
	});

/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
	var dP = __webpack_require__(11);
	var gOPD = __webpack_require__(50);
	var getPrototypeOf = __webpack_require__(58);
	var has = __webpack_require__(5);
	var $export = __webpack_require__(8);
	var createDesc = __webpack_require__(17);
	var anObject = __webpack_require__(12);
	var isObject = __webpack_require__(13);
	
	function set(target, propertyKey, V /* , receiver */) {
	  var receiver = arguments.length < 4 ? target : arguments[3];
	  var ownDesc = gOPD.f(anObject(target), propertyKey);
	  var existingDescriptor, proto;
	  if (!ownDesc) {
	    if (isObject(proto = getPrototypeOf(target))) {
	      return set(proto, propertyKey, V, receiver);
	    }
	    ownDesc = createDesc(0);
	  }
	  if (has(ownDesc, 'value')) {
	    if (ownDesc.writable === false || !isObject(receiver)) return false;
	    existingDescriptor = gOPD.f(receiver, propertyKey) || createDesc(0);
	    existingDescriptor.value = V;
	    dP.f(receiver, propertyKey, existingDescriptor);
	    return true;
	  }
	  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
	}
	
	$export($export.S, 'Reflect', { set: set });

/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 26.1.14 Reflect.setPrototypeOf(target, proto)
	var $export = __webpack_require__(8);
	var setProto = __webpack_require__(72);
	
	if (setProto) $export($export.S, 'Reflect', {
	  setPrototypeOf: function setPrototypeOf(target, proto) {
	    setProto.check(target, proto);
	    try {
	      setProto.set(target, proto);
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }
	});

/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/tc39/Array.prototype.includes
	
	var $export = __webpack_require__(8);
	var $includes = __webpack_require__(36)(true);
	
	$export($export.P, 'Array', {
	  includes: function includes(el /* , fromIndex = 0 */) {
	    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});
	
	__webpack_require__(187)('includes');

/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap
	
	var $export = __webpack_require__(8);
	var flattenIntoArray = __webpack_require__(255);
	var toObject = __webpack_require__(57);
	var toLength = __webpack_require__(37);
	var aFunction = __webpack_require__(21);
	var arraySpeciesCreate = __webpack_require__(174);
	
	$export($export.P, 'Array', {
	  flatMap: function flatMap(callbackfn /* , thisArg */) {
	    var O = toObject(this);
	    var sourceLen, A;
	    aFunction(callbackfn);
	    sourceLen = toLength(O.length);
	    A = arraySpeciesCreate(O, 0);
	    flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
	    return A;
	  }
	});
	
	__webpack_require__(187)('flatMap');

/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
	
	var isArray = __webpack_require__(44);
	var isObject = __webpack_require__(13);
	var toLength = __webpack_require__(37);
	var ctx = __webpack_require__(20);
	var IS_CONCAT_SPREADABLE = __webpack_require__(25)('isConcatSpreadable');
	
	function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
	  var targetIndex = start;
	  var sourceIndex = 0;
	  var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;
	  var element, spreadable;
	
	  while (sourceIndex < sourceLen) {
	    if (sourceIndex in source) {
	      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];
	
	      spreadable = false;
	      if (isObject(element)) {
	        spreadable = element[IS_CONCAT_SPREADABLE];
	        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);
	      }
	
	      if (spreadable && depth > 0) {
	        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
	      } else {
	        if (targetIndex >= 0x1fffffffffffff) throw TypeError();
	        target[targetIndex] = element;
	      }
	
	      targetIndex++;
	    }
	    sourceIndex++;
	  }
	  return targetIndex;
	}
	
	module.exports = flattenIntoArray;

/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatten
	
	var $export = __webpack_require__(8);
	var flattenIntoArray = __webpack_require__(255);
	var toObject = __webpack_require__(57);
	var toLength = __webpack_require__(37);
	var toInteger = __webpack_require__(38);
	var arraySpeciesCreate = __webpack_require__(174);
	
	$export($export.P, 'Array', {
	  flatten: function flatten() /* depthArg = 1 */{
	    var depthArg = arguments[0];
	    var O = toObject(this);
	    var sourceLen = toLength(O.length);
	    var A = arraySpeciesCreate(O, 0);
	    flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
	    return A;
	  }
	});
	
	__webpack_require__(187)('flatten');

/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/mathiasbynens/String.prototype.at
	
	var $export = __webpack_require__(8);
	var $at = __webpack_require__(127)(true);
	
	$export($export.P, 'String', {
	  at: function at(pos) {
	    return $at(this, pos);
	  }
	});

/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/tc39/proposal-string-pad-start-end
	
	var $export = __webpack_require__(8);
	var $pad = __webpack_require__(259);
	var userAgent = __webpack_require__(260);
	
	// https://github.com/zloirock/core-js/issues/280
	$export($export.P + $export.F * /Version\/10\.\d+(\.\d+)? Safari\//.test(userAgent), 'String', {
	  padStart: function padStart(maxLength /* , fillString = ' ' */) {
	    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
	  }
	});

/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// https://github.com/tc39/proposal-string-pad-start-end
	var toLength = __webpack_require__(37);
	var repeat = __webpack_require__(90);
	var defined = __webpack_require__(35);
	
	module.exports = function (that, maxLength, fillString, left) {
	  var S = String(defined(that));
	  var stringLength = S.length;
	  var fillStr = fillString === undefined ? ' ' : String(fillString);
	  var intMaxLength = toLength(maxLength);
	  if (intMaxLength <= stringLength || fillStr == '') return S;
	  var fillLen = intMaxLength - stringLength;
	  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
	  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
	  return left ? stringFiller + S : S + stringFiller;
	};

/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var global = __webpack_require__(4);
	var navigator = global.navigator;
	
	module.exports = navigator && navigator.userAgent || '';

/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/tc39/proposal-string-pad-start-end
	
	var $export = __webpack_require__(8);
	var $pad = __webpack_require__(259);
	var userAgent = __webpack_require__(260);
	
	// https://github.com/zloirock/core-js/issues/280
	$export($export.P + $export.F * /Version\/10\.\d+(\.\d+)? Safari\//.test(userAgent), 'String', {
	  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
	    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
	  }
	});

/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
	
	__webpack_require__(82)('trimLeft', function ($trim) {
	  return function trimLeft() {
	    return $trim(this, 1);
	  };
	}, 'trimStart');

/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
	
	__webpack_require__(82)('trimRight', function ($trim) {
	  return function trimRight() {
	    return $trim(this, 2);
	  };
	}, 'trimEnd');

/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://tc39.github.io/String.prototype.matchAll/
	
	var $export = __webpack_require__(8);
	var defined = __webpack_require__(35);
	var toLength = __webpack_require__(37);
	var isRegExp = __webpack_require__(134);
	var getFlags = __webpack_require__(197);
	var RegExpProto = RegExp.prototype;
	
	var $RegExpStringIterator = function $RegExpStringIterator(regexp, string) {
	  this._r = regexp;
	  this._s = string;
	};
	
	__webpack_require__(130)($RegExpStringIterator, 'RegExp String', function next() {
	  var match = this._r.exec(this._s);
	  return { value: match, done: match === null };
	});
	
	$export($export.P, 'String', {
	  matchAll: function matchAll(regexp) {
	    defined(this);
	    if (!isRegExp(regexp)) throw TypeError(regexp + ' is not a regexp!');
	    var S = String(this);
	    var flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp);
	    var rx = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
	    rx.lastIndex = toLength(regexp.lastIndex);
	    return new $RegExpStringIterator(rx, S);
	  }
	});

/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(27)('asyncIterator');

/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(27)('observable');

/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// https://github.com/tc39/proposal-object-getownpropertydescriptors
	var $export = __webpack_require__(8);
	var ownKeys = __webpack_require__(249);
	var toIObject = __webpack_require__(32);
	var gOPD = __webpack_require__(50);
	var createProperty = __webpack_require__(164);
	
	$export($export.S, 'Object', {
	  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
	    var O = toIObject(object);
	    var getDesc = gOPD.f;
	    var keys = ownKeys(O);
	    var result = {};
	    var i = 0;
	    var key, desc;
	    while (keys.length > i) {
	      desc = getDesc(O, key = keys[i++]);
	      if (desc !== undefined) createProperty(result, key, desc);
	    }
	    return result;
	  }
	});

/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// https://github.com/tc39/proposal-object-values-entries
	var $export = __webpack_require__(8);
	var $values = __webpack_require__(269)(false);
	
	$export($export.S, 'Object', {
	  values: function values(it) {
	    return $values(it);
	  }
	});

/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var getKeys = __webpack_require__(30);
	var toIObject = __webpack_require__(32);
	var isEnum = __webpack_require__(43).f;
	module.exports = function (isEntries) {
	  return function (it) {
	    var O = toIObject(it);
	    var keys = getKeys(O);
	    var length = keys.length;
	    var i = 0;
	    var result = [];
	    var key;
	    while (length > i) {
	      if (isEnum.call(O, key = keys[i++])) {
	        result.push(isEntries ? [key, O[key]] : O[key]);
	      }
	    }return result;
	  };
	};

/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// https://github.com/tc39/proposal-object-values-entries
	var $export = __webpack_require__(8);
	var $entries = __webpack_require__(269)(true);
	
	$export($export.S, 'Object', {
	  entries: function entries(it) {
	    return $entries(it);
	  }
	});

/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $export = __webpack_require__(8);
	var toObject = __webpack_require__(57);
	var aFunction = __webpack_require__(21);
	var $defineProperty = __webpack_require__(11);
	
	// B.2.2.2 Object.prototype.__defineGetter__(P, getter)
	__webpack_require__(6) && $export($export.P + __webpack_require__(272), 'Object', {
	  __defineGetter__: function __defineGetter__(P, getter) {
	    $defineProperty.f(toObject(this), P, { get: aFunction(getter), enumerable: true, configurable: true });
	  }
	});

/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// Forced replacement prototype accessors methods
	
	module.exports = __webpack_require__(28) || !__webpack_require__(7)(function () {
	  var K = Math.random();
	  // In FF throws only define methods
	  // eslint-disable-next-line no-undef, no-useless-call
	  __defineSetter__.call(null, K, function () {/* empty */});
	  delete __webpack_require__(4)[K];
	});

/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $export = __webpack_require__(8);
	var toObject = __webpack_require__(57);
	var aFunction = __webpack_require__(21);
	var $defineProperty = __webpack_require__(11);
	
	// B.2.2.3 Object.prototype.__defineSetter__(P, setter)
	__webpack_require__(6) && $export($export.P + __webpack_require__(272), 'Object', {
	  __defineSetter__: function __defineSetter__(P, setter) {
	    $defineProperty.f(toObject(this), P, { set: aFunction(setter), enumerable: true, configurable: true });
	  }
	});

/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $export = __webpack_require__(8);
	var toObject = __webpack_require__(57);
	var toPrimitive = __webpack_require__(16);
	var getPrototypeOf = __webpack_require__(58);
	var getOwnPropertyDescriptor = __webpack_require__(50).f;
	
	// B.2.2.4 Object.prototype.__lookupGetter__(P)
	__webpack_require__(6) && $export($export.P + __webpack_require__(272), 'Object', {
	  __lookupGetter__: function __lookupGetter__(P) {
	    var O = toObject(this);
	    var K = toPrimitive(P, true);
	    var D;
	    do {
	      if (D = getOwnPropertyDescriptor(O, K)) return D.get;
	    } while (O = getPrototypeOf(O));
	  }
	});

/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $export = __webpack_require__(8);
	var toObject = __webpack_require__(57);
	var toPrimitive = __webpack_require__(16);
	var getPrototypeOf = __webpack_require__(58);
	var getOwnPropertyDescriptor = __webpack_require__(50).f;
	
	// B.2.2.5 Object.prototype.__lookupSetter__(P)
	__webpack_require__(6) && $export($export.P + __webpack_require__(272), 'Object', {
	  __lookupSetter__: function __lookupSetter__(P) {
	    var O = toObject(this);
	    var K = toPrimitive(P, true);
	    var D;
	    do {
	      if (D = getOwnPropertyDescriptor(O, K)) return D.set;
	    } while (O = getPrototypeOf(O));
	  }
	});

/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var $export = __webpack_require__(8);
	
	$export($export.P + $export.R, 'Map', { toJSON: __webpack_require__(277)('Map') });

/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var classof = __webpack_require__(74);
	var from = __webpack_require__(278);
	module.exports = function (NAME) {
	  return function toJSON() {
	    if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
	    return from(this);
	  };
	};

/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var forOf = __webpack_require__(207);
	
	module.exports = function (iter, ITERATOR) {
	  var result = [];
	  forOf(iter, false, result.push, result, ITERATOR);
	  return result;
	};

/***/ },
/* 279 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var $export = __webpack_require__(8);
	
	$export($export.P + $export.R, 'Set', { toJSON: __webpack_require__(277)('Set') });

/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of
	__webpack_require__(281)('Map');

/***/ },
/* 281 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://tc39.github.io/proposal-setmap-offrom/
	
	var $export = __webpack_require__(8);
	
	module.exports = function (COLLECTION) {
	  $export($export.S, COLLECTION, { of: function of() {
	      var length = arguments.length;
	      var A = new Array(length);
	      while (length--) {
	        A[length] = arguments[length];
	      }return new this(A);
	    } });
	};

/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// https://tc39.github.io/proposal-setmap-offrom/#sec-set.of
	__webpack_require__(281)('Set');

/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.of
	__webpack_require__(281)('WeakMap');

/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.of
	__webpack_require__(281)('WeakSet');

/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from
	__webpack_require__(286)('Map');

/***/ },
/* 286 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://tc39.github.io/proposal-setmap-offrom/
	
	var $export = __webpack_require__(8);
	var aFunction = __webpack_require__(21);
	var ctx = __webpack_require__(20);
	var forOf = __webpack_require__(207);
	
	module.exports = function (COLLECTION) {
	  $export($export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {
	      var mapFn = arguments[1];
	      var mapping, A, n, cb;
	      aFunction(this);
	      mapping = mapFn !== undefined;
	      if (mapping) aFunction(mapFn);
	      if (source == undefined) return new this();
	      A = [];
	      if (mapping) {
	        n = 0;
	        cb = ctx(mapFn, arguments[2], 2);
	        forOf(source, false, function (nextItem) {
	          A.push(cb(nextItem, n++));
	        });
	      } else {
	        forOf(source, false, A.push, A);
	      }
	      return new this(A);
	    } });
	};

/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// https://tc39.github.io/proposal-setmap-offrom/#sec-set.from
	__webpack_require__(286)('Set');

/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.from
	__webpack_require__(286)('WeakMap');

/***/ },
/* 289 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.from
	__webpack_require__(286)('WeakSet');

/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// https://github.com/tc39/proposal-global
	var $export = __webpack_require__(8);
	
	$export($export.G, { global: __webpack_require__(4) });

/***/ },
/* 291 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// https://github.com/tc39/proposal-global
	var $export = __webpack_require__(8);
	
	$export($export.S, 'System', { global: __webpack_require__(4) });

/***/ },
/* 292 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// https://github.com/ljharb/proposal-is-error
	var $export = __webpack_require__(8);
	var cof = __webpack_require__(34);
	
	$export($export.S, 'Error', {
	  isError: function isError(it) {
	    return cof(it) === 'Error';
	  }
	});

/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// https://rwaldron.github.io/proposal-math-extensions/
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  clamp: function clamp(x, lower, upper) {
	    return Math.min(upper, Math.max(lower, x));
	  }
	});

/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// https://rwaldron.github.io/proposal-math-extensions/
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', { DEG_PER_RAD: Math.PI / 180 });

/***/ },
/* 295 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// https://rwaldron.github.io/proposal-math-extensions/
	var $export = __webpack_require__(8);
	var RAD_PER_DEG = 180 / Math.PI;
	
	$export($export.S, 'Math', {
	  degrees: function degrees(radians) {
	    return radians * RAD_PER_DEG;
	  }
	});

/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// https://rwaldron.github.io/proposal-math-extensions/
	var $export = __webpack_require__(8);
	var scale = __webpack_require__(297);
	var fround = __webpack_require__(113);
	
	$export($export.S, 'Math', {
	  fscale: function fscale(x, inLow, inHigh, outLow, outHigh) {
	    return fround(scale(x, inLow, inHigh, outLow, outHigh));
	  }
	});

/***/ },
/* 297 */
/***/ function(module, exports) {

	"use strict";
	
	// https://rwaldron.github.io/proposal-math-extensions/
	module.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {
	  if (arguments.length === 0
	  // eslint-disable-next-line no-self-compare
	  || x != x
	  // eslint-disable-next-line no-self-compare
	  || inLow != inLow
	  // eslint-disable-next-line no-self-compare
	  || inHigh != inHigh
	  // eslint-disable-next-line no-self-compare
	  || outLow != outLow
	  // eslint-disable-next-line no-self-compare
	  || outHigh != outHigh) return NaN;
	  if (x === Infinity || x === -Infinity) return x;
	  return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;
	};

/***/ },
/* 298 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  iaddh: function iaddh(x0, x1, y0, y1) {
	    var $x0 = x0 >>> 0;
	    var $x1 = x1 >>> 0;
	    var $y0 = y0 >>> 0;
	    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
	  }
	});

/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  isubh: function isubh(x0, x1, y0, y1) {
	    var $x0 = x0 >>> 0;
	    var $x1 = x1 >>> 0;
	    var $y0 = y0 >>> 0;
	    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
	  }
	});

/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  imulh: function imulh(u, v) {
	    var UINT16 = 0xffff;
	    var $u = +u;
	    var $v = +v;
	    var u0 = $u & UINT16;
	    var v0 = $v & UINT16;
	    var u1 = $u >> 16;
	    var v1 = $v >> 16;
	    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
	    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
	  }
	});

/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// https://rwaldron.github.io/proposal-math-extensions/
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', { RAD_PER_DEG: 180 / Math.PI });

/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// https://rwaldron.github.io/proposal-math-extensions/
	var $export = __webpack_require__(8);
	var DEG_PER_RAD = Math.PI / 180;
	
	$export($export.S, 'Math', {
	  radians: function radians(degrees) {
	    return degrees * DEG_PER_RAD;
	  }
	});

/***/ },
/* 303 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// https://rwaldron.github.io/proposal-math-extensions/
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', { scale: __webpack_require__(297) });

/***/ },
/* 304 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  umulh: function umulh(u, v) {
	    var UINT16 = 0xffff;
	    var $u = +u;
	    var $v = +v;
	    var u0 = $u & UINT16;
	    var v0 = $v & UINT16;
	    var u1 = $u >>> 16;
	    var v1 = $v >>> 16;
	    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
	    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
	  }
	});

/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// http://jfbastien.github.io/papers/Math.signbit.html
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', { signbit: function signbit(x) {
	    // eslint-disable-next-line no-self-compare
	    return (x = +x) != x ? x : x == 0 ? 1 / x == Infinity : x > 0;
	  } });

/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-promise-finally
	'use strict';
	
	var $export = __webpack_require__(8);
	var core = __webpack_require__(9);
	var global = __webpack_require__(4);
	var speciesConstructor = __webpack_require__(208);
	var promiseResolve = __webpack_require__(213);
	
	$export($export.P + $export.R, 'Promise', { 'finally': function _finally(onFinally) {
	    var C = speciesConstructor(this, core.Promise || global.Promise);
	    var isFunction = typeof onFinally == 'function';
	    return this.then(isFunction ? function (x) {
	      return promiseResolve(C, onFinally()).then(function () {
	        return x;
	      });
	    } : onFinally, isFunction ? function (e) {
	      return promiseResolve(C, onFinally()).then(function () {
	        throw e;
	      });
	    } : onFinally);
	  } });

/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/tc39/proposal-promise-try
	
	var $export = __webpack_require__(8);
	var newPromiseCapability = __webpack_require__(211);
	var perform = __webpack_require__(212);
	
	$export($export.S, 'Promise', { 'try': function _try(callbackfn) {
	    var promiseCapability = newPromiseCapability.f(this);
	    var result = perform(callbackfn);
	    (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
	    return promiseCapability.promise;
	  } });

/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var metadata = __webpack_require__(309);
	var anObject = __webpack_require__(12);
	var toMetaKey = metadata.key;
	var ordinaryDefineOwnMetadata = metadata.set;
	
	metadata.exp({ defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {
	    ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
	  } });

/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var Map = __webpack_require__(215);
	var $export = __webpack_require__(8);
	var shared = __webpack_require__(23)('metadata');
	var store = shared.store || (shared.store = new (__webpack_require__(220))());
	
	var getOrCreateMetadataMap = function getOrCreateMetadataMap(target, targetKey, create) {
	  var targetMetadata = store.get(target);
	  if (!targetMetadata) {
	    if (!create) return undefined;
	    store.set(target, targetMetadata = new Map());
	  }
	  var keyMetadata = targetMetadata.get(targetKey);
	  if (!keyMetadata) {
	    if (!create) return undefined;
	    targetMetadata.set(targetKey, keyMetadata = new Map());
	  }return keyMetadata;
	};
	var ordinaryHasOwnMetadata = function ordinaryHasOwnMetadata(MetadataKey, O, P) {
	  var metadataMap = getOrCreateMetadataMap(O, P, false);
	  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
	};
	var ordinaryGetOwnMetadata = function ordinaryGetOwnMetadata(MetadataKey, O, P) {
	  var metadataMap = getOrCreateMetadataMap(O, P, false);
	  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
	};
	var ordinaryDefineOwnMetadata = function ordinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
	  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
	};
	var ordinaryOwnMetadataKeys = function ordinaryOwnMetadataKeys(target, targetKey) {
	  var metadataMap = getOrCreateMetadataMap(target, targetKey, false);
	  var keys = [];
	  if (metadataMap) metadataMap.forEach(function (_, key) {
	    keys.push(key);
	  });
	  return keys;
	};
	var toMetaKey = function toMetaKey(it) {
	  return it === undefined || (typeof it === 'undefined' ? 'undefined' : _typeof(it)) == 'symbol' ? it : String(it);
	};
	var exp = function exp(O) {
	  $export($export.S, 'Reflect', O);
	};
	
	module.exports = {
	  store: store,
	  map: getOrCreateMetadataMap,
	  has: ordinaryHasOwnMetadata,
	  get: ordinaryGetOwnMetadata,
	  set: ordinaryDefineOwnMetadata,
	  keys: ordinaryOwnMetadataKeys,
	  key: toMetaKey,
	  exp: exp
	};

/***/ },
/* 310 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var metadata = __webpack_require__(309);
	var anObject = __webpack_require__(12);
	var toMetaKey = metadata.key;
	var getOrCreateMetadataMap = metadata.map;
	var store = metadata.store;
	
	metadata.exp({ deleteMetadata: function deleteMetadata(metadataKey, target /* , targetKey */) {
	    var targetKey = arguments.length < 3 ? undefined : toMetaKey(arguments[2]);
	    var metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
	    if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;
	    if (metadataMap.size) return true;
	    var targetMetadata = store.get(target);
	    targetMetadata['delete'](targetKey);
	    return !!targetMetadata.size || store['delete'](target);
	  } });

/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var metadata = __webpack_require__(309);
	var anObject = __webpack_require__(12);
	var getPrototypeOf = __webpack_require__(58);
	var ordinaryHasOwnMetadata = metadata.has;
	var ordinaryGetOwnMetadata = metadata.get;
	var toMetaKey = metadata.key;
	
	var ordinaryGetMetadata = function ordinaryGetMetadata(MetadataKey, O, P) {
	  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
	  if (hasOwn) return ordinaryGetOwnMetadata(MetadataKey, O, P);
	  var parent = getPrototypeOf(O);
	  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
	};
	
	metadata.exp({ getMetadata: function getMetadata(metadataKey, target /* , targetKey */) {
	    return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	  } });

/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Set = __webpack_require__(219);
	var from = __webpack_require__(278);
	var metadata = __webpack_require__(309);
	var anObject = __webpack_require__(12);
	var getPrototypeOf = __webpack_require__(58);
	var ordinaryOwnMetadataKeys = metadata.keys;
	var toMetaKey = metadata.key;
	
	var ordinaryMetadataKeys = function ordinaryMetadataKeys(O, P) {
	  var oKeys = ordinaryOwnMetadataKeys(O, P);
	  var parent = getPrototypeOf(O);
	  if (parent === null) return oKeys;
	  var pKeys = ordinaryMetadataKeys(parent, P);
	  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
	};
	
	metadata.exp({ getMetadataKeys: function getMetadataKeys(target /* , targetKey */) {
	    return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
	  } });

/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var metadata = __webpack_require__(309);
	var anObject = __webpack_require__(12);
	var ordinaryGetOwnMetadata = metadata.get;
	var toMetaKey = metadata.key;
	
	metadata.exp({ getOwnMetadata: function getOwnMetadata(metadataKey, target /* , targetKey */) {
	    return ordinaryGetOwnMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	  } });

/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var metadata = __webpack_require__(309);
	var anObject = __webpack_require__(12);
	var ordinaryOwnMetadataKeys = metadata.keys;
	var toMetaKey = metadata.key;
	
	metadata.exp({ getOwnMetadataKeys: function getOwnMetadataKeys(target /* , targetKey */) {
	    return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
	  } });

/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var metadata = __webpack_require__(309);
	var anObject = __webpack_require__(12);
	var getPrototypeOf = __webpack_require__(58);
	var ordinaryHasOwnMetadata = metadata.has;
	var toMetaKey = metadata.key;
	
	var ordinaryHasMetadata = function ordinaryHasMetadata(MetadataKey, O, P) {
	  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
	  if (hasOwn) return true;
	  var parent = getPrototypeOf(O);
	  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
	};
	
	metadata.exp({ hasMetadata: function hasMetadata(metadataKey, target /* , targetKey */) {
	    return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	  } });

/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var metadata = __webpack_require__(309);
	var anObject = __webpack_require__(12);
	var ordinaryHasOwnMetadata = metadata.has;
	var toMetaKey = metadata.key;
	
	metadata.exp({ hasOwnMetadata: function hasOwnMetadata(metadataKey, target /* , targetKey */) {
	    return ordinaryHasOwnMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	  } });

/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $metadata = __webpack_require__(309);
	var anObject = __webpack_require__(12);
	var aFunction = __webpack_require__(21);
	var toMetaKey = $metadata.key;
	var ordinaryDefineOwnMetadata = $metadata.set;
	
	$metadata.exp({ metadata: function metadata(metadataKey, metadataValue) {
	    return function decorator(target, targetKey) {
	      ordinaryDefineOwnMetadata(metadataKey, metadataValue, (targetKey !== undefined ? anObject : aFunction)(target), toMetaKey(targetKey));
	    };
	  } });

/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
	var $export = __webpack_require__(8);
	var microtask = __webpack_require__(210)();
	var process = __webpack_require__(4).process;
	var isNode = __webpack_require__(34)(process) == 'process';
	
	$export($export.G, {
	  asap: function asap(fn) {
	    var domain = isNode && process.domain;
	    microtask(domain ? domain.bind(fn) : fn);
	  }
	});

/***/ },
/* 319 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/zenparsing/es-observable
	
	var $export = __webpack_require__(8);
	var global = __webpack_require__(4);
	var core = __webpack_require__(9);
	var microtask = __webpack_require__(210)();
	var OBSERVABLE = __webpack_require__(25)('observable');
	var aFunction = __webpack_require__(21);
	var anObject = __webpack_require__(12);
	var anInstance = __webpack_require__(206);
	var redefineAll = __webpack_require__(214);
	var hide = __webpack_require__(10);
	var forOf = __webpack_require__(207);
	var RETURN = forOf.RETURN;
	
	var getMethod = function getMethod(fn) {
	  return fn == null ? undefined : aFunction(fn);
	};
	
	var cleanupSubscription = function cleanupSubscription(subscription) {
	  var cleanup = subscription._c;
	  if (cleanup) {
	    subscription._c = undefined;
	    cleanup();
	  }
	};
	
	var subscriptionClosed = function subscriptionClosed(subscription) {
	  return subscription._o === undefined;
	};
	
	var closeSubscription = function closeSubscription(subscription) {
	  if (!subscriptionClosed(subscription)) {
	    subscription._o = undefined;
	    cleanupSubscription(subscription);
	  }
	};
	
	var Subscription = function Subscription(observer, subscriber) {
	  anObject(observer);
	  this._c = undefined;
	  this._o = observer;
	  observer = new SubscriptionObserver(this);
	  try {
	    var cleanup = subscriber(observer);
	    var subscription = cleanup;
	    if (cleanup != null) {
	      if (typeof cleanup.unsubscribe === 'function') cleanup = function cleanup() {
	        subscription.unsubscribe();
	      };else aFunction(cleanup);
	      this._c = cleanup;
	    }
	  } catch (e) {
	    observer.error(e);
	    return;
	  }if (subscriptionClosed(this)) cleanupSubscription(this);
	};
	
	Subscription.prototype = redefineAll({}, {
	  unsubscribe: function unsubscribe() {
	    closeSubscription(this);
	  }
	});
	
	var SubscriptionObserver = function SubscriptionObserver(subscription) {
	  this._s = subscription;
	};
	
	SubscriptionObserver.prototype = redefineAll({}, {
	  next: function next(value) {
	    var subscription = this._s;
	    if (!subscriptionClosed(subscription)) {
	      var observer = subscription._o;
	      try {
	        var m = getMethod(observer.next);
	        if (m) return m.call(observer, value);
	      } catch (e) {
	        try {
	          closeSubscription(subscription);
	        } finally {
	          throw e;
	        }
	      }
	    }
	  },
	  error: function error(value) {
	    var subscription = this._s;
	    if (subscriptionClosed(subscription)) throw value;
	    var observer = subscription._o;
	    subscription._o = undefined;
	    try {
	      var m = getMethod(observer.error);
	      if (!m) throw value;
	      value = m.call(observer, value);
	    } catch (e) {
	      try {
	        cleanupSubscription(subscription);
	      } finally {
	        throw e;
	      }
	    }cleanupSubscription(subscription);
	    return value;
	  },
	  complete: function complete(value) {
	    var subscription = this._s;
	    if (!subscriptionClosed(subscription)) {
	      var observer = subscription._o;
	      subscription._o = undefined;
	      try {
	        var m = getMethod(observer.complete);
	        value = m ? m.call(observer, value) : undefined;
	      } catch (e) {
	        try {
	          cleanupSubscription(subscription);
	        } finally {
	          throw e;
	        }
	      }cleanupSubscription(subscription);
	      return value;
	    }
	  }
	});
	
	var $Observable = function Observable(subscriber) {
	  anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
	};
	
	redefineAll($Observable.prototype, {
	  subscribe: function subscribe(observer) {
	    return new Subscription(observer, this._f);
	  },
	  forEach: function forEach(fn) {
	    var that = this;
	    return new (core.Promise || global.Promise)(function (resolve, reject) {
	      aFunction(fn);
	      var subscription = that.subscribe({
	        next: function next(value) {
	          try {
	            return fn(value);
	          } catch (e) {
	            reject(e);
	            subscription.unsubscribe();
	          }
	        },
	        error: reject,
	        complete: resolve
	      });
	    });
	  }
	});
	
	redefineAll($Observable, {
	  from: function from(x) {
	    var C = typeof this === 'function' ? this : $Observable;
	    var method = getMethod(anObject(x)[OBSERVABLE]);
	    if (method) {
	      var observable = anObject(method.call(x));
	      return observable.constructor === C ? observable : new C(function (observer) {
	        return observable.subscribe(observer);
	      });
	    }
	    return new C(function (observer) {
	      var done = false;
	      microtask(function () {
	        if (!done) {
	          try {
	            if (forOf(x, false, function (it) {
	              observer.next(it);
	              if (done) return RETURN;
	            }) === RETURN) return;
	          } catch (e) {
	            if (done) throw e;
	            observer.error(e);
	            return;
	          }observer.complete();
	        }
	      });
	      return function () {
	        done = true;
	      };
	    });
	  },
	  of: function of() {
	    for (var i = 0, l = arguments.length, items = new Array(l); i < l;) {
	      items[i] = arguments[i++];
	    }return new (typeof this === 'function' ? this : $Observable)(function (observer) {
	      var done = false;
	      microtask(function () {
	        if (!done) {
	          for (var j = 0; j < items.length; ++j) {
	            observer.next(items[j]);
	            if (done) return;
	          }observer.complete();
	        }
	      });
	      return function () {
	        done = true;
	      };
	    });
	  }
	});
	
	hide($Observable.prototype, OBSERVABLE, function () {
	  return this;
	});
	
	$export($export.G, { Observable: $Observable });
	
	__webpack_require__(193)('Observable');

/***/ },
/* 320 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// ie9- setTimeout & setInterval additional parameters fix
	var global = __webpack_require__(4);
	var $export = __webpack_require__(8);
	var userAgent = __webpack_require__(260);
	var slice = [].slice;
	var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check
	var wrap = function wrap(set) {
	  return function (fn, time /* , ...args */) {
	    var boundArgs = arguments.length > 2;
	    var args = boundArgs ? slice.call(arguments, 2) : false;
	    return set(boundArgs ? function () {
	      // eslint-disable-next-line no-new-func
	      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
	    } : fn, time);
	  };
	};
	$export($export.G + $export.B + $export.F * MSIE, {
	  setTimeout: wrap(global.setTimeout),
	  setInterval: wrap(global.setInterval)
	});

/***/ },
/* 321 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $export = __webpack_require__(8);
	var $task = __webpack_require__(209);
	$export($export.G + $export.B, {
	  setImmediate: $task.set,
	  clearImmediate: $task.clear
	});

/***/ },
/* 322 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $iterators = __webpack_require__(194);
	var getKeys = __webpack_require__(30);
	var redefine = __webpack_require__(18);
	var global = __webpack_require__(4);
	var hide = __webpack_require__(10);
	var Iterators = __webpack_require__(129);
	var wks = __webpack_require__(25);
	var ITERATOR = wks('iterator');
	var TO_STRING_TAG = wks('toStringTag');
	var ArrayValues = Iterators.Array;
	
	var DOMIterables = {
	  CSSRuleList: true, // TODO: Not spec compliant, should be false.
	  CSSStyleDeclaration: false,
	  CSSValueList: false,
	  ClientRectList: false,
	  DOMRectList: false,
	  DOMStringList: false,
	  DOMTokenList: true,
	  DataTransferItemList: false,
	  FileList: false,
	  HTMLAllCollection: false,
	  HTMLCollection: false,
	  HTMLFormElement: false,
	  HTMLSelectElement: false,
	  MediaList: true, // TODO: Not spec compliant, should be false.
	  MimeTypeArray: false,
	  NamedNodeMap: false,
	  NodeList: true,
	  PaintRequestList: false,
	  Plugin: false,
	  PluginArray: false,
	  SVGLengthList: false,
	  SVGNumberList: false,
	  SVGPathSegList: false,
	  SVGPointList: false,
	  SVGStringList: false,
	  SVGTransformList: false,
	  SourceBufferList: false,
	  StyleSheetList: true, // TODO: Not spec compliant, should be false.
	  TextTrackCueList: false,
	  TextTrackList: false,
	  TouchList: false
	};
	
	for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
	  var NAME = collections[i];
	  var explicit = DOMIterables[NAME];
	  var Collection = global[NAME];
	  var proto = Collection && Collection.prototype;
	  var key;
	  if (proto) {
	    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
	    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
	    Iterators[NAME] = ArrayValues;
	    if (explicit) for (key in $iterators) {
	      if (!proto[key]) redefine(proto, key, $iterators[key], true);
	    }
	  }
	}

/***/ },
/* 323 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, module) {"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */
	
	!function (global) {
	  "use strict";
	
	  var Op = Object.prototype;
	  var hasOwn = Op.hasOwnProperty;
	  var undefined; // More compressible than void 0.
	  var $Symbol = typeof Symbol === "function" ? Symbol : {};
	  var iteratorSymbol = $Symbol.iterator || "@@iterator";
	  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
	  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
	
	  var inModule = ( false ? "undefined" : _typeof(module)) === "object";
	  var runtime = global.regeneratorRuntime;
	  if (runtime) {
	    if (inModule) {
	      // If regeneratorRuntime is defined globally and we're in a module,
	      // make the exports object identical to regeneratorRuntime.
	      module.exports = runtime;
	    }
	    // Don't bother evaluating the rest of this file if the runtime was
	    // already defined globally.
	    return;
	  }
	
	  // Define the runtime globally (as expected by generated code) as either
	  // module.exports (if we're in a module) or a new, empty object.
	  runtime = global.regeneratorRuntime = inModule ? module.exports : {};
	
	  function wrap(innerFn, outerFn, self, tryLocsList) {
	    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	    var generator = Object.create(protoGenerator.prototype);
	    var context = new Context(tryLocsList || []);
	
	    // The ._invoke method unifies the implementations of the .next,
	    // .throw, and .return methods.
	    generator._invoke = makeInvokeMethod(innerFn, self, context);
	
	    return generator;
	  }
	  runtime.wrap = wrap;
	
	  // Try/catch helper to minimize deoptimizations. Returns a completion
	  // record like context.tryEntries[i].completion. This interface could
	  // have been (and was previously) designed to take a closure to be
	  // invoked without arguments, but in all the cases we care about we
	  // already have an existing method we want to call, so there's no need
	  // to create a new function object. We can even get away with assuming
	  // the method takes exactly one argument, since that happens to be true
	  // in every case, so we don't have to touch the arguments object. The
	  // only additional allocation required is the completion record, which
	  // has a stable shape and so hopefully should be cheap to allocate.
	  function tryCatch(fn, obj, arg) {
	    try {
	      return { type: "normal", arg: fn.call(obj, arg) };
	    } catch (err) {
	      return { type: "throw", arg: err };
	    }
	  }
	
	  var GenStateSuspendedStart = "suspendedStart";
	  var GenStateSuspendedYield = "suspendedYield";
	  var GenStateExecuting = "executing";
	  var GenStateCompleted = "completed";
	
	  // Returning this object from the innerFn has the same effect as
	  // breaking out of the dispatch switch statement.
	  var ContinueSentinel = {};
	
	  // Dummy constructor functions that we use as the .constructor and
	  // .constructor.prototype properties for functions that return Generator
	  // objects. For full spec compliance, you may wish to configure your
	  // minifier not to mangle the names of these two functions.
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}
	
	  // This is a polyfill for %IteratorPrototype% for environments that
	  // don't natively support it.
	  var IteratorPrototype = {};
	  IteratorPrototype[iteratorSymbol] = function () {
	    return this;
	  };
	
	  var getProto = Object.getPrototypeOf;
	  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
	  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
	    // This environment has a native %IteratorPrototype%; use it instead
	    // of the polyfill.
	    IteratorPrototype = NativeIteratorPrototype;
	  }
	
	  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
	  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	  GeneratorFunctionPrototype.constructor = GeneratorFunction;
	  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";
	
	  // Helper for defining the .next, .throw, and .return methods of the
	  // Iterator interface in terms of a single ._invoke method.
	  function defineIteratorMethods(prototype) {
	    ["next", "throw", "return"].forEach(function (method) {
	      prototype[method] = function (arg) {
	        return this._invoke(method, arg);
	      };
	    });
	  }
	
	  runtime.isGeneratorFunction = function (genFun) {
	    var ctor = typeof genFun === "function" && genFun.constructor;
	    return ctor ? ctor === GeneratorFunction ||
	    // For the native GeneratorFunction constructor, the best we can
	    // do is to check its .name property.
	    (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
	  };
	
	  runtime.mark = function (genFun) {
	    if (Object.setPrototypeOf) {
	      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	    } else {
	      genFun.__proto__ = GeneratorFunctionPrototype;
	      if (!(toStringTagSymbol in genFun)) {
	        genFun[toStringTagSymbol] = "GeneratorFunction";
	      }
	    }
	    genFun.prototype = Object.create(Gp);
	    return genFun;
	  };
	
	  // Within the body of any async function, `await x` is transformed to
	  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	  // `hasOwn.call(value, "__await")` to determine if the yielded value is
	  // meant to be awaited.
	  runtime.awrap = function (arg) {
	    return { __await: arg };
	  };
	
	  function AsyncIterator(generator) {
	    function invoke(method, arg, resolve, reject) {
	      var record = tryCatch(generator[method], generator, arg);
	      if (record.type === "throw") {
	        reject(record.arg);
	      } else {
	        var result = record.arg;
	        var value = result.value;
	        if (value && (typeof value === "undefined" ? "undefined" : _typeof(value)) === "object" && hasOwn.call(value, "__await")) {
	          return Promise.resolve(value.__await).then(function (value) {
	            invoke("next", value, resolve, reject);
	          }, function (err) {
	            invoke("throw", err, resolve, reject);
	          });
	        }
	
	        return Promise.resolve(value).then(function (unwrapped) {
	          // When a yielded Promise is resolved, its final value becomes
	          // the .value of the Promise<{value,done}> result for the
	          // current iteration. If the Promise is rejected, however, the
	          // result for this iteration will be rejected with the same
	          // reason. Note that rejections of yielded Promises are not
	          // thrown back into the generator function, as is the case
	          // when an awaited Promise is rejected. This difference in
	          // behavior between yield and await is important, because it
	          // allows the consumer to decide what to do with the yielded
	          // rejection (swallow it and continue, manually .throw it back
	          // into the generator, abandon iteration, whatever). With
	          // await, by contrast, there is no opportunity to examine the
	          // rejection reason outside the generator function, so the
	          // only option is to throw it from the await expression, and
	          // let the generator function handle the exception.
	          result.value = unwrapped;
	          resolve(result);
	        }, reject);
	      }
	    }
	
	    if (_typeof(global.process) === "object" && global.process.domain) {
	      invoke = global.process.domain.bind(invoke);
	    }
	
	    var previousPromise;
	
	    function enqueue(method, arg) {
	      function callInvokeWithMethodAndArg() {
	        return new Promise(function (resolve, reject) {
	          invoke(method, arg, resolve, reject);
	        });
	      }
	
	      return previousPromise =
	      // If enqueue has been called before, then we want to wait until
	      // all previous Promises have been resolved before calling invoke,
	      // so that results are always delivered in the correct order. If
	      // enqueue has not been called before, then it is important to
	      // call invoke immediately, without waiting on a callback to fire,
	      // so that the async generator function has the opportunity to do
	      // any necessary setup in a predictable way. This predictability
	      // is why the Promise constructor synchronously invokes its
	      // executor callback, and why async functions synchronously
	      // execute code before the first await. Since we implement simple
	      // async functions in terms of async generators, it is especially
	      // important to get this right, even though it requires care.
	      previousPromise ? previousPromise.then(callInvokeWithMethodAndArg,
	      // Avoid propagating failures to Promises returned by later
	      // invocations of the iterator.
	      callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
	    }
	
	    // Define the unified helper method that is used to implement .next,
	    // .throw, and .return (see defineIteratorMethods).
	    this._invoke = enqueue;
	  }
	
	  defineIteratorMethods(AsyncIterator.prototype);
	  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
	    return this;
	  };
	  runtime.AsyncIterator = AsyncIterator;
	
	  // Note that simple async functions are implemented on top of
	  // AsyncIterator objects; they just return a Promise for the value of
	  // the final result produced by the iterator.
	  runtime.async = function (innerFn, outerFn, self, tryLocsList) {
	    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));
	
	    return runtime.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
	    : iter.next().then(function (result) {
	      return result.done ? result.value : iter.next();
	    });
	  };
	
	  function makeInvokeMethod(innerFn, self, context) {
	    var state = GenStateSuspendedStart;
	
	    return function invoke(method, arg) {
	      if (state === GenStateExecuting) {
	        throw new Error("Generator is already running");
	      }
	
	      if (state === GenStateCompleted) {
	        if (method === "throw") {
	          throw arg;
	        }
	
	        // Be forgiving, per 25.3.3.3.3 of the spec:
	        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
	        return doneResult();
	      }
	
	      context.method = method;
	      context.arg = arg;
	
	      while (true) {
	        var delegate = context.delegate;
	        if (delegate) {
	          var delegateResult = maybeInvokeDelegate(delegate, context);
	          if (delegateResult) {
	            if (delegateResult === ContinueSentinel) continue;
	            return delegateResult;
	          }
	        }
	
	        if (context.method === "next") {
	          // Setting context._sent for legacy support of Babel's
	          // function.sent implementation.
	          context.sent = context._sent = context.arg;
	        } else if (context.method === "throw") {
	          if (state === GenStateSuspendedStart) {
	            state = GenStateCompleted;
	            throw context.arg;
	          }
	
	          context.dispatchException(context.arg);
	        } else if (context.method === "return") {
	          context.abrupt("return", context.arg);
	        }
	
	        state = GenStateExecuting;
	
	        var record = tryCatch(innerFn, self, context);
	        if (record.type === "normal") {
	          // If an exception is thrown from innerFn, we leave state ===
	          // GenStateExecuting and loop back for another invocation.
	          state = context.done ? GenStateCompleted : GenStateSuspendedYield;
	
	          if (record.arg === ContinueSentinel) {
	            continue;
	          }
	
	          return {
	            value: record.arg,
	            done: context.done
	          };
	        } else if (record.type === "throw") {
	          state = GenStateCompleted;
	          // Dispatch the exception by looping back around to the
	          // context.dispatchException(context.arg) call above.
	          context.method = "throw";
	          context.arg = record.arg;
	        }
	      }
	    };
	  }
	
	  // Call delegate.iterator[context.method](context.arg) and handle the
	  // result, either by returning a { value, done } result from the
	  // delegate iterator, or by modifying context.method and context.arg,
	  // setting context.delegate to null, and returning the ContinueSentinel.
	  function maybeInvokeDelegate(delegate, context) {
	    var method = delegate.iterator[context.method];
	    if (method === undefined) {
	      // A .throw or .return when the delegate iterator has no .throw
	      // method always terminates the yield* loop.
	      context.delegate = null;
	
	      if (context.method === "throw") {
	        if (delegate.iterator.return) {
	          // If the delegate iterator has a return method, give it a
	          // chance to clean up.
	          context.method = "return";
	          context.arg = undefined;
	          maybeInvokeDelegate(delegate, context);
	
	          if (context.method === "throw") {
	            // If maybeInvokeDelegate(context) changed context.method from
	            // "return" to "throw", let that override the TypeError below.
	            return ContinueSentinel;
	          }
	        }
	
	        context.method = "throw";
	        context.arg = new TypeError("The iterator does not provide a 'throw' method");
	      }
	
	      return ContinueSentinel;
	    }
	
	    var record = tryCatch(method, delegate.iterator, context.arg);
	
	    if (record.type === "throw") {
	      context.method = "throw";
	      context.arg = record.arg;
	      context.delegate = null;
	      return ContinueSentinel;
	    }
	
	    var info = record.arg;
	
	    if (!info) {
	      context.method = "throw";
	      context.arg = new TypeError("iterator result is not an object");
	      context.delegate = null;
	      return ContinueSentinel;
	    }
	
	    if (info.done) {
	      // Assign the result of the finished delegate to the temporary
	      // variable specified by delegate.resultName (see delegateYield).
	      context[delegate.resultName] = info.value;
	
	      // Resume execution at the desired location (see delegateYield).
	      context.next = delegate.nextLoc;
	
	      // If context.method was "throw" but the delegate handled the
	      // exception, let the outer generator proceed normally. If
	      // context.method was "next", forget context.arg since it has been
	      // "consumed" by the delegate iterator. If context.method was
	      // "return", allow the original .return call to continue in the
	      // outer generator.
	      if (context.method !== "return") {
	        context.method = "next";
	        context.arg = undefined;
	      }
	    } else {
	      // Re-yield the result returned by the delegate method.
	      return info;
	    }
	
	    // The delegate iterator is finished, so forget it and continue with
	    // the outer generator.
	    context.delegate = null;
	    return ContinueSentinel;
	  }
	
	  // Define Generator.prototype.{next,throw,return} in terms of the
	  // unified ._invoke helper method.
	  defineIteratorMethods(Gp);
	
	  Gp[toStringTagSymbol] = "Generator";
	
	  // A Generator should always return itself as the iterator object when the
	  // @@iterator function is called on it. Some browsers' implementations of the
	  // iterator prototype chain incorrectly implement this, causing the Generator
	  // object to not be returned from this call. This ensures that doesn't happen.
	  // See https://github.com/facebook/regenerator/issues/274 for more details.
	  Gp[iteratorSymbol] = function () {
	    return this;
	  };
	
	  Gp.toString = function () {
	    return "[object Generator]";
	  };
	
	  function pushTryEntry(locs) {
	    var entry = { tryLoc: locs[0] };
	
	    if (1 in locs) {
	      entry.catchLoc = locs[1];
	    }
	
	    if (2 in locs) {
	      entry.finallyLoc = locs[2];
	      entry.afterLoc = locs[3];
	    }
	
	    this.tryEntries.push(entry);
	  }
	
	  function resetTryEntry(entry) {
	    var record = entry.completion || {};
	    record.type = "normal";
	    delete record.arg;
	    entry.completion = record;
	  }
	
	  function Context(tryLocsList) {
	    // The root entry object (effectively a try statement without a catch
	    // or a finally block) gives us a place to store values thrown from
	    // locations where there is no enclosing try statement.
	    this.tryEntries = [{ tryLoc: "root" }];
	    tryLocsList.forEach(pushTryEntry, this);
	    this.reset(true);
	  }
	
	  runtime.keys = function (object) {
	    var keys = [];
	    for (var key in object) {
	      keys.push(key);
	    }
	    keys.reverse();
	
	    // Rather than returning an object with a next method, we keep
	    // things simple and return the next function itself.
	    return function next() {
	      while (keys.length) {
	        var key = keys.pop();
	        if (key in object) {
	          next.value = key;
	          next.done = false;
	          return next;
	        }
	      }
	
	      // To avoid creating an additional object, we just hang the .value
	      // and .done properties off the next function object itself. This
	      // also ensures that the minifier will not anonymize the function.
	      next.done = true;
	      return next;
	    };
	  };
	
	  function values(iterable) {
	    if (iterable) {
	      var iteratorMethod = iterable[iteratorSymbol];
	      if (iteratorMethod) {
	        return iteratorMethod.call(iterable);
	      }
	
	      if (typeof iterable.next === "function") {
	        return iterable;
	      }
	
	      if (!isNaN(iterable.length)) {
	        var i = -1,
	            next = function next() {
	          while (++i < iterable.length) {
	            if (hasOwn.call(iterable, i)) {
	              next.value = iterable[i];
	              next.done = false;
	              return next;
	            }
	          }
	
	          next.value = undefined;
	          next.done = true;
	
	          return next;
	        };
	
	        return next.next = next;
	      }
	    }
	
	    // Return an iterator with no values.
	    return { next: doneResult };
	  }
	  runtime.values = values;
	
	  function doneResult() {
	    return { value: undefined, done: true };
	  }
	
	  Context.prototype = {
	    constructor: Context,
	
	    reset: function reset(skipTempReset) {
	      this.prev = 0;
	      this.next = 0;
	      // Resetting context._sent for legacy support of Babel's
	      // function.sent implementation.
	      this.sent = this._sent = undefined;
	      this.done = false;
	      this.delegate = null;
	
	      this.method = "next";
	      this.arg = undefined;
	
	      this.tryEntries.forEach(resetTryEntry);
	
	      if (!skipTempReset) {
	        for (var name in this) {
	          // Not sure about the optimal order of these conditions:
	          if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
	            this[name] = undefined;
	          }
	        }
	      }
	    },
	
	    stop: function stop() {
	      this.done = true;
	
	      var rootEntry = this.tryEntries[0];
	      var rootRecord = rootEntry.completion;
	      if (rootRecord.type === "throw") {
	        throw rootRecord.arg;
	      }
	
	      return this.rval;
	    },
	
	    dispatchException: function dispatchException(exception) {
	      if (this.done) {
	        throw exception;
	      }
	
	      var context = this;
	      function handle(loc, caught) {
	        record.type = "throw";
	        record.arg = exception;
	        context.next = loc;
	
	        if (caught) {
	          // If the dispatched exception was caught by a catch block,
	          // then let that catch block handle the exception normally.
	          context.method = "next";
	          context.arg = undefined;
	        }
	
	        return !!caught;
	      }
	
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        var record = entry.completion;
	
	        if (entry.tryLoc === "root") {
	          // Exception thrown outside of any try block that could handle
	          // it, so set the completion value of the entire function to
	          // throw the exception.
	          return handle("end");
	        }
	
	        if (entry.tryLoc <= this.prev) {
	          var hasCatch = hasOwn.call(entry, "catchLoc");
	          var hasFinally = hasOwn.call(entry, "finallyLoc");
	
	          if (hasCatch && hasFinally) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            } else if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }
	          } else if (hasCatch) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            }
	          } else if (hasFinally) {
	            if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }
	          } else {
	            throw new Error("try statement without catch or finally");
	          }
	        }
	      }
	    },
	
	    abrupt: function abrupt(type, arg) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
	          var finallyEntry = entry;
	          break;
	        }
	      }
	
	      if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
	        // Ignore the finally entry if control is not jumping to a
	        // location outside the try/catch block.
	        finallyEntry = null;
	      }
	
	      var record = finallyEntry ? finallyEntry.completion : {};
	      record.type = type;
	      record.arg = arg;
	
	      if (finallyEntry) {
	        this.method = "next";
	        this.next = finallyEntry.finallyLoc;
	        return ContinueSentinel;
	      }
	
	      return this.complete(record);
	    },
	
	    complete: function complete(record, afterLoc) {
	      if (record.type === "throw") {
	        throw record.arg;
	      }
	
	      if (record.type === "break" || record.type === "continue") {
	        this.next = record.arg;
	      } else if (record.type === "return") {
	        this.rval = this.arg = record.arg;
	        this.method = "return";
	        this.next = "end";
	      } else if (record.type === "normal" && afterLoc) {
	        this.next = afterLoc;
	      }
	
	      return ContinueSentinel;
	    },
	
	    finish: function finish(finallyLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.finallyLoc === finallyLoc) {
	          this.complete(entry.completion, entry.afterLoc);
	          resetTryEntry(entry);
	          return ContinueSentinel;
	        }
	      }
	    },
	
	    "catch": function _catch(tryLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc === tryLoc) {
	          var record = entry.completion;
	          if (record.type === "throw") {
	            var thrown = record.arg;
	            resetTryEntry(entry);
	          }
	          return thrown;
	        }
	      }
	
	      // The context.catch method must only be called with a location
	      // argument that corresponds to a known catch block.
	      throw new Error("illegal catch attempt");
	    },
	
	    delegateYield: function delegateYield(iterable, resultName, nextLoc) {
	      this.delegate = {
	        iterator: values(iterable),
	        resultName: resultName,
	        nextLoc: nextLoc
	      };
	
	      if (this.method === "next") {
	        // Deliberately forget the last sent value so that we don't
	        // accidentally pass it on to the delegate.
	        this.arg = undefined;
	      }
	
	      return ContinueSentinel;
	    }
	  };
	}(
	// Among the various tricks for obtaining a reference to the global
	// object, this seems to be the most reliable technique that does not
	// use indirect eval (which violates Content Security Policy).
	(typeof global === "undefined" ? "undefined" : _typeof(global)) === "object" ? global : (typeof window === "undefined" ? "undefined" : _typeof(window)) === "object" ? window : (typeof self === "undefined" ? "undefined" : _typeof(self)) === "object" ? self : undefined);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(324)(module)))

/***/ },
/* 324 */
/***/ function(module, exports) {

	"use strict";
	
	module.exports = function (module) {
		if (!module.webpackPolyfill) {
			module.deprecate = function () {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	};

/***/ },
/* 325 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(326);
	module.exports = __webpack_require__(9).RegExp.escape;

/***/ },
/* 326 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// https://github.com/benjamingr/RexExp.escape
	var $export = __webpack_require__(8);
	var $re = __webpack_require__(327)(/[\\^$*+?.()|[\]{}]/g, '\\$&');
	
	$export($export.S, 'RegExp', { escape: function escape(it) {
	    return $re(it);
	  } });

/***/ },
/* 327 */
/***/ function(module, exports) {

	"use strict";
	
	module.exports = function (regExp, replace) {
	  var replacer = replace === Object(replace) ? function (part) {
	    return replace[part];
	  } : replace;
	  return function (it) {
	    return String(it).replace(regExp, replacer);
	  };
	};

/***/ },
/* 328 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _angular = __webpack_require__(329);
	
	var _angular2 = _interopRequireDefault(_angular);
	
	var _angularUiRouter = __webpack_require__(331);
	
	var _angularUiRouter2 = _interopRequireDefault(_angularUiRouter);
	
	var _angularTranslate = __webpack_require__(332);
	
	var _angularTranslate2 = _interopRequireDefault(_angularTranslate);
	
	var _components = __webpack_require__(333);
	
	var _components2 = _interopRequireDefault(_components);
	
	var _login = __webpack_require__(691);
	
	var _login2 = _interopRequireDefault(_login);
	
	var _signup = __webpack_require__(697);
	
	var _signup2 = _interopRequireDefault(_signup);
	
	var _buy = __webpack_require__(702);
	
	var _buy2 = _interopRequireDefault(_buy);
	
	var _faq = __webpack_require__(707);
	
	var _faq2 = _interopRequireDefault(_faq);
	
	var _dashboard = __webpack_require__(712);
	
	var _dashboard2 = _interopRequireDefault(_dashboard);
	
	var _fix = __webpack_require__(717);
	
	var _fix2 = _interopRequireDefault(_fix);
	
	var _language = __webpack_require__(722);
	
	var _language2 = _interopRequireDefault(_language);
	
	var _en = __webpack_require__(723);
	
	var _en2 = _interopRequireDefault(_en);
	
	var _pt = __webpack_require__(724);
	
	var _pt2 = _interopRequireDefault(_pt);
	
	var _index = __webpack_require__(685);
	
	var _services = __webpack_require__(725);
	
	__webpack_require__(732);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	_angular2.default.module('myApp', [_angularUiRouter2.default, _components2.default, _angularTranslate2.default]).service('HttpService', _services.HttpService).service('ErrorMessagesService', _services.ErrorMessagesService).service('CheapFlightService', _services.CheapFlightService).component('loginPage', _login2.default).component('signupPage', _signup2.default).component('buyPage', _buy2.default).component('dashboardPage', _dashboard2.default).component('fixPage', _fix2.default).component('faqPage', _faq2.default).directive('comparePassword', function () {
	  return {
	    require: "ngModel",
	    link: function link(scope, element, attributes, ngModel) {
	
	      ngModel.$validators.comparePassword = function (modelValue) {
	
	        if (ngModel.$isEmpty(modelValue) || ngModel.$$parentForm.confirmPassword.$viewValue === '') {
	          // consider empty models to be valid
	          return true;
	        }
	
	        return ngModel.$$parentForm.password.$viewValue === ngModel.$$parentForm.confirmPassword.$viewValue;
	      };
	
	      ngModel.$validate();
	    }
	  };
	}).directive('compareEmail', function () {
	
	  return {
	    require: "ngModel",
	    link: function link(scope, element, attributes, ngModel) {
	
	      ngModel.$validators.compareEmail = function (modelValue) {
	        if (ngModel.$isEmpty(modelValue) || ngModel.$$parentForm.confirmEmail.$viewValue === '') {
	          // consider empty models to be valid
	          return true;
	        }
	
	        return ngModel.$$parentForm.email.$viewValue === ngModel.$$parentForm.confirmEmail.$viewValue;
	      };
	      ngModel.$validate();
	    }
	  };
	}).config(["$stateProvider", "$translateProvider", "$urlRouterProvider", "$httpProvider", function ($stateProvider, $translateProvider, $urlRouterProvider, $httpProvider) {
	  'ngInject';
	
	  $translateProvider.useSanitizeValueStrategy('escape');
	  $translateProvider.useSanitizeValueStrategy('escapeParameters');
	  $translateProvider.translations('en', _en2.default);
	  $translateProvider.translations('pt', _pt2.default);
	  $translateProvider.preferredLanguage((0, _language2.default)());
	  $urlRouterProvider.otherwise('/');
	
	  $stateProvider.state('signup', {
	    url: '/signup',
	    template: '<signup-page></signup-page>'
	  }).state('login', {
	    url: '/login',
	    template: '<login-page></login-page>'
	  }).state('buy', {
	    url: '/buy',
	    template: '<buy-page></buy-page>'
	  }).state('faq', {
	    url: '/faq',
	    template: '<faq-page></faq-page>'
	  }).state('historic', {
	    url: '/historic',
	    template: '<dashboard-page></dashboard-page>'
	  }).state('home', {
	    url: '/',
	    template: '<login-page></login-page>'
	  });
	  /*.state('fix', {
	    url: '/',
	    template: '<fix-page></fix-page>',
	  });*/
	}]);

/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(330);
	module.exports = angular;

/***/ },
/* 330 */
/***/ function(module, exports) {

	'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};/**
	 * @license AngularJS v1.6.4
	 * (c) 2010-2017 Google, Inc. http://angularjs.org
	 * License: MIT
	 */(function(window){'use strict';/**
	 * @description
	 *
	 * This object provides a utility for producing rich Error messages within
	 * Angular. It can be called as follows:
	 *
	 * var exampleMinErr = minErr('example');
	 * throw exampleMinErr('one', 'This {0} is {1}', foo, bar);
	 *
	 * The above creates an instance of minErr in the example namespace. The
	 * resulting error will have a namespaced error code of example.one.  The
	 * resulting error will replace {0} with the value of foo, and {1} with the
	 * value of bar. The object is not restricted in the number of arguments it can
	 * take.
	 *
	 * If fewer arguments are specified than necessary for interpolation, the extra
	 * interpolation markers will be preserved in the final string.
	 *
	 * Since data will be parsed statically during a build step, some restrictions
	 * are applied with respect to how minErr instances are created and called.
	 * Instances should have names of the form namespaceMinErr for a minErr created
	 * using minErr('namespace') . Error codes, namespaces and template strings
	 * should all be static strings, not variables or general expressions.
	 *
	 * @param {string} module The namespace to use for the new minErr instance.
	 * @param {function} ErrorConstructor Custom error constructor to be instantiated when returning
	 *   error from returned function, for cases when a particular type of error is useful.
	 * @returns {function(code:string, template:string, ...templateArgs): Error} minErr instance
	 */function minErr(module,ErrorConstructor){ErrorConstructor=ErrorConstructor||Error;return function(){var code=arguments[0],template=arguments[1],message='['+(module?module+':':'')+code+'] ',templateArgs=sliceArgs(arguments,2).map(function(arg){return toDebugString(arg,minErrConfig.objectMaxDepth);}),paramPrefix,i;message+=template.replace(/\{\d+\}/g,function(match){var index=+match.slice(1,-1);if(index<templateArgs.length){return templateArgs[index];}return match;});message+='\nhttp://errors.angularjs.org/1.6.4/'+(module?module+'/':'')+code;for(i=0,paramPrefix='?';i<templateArgs.length;i++,paramPrefix='&'){message+=paramPrefix+'p'+i+'='+encodeURIComponent(templateArgs[i]);}return new ErrorConstructor(message);};}/* We need to tell ESLint what variables are being exported *//* exported
	  angular,
	  msie,
	  jqLite,
	  jQuery,
	  slice,
	  splice,
	  push,
	  toString,
	  minErrConfig,
	  errorHandlingConfig,
	  isValidObjectMaxDepth,
	  ngMinErr,
	  angularModule,
	  uid,
	  REGEX_STRING_REGEXP,
	  VALIDITY_STATE_PROPERTY,
	
	  lowercase,
	  uppercase,
	  manualLowercase,
	  manualUppercase,
	  nodeName_,
	  isArrayLike,
	  forEach,
	  forEachSorted,
	  reverseParams,
	  nextUid,
	  setHashKey,
	  extend,
	  toInt,
	  inherit,
	  merge,
	  noop,
	  identity,
	  valueFn,
	  isUndefined,
	  isDefined,
	  isObject,
	  isBlankObject,
	  isString,
	  isNumber,
	  isNumberNaN,
	  isDate,
	  isArray,
	  isFunction,
	  isRegExp,
	  isWindow,
	  isScope,
	  isFile,
	  isFormData,
	  isBlob,
	  isBoolean,
	  isPromiseLike,
	  trim,
	  escapeForRegexp,
	  isElement,
	  makeMap,
	  includes,
	  arrayRemove,
	  copy,
	  simpleCompare,
	  equals,
	  csp,
	  jq,
	  concat,
	  sliceArgs,
	  bind,
	  toJsonReplacer,
	  toJson,
	  fromJson,
	  convertTimezoneToLocal,
	  timezoneToOffset,
	  startingTag,
	  tryDecodeURIComponent,
	  parseKeyValue,
	  toKeyValue,
	  encodeUriSegment,
	  encodeUriQuery,
	  angularInit,
	  bootstrap,
	  getTestability,
	  snake_case,
	  bindJQuery,
	  assertArg,
	  assertArgFn,
	  assertNotHasOwnProperty,
	  getter,
	  getBlockNodes,
	  hasOwnProperty,
	  createMap,
	  stringify,
	
	  NODE_TYPE_ELEMENT,
	  NODE_TYPE_ATTRIBUTE,
	  NODE_TYPE_TEXT,
	  NODE_TYPE_COMMENT,
	  NODE_TYPE_DOCUMENT,
	  NODE_TYPE_DOCUMENT_FRAGMENT
	*/////////////////////////////////////
	/**
	 * @ngdoc module
	 * @name ng
	 * @module ng
	 * @installation
	 * @description
	 *
	 * # ng (core module)
	 * The ng module is loaded by default when an AngularJS application is started. The module itself
	 * contains the essential components for an AngularJS application to function. The table below
	 * lists a high level breakdown of each of the services/factories, filters, directives and testing
	 * components available within this core module.
	 *
	 * <div doc-module-components="ng"></div>
	 */var REGEX_STRING_REGEXP=/^\/(.+)\/([a-z]*)$/;// The name of a form control's ValidityState property.
	// This is used so that it's possible for internal tests to create mock ValidityStates.
	var VALIDITY_STATE_PROPERTY='validity';var hasOwnProperty=Object.prototype.hasOwnProperty;var minErrConfig={objectMaxDepth:5};/**
	 * @ngdoc function
	 * @name angular.errorHandlingConfig
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Configure several aspects of error handling in AngularJS if used as a setter or return the
	 * current configuration if used as a getter. The following options are supported:
	 *
	 * - **objectMaxDepth**: The maximum depth to which objects are traversed when stringified for error messages.
	 *
	 * Omitted or undefined options will leave the corresponding configuration values unchanged.
	 *
	 * @param {Object=} config - The configuration object. May only contain the options that need to be
	 *     updated. Supported keys:
	 *
	 * * `objectMaxDepth`  **{Number}** - The max depth for stringifying objects. Setting to a
	 *   non-positive or non-numeric value, removes the max depth limit.
	 *   Default: 5
	 */function errorHandlingConfig(config){if(isObject(config)){if(isDefined(config.objectMaxDepth)){minErrConfig.objectMaxDepth=isValidObjectMaxDepth(config.objectMaxDepth)?config.objectMaxDepth:NaN;}}else{return minErrConfig;}}/**
	 * @private
	 * @param {Number} maxDepth
	 * @return {boolean}
	 */function isValidObjectMaxDepth(maxDepth){return isNumber(maxDepth)&&maxDepth>0;}/**
	 * @ngdoc function
	 * @name angular.lowercase
	 * @module ng
	 * @kind function
	 *
	 * @deprecated
	 * sinceVersion="1.5.0"
	 * removeVersion="1.7.0"
	 * Use [String.prototype.toLowerCase](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase) instead.
	 *
	 * @description Converts the specified string to lowercase.
	 * @param {string} string String to be converted to lowercase.
	 * @returns {string} Lowercased string.
	 */var lowercase=function lowercase(string){return isString(string)?string.toLowerCase():string;};/**
	 * @ngdoc function
	 * @name angular.uppercase
	 * @module ng
	 * @kind function
	 *
	 * @deprecated
	 * sinceVersion="1.5.0"
	 * removeVersion="1.7.0"
	 * Use [String.prototype.toUpperCase](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase) instead.
	 *
	 * @description Converts the specified string to uppercase.
	 * @param {string} string String to be converted to uppercase.
	 * @returns {string} Uppercased string.
	 */var uppercase=function uppercase(string){return isString(string)?string.toUpperCase():string;};var manualLowercase=function manualLowercase(s){/* eslint-disable no-bitwise */return isString(s)?s.replace(/[A-Z]/g,function(ch){return String.fromCharCode(ch.charCodeAt(0)|32);}):s;/* eslint-enable */};var manualUppercase=function manualUppercase(s){/* eslint-disable no-bitwise */return isString(s)?s.replace(/[a-z]/g,function(ch){return String.fromCharCode(ch.charCodeAt(0)&~32);}):s;/* eslint-enable */};// String#toLowerCase and String#toUpperCase don't produce correct results in browsers with Turkish
	// locale, for this reason we need to detect this case and redefine lowercase/uppercase methods
	// with correct but slower alternatives. See https://github.com/angular/angular.js/issues/11387
	if('i'!=='I'.toLowerCase()){lowercase=manualLowercase;uppercase=manualUppercase;}var msie,// holds major version number for IE, or NaN if UA is not IE.
	jqLite,// delay binding since jQuery could be loaded after us.
	jQuery,// delay binding
	slice=[].slice,splice=[].splice,push=[].push,toString=Object.prototype.toString,getPrototypeOf=Object.getPrototypeOf,ngMinErr=minErr('ng'),/** @name angular */angular=window.angular||(window.angular={}),angularModule,uid=0;// Support: IE 9-11 only
	/**
	 * documentMode is an IE-only property
	 * http://msdn.microsoft.com/en-us/library/ie/cc196988(v=vs.85).aspx
	 */msie=window.document.documentMode;/**
	 * @private
	 * @param {*} obj
	 * @return {boolean} Returns true if `obj` is an array or array-like object (NodeList, Arguments,
	 *                   String ...)
	 */function isArrayLike(obj){// `null`, `undefined` and `window` are not array-like
	if(obj==null||isWindow(obj))return false;// arrays, strings and jQuery/jqLite objects are array like
	// * jqLite is either the jQuery or jqLite constructor function
	// * we have to check the existence of jqLite first as this method is called
	//   via the forEach method when constructing the jqLite object in the first place
	if(isArray(obj)||isString(obj)||jqLite&&obj instanceof jqLite)return true;// Support: iOS 8.2 (not reproducible in simulator)
	// "length" in obj used to prevent JIT error (gh-11508)
	var length='length'in Object(obj)&&obj.length;// NodeList objects (with `item` method) and
	// other objects with suitable length characteristics are array-like
	return isNumber(length)&&(length>=0&&(length-1 in obj||obj instanceof Array)||typeof obj.item==='function');}/**
	 * @ngdoc function
	 * @name angular.forEach
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Invokes the `iterator` function once for each item in `obj` collection, which can be either an
	 * object or an array. The `iterator` function is invoked with `iterator(value, key, obj)`, where `value`
	 * is the value of an object property or an array element, `key` is the object property key or
	 * array element index and obj is the `obj` itself. Specifying a `context` for the function is optional.
	 *
	 * It is worth noting that `.forEach` does not iterate over inherited properties because it filters
	 * using the `hasOwnProperty` method.
	 *
	 * Unlike ES262's
	 * [Array.prototype.forEach](http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.18),
	 * providing 'undefined' or 'null' values for `obj` will not throw a TypeError, but rather just
	 * return the value provided.
	 *
	   ```js
	     var values = {name: 'misko', gender: 'male'};
	     var log = [];
	     angular.forEach(values, function(value, key) {
	       this.push(key + ': ' + value);
	     }, log);
	     expect(log).toEqual(['name: misko', 'gender: male']);
	   ```
	 *
	 * @param {Object|Array} obj Object to iterate over.
	 * @param {Function} iterator Iterator function.
	 * @param {Object=} context Object to become context (`this`) for the iterator function.
	 * @returns {Object|Array} Reference to `obj`.
	 */function forEach(obj,iterator,context){var key,length;if(obj){if(isFunction(obj)){for(key in obj){if(key!=='prototype'&&key!=='length'&&key!=='name'&&obj.hasOwnProperty(key)){iterator.call(context,obj[key],key,obj);}}}else if(isArray(obj)||isArrayLike(obj)){var isPrimitive=(typeof obj==='undefined'?'undefined':_typeof(obj))!=='object';for(key=0,length=obj.length;key<length;key++){if(isPrimitive||key in obj){iterator.call(context,obj[key],key,obj);}}}else if(obj.forEach&&obj.forEach!==forEach){obj.forEach(iterator,context,obj);}else if(isBlankObject(obj)){// createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty
	for(key in obj){iterator.call(context,obj[key],key,obj);}}else if(typeof obj.hasOwnProperty==='function'){// Slow path for objects inheriting Object.prototype, hasOwnProperty check needed
	for(key in obj){if(obj.hasOwnProperty(key)){iterator.call(context,obj[key],key,obj);}}}else{// Slow path for objects which do not have a method `hasOwnProperty`
	for(key in obj){if(hasOwnProperty.call(obj,key)){iterator.call(context,obj[key],key,obj);}}}}return obj;}function forEachSorted(obj,iterator,context){var keys=Object.keys(obj).sort();for(var i=0;i<keys.length;i++){iterator.call(context,obj[keys[i]],keys[i]);}return keys;}/**
	 * when using forEach the params are value, key, but it is often useful to have key, value.
	 * @param {function(string, *)} iteratorFn
	 * @returns {function(*, string)}
	 */function reverseParams(iteratorFn){return function(value,key){iteratorFn(key,value);};}/**
	 * A consistent way of creating unique IDs in angular.
	 *
	 * Using simple numbers allows us to generate 28.6 million unique ids per second for 10 years before
	 * we hit number precision issues in JavaScript.
	 *
	 * Math.pow(2,53) / 60 / 60 / 24 / 365 / 10 = 28.6M
	 *
	 * @returns {number} an unique alpha-numeric string
	 */function nextUid(){return++uid;}/**
	 * Set or clear the hashkey for an object.
	 * @param obj object
	 * @param h the hashkey (!truthy to delete the hashkey)
	 */function setHashKey(obj,h){if(h){obj.$$hashKey=h;}else{delete obj.$$hashKey;}}function baseExtend(dst,objs,deep){var h=dst.$$hashKey;for(var i=0,ii=objs.length;i<ii;++i){var obj=objs[i];if(!isObject(obj)&&!isFunction(obj))continue;var keys=Object.keys(obj);for(var j=0,jj=keys.length;j<jj;j++){var key=keys[j];var src=obj[key];if(deep&&isObject(src)){if(isDate(src)){dst[key]=new Date(src.valueOf());}else if(isRegExp(src)){dst[key]=new RegExp(src);}else if(src.nodeName){dst[key]=src.cloneNode(true);}else if(isElement(src)){dst[key]=src.clone();}else{if(!isObject(dst[key]))dst[key]=isArray(src)?[]:{};baseExtend(dst[key],[src],true);}}else{dst[key]=src;}}}setHashKey(dst,h);return dst;}/**
	 * @ngdoc function
	 * @name angular.extend
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
	 * to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so
	 * by passing an empty object as the target: `var object = angular.extend({}, object1, object2)`.
	 *
	 * **Note:** Keep in mind that `angular.extend` does not support recursive merge (deep copy). Use
	 * {@link angular.merge} for this.
	 *
	 * @param {Object} dst Destination object.
	 * @param {...Object} src Source object(s).
	 * @returns {Object} Reference to `dst`.
	 */function extend(dst){return baseExtend(dst,slice.call(arguments,1),false);}/**
	* @ngdoc function
	* @name angular.merge
	* @module ng
	* @kind function
	*
	* @description
	* Deeply extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
	* to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so
	* by passing an empty object as the target: `var object = angular.merge({}, object1, object2)`.
	*
	* Unlike {@link angular.extend extend()}, `merge()` recursively descends into object properties of source
	* objects, performing a deep copy.
	*
	* @param {Object} dst Destination object.
	* @param {...Object} src Source object(s).
	* @returns {Object} Reference to `dst`.
	*/function merge(dst){return baseExtend(dst,slice.call(arguments,1),true);}function toInt(str){return parseInt(str,10);}var isNumberNaN=Number.isNaN||function isNumberNaN(num){// eslint-disable-next-line no-self-compare
	return num!==num;};function inherit(parent,extra){return extend(Object.create(parent),extra);}/**
	 * @ngdoc function
	 * @name angular.noop
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * A function that performs no operations. This function can be useful when writing code in the
	 * functional style.
	   ```js
	     function foo(callback) {
	       var result = calculateResult();
	       (callback || angular.noop)(result);
	     }
	   ```
	 */function noop(){}noop.$inject=[];/**
	 * @ngdoc function
	 * @name angular.identity
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * A function that returns its first argument. This function is useful when writing code in the
	 * functional style.
	 *
	   ```js
	   function transformer(transformationFn, value) {
	     return (transformationFn || angular.identity)(value);
	   };
	
	   // E.g.
	   function getResult(fn, input) {
	     return (fn || angular.identity)(input);
	   };
	
	   getResult(function(n) { return n * 2; }, 21);   // returns 42
	   getResult(null, 21);                            // returns 21
	   getResult(undefined, 21);                       // returns 21
	   ```
	 *
	 * @param {*} value to be returned.
	 * @returns {*} the value passed in.
	 */function identity($){return $;}identity.$inject=[];function valueFn(value){return function valueRef(){return value;};}function hasCustomToString(obj){return isFunction(obj.toString)&&obj.toString!==toString;}/**
	 * @ngdoc function
	 * @name angular.isUndefined
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is undefined.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is undefined.
	 */function isUndefined(value){return typeof value==='undefined';}/**
	 * @ngdoc function
	 * @name angular.isDefined
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is defined.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is defined.
	 */function isDefined(value){return typeof value!=='undefined';}/**
	 * @ngdoc function
	 * @name angular.isObject
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not
	 * considered to be objects. Note that JavaScript arrays are objects.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is an `Object` but not `null`.
	 */function isObject(value){// http://jsperf.com/isobject4
	return value!==null&&(typeof value==='undefined'?'undefined':_typeof(value))==='object';}/**
	 * Determine if a value is an object with a null prototype
	 *
	 * @returns {boolean} True if `value` is an `Object` with a null prototype
	 */function isBlankObject(value){return value!==null&&(typeof value==='undefined'?'undefined':_typeof(value))==='object'&&!getPrototypeOf(value);}/**
	 * @ngdoc function
	 * @name angular.isString
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a `String`.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `String`.
	 */function isString(value){return typeof value==='string';}/**
	 * @ngdoc function
	 * @name angular.isNumber
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a `Number`.
	 *
	 * This includes the "special" numbers `NaN`, `+Infinity` and `-Infinity`.
	 *
	 * If you wish to exclude these then you can use the native
	 * [`isFinite'](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite)
	 * method.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `Number`.
	 */function isNumber(value){return typeof value==='number';}/**
	 * @ngdoc function
	 * @name angular.isDate
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a value is a date.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `Date`.
	 */function isDate(value){return toString.call(value)==='[object Date]';}/**
	 * @ngdoc function
	 * @name angular.isArray
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is an `Array`. Alias of Array.isArray.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is an `Array`.
	 */var isArray=Array.isArray;/**
	 * @ngdoc function
	 * @name angular.isFunction
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a `Function`.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `Function`.
	 */function isFunction(value){return typeof value==='function';}/**
	 * Determines if a value is a regular expression object.
	 *
	 * @private
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `RegExp`.
	 */function isRegExp(value){return toString.call(value)==='[object RegExp]';}/**
	 * Checks if `obj` is a window object.
	 *
	 * @private
	 * @param {*} obj Object to check
	 * @returns {boolean} True if `obj` is a window obj.
	 */function isWindow(obj){return obj&&obj.window===obj;}function isScope(obj){return obj&&obj.$evalAsync&&obj.$watch;}function isFile(obj){return toString.call(obj)==='[object File]';}function isFormData(obj){return toString.call(obj)==='[object FormData]';}function isBlob(obj){return toString.call(obj)==='[object Blob]';}function isBoolean(value){return typeof value==='boolean';}function isPromiseLike(obj){return obj&&isFunction(obj.then);}var TYPED_ARRAY_REGEXP=/^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array]$/;function isTypedArray(value){return value&&isNumber(value.length)&&TYPED_ARRAY_REGEXP.test(toString.call(value));}function isArrayBuffer(obj){return toString.call(obj)==='[object ArrayBuffer]';}var trim=function trim(value){return isString(value)?value.trim():value;};// Copied from:
	// http://docs.closure-library.googlecode.com/git/local_closure_goog_string_string.js.source.html#line1021
	// Prereq: s is a string.
	var escapeForRegexp=function escapeForRegexp(s){return s.replace(/([-()[\]{}+?*.$^|,:#<!\\])/g,'\\$1')// eslint-disable-next-line no-control-regex
	.replace(/\x08/g,'\\x08');};/**
	 * @ngdoc function
	 * @name angular.isElement
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a DOM element (or wrapped jQuery element).
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a DOM element (or wrapped jQuery element).
	 */function isElement(node){return!!(node&&(node.nodeName// We are a direct element.
	||node.prop&&node.attr&&node.find));// We have an on and find method part of jQuery API.
	}/**
	 * @param str 'key1,key2,...'
	 * @returns {object} in the form of {key1:true, key2:true, ...}
	 */function makeMap(str){var obj={},items=str.split(','),i;for(i=0;i<items.length;i++){obj[items[i]]=true;}return obj;}function nodeName_(element){return lowercase(element.nodeName||element[0]&&element[0].nodeName);}function includes(array,obj){return Array.prototype.indexOf.call(array,obj)!==-1;}function arrayRemove(array,value){var index=array.indexOf(value);if(index>=0){array.splice(index,1);}return index;}/**
	 * @ngdoc function
	 * @name angular.copy
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Creates a deep copy of `source`, which should be an object or an array.
	 *
	 * * If no destination is supplied, a copy of the object or array is created.
	 * * If a destination is provided, all of its elements (for arrays) or properties (for objects)
	 *   are deleted and then all elements/properties from the source are copied to it.
	 * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.
	 * * If `source` is identical to `destination` an exception will be thrown.
	 *
	 * <br />
	 * <div class="alert alert-warning">
	 *   Only enumerable properties are taken into account. Non-enumerable properties (both on `source`
	 *   and on `destination`) will be ignored.
	 * </div>
	 *
	 * @param {*} source The source that will be used to make a copy.
	 *                   Can be any type, including primitives, `null`, and `undefined`.
	 * @param {(Object|Array)=} destination Destination into which the source is copied. If
	 *     provided, must be of the same type as `source`.
	 * @returns {*} The copy or updated `destination`, if `destination` was specified.
	 *
	 * @example
	  <example module="copyExample" name="angular-copy">
	    <file name="index.html">
	      <div ng-controller="ExampleController">
	        <form novalidate class="simple-form">
	          <label>Name: <input type="text" ng-model="user.name" /></label><br />
	          <label>Age:  <input type="number" ng-model="user.age" /></label><br />
	          Gender: <label><input type="radio" ng-model="user.gender" value="male" />male</label>
	                  <label><input type="radio" ng-model="user.gender" value="female" />female</label><br />
	          <button ng-click="reset()">RESET</button>
	          <button ng-click="update(user)">SAVE</button>
	        </form>
	        <pre>form = {{user | json}}</pre>
	        <pre>master = {{master | json}}</pre>
	      </div>
	    </file>
	    <file name="script.js">
	      // Module: copyExample
	      angular.
	        module('copyExample', []).
	        controller('ExampleController', ['$scope', function($scope) {
	          $scope.master = {};
	
	          $scope.reset = function() {
	            // Example with 1 argument
	            $scope.user = angular.copy($scope.master);
	          };
	
	          $scope.update = function(user) {
	            // Example with 2 arguments
	            angular.copy(user, $scope.master);
	          };
	
	          $scope.reset();
	        }]);
	    </file>
	  </example>
	 */function copy(source,destination,maxDepth){var stackSource=[];var stackDest=[];maxDepth=isValidObjectMaxDepth(maxDepth)?maxDepth:NaN;if(destination){if(isTypedArray(destination)||isArrayBuffer(destination)){throw ngMinErr('cpta','Can\'t copy! TypedArray destination cannot be mutated.');}if(source===destination){throw ngMinErr('cpi','Can\'t copy! Source and destination are identical.');}// Empty the destination object
	if(isArray(destination)){destination.length=0;}else{forEach(destination,function(value,key){if(key!=='$$hashKey'){delete destination[key];}});}stackSource.push(source);stackDest.push(destination);return copyRecurse(source,destination,maxDepth);}return copyElement(source,maxDepth);function copyRecurse(source,destination,maxDepth){maxDepth--;if(maxDepth<0){return'...';}var h=destination.$$hashKey;var key;if(isArray(source)){for(var i=0,ii=source.length;i<ii;i++){destination.push(copyElement(source[i],maxDepth));}}else if(isBlankObject(source)){// createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty
	for(key in source){destination[key]=copyElement(source[key],maxDepth);}}else if(source&&typeof source.hasOwnProperty==='function'){// Slow path, which must rely on hasOwnProperty
	for(key in source){if(source.hasOwnProperty(key)){destination[key]=copyElement(source[key],maxDepth);}}}else{// Slowest path --- hasOwnProperty can't be called as a method
	for(key in source){if(hasOwnProperty.call(source,key)){destination[key]=copyElement(source[key],maxDepth);}}}setHashKey(destination,h);return destination;}function copyElement(source,maxDepth){// Simple values
	if(!isObject(source)){return source;}// Already copied values
	var index=stackSource.indexOf(source);if(index!==-1){return stackDest[index];}if(isWindow(source)||isScope(source)){throw ngMinErr('cpws','Can\'t copy! Making copies of Window or Scope instances is not supported.');}var needsRecurse=false;var destination=copyType(source);if(destination===undefined){destination=isArray(source)?[]:Object.create(getPrototypeOf(source));needsRecurse=true;}stackSource.push(source);stackDest.push(destination);return needsRecurse?copyRecurse(source,destination,maxDepth):destination;}function copyType(source){switch(toString.call(source)){case'[object Int8Array]':case'[object Int16Array]':case'[object Int32Array]':case'[object Float32Array]':case'[object Float64Array]':case'[object Uint8Array]':case'[object Uint8ClampedArray]':case'[object Uint16Array]':case'[object Uint32Array]':return new source.constructor(copyElement(source.buffer),source.byteOffset,source.length);case'[object ArrayBuffer]':// Support: IE10
	if(!source.slice){// If we're in this case we know the environment supports ArrayBuffer
	/* eslint-disable no-undef */var copied=new ArrayBuffer(source.byteLength);new Uint8Array(copied).set(new Uint8Array(source));/* eslint-enable */return copied;}return source.slice(0);case'[object Boolean]':case'[object Number]':case'[object String]':case'[object Date]':return new source.constructor(source.valueOf());case'[object RegExp]':var re=new RegExp(source.source,source.toString().match(/[^/]*$/)[0]);re.lastIndex=source.lastIndex;return re;case'[object Blob]':return new source.constructor([source],{type:source.type});}if(isFunction(source.cloneNode)){return source.cloneNode(true);}}}// eslint-disable-next-line no-self-compare
	function simpleCompare(a,b){return a===b||a!==a&&b!==b;}/**
	 * @ngdoc function
	 * @name angular.equals
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if two objects or two values are equivalent. Supports value types, regular
	 * expressions, arrays and objects.
	 *
	 * Two objects or values are considered equivalent if at least one of the following is true:
	 *
	 * * Both objects or values pass `===` comparison.
	 * * Both objects or values are of the same type and all of their properties are equal by
	 *   comparing them with `angular.equals`.
	 * * Both values are NaN. (In JavaScript, NaN == NaN => false. But we consider two NaN as equal)
	 * * Both values represent the same regular expression (In JavaScript,
	 *   /abc/ == /abc/ => false. But we consider two regular expressions as equal when their textual
	 *   representation matches).
	 *
	 * During a property comparison, properties of `function` type and properties with names
	 * that begin with `$` are ignored.
	 *
	 * Scope and DOMWindow objects are being compared only by identify (`===`).
	 *
	 * @param {*} o1 Object or value to compare.
	 * @param {*} o2 Object or value to compare.
	 * @returns {boolean} True if arguments are equal.
	 *
	 * @example
	   <example module="equalsExample" name="equalsExample">
	     <file name="index.html">
	      <div ng-controller="ExampleController">
	        <form novalidate>
	          <h3>User 1</h3>
	          Name: <input type="text" ng-model="user1.name">
	          Age: <input type="number" ng-model="user1.age">
	
	          <h3>User 2</h3>
	          Name: <input type="text" ng-model="user2.name">
	          Age: <input type="number" ng-model="user2.age">
	
	          <div>
	            <br/>
	            <input type="button" value="Compare" ng-click="compare()">
	          </div>
	          User 1: <pre>{{user1 | json}}</pre>
	          User 2: <pre>{{user2 | json}}</pre>
	          Equal: <pre>{{result}}</pre>
	        </form>
	      </div>
	    </file>
	    <file name="script.js">
	        angular.module('equalsExample', []).controller('ExampleController', ['$scope', function($scope) {
	          $scope.user1 = {};
	          $scope.user2 = {};
	          $scope.compare = function() {
	            $scope.result = angular.equals($scope.user1, $scope.user2);
	          };
	        }]);
	    </file>
	  </example>
	 */function equals(o1,o2){if(o1===o2)return true;if(o1===null||o2===null)return false;// eslint-disable-next-line no-self-compare
	if(o1!==o1&&o2!==o2)return true;// NaN === NaN
	var t1=typeof o1==='undefined'?'undefined':_typeof(o1),t2=typeof o2==='undefined'?'undefined':_typeof(o2),length,key,keySet;if(t1===t2&&t1==='object'){if(isArray(o1)){if(!isArray(o2))return false;if((length=o1.length)===o2.length){for(key=0;key<length;key++){if(!equals(o1[key],o2[key]))return false;}return true;}}else if(isDate(o1)){if(!isDate(o2))return false;return simpleCompare(o1.getTime(),o2.getTime());}else if(isRegExp(o1)){if(!isRegExp(o2))return false;return o1.toString()===o2.toString();}else{if(isScope(o1)||isScope(o2)||isWindow(o1)||isWindow(o2)||isArray(o2)||isDate(o2)||isRegExp(o2))return false;keySet=createMap();for(key in o1){if(key.charAt(0)==='$'||isFunction(o1[key]))continue;if(!equals(o1[key],o2[key]))return false;keySet[key]=true;}for(key in o2){if(!(key in keySet)&&key.charAt(0)!=='$'&&isDefined(o2[key])&&!isFunction(o2[key]))return false;}return true;}}return false;}var csp=function csp(){if(!isDefined(csp.rules)){var ngCspElement=window.document.querySelector('[ng-csp]')||window.document.querySelector('[data-ng-csp]');if(ngCspElement){var ngCspAttribute=ngCspElement.getAttribute('ng-csp')||ngCspElement.getAttribute('data-ng-csp');csp.rules={noUnsafeEval:!ngCspAttribute||ngCspAttribute.indexOf('no-unsafe-eval')!==-1,noInlineStyle:!ngCspAttribute||ngCspAttribute.indexOf('no-inline-style')!==-1};}else{csp.rules={noUnsafeEval:noUnsafeEval(),noInlineStyle:false};}}return csp.rules;function noUnsafeEval(){try{// eslint-disable-next-line no-new, no-new-func
	new Function('');return false;}catch(e){return true;}}};/**
	 * @ngdoc directive
	 * @module ng
	 * @name ngJq
	 *
	 * @element ANY
	 * @param {string=} ngJq the name of the library available under `window`
	 * to be used for angular.element
	 * @description
	 * Use this directive to force the angular.element library.  This should be
	 * used to force either jqLite by leaving ng-jq blank or setting the name of
	 * the jquery variable under window (eg. jQuery).
	 *
	 * Since angular looks for this directive when it is loaded (doesn't wait for the
	 * DOMContentLoaded event), it must be placed on an element that comes before the script
	 * which loads angular. Also, only the first instance of `ng-jq` will be used and all
	 * others ignored.
	 *
	 * @example
	 * This example shows how to force jqLite using the `ngJq` directive to the `html` tag.
	 ```html
	 <!doctype html>
	 <html ng-app ng-jq>
	 ...
	 ...
	 </html>
	 ```
	 * @example
	 * This example shows how to use a jQuery based library of a different name.
	 * The library name must be available at the top most 'window'.
	 ```html
	 <!doctype html>
	 <html ng-app ng-jq="jQueryLib">
	 ...
	 ...
	 </html>
	 ```
	 */var jq=function jq(){if(isDefined(jq.name_))return jq.name_;var el;var i,ii=ngAttrPrefixes.length,prefix,name;for(i=0;i<ii;++i){prefix=ngAttrPrefixes[i];el=window.document.querySelector('['+prefix.replace(':','\\:')+'jq]');if(el){name=el.getAttribute(prefix+'jq');break;}}return jq.name_=name;};function concat(array1,array2,index){return array1.concat(slice.call(array2,index));}function sliceArgs(args,startIndex){return slice.call(args,startIndex||0);}/**
	 * @ngdoc function
	 * @name angular.bind
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for
	 * `fn`). You can supply optional `args` that are prebound to the function. This feature is also
	 * known as [partial application](http://en.wikipedia.org/wiki/Partial_application), as
	 * distinguished from [function currying](http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application).
	 *
	 * @param {Object} self Context which `fn` should be evaluated in.
	 * @param {function()} fn Function to be bound.
	 * @param {...*} args Optional arguments to be prebound to the `fn` function call.
	 * @returns {function()} Function that wraps the `fn` with all the specified bindings.
	 */function bind(self,fn){var curryArgs=arguments.length>2?sliceArgs(arguments,2):[];if(isFunction(fn)&&!(fn instanceof RegExp)){return curryArgs.length?function(){return arguments.length?fn.apply(self,concat(curryArgs,arguments,0)):fn.apply(self,curryArgs);}:function(){return arguments.length?fn.apply(self,arguments):fn.call(self);};}else{// In IE, native methods are not functions so they cannot be bound (note: they don't need to be).
	return fn;}}function toJsonReplacer(key,value){var val=value;if(typeof key==='string'&&key.charAt(0)==='$'&&key.charAt(1)==='$'){val=undefined;}else if(isWindow(value)){val='$WINDOW';}else if(value&&window.document===value){val='$DOCUMENT';}else if(isScope(value)){val='$SCOPE';}return val;}/**
	 * @ngdoc function
	 * @name angular.toJson
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Serializes input into a JSON-formatted string. Properties with leading $$ characters will be
	 * stripped since angular uses this notation internally.
	 *
	 * @param {Object|Array|Date|string|number|boolean} obj Input to be serialized into JSON.
	 * @param {boolean|number} [pretty=2] If set to true, the JSON output will contain newlines and whitespace.
	 *    If set to an integer, the JSON output will contain that many spaces per indentation.
	 * @returns {string|undefined} JSON-ified string representing `obj`.
	 * @knownIssue
	 *
	 * The Safari browser throws a `RangeError` instead of returning `null` when it tries to stringify a `Date`
	 * object with an invalid date value. The only reliable way to prevent this is to monkeypatch the
	 * `Date.prototype.toJSON` method as follows:
	 *
	 * ```
	 * var _DatetoJSON = Date.prototype.toJSON;
	 * Date.prototype.toJSON = function() {
	 *   try {
	 *     return _DatetoJSON.call(this);
	 *   } catch(e) {
	 *     if (e instanceof RangeError) {
	 *       return null;
	 *     }
	 *     throw e;
	 *   }
	 * };
	 * ```
	 *
	 * See https://github.com/angular/angular.js/pull/14221 for more information.
	 */function toJson(obj,pretty){if(isUndefined(obj))return undefined;if(!isNumber(pretty)){pretty=pretty?2:null;}return JSON.stringify(obj,toJsonReplacer,pretty);}/**
	 * @ngdoc function
	 * @name angular.fromJson
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Deserializes a JSON string.
	 *
	 * @param {string} json JSON string to deserialize.
	 * @returns {Object|Array|string|number} Deserialized JSON string.
	 */function fromJson(json){return isString(json)?JSON.parse(json):json;}var ALL_COLONS=/:/g;function timezoneToOffset(timezone,fallback){// Support: IE 9-11 only, Edge 13-14+
	// IE/Edge do not "understand" colon (`:`) in timezone
	timezone=timezone.replace(ALL_COLONS,'');var requestedTimezoneOffset=Date.parse('Jan 01, 1970 00:00:00 '+timezone)/60000;return isNumberNaN(requestedTimezoneOffset)?fallback:requestedTimezoneOffset;}function addDateMinutes(date,minutes){date=new Date(date.getTime());date.setMinutes(date.getMinutes()+minutes);return date;}function convertTimezoneToLocal(date,timezone,reverse){reverse=reverse?-1:1;var dateTimezoneOffset=date.getTimezoneOffset();var timezoneOffset=timezoneToOffset(timezone,dateTimezoneOffset);return addDateMinutes(date,reverse*(timezoneOffset-dateTimezoneOffset));}/**
	 * @returns {string} Returns the string representation of the element.
	 */function startingTag(element){element=jqLite(element).clone();try{// turns out IE does not let you set .html() on elements which
	// are not allowed to have children. So we just ignore it.
	element.empty();}catch(e){/* empty */}var elemHtml=jqLite('<div>').append(element).html();try{return element[0].nodeType===NODE_TYPE_TEXT?lowercase(elemHtml):elemHtml.match(/^(<[^>]+>)/)[1].replace(/^<([\w-]+)/,function(match,nodeName){return'<'+lowercase(nodeName);});}catch(e){return lowercase(elemHtml);}}/////////////////////////////////////////////////
	/**
	 * Tries to decode the URI component without throwing an exception.
	 *
	 * @private
	 * @param str value potential URI component to check.
	 * @returns {boolean} True if `value` can be decoded
	 * with the decodeURIComponent function.
	 */function tryDecodeURIComponent(value){try{return decodeURIComponent(value);}catch(e){// Ignore any invalid uri component.
	}}/**
	 * Parses an escaped url query string into key-value pairs.
	 * @returns {Object.<string,boolean|Array>}
	 */function parseKeyValue(/**string*/keyValue){var obj={};forEach((keyValue||'').split('&'),function(keyValue){var splitPoint,key,val;if(keyValue){key=keyValue=keyValue.replace(/\+/g,'%20');splitPoint=keyValue.indexOf('=');if(splitPoint!==-1){key=keyValue.substring(0,splitPoint);val=keyValue.substring(splitPoint+1);}key=tryDecodeURIComponent(key);if(isDefined(key)){val=isDefined(val)?tryDecodeURIComponent(val):true;if(!hasOwnProperty.call(obj,key)){obj[key]=val;}else if(isArray(obj[key])){obj[key].push(val);}else{obj[key]=[obj[key],val];}}}});return obj;}function toKeyValue(obj){var parts=[];forEach(obj,function(value,key){if(isArray(value)){forEach(value,function(arrayValue){parts.push(encodeUriQuery(key,true)+(arrayValue===true?'':'='+encodeUriQuery(arrayValue,true)));});}else{parts.push(encodeUriQuery(key,true)+(value===true?'':'='+encodeUriQuery(value,true)));}});return parts.length?parts.join('&'):'';}/**
	 * We need our custom method because encodeURIComponent is too aggressive and doesn't follow
	 * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path
	 * segments:
	 *    segment       = *pchar
	 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
	 *    pct-encoded   = "%" HEXDIG HEXDIG
	 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
	 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
	 *                     / "*" / "+" / "," / ";" / "="
	 */function encodeUriSegment(val){return encodeUriQuery(val,true).replace(/%26/gi,'&').replace(/%3D/gi,'=').replace(/%2B/gi,'+');}/**
	 * This method is intended for encoding *key* or *value* parts of query component. We need a custom
	 * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be
	 * encoded per http://tools.ietf.org/html/rfc3986:
	 *    query         = *( pchar / "/" / "?" )
	 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
	 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
	 *    pct-encoded   = "%" HEXDIG HEXDIG
	 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
	 *                     / "*" / "+" / "," / ";" / "="
	 */function encodeUriQuery(val,pctEncodeSpaces){return encodeURIComponent(val).replace(/%40/gi,'@').replace(/%3A/gi,':').replace(/%24/g,'$').replace(/%2C/gi,',').replace(/%3B/gi,';').replace(/%20/g,pctEncodeSpaces?'%20':'+');}var ngAttrPrefixes=['ng-','data-ng-','ng:','x-ng-'];function getNgAttribute(element,ngAttr){var attr,i,ii=ngAttrPrefixes.length;for(i=0;i<ii;++i){attr=ngAttrPrefixes[i]+ngAttr;if(isString(attr=element.getAttribute(attr))){return attr;}}return null;}function allowAutoBootstrap(document){var script=document.currentScript;if(!script){// IE does not have `document.currentScript`
	return true;}// If the `currentScript` property has been clobbered just return false, since this indicates a probable attack
	if(!(script instanceof window.HTMLScriptElement||script instanceof window.SVGScriptElement)){return false;}var attributes=script.attributes;var srcs=[attributes.getNamedItem('src'),attributes.getNamedItem('href'),attributes.getNamedItem('xlink:href')];return srcs.every(function(src){if(!src){return true;}if(!src.value){return false;}var link=document.createElement('a');link.href=src.value;if(document.location.origin===link.origin){// Same-origin resources are always allowed, even for non-whitelisted schemes.
	return true;}// Disabled bootstrapping unless angular.js was loaded from a known scheme used on the web.
	// This is to prevent angular.js bundled with browser extensions from being used to bypass the
	// content security policy in web pages and other browser extensions.
	switch(link.protocol){case'http:':case'https:':case'ftp:':case'blob:':case'file:':case'data:':return true;default:return false;}});}// Cached as it has to run during loading so that document.currentScript is available.
	var isAutoBootstrapAllowed=allowAutoBootstrap(window.document);/**
	 * @ngdoc directive
	 * @name ngApp
	 * @module ng
	 *
	 * @element ANY
	 * @param {angular.Module} ngApp an optional application
	 *   {@link angular.module module} name to load.
	 * @param {boolean=} ngStrictDi if this attribute is present on the app element, the injector will be
	 *   created in "strict-di" mode. This means that the application will fail to invoke functions which
	 *   do not use explicit function annotation (and are thus unsuitable for minification), as described
	 *   in {@link guide/di the Dependency Injection guide}, and useful debugging info will assist in
	 *   tracking down the root of these bugs.
	 *
	 * @description
	 *
	 * Use this directive to **auto-bootstrap** an AngularJS application. The `ngApp` directive
	 * designates the **root element** of the application and is typically placed near the root element
	 * of the page - e.g. on the `<body>` or `<html>` tags.
	 *
	 * There are a few things to keep in mind when using `ngApp`:
	 * - only one AngularJS application can be auto-bootstrapped per HTML document. The first `ngApp`
	 *   found in the document will be used to define the root element to auto-bootstrap as an
	 *   application. To run multiple applications in an HTML document you must manually bootstrap them using
	 *   {@link angular.bootstrap} instead.
	 * - AngularJS applications cannot be nested within each other.
	 * - Do not use a directive that uses {@link ng.$compile#transclusion transclusion} on the same element as `ngApp`.
	 *   This includes directives such as {@link ng.ngIf `ngIf`}, {@link ng.ngInclude `ngInclude`} and
	 *   {@link ngRoute.ngView `ngView`}.
	 *   Doing this misplaces the app {@link ng.$rootElement `$rootElement`} and the app's {@link auto.$injector injector},
	 *   causing animations to stop working and making the injector inaccessible from outside the app.
	 *
	 * You can specify an **AngularJS module** to be used as the root module for the application.  This
	 * module will be loaded into the {@link auto.$injector} when the application is bootstrapped. It
	 * should contain the application code needed or have dependencies on other modules that will
	 * contain the code. See {@link angular.module} for more information.
	 *
	 * In the example below if the `ngApp` directive were not placed on the `html` element then the
	 * document would not be compiled, the `AppController` would not be instantiated and the `{{ a+b }}`
	 * would not be resolved to `3`.
	 *
	 * `ngApp` is the easiest, and most common way to bootstrap an application.
	 *
	 <example module="ngAppDemo" name="ng-app">
	   <file name="index.html">
	   <div ng-controller="ngAppDemoController">
	     I can add: {{a}} + {{b}} =  {{ a+b }}
	   </div>
	   </file>
	   <file name="script.js">
	   angular.module('ngAppDemo', []).controller('ngAppDemoController', function($scope) {
	     $scope.a = 1;
	     $scope.b = 2;
	   });
	   </file>
	 </example>
	 *
	 * Using `ngStrictDi`, you would see something like this:
	 *
	 <example ng-app-included="true" name="strict-di">
	   <file name="index.html">
	   <div ng-app="ngAppStrictDemo" ng-strict-di>
	       <div ng-controller="GoodController1">
	           I can add: {{a}} + {{b}} =  {{ a+b }}
	
	           <p>This renders because the controller does not fail to
	              instantiate, by using explicit annotation style (see
	              script.js for details)
	           </p>
	       </div>
	
	       <div ng-controller="GoodController2">
	           Name: <input ng-model="name"><br />
	           Hello, {{name}}!
	
	           <p>This renders because the controller does not fail to
	              instantiate, by using explicit annotation style
	              (see script.js for details)
	           </p>
	       </div>
	
	       <div ng-controller="BadController">
	           I can add: {{a}} + {{b}} =  {{ a+b }}
	
	           <p>The controller could not be instantiated, due to relying
	              on automatic function annotations (which are disabled in
	              strict mode). As such, the content of this section is not
	              interpolated, and there should be an error in your web console.
	           </p>
	       </div>
	   </div>
	   </file>
	   <file name="script.js">
	   angular.module('ngAppStrictDemo', [])
	     // BadController will fail to instantiate, due to relying on automatic function annotation,
	     // rather than an explicit annotation
	     .controller('BadController', function($scope) {
	       $scope.a = 1;
	       $scope.b = 2;
	     })
	     // Unlike BadController, GoodController1 and GoodController2 will not fail to be instantiated,
	     // due to using explicit annotations using the array style and $inject property, respectively.
	     .controller('GoodController1', ['$scope', function($scope) {
	       $scope.a = 1;
	       $scope.b = 2;
	     }])
	     .controller('GoodController2', GoodController2);
	     function GoodController2($scope) {
	       $scope.name = 'World';
	     }
	     GoodController2.$inject = ['$scope'];
	   </file>
	   <file name="style.css">
	   div[ng-controller] {
	       margin-bottom: 1em;
	       -webkit-border-radius: 4px;
	       border-radius: 4px;
	       border: 1px solid;
	       padding: .5em;
	   }
	   div[ng-controller^=Good] {
	       border-color: #d6e9c6;
	       background-color: #dff0d8;
	       color: #3c763d;
	   }
	   div[ng-controller^=Bad] {
	       border-color: #ebccd1;
	       background-color: #f2dede;
	       color: #a94442;
	       margin-bottom: 0;
	   }
	   </file>
	 </example>
	 */function angularInit(element,bootstrap){var appElement,module,config={};// The element `element` has priority over any other element.
	forEach(ngAttrPrefixes,function(prefix){var name=prefix+'app';if(!appElement&&element.hasAttribute&&element.hasAttribute(name)){appElement=element;module=element.getAttribute(name);}});forEach(ngAttrPrefixes,function(prefix){var name=prefix+'app';var candidate;if(!appElement&&(candidate=element.querySelector('['+name.replace(':','\\:')+']'))){appElement=candidate;module=candidate.getAttribute(name);}});if(appElement){if(!isAutoBootstrapAllowed){window.console.error('Angular: disabling automatic bootstrap. <script> protocol indicates '+'an extension, document.location.href does not match.');return;}config.strictDi=getNgAttribute(appElement,'strict-di')!==null;bootstrap(appElement,module?[module]:[],config);}}/**
	 * @ngdoc function
	 * @name angular.bootstrap
	 * @module ng
	 * @description
	 * Use this function to manually start up angular application.
	 *
	 * For more information, see the {@link guide/bootstrap Bootstrap guide}.
	 *
	 * Angular will detect if it has been loaded into the browser more than once and only allow the
	 * first loaded script to be bootstrapped and will report a warning to the browser console for
	 * each of the subsequent scripts. This prevents strange results in applications, where otherwise
	 * multiple instances of Angular try to work on the DOM.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Protractor based end-to-end tests cannot use this function to bootstrap manually.
	 * They must use {@link ng.directive:ngApp ngApp}.
	 * </div>
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Do not bootstrap the app on an element with a directive that uses {@link ng.$compile#transclusion transclusion},
	 * such as {@link ng.ngIf `ngIf`}, {@link ng.ngInclude `ngInclude`} and {@link ngRoute.ngView `ngView`}.
	 * Doing this misplaces the app {@link ng.$rootElement `$rootElement`} and the app's {@link auto.$injector injector},
	 * causing animations to stop working and making the injector inaccessible from outside the app.
	 * </div>
	 *
	 * ```html
	 * <!doctype html>
	 * <html>
	 * <body>
	 * <div ng-controller="WelcomeController">
	 *   {{greeting}}
	 * </div>
	 *
	 * <script src="angular.js"></script>
	 * <script>
	 *   var app = angular.module('demo', [])
	 *   .controller('WelcomeController', function($scope) {
	 *       $scope.greeting = 'Welcome!';
	 *   });
	 *   angular.bootstrap(document, ['demo']);
	 * </script>
	 * </body>
	 * </html>
	 * ```
	 *
	 * @param {DOMElement} element DOM element which is the root of angular application.
	 * @param {Array<String|Function|Array>=} modules an array of modules to load into the application.
	 *     Each item in the array should be the name of a predefined module or a (DI annotated)
	 *     function that will be invoked by the injector as a `config` block.
	 *     See: {@link angular.module modules}
	 * @param {Object=} config an object for defining configuration options for the application. The
	 *     following keys are supported:
	 *
	 * * `strictDi` - disable automatic function annotation for the application. This is meant to
	 *   assist in finding bugs which break minified code. Defaults to `false`.
	 *
	 * @returns {auto.$injector} Returns the newly created injector for this app.
	 */function bootstrap(element,modules,config){if(!isObject(config))config={};var defaultConfig={strictDi:false};config=extend(defaultConfig,config);var doBootstrap=function doBootstrap(){element=jqLite(element);if(element.injector()){var tag=element[0]===window.document?'document':startingTag(element);// Encode angle brackets to prevent input from being sanitized to empty string #8683.
	throw ngMinErr('btstrpd','App already bootstrapped with this element \'{0}\'',tag.replace(/</,'&lt;').replace(/>/,'&gt;'));}modules=modules||[];modules.unshift(['$provide',function($provide){$provide.value('$rootElement',element);}]);if(config.debugInfoEnabled){// Pushing so that this overrides `debugInfoEnabled` setting defined in user's `modules`.
	modules.push(['$compileProvider',function($compileProvider){$compileProvider.debugInfoEnabled(true);}]);}modules.unshift('ng');var injector=createInjector(modules,config.strictDi);injector.invoke(['$rootScope','$rootElement','$compile','$injector',function bootstrapApply(scope,element,compile,injector){scope.$apply(function(){element.data('$injector',injector);compile(element)(scope);});}]);return injector;};var NG_ENABLE_DEBUG_INFO=/^NG_ENABLE_DEBUG_INFO!/;var NG_DEFER_BOOTSTRAP=/^NG_DEFER_BOOTSTRAP!/;if(window&&NG_ENABLE_DEBUG_INFO.test(window.name)){config.debugInfoEnabled=true;window.name=window.name.replace(NG_ENABLE_DEBUG_INFO,'');}if(window&&!NG_DEFER_BOOTSTRAP.test(window.name)){return doBootstrap();}window.name=window.name.replace(NG_DEFER_BOOTSTRAP,'');angular.resumeBootstrap=function(extraModules){forEach(extraModules,function(module){modules.push(module);});return doBootstrap();};if(isFunction(angular.resumeDeferredBootstrap)){angular.resumeDeferredBootstrap();}}/**
	 * @ngdoc function
	 * @name angular.reloadWithDebugInfo
	 * @module ng
	 * @description
	 * Use this function to reload the current application with debug information turned on.
	 * This takes precedence over a call to `$compileProvider.debugInfoEnabled(false)`.
	 *
	 * See {@link ng.$compileProvider#debugInfoEnabled} for more.
	 */function reloadWithDebugInfo(){window.name='NG_ENABLE_DEBUG_INFO!'+window.name;window.location.reload();}/**
	 * @name angular.getTestability
	 * @module ng
	 * @description
	 * Get the testability service for the instance of Angular on the given
	 * element.
	 * @param {DOMElement} element DOM element which is the root of angular application.
	 */function getTestability(rootElement){var injector=angular.element(rootElement).injector();if(!injector){throw ngMinErr('test','no injector found for element argument to getTestability');}return injector.get('$$testability');}var SNAKE_CASE_REGEXP=/[A-Z]/g;function snake_case(name,separator){separator=separator||'_';return name.replace(SNAKE_CASE_REGEXP,function(letter,pos){return(pos?separator:'')+letter.toLowerCase();});}var bindJQueryFired=false;function bindJQuery(){var originalCleanData;if(bindJQueryFired){return;}// bind to jQuery if present;
	var jqName=jq();jQuery=isUndefined(jqName)?window.jQuery:// use jQuery (if present)
	!jqName?undefined:// use jqLite
	window[jqName];// use jQuery specified by `ngJq`
	// Use jQuery if it exists with proper functionality, otherwise default to us.
	// Angular 1.2+ requires jQuery 1.7+ for on()/off() support.
	// Angular 1.3+ technically requires at least jQuery 2.1+ but it may work with older
	// versions. It will not work for sure with jQuery <1.7, though.
	if(jQuery&&jQuery.fn.on){jqLite=jQuery;extend(jQuery.fn,{scope:JQLitePrototype.scope,isolateScope:JQLitePrototype.isolateScope,controller:/** @type {?} */JQLitePrototype.controller,injector:JQLitePrototype.injector,inheritedData:JQLitePrototype.inheritedData});// All nodes removed from the DOM via various jQuery APIs like .remove()
	// are passed through jQuery.cleanData. Monkey-patch this method to fire
	// the $destroy event on all removed nodes.
	originalCleanData=jQuery.cleanData;jQuery.cleanData=function(elems){var events;for(var i=0,elem;(elem=elems[i])!=null;i++){events=jQuery._data(elem,'events');if(events&&events.$destroy){jQuery(elem).triggerHandler('$destroy');}}originalCleanData(elems);};}else{jqLite=JQLite;}angular.element=jqLite;// Prevent double-proxying.
	bindJQueryFired=true;}/**
	 * throw error if the argument is falsy.
	 */function assertArg(arg,name,reason){if(!arg){throw ngMinErr('areq','Argument \'{0}\' is {1}',name||'?',reason||'required');}return arg;}function assertArgFn(arg,name,acceptArrayAnnotation){if(acceptArrayAnnotation&&isArray(arg)){arg=arg[arg.length-1];}assertArg(isFunction(arg),name,'not a function, got '+(arg&&(typeof arg==='undefined'?'undefined':_typeof(arg))==='object'?arg.constructor.name||'Object':typeof arg==='undefined'?'undefined':_typeof(arg)));return arg;}/**
	 * throw error if the name given is hasOwnProperty
	 * @param  {String} name    the name to test
	 * @param  {String} context the context in which the name is used, such as module or directive
	 */function assertNotHasOwnProperty(name,context){if(name==='hasOwnProperty'){throw ngMinErr('badname','hasOwnProperty is not a valid {0} name',context);}}/**
	 * Return the value accessible from the object by path. Any undefined traversals are ignored
	 * @param {Object} obj starting object
	 * @param {String} path path to traverse
	 * @param {boolean} [bindFnToScope=true]
	 * @returns {Object} value as accessible by path
	 *///TODO(misko): this function needs to be removed
	function getter(obj,path,bindFnToScope){if(!path)return obj;var keys=path.split('.');var key;var lastInstance=obj;var len=keys.length;for(var i=0;i<len;i++){key=keys[i];if(obj){obj=(lastInstance=obj)[key];}}if(!bindFnToScope&&isFunction(obj)){return bind(lastInstance,obj);}return obj;}/**
	 * Return the DOM siblings between the first and last node in the given array.
	 * @param {Array} array like object
	 * @returns {Array} the inputted object or a jqLite collection containing the nodes
	 */function getBlockNodes(nodes){// TODO(perf): update `nodes` instead of creating a new object?
	var node=nodes[0];var endNode=nodes[nodes.length-1];var blockNodes;for(var i=1;node!==endNode&&(node=node.nextSibling);i++){if(blockNodes||nodes[i]!==node){if(!blockNodes){blockNodes=jqLite(slice.call(nodes,0,i));}blockNodes.push(node);}}return blockNodes||nodes;}/**
	 * Creates a new object without a prototype. This object is useful for lookup without having to
	 * guard against prototypically inherited properties via hasOwnProperty.
	 *
	 * Related micro-benchmarks:
	 * - http://jsperf.com/object-create2
	 * - http://jsperf.com/proto-map-lookup/2
	 * - http://jsperf.com/for-in-vs-object-keys2
	 *
	 * @returns {Object}
	 */function createMap(){return Object.create(null);}function stringify(value){if(value==null){// null || undefined
	return'';}switch(typeof value==='undefined'?'undefined':_typeof(value)){case'string':break;case'number':value=''+value;break;default:if(hasCustomToString(value)&&!isArray(value)&&!isDate(value)){value=value.toString();}else{value=toJson(value);}}return value;}var NODE_TYPE_ELEMENT=1;var NODE_TYPE_ATTRIBUTE=2;var NODE_TYPE_TEXT=3;var NODE_TYPE_COMMENT=8;var NODE_TYPE_DOCUMENT=9;var NODE_TYPE_DOCUMENT_FRAGMENT=11;/**
	 * @ngdoc type
	 * @name angular.Module
	 * @module ng
	 * @description
	 *
	 * Interface for configuring angular {@link angular.module modules}.
	 */function setupModuleLoader(window){var $injectorMinErr=minErr('$injector');var ngMinErr=minErr('ng');function ensure(obj,name,factory){return obj[name]||(obj[name]=factory());}var angular=ensure(window,'angular',Object);// We need to expose `angular.$$minErr` to modules such as `ngResource` that reference it during bootstrap
	angular.$$minErr=angular.$$minErr||minErr;return ensure(angular,'module',function(){/** @type {Object.<string, angular.Module>} */var modules={};/**
	     * @ngdoc function
	     * @name angular.module
	     * @module ng
	     * @description
	     *
	     * The `angular.module` is a global place for creating, registering and retrieving Angular
	     * modules.
	     * All modules (angular core or 3rd party) that should be available to an application must be
	     * registered using this mechanism.
	     *
	     * Passing one argument retrieves an existing {@link angular.Module},
	     * whereas passing more than one argument creates a new {@link angular.Module}
	     *
	     *
	     * # Module
	     *
	     * A module is a collection of services, directives, controllers, filters, and configuration information.
	     * `angular.module` is used to configure the {@link auto.$injector $injector}.
	     *
	     * ```js
	     * // Create a new module
	     * var myModule = angular.module('myModule', []);
	     *
	     * // register a new service
	     * myModule.value('appName', 'MyCoolApp');
	     *
	     * // configure existing services inside initialization blocks.
	     * myModule.config(['$locationProvider', function($locationProvider) {
	     *   // Configure existing providers
	     *   $locationProvider.hashPrefix('!');
	     * }]);
	     * ```
	     *
	     * Then you can create an injector and load your modules like this:
	     *
	     * ```js
	     * var injector = angular.injector(['ng', 'myModule'])
	     * ```
	     *
	     * However it's more likely that you'll just use
	     * {@link ng.directive:ngApp ngApp} or
	     * {@link angular.bootstrap} to simplify this process for you.
	     *
	     * @param {!string} name The name of the module to create or retrieve.
	     * @param {!Array.<string>=} requires If specified then new module is being created. If
	     *        unspecified then the module is being retrieved for further configuration.
	     * @param {Function=} configFn Optional configuration function for the module. Same as
	     *        {@link angular.Module#config Module#config()}.
	     * @returns {angular.Module} new module with the {@link angular.Module} api.
	     */return function module(name,requires,configFn){var _info={};var assertNotHasOwnProperty=function assertNotHasOwnProperty(name,context){if(name==='hasOwnProperty'){throw ngMinErr('badname','hasOwnProperty is not a valid {0} name',context);}};assertNotHasOwnProperty(name,'module');if(requires&&modules.hasOwnProperty(name)){modules[name]=null;}return ensure(modules,name,function(){if(!requires){throw $injectorMinErr('nomod','Module \'{0}\' is not available! You either misspelled '+'the module name or forgot to load it. If registering a module ensure that you '+'specify the dependencies as the second argument.',name);}/** @type {!Array.<Array.<*>>} */var invokeQueue=[];/** @type {!Array.<Function>} */var configBlocks=[];/** @type {!Array.<Function>} */var runBlocks=[];var config=invokeLater('$injector','invoke','push',configBlocks);/** @type {angular.Module} */var moduleInstance={// Private state
	_invokeQueue:invokeQueue,_configBlocks:configBlocks,_runBlocks:runBlocks,/**
	           * @ngdoc method
	           * @name angular.Module#info
	           * @module ng
	           *
	           * @param {Object=} info Information about the module
	           * @returns {Object|Module} The current info object for this module if called as a getter,
	           *                          or `this` if called as a setter.
	           *
	           * @description
	           * Read and write custom information about this module.
	           * For example you could put the version of the module in here.
	           *
	           * ```js
	           * angular.module('myModule', []).info({ version: '1.0.0' });
	           * ```
	           *
	           * The version could then be read back out by accessing the module elsewhere:
	           *
	           * ```
	           * var version = angular.module('myModule').info().version;
	           * ```
	           *
	           * You can also retrieve this information during runtime via the
	           * {@link $injector#modules `$injector.modules`} property:
	           *
	           * ```js
	           * var version = $injector.modules['myModule'].info().version;
	           * ```
	           */info:function info(value){if(isDefined(value)){if(!isObject(value))throw ngMinErr('aobj','Argument \'{0}\' must be an object','value');_info=value;return this;}return _info;},/**
	           * @ngdoc property
	           * @name angular.Module#requires
	           * @module ng
	           *
	           * @description
	           * Holds the list of modules which the injector will load before the current module is
	           * loaded.
	           */requires:requires,/**
	           * @ngdoc property
	           * @name angular.Module#name
	           * @module ng
	           *
	           * @description
	           * Name of the module.
	           */name:name,/**
	           * @ngdoc method
	           * @name angular.Module#provider
	           * @module ng
	           * @param {string} name service name
	           * @param {Function} providerType Construction function for creating new instance of the
	           *                                service.
	           * @description
	           * See {@link auto.$provide#provider $provide.provider()}.
	           */provider:invokeLaterAndSetModuleName('$provide','provider'),/**
	           * @ngdoc method
	           * @name angular.Module#factory
	           * @module ng
	           * @param {string} name service name
	           * @param {Function} providerFunction Function for creating new instance of the service.
	           * @description
	           * See {@link auto.$provide#factory $provide.factory()}.
	           */factory:invokeLaterAndSetModuleName('$provide','factory'),/**
	           * @ngdoc method
	           * @name angular.Module#service
	           * @module ng
	           * @param {string} name service name
	           * @param {Function} constructor A constructor function that will be instantiated.
	           * @description
	           * See {@link auto.$provide#service $provide.service()}.
	           */service:invokeLaterAndSetModuleName('$provide','service'),/**
	           * @ngdoc method
	           * @name angular.Module#value
	           * @module ng
	           * @param {string} name service name
	           * @param {*} object Service instance object.
	           * @description
	           * See {@link auto.$provide#value $provide.value()}.
	           */value:invokeLater('$provide','value'),/**
	           * @ngdoc method
	           * @name angular.Module#constant
	           * @module ng
	           * @param {string} name constant name
	           * @param {*} object Constant value.
	           * @description
	           * Because the constants are fixed, they get applied before other provide methods.
	           * See {@link auto.$provide#constant $provide.constant()}.
	           */constant:invokeLater('$provide','constant','unshift'),/**
	           * @ngdoc method
	           * @name angular.Module#decorator
	           * @module ng
	           * @param {string} name The name of the service to decorate.
	           * @param {Function} decorFn This function will be invoked when the service needs to be
	           *                           instantiated and should return the decorated service instance.
	           * @description
	           * See {@link auto.$provide#decorator $provide.decorator()}.
	           */decorator:invokeLaterAndSetModuleName('$provide','decorator',configBlocks),/**
	           * @ngdoc method
	           * @name angular.Module#animation
	           * @module ng
	           * @param {string} name animation name
	           * @param {Function} animationFactory Factory function for creating new instance of an
	           *                                    animation.
	           * @description
	           *
	           * **NOTE**: animations take effect only if the **ngAnimate** module is loaded.
	           *
	           *
	           * Defines an animation hook that can be later used with
	           * {@link $animate $animate} service and directives that use this service.
	           *
	           * ```js
	           * module.animation('.animation-name', function($inject1, $inject2) {
	           *   return {
	           *     eventName : function(element, done) {
	           *       //code to run the animation
	           *       //once complete, then run done()
	           *       return function cancellationFunction(element) {
	           *         //code to cancel the animation
	           *       }
	           *     }
	           *   }
	           * })
	           * ```
	           *
	           * See {@link ng.$animateProvider#register $animateProvider.register()} and
	           * {@link ngAnimate ngAnimate module} for more information.
	           */animation:invokeLaterAndSetModuleName('$animateProvider','register'),/**
	           * @ngdoc method
	           * @name angular.Module#filter
	           * @module ng
	           * @param {string} name Filter name - this must be a valid angular expression identifier
	           * @param {Function} filterFactory Factory function for creating new instance of filter.
	           * @description
	           * See {@link ng.$filterProvider#register $filterProvider.register()}.
	           *
	           * <div class="alert alert-warning">
	           * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
	           * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
	           * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
	           * (`myapp_subsection_filterx`).
	           * </div>
	           */filter:invokeLaterAndSetModuleName('$filterProvider','register'),/**
	           * @ngdoc method
	           * @name angular.Module#controller
	           * @module ng
	           * @param {string|Object} name Controller name, or an object map of controllers where the
	           *    keys are the names and the values are the constructors.
	           * @param {Function} constructor Controller constructor function.
	           * @description
	           * See {@link ng.$controllerProvider#register $controllerProvider.register()}.
	           */controller:invokeLaterAndSetModuleName('$controllerProvider','register'),/**
	           * @ngdoc method
	           * @name angular.Module#directive
	           * @module ng
	           * @param {string|Object} name Directive name, or an object map of directives where the
	           *    keys are the names and the values are the factories.
	           * @param {Function} directiveFactory Factory function for creating new instance of
	           * directives.
	           * @description
	           * See {@link ng.$compileProvider#directive $compileProvider.directive()}.
	           */directive:invokeLaterAndSetModuleName('$compileProvider','directive'),/**
	           * @ngdoc method
	           * @name angular.Module#component
	           * @module ng
	           * @param {string} name Name of the component in camel-case (i.e. myComp which will match as my-comp)
	           * @param {Object} options Component definition object (a simplified
	           *    {@link ng.$compile#directive-definition-object directive definition object})
	           *
	           * @description
	           * See {@link ng.$compileProvider#component $compileProvider.component()}.
	           */component:invokeLaterAndSetModuleName('$compileProvider','component'),/**
	           * @ngdoc method
	           * @name angular.Module#config
	           * @module ng
	           * @param {Function} configFn Execute this function on module load. Useful for service
	           *    configuration.
	           * @description
	           * Use this method to register work which needs to be performed on module loading.
	           * For more about how to configure services, see
	           * {@link providers#provider-recipe Provider Recipe}.
	           */config:config,/**
	           * @ngdoc method
	           * @name angular.Module#run
	           * @module ng
	           * @param {Function} initializationFn Execute this function after injector creation.
	           *    Useful for application initialization.
	           * @description
	           * Use this method to register work which should be performed when the injector is done
	           * loading all modules.
	           */run:function run(block){runBlocks.push(block);return this;}};if(configFn){config(configFn);}return moduleInstance;/**
	         * @param {string} provider
	         * @param {string} method
	         * @param {String=} insertMethod
	         * @returns {angular.Module}
	         */function invokeLater(provider,method,insertMethod,queue){if(!queue)queue=invokeQueue;return function(){queue[insertMethod||'push']([provider,method,arguments]);return moduleInstance;};}/**
	         * @param {string} provider
	         * @param {string} method
	         * @returns {angular.Module}
	         */function invokeLaterAndSetModuleName(provider,method,queue){if(!queue)queue=invokeQueue;return function(recipeName,factoryFunction){if(factoryFunction&&isFunction(factoryFunction))factoryFunction.$$moduleName=name;queue.push([provider,method,arguments]);return moduleInstance;};}});};});}/* global shallowCopy: true *//**
	 * Creates a shallow copy of an object, an array or a primitive.
	 *
	 * Assumes that there are no proto properties for objects.
	 */function shallowCopy(src,dst){if(isArray(src)){dst=dst||[];for(var i=0,ii=src.length;i<ii;i++){dst[i]=src[i];}}else if(isObject(src)){dst=dst||{};for(var key in src){if(!(key.charAt(0)==='$'&&key.charAt(1)==='$')){dst[key]=src[key];}}}return dst||src;}/* global toDebugString: true */function serializeObject(obj,maxDepth){var seen=[];// There is no direct way to stringify object until reaching a specific depth
	// and a very deep object can cause a performance issue, so we copy the object
	// based on this specific depth and then stringify it.
	if(isValidObjectMaxDepth(maxDepth)){obj=copy(obj,null,maxDepth);}return JSON.stringify(obj,function(key,val){val=toJsonReplacer(key,val);if(isObject(val)){if(seen.indexOf(val)>=0)return'...';seen.push(val);}return val;});}function toDebugString(obj,maxDepth){if(typeof obj==='function'){return obj.toString().replace(/ \{[\s\S]*$/,'');}else if(isUndefined(obj)){return'undefined';}else if(typeof obj!=='string'){return serializeObject(obj,maxDepth);}return obj;}/* global angularModule: true,
	  version: true,
	
	  $CompileProvider,
	
	  htmlAnchorDirective,
	  inputDirective,
	  inputDirective,
	  formDirective,
	  scriptDirective,
	  selectDirective,
	  optionDirective,
	  ngBindDirective,
	  ngBindHtmlDirective,
	  ngBindTemplateDirective,
	  ngClassDirective,
	  ngClassEvenDirective,
	  ngClassOddDirective,
	  ngCloakDirective,
	  ngControllerDirective,
	  ngFormDirective,
	  ngHideDirective,
	  ngIfDirective,
	  ngIncludeDirective,
	  ngIncludeFillContentDirective,
	  ngInitDirective,
	  ngNonBindableDirective,
	  ngPluralizeDirective,
	  ngRepeatDirective,
	  ngShowDirective,
	  ngStyleDirective,
	  ngSwitchDirective,
	  ngSwitchWhenDirective,
	  ngSwitchDefaultDirective,
	  ngOptionsDirective,
	  ngTranscludeDirective,
	  ngModelDirective,
	  ngListDirective,
	  ngChangeDirective,
	  patternDirective,
	  patternDirective,
	  requiredDirective,
	  requiredDirective,
	  minlengthDirective,
	  minlengthDirective,
	  maxlengthDirective,
	  maxlengthDirective,
	  ngValueDirective,
	  ngModelOptionsDirective,
	  ngAttributeAliasDirectives,
	  ngEventDirectives,
	
	  $AnchorScrollProvider,
	  $AnimateProvider,
	  $CoreAnimateCssProvider,
	  $$CoreAnimateJsProvider,
	  $$CoreAnimateQueueProvider,
	  $$AnimateRunnerFactoryProvider,
	  $$AnimateAsyncRunFactoryProvider,
	  $BrowserProvider,
	  $CacheFactoryProvider,
	  $ControllerProvider,
	  $DateProvider,
	  $DocumentProvider,
	  $$IsDocumentHiddenProvider,
	  $ExceptionHandlerProvider,
	  $FilterProvider,
	  $$ForceReflowProvider,
	  $InterpolateProvider,
	  $IntervalProvider,
	  $HttpProvider,
	  $HttpParamSerializerProvider,
	  $HttpParamSerializerJQLikeProvider,
	  $HttpBackendProvider,
	  $xhrFactoryProvider,
	  $jsonpCallbacksProvider,
	  $LocationProvider,
	  $LogProvider,
	  $$MapProvider,
	  $ParseProvider,
	  $RootScopeProvider,
	  $QProvider,
	  $$QProvider,
	  $$SanitizeUriProvider,
	  $SceProvider,
	  $SceDelegateProvider,
	  $SnifferProvider,
	  $TemplateCacheProvider,
	  $TemplateRequestProvider,
	  $$TestabilityProvider,
	  $TimeoutProvider,
	  $$RAFProvider,
	  $WindowProvider,
	  $$jqLiteProvider,
	  $$CookieReaderProvider
	*//**
	 * @ngdoc object
	 * @name angular.version
	 * @module ng
	 * @description
	 * An object that contains information about the current AngularJS version.
	 *
	 * This object has the following properties:
	 *
	 * - `full` – `{string}` – Full version string, such as "0.9.18".
	 * - `major` – `{number}` – Major version number, such as "0".
	 * - `minor` – `{number}` – Minor version number, such as "9".
	 * - `dot` – `{number}` – Dot version number, such as "18".
	 * - `codeName` – `{string}` – Code name of the release, such as "jiggling-armfat".
	 */var version={// These placeholder strings will be replaced by grunt's `build` task.
	// They need to be double- or single-quoted.
	full:'1.6.4',major:1,minor:6,dot:4,codeName:'phenomenal-footnote'};function publishExternalAPI(angular){extend(angular,{'errorHandlingConfig':errorHandlingConfig,'bootstrap':bootstrap,'copy':copy,'extend':extend,'merge':merge,'equals':equals,'element':jqLite,'forEach':forEach,'injector':createInjector,'noop':noop,'bind':bind,'toJson':toJson,'fromJson':fromJson,'identity':identity,'isUndefined':isUndefined,'isDefined':isDefined,'isString':isString,'isFunction':isFunction,'isObject':isObject,'isNumber':isNumber,'isElement':isElement,'isArray':isArray,'version':version,'isDate':isDate,'lowercase':lowercase,'uppercase':uppercase,'callbacks':{$$counter:0},'getTestability':getTestability,'reloadWithDebugInfo':reloadWithDebugInfo,'$$minErr':minErr,'$$csp':csp,'$$encodeUriSegment':encodeUriSegment,'$$encodeUriQuery':encodeUriQuery,'$$stringify':stringify});angularModule=setupModuleLoader(window);angularModule('ng',['ngLocale'],['$provide',function ngModule($provide){// $$sanitizeUriProvider needs to be before $compileProvider as it is used by it.
	$provide.provider({$$sanitizeUri:$$SanitizeUriProvider});$provide.provider('$compile',$CompileProvider).directive({a:htmlAnchorDirective,input:inputDirective,textarea:inputDirective,form:formDirective,script:scriptDirective,select:selectDirective,option:optionDirective,ngBind:ngBindDirective,ngBindHtml:ngBindHtmlDirective,ngBindTemplate:ngBindTemplateDirective,ngClass:ngClassDirective,ngClassEven:ngClassEvenDirective,ngClassOdd:ngClassOddDirective,ngCloak:ngCloakDirective,ngController:ngControllerDirective,ngForm:ngFormDirective,ngHide:ngHideDirective,ngIf:ngIfDirective,ngInclude:ngIncludeDirective,ngInit:ngInitDirective,ngNonBindable:ngNonBindableDirective,ngPluralize:ngPluralizeDirective,ngRepeat:ngRepeatDirective,ngShow:ngShowDirective,ngStyle:ngStyleDirective,ngSwitch:ngSwitchDirective,ngSwitchWhen:ngSwitchWhenDirective,ngSwitchDefault:ngSwitchDefaultDirective,ngOptions:ngOptionsDirective,ngTransclude:ngTranscludeDirective,ngModel:ngModelDirective,ngList:ngListDirective,ngChange:ngChangeDirective,pattern:patternDirective,ngPattern:patternDirective,required:requiredDirective,ngRequired:requiredDirective,minlength:minlengthDirective,ngMinlength:minlengthDirective,maxlength:maxlengthDirective,ngMaxlength:maxlengthDirective,ngValue:ngValueDirective,ngModelOptions:ngModelOptionsDirective}).directive({ngInclude:ngIncludeFillContentDirective}).directive(ngAttributeAliasDirectives).directive(ngEventDirectives);$provide.provider({$anchorScroll:$AnchorScrollProvider,$animate:$AnimateProvider,$animateCss:$CoreAnimateCssProvider,$$animateJs:$$CoreAnimateJsProvider,$$animateQueue:$$CoreAnimateQueueProvider,$$AnimateRunner:$$AnimateRunnerFactoryProvider,$$animateAsyncRun:$$AnimateAsyncRunFactoryProvider,$browser:$BrowserProvider,$cacheFactory:$CacheFactoryProvider,$controller:$ControllerProvider,$document:$DocumentProvider,$$isDocumentHidden:$$IsDocumentHiddenProvider,$exceptionHandler:$ExceptionHandlerProvider,$filter:$FilterProvider,$$forceReflow:$$ForceReflowProvider,$interpolate:$InterpolateProvider,$interval:$IntervalProvider,$http:$HttpProvider,$httpParamSerializer:$HttpParamSerializerProvider,$httpParamSerializerJQLike:$HttpParamSerializerJQLikeProvider,$httpBackend:$HttpBackendProvider,$xhrFactory:$xhrFactoryProvider,$jsonpCallbacks:$jsonpCallbacksProvider,$location:$LocationProvider,$log:$LogProvider,$parse:$ParseProvider,$rootScope:$RootScopeProvider,$q:$QProvider,$$q:$$QProvider,$sce:$SceProvider,$sceDelegate:$SceDelegateProvider,$sniffer:$SnifferProvider,$templateCache:$TemplateCacheProvider,$templateRequest:$TemplateRequestProvider,$$testability:$$TestabilityProvider,$timeout:$TimeoutProvider,$window:$WindowProvider,$$rAF:$$RAFProvider,$$jqLite:$$jqLiteProvider,$$Map:$$MapProvider,$$cookieReader:$$CookieReaderProvider});}]).info({angularVersion:'1.6.4'});}/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *//* global
	  JQLitePrototype: true,
	  BOOLEAN_ATTR: true,
	  ALIASED_ATTR: true
	*///////////////////////////////////
	//JQLite
	//////////////////////////////////
	/**
	 * @ngdoc function
	 * @name angular.element
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Wraps a raw DOM element or HTML string as a [jQuery](http://jquery.com) element.
	 *
	 * If jQuery is available, `angular.element` is an alias for the
	 * [jQuery](http://api.jquery.com/jQuery/) function. If jQuery is not available, `angular.element`
	 * delegates to Angular's built-in subset of jQuery, called "jQuery lite" or **jqLite**.
	 *
	 * jqLite is a tiny, API-compatible subset of jQuery that allows
	 * Angular to manipulate the DOM in a cross-browser compatible way. jqLite implements only the most
	 * commonly needed functionality with the goal of having a very small footprint.
	 *
	 * To use `jQuery`, simply ensure it is loaded before the `angular.js` file. You can also use the
	 * {@link ngJq `ngJq`} directive to specify that jqlite should be used over jQuery, or to use a
	 * specific version of jQuery if multiple versions exist on the page.
	 *
	 * <div class="alert alert-info">**Note:** All element references in Angular are always wrapped with jQuery or
	 * jqLite (such as the element argument in a directive's compile / link function). They are never raw DOM references.</div>
	 *
	 * <div class="alert alert-warning">**Note:** Keep in mind that this function will not find elements
	 * by tag name / CSS selector. For lookups by tag name, try instead `angular.element(document).find(...)`
	 * or `$document.find()`, or use the standard DOM APIs, e.g. `document.querySelectorAll()`.</div>
	 *
	 * ## Angular's jqLite
	 * jqLite provides only the following jQuery methods:
	 *
	 * - [`addClass()`](http://api.jquery.com/addClass/) - Does not support a function as first argument
	 * - [`after()`](http://api.jquery.com/after/)
	 * - [`append()`](http://api.jquery.com/append/)
	 * - [`attr()`](http://api.jquery.com/attr/) - Does not support functions as parameters
	 * - [`bind()`](http://api.jquery.com/bind/) (_deprecated_, use [`on()`](http://api.jquery.com/on/)) - Does not support namespaces, selectors or eventData
	 * - [`children()`](http://api.jquery.com/children/) - Does not support selectors
	 * - [`clone()`](http://api.jquery.com/clone/)
	 * - [`contents()`](http://api.jquery.com/contents/)
	 * - [`css()`](http://api.jquery.com/css/) - Only retrieves inline-styles, does not call `getComputedStyle()`.
	 *   As a setter, does not convert numbers to strings or append 'px', and also does not have automatic property prefixing.
	 * - [`data()`](http://api.jquery.com/data/)
	 * - [`detach()`](http://api.jquery.com/detach/)
	 * - [`empty()`](http://api.jquery.com/empty/)
	 * - [`eq()`](http://api.jquery.com/eq/)
	 * - [`find()`](http://api.jquery.com/find/) - Limited to lookups by tag name
	 * - [`hasClass()`](http://api.jquery.com/hasClass/)
	 * - [`html()`](http://api.jquery.com/html/)
	 * - [`next()`](http://api.jquery.com/next/) - Does not support selectors
	 * - [`on()`](http://api.jquery.com/on/) - Does not support namespaces, selectors or eventData
	 * - [`off()`](http://api.jquery.com/off/) - Does not support namespaces, selectors or event object as parameter
	 * - [`one()`](http://api.jquery.com/one/) - Does not support namespaces or selectors
	 * - [`parent()`](http://api.jquery.com/parent/) - Does not support selectors
	 * - [`prepend()`](http://api.jquery.com/prepend/)
	 * - [`prop()`](http://api.jquery.com/prop/)
	 * - [`ready()`](http://api.jquery.com/ready/) (_deprecated_, use `angular.element(callback)` instead of `angular.element(document).ready(callback)`)
	 * - [`remove()`](http://api.jquery.com/remove/)
	 * - [`removeAttr()`](http://api.jquery.com/removeAttr/) - Does not support multiple attributes
	 * - [`removeClass()`](http://api.jquery.com/removeClass/) - Does not support a function as first argument
	 * - [`removeData()`](http://api.jquery.com/removeData/)
	 * - [`replaceWith()`](http://api.jquery.com/replaceWith/)
	 * - [`text()`](http://api.jquery.com/text/)
	 * - [`toggleClass()`](http://api.jquery.com/toggleClass/) - Does not support a function as first argument
	 * - [`triggerHandler()`](http://api.jquery.com/triggerHandler/) - Passes a dummy event object to handlers
	 * - [`unbind()`](http://api.jquery.com/unbind/) (_deprecated_, use [`off()`](http://api.jquery.com/off/)) - Does not support namespaces or event object as parameter
	 * - [`val()`](http://api.jquery.com/val/)
	 * - [`wrap()`](http://api.jquery.com/wrap/)
	 *
	 * ## jQuery/jqLite Extras
	 * Angular also provides the following additional methods and events to both jQuery and jqLite:
	 *
	 * ### Events
	 * - `$destroy` - AngularJS intercepts all jqLite/jQuery's DOM destruction apis and fires this event
	 *    on all DOM nodes being removed.  This can be used to clean up any 3rd party bindings to the DOM
	 *    element before it is removed.
	 *
	 * ### Methods
	 * - `controller(name)` - retrieves the controller of the current element or its parent. By default
	 *   retrieves controller associated with the `ngController` directive. If `name` is provided as
	 *   camelCase directive name, then the controller for this directive will be retrieved (e.g.
	 *   `'ngModel'`).
	 * - `injector()` - retrieves the injector of the current element or its parent.
	 * - `scope()` - retrieves the {@link ng.$rootScope.Scope scope} of the current
	 *   element or its parent. Requires {@link guide/production#disabling-debug-data Debug Data} to
	 *   be enabled.
	 * - `isolateScope()` - retrieves an isolate {@link ng.$rootScope.Scope scope} if one is attached directly to the
	 *   current element. This getter should be used only on elements that contain a directive which starts a new isolate
	 *   scope. Calling `scope()` on this element always returns the original non-isolate scope.
	 *   Requires {@link guide/production#disabling-debug-data Debug Data} to be enabled.
	 * - `inheritedData()` - same as `data()`, but walks up the DOM until a value is found or the top
	 *   parent element is reached.
	 *
	 * @knownIssue You cannot spy on `angular.element` if you are using Jasmine version 1.x. See
	 * https://github.com/angular/angular.js/issues/14251 for more information.
	 *
	 * @param {string|DOMElement} element HTML string or DOMElement to be wrapped into jQuery.
	 * @returns {Object} jQuery object.
	 */JQLite.expando='ng339';var jqCache=JQLite.cache={},jqId=1;/*
	 * !!! This is an undocumented "private" function !!!
	 */JQLite._data=function(node){//jQuery always returns an object on cache miss
	return this.cache[node[this.expando]]||{};};function jqNextId(){return++jqId;}var DASH_LOWERCASE_REGEXP=/-([a-z])/g;var MS_HACK_REGEXP=/^-ms-/;var MOUSE_EVENT_MAP={mouseleave:'mouseout',mouseenter:'mouseover'};var jqLiteMinErr=minErr('jqLite');/**
	 * Converts kebab-case to camelCase.
	 * There is also a special case for the ms prefix starting with a lowercase letter.
	 * @param name Name to normalize
	 */function cssKebabToCamel(name){return kebabToCamel(name.replace(MS_HACK_REGEXP,'ms-'));}function fnCamelCaseReplace(all,letter){return letter.toUpperCase();}/**
	 * Converts kebab-case to camelCase.
	 * @param name Name to normalize
	 */function kebabToCamel(name){return name.replace(DASH_LOWERCASE_REGEXP,fnCamelCaseReplace);}var SINGLE_TAG_REGEXP=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/;var HTML_REGEXP=/<|&#?\w+;/;var TAG_NAME_REGEXP=/<([\w:-]+)/;var XHTML_TAG_REGEXP=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi;var wrapMap={'option':[1,'<select multiple="multiple">','</select>'],'thead':[1,'<table>','</table>'],'col':[2,'<table><colgroup>','</colgroup></table>'],'tr':[2,'<table><tbody>','</tbody></table>'],'td':[3,'<table><tbody><tr>','</tr></tbody></table>'],'_default':[0,'','']};wrapMap.optgroup=wrapMap.option;wrapMap.tbody=wrapMap.tfoot=wrapMap.colgroup=wrapMap.caption=wrapMap.thead;wrapMap.th=wrapMap.td;function jqLiteIsTextNode(html){return!HTML_REGEXP.test(html);}function jqLiteAcceptsData(node){// The window object can accept data but has no nodeType
	// Otherwise we are only interested in elements (1) and documents (9)
	var nodeType=node.nodeType;return nodeType===NODE_TYPE_ELEMENT||!nodeType||nodeType===NODE_TYPE_DOCUMENT;}function jqLiteHasData(node){for(var key in jqCache[node.ng339]){return true;}return false;}function jqLiteBuildFragment(html,context){var tmp,tag,wrap,fragment=context.createDocumentFragment(),nodes=[],i;if(jqLiteIsTextNode(html)){// Convert non-html into a text node
	nodes.push(context.createTextNode(html));}else{// Convert html into DOM nodes
	tmp=fragment.appendChild(context.createElement('div'));tag=(TAG_NAME_REGEXP.exec(html)||['',''])[1].toLowerCase();wrap=wrapMap[tag]||wrapMap._default;tmp.innerHTML=wrap[1]+html.replace(XHTML_TAG_REGEXP,'<$1></$2>')+wrap[2];// Descend through wrappers to the right content
	i=wrap[0];while(i--){tmp=tmp.lastChild;}nodes=concat(nodes,tmp.childNodes);tmp=fragment.firstChild;tmp.textContent='';}// Remove wrapper from fragment
	fragment.textContent='';fragment.innerHTML='';// Clear inner HTML
	forEach(nodes,function(node){fragment.appendChild(node);});return fragment;}function jqLiteParseHTML(html,context){context=context||window.document;var parsed;if(parsed=SINGLE_TAG_REGEXP.exec(html)){return[context.createElement(parsed[1])];}if(parsed=jqLiteBuildFragment(html,context)){return parsed.childNodes;}return[];}function jqLiteWrapNode(node,wrapper){var parent=node.parentNode;if(parent){parent.replaceChild(wrapper,node);}wrapper.appendChild(node);}// IE9-11 has no method "contains" in SVG element and in Node.prototype. Bug #10259.
	var jqLiteContains=window.Node.prototype.contains||/** @this */function(arg){// eslint-disable-next-line no-bitwise
	return!!(this.compareDocumentPosition(arg)&16);};/////////////////////////////////////////////
	function JQLite(element){if(element instanceof JQLite){return element;}var argIsString;if(isString(element)){element=trim(element);argIsString=true;}if(!(this instanceof JQLite)){if(argIsString&&element.charAt(0)!=='<'){throw jqLiteMinErr('nosel','Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element');}return new JQLite(element);}if(argIsString){jqLiteAddNodes(this,jqLiteParseHTML(element));}else if(isFunction(element)){jqLiteReady(element);}else{jqLiteAddNodes(this,element);}}function jqLiteClone(element){return element.cloneNode(true);}function jqLiteDealoc(element,onlyDescendants){if(!onlyDescendants&&jqLiteAcceptsData(element))jqLite.cleanData([element]);if(element.querySelectorAll){jqLite.cleanData(element.querySelectorAll('*'));}}function jqLiteOff(element,type,fn,unsupported){if(isDefined(unsupported))throw jqLiteMinErr('offargs','jqLite#off() does not support the `selector` argument');var expandoStore=jqLiteExpandoStore(element);var events=expandoStore&&expandoStore.events;var handle=expandoStore&&expandoStore.handle;if(!handle)return;//no listeners registered
	if(!type){for(type in events){if(type!=='$destroy'){element.removeEventListener(type,handle);}delete events[type];}}else{var removeHandler=function removeHandler(type){var listenerFns=events[type];if(isDefined(fn)){arrayRemove(listenerFns||[],fn);}if(!(isDefined(fn)&&listenerFns&&listenerFns.length>0)){element.removeEventListener(type,handle);delete events[type];}};forEach(type.split(' '),function(type){removeHandler(type);if(MOUSE_EVENT_MAP[type]){removeHandler(MOUSE_EVENT_MAP[type]);}});}}function jqLiteRemoveData(element,name){var expandoId=element.ng339;var expandoStore=expandoId&&jqCache[expandoId];if(expandoStore){if(name){delete expandoStore.data[name];return;}if(expandoStore.handle){if(expandoStore.events.$destroy){expandoStore.handle({},'$destroy');}jqLiteOff(element);}delete jqCache[expandoId];element.ng339=undefined;// don't delete DOM expandos. IE and Chrome don't like it
	}}function jqLiteExpandoStore(element,createIfNecessary){var expandoId=element.ng339,expandoStore=expandoId&&jqCache[expandoId];if(createIfNecessary&&!expandoStore){element.ng339=expandoId=jqNextId();expandoStore=jqCache[expandoId]={events:{},data:{},handle:undefined};}return expandoStore;}function jqLiteData(element,key,value){if(jqLiteAcceptsData(element)){var prop;var isSimpleSetter=isDefined(value);var isSimpleGetter=!isSimpleSetter&&key&&!isObject(key);var massGetter=!key;var expandoStore=jqLiteExpandoStore(element,!isSimpleGetter);var data=expandoStore&&expandoStore.data;if(isSimpleSetter){// data('key', value)
	data[kebabToCamel(key)]=value;}else{if(massGetter){// data()
	return data;}else{if(isSimpleGetter){// data('key')
	// don't force creation of expandoStore if it doesn't exist yet
	return data&&data[kebabToCamel(key)];}else{// mass-setter: data({key1: val1, key2: val2})
	for(prop in key){data[kebabToCamel(prop)]=key[prop];}}}}}}function jqLiteHasClass(element,selector){if(!element.getAttribute)return false;return(' '+(element.getAttribute('class')||'')+' ').replace(/[\n\t]/g,' ').indexOf(' '+selector+' ')>-1;}function jqLiteRemoveClass(element,cssClasses){if(cssClasses&&element.setAttribute){forEach(cssClasses.split(' '),function(cssClass){element.setAttribute('class',trim((' '+(element.getAttribute('class')||'')+' ').replace(/[\n\t]/g,' ').replace(' '+trim(cssClass)+' ',' ')));});}}function jqLiteAddClass(element,cssClasses){if(cssClasses&&element.setAttribute){var existingClasses=(' '+(element.getAttribute('class')||'')+' ').replace(/[\n\t]/g,' ');forEach(cssClasses.split(' '),function(cssClass){cssClass=trim(cssClass);if(existingClasses.indexOf(' '+cssClass+' ')===-1){existingClasses+=cssClass+' ';}});element.setAttribute('class',trim(existingClasses));}}function jqLiteAddNodes(root,elements){// THIS CODE IS VERY HOT. Don't make changes without benchmarking.
	if(elements){// if a Node (the most common case)
	if(elements.nodeType){root[root.length++]=elements;}else{var length=elements.length;// if an Array or NodeList and not a Window
	if(typeof length==='number'&&elements.window!==elements){if(length){for(var i=0;i<length;i++){root[root.length++]=elements[i];}}}else{root[root.length++]=elements;}}}}function jqLiteController(element,name){return jqLiteInheritedData(element,'$'+(name||'ngController')+'Controller');}function jqLiteInheritedData(element,name,value){// if element is the document object work with the html element instead
	// this makes $(document).scope() possible
	if(element.nodeType===NODE_TYPE_DOCUMENT){element=element.documentElement;}var names=isArray(name)?name:[name];while(element){for(var i=0,ii=names.length;i<ii;i++){if(isDefined(value=jqLite.data(element,names[i])))return value;}// If dealing with a document fragment node with a host element, and no parent, use the host
	// element as the parent. This enables directives within a Shadow DOM or polyfilled Shadow DOM
	// to lookup parent controllers.
	element=element.parentNode||element.nodeType===NODE_TYPE_DOCUMENT_FRAGMENT&&element.host;}}function jqLiteEmpty(element){jqLiteDealoc(element,true);while(element.firstChild){element.removeChild(element.firstChild);}}function jqLiteRemove(element,keepData){if(!keepData)jqLiteDealoc(element);var parent=element.parentNode;if(parent)parent.removeChild(element);}function jqLiteDocumentLoaded(action,win){win=win||window;if(win.document.readyState==='complete'){// Force the action to be run async for consistent behavior
	// from the action's point of view
	// i.e. it will definitely not be in a $apply
	win.setTimeout(action);}else{// No need to unbind this handler as load is only ever called once
	jqLite(win).on('load',action);}}function jqLiteReady(fn){function trigger(){window.document.removeEventListener('DOMContentLoaded',trigger);window.removeEventListener('load',trigger);fn();}// check if document is already loaded
	if(window.document.readyState==='complete'){window.setTimeout(fn);}else{// We can not use jqLite since we are not done loading and jQuery could be loaded later.
	// Works for modern browsers and IE9
	window.document.addEventListener('DOMContentLoaded',trigger);// Fallback to window.onload for others
	window.addEventListener('load',trigger);}}//////////////////////////////////////////
	// Functions which are declared directly.
	//////////////////////////////////////////
	var JQLitePrototype=JQLite.prototype={ready:jqLiteReady,toString:function toString(){var value=[];forEach(this,function(e){value.push(''+e);});return'['+value.join(', ')+']';},eq:function eq(index){return index>=0?jqLite(this[index]):jqLite(this[this.length+index]);},length:0,push:push,sort:[].sort,splice:[].splice};//////////////////////////////////////////
	// Functions iterating getter/setters.
	// these functions return self on setter and
	// value on get.
	//////////////////////////////////////////
	var BOOLEAN_ATTR={};forEach('multiple,selected,checked,disabled,readOnly,required,open'.split(','),function(value){BOOLEAN_ATTR[lowercase(value)]=value;});var BOOLEAN_ELEMENTS={};forEach('input,select,option,textarea,button,form,details'.split(','),function(value){BOOLEAN_ELEMENTS[value]=true;});var ALIASED_ATTR={'ngMinlength':'minlength','ngMaxlength':'maxlength','ngMin':'min','ngMax':'max','ngPattern':'pattern','ngStep':'step'};function getBooleanAttrName(element,name){// check dom last since we will most likely fail on name
	var booleanAttr=BOOLEAN_ATTR[name.toLowerCase()];// booleanAttr is here twice to minimize DOM access
	return booleanAttr&&BOOLEAN_ELEMENTS[nodeName_(element)]&&booleanAttr;}function getAliasedAttrName(name){return ALIASED_ATTR[name];}forEach({data:jqLiteData,removeData:jqLiteRemoveData,hasData:jqLiteHasData,cleanData:function jqLiteCleanData(nodes){for(var i=0,ii=nodes.length;i<ii;i++){jqLiteRemoveData(nodes[i]);}}},function(fn,name){JQLite[name]=fn;});forEach({data:jqLiteData,inheritedData:jqLiteInheritedData,scope:function scope(element){// Can't use jqLiteData here directly so we stay compatible with jQuery!
	return jqLite.data(element,'$scope')||jqLiteInheritedData(element.parentNode||element,['$isolateScope','$scope']);},isolateScope:function isolateScope(element){// Can't use jqLiteData here directly so we stay compatible with jQuery!
	return jqLite.data(element,'$isolateScope')||jqLite.data(element,'$isolateScopeNoTemplate');},controller:jqLiteController,injector:function injector(element){return jqLiteInheritedData(element,'$injector');},removeAttr:function removeAttr(element,name){element.removeAttribute(name);},hasClass:jqLiteHasClass,css:function css(element,name,value){name=cssKebabToCamel(name);if(isDefined(value)){element.style[name]=value;}else{return element.style[name];}},attr:function attr(element,name,value){var ret;var nodeType=element.nodeType;if(nodeType===NODE_TYPE_TEXT||nodeType===NODE_TYPE_ATTRIBUTE||nodeType===NODE_TYPE_COMMENT||!element.getAttribute){return;}var lowercasedName=lowercase(name);var isBooleanAttr=BOOLEAN_ATTR[lowercasedName];if(isDefined(value)){// setter
	if(value===null||value===false&&isBooleanAttr){element.removeAttribute(name);}else{element.setAttribute(name,isBooleanAttr?lowercasedName:value);}}else{// getter
	ret=element.getAttribute(name);if(isBooleanAttr&&ret!==null){ret=lowercasedName;}// Normalize non-existing attributes to undefined (as jQuery).
	return ret===null?undefined:ret;}},prop:function prop(element,name,value){if(isDefined(value)){element[name]=value;}else{return element[name];}},text:function(){getText.$dv='';return getText;function getText(element,value){if(isUndefined(value)){var nodeType=element.nodeType;return nodeType===NODE_TYPE_ELEMENT||nodeType===NODE_TYPE_TEXT?element.textContent:'';}element.textContent=value;}}(),val:function val(element,value){if(isUndefined(value)){if(element.multiple&&nodeName_(element)==='select'){var result=[];forEach(element.options,function(option){if(option.selected){result.push(option.value||option.text);}});return result;}return element.value;}element.value=value;},html:function html(element,value){if(isUndefined(value)){return element.innerHTML;}jqLiteDealoc(element,true);element.innerHTML=value;},empty:jqLiteEmpty},function(fn,name){/**
	   * Properties: writes return selection, reads return first value
	   */JQLite.prototype[name]=function(arg1,arg2){var i,key;var nodeCount=this.length;// jqLiteHasClass has only two arguments, but is a getter-only fn, so we need to special-case it
	// in a way that survives minification.
	// jqLiteEmpty takes no arguments but is a setter.
	if(fn!==jqLiteEmpty&&isUndefined(fn.length===2&&fn!==jqLiteHasClass&&fn!==jqLiteController?arg1:arg2)){if(isObject(arg1)){// we are a write, but the object properties are the key/values
	for(i=0;i<nodeCount;i++){if(fn===jqLiteData){// data() takes the whole object in jQuery
	fn(this[i],arg1);}else{for(key in arg1){fn(this[i],key,arg1[key]);}}}// return self for chaining
	return this;}else{// we are a read, so read the first child.
	// TODO: do we still need this?
	var value=fn.$dv;// Only if we have $dv do we iterate over all, otherwise it is just the first element.
	var jj=isUndefined(value)?Math.min(nodeCount,1):nodeCount;for(var j=0;j<jj;j++){var nodeValue=fn(this[j],arg1,arg2);value=value?value+nodeValue:nodeValue;}return value;}}else{// we are a write, so apply to all children
	for(i=0;i<nodeCount;i++){fn(this[i],arg1,arg2);}// return self for chaining
	return this;}};});function createEventHandler(element,events){var eventHandler=function eventHandler(event,type){// jQuery specific api
	event.isDefaultPrevented=function(){return event.defaultPrevented;};var eventFns=events[type||event.type];var eventFnsLength=eventFns?eventFns.length:0;if(!eventFnsLength)return;if(isUndefined(event.immediatePropagationStopped)){var originalStopImmediatePropagation=event.stopImmediatePropagation;event.stopImmediatePropagation=function(){event.immediatePropagationStopped=true;if(event.stopPropagation){event.stopPropagation();}if(originalStopImmediatePropagation){originalStopImmediatePropagation.call(event);}};}event.isImmediatePropagationStopped=function(){return event.immediatePropagationStopped===true;};// Some events have special handlers that wrap the real handler
	var handlerWrapper=eventFns.specialHandlerWrapper||defaultHandlerWrapper;// Copy event handlers in case event handlers array is modified during execution.
	if(eventFnsLength>1){eventFns=shallowCopy(eventFns);}for(var i=0;i<eventFnsLength;i++){if(!event.isImmediatePropagationStopped()){handlerWrapper(element,event,eventFns[i]);}}};// TODO: this is a hack for angularMocks/clearDataCache that makes it possible to deregister all
	//       events on `element`
	eventHandler.elem=element;return eventHandler;}function defaultHandlerWrapper(element,event,handler){handler.call(element,event);}function specialMouseHandlerWrapper(target,event,handler){// Refer to jQuery's implementation of mouseenter & mouseleave
	// Read about mouseenter and mouseleave:
	// http://www.quirksmode.org/js/events_mouse.html#link8
	var related=event.relatedTarget;// For mousenter/leave call the handler if related is outside the target.
	// NB: No relatedTarget if the mouse left/entered the browser window
	if(!related||related!==target&&!jqLiteContains.call(target,related)){handler.call(target,event);}}//////////////////////////////////////////
	// Functions iterating traversal.
	// These functions chain results into a single
	// selector.
	//////////////////////////////////////////
	forEach({removeData:jqLiteRemoveData,on:function jqLiteOn(element,type,fn,unsupported){if(isDefined(unsupported))throw jqLiteMinErr('onargs','jqLite#on() does not support the `selector` or `eventData` parameters');// Do not add event handlers to non-elements because they will not be cleaned up.
	if(!jqLiteAcceptsData(element)){return;}var expandoStore=jqLiteExpandoStore(element,true);var events=expandoStore.events;var handle=expandoStore.handle;if(!handle){handle=expandoStore.handle=createEventHandler(element,events);}// http://jsperf.com/string-indexof-vs-split
	var types=type.indexOf(' ')>=0?type.split(' '):[type];var i=types.length;var addHandler=function addHandler(type,specialHandlerWrapper,noEventListener){var eventFns=events[type];if(!eventFns){eventFns=events[type]=[];eventFns.specialHandlerWrapper=specialHandlerWrapper;if(type!=='$destroy'&&!noEventListener){element.addEventListener(type,handle);}}eventFns.push(fn);};while(i--){type=types[i];if(MOUSE_EVENT_MAP[type]){addHandler(MOUSE_EVENT_MAP[type],specialMouseHandlerWrapper);addHandler(type,undefined,true);}else{addHandler(type);}}},off:jqLiteOff,one:function one(element,type,fn){element=jqLite(element);//add the listener twice so that when it is called
	//you can remove the original function and still be
	//able to call element.off(ev, fn) normally
	element.on(type,function onFn(){element.off(type,fn);element.off(type,onFn);});element.on(type,fn);},replaceWith:function replaceWith(element,replaceNode){var index,parent=element.parentNode;jqLiteDealoc(element);forEach(new JQLite(replaceNode),function(node){if(index){parent.insertBefore(node,index.nextSibling);}else{parent.replaceChild(node,element);}index=node;});},children:function children(element){var children=[];forEach(element.childNodes,function(element){if(element.nodeType===NODE_TYPE_ELEMENT){children.push(element);}});return children;},contents:function contents(element){return element.contentDocument||element.childNodes||[];},append:function append(element,node){var nodeType=element.nodeType;if(nodeType!==NODE_TYPE_ELEMENT&&nodeType!==NODE_TYPE_DOCUMENT_FRAGMENT)return;node=new JQLite(node);for(var i=0,ii=node.length;i<ii;i++){var child=node[i];element.appendChild(child);}},prepend:function prepend(element,node){if(element.nodeType===NODE_TYPE_ELEMENT){var index=element.firstChild;forEach(new JQLite(node),function(child){element.insertBefore(child,index);});}},wrap:function wrap(element,wrapNode){jqLiteWrapNode(element,jqLite(wrapNode).eq(0).clone()[0]);},remove:jqLiteRemove,detach:function detach(element){jqLiteRemove(element,true);},after:function after(element,newElement){var index=element,parent=element.parentNode;if(parent){newElement=new JQLite(newElement);for(var i=0,ii=newElement.length;i<ii;i++){var node=newElement[i];parent.insertBefore(node,index.nextSibling);index=node;}}},addClass:jqLiteAddClass,removeClass:jqLiteRemoveClass,toggleClass:function toggleClass(element,selector,condition){if(selector){forEach(selector.split(' '),function(className){var classCondition=condition;if(isUndefined(classCondition)){classCondition=!jqLiteHasClass(element,className);}(classCondition?jqLiteAddClass:jqLiteRemoveClass)(element,className);});}},parent:function parent(element){var parent=element.parentNode;return parent&&parent.nodeType!==NODE_TYPE_DOCUMENT_FRAGMENT?parent:null;},next:function next(element){return element.nextElementSibling;},find:function find(element,selector){if(element.getElementsByTagName){return element.getElementsByTagName(selector);}else{return[];}},clone:jqLiteClone,triggerHandler:function triggerHandler(element,event,extraParameters){var dummyEvent,eventFnsCopy,handlerArgs;var eventName=event.type||event;var expandoStore=jqLiteExpandoStore(element);var events=expandoStore&&expandoStore.events;var eventFns=events&&events[eventName];if(eventFns){// Create a dummy event to pass to the handlers
	dummyEvent={preventDefault:function preventDefault(){this.defaultPrevented=true;},isDefaultPrevented:function isDefaultPrevented(){return this.defaultPrevented===true;},stopImmediatePropagation:function stopImmediatePropagation(){this.immediatePropagationStopped=true;},isImmediatePropagationStopped:function isImmediatePropagationStopped(){return this.immediatePropagationStopped===true;},stopPropagation:noop,type:eventName,target:element};// If a custom event was provided then extend our dummy event with it
	if(event.type){dummyEvent=extend(dummyEvent,event);}// Copy event handlers in case event handlers array is modified during execution.
	eventFnsCopy=shallowCopy(eventFns);handlerArgs=extraParameters?[dummyEvent].concat(extraParameters):[dummyEvent];forEach(eventFnsCopy,function(fn){if(!dummyEvent.isImmediatePropagationStopped()){fn.apply(element,handlerArgs);}});}}},function(fn,name){/**
	   * chaining functions
	   */JQLite.prototype[name]=function(arg1,arg2,arg3){var value;for(var i=0,ii=this.length;i<ii;i++){if(isUndefined(value)){value=fn(this[i],arg1,arg2,arg3);if(isDefined(value)){// any function which returns a value needs to be wrapped
	value=jqLite(value);}}else{jqLiteAddNodes(value,fn(this[i],arg1,arg2,arg3));}}return isDefined(value)?value:this;};});// bind legacy bind/unbind to on/off
	JQLite.prototype.bind=JQLite.prototype.on;JQLite.prototype.unbind=JQLite.prototype.off;// Provider for private $$jqLite service
	/** @this */function $$jqLiteProvider(){this.$get=function $$jqLite(){return extend(JQLite,{hasClass:function hasClass(node,classes){if(node.attr)node=node[0];return jqLiteHasClass(node,classes);},addClass:function addClass(node,classes){if(node.attr)node=node[0];return jqLiteAddClass(node,classes);},removeClass:function removeClass(node,classes){if(node.attr)node=node[0];return jqLiteRemoveClass(node,classes);}});};}/**
	 * Computes a hash of an 'obj'.
	 * Hash of a:
	 *  string is string
	 *  number is number as string
	 *  object is either result of calling $$hashKey function on the object or uniquely generated id,
	 *         that is also assigned to the $$hashKey property of the object.
	 *
	 * @param obj
	 * @returns {string} hash string such that the same input will have the same hash string.
	 *         The resulting string key is in 'type:hashKey' format.
	 */function hashKey(obj,nextUidFn){var key=obj&&obj.$$hashKey;if(key){if(typeof key==='function'){key=obj.$$hashKey();}return key;}var objType=typeof obj==='undefined'?'undefined':_typeof(obj);if(objType==='function'||objType==='object'&&obj!==null){key=obj.$$hashKey=objType+':'+(nextUidFn||nextUid)();}else{key=objType+':'+obj;}return key;}// A minimal ES2015 Map implementation.
	// Should be bug/feature equivalent to the native implementations of supported browsers
	// (for the features required in Angular).
	// See https://kangax.github.io/compat-table/es6/#test-Map
	var nanKey=Object.create(null);function NgMapShim(){this._keys=[];this._values=[];this._lastKey=NaN;this._lastIndex=-1;}NgMapShim.prototype={_idx:function _idx(key){if(key===this._lastKey){return this._lastIndex;}this._lastKey=key;this._lastIndex=this._keys.indexOf(key);return this._lastIndex;},_transformKey:function _transformKey(key){return isNumberNaN(key)?nanKey:key;},get:function get(key){key=this._transformKey(key);var idx=this._idx(key);if(idx!==-1){return this._values[idx];}},set:function set(key,value){key=this._transformKey(key);var idx=this._idx(key);if(idx===-1){idx=this._lastIndex=this._keys.length;}this._keys[idx]=key;this._values[idx]=value;// Support: IE11
	// Do not `return this` to simulate the partial IE11 implementation
	},delete:function _delete(key){key=this._transformKey(key);var idx=this._idx(key);if(idx===-1){return false;}this._keys.splice(idx,1);this._values.splice(idx,1);this._lastKey=NaN;this._lastIndex=-1;return true;}};// For now, always use `NgMapShim`, even if `window.Map` is available. Some native implementations
	// are still buggy (often in subtle ways) and can cause hard-to-debug failures. When native `Map`
	// implementations get more stable, we can reconsider switching to `window.Map` (when available).
	var NgMap=NgMapShim;var $$MapProvider=[/** @this */function(){this.$get=[function(){return NgMap;}];}];/**
	 * @ngdoc function
	 * @module ng
	 * @name angular.injector
	 * @kind function
	 *
	 * @description
	 * Creates an injector object that can be used for retrieving services as well as for
	 * dependency injection (see {@link guide/di dependency injection}).
	 *
	 * @param {Array.<string|Function>} modules A list of module functions or their aliases. See
	 *     {@link angular.module}. The `ng` module must be explicitly added.
	 * @param {boolean=} [strictDi=false] Whether the injector should be in strict mode, which
	 *     disallows argument name annotation inference.
	 * @returns {injector} Injector object. See {@link auto.$injector $injector}.
	 *
	 * @example
	 * Typical usage
	 * ```js
	 *   // create an injector
	 *   var $injector = angular.injector(['ng']);
	 *
	 *   // use the injector to kick off your application
	 *   // use the type inference to auto inject arguments, or use implicit injection
	 *   $injector.invoke(function($rootScope, $compile, $document) {
	 *     $compile($document)($rootScope);
	 *     $rootScope.$digest();
	 *   });
	 * ```
	 *
	 * Sometimes you want to get access to the injector of a currently running Angular app
	 * from outside Angular. Perhaps, you want to inject and compile some markup after the
	 * application has been bootstrapped. You can do this using the extra `injector()` added
	 * to JQuery/jqLite elements. See {@link angular.element}.
	 *
	 * *This is fairly rare but could be the case if a third party library is injecting the
	 * markup.*
	 *
	 * In the following example a new block of HTML containing a `ng-controller`
	 * directive is added to the end of the document body by JQuery. We then compile and link
	 * it into the current AngularJS scope.
	 *
	 * ```js
	 * var $div = $('<div ng-controller="MyCtrl">{{content.label}}</div>');
	 * $(document.body).append($div);
	 *
	 * angular.element(document).injector().invoke(function($compile) {
	 *   var scope = angular.element($div).scope();
	 *   $compile($div)(scope);
	 * });
	 * ```
	 *//**
	 * @ngdoc module
	 * @name auto
	 * @installation
	 * @description
	 *
	 * Implicit module which gets automatically added to each {@link auto.$injector $injector}.
	 */var ARROW_ARG=/^([^(]+?)=>/;var FN_ARGS=/^[^(]*\(\s*([^)]*)\)/m;var FN_ARG_SPLIT=/,/;var FN_ARG=/^\s*(_?)(\S+?)\1\s*$/;var STRIP_COMMENTS=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;var $injectorMinErr=minErr('$injector');function stringifyFn(fn){return Function.prototype.toString.call(fn);}function extractArgs(fn){var fnText=stringifyFn(fn).replace(STRIP_COMMENTS,''),args=fnText.match(ARROW_ARG)||fnText.match(FN_ARGS);return args;}function anonFn(fn){// For anonymous functions, showing at the very least the function signature can help in
	// debugging.
	var args=extractArgs(fn);if(args){return'function('+(args[1]||'').replace(/[\s\r\n]+/,' ')+')';}return'fn';}function annotate(fn,strictDi,name){var $inject,argDecl,last;if(typeof fn==='function'){if(!($inject=fn.$inject)){$inject=[];if(fn.length){if(strictDi){if(!isString(name)||!name){name=fn.name||anonFn(fn);}throw $injectorMinErr('strictdi','{0} is not using explicit annotation and cannot be invoked in strict mode',name);}argDecl=extractArgs(fn);forEach(argDecl[1].split(FN_ARG_SPLIT),function(arg){arg.replace(FN_ARG,function(all,underscore,name){$inject.push(name);});});}fn.$inject=$inject;}}else if(isArray(fn)){last=fn.length-1;assertArgFn(fn[last],'fn');$inject=fn.slice(0,last);}else{assertArgFn(fn,'fn',true);}return $inject;}///////////////////////////////////////
	/**
	 * @ngdoc service
	 * @name $injector
	 *
	 * @description
	 *
	 * `$injector` is used to retrieve object instances as defined by
	 * {@link auto.$provide provider}, instantiate types, invoke methods,
	 * and load modules.
	 *
	 * The following always holds true:
	 *
	 * ```js
	 *   var $injector = angular.injector();
	 *   expect($injector.get('$injector')).toBe($injector);
	 *   expect($injector.invoke(function($injector) {
	 *     return $injector;
	 *   })).toBe($injector);
	 * ```
	 *
	 * # Injection Function Annotation
	 *
	 * JavaScript does not have annotations, and annotations are needed for dependency injection. The
	 * following are all valid ways of annotating function with injection arguments and are equivalent.
	 *
	 * ```js
	 *   // inferred (only works if code not minified/obfuscated)
	 *   $injector.invoke(function(serviceA){});
	 *
	 *   // annotated
	 *   function explicit(serviceA) {};
	 *   explicit.$inject = ['serviceA'];
	 *   $injector.invoke(explicit);
	 *
	 *   // inline
	 *   $injector.invoke(['serviceA', function(serviceA){}]);
	 * ```
	 *
	 * ## Inference
	 *
	 * In JavaScript calling `toString()` on a function returns the function definition. The definition
	 * can then be parsed and the function arguments can be extracted. This method of discovering
	 * annotations is disallowed when the injector is in strict mode.
	 * *NOTE:* This does not work with minification, and obfuscation tools since these tools change the
	 * argument names.
	 *
	 * ## `$inject` Annotation
	 * By adding an `$inject` property onto a function the injection parameters can be specified.
	 *
	 * ## Inline
	 * As an array of injection names, where the last item in the array is the function to call.
	 *//**
	 * @ngdoc property
	 * @name $injector#modules
	 * @type {Object}
	 * @description
	 * A hash containing all the modules that have been loaded into the
	 * $injector.
	 *
	 * You can use this property to find out information about a module via the
	 * {@link angular.Module#info `myModule.info(...)`} method.
	 *
	 * For example:
	 *
	 * ```
	 * var info = $injector.modules['ngAnimate'].info();
	 * ```
	 *
	 * **Do not use this property to attempt to modify the modules after the application
	 * has been bootstrapped.**
	 *//**
	 * @ngdoc method
	 * @name $injector#get
	 *
	 * @description
	 * Return an instance of the service.
	 *
	 * @param {string} name The name of the instance to retrieve.
	 * @param {string=} caller An optional string to provide the origin of the function call for error messages.
	 * @return {*} The instance.
	 *//**
	 * @ngdoc method
	 * @name $injector#invoke
	 *
	 * @description
	 * Invoke the method and supply the method arguments from the `$injector`.
	 *
	 * @param {Function|Array.<string|Function>} fn The injectable function to invoke. Function parameters are
	 *   injected according to the {@link guide/di $inject Annotation} rules.
	 * @param {Object=} self The `this` for the invoked method.
	 * @param {Object=} locals Optional object. If preset then any argument names are read from this
	 *                         object first, before the `$injector` is consulted.
	 * @returns {*} the value returned by the invoked `fn` function.
	 *//**
	 * @ngdoc method
	 * @name $injector#has
	 *
	 * @description
	 * Allows the user to query if the particular service exists.
	 *
	 * @param {string} name Name of the service to query.
	 * @returns {boolean} `true` if injector has given service.
	 *//**
	 * @ngdoc method
	 * @name $injector#instantiate
	 * @description
	 * Create a new instance of JS type. The method takes a constructor function, invokes the new
	 * operator, and supplies all of the arguments to the constructor function as specified by the
	 * constructor annotation.
	 *
	 * @param {Function} Type Annotated constructor function.
	 * @param {Object=} locals Optional object. If preset then any argument names are read from this
	 * object first, before the `$injector` is consulted.
	 * @returns {Object} new instance of `Type`.
	 *//**
	 * @ngdoc method
	 * @name $injector#annotate
	 *
	 * @description
	 * Returns an array of service names which the function is requesting for injection. This API is
	 * used by the injector to determine which services need to be injected into the function when the
	 * function is invoked. There are three ways in which the function can be annotated with the needed
	 * dependencies.
	 *
	 * # Argument names
	 *
	 * The simplest form is to extract the dependencies from the arguments of the function. This is done
	 * by converting the function into a string using `toString()` method and extracting the argument
	 * names.
	 * ```js
	 *   // Given
	 *   function MyController($scope, $route) {
	 *     // ...
	 *   }
	 *
	 *   // Then
	 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
	 * ```
	 *
	 * You can disallow this method by using strict injection mode.
	 *
	 * This method does not work with code minification / obfuscation. For this reason the following
	 * annotation strategies are supported.
	 *
	 * # The `$inject` property
	 *
	 * If a function has an `$inject` property and its value is an array of strings, then the strings
	 * represent names of services to be injected into the function.
	 * ```js
	 *   // Given
	 *   var MyController = function(obfuscatedScope, obfuscatedRoute) {
	 *     // ...
	 *   }
	 *   // Define function dependencies
	 *   MyController['$inject'] = ['$scope', '$route'];
	 *
	 *   // Then
	 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
	 * ```
	 *
	 * # The array notation
	 *
	 * It is often desirable to inline Injected functions and that's when setting the `$inject` property
	 * is very inconvenient. In these situations using the array notation to specify the dependencies in
	 * a way that survives minification is a better choice:
	 *
	 * ```js
	 *   // We wish to write this (not minification / obfuscation safe)
	 *   injector.invoke(function($compile, $rootScope) {
	 *     // ...
	 *   });
	 *
	 *   // We are forced to write break inlining
	 *   var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {
	 *     // ...
	 *   };
	 *   tmpFn.$inject = ['$compile', '$rootScope'];
	 *   injector.invoke(tmpFn);
	 *
	 *   // To better support inline function the inline annotation is supported
	 *   injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {
	 *     // ...
	 *   }]);
	 *
	 *   // Therefore
	 *   expect(injector.annotate(
	 *      ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])
	 *    ).toEqual(['$compile', '$rootScope']);
	 * ```
	 *
	 * @param {Function|Array.<string|Function>} fn Function for which dependent service names need to
	 * be retrieved as described above.
	 *
	 * @param {boolean=} [strictDi=false] Disallow argument name annotation inference.
	 *
	 * @returns {Array.<string>} The names of the services which the function requires.
	 *//**
	 * @ngdoc service
	 * @name $provide
	 *
	 * @description
	 *
	 * The {@link auto.$provide $provide} service has a number of methods for registering components
	 * with the {@link auto.$injector $injector}. Many of these functions are also exposed on
	 * {@link angular.Module}.
	 *
	 * An Angular **service** is a singleton object created by a **service factory**.  These **service
	 * factories** are functions which, in turn, are created by a **service provider**.
	 * The **service providers** are constructor functions. When instantiated they must contain a
	 * property called `$get`, which holds the **service factory** function.
	 *
	 * When you request a service, the {@link auto.$injector $injector} is responsible for finding the
	 * correct **service provider**, instantiating it and then calling its `$get` **service factory**
	 * function to get the instance of the **service**.
	 *
	 * Often services have no configuration options and there is no need to add methods to the service
	 * provider.  The provider will be no more than a constructor function with a `$get` property. For
	 * these cases the {@link auto.$provide $provide} service has additional helper methods to register
	 * services without specifying a provider.
	 *
	 * * {@link auto.$provide#provider provider(name, provider)} - registers a **service provider** with the
	 *     {@link auto.$injector $injector}
	 * * {@link auto.$provide#constant constant(name, obj)} - registers a value/object that can be accessed by
	 *     providers and services.
	 * * {@link auto.$provide#value value(name, obj)} - registers a value/object that can only be accessed by
	 *     services, not providers.
	 * * {@link auto.$provide#factory factory(name, fn)} - registers a service **factory function**
	 *     that will be wrapped in a **service provider** object, whose `$get` property will contain the
	 *     given factory function.
	 * * {@link auto.$provide#service service(name, Fn)} - registers a **constructor function**
	 *     that will be wrapped in a **service provider** object, whose `$get` property will instantiate
	 *      a new object using the given constructor function.
	 * * {@link auto.$provide#decorator decorator(name, decorFn)} - registers a **decorator function** that
	 *      will be able to modify or replace the implementation of another service.
	 *
	 * See the individual methods for more information and examples.
	 *//**
	 * @ngdoc method
	 * @name $provide#provider
	 * @description
	 *
	 * Register a **provider function** with the {@link auto.$injector $injector}. Provider functions
	 * are constructor functions, whose instances are responsible for "providing" a factory for a
	 * service.
	 *
	 * Service provider names start with the name of the service they provide followed by `Provider`.
	 * For example, the {@link ng.$log $log} service has a provider called
	 * {@link ng.$logProvider $logProvider}.
	 *
	 * Service provider objects can have additional methods which allow configuration of the provider
	 * and its service. Importantly, you can configure what kind of service is created by the `$get`
	 * method, or how that service will act. For example, the {@link ng.$logProvider $logProvider} has a
	 * method {@link ng.$logProvider#debugEnabled debugEnabled}
	 * which lets you specify whether the {@link ng.$log $log} service will log debug messages to the
	 * console or not.
	 *
	 * @param {string} name The name of the instance. NOTE: the provider will be available under `name +
	                        'Provider'` key.
	 * @param {(Object|function())} provider If the provider is:
	 *
	 *   - `Object`: then it should have a `$get` method. The `$get` method will be invoked using
	 *     {@link auto.$injector#invoke $injector.invoke()} when an instance needs to be created.
	 *   - `Constructor`: a new instance of the provider will be created using
	 *     {@link auto.$injector#instantiate $injector.instantiate()}, then treated as `object`.
	 *
	 * @returns {Object} registered provider instance
	
	 * @example
	 *
	 * The following example shows how to create a simple event tracking service and register it using
	 * {@link auto.$provide#provider $provide.provider()}.
	 *
	 * ```js
	 *  // Define the eventTracker provider
	 *  function EventTrackerProvider() {
	 *    var trackingUrl = '/track';
	 *
	 *    // A provider method for configuring where the tracked events should been saved
	 *    this.setTrackingUrl = function(url) {
	 *      trackingUrl = url;
	 *    };
	 *
	 *    // The service factory function
	 *    this.$get = ['$http', function($http) {
	 *      var trackedEvents = {};
	 *      return {
	 *        // Call this to track an event
	 *        event: function(event) {
	 *          var count = trackedEvents[event] || 0;
	 *          count += 1;
	 *          trackedEvents[event] = count;
	 *          return count;
	 *        },
	 *        // Call this to save the tracked events to the trackingUrl
	 *        save: function() {
	 *          $http.post(trackingUrl, trackedEvents);
	 *        }
	 *      };
	 *    }];
	 *  }
	 *
	 *  describe('eventTracker', function() {
	 *    var postSpy;
	 *
	 *    beforeEach(module(function($provide) {
	 *      // Register the eventTracker provider
	 *      $provide.provider('eventTracker', EventTrackerProvider);
	 *    }));
	 *
	 *    beforeEach(module(function(eventTrackerProvider) {
	 *      // Configure eventTracker provider
	 *      eventTrackerProvider.setTrackingUrl('/custom-track');
	 *    }));
	 *
	 *    it('tracks events', inject(function(eventTracker) {
	 *      expect(eventTracker.event('login')).toEqual(1);
	 *      expect(eventTracker.event('login')).toEqual(2);
	 *    }));
	 *
	 *    it('saves to the tracking url', inject(function(eventTracker, $http) {
	 *      postSpy = spyOn($http, 'post');
	 *      eventTracker.event('login');
	 *      eventTracker.save();
	 *      expect(postSpy).toHaveBeenCalled();
	 *      expect(postSpy.mostRecentCall.args[0]).not.toEqual('/track');
	 *      expect(postSpy.mostRecentCall.args[0]).toEqual('/custom-track');
	 *      expect(postSpy.mostRecentCall.args[1]).toEqual({ 'login': 1 });
	 *    }));
	 *  });
	 * ```
	 *//**
	 * @ngdoc method
	 * @name $provide#factory
	 * @description
	 *
	 * Register a **service factory**, which will be called to return the service instance.
	 * This is short for registering a service where its provider consists of only a `$get` property,
	 * which is the given service factory function.
	 * You should use {@link auto.$provide#factory $provide.factory(getFn)} if you do not need to
	 * configure your service in a provider.
	 *
	 * @param {string} name The name of the instance.
	 * @param {Function|Array.<string|Function>} $getFn The injectable $getFn for the instance creation.
	 *                      Internally this is a short hand for `$provide.provider(name, {$get: $getFn})`.
	 * @returns {Object} registered provider instance
	 *
	 * @example
	 * Here is an example of registering a service
	 * ```js
	 *   $provide.factory('ping', ['$http', function($http) {
	 *     return function ping() {
	 *       return $http.send('/ping');
	 *     };
	 *   }]);
	 * ```
	 * You would then inject and use this service like this:
	 * ```js
	 *   someModule.controller('Ctrl', ['ping', function(ping) {
	 *     ping();
	 *   }]);
	 * ```
	 *//**
	 * @ngdoc method
	 * @name $provide#service
	 * @description
	 *
	 * Register a **service constructor**, which will be invoked with `new` to create the service
	 * instance.
	 * This is short for registering a service where its provider's `$get` property is a factory
	 * function that returns an instance instantiated by the injector from the service constructor
	 * function.
	 *
	 * Internally it looks a bit like this:
	 *
	 * ```
	 * {
	 *   $get: function() {
	 *     return $injector.instantiate(constructor);
	 *   }
	 * }
	 * ```
	 *
	 *
	 * You should use {@link auto.$provide#service $provide.service(class)} if you define your service
	 * as a type/class.
	 *
	 * @param {string} name The name of the instance.
	 * @param {Function|Array.<string|Function>} constructor An injectable class (constructor function)
	 *     that will be instantiated.
	 * @returns {Object} registered provider instance
	 *
	 * @example
	 * Here is an example of registering a service using
	 * {@link auto.$provide#service $provide.service(class)}.
	 * ```js
	 *   var Ping = function($http) {
	 *     this.$http = $http;
	 *   };
	 *
	 *   Ping.$inject = ['$http'];
	 *
	 *   Ping.prototype.send = function() {
	 *     return this.$http.get('/ping');
	 *   };
	 *   $provide.service('ping', Ping);
	 * ```
	 * You would then inject and use this service like this:
	 * ```js
	 *   someModule.controller('Ctrl', ['ping', function(ping) {
	 *     ping.send();
	 *   }]);
	 * ```
	 *//**
	 * @ngdoc method
	 * @name $provide#value
	 * @description
	 *
	 * Register a **value service** with the {@link auto.$injector $injector}, such as a string, a
	 * number, an array, an object or a function. This is short for registering a service where its
	 * provider's `$get` property is a factory function that takes no arguments and returns the **value
	 * service**. That also means it is not possible to inject other services into a value service.
	 *
	 * Value services are similar to constant services, except that they cannot be injected into a
	 * module configuration function (see {@link angular.Module#config}) but they can be overridden by
	 * an Angular {@link auto.$provide#decorator decorator}.
	 *
	 * @param {string} name The name of the instance.
	 * @param {*} value The value.
	 * @returns {Object} registered provider instance
	 *
	 * @example
	 * Here are some examples of creating value services.
	 * ```js
	 *   $provide.value('ADMIN_USER', 'admin');
	 *
	 *   $provide.value('RoleLookup', { admin: 0, writer: 1, reader: 2 });
	 *
	 *   $provide.value('halfOf', function(value) {
	 *     return value / 2;
	 *   });
	 * ```
	 *//**
	 * @ngdoc method
	 * @name $provide#constant
	 * @description
	 *
	 * Register a **constant service** with the {@link auto.$injector $injector}, such as a string,
	 * a number, an array, an object or a function. Like the {@link auto.$provide#value value}, it is not
	 * possible to inject other services into a constant.
	 *
	 * But unlike {@link auto.$provide#value value}, a constant can be
	 * injected into a module configuration function (see {@link angular.Module#config}) and it cannot
	 * be overridden by an Angular {@link auto.$provide#decorator decorator}.
	 *
	 * @param {string} name The name of the constant.
	 * @param {*} value The constant value.
	 * @returns {Object} registered instance
	 *
	 * @example
	 * Here a some examples of creating constants:
	 * ```js
	 *   $provide.constant('SHARD_HEIGHT', 306);
	 *
	 *   $provide.constant('MY_COLOURS', ['red', 'blue', 'grey']);
	 *
	 *   $provide.constant('double', function(value) {
	 *     return value * 2;
	 *   });
	 * ```
	 *//**
	 * @ngdoc method
	 * @name $provide#decorator
	 * @description
	 *
	 * Register a **decorator function** with the {@link auto.$injector $injector}. A decorator function
	 * intercepts the creation of a service, allowing it to override or modify the behavior of the
	 * service. The return value of the decorator function may be the original service, or a new service
	 * that replaces (or wraps and delegates to) the original service.
	 *
	 * You can find out more about using decorators in the {@link guide/decorators} guide.
	 *
	 * @param {string} name The name of the service to decorate.
	 * @param {Function|Array.<string|Function>} decorator This function will be invoked when the service needs to be
	 *    provided and should return the decorated service instance. The function is called using
	 *    the {@link auto.$injector#invoke injector.invoke} method and is therefore fully injectable.
	 *    Local injection arguments:
	 *
	 *    * `$delegate` - The original service instance, which can be replaced, monkey patched, configured,
	 *      decorated or delegated to.
	 *
	 * @example
	 * Here we decorate the {@link ng.$log $log} service to convert warnings to errors by intercepting
	 * calls to {@link ng.$log#error $log.warn()}.
	 * ```js
	 *   $provide.decorator('$log', ['$delegate', function($delegate) {
	 *     $delegate.warn = $delegate.error;
	 *     return $delegate;
	 *   }]);
	 * ```
	 */function createInjector(modulesToLoad,strictDi){strictDi=strictDi===true;var INSTANTIATING={},providerSuffix='Provider',path=[],loadedModules=new NgMap(),providerCache={$provide:{provider:supportObject(provider),factory:supportObject(factory),service:supportObject(service),value:supportObject(value),constant:supportObject(constant),decorator:decorator}},providerInjector=providerCache.$injector=createInternalInjector(providerCache,function(serviceName,caller){if(angular.isString(caller)){path.push(caller);}throw $injectorMinErr('unpr','Unknown provider: {0}',path.join(' <- '));}),instanceCache={},protoInstanceInjector=createInternalInjector(instanceCache,function(serviceName,caller){var provider=providerInjector.get(serviceName+providerSuffix,caller);return instanceInjector.invoke(provider.$get,provider,undefined,serviceName);}),instanceInjector=protoInstanceInjector;providerCache['$injector'+providerSuffix]={$get:valueFn(protoInstanceInjector)};instanceInjector.modules=providerInjector.modules=createMap();var runBlocks=loadModules(modulesToLoad);instanceInjector=protoInstanceInjector.get('$injector');instanceInjector.strictDi=strictDi;forEach(runBlocks,function(fn){if(fn)instanceInjector.invoke(fn);});return instanceInjector;////////////////////////////////////
	// $provider
	////////////////////////////////////
	function supportObject(delegate){return function(key,value){if(isObject(key)){forEach(key,reverseParams(delegate));}else{return delegate(key,value);}};}function provider(name,provider_){assertNotHasOwnProperty(name,'service');if(isFunction(provider_)||isArray(provider_)){provider_=providerInjector.instantiate(provider_);}if(!provider_.$get){throw $injectorMinErr('pget','Provider \'{0}\' must define $get factory method.',name);}return providerCache[name+providerSuffix]=provider_;}function enforceReturnValue(name,factory){return(/** @this */function enforcedReturnValue(){var result=instanceInjector.invoke(factory,this);if(isUndefined(result)){throw $injectorMinErr('undef','Provider \'{0}\' must return a value from $get factory method.',name);}return result;});}function factory(name,factoryFn,enforce){return provider(name,{$get:enforce!==false?enforceReturnValue(name,factoryFn):factoryFn});}function service(name,constructor){return factory(name,['$injector',function($injector){return $injector.instantiate(constructor);}]);}function value(name,val){return factory(name,valueFn(val),false);}function constant(name,value){assertNotHasOwnProperty(name,'constant');providerCache[name]=value;instanceCache[name]=value;}function decorator(serviceName,decorFn){var origProvider=providerInjector.get(serviceName+providerSuffix),orig$get=origProvider.$get;origProvider.$get=function(){var origInstance=instanceInjector.invoke(orig$get,origProvider);return instanceInjector.invoke(decorFn,null,{$delegate:origInstance});};}////////////////////////////////////
	// Module Loading
	////////////////////////////////////
	function loadModules(modulesToLoad){assertArg(isUndefined(modulesToLoad)||isArray(modulesToLoad),'modulesToLoad','not an array');var runBlocks=[],moduleFn;forEach(modulesToLoad,function(module){if(loadedModules.get(module))return;loadedModules.set(module,true);function runInvokeQueue(queue){var i,ii;for(i=0,ii=queue.length;i<ii;i++){var invokeArgs=queue[i],provider=providerInjector.get(invokeArgs[0]);provider[invokeArgs[1]].apply(provider,invokeArgs[2]);}}try{if(isString(module)){moduleFn=angularModule(module);instanceInjector.modules[module]=moduleFn;runBlocks=runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);runInvokeQueue(moduleFn._invokeQueue);runInvokeQueue(moduleFn._configBlocks);}else if(isFunction(module)){runBlocks.push(providerInjector.invoke(module));}else if(isArray(module)){runBlocks.push(providerInjector.invoke(module));}else{assertArgFn(module,'module');}}catch(e){if(isArray(module)){module=module[module.length-1];}if(e.message&&e.stack&&e.stack.indexOf(e.message)===-1){// Safari & FF's stack traces don't contain error.message content
	// unlike those of Chrome and IE
	// So if stack doesn't contain message, we create a new string that contains both.
	// Since error.stack is read-only in Safari, I'm overriding e and not e.stack here.
	// eslint-disable-next-line no-ex-assign
	e=e.message+'\n'+e.stack;}throw $injectorMinErr('modulerr','Failed to instantiate module {0} due to:\n{1}',module,e.stack||e.message||e);}});return runBlocks;}////////////////////////////////////
	// internal Injector
	////////////////////////////////////
	function createInternalInjector(cache,factory){function getService(serviceName,caller){if(cache.hasOwnProperty(serviceName)){if(cache[serviceName]===INSTANTIATING){throw $injectorMinErr('cdep','Circular dependency found: {0}',serviceName+' <- '+path.join(' <- '));}return cache[serviceName];}else{try{path.unshift(serviceName);cache[serviceName]=INSTANTIATING;cache[serviceName]=factory(serviceName,caller);return cache[serviceName];}catch(err){if(cache[serviceName]===INSTANTIATING){delete cache[serviceName];}throw err;}finally{path.shift();}}}function injectionArgs(fn,locals,serviceName){var args=[],$inject=createInjector.$$annotate(fn,strictDi,serviceName);for(var i=0,length=$inject.length;i<length;i++){var key=$inject[i];if(typeof key!=='string'){throw $injectorMinErr('itkn','Incorrect injection token! Expected service name as string, got {0}',key);}args.push(locals&&locals.hasOwnProperty(key)?locals[key]:getService(key,serviceName));}return args;}function isClass(func){// Support: IE 9-11 only
	// IE 9-11 do not support classes and IE9 leaks with the code below.
	if(msie||typeof func!=='function'){return false;}var result=func.$$ngIsClass;if(!isBoolean(result)){// Support: Edge 12-13 only
	// See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/6156135/
	result=func.$$ngIsClass=/^(?:class\b|constructor\()/.test(stringifyFn(func));}return result;}function invoke(fn,self,locals,serviceName){if(typeof locals==='string'){serviceName=locals;locals=null;}var args=injectionArgs(fn,locals,serviceName);if(isArray(fn)){fn=fn[fn.length-1];}if(!isClass(fn)){// http://jsperf.com/angularjs-invoke-apply-vs-switch
	// #5388
	return fn.apply(self,args);}else{args.unshift(null);return new(Function.prototype.bind.apply(fn,args))();}}function instantiate(Type,locals,serviceName){// Check if Type is annotated and use just the given function at n-1 as parameter
	// e.g. someModule.factory('greeter', ['$window', function(renamed$window) {}]);
	var ctor=isArray(Type)?Type[Type.length-1]:Type;var args=injectionArgs(Type,locals,serviceName);// Empty object at position 0 is ignored for invocation with `new`, but required.
	args.unshift(null);return new(Function.prototype.bind.apply(ctor,args))();}return{invoke:invoke,instantiate:instantiate,get:getService,annotate:createInjector.$$annotate,has:function has(name){return providerCache.hasOwnProperty(name+providerSuffix)||cache.hasOwnProperty(name);}};}}createInjector.$$annotate=annotate;/**
	 * @ngdoc provider
	 * @name $anchorScrollProvider
	 * @this
	 *
	 * @description
	 * Use `$anchorScrollProvider` to disable automatic scrolling whenever
	 * {@link ng.$location#hash $location.hash()} changes.
	 */function $AnchorScrollProvider(){var autoScrollingEnabled=true;/**
	   * @ngdoc method
	   * @name $anchorScrollProvider#disableAutoScrolling
	   *
	   * @description
	   * By default, {@link ng.$anchorScroll $anchorScroll()} will automatically detect changes to
	   * {@link ng.$location#hash $location.hash()} and scroll to the element matching the new hash.<br />
	   * Use this method to disable automatic scrolling.
	   *
	   * If automatic scrolling is disabled, one must explicitly call
	   * {@link ng.$anchorScroll $anchorScroll()} in order to scroll to the element related to the
	   * current hash.
	   */this.disableAutoScrolling=function(){autoScrollingEnabled=false;};/**
	   * @ngdoc service
	   * @name $anchorScroll
	   * @kind function
	   * @requires $window
	   * @requires $location
	   * @requires $rootScope
	   *
	   * @description
	   * When called, it scrolls to the element related to the specified `hash` or (if omitted) to the
	   * current value of {@link ng.$location#hash $location.hash()}, according to the rules specified
	   * in the
	   * [HTML5 spec](http://www.w3.org/html/wg/drafts/html/master/browsers.html#an-indicated-part-of-the-document).
	   *
	   * It also watches the {@link ng.$location#hash $location.hash()} and automatically scrolls to
	   * match any anchor whenever it changes. This can be disabled by calling
	   * {@link ng.$anchorScrollProvider#disableAutoScrolling $anchorScrollProvider.disableAutoScrolling()}.
	   *
	   * Additionally, you can use its {@link ng.$anchorScroll#yOffset yOffset} property to specify a
	   * vertical scroll-offset (either fixed or dynamic).
	   *
	   * @param {string=} hash The hash specifying the element to scroll to. If omitted, the value of
	   *                       {@link ng.$location#hash $location.hash()} will be used.
	   *
	   * @property {(number|function|jqLite)} yOffset
	   * If set, specifies a vertical scroll-offset. This is often useful when there are fixed
	   * positioned elements at the top of the page, such as navbars, headers etc.
	   *
	   * `yOffset` can be specified in various ways:
	   * - **number**: A fixed number of pixels to be used as offset.<br /><br />
	   * - **function**: A getter function called everytime `$anchorScroll()` is executed. Must return
	   *   a number representing the offset (in pixels).<br /><br />
	   * - **jqLite**: A jqLite/jQuery element to be used for specifying the offset. The distance from
	   *   the top of the page to the element's bottom will be used as offset.<br />
	   *   **Note**: The element will be taken into account only as long as its `position` is set to
	   *   `fixed`. This option is useful, when dealing with responsive navbars/headers that adjust
	   *   their height and/or positioning according to the viewport's size.
	   *
	   * <br />
	   * <div class="alert alert-warning">
	   * In order for `yOffset` to work properly, scrolling should take place on the document's root and
	   * not some child element.
	   * </div>
	   *
	   * @example
	     <example module="anchorScrollExample" name="anchor-scroll">
	       <file name="index.html">
	         <div id="scrollArea" ng-controller="ScrollController">
	           <a ng-click="gotoBottom()">Go to bottom</a>
	           <a id="bottom"></a> You're at the bottom!
	         </div>
	       </file>
	       <file name="script.js">
	         angular.module('anchorScrollExample', [])
	           .controller('ScrollController', ['$scope', '$location', '$anchorScroll',
	             function($scope, $location, $anchorScroll) {
	               $scope.gotoBottom = function() {
	                 // set the location.hash to the id of
	                 // the element you wish to scroll to.
	                 $location.hash('bottom');
	
	                 // call $anchorScroll()
	                 $anchorScroll();
	               };
	             }]);
	       </file>
	       <file name="style.css">
	         #scrollArea {
	           height: 280px;
	           overflow: auto;
	         }
	
	         #bottom {
	           display: block;
	           margin-top: 2000px;
	         }
	       </file>
	     </example>
	   *
	   * <hr />
	   * The example below illustrates the use of a vertical scroll-offset (specified as a fixed value).
	   * See {@link ng.$anchorScroll#yOffset $anchorScroll.yOffset} for more details.
	   *
	   * @example
	     <example module="anchorScrollOffsetExample" name="anchor-scroll-offset">
	       <file name="index.html">
	         <div class="fixed-header" ng-controller="headerCtrl">
	           <a href="" ng-click="gotoAnchor(x)" ng-repeat="x in [1,2,3,4,5]">
	             Go to anchor {{x}}
	           </a>
	         </div>
	         <div id="anchor{{x}}" class="anchor" ng-repeat="x in [1,2,3,4,5]">
	           Anchor {{x}} of 5
	         </div>
	       </file>
	       <file name="script.js">
	         angular.module('anchorScrollOffsetExample', [])
	           .run(['$anchorScroll', function($anchorScroll) {
	             $anchorScroll.yOffset = 50;   // always scroll by 50 extra pixels
	           }])
	           .controller('headerCtrl', ['$anchorScroll', '$location', '$scope',
	             function($anchorScroll, $location, $scope) {
	               $scope.gotoAnchor = function(x) {
	                 var newHash = 'anchor' + x;
	                 if ($location.hash() !== newHash) {
	                   // set the $location.hash to `newHash` and
	                   // $anchorScroll will automatically scroll to it
	                   $location.hash('anchor' + x);
	                 } else {
	                   // call $anchorScroll() explicitly,
	                   // since $location.hash hasn't changed
	                   $anchorScroll();
	                 }
	               };
	             }
	           ]);
	       </file>
	       <file name="style.css">
	         body {
	           padding-top: 50px;
	         }
	
	         .anchor {
	           border: 2px dashed DarkOrchid;
	           padding: 10px 10px 200px 10px;
	         }
	
	         .fixed-header {
	           background-color: rgba(0, 0, 0, 0.2);
	           height: 50px;
	           position: fixed;
	           top: 0; left: 0; right: 0;
	         }
	
	         .fixed-header > a {
	           display: inline-block;
	           margin: 5px 15px;
	         }
	       </file>
	     </example>
	   */this.$get=['$window','$location','$rootScope',function($window,$location,$rootScope){var document=$window.document;// Helper function to get first anchor from a NodeList
	// (using `Array#some()` instead of `angular#forEach()` since it's more performant
	//  and working in all supported browsers.)
	function getFirstAnchor(list){var result=null;Array.prototype.some.call(list,function(element){if(nodeName_(element)==='a'){result=element;return true;}});return result;}function getYOffset(){var offset=scroll.yOffset;if(isFunction(offset)){offset=offset();}else if(isElement(offset)){var elem=offset[0];var style=$window.getComputedStyle(elem);if(style.position!=='fixed'){offset=0;}else{offset=elem.getBoundingClientRect().bottom;}}else if(!isNumber(offset)){offset=0;}return offset;}function scrollTo(elem){if(elem){elem.scrollIntoView();var offset=getYOffset();if(offset){// `offset` is the number of pixels we should scroll UP in order to align `elem` properly.
	// This is true ONLY if the call to `elem.scrollIntoView()` initially aligns `elem` at the
	// top of the viewport.
	//
	// IF the number of pixels from the top of `elem` to the end of the page's content is less
	// than the height of the viewport, then `elem.scrollIntoView()` will align the `elem` some
	// way down the page.
	//
	// This is often the case for elements near the bottom of the page.
	//
	// In such cases we do not need to scroll the whole `offset` up, just the difference between
	// the top of the element and the offset, which is enough to align the top of `elem` at the
	// desired position.
	var elemTop=elem.getBoundingClientRect().top;$window.scrollBy(0,elemTop-offset);}}else{$window.scrollTo(0,0);}}function scroll(hash){// Allow numeric hashes
	hash=isString(hash)?hash:isNumber(hash)?hash.toString():$location.hash();var elm;// empty hash, scroll to the top of the page
	if(!hash)scrollTo(null);// element with given id
	else if(elm=document.getElementById(hash))scrollTo(elm);// first anchor with given name :-D
	else if(elm=getFirstAnchor(document.getElementsByName(hash)))scrollTo(elm);// no element and hash === 'top', scroll to the top of the page
	else if(hash==='top')scrollTo(null);}// does not scroll when user clicks on anchor link that is currently on
	// (no url change, no $location.hash() change), browser native does scroll
	if(autoScrollingEnabled){$rootScope.$watch(function autoScrollWatch(){return $location.hash();},function autoScrollWatchAction(newVal,oldVal){// skip the initial scroll if $location.hash is empty
	if(newVal===oldVal&&newVal==='')return;jqLiteDocumentLoaded(function(){$rootScope.$evalAsync(scroll);});});}return scroll;}];}var $animateMinErr=minErr('$animate');var ELEMENT_NODE=1;var NG_ANIMATE_CLASSNAME='ng-animate';function mergeClasses(a,b){if(!a&&!b)return'';if(!a)return b;if(!b)return a;if(isArray(a))a=a.join(' ');if(isArray(b))b=b.join(' ');return a+' '+b;}function extractElementNode(element){for(var i=0;i<element.length;i++){var elm=element[i];if(elm.nodeType===ELEMENT_NODE){return elm;}}}function splitClasses(classes){if(isString(classes)){classes=classes.split(' ');}// Use createMap() to prevent class assumptions involving property names in
	// Object.prototype
	var obj=createMap();forEach(classes,function(klass){// sometimes the split leaves empty string values
	// incase extra spaces were applied to the options
	if(klass.length){obj[klass]=true;}});return obj;}// if any other type of options value besides an Object value is
	// passed into the $animate.method() animation then this helper code
	// will be run which will ignore it. While this patch is not the
	// greatest solution to this, a lot of existing plugins depend on
	// $animate to either call the callback (< 1.2) or return a promise
	// that can be changed. This helper function ensures that the options
	// are wiped clean incase a callback function is provided.
	function prepareAnimateOptions(options){return isObject(options)?options:{};}var $$CoreAnimateJsProvider=/** @this */function $$CoreAnimateJsProvider(){this.$get=noop;};// this is prefixed with Core since it conflicts with
	// the animateQueueProvider defined in ngAnimate/animateQueue.js
	var $$CoreAnimateQueueProvider=/** @this */function $$CoreAnimateQueueProvider(){var postDigestQueue=new NgMap();var postDigestElements=[];this.$get=['$$AnimateRunner','$rootScope',function($$AnimateRunner,$rootScope){return{enabled:noop,on:noop,off:noop,pin:noop,push:function push(element,event,options,domOperation){if(domOperation){domOperation();}options=options||{};if(options.from){element.css(options.from);}if(options.to){element.css(options.to);}if(options.addClass||options.removeClass){addRemoveClassesPostDigest(element,options.addClass,options.removeClass);}var runner=new $$AnimateRunner();// since there are no animations to run the runner needs to be
	// notified that the animation call is complete.
	runner.complete();return runner;}};function updateData(data,classes,value){var changed=false;if(classes){classes=isString(classes)?classes.split(' '):isArray(classes)?classes:[];forEach(classes,function(className){if(className){changed=true;data[className]=value;}});}return changed;}function handleCSSClassChanges(){forEach(postDigestElements,function(element){var data=postDigestQueue.get(element);if(data){var existing=splitClasses(element.attr('class'));var toAdd='';var toRemove='';forEach(data,function(status,className){var hasClass=!!existing[className];if(status!==hasClass){if(status){toAdd+=(toAdd.length?' ':'')+className;}else{toRemove+=(toRemove.length?' ':'')+className;}}});forEach(element,function(elm){if(toAdd){jqLiteAddClass(elm,toAdd);}if(toRemove){jqLiteRemoveClass(elm,toRemove);}});postDigestQueue.delete(element);}});postDigestElements.length=0;}function addRemoveClassesPostDigest(element,add,remove){var data=postDigestQueue.get(element)||{};var classesAdded=updateData(data,add,true);var classesRemoved=updateData(data,remove,false);if(classesAdded||classesRemoved){postDigestQueue.set(element,data);postDigestElements.push(element);if(postDigestElements.length===1){$rootScope.$$postDigest(handleCSSClassChanges);}}}}];};/**
	 * @ngdoc provider
	 * @name $animateProvider
	 *
	 * @description
	 * Default implementation of $animate that doesn't perform any animations, instead just
	 * synchronously performs DOM updates and resolves the returned runner promise.
	 *
	 * In order to enable animations the `ngAnimate` module has to be loaded.
	 *
	 * To see the functional implementation check out `src/ngAnimate/animate.js`.
	 */var $AnimateProvider=['$provide',/** @this */function($provide){var provider=this;var classNameFilter=null;this.$$registeredAnimations=Object.create(null);/**
	   * @ngdoc method
	   * @name $animateProvider#register
	   *
	   * @description
	   * Registers a new injectable animation factory function. The factory function produces the
	   * animation object which contains callback functions for each event that is expected to be
	   * animated.
	   *
	   *   * `eventFn`: `function(element, ... , doneFunction, options)`
	   *   The element to animate, the `doneFunction` and the options fed into the animation. Depending
	   *   on the type of animation additional arguments will be injected into the animation function. The
	   *   list below explains the function signatures for the different animation methods:
	   *
	   *   - setClass: function(element, addedClasses, removedClasses, doneFunction, options)
	   *   - addClass: function(element, addedClasses, doneFunction, options)
	   *   - removeClass: function(element, removedClasses, doneFunction, options)
	   *   - enter, leave, move: function(element, doneFunction, options)
	   *   - animate: function(element, fromStyles, toStyles, doneFunction, options)
	   *
	   *   Make sure to trigger the `doneFunction` once the animation is fully complete.
	   *
	   * ```js
	   *   return {
	   *     //enter, leave, move signature
	   *     eventFn : function(element, done, options) {
	   *       //code to run the animation
	   *       //once complete, then run done()
	   *       return function endFunction(wasCancelled) {
	   *         //code to cancel the animation
	   *       }
	   *     }
	   *   }
	   * ```
	   *
	   * @param {string} name The name of the animation (this is what the class-based CSS value will be compared to).
	   * @param {Function} factory The factory function that will be executed to return the animation
	   *                           object.
	   */this.register=function(name,factory){if(name&&name.charAt(0)!=='.'){throw $animateMinErr('notcsel','Expecting class selector starting with \'.\' got \'{0}\'.',name);}var key=name+'-animation';provider.$$registeredAnimations[name.substr(1)]=key;$provide.factory(key,factory);};/**
	   * @ngdoc method
	   * @name $animateProvider#classNameFilter
	   *
	   * @description
	   * Sets and/or returns the CSS class regular expression that is checked when performing
	   * an animation. Upon bootstrap the classNameFilter value is not set at all and will
	   * therefore enable $animate to attempt to perform an animation on any element that is triggered.
	   * When setting the `classNameFilter` value, animations will only be performed on elements
	   * that successfully match the filter expression. This in turn can boost performance
	   * for low-powered devices as well as applications containing a lot of structural operations.
	   * @param {RegExp=} expression The className expression which will be checked against all animations
	   * @return {RegExp} The current CSS className expression value. If null then there is no expression value
	   */this.classNameFilter=function(expression){if(arguments.length===1){classNameFilter=expression instanceof RegExp?expression:null;if(classNameFilter){var reservedRegex=new RegExp('[(\\s|\\/)]'+NG_ANIMATE_CLASSNAME+'[(\\s|\\/)]');if(reservedRegex.test(classNameFilter.toString())){classNameFilter=null;throw $animateMinErr('nongcls','$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.',NG_ANIMATE_CLASSNAME);}}}return classNameFilter;};this.$get=['$$animateQueue',function($$animateQueue){function domInsert(element,parentElement,afterElement){// if for some reason the previous element was removed
	// from the dom sometime before this code runs then let's
	// just stick to using the parent element as the anchor
	if(afterElement){var afterNode=extractElementNode(afterElement);if(afterNode&&!afterNode.parentNode&&!afterNode.previousElementSibling){afterElement=null;}}if(afterElement){afterElement.after(element);}else{parentElement.prepend(element);}}/**
	     * @ngdoc service
	     * @name $animate
	     * @description The $animate service exposes a series of DOM utility methods that provide support
	     * for animation hooks. The default behavior is the application of DOM operations, however,
	     * when an animation is detected (and animations are enabled), $animate will do the heavy lifting
	     * to ensure that animation runs with the triggered DOM operation.
	     *
	     * By default $animate doesn't trigger any animations. This is because the `ngAnimate` module isn't
	     * included and only when it is active then the animation hooks that `$animate` triggers will be
	     * functional. Once active then all structural `ng-` directives will trigger animations as they perform
	     * their DOM-related operations (enter, leave and move). Other directives such as `ngClass`,
	     * `ngShow`, `ngHide` and `ngMessages` also provide support for animations.
	     *
	     * It is recommended that the`$animate` service is always used when executing DOM-related procedures within directives.
	     *
	     * To learn more about enabling animation support, click here to visit the
	     * {@link ngAnimate ngAnimate module page}.
	     */return{// we don't call it directly since non-existant arguments may
	// be interpreted as null within the sub enabled function
	/**
	       *
	       * @ngdoc method
	       * @name $animate#on
	       * @kind function
	       * @description Sets up an event listener to fire whenever the animation event (enter, leave, move, etc...)
	       *    has fired on the given element or among any of its children. Once the listener is fired, the provided callback
	       *    is fired with the following params:
	       *
	       * ```js
	       * $animate.on('enter', container,
	       *    function callback(element, phase) {
	       *      // cool we detected an enter animation within the container
	       *    }
	       * );
	       * ```
	       *
	       * @param {string} event the animation event that will be captured (e.g. enter, leave, move, addClass, removeClass, etc...)
	       * @param {DOMElement} container the container element that will capture each of the animation events that are fired on itself
	       *     as well as among its children
	       * @param {Function} callback the callback function that will be fired when the listener is triggered
	       *
	       * The arguments present in the callback function are:
	       * * `element` - The captured DOM element that the animation was fired on.
	       * * `phase` - The phase of the animation. The two possible phases are **start** (when the animation starts) and **close** (when it ends).
	       */on:$$animateQueue.on,/**
	       *
	       * @ngdoc method
	       * @name $animate#off
	       * @kind function
	       * @description Deregisters an event listener based on the event which has been associated with the provided element. This method
	       * can be used in three different ways depending on the arguments:
	       *
	       * ```js
	       * // remove all the animation event listeners listening for `enter`
	       * $animate.off('enter');
	       *
	       * // remove listeners for all animation events from the container element
	       * $animate.off(container);
	       *
	       * // remove all the animation event listeners listening for `enter` on the given element and its children
	       * $animate.off('enter', container);
	       *
	       * // remove the event listener function provided by `callback` that is set
	       * // to listen for `enter` on the given `container` as well as its children
	       * $animate.off('enter', container, callback);
	       * ```
	       *
	       * @param {string|DOMElement} event|container the animation event (e.g. enter, leave, move,
	       * addClass, removeClass, etc...), or the container element. If it is the element, all other
	       * arguments are ignored.
	       * @param {DOMElement=} container the container element the event listener was placed on
	       * @param {Function=} callback the callback function that was registered as the listener
	       */off:$$animateQueue.off,/**
	       * @ngdoc method
	       * @name $animate#pin
	       * @kind function
	       * @description Associates the provided element with a host parent element to allow the element to be animated even if it exists
	       *    outside of the DOM structure of the Angular application. By doing so, any animation triggered via `$animate` can be issued on the
	       *    element despite being outside the realm of the application or within another application. Say for example if the application
	       *    was bootstrapped on an element that is somewhere inside of the `<body>` tag, but we wanted to allow for an element to be situated
	       *    as a direct child of `document.body`, then this can be achieved by pinning the element via `$animate.pin(element)`. Keep in mind
	       *    that calling `$animate.pin(element, parentElement)` will not actually insert into the DOM anywhere; it will just create the association.
	       *
	       *    Note that this feature is only active when the `ngAnimate` module is used.
	       *
	       * @param {DOMElement} element the external element that will be pinned
	       * @param {DOMElement} parentElement the host parent element that will be associated with the external element
	       */pin:$$animateQueue.pin,/**
	       *
	       * @ngdoc method
	       * @name $animate#enabled
	       * @kind function
	       * @description Used to get and set whether animations are enabled or not on the entire application or on an element and its children. This
	       * function can be called in four ways:
	       *
	       * ```js
	       * // returns true or false
	       * $animate.enabled();
	       *
	       * // changes the enabled state for all animations
	       * $animate.enabled(false);
	       * $animate.enabled(true);
	       *
	       * // returns true or false if animations are enabled for an element
	       * $animate.enabled(element);
	       *
	       * // changes the enabled state for an element and its children
	       * $animate.enabled(element, true);
	       * $animate.enabled(element, false);
	       * ```
	       *
	       * @param {DOMElement=} element the element that will be considered for checking/setting the enabled state
	       * @param {boolean=} enabled whether or not the animations will be enabled for the element
	       *
	       * @return {boolean} whether or not animations are enabled
	       */enabled:$$animateQueue.enabled,/**
	       * @ngdoc method
	       * @name $animate#cancel
	       * @kind function
	       * @description Cancels the provided animation.
	       *
	       * @param {Promise} animationPromise The animation promise that is returned when an animation is started.
	       */cancel:function cancel(runner){if(runner.end){runner.end();}},/**
	       *
	       * @ngdoc method
	       * @name $animate#enter
	       * @kind function
	       * @description Inserts the element into the DOM either after the `after` element (if provided) or
	       *   as the first child within the `parent` element and then triggers an animation.
	       *   A promise is returned that will be resolved during the next digest once the animation
	       *   has completed.
	       *
	       * @param {DOMElement} element the element which will be inserted into the DOM
	       * @param {DOMElement} parent the parent element which will append the element as
	       *   a child (so long as the after element is not present)
	       * @param {DOMElement=} after the sibling element after which the element will be appended
	       * @param {object=} options an optional collection of options/styles that will be applied to the element.
	       *   The object can have the following properties:
	       *
	       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
	       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
	       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
	       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
	       *
	       * @return {Promise} the animation callback promise
	       */enter:function enter(element,parent,after,options){parent=parent&&jqLite(parent);after=after&&jqLite(after);parent=parent||after.parent();domInsert(element,parent,after);return $$animateQueue.push(element,'enter',prepareAnimateOptions(options));},/**
	       *
	       * @ngdoc method
	       * @name $animate#move
	       * @kind function
	       * @description Inserts (moves) the element into its new position in the DOM either after
	       *   the `after` element (if provided) or as the first child within the `parent` element
	       *   and then triggers an animation. A promise is returned that will be resolved
	       *   during the next digest once the animation has completed.
	       *
	       * @param {DOMElement} element the element which will be moved into the new DOM position
	       * @param {DOMElement} parent the parent element which will append the element as
	       *   a child (so long as the after element is not present)
	       * @param {DOMElement=} after the sibling element after which the element will be appended
	       * @param {object=} options an optional collection of options/styles that will be applied to the element.
	       *   The object can have the following properties:
	       *
	       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
	       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
	       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
	       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
	       *
	       * @return {Promise} the animation callback promise
	       */move:function move(element,parent,after,options){parent=parent&&jqLite(parent);after=after&&jqLite(after);parent=parent||after.parent();domInsert(element,parent,after);return $$animateQueue.push(element,'move',prepareAnimateOptions(options));},/**
	       * @ngdoc method
	       * @name $animate#leave
	       * @kind function
	       * @description Triggers an animation and then removes the element from the DOM.
	       * When the function is called a promise is returned that will be resolved during the next
	       * digest once the animation has completed.
	       *
	       * @param {DOMElement} element the element which will be removed from the DOM
	       * @param {object=} options an optional collection of options/styles that will be applied to the element.
	       *   The object can have the following properties:
	       *
	       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
	       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
	       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
	       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
	       *
	       * @return {Promise} the animation callback promise
	       */leave:function leave(element,options){return $$animateQueue.push(element,'leave',prepareAnimateOptions(options),function(){element.remove();});},/**
	       * @ngdoc method
	       * @name $animate#addClass
	       * @kind function
	       *
	       * @description Triggers an addClass animation surrounding the addition of the provided CSS class(es). Upon
	       *   execution, the addClass operation will only be handled after the next digest and it will not trigger an
	       *   animation if element already contains the CSS class or if the class is removed at a later step.
	       *   Note that class-based animations are treated differently compared to structural animations
	       *   (like enter, move and leave) since the CSS classes may be added/removed at different points
	       *   depending if CSS or JavaScript animations are used.
	       *
	       * @param {DOMElement} element the element which the CSS classes will be applied to
	       * @param {string} className the CSS class(es) that will be added (multiple classes are separated via spaces)
	       * @param {object=} options an optional collection of options/styles that will be applied to the element.
	       *   The object can have the following properties:
	       *
	       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
	       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
	       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
	       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
	       *
	       * @return {Promise} the animation callback promise
	       */addClass:function addClass(element,className,options){options=prepareAnimateOptions(options);options.addClass=mergeClasses(options.addclass,className);return $$animateQueue.push(element,'addClass',options);},/**
	       * @ngdoc method
	       * @name $animate#removeClass
	       * @kind function
	       *
	       * @description Triggers a removeClass animation surrounding the removal of the provided CSS class(es). Upon
	       *   execution, the removeClass operation will only be handled after the next digest and it will not trigger an
	       *   animation if element does not contain the CSS class or if the class is added at a later step.
	       *   Note that class-based animations are treated differently compared to structural animations
	       *   (like enter, move and leave) since the CSS classes may be added/removed at different points
	       *   depending if CSS or JavaScript animations are used.
	       *
	       * @param {DOMElement} element the element which the CSS classes will be applied to
	       * @param {string} className the CSS class(es) that will be removed (multiple classes are separated via spaces)
	       * @param {object=} options an optional collection of options/styles that will be applied to the element.
	       *   The object can have the following properties:
	       *
	       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
	       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
	       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
	       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
	       *
	       * @return {Promise} the animation callback promise
	       */removeClass:function removeClass(element,className,options){options=prepareAnimateOptions(options);options.removeClass=mergeClasses(options.removeClass,className);return $$animateQueue.push(element,'removeClass',options);},/**
	       * @ngdoc method
	       * @name $animate#setClass
	       * @kind function
	       *
	       * @description Performs both the addition and removal of a CSS classes on an element and (during the process)
	       *    triggers an animation surrounding the class addition/removal. Much like `$animate.addClass` and
	       *    `$animate.removeClass`, `setClass` will only evaluate the classes being added/removed once a digest has
	       *    passed. Note that class-based animations are treated differently compared to structural animations
	       *    (like enter, move and leave) since the CSS classes may be added/removed at different points
	       *    depending if CSS or JavaScript animations are used.
	       *
	       * @param {DOMElement} element the element which the CSS classes will be applied to
	       * @param {string} add the CSS class(es) that will be added (multiple classes are separated via spaces)
	       * @param {string} remove the CSS class(es) that will be removed (multiple classes are separated via spaces)
	       * @param {object=} options an optional collection of options/styles that will be applied to the element.
	       *   The object can have the following properties:
	       *
	       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
	       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
	       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
	       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
	       *
	       * @return {Promise} the animation callback promise
	       */setClass:function setClass(element,add,remove,options){options=prepareAnimateOptions(options);options.addClass=mergeClasses(options.addClass,add);options.removeClass=mergeClasses(options.removeClass,remove);return $$animateQueue.push(element,'setClass',options);},/**
	       * @ngdoc method
	       * @name $animate#animate
	       * @kind function
	       *
	       * @description Performs an inline animation on the element which applies the provided to and from CSS styles to the element.
	       * If any detected CSS transition, keyframe or JavaScript matches the provided className value, then the animation will take
	       * on the provided styles. For example, if a transition animation is set for the given className, then the provided `from` and
	       * `to` styles will be applied alongside the given transition. If the CSS style provided in `from` does not have a corresponding
	       * style in `to`, the style in `from` is applied immediately, and no animation is run.
	       * If a JavaScript animation is detected then the provided styles will be given in as function parameters into the `animate`
	       * method (or as part of the `options` parameter):
	       *
	       * ```js
	       * ngModule.animation('.my-inline-animation', function() {
	       *   return {
	       *     animate : function(element, from, to, done, options) {
	       *       //animation
	       *       done();
	       *     }
	       *   }
	       * });
	       * ```
	       *
	       * @param {DOMElement} element the element which the CSS styles will be applied to
	       * @param {object} from the from (starting) CSS styles that will be applied to the element and across the animation.
	       * @param {object} to the to (destination) CSS styles that will be applied to the element and across the animation.
	       * @param {string=} className an optional CSS class that will be applied to the element for the duration of the animation. If
	       *    this value is left as empty then a CSS class of `ng-inline-animate` will be applied to the element.
	       *    (Note that if no animation is detected then this value will not be applied to the element.)
	       * @param {object=} options an optional collection of options/styles that will be applied to the element.
	       *   The object can have the following properties:
	       *
	       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
	       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
	       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
	       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
	       *
	       * @return {Promise} the animation callback promise
	       */animate:function animate(element,from,to,className,options){options=prepareAnimateOptions(options);options.from=options.from?extend(options.from,from):from;options.to=options.to?extend(options.to,to):to;className=className||'ng-inline-animate';options.tempClasses=mergeClasses(options.tempClasses,className);return $$animateQueue.push(element,'animate',options);}};}];}];var $$AnimateAsyncRunFactoryProvider=/** @this */function $$AnimateAsyncRunFactoryProvider(){this.$get=['$$rAF',function($$rAF){var waitQueue=[];function waitForTick(fn){waitQueue.push(fn);if(waitQueue.length>1)return;$$rAF(function(){for(var i=0;i<waitQueue.length;i++){waitQueue[i]();}waitQueue=[];});}return function(){var passed=false;waitForTick(function(){passed=true;});return function(callback){if(passed){callback();}else{waitForTick(callback);}};};}];};var $$AnimateRunnerFactoryProvider=/** @this */function $$AnimateRunnerFactoryProvider(){this.$get=['$q','$sniffer','$$animateAsyncRun','$$isDocumentHidden','$timeout',function($q,$sniffer,$$animateAsyncRun,$$isDocumentHidden,$timeout){var INITIAL_STATE=0;var DONE_PENDING_STATE=1;var DONE_COMPLETE_STATE=2;AnimateRunner.chain=function(chain,callback){var index=0;next();function next(){if(index===chain.length){callback(true);return;}chain[index](function(response){if(response===false){callback(false);return;}index++;next();});}};AnimateRunner.all=function(runners,callback){var count=0;var status=true;forEach(runners,function(runner){runner.done(onProgress);});function onProgress(response){status=status&&response;if(++count===runners.length){callback(status);}}};function AnimateRunner(host){this.setHost(host);var rafTick=$$animateAsyncRun();var timeoutTick=function timeoutTick(fn){$timeout(fn,0,false);};this._doneCallbacks=[];this._tick=function(fn){if($$isDocumentHidden()){timeoutTick(fn);}else{rafTick(fn);}};this._state=0;}AnimateRunner.prototype={setHost:function setHost(host){this.host=host||{};},done:function done(fn){if(this._state===DONE_COMPLETE_STATE){fn();}else{this._doneCallbacks.push(fn);}},progress:noop,getPromise:function getPromise(){if(!this.promise){var self=this;this.promise=$q(function(resolve,reject){self.done(function(status){if(status===false){reject();}else{resolve();}});});}return this.promise;},then:function then(resolveHandler,rejectHandler){return this.getPromise().then(resolveHandler,rejectHandler);},'catch':function _catch(handler){return this.getPromise()['catch'](handler);},'finally':function _finally(handler){return this.getPromise()['finally'](handler);},pause:function pause(){if(this.host.pause){this.host.pause();}},resume:function resume(){if(this.host.resume){this.host.resume();}},end:function end(){if(this.host.end){this.host.end();}this._resolve(true);},cancel:function cancel(){if(this.host.cancel){this.host.cancel();}this._resolve(false);},complete:function complete(response){var self=this;if(self._state===INITIAL_STATE){self._state=DONE_PENDING_STATE;self._tick(function(){self._resolve(response);});}},_resolve:function _resolve(response){if(this._state!==DONE_COMPLETE_STATE){forEach(this._doneCallbacks,function(fn){fn(response);});this._doneCallbacks.length=0;this._state=DONE_COMPLETE_STATE;}}};return AnimateRunner;}];};/* exported $CoreAnimateCssProvider *//**
	 * @ngdoc service
	 * @name $animateCss
	 * @kind object
	 * @this
	 *
	 * @description
	 * This is the core version of `$animateCss`. By default, only when the `ngAnimate` is included,
	 * then the `$animateCss` service will actually perform animations.
	 *
	 * Click here {@link ngAnimate.$animateCss to read the documentation for $animateCss}.
	 */var $CoreAnimateCssProvider=function $CoreAnimateCssProvider(){this.$get=['$$rAF','$q','$$AnimateRunner',function($$rAF,$q,$$AnimateRunner){return function(element,initialOptions){// all of the animation functions should create
	// a copy of the options data, however, if a
	// parent service has already created a copy then
	// we should stick to using that
	var options=initialOptions||{};if(!options.$$prepared){options=copy(options);}// there is no point in applying the styles since
	// there is no animation that goes on at all in
	// this version of $animateCss.
	if(options.cleanupStyles){options.from=options.to=null;}if(options.from){element.css(options.from);options.from=null;}var closed,runner=new $$AnimateRunner();return{start:run,end:run};function run(){$$rAF(function(){applyAnimationContents();if(!closed){runner.complete();}closed=true;});return runner;}function applyAnimationContents(){if(options.addClass){element.addClass(options.addClass);options.addClass=null;}if(options.removeClass){element.removeClass(options.removeClass);options.removeClass=null;}if(options.to){element.css(options.to);options.to=null;}}};}];};/* global stripHash: true *//**
	 * ! This is a private undocumented service !
	 *
	 * @name $browser
	 * @requires $log
	 * @description
	 * This object has two goals:
	 *
	 * - hide all the global state in the browser caused by the window object
	 * - abstract away all the browser specific features and inconsistencies
	 *
	 * For tests we provide {@link ngMock.$browser mock implementation} of the `$browser`
	 * service, which can be used for convenient testing of the application without the interaction with
	 * the real browser apis.
	 *//**
	 * @param {object} window The global window object.
	 * @param {object} document jQuery wrapped document.
	 * @param {object} $log window.console or an object with the same interface.
	 * @param {object} $sniffer $sniffer service
	 */function Browser(window,document,$log,$sniffer){var self=this,location=window.location,history=window.history,setTimeout=window.setTimeout,clearTimeout=window.clearTimeout,pendingDeferIds={};self.isMock=false;var outstandingRequestCount=0;var outstandingRequestCallbacks=[];// TODO(vojta): remove this temporary api
	self.$$completeOutstandingRequest=completeOutstandingRequest;self.$$incOutstandingRequestCount=function(){outstandingRequestCount++;};/**
	   * Executes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`
	   * counter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.
	   */function completeOutstandingRequest(fn){try{fn.apply(null,sliceArgs(arguments,1));}finally{outstandingRequestCount--;if(outstandingRequestCount===0){while(outstandingRequestCallbacks.length){try{outstandingRequestCallbacks.pop()();}catch(e){$log.error(e);}}}}}function getHash(url){var index=url.indexOf('#');return index===-1?'':url.substr(index);}/**
	   * @private
	   * Note: this method is used only by scenario runner
	   * TODO(vojta): prefix this method with $$ ?
	   * @param {function()} callback Function that will be called when no outstanding request
	   */self.notifyWhenNoOutstandingRequests=function(callback){if(outstandingRequestCount===0){callback();}else{outstandingRequestCallbacks.push(callback);}};//////////////////////////////////////////////////////////////
	// URL API
	//////////////////////////////////////////////////////////////
	var cachedState,lastHistoryState,lastBrowserUrl=location.href,baseElement=document.find('base'),pendingLocation=null,getCurrentState=!$sniffer.history?noop:function getCurrentState(){try{return history.state;}catch(e){// MSIE can reportedly throw when there is no state (UNCONFIRMED).
	}};cacheState();/**
	   * @name $browser#url
	   *
	   * @description
	   * GETTER:
	   * Without any argument, this method just returns current value of location.href.
	   *
	   * SETTER:
	   * With at least one argument, this method sets url to new value.
	   * If html5 history api supported, pushState/replaceState is used, otherwise
	   * location.href/location.replace is used.
	   * Returns its own instance to allow chaining
	   *
	   * NOTE: this api is intended for use only by the $location service. Please use the
	   * {@link ng.$location $location service} to change url.
	   *
	   * @param {string} url New url (when used as setter)
	   * @param {boolean=} replace Should new url replace current history record?
	   * @param {object=} state object to use with pushState/replaceState
	   */self.url=function(url,replace,state){// In modern browsers `history.state` is `null` by default; treating it separately
	// from `undefined` would cause `$browser.url('/foo')` to change `history.state`
	// to undefined via `pushState`. Instead, let's change `undefined` to `null` here.
	if(isUndefined(state)){state=null;}// Android Browser BFCache causes location, history reference to become stale.
	if(location!==window.location)location=window.location;if(history!==window.history)history=window.history;// setter
	if(url){var sameState=lastHistoryState===state;// Don't change anything if previous and current URLs and states match. This also prevents
	// IE<10 from getting into redirect loop when in LocationHashbangInHtml5Url mode.
	// See https://github.com/angular/angular.js/commit/ffb2701
	if(lastBrowserUrl===url&&(!$sniffer.history||sameState)){return self;}var sameBase=lastBrowserUrl&&stripHash(lastBrowserUrl)===stripHash(url);lastBrowserUrl=url;lastHistoryState=state;// Don't use history API if only the hash changed
	// due to a bug in IE10/IE11 which leads
	// to not firing a `hashchange` nor `popstate` event
	// in some cases (see #9143).
	if($sniffer.history&&(!sameBase||!sameState)){history[replace?'replaceState':'pushState'](state,'',url);cacheState();}else{if(!sameBase){pendingLocation=url;}if(replace){location.replace(url);}else if(!sameBase){location.href=url;}else{location.hash=getHash(url);}if(location.href!==url){pendingLocation=url;}}if(pendingLocation){pendingLocation=url;}return self;// getter
	}else{// - pendingLocation is needed as browsers don't allow to read out
	//   the new location.href if a reload happened or if there is a bug like in iOS 9 (see
	//   https://openradar.appspot.com/22186109).
	// - the replacement is a workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=407172
	return pendingLocation||location.href.replace(/%27/g,'\'');}};/**
	   * @name $browser#state
	   *
	   * @description
	   * This method is a getter.
	   *
	   * Return history.state or null if history.state is undefined.
	   *
	   * @returns {object} state
	   */self.state=function(){return cachedState;};var urlChangeListeners=[],urlChangeInit=false;function cacheStateAndFireUrlChange(){pendingLocation=null;fireStateOrUrlChange();}// This variable should be used *only* inside the cacheState function.
	var lastCachedState=null;function cacheState(){// This should be the only place in $browser where `history.state` is read.
	cachedState=getCurrentState();cachedState=isUndefined(cachedState)?null:cachedState;// Prevent callbacks fo fire twice if both hashchange & popstate were fired.
	if(equals(cachedState,lastCachedState)){cachedState=lastCachedState;}lastCachedState=cachedState;lastHistoryState=cachedState;}function fireStateOrUrlChange(){var prevLastHistoryState=lastHistoryState;cacheState();if(lastBrowserUrl===self.url()&&prevLastHistoryState===cachedState){return;}lastBrowserUrl=self.url();lastHistoryState=cachedState;forEach(urlChangeListeners,function(listener){listener(self.url(),cachedState);});}/**
	   * @name $browser#onUrlChange
	   *
	   * @description
	   * Register callback function that will be called, when url changes.
	   *
	   * It's only called when the url is changed from outside of angular:
	   * - user types different url into address bar
	   * - user clicks on history (forward/back) button
	   * - user clicks on a link
	   *
	   * It's not called when url is changed by $browser.url() method
	   *
	   * The listener gets called with new url as parameter.
	   *
	   * NOTE: this api is intended for use only by the $location service. Please use the
	   * {@link ng.$location $location service} to monitor url changes in angular apps.
	   *
	   * @param {function(string)} listener Listener function to be called when url changes.
	   * @return {function(string)} Returns the registered listener fn - handy if the fn is anonymous.
	   */self.onUrlChange=function(callback){// TODO(vojta): refactor to use node's syntax for events
	if(!urlChangeInit){// We listen on both (hashchange/popstate) when available, as some browsers don't
	// fire popstate when user changes the address bar and don't fire hashchange when url
	// changed by push/replaceState
	// html5 history api - popstate event
	if($sniffer.history)jqLite(window).on('popstate',cacheStateAndFireUrlChange);// hashchange event
	jqLite(window).on('hashchange',cacheStateAndFireUrlChange);urlChangeInit=true;}urlChangeListeners.push(callback);return callback;};/**
	   * @private
	   * Remove popstate and hashchange handler from window.
	   *
	   * NOTE: this api is intended for use only by $rootScope.
	   */self.$$applicationDestroyed=function(){jqLite(window).off('hashchange popstate',cacheStateAndFireUrlChange);};/**
	   * Checks whether the url has changed outside of Angular.
	   * Needs to be exported to be able to check for changes that have been done in sync,
	   * as hashchange/popstate events fire in async.
	   */self.$$checkUrlChange=fireStateOrUrlChange;//////////////////////////////////////////////////////////////
	// Misc API
	//////////////////////////////////////////////////////////////
	/**
	   * @name $browser#baseHref
	   *
	   * @description
	   * Returns current <base href>
	   * (always relative - without domain)
	   *
	   * @returns {string} The current base href
	   */self.baseHref=function(){var href=baseElement.attr('href');return href?href.replace(/^(https?:)?\/\/[^/]*/,''):'';};/**
	   * @name $browser#defer
	   * @param {function()} fn A function, who's execution should be deferred.
	   * @param {number=} [delay=0] of milliseconds to defer the function execution.
	   * @returns {*} DeferId that can be used to cancel the task via `$browser.defer.cancel()`.
	   *
	   * @description
	   * Executes a fn asynchronously via `setTimeout(fn, delay)`.
	   *
	   * Unlike when calling `setTimeout` directly, in test this function is mocked and instead of using
	   * `setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed
	   * via `$browser.defer.flush()`.
	   *
	   */self.defer=function(fn,delay){var timeoutId;outstandingRequestCount++;timeoutId=setTimeout(function(){delete pendingDeferIds[timeoutId];completeOutstandingRequest(fn);},delay||0);pendingDeferIds[timeoutId]=true;return timeoutId;};/**
	   * @name $browser#defer.cancel
	   *
	   * @description
	   * Cancels a deferred task identified with `deferId`.
	   *
	   * @param {*} deferId Token returned by the `$browser.defer` function.
	   * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
	   *                    canceled.
	   */self.defer.cancel=function(deferId){if(pendingDeferIds[deferId]){delete pendingDeferIds[deferId];clearTimeout(deferId);completeOutstandingRequest(noop);return true;}return false;};}/** @this */function $BrowserProvider(){this.$get=['$window','$log','$sniffer','$document',function($window,$log,$sniffer,$document){return new Browser($window,$document,$log,$sniffer);}];}/**
	 * @ngdoc service
	 * @name $cacheFactory
	 * @this
	 *
	 * @description
	 * Factory that constructs {@link $cacheFactory.Cache Cache} objects and gives access to
	 * them.
	 *
	 * ```js
	 *
	 *  var cache = $cacheFactory('cacheId');
	 *  expect($cacheFactory.get('cacheId')).toBe(cache);
	 *  expect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();
	 *
	 *  cache.put("key", "value");
	 *  cache.put("another key", "another value");
	 *
	 *  // We've specified no options on creation
	 *  expect(cache.info()).toEqual({id: 'cacheId', size: 2});
	 *
	 * ```
	 *
	 *
	 * @param {string} cacheId Name or id of the newly created cache.
	 * @param {object=} options Options object that specifies the cache behavior. Properties:
	 *
	 *   - `{number=}` `capacity` — turns the cache into LRU cache.
	 *
	 * @returns {object} Newly created cache object with the following set of methods:
	 *
	 * - `{object}` `info()` — Returns id, size, and options of cache.
	 * - `{{*}}` `put({string} key, {*} value)` — Puts a new key-value pair into the cache and returns
	 *   it.
	 * - `{{*}}` `get({string} key)` — Returns cached value for `key` or undefined for cache miss.
	 * - `{void}` `remove({string} key)` — Removes a key-value pair from the cache.
	 * - `{void}` `removeAll()` — Removes all cached values.
	 * - `{void}` `destroy()` — Removes references to this cache from $cacheFactory.
	 *
	 * @example
	   <example module="cacheExampleApp" name="cache-factory">
	     <file name="index.html">
	       <div ng-controller="CacheController">
	         <input ng-model="newCacheKey" placeholder="Key">
	         <input ng-model="newCacheValue" placeholder="Value">
	         <button ng-click="put(newCacheKey, newCacheValue)">Cache</button>
	
	         <p ng-if="keys.length">Cached Values</p>
	         <div ng-repeat="key in keys">
	           <span ng-bind="key"></span>
	           <span>: </span>
	           <b ng-bind="cache.get(key)"></b>
	         </div>
	
	         <p>Cache Info</p>
	         <div ng-repeat="(key, value) in cache.info()">
	           <span ng-bind="key"></span>
	           <span>: </span>
	           <b ng-bind="value"></b>
	         </div>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('cacheExampleApp', []).
	         controller('CacheController', ['$scope', '$cacheFactory', function($scope, $cacheFactory) {
	           $scope.keys = [];
	           $scope.cache = $cacheFactory('cacheId');
	           $scope.put = function(key, value) {
	             if (angular.isUndefined($scope.cache.get(key))) {
	               $scope.keys.push(key);
	             }
	             $scope.cache.put(key, angular.isUndefined(value) ? null : value);
	           };
	         }]);
	     </file>
	     <file name="style.css">
	       p {
	         margin: 10px 0 3px;
	       }
	     </file>
	   </example>
	 */function $CacheFactoryProvider(){this.$get=function(){var caches={};function cacheFactory(cacheId,options){if(cacheId in caches){throw minErr('$cacheFactory')('iid','CacheId \'{0}\' is already taken!',cacheId);}var size=0,stats=extend({},options,{id:cacheId}),data=createMap(),capacity=options&&options.capacity||Number.MAX_VALUE,lruHash=createMap(),freshEnd=null,staleEnd=null;/**
	       * @ngdoc type
	       * @name $cacheFactory.Cache
	       *
	       * @description
	       * A cache object used to store and retrieve data, primarily used by
	       * {@link $http $http} and the {@link ng.directive:script script} directive to cache
	       * templates and other data.
	       *
	       * ```js
	       *  angular.module('superCache')
	       *    .factory('superCache', ['$cacheFactory', function($cacheFactory) {
	       *      return $cacheFactory('super-cache');
	       *    }]);
	       * ```
	       *
	       * Example test:
	       *
	       * ```js
	       *  it('should behave like a cache', inject(function(superCache) {
	       *    superCache.put('key', 'value');
	       *    superCache.put('another key', 'another value');
	       *
	       *    expect(superCache.info()).toEqual({
	       *      id: 'super-cache',
	       *      size: 2
	       *    });
	       *
	       *    superCache.remove('another key');
	       *    expect(superCache.get('another key')).toBeUndefined();
	       *
	       *    superCache.removeAll();
	       *    expect(superCache.info()).toEqual({
	       *      id: 'super-cache',
	       *      size: 0
	       *    });
	       *  }));
	       * ```
	       */return caches[cacheId]={/**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#put
	         * @kind function
	         *
	         * @description
	         * Inserts a named entry into the {@link $cacheFactory.Cache Cache} object to be
	         * retrieved later, and incrementing the size of the cache if the key was not already
	         * present in the cache. If behaving like an LRU cache, it will also remove stale
	         * entries from the set.
	         *
	         * It will not insert undefined values into the cache.
	         *
	         * @param {string} key the key under which the cached data is stored.
	         * @param {*} value the value to store alongside the key. If it is undefined, the key
	         *    will not be stored.
	         * @returns {*} the value stored.
	         */put:function put(key,value){if(isUndefined(value))return;if(capacity<Number.MAX_VALUE){var lruEntry=lruHash[key]||(lruHash[key]={key:key});refresh(lruEntry);}if(!(key in data))size++;data[key]=value;if(size>capacity){this.remove(staleEnd.key);}return value;},/**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#get
	         * @kind function
	         *
	         * @description
	         * Retrieves named data stored in the {@link $cacheFactory.Cache Cache} object.
	         *
	         * @param {string} key the key of the data to be retrieved
	         * @returns {*} the value stored.
	         */get:function get(key){if(capacity<Number.MAX_VALUE){var lruEntry=lruHash[key];if(!lruEntry)return;refresh(lruEntry);}return data[key];},/**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#remove
	         * @kind function
	         *
	         * @description
	         * Removes an entry from the {@link $cacheFactory.Cache Cache} object.
	         *
	         * @param {string} key the key of the entry to be removed
	         */remove:function remove(key){if(capacity<Number.MAX_VALUE){var lruEntry=lruHash[key];if(!lruEntry)return;if(lruEntry===freshEnd)freshEnd=lruEntry.p;if(lruEntry===staleEnd)staleEnd=lruEntry.n;link(lruEntry.n,lruEntry.p);delete lruHash[key];}if(!(key in data))return;delete data[key];size--;},/**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#removeAll
	         * @kind function
	         *
	         * @description
	         * Clears the cache object of any entries.
	         */removeAll:function removeAll(){data=createMap();size=0;lruHash=createMap();freshEnd=staleEnd=null;},/**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#destroy
	         * @kind function
	         *
	         * @description
	         * Destroys the {@link $cacheFactory.Cache Cache} object entirely,
	         * removing it from the {@link $cacheFactory $cacheFactory} set.
	         */destroy:function destroy(){data=null;stats=null;lruHash=null;delete caches[cacheId];},/**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#info
	         * @kind function
	         *
	         * @description
	         * Retrieve information regarding a particular {@link $cacheFactory.Cache Cache}.
	         *
	         * @returns {object} an object with the following properties:
	         *   <ul>
	         *     <li>**id**: the id of the cache instance</li>
	         *     <li>**size**: the number of entries kept in the cache instance</li>
	         *     <li>**...**: any additional properties from the options object when creating the
	         *       cache.</li>
	         *   </ul>
	         */info:function info(){return extend({},stats,{size:size});}};/**
	       * makes the `entry` the freshEnd of the LRU linked list
	       */function refresh(entry){if(entry!==freshEnd){if(!staleEnd){staleEnd=entry;}else if(staleEnd===entry){staleEnd=entry.n;}link(entry.n,entry.p);link(entry,freshEnd);freshEnd=entry;freshEnd.n=null;}}/**
	       * bidirectionally links two entries of the LRU linked list
	       */function link(nextEntry,prevEntry){if(nextEntry!==prevEntry){if(nextEntry)nextEntry.p=prevEntry;//p stands for previous, 'prev' didn't minify
	if(prevEntry)prevEntry.n=nextEntry;//n stands for next, 'next' didn't minify
	}}}/**
	   * @ngdoc method
	   * @name $cacheFactory#info
	   *
	   * @description
	   * Get information about all the caches that have been created
	   *
	   * @returns {Object} - key-value map of `cacheId` to the result of calling `cache#info`
	   */cacheFactory.info=function(){var info={};forEach(caches,function(cache,cacheId){info[cacheId]=cache.info();});return info;};/**
	   * @ngdoc method
	   * @name $cacheFactory#get
	   *
	   * @description
	   * Get access to a cache object by the `cacheId` used when it was created.
	   *
	   * @param {string} cacheId Name or id of a cache to access.
	   * @returns {object} Cache object identified by the cacheId or undefined if no such cache.
	   */cacheFactory.get=function(cacheId){return caches[cacheId];};return cacheFactory;};}/**
	 * @ngdoc service
	 * @name $templateCache
	 * @this
	 *
	 * @description
	 * The first time a template is used, it is loaded in the template cache for quick retrieval. You
	 * can load templates directly into the cache in a `script` tag, or by consuming the
	 * `$templateCache` service directly.
	 *
	 * Adding via the `script` tag:
	 *
	 * ```html
	 *   <script type="text/ng-template" id="templateId.html">
	 *     <p>This is the content of the template</p>
	 *   </script>
	 * ```
	 *
	 * **Note:** the `script` tag containing the template does not need to be included in the `head` of
	 * the document, but it must be a descendent of the {@link ng.$rootElement $rootElement} (IE,
	 * element with ng-app attribute), otherwise the template will be ignored.
	 *
	 * Adding via the `$templateCache` service:
	 *
	 * ```js
	 * var myApp = angular.module('myApp', []);
	 * myApp.run(function($templateCache) {
	 *   $templateCache.put('templateId.html', 'This is the content of the template');
	 * });
	 * ```
	 *
	 * To retrieve the template later, simply use it in your component:
	 * ```js
	 * myApp.component('myComponent', {
	 *    templateUrl: 'templateId.html'
	 * });
	 * ```
	 *
	 * or get it via the `$templateCache` service:
	 * ```js
	 * $templateCache.get('templateId.html')
	 * ```
	 *
	 * See {@link ng.$cacheFactory $cacheFactory}.
	 *
	 */function $TemplateCacheProvider(){this.$get=['$cacheFactory',function($cacheFactory){return $cacheFactory('templates');}];}/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables like document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *//* ! VARIABLE/FUNCTION NAMING CONVENTIONS THAT APPLY TO THIS FILE!
	 *
	 * DOM-related variables:
	 *
	 * - "node" - DOM Node
	 * - "element" - DOM Element or Node
	 * - "$node" or "$element" - jqLite-wrapped node or element
	 *
	 *
	 * Compiler related stuff:
	 *
	 * - "linkFn" - linking fn of a single directive
	 * - "nodeLinkFn" - function that aggregates all linking fns for a particular node
	 * - "childLinkFn" -  function that aggregates all linking fns for child nodes of a particular node
	 * - "compositeLinkFn" - function that aggregates all linking fns for a compilation root (nodeList)
	 *//**
	 * @ngdoc service
	 * @name $compile
	 * @kind function
	 *
	 * @description
	 * Compiles an HTML string or DOM into a template and produces a template function, which
	 * can then be used to link {@link ng.$rootScope.Scope `scope`} and the template together.
	 *
	 * The compilation is a process of walking the DOM tree and matching DOM elements to
	 * {@link ng.$compileProvider#directive directives}.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** This document is an in-depth reference of all directive options.
	 * For a gentle introduction to directives with examples of common use cases,
	 * see the {@link guide/directive directive guide}.
	 * </div>
	 *
	 * ## Comprehensive Directive API
	 *
	 * There are many different options for a directive.
	 *
	 * The difference resides in the return value of the factory function.
	 * You can either return a {@link $compile#directive-definition-object Directive Definition Object (see below)}
	 * that defines the directive properties, or just the `postLink` function (all other properties will have
	 * the default values).
	 *
	 * <div class="alert alert-success">
	 * **Best Practice:** It's recommended to use the "directive definition object" form.
	 * </div>
	 *
	 * Here's an example directive declared with a Directive Definition Object:
	 *
	 * ```js
	 *   var myModule = angular.module(...);
	 *
	 *   myModule.directive('directiveName', function factory(injectables) {
	 *     var directiveDefinitionObject = {
	 *       {@link $compile#-priority- priority}: 0,
	 *       {@link $compile#-template- template}: '<div></div>', // or // function(tElement, tAttrs) { ... },
	 *       // or
	 *       // {@link $compile#-templateurl- templateUrl}: 'directive.html', // or // function(tElement, tAttrs) { ... },
	 *       {@link $compile#-transclude- transclude}: false,
	 *       {@link $compile#-restrict- restrict}: 'A',
	 *       {@link $compile#-templatenamespace- templateNamespace}: 'html',
	 *       {@link $compile#-scope- scope}: false,
	 *       {@link $compile#-controller- controller}: function($scope, $element, $attrs, $transclude, otherInjectables) { ... },
	 *       {@link $compile#-controlleras- controllerAs}: 'stringIdentifier',
	 *       {@link $compile#-bindtocontroller- bindToController}: false,
	 *       {@link $compile#-require- require}: 'siblingDirectiveName', // or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],
	 *       {@link $compile#-multielement- multiElement}: false,
	 *       {@link $compile#-compile- compile}: function compile(tElement, tAttrs, transclude) {
	 *         return {
	 *            {@link $compile#pre-linking-function pre}: function preLink(scope, iElement, iAttrs, controller) { ... },
	 *            {@link $compile#post-linking-function post}: function postLink(scope, iElement, iAttrs, controller) { ... }
	 *         }
	 *         // or
	 *         // return function postLink( ... ) { ... }
	 *       },
	 *       // or
	 *       // {@link $compile#-link- link}: {
	 *       //  {@link $compile#pre-linking-function pre}: function preLink(scope, iElement, iAttrs, controller) { ... },
	 *       //  {@link $compile#post-linking-function post}: function postLink(scope, iElement, iAttrs, controller) { ... }
	 *       // }
	 *       // or
	 *       // {@link $compile#-link- link}: function postLink( ... ) { ... }
	 *     };
	 *     return directiveDefinitionObject;
	 *   });
	 * ```
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Any unspecified options will use the default value. You can see the default values below.
	 * </div>
	 *
	 * Therefore the above can be simplified as:
	 *
	 * ```js
	 *   var myModule = angular.module(...);
	 *
	 *   myModule.directive('directiveName', function factory(injectables) {
	 *     var directiveDefinitionObject = {
	 *       link: function postLink(scope, iElement, iAttrs) { ... }
	 *     };
	 *     return directiveDefinitionObject;
	 *     // or
	 *     // return function postLink(scope, iElement, iAttrs) { ... }
	 *   });
	 * ```
	 *
	 * ### Life-cycle hooks
	 * Directive controllers can provide the following methods that are called by Angular at points in the life-cycle of the
	 * directive:
	 * * `$onInit()` - Called on each controller after all the controllers on an element have been constructed and
	 *   had their bindings initialized (and before the pre &amp; post linking functions for the directives on
	 *   this element). This is a good place to put initialization code for your controller.
	 * * `$onChanges(changesObj)` - Called whenever one-way (`<`) or interpolation (`@`) bindings are updated. The
	 *   `changesObj` is a hash whose keys are the names of the bound properties that have changed, and the values are an
	 *   object of the form `{ currentValue, previousValue, isFirstChange() }`. Use this hook to trigger updates within a
	 *   component such as cloning the bound value to prevent accidental mutation of the outer value. Note that this will
	 *   also be called when your bindings are initialized.
	 * * `$doCheck()` - Called on each turn of the digest cycle. Provides an opportunity to detect and act on
	 *   changes. Any actions that you wish to take in response to the changes that you detect must be
	 *   invoked from this hook; implementing this has no effect on when `$onChanges` is called. For example, this hook
	 *   could be useful if you wish to perform a deep equality check, or to check a Date object, changes to which would not
	 *   be detected by Angular's change detector and thus not trigger `$onChanges`. This hook is invoked with no arguments;
	 *   if detecting changes, you must store the previous value(s) for comparison to the current values.
	 * * `$onDestroy()` - Called on a controller when its containing scope is destroyed. Use this hook for releasing
	 *   external resources, watches and event handlers. Note that components have their `$onDestroy()` hooks called in
	 *   the same order as the `$scope.$broadcast` events are triggered, which is top down. This means that parent
	 *   components will have their `$onDestroy()` hook called before child components.
	 * * `$postLink()` - Called after this controller's element and its children have been linked. Similar to the post-link
	 *   function this hook can be used to set up DOM event handlers and do direct DOM manipulation.
	 *   Note that child elements that contain `templateUrl` directives will not have been compiled and linked since
	 *   they are waiting for their template to load asynchronously and their own compilation and linking has been
	 *   suspended until that occurs.
	 *
	 * #### Comparison with Angular 2 life-cycle hooks
	 * Angular 2 also uses life-cycle hooks for its components. While the Angular 1 life-cycle hooks are similar there are
	 * some differences that you should be aware of, especially when it comes to moving your code from Angular 1 to Angular 2:
	 *
	 * * Angular 1 hooks are prefixed with `$`, such as `$onInit`. Angular 2 hooks are prefixed with `ng`, such as `ngOnInit`.
	 * * Angular 1 hooks can be defined on the controller prototype or added to the controller inside its constructor.
	 *   In Angular 2 you can only define hooks on the prototype of the Component class.
	 * * Due to the differences in change-detection, you may get many more calls to `$doCheck` in Angular 1 than you would to
	 *   `ngDoCheck` in Angular 2
	 * * Changes to the model inside `$doCheck` will trigger new turns of the digest loop, which will cause the changes to be
	 *   propagated throughout the application.
	 *   Angular 2 does not allow the `ngDoCheck` hook to trigger a change outside of the component. It will either throw an
	 *   error or do nothing depending upon the state of `enableProdMode()`.
	 *
	 * #### Life-cycle hook examples
	 *
	 * This example shows how you can check for mutations to a Date object even though the identity of the object
	 * has not changed.
	 *
	 * <example name="doCheckDateExample" module="do-check-module">
	 *   <file name="app.js">
	 *     angular.module('do-check-module', [])
	 *       .component('app', {
	 *         template:
	 *           'Month: <input ng-model="$ctrl.month" ng-change="$ctrl.updateDate()">' +
	 *           'Date: {{ $ctrl.date }}' +
	 *           '<test date="$ctrl.date"></test>',
	 *         controller: function() {
	 *           this.date = new Date();
	 *           this.month = this.date.getMonth();
	 *           this.updateDate = function() {
	 *             this.date.setMonth(this.month);
	 *           };
	 *         }
	 *       })
	 *       .component('test', {
	 *         bindings: { date: '<' },
	 *         template:
	 *           '<pre>{{ $ctrl.log | json }}</pre>',
	 *         controller: function() {
	 *           var previousValue;
	 *           this.log = [];
	 *           this.$doCheck = function() {
	 *             var currentValue = this.date && this.date.valueOf();
	 *             if (previousValue !== currentValue) {
	 *               this.log.push('doCheck: date mutated: ' + this.date);
	 *               previousValue = currentValue;
	 *             }
	 *           };
	 *         }
	 *       });
	 *   </file>
	 *   <file name="index.html">
	 *     <app></app>
	 *   </file>
	 * </example>
	 *
	 * This example show how you might use `$doCheck` to trigger changes in your component's inputs even if the
	 * actual identity of the component doesn't change. (Be aware that cloning and deep equality checks on large
	 * arrays or objects can have a negative impact on your application performance)
	 *
	 * <example name="doCheckArrayExample" module="do-check-module">
	 *   <file name="index.html">
	 *     <div ng-init="items = []">
	 *       <button ng-click="items.push(items.length)">Add Item</button>
	 *       <button ng-click="items = []">Reset Items</button>
	 *       <pre>{{ items }}</pre>
	 *       <test items="items"></test>
	 *     </div>
	 *   </file>
	 *   <file name="app.js">
	 *      angular.module('do-check-module', [])
	 *        .component('test', {
	 *          bindings: { items: '<' },
	 *          template:
	 *            '<pre>{{ $ctrl.log | json }}</pre>',
	 *          controller: function() {
	 *            this.log = [];
	 *
	 *            this.$doCheck = function() {
	 *              if (this.items_ref !== this.items) {
	 *                this.log.push('doCheck: items changed');
	 *                this.items_ref = this.items;
	 *              }
	 *              if (!angular.equals(this.items_clone, this.items)) {
	 *                this.log.push('doCheck: items mutated');
	 *                this.items_clone = angular.copy(this.items);
	 *              }
	 *            };
	 *          }
	 *        });
	 *   </file>
	 * </example>
	 *
	 *
	 * ### Directive Definition Object
	 *
	 * The directive definition object provides instructions to the {@link ng.$compile
	 * compiler}. The attributes are:
	 *
	 * #### `multiElement`
	 * When this property is set to true (default is `false`), the HTML compiler will collect DOM nodes between
	 * nodes with the attributes `directive-name-start` and `directive-name-end`, and group them
	 * together as the directive elements. It is recommended that this feature be used on directives
	 * which are not strictly behavioral (such as {@link ngClick}), and which
	 * do not manipulate or replace child nodes (such as {@link ngInclude}).
	 *
	 * #### `priority`
	 * When there are multiple directives defined on a single DOM element, sometimes it
	 * is necessary to specify the order in which the directives are applied. The `priority` is used
	 * to sort the directives before their `compile` functions get called. Priority is defined as a
	 * number. Directives with greater numerical `priority` are compiled first. Pre-link functions
	 * are also run in priority order, but post-link functions are run in reverse order. The order
	 * of directives with the same priority is undefined. The default priority is `0`.
	 *
	 * #### `terminal`
	 * If set to true then the current `priority` will be the last set of directives
	 * which will execute (any directives at the current priority will still execute
	 * as the order of execution on same `priority` is undefined). Note that expressions
	 * and other directives used in the directive's template will also be excluded from execution.
	 *
	 * #### `scope`
	 * The scope property can be `false`, `true`, or an object:
	 *
	 * * **`false` (default):** No scope will be created for the directive. The directive will use its
	 * parent's scope.
	 *
	 * * **`true`:** A new child scope that prototypically inherits from its parent will be created for
	 * the directive's element. If multiple directives on the same element request a new scope,
	 * only one new scope is created.
	 *
	 * * **`{...}` (an object hash):** A new "isolate" scope is created for the directive's template.
	 * The 'isolate' scope differs from normal scope in that it does not prototypically
	 * inherit from its parent scope. This is useful when creating reusable components, which should not
	 * accidentally read or modify data in the parent scope. Note that an isolate scope
	 * directive without a `template` or `templateUrl` will not apply the isolate scope
	 * to its children elements.
	 *
	 * The 'isolate' scope object hash defines a set of local scope properties derived from attributes on the
	 * directive's element. These local properties are useful for aliasing values for templates. The keys in
	 * the object hash map to the name of the property on the isolate scope; the values define how the property
	 * is bound to the parent scope, via matching attributes on the directive's element:
	 *
	 * * `@` or `@attr` - bind a local scope property to the value of DOM attribute. The result is
	 *   always a string since DOM attributes are strings. If no `attr` name is specified then the
	 *   attribute name is assumed to be the same as the local name. Given `<my-component
	 *   my-attr="hello {{name}}">` and the isolate scope definition `scope: { localName:'@myAttr' }`,
	 *   the directive's scope property `localName` will reflect the interpolated value of `hello
	 *   {{name}}`. As the `name` attribute changes so will the `localName` property on the directive's
	 *   scope. The `name` is read from the parent scope (not the directive's scope).
	 *
	 * * `=` or `=attr` - set up a bidirectional binding between a local scope property and an expression
	 *   passed via the attribute `attr`. The expression is evaluated in the context of the parent scope.
	 *   If no `attr` name is specified then the attribute name is assumed to be the same as the local
	 *   name. Given `<my-component my-attr="parentModel">` and the isolate scope definition `scope: {
	 *   localModel: '=myAttr' }`, the property `localModel` on the directive's scope will reflect the
	 *   value of `parentModel` on the parent scope. Changes to `parentModel` will be reflected in
	 *   `localModel` and vice versa. Optional attributes should be marked as such with a question mark:
	 *   `=?` or `=?attr`. If the binding expression is non-assignable, or if the attribute isn't
	 *   optional and doesn't exist, an exception ({@link error/$compile/nonassign `$compile:nonassign`})
	 *   will be thrown upon discovering changes to the local value, since it will be impossible to sync
	 *   them back to the parent scope. By default, the {@link ng.$rootScope.Scope#$watch `$watch`}
	 *   method is used for tracking changes, and the equality check is based on object identity.
	 *   However, if an object literal or an array literal is passed as the binding expression, the
	 *   equality check is done by value (using the {@link angular.equals} function). It's also possible
	 *   to watch the evaluated value shallowly with {@link ng.$rootScope.Scope#$watchCollection
	 *   `$watchCollection`}: use `=*` or `=*attr` (`=*?` or `=*?attr` if the attribute is optional).
	 *
	  * * `<` or `<attr` - set up a one-way (one-directional) binding between a local scope property and an
	 *   expression passed via the attribute `attr`. The expression is evaluated in the context of the
	 *   parent scope. If no `attr` name is specified then the attribute name is assumed to be the same as the
	 *   local name. You can also make the binding optional by adding `?`: `<?` or `<?attr`.
	 *
	 *   For example, given `<my-component my-attr="parentModel">` and directive definition of
	 *   `scope: { localModel:'<myAttr' }`, then the isolated scope property `localModel` will reflect the
	 *   value of `parentModel` on the parent scope. Any changes to `parentModel` will be reflected
	 *   in `localModel`, but changes in `localModel` will not reflect in `parentModel`. There are however
	 *   two caveats:
	 *     1. one-way binding does not copy the value from the parent to the isolate scope, it simply
	 *     sets the same value. That means if your bound value is an object, changes to its properties
	 *     in the isolated scope will be reflected in the parent scope (because both reference the same object).
	 *     2. one-way binding watches changes to the **identity** of the parent value. That means the
	 *     {@link ng.$rootScope.Scope#$watch `$watch`} on the parent value only fires if the reference
	 *     to the value has changed. In most cases, this should not be of concern, but can be important
	 *     to know if you one-way bind to an object, and then replace that object in the isolated scope.
	 *     If you now change a property of the object in your parent scope, the change will not be
	 *     propagated to the isolated scope, because the identity of the object on the parent scope
	 *     has not changed. Instead you must assign a new object.
	 *
	 *   One-way binding is useful if you do not plan to propagate changes to your isolated scope bindings
	 *   back to the parent. However, it does not make this completely impossible.
	 *
	 * * `&` or `&attr` - provides a way to execute an expression in the context of the parent scope. If
	 *   no `attr` name is specified then the attribute name is assumed to be the same as the local name.
	 *   Given `<my-component my-attr="count = count + value">` and the isolate scope definition `scope: {
	 *   localFn:'&myAttr' }`, the isolate scope property `localFn` will point to a function wrapper for
	 *   the `count = count + value` expression. Often it's desirable to pass data from the isolated scope
	 *   via an expression to the parent scope. This can be done by passing a map of local variable names
	 *   and values into the expression wrapper fn. For example, if the expression is `increment(amount)`
	 *   then we can specify the amount value by calling the `localFn` as `localFn({amount: 22})`.
	 *
	 * In general it's possible to apply more than one directive to one element, but there might be limitations
	 * depending on the type of scope required by the directives. The following points will help explain these limitations.
	 * For simplicity only two directives are taken into account, but it is also applicable for several directives:
	 *
	 * * **no scope** + **no scope** => Two directives which don't require their own scope will use their parent's scope
	 * * **child scope** + **no scope** =>  Both directives will share one single child scope
	 * * **child scope** + **child scope** =>  Both directives will share one single child scope
	 * * **isolated scope** + **no scope** =>  The isolated directive will use it's own created isolated scope. The other directive will use
	 * its parent's scope
	 * * **isolated scope** + **child scope** =>  **Won't work!** Only one scope can be related to one element. Therefore these directives cannot
	 * be applied to the same element.
	 * * **isolated scope** + **isolated scope**  =>  **Won't work!** Only one scope can be related to one element. Therefore these directives
	 * cannot be applied to the same element.
	 *
	 *
	 * #### `bindToController`
	 * This property is used to bind scope properties directly to the controller. It can be either
	 * `true` or an object hash with the same format as the `scope` property.
	 *
	 * When an isolate scope is used for a directive (see above), `bindToController: true` will
	 * allow a component to have its properties bound to the controller, rather than to scope.
	 *
	 * After the controller is instantiated, the initial values of the isolate scope bindings will be bound to the controller
	 * properties. You can access these bindings once they have been initialized by providing a controller method called
	 * `$onInit`, which is called after all the controllers on an element have been constructed and had their bindings
	 * initialized.
	 *
	 * <div class="alert alert-warning">
	 * **Deprecation warning:** if `$compileProcvider.preAssignBindingsEnabled(true)` was called, bindings for non-ES6 class
	 * controllers are bound to `this` before the controller constructor is called but this use is now deprecated. Please
	 * place initialization code that relies upon bindings inside a `$onInit` method on the controller, instead.
	 * </div>
	 *
	 * It is also possible to set `bindToController` to an object hash with the same format as the `scope` property.
	 * This will set up the scope bindings to the controller directly. Note that `scope` can still be used
	 * to define which kind of scope is created. By default, no scope is created. Use `scope: {}` to create an isolate
	 * scope (useful for component directives).
	 *
	 * If both `bindToController` and `scope` are defined and have object hashes, `bindToController` overrides `scope`.
	 *
	 *
	 * #### `controller`
	 * Controller constructor function. The controller is instantiated before the
	 * pre-linking phase and can be accessed by other directives (see
	 * `require` attribute). This allows the directives to communicate with each other and augment
	 * each other's behavior. The controller is injectable (and supports bracket notation) with the following locals:
	 *
	 * * `$scope` - Current scope associated with the element
	 * * `$element` - Current element
	 * * `$attrs` - Current attributes object for the element
	 * * `$transclude` - A transclude linking function pre-bound to the correct transclusion scope:
	 *   `function([scope], cloneLinkingFn, futureParentElement, slotName)`:
	 *    * `scope`: (optional) override the scope.
	 *    * `cloneLinkingFn`: (optional) argument to create clones of the original transcluded content.
	 *    * `futureParentElement` (optional):
	 *        * defines the parent to which the `cloneLinkingFn` will add the cloned elements.
	 *        * default: `$element.parent()` resp. `$element` for `transclude:'element'` resp. `transclude:true`.
	 *        * only needed for transcludes that are allowed to contain non html elements (e.g. SVG elements)
	 *          and when the `cloneLinkingFn` is passed,
	 *          as those elements need to created and cloned in a special way when they are defined outside their
	 *          usual containers (e.g. like `<svg>`).
	 *        * See also the `directive.templateNamespace` property.
	 *    * `slotName`: (optional) the name of the slot to transclude. If falsy (e.g. `null`, `undefined` or `''`)
	 *      then the default transclusion is provided.
	 *    The `$transclude` function also has a method on it, `$transclude.isSlotFilled(slotName)`, which returns
	 *    `true` if the specified slot contains content (i.e. one or more DOM nodes).
	 *
	 * #### `require`
	 * Require another directive and inject its controller as the fourth argument to the linking function. The
	 * `require` property can be a string, an array or an object:
	 * * a **string** containing the name of the directive to pass to the linking function
	 * * an **array** containing the names of directives to pass to the linking function. The argument passed to the
	 * linking function will be an array of controllers in the same order as the names in the `require` property
	 * * an **object** whose property values are the names of the directives to pass to the linking function. The argument
	 * passed to the linking function will also be an object with matching keys, whose values will hold the corresponding
	 * controllers.
	 *
	 * If the `require` property is an object and `bindToController` is truthy, then the required controllers are
	 * bound to the controller using the keys of the `require` property. This binding occurs after all the controllers
	 * have been constructed but before `$onInit` is called.
	 * If the name of the required controller is the same as the local name (the key), the name can be
	 * omitted. For example, `{parentDir: '^^'}` is equivalent to `{parentDir: '^^parentDir'}`.
	 * See the {@link $compileProvider#component} helper for an example of how this can be used.
	 * If no such required directive(s) can be found, or if the directive does not have a controller, then an error is
	 * raised (unless no link function is specified and the required controllers are not being bound to the directive
	 * controller, in which case error checking is skipped). The name can be prefixed with:
	 *
	 * * (no prefix) - Locate the required controller on the current element. Throw an error if not found.
	 * * `?` - Attempt to locate the required controller or pass `null` to the `link` fn if not found.
	 * * `^` - Locate the required controller by searching the element and its parents. Throw an error if not found.
	 * * `^^` - Locate the required controller by searching the element's parents. Throw an error if not found.
	 * * `?^` - Attempt to locate the required controller by searching the element and its parents or pass
	 *   `null` to the `link` fn if not found.
	 * * `?^^` - Attempt to locate the required controller by searching the element's parents, or pass
	 *   `null` to the `link` fn if not found.
	 *
	 *
	 * #### `controllerAs`
	 * Identifier name for a reference to the controller in the directive's scope.
	 * This allows the controller to be referenced from the directive template. This is especially
	 * useful when a directive is used as component, i.e. with an `isolate` scope. It's also possible
	 * to use it in a directive without an `isolate` / `new` scope, but you need to be aware that the
	 * `controllerAs` reference might overwrite a property that already exists on the parent scope.
	 *
	 *
	 * #### `restrict`
	 * String of subset of `EACM` which restricts the directive to a specific directive
	 * declaration style. If omitted, the defaults (elements and attributes) are used.
	 *
	 * * `E` - Element name (default): `<my-directive></my-directive>`
	 * * `A` - Attribute (default): `<div my-directive="exp"></div>`
	 * * `C` - Class: `<div class="my-directive: exp;"></div>`
	 * * `M` - Comment: `<!-- directive: my-directive exp -->`
	 *
	 *
	 * #### `templateNamespace`
	 * String representing the document type used by the markup in the template.
	 * AngularJS needs this information as those elements need to be created and cloned
	 * in a special way when they are defined outside their usual containers like `<svg>` and `<math>`.
	 *
	 * * `html` - All root nodes in the template are HTML. Root nodes may also be
	 *   top-level elements such as `<svg>` or `<math>`.
	 * * `svg` - The root nodes in the template are SVG elements (excluding `<math>`).
	 * * `math` - The root nodes in the template are MathML elements (excluding `<svg>`).
	 *
	 * If no `templateNamespace` is specified, then the namespace is considered to be `html`.
	 *
	 * #### `template`
	 * HTML markup that may:
	 * * Replace the contents of the directive's element (default).
	 * * Replace the directive's element itself (if `replace` is true - DEPRECATED).
	 * * Wrap the contents of the directive's element (if `transclude` is true).
	 *
	 * Value may be:
	 *
	 * * A string. For example `<div red-on-hover>{{delete_str}}</div>`.
	 * * A function which takes two arguments `tElement` and `tAttrs` (described in the `compile`
	 *   function api below) and returns a string value.
	 *
	 *
	 * #### `templateUrl`
	 * This is similar to `template` but the template is loaded from the specified URL, asynchronously.
	 *
	 * Because template loading is asynchronous the compiler will suspend compilation of directives on that element
	 * for later when the template has been resolved.  In the meantime it will continue to compile and link
	 * sibling and parent elements as though this element had not contained any directives.
	 *
	 * The compiler does not suspend the entire compilation to wait for templates to be loaded because this
	 * would result in the whole app "stalling" until all templates are loaded asynchronously - even in the
	 * case when only one deeply nested directive has `templateUrl`.
	 *
	 * Template loading is asynchronous even if the template has been preloaded into the {@link $templateCache}
	 *
	 * You can specify `templateUrl` as a string representing the URL or as a function which takes two
	 * arguments `tElement` and `tAttrs` (described in the `compile` function api below) and returns
	 * a string value representing the url.  In either case, the template URL is passed through {@link
	 * $sce#getTrustedResourceUrl $sce.getTrustedResourceUrl}.
	 *
	 *
	 * #### `replace` ([*DEPRECATED*!], will be removed in next major release - i.e. v2.0)
	 * specify what the template should replace. Defaults to `false`.
	 *
	 * * `true` - the template will replace the directive's element.
	 * * `false` - the template will replace the contents of the directive's element.
	 *
	 * The replacement process migrates all of the attributes / classes from the old element to the new
	 * one. See the {@link guide/directive#template-expanding-directive
	 * Directives Guide} for an example.
	 *
	 * There are very few scenarios where element replacement is required for the application function,
	 * the main one being reusable custom components that are used within SVG contexts
	 * (because SVG doesn't work with custom elements in the DOM tree).
	 *
	 * #### `transclude`
	 * Extract the contents of the element where the directive appears and make it available to the directive.
	 * The contents are compiled and provided to the directive as a **transclusion function**. See the
	 * {@link $compile#transclusion Transclusion} section below.
	 *
	 *
	 * #### `compile`
	 *
	 * ```js
	 *   function compile(tElement, tAttrs, transclude) { ... }
	 * ```
	 *
	 * The compile function deals with transforming the template DOM. Since most directives do not do
	 * template transformation, it is not used often. The compile function takes the following arguments:
	 *
	 *   * `tElement` - template element - The element where the directive has been declared. It is
	 *     safe to do template transformation on the element and child elements only.
	 *
	 *   * `tAttrs` - template attributes - Normalized list of attributes declared on this element shared
	 *     between all directive compile functions.
	 *
	 *   * `transclude` -  [*DEPRECATED*!] A transclude linking function: `function(scope, cloneLinkingFn)`
	 *
	 * <div class="alert alert-warning">
	 * **Note:** The template instance and the link instance may be different objects if the template has
	 * been cloned. For this reason it is **not** safe to do anything other than DOM transformations that
	 * apply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration
	 * should be done in a linking function rather than in a compile function.
	 * </div>
	
	 * <div class="alert alert-warning">
	 * **Note:** The compile function cannot handle directives that recursively use themselves in their
	 * own templates or compile functions. Compiling these directives results in an infinite loop and
	 * stack overflow errors.
	 *
	 * This can be avoided by manually using $compile in the postLink function to imperatively compile
	 * a directive's template instead of relying on automatic template compilation via `template` or
	 * `templateUrl` declaration or manual compilation inside the compile function.
	 * </div>
	 *
	 * <div class="alert alert-danger">
	 * **Note:** The `transclude` function that is passed to the compile function is deprecated, as it
	 *   e.g. does not know about the right outer scope. Please use the transclude function that is passed
	 *   to the link function instead.
	 * </div>
	
	 * A compile function can have a return value which can be either a function or an object.
	 *
	 * * returning a (post-link) function - is equivalent to registering the linking function via the
	 *   `link` property of the config object when the compile function is empty.
	 *
	 * * returning an object with function(s) registered via `pre` and `post` properties - allows you to
	 *   control when a linking function should be called during the linking phase. See info about
	 *   pre-linking and post-linking functions below.
	 *
	 *
	 * #### `link`
	 * This property is used only if the `compile` property is not defined.
	 *
	 * ```js
	 *   function link(scope, iElement, iAttrs, controller, transcludeFn) { ... }
	 * ```
	 *
	 * The link function is responsible for registering DOM listeners as well as updating the DOM. It is
	 * executed after the template has been cloned. This is where most of the directive logic will be
	 * put.
	 *
	 *   * `scope` - {@link ng.$rootScope.Scope Scope} - The scope to be used by the
	 *     directive for registering {@link ng.$rootScope.Scope#$watch watches}.
	 *
	 *   * `iElement` - instance element - The element where the directive is to be used. It is safe to
	 *     manipulate the children of the element only in `postLink` function since the children have
	 *     already been linked.
	 *
	 *   * `iAttrs` - instance attributes - Normalized list of attributes declared on this element shared
	 *     between all directive linking functions.
	 *
	 *   * `controller` - the directive's required controller instance(s) - Instances are shared
	 *     among all directives, which allows the directives to use the controllers as a communication
	 *     channel. The exact value depends on the directive's `require` property:
	 *       * no controller(s) required: the directive's own controller, or `undefined` if it doesn't have one
	 *       * `string`: the controller instance
	 *       * `array`: array of controller instances
	 *
	 *     If a required controller cannot be found, and it is optional, the instance is `null`,
	 *     otherwise the {@link error:$compile:ctreq Missing Required Controller} error is thrown.
	 *
	 *     Note that you can also require the directive's own controller - it will be made available like
	 *     any other controller.
	 *
	 *   * `transcludeFn` - A transclude linking function pre-bound to the correct transclusion scope.
	 *     This is the same as the `$transclude` parameter of directive controllers,
	 *     see {@link ng.$compile#-controller- the controller section for details}.
	 *     `function([scope], cloneLinkingFn, futureParentElement)`.
	 *
	 * #### Pre-linking function
	 *
	 * Executed before the child elements are linked. Not safe to do DOM transformation since the
	 * compiler linking function will fail to locate the correct elements for linking.
	 *
	 * #### Post-linking function
	 *
	 * Executed after the child elements are linked.
	 *
	 * Note that child elements that contain `templateUrl` directives will not have been compiled
	 * and linked since they are waiting for their template to load asynchronously and their own
	 * compilation and linking has been suspended until that occurs.
	 *
	 * It is safe to do DOM transformation in the post-linking function on elements that are not waiting
	 * for their async templates to be resolved.
	 *
	 *
	 * ### Transclusion
	 *
	 * Transclusion is the process of extracting a collection of DOM elements from one part of the DOM and
	 * copying them to another part of the DOM, while maintaining their connection to the original AngularJS
	 * scope from where they were taken.
	 *
	 * Transclusion is used (often with {@link ngTransclude}) to insert the
	 * original contents of a directive's element into a specified place in the template of the directive.
	 * The benefit of transclusion, over simply moving the DOM elements manually, is that the transcluded
	 * content has access to the properties on the scope from which it was taken, even if the directive
	 * has isolated scope.
	 * See the {@link guide/directive#creating-a-directive-that-wraps-other-elements Directives Guide}.
	 *
	 * This makes it possible for the widget to have private state for its template, while the transcluded
	 * content has access to its originating scope.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** When testing an element transclude directive you must not place the directive at the root of the
	 * DOM fragment that is being compiled. See {@link guide/unit-testing#testing-transclusion-directives
	 * Testing Transclusion Directives}.
	 * </div>
	 *
	 * There are three kinds of transclusion depending upon whether you want to transclude just the contents of the
	 * directive's element, the entire element or multiple parts of the element contents:
	 *
	 * * `true` - transclude the content (i.e. the child nodes) of the directive's element.
	 * * `'element'` - transclude the whole of the directive's element including any directives on this
	 *   element that defined at a lower priority than this directive. When used, the `template`
	 *   property is ignored.
	 * * **`{...}` (an object hash):** - map elements of the content onto transclusion "slots" in the template.
	 *
	 * **Mult-slot transclusion** is declared by providing an object for the `transclude` property.
	 *
	 * This object is a map where the keys are the name of the slot to fill and the value is an element selector
	 * used to match the HTML to the slot. The element selector should be in normalized form (e.g. `myElement`)
	 * and will match the standard element variants (e.g. `my-element`, `my:element`, `data-my-element`, etc).
	 *
	 * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}
	 *
	 * If the element selector is prefixed with a `?` then that slot is optional.
	 *
	 * For example, the transclude object `{ slotA: '?myCustomElement' }` maps `<my-custom-element>` elements to
	 * the `slotA` slot, which can be accessed via the `$transclude` function or via the {@link ngTransclude} directive.
	 *
	 * Slots that are not marked as optional (`?`) will trigger a compile time error if there are no matching elements
	 * in the transclude content. If you wish to know if an optional slot was filled with content, then you can call
	 * `$transclude.isSlotFilled(slotName)` on the transclude function passed to the directive's link function and
	 * injectable into the directive's controller.
	 *
	 *
	 * #### Transclusion Functions
	 *
	 * When a directive requests transclusion, the compiler extracts its contents and provides a **transclusion
	 * function** to the directive's `link` function and `controller`. This transclusion function is a special
	 * **linking function** that will return the compiled contents linked to a new transclusion scope.
	 *
	 * <div class="alert alert-info">
	 * If you are just using {@link ngTransclude} then you don't need to worry about this function, since
	 * ngTransclude will deal with it for us.
	 * </div>
	 *
	 * If you want to manually control the insertion and removal of the transcluded content in your directive
	 * then you must use this transclude function. When you call a transclude function it returns a a jqLite/JQuery
	 * object that contains the compiled DOM, which is linked to the correct transclusion scope.
	 *
	 * When you call a transclusion function you can pass in a **clone attach function**. This function accepts
	 * two parameters, `function(clone, scope) { ... }`, where the `clone` is a fresh compiled copy of your transcluded
	 * content and the `scope` is the newly created transclusion scope, which the clone will be linked to.
	 *
	 * <div class="alert alert-info">
	 * **Best Practice**: Always provide a `cloneFn` (clone attach function) when you call a transclude function
	 * since you then get a fresh clone of the original DOM and also have access to the new transclusion scope.
	 * </div>
	 *
	 * It is normal practice to attach your transcluded content (`clone`) to the DOM inside your **clone
	 * attach function**:
	 *
	 * ```js
	 * var transcludedContent, transclusionScope;
	 *
	 * $transclude(function(clone, scope) {
	 *   element.append(clone);
	 *   transcludedContent = clone;
	 *   transclusionScope = scope;
	 * });
	 * ```
	 *
	 * Later, if you want to remove the transcluded content from your DOM then you should also destroy the
	 * associated transclusion scope:
	 *
	 * ```js
	 * transcludedContent.remove();
	 * transclusionScope.$destroy();
	 * ```
	 *
	 * <div class="alert alert-info">
	 * **Best Practice**: if you intend to add and remove transcluded content manually in your directive
	 * (by calling the transclude function to get the DOM and calling `element.remove()` to remove it),
	 * then you are also responsible for calling `$destroy` on the transclusion scope.
	 * </div>
	 *
	 * The built-in DOM manipulation directives, such as {@link ngIf}, {@link ngSwitch} and {@link ngRepeat}
	 * automatically destroy their transcluded clones as necessary so you do not need to worry about this if
	 * you are simply using {@link ngTransclude} to inject the transclusion into your directive.
	 *
	 *
	 * #### Transclusion Scopes
	 *
	 * When you call a transclude function it returns a DOM fragment that is pre-bound to a **transclusion
	 * scope**. This scope is special, in that it is a child of the directive's scope (and so gets destroyed
	 * when the directive's scope gets destroyed) but it inherits the properties of the scope from which it
	 * was taken.
	 *
	 * For example consider a directive that uses transclusion and isolated scope. The DOM hierarchy might look
	 * like this:
	 *
	 * ```html
	 * <div ng-app>
	 *   <div isolate>
	 *     <div transclusion>
	 *     </div>
	 *   </div>
	 * </div>
	 * ```
	 *
	 * The `$parent` scope hierarchy will look like this:
	 *
	   ```
	   - $rootScope
	     - isolate
	       - transclusion
	   ```
	 *
	 * but the scopes will inherit prototypically from different scopes to their `$parent`.
	 *
	   ```
	   - $rootScope
	     - transclusion
	   - isolate
	   ```
	 *
	 *
	 * ### Attributes
	 *
	 * The {@link ng.$compile.directive.Attributes Attributes} object - passed as a parameter in the
	 * `link()` or `compile()` functions. It has a variety of uses.
	 *
	 * * *Accessing normalized attribute names:* Directives like 'ngBind' can be expressed in many ways:
	 *   'ng:bind', `data-ng-bind`, or 'x-ng-bind'. The attributes object allows for normalized access
	 *   to the attributes.
	 *
	 * * *Directive inter-communication:* All directives share the same instance of the attributes
	 *   object which allows the directives to use the attributes object as inter directive
	 *   communication.
	 *
	 * * *Supports interpolation:* Interpolation attributes are assigned to the attribute object
	 *   allowing other directives to read the interpolated value.
	 *
	 * * *Observing interpolated attributes:* Use `$observe` to observe the value changes of attributes
	 *   that contain interpolation (e.g. `src="{{bar}}"`). Not only is this very efficient but it's also
	 *   the only way to easily get the actual value because during the linking phase the interpolation
	 *   hasn't been evaluated yet and so the value is at this time set to `undefined`.
	 *
	 * ```js
	 * function linkingFn(scope, elm, attrs, ctrl) {
	 *   // get the attribute value
	 *   console.log(attrs.ngModel);
	 *
	 *   // change the attribute
	 *   attrs.$set('ngModel', 'new value');
	 *
	 *   // observe changes to interpolated attribute
	 *   attrs.$observe('ngModel', function(value) {
	 *     console.log('ngModel has changed value to ' + value);
	 *   });
	 * }
	 * ```
	 *
	 * ## Example
	 *
	 * <div class="alert alert-warning">
	 * **Note**: Typically directives are registered with `module.directive`. The example below is
	 * to illustrate how `$compile` works.
	 * </div>
	 *
	 <example module="compileExample" name="compile">
	   <file name="index.html">
	    <script>
	      angular.module('compileExample', [], function($compileProvider) {
	        // configure new 'compile' directive by passing a directive
	        // factory function. The factory function injects the '$compile'
	        $compileProvider.directive('compile', function($compile) {
	          // directive factory creates a link function
	          return function(scope, element, attrs) {
	            scope.$watch(
	              function(scope) {
	                 // watch the 'compile' expression for changes
	                return scope.$eval(attrs.compile);
	              },
	              function(value) {
	                // when the 'compile' expression changes
	                // assign it into the current DOM
	                element.html(value);
	
	                // compile the new DOM and link it to the current
	                // scope.
	                // NOTE: we only compile .childNodes so that
	                // we don't get into infinite loop compiling ourselves
	                $compile(element.contents())(scope);
	              }
	            );
	          };
	        });
	      })
	      .controller('GreeterController', ['$scope', function($scope) {
	        $scope.name = 'Angular';
	        $scope.html = 'Hello {{name}}';
	      }]);
	    </script>
	    <div ng-controller="GreeterController">
	      <input ng-model="name"> <br/>
	      <textarea ng-model="html"></textarea> <br/>
	      <div compile="html"></div>
	    </div>
	   </file>
	   <file name="protractor.js" type="protractor">
	     it('should auto compile', function() {
	       var textarea = $('textarea');
	       var output = $('div[compile]');
	       // The initial state reads 'Hello Angular'.
	       expect(output.getText()).toBe('Hello Angular');
	       textarea.clear();
	       textarea.sendKeys('{{name}}!');
	       expect(output.getText()).toBe('Angular!');
	     });
	   </file>
	 </example>
	
	 *
	 *
	 * @param {string|DOMElement} element Element or HTML string to compile into a template function.
	 * @param {function(angular.Scope, cloneAttachFn=)} transclude function available to directives - DEPRECATED.
	 *
	 * <div class="alert alert-danger">
	 * **Note:** Passing a `transclude` function to the $compile function is deprecated, as it
	 *   e.g. will not use the right outer scope. Please pass the transclude function as a
	 *   `parentBoundTranscludeFn` to the link function instead.
	 * </div>
	 *
	 * @param {number} maxPriority only apply directives lower than given priority (Only effects the
	 *                 root element(s), not their children)
	 * @returns {function(scope, cloneAttachFn=, options=)} a link function which is used to bind template
	 * (a DOM element/tree) to a scope. Where:
	 *
	 *  * `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.
	 *  * `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the
	 *  `template` and call the `cloneAttachFn` function allowing the caller to attach the
	 *  cloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is
	 *  called as: <br/> `cloneAttachFn(clonedElement, scope)` where:
	 *
	 *      * `clonedElement` - is a clone of the original `element` passed into the compiler.
	 *      * `scope` - is the current scope with which the linking function is working with.
	 *
	 *  * `options` - An optional object hash with linking options. If `options` is provided, then the following
	 *  keys may be used to control linking behavior:
	 *
	 *      * `parentBoundTranscludeFn` - the transclude function made available to
	 *        directives; if given, it will be passed through to the link functions of
	 *        directives found in `element` during compilation.
	 *      * `transcludeControllers` - an object hash with keys that map controller names
	 *        to a hash with the key `instance`, which maps to the controller instance;
	 *        if given, it will make the controllers available to directives on the compileNode:
	 *        ```
	 *        {
	 *          parent: {
	 *            instance: parentControllerInstance
	 *          }
	 *        }
	 *        ```
	 *      * `futureParentElement` - defines the parent to which the `cloneAttachFn` will add
	 *        the cloned elements; only needed for transcludes that are allowed to contain non html
	 *        elements (e.g. SVG elements). See also the directive.controller property.
	 *
	 * Calling the linking function returns the element of the template. It is either the original
	 * element passed in, or the clone of the element if the `cloneAttachFn` is provided.
	 *
	 * After linking the view is not updated until after a call to $digest which typically is done by
	 * Angular automatically.
	 *
	 * If you need access to the bound view, there are two ways to do it:
	 *
	 * - If you are not asking the linking function to clone the template, create the DOM element(s)
	 *   before you send them to the compiler and keep this reference around.
	 *   ```js
	 *     var element = $compile('<p>{{total}}</p>')(scope);
	 *   ```
	 *
	 * - if on the other hand, you need the element to be cloned, the view reference from the original
	 *   example would not point to the clone, but rather to the original template that was cloned. In
	 *   this case, you can access the clone via the cloneAttachFn:
	 *   ```js
	 *     var templateElement = angular.element('<p>{{total}}</p>'),
	 *         scope = ....;
	 *
	 *     var clonedElement = $compile(templateElement)(scope, function(clonedElement, scope) {
	 *       //attach the clone to DOM document at the right place
	 *     });
	 *
	 *     //now we have reference to the cloned DOM via `clonedElement`
	 *   ```
	 *
	 *
	 * For information on how the compiler works, see the
	 * {@link guide/compiler Angular HTML Compiler} section of the Developer Guide.
	 *
	 * @knownIssue
	 *
	 * ### Double Compilation
	 *
	   Double compilation occurs when an already compiled part of the DOM gets
	   compiled again. This is an undesired effect and can lead to misbehaving directives, performance issues,
	   and memory leaks. Refer to the Compiler Guide {@link guide/compiler#double-compilation-and-how-to-avoid-it
	   section on double compilation} for an in-depth explanation and ways to avoid it.
	 *
	 */var $compileMinErr=minErr('$compile');function UNINITIALIZED_VALUE(){}var _UNINITIALIZED_VALUE=new UNINITIALIZED_VALUE();/**
	 * @ngdoc provider
	 * @name $compileProvider
	 *
	 * @description
	 */$CompileProvider.$inject=['$provide','$$sanitizeUriProvider'];/** @this */function $CompileProvider($provide,$$sanitizeUriProvider){var hasDirectives={},Suffix='Directive',COMMENT_DIRECTIVE_REGEXP=/^\s*directive:\s*([\w-]+)\s+(.*)$/,CLASS_DIRECTIVE_REGEXP=/(([\w-]+)(?::([^;]+))?;?)/,ALL_OR_NOTHING_ATTRS=makeMap('ngSrc,ngSrcset,src,srcset'),REQUIRE_PREFIX_REGEXP=/^(?:(\^\^?)?(\?)?(\^\^?)?)?/;// Ref: http://developers.whatwg.org/webappapis.html#event-handler-idl-attributes
	// The assumption is that future DOM event attribute names will begin with
	// 'on' and be composed of only English letters.
	var EVENT_HANDLER_ATTR_REGEXP=/^(on[a-z]+|formaction)$/;var bindingCache=createMap();function parseIsolateBindings(scope,directiveName,isController){var LOCAL_REGEXP=/^\s*([@&<]|=(\*?))(\??)\s*([\w$]*)\s*$/;var bindings=createMap();forEach(scope,function(definition,scopeName){if(definition in bindingCache){bindings[scopeName]=bindingCache[definition];return;}var match=definition.match(LOCAL_REGEXP);if(!match){throw $compileMinErr('iscp','Invalid {3} for directive \'{0}\'.'+' Definition: {... {1}: \'{2}\' ...}',directiveName,scopeName,definition,isController?'controller bindings definition':'isolate scope definition');}bindings[scopeName]={mode:match[1][0],collection:match[2]==='*',optional:match[3]==='?',attrName:match[4]||scopeName};if(match[4]){bindingCache[definition]=bindings[scopeName];}});return bindings;}function parseDirectiveBindings(directive,directiveName){var bindings={isolateScope:null,bindToController:null};if(isObject(directive.scope)){if(directive.bindToController===true){bindings.bindToController=parseIsolateBindings(directive.scope,directiveName,true);bindings.isolateScope={};}else{bindings.isolateScope=parseIsolateBindings(directive.scope,directiveName,false);}}if(isObject(directive.bindToController)){bindings.bindToController=parseIsolateBindings(directive.bindToController,directiveName,true);}if(bindings.bindToController&&!directive.controller){// There is no controller
	throw $compileMinErr('noctrl','Cannot bind to controller without directive \'{0}\'s controller.',directiveName);}return bindings;}function assertValidDirectiveName(name){var letter=name.charAt(0);if(!letter||letter!==lowercase(letter)){throw $compileMinErr('baddir','Directive/Component name \'{0}\' is invalid. The first character must be a lowercase letter',name);}if(name!==name.trim()){throw $compileMinErr('baddir','Directive/Component name \'{0}\' is invalid. The name should not contain leading or trailing whitespaces',name);}}function getDirectiveRequire(directive){var require=directive.require||directive.controller&&directive.name;if(!isArray(require)&&isObject(require)){forEach(require,function(value,key){var match=value.match(REQUIRE_PREFIX_REGEXP);var name=value.substring(match[0].length);if(!name)require[key]=match[0]+key;});}return require;}function getDirectiveRestrict(restrict,name){if(restrict&&!(isString(restrict)&&/[EACM]/.test(restrict))){throw $compileMinErr('badrestrict','Restrict property \'{0}\' of directive \'{1}\' is invalid',restrict,name);}return restrict||'EA';}/**
	   * @ngdoc method
	   * @name $compileProvider#directive
	   * @kind function
	   *
	   * @description
	   * Register a new directive with the compiler.
	   *
	   * @param {string|Object} name Name of the directive in camel-case (i.e. <code>ngBind</code> which
	   *    will match as <code>ng-bind</code>), or an object map of directives where the keys are the
	   *    names and the values are the factories.
	   * @param {Function|Array} directiveFactory An injectable directive factory function. See the
	   *    {@link guide/directive directive guide} and the {@link $compile compile API} for more info.
	   * @returns {ng.$compileProvider} Self for chaining.
	   */this.directive=function registerDirective(name,directiveFactory){assertArg(name,'name');assertNotHasOwnProperty(name,'directive');if(isString(name)){assertValidDirectiveName(name);assertArg(directiveFactory,'directiveFactory');if(!hasDirectives.hasOwnProperty(name)){hasDirectives[name]=[];$provide.factory(name+Suffix,['$injector','$exceptionHandler',function($injector,$exceptionHandler){var directives=[];forEach(hasDirectives[name],function(directiveFactory,index){try{var directive=$injector.invoke(directiveFactory);if(isFunction(directive)){directive={compile:valueFn(directive)};}else if(!directive.compile&&directive.link){directive.compile=valueFn(directive.link);}directive.priority=directive.priority||0;directive.index=index;directive.name=directive.name||name;directive.require=getDirectiveRequire(directive);directive.restrict=getDirectiveRestrict(directive.restrict,name);directive.$$moduleName=directiveFactory.$$moduleName;directives.push(directive);}catch(e){$exceptionHandler(e);}});return directives;}]);}hasDirectives[name].push(directiveFactory);}else{forEach(name,reverseParams(registerDirective));}return this;};/**
	   * @ngdoc method
	   * @name $compileProvider#component
	   * @module ng
	   * @param {string} name Name of the component in camelCase (i.e. `myComp` which will match `<my-comp>`)
	   * @param {Object} options Component definition object (a simplified
	   *    {@link ng.$compile#directive-definition-object directive definition object}),
	   *    with the following properties (all optional):
	   *
	   *    - `controller` – `{(string|function()=}` – controller constructor function that should be
	   *      associated with newly created scope or the name of a {@link ng.$compile#-controller-
	   *      registered controller} if passed as a string. An empty `noop` function by default.
	   *    - `controllerAs` – `{string=}` – identifier name for to reference the controller in the component's scope.
	   *      If present, the controller will be published to scope under the `controllerAs` name.
	   *      If not present, this will default to be `$ctrl`.
	   *    - `template` – `{string=|function()=}` – html template as a string or a function that
	   *      returns an html template as a string which should be used as the contents of this component.
	   *      Empty string by default.
	   *
	   *      If `template` is a function, then it is {@link auto.$injector#invoke injected} with
	   *      the following locals:
	   *
	   *      - `$element` - Current element
	   *      - `$attrs` - Current attributes object for the element
	   *
	   *    - `templateUrl` – `{string=|function()=}` – path or function that returns a path to an html
	   *      template that should be used  as the contents of this component.
	   *
	   *      If `templateUrl` is a function, then it is {@link auto.$injector#invoke injected} with
	   *      the following locals:
	   *
	   *      - `$element` - Current element
	   *      - `$attrs` - Current attributes object for the element
	   *
	   *    - `bindings` – `{object=}` – defines bindings between DOM attributes and component properties.
	   *      Component properties are always bound to the component controller and not to the scope.
	   *      See {@link ng.$compile#-bindtocontroller- `bindToController`}.
	   *    - `transclude` – `{boolean=}` – whether {@link $compile#transclusion content transclusion} is enabled.
	   *      Disabled by default.
	   *    - `require` - `{Object<string, string>=}` - requires the controllers of other directives and binds them to
	   *      this component's controller. The object keys specify the property names under which the required
	   *      controllers (object values) will be bound. See {@link ng.$compile#-require- `require`}.
	   *    - `$...` – additional properties to attach to the directive factory function and the controller
	   *      constructor function. (This is used by the component router to annotate)
	   *
	   * @returns {ng.$compileProvider} the compile provider itself, for chaining of function calls.
	   * @description
	   * Register a **component definition** with the compiler. This is a shorthand for registering a special
	   * type of directive, which represents a self-contained UI component in your application. Such components
	   * are always isolated (i.e. `scope: {}`) and are always restricted to elements (i.e. `restrict: 'E'`).
	   *
	   * Component definitions are very simple and do not require as much configuration as defining general
	   * directives. Component definitions usually consist only of a template and a controller backing it.
	   *
	   * In order to make the definition easier, components enforce best practices like use of `controllerAs`,
	   * `bindToController`. They always have **isolate scope** and are restricted to elements.
	   *
	   * Here are a few examples of how you would usually define components:
	   *
	   * ```js
	   *   var myMod = angular.module(...);
	   *   myMod.component('myComp', {
	   *     template: '<div>My name is {{$ctrl.name}}</div>',
	   *     controller: function() {
	   *       this.name = 'shahar';
	   *     }
	   *   });
	   *
	   *   myMod.component('myComp', {
	   *     template: '<div>My name is {{$ctrl.name}}</div>',
	   *     bindings: {name: '@'}
	   *   });
	   *
	   *   myMod.component('myComp', {
	   *     templateUrl: 'views/my-comp.html',
	   *     controller: 'MyCtrl',
	   *     controllerAs: 'ctrl',
	   *     bindings: {name: '@'}
	   *   });
	   *
	   * ```
	   * For more examples, and an in-depth guide, see the {@link guide/component component guide}.
	   *
	   * <br />
	   * See also {@link ng.$compileProvider#directive $compileProvider.directive()}.
	   */this.component=function registerComponent(name,options){var controller=options.controller||function(){};function factory($injector){function makeInjectable(fn){if(isFunction(fn)||isArray(fn)){return(/** @this */function(tElement,tAttrs){return $injector.invoke(fn,this,{$element:tElement,$attrs:tAttrs});});}else{return fn;}}var template=!options.template&&!options.templateUrl?'':options.template;var ddo={controller:controller,controllerAs:identifierForController(options.controller)||options.controllerAs||'$ctrl',template:makeInjectable(template),templateUrl:makeInjectable(options.templateUrl),transclude:options.transclude,scope:{},bindToController:options.bindings||{},restrict:'E',require:options.require};// Copy annotations (starting with $) over to the DDO
	forEach(options,function(val,key){if(key.charAt(0)==='$')ddo[key]=val;});return ddo;}// TODO(pete) remove the following `forEach` before we release 1.6.0
	// The component-router@0.2.0 looks for the annotations on the controller constructor
	// Nothing in Angular looks for annotations on the factory function but we can't remove
	// it from 1.5.x yet.
	// Copy any annotation properties (starting with $) over to the factory and controller constructor functions
	// These could be used by libraries such as the new component router
	forEach(options,function(val,key){if(key.charAt(0)==='$'){factory[key]=val;// Don't try to copy over annotations to named controller
	if(isFunction(controller))controller[key]=val;}});factory.$inject=['$injector'];return this.directive(name,factory);};/**
	   * @ngdoc method
	   * @name $compileProvider#aHrefSanitizationWhitelist
	   * @kind function
	   *
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during a[href] sanitization.
	   *
	   * The sanitization is a security measure aimed at preventing XSS attacks via html links.
	   *
	   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */this.aHrefSanitizationWhitelist=function(regexp){if(isDefined(regexp)){$$sanitizeUriProvider.aHrefSanitizationWhitelist(regexp);return this;}else{return $$sanitizeUriProvider.aHrefSanitizationWhitelist();}};/**
	   * @ngdoc method
	   * @name $compileProvider#imgSrcSanitizationWhitelist
	   * @kind function
	   *
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during img[src] sanitization.
	   *
	   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
	   *
	   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */this.imgSrcSanitizationWhitelist=function(regexp){if(isDefined(regexp)){$$sanitizeUriProvider.imgSrcSanitizationWhitelist(regexp);return this;}else{return $$sanitizeUriProvider.imgSrcSanitizationWhitelist();}};/**
	   * @ngdoc method
	   * @name  $compileProvider#debugInfoEnabled
	   *
	   * @param {boolean=} enabled update the debugInfoEnabled state if provided, otherwise just return the
	   * current debugInfoEnabled state
	   * @returns {*} current value if used as getter or itself (chaining) if used as setter
	   *
	   * @kind function
	   *
	   * @description
	   * Call this method to enable/disable various debug runtime information in the compiler such as adding
	   * binding information and a reference to the current scope on to DOM elements.
	   * If enabled, the compiler will add the following to DOM elements that have been bound to the scope
	   * * `ng-binding` CSS class
	   * * `$binding` data property containing an array of the binding expressions
	   *
	   * You may want to disable this in production for a significant performance boost. See
	   * {@link guide/production#disabling-debug-data Disabling Debug Data} for more.
	   *
	   * The default value is true.
	   */var debugInfoEnabled=true;this.debugInfoEnabled=function(enabled){if(isDefined(enabled)){debugInfoEnabled=enabled;return this;}return debugInfoEnabled;};/**
	   * @ngdoc method
	   * @name  $compileProvider#preAssignBindingsEnabled
	   *
	   * @param {boolean=} enabled update the preAssignBindingsEnabled state if provided, otherwise just return the
	   * current preAssignBindingsEnabled state
	   * @returns {*} current value if used as getter or itself (chaining) if used as setter
	   *
	   * @kind function
	   *
	   * @description
	   * Call this method to enable/disable whether directive controllers are assigned bindings before
	   * calling the controller's constructor.
	   * If enabled (true), the compiler assigns the value of each of the bindings to the
	   * properties of the controller object before the constructor of this object is called.
	   *
	   * If disabled (false), the compiler calls the constructor first before assigning bindings.
	   *
	   * The default value is false.
	   *
	   * @deprecated
	   * sinceVersion="1.6.0"
	   * removeVersion="1.7.0"
	   *
	   * This method and the option to assign the bindings before calling the controller's constructor
	   * will be removed in v1.7.0.
	   */var preAssignBindingsEnabled=false;this.preAssignBindingsEnabled=function(enabled){if(isDefined(enabled)){preAssignBindingsEnabled=enabled;return this;}return preAssignBindingsEnabled;};var TTL=10;/**
	   * @ngdoc method
	   * @name $compileProvider#onChangesTtl
	   * @description
	   *
	   * Sets the number of times `$onChanges` hooks can trigger new changes before giving up and
	   * assuming that the model is unstable.
	   *
	   * The current default is 10 iterations.
	   *
	   * In complex applications it's possible that dependencies between `$onChanges` hooks and bindings will result
	   * in several iterations of calls to these hooks. However if an application needs more than the default 10
	   * iterations to stabilize then you should investigate what is causing the model to continuously change during
	   * the `$onChanges` hook execution.
	   *
	   * Increasing the TTL could have performance implications, so you should not change it without proper justification.
	   *
	   * @param {number} limit The number of `$onChanges` hook iterations.
	   * @returns {number|object} the current limit (or `this` if called as a setter for chaining)
	   */this.onChangesTtl=function(value){if(arguments.length){TTL=value;return this;}return TTL;};var commentDirectivesEnabledConfig=true;/**
	   * @ngdoc method
	   * @name $compileProvider#commentDirectivesEnabled
	   * @description
	   *
	   * It indicates to the compiler
	   * whether or not directives on comments should be compiled.
	   * Defaults to `true`.
	   *
	   * Calling this function with false disables the compilation of directives
	   * on comments for the whole application.
	   * This results in a compilation performance gain,
	   * as the compiler doesn't have to check comments when looking for directives.
	   * This should however only be used if you are sure that no comment directives are used in
	   * the application (including any 3rd party directives).
	   *
	   * @param {boolean} enabled `false` if the compiler may ignore directives on comments
	   * @returns {boolean|object} the current value (or `this` if called as a setter for chaining)
	   */this.commentDirectivesEnabled=function(value){if(arguments.length){commentDirectivesEnabledConfig=value;return this;}return commentDirectivesEnabledConfig;};var cssClassDirectivesEnabledConfig=true;/**
	   * @ngdoc method
	   * @name $compileProvider#cssClassDirectivesEnabled
	   * @description
	   *
	   * It indicates to the compiler
	   * whether or not directives on element classes should be compiled.
	   * Defaults to `true`.
	   *
	   * Calling this function with false disables the compilation of directives
	   * on element classes for the whole application.
	   * This results in a compilation performance gain,
	   * as the compiler doesn't have to check element classes when looking for directives.
	   * This should however only be used if you are sure that no class directives are used in
	   * the application (including any 3rd party directives).
	   *
	   * @param {boolean} enabled `false` if the compiler may ignore directives on element classes
	   * @returns {boolean|object} the current value (or `this` if called as a setter for chaining)
	   */this.cssClassDirectivesEnabled=function(value){if(arguments.length){cssClassDirectivesEnabledConfig=value;return this;}return cssClassDirectivesEnabledConfig;};this.$get=['$injector','$interpolate','$exceptionHandler','$templateRequest','$parse','$controller','$rootScope','$sce','$animate','$$sanitizeUri',function($injector,$interpolate,$exceptionHandler,$templateRequest,$parse,$controller,$rootScope,$sce,$animate,$$sanitizeUri){var SIMPLE_ATTR_NAME=/^\w/;var specialAttrHolder=window.document.createElement('div');var commentDirectivesEnabled=commentDirectivesEnabledConfig;var cssClassDirectivesEnabled=cssClassDirectivesEnabledConfig;var onChangesTtl=TTL;// The onChanges hooks should all be run together in a single digest
	// When changes occur, the call to trigger their hooks will be added to this queue
	var onChangesQueue;// This function is called in a $$postDigest to trigger all the onChanges hooks in a single digest
	function flushOnChangesQueue(){try{if(! --onChangesTtl){// We have hit the TTL limit so reset everything
	onChangesQueue=undefined;throw $compileMinErr('infchng','{0} $onChanges() iterations reached. Aborting!\n',TTL);}// We must run this hook in an apply since the $$postDigest runs outside apply
	$rootScope.$apply(function(){var errors=[];for(var i=0,ii=onChangesQueue.length;i<ii;++i){try{onChangesQueue[i]();}catch(e){errors.push(e);}}// Reset the queue to trigger a new schedule next time there is a change
	onChangesQueue=undefined;if(errors.length){throw errors;}});}finally{onChangesTtl++;}}function Attributes(element,attributesToCopy){if(attributesToCopy){var keys=Object.keys(attributesToCopy);var i,l,key;for(i=0,l=keys.length;i<l;i++){key=keys[i];this[key]=attributesToCopy[key];}}else{this.$attr={};}this.$$element=element;}Attributes.prototype={/**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$normalize
	       * @kind function
	       *
	       * @description
	       * Converts an attribute name (e.g. dash/colon/underscore-delimited string, optionally prefixed with `x-` or
	       * `data-`) to its normalized, camelCase form.
	       *
	       * Also there is special case for Moz prefix starting with upper case letter.
	       *
	       * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}
	       *
	       * @param {string} name Name to normalize
	       */$normalize:directiveNormalize,/**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$addClass
	       * @kind function
	       *
	       * @description
	       * Adds the CSS class value specified by the classVal parameter to the element. If animations
	       * are enabled then an animation will be triggered for the class addition.
	       *
	       * @param {string} classVal The className value that will be added to the element
	       */$addClass:function $addClass(classVal){if(classVal&&classVal.length>0){$animate.addClass(this.$$element,classVal);}},/**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$removeClass
	       * @kind function
	       *
	       * @description
	       * Removes the CSS class value specified by the classVal parameter from the element. If
	       * animations are enabled then an animation will be triggered for the class removal.
	       *
	       * @param {string} classVal The className value that will be removed from the element
	       */$removeClass:function $removeClass(classVal){if(classVal&&classVal.length>0){$animate.removeClass(this.$$element,classVal);}},/**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$updateClass
	       * @kind function
	       *
	       * @description
	       * Adds and removes the appropriate CSS class values to the element based on the difference
	       * between the new and old CSS class values (specified as newClasses and oldClasses).
	       *
	       * @param {string} newClasses The current CSS className value
	       * @param {string} oldClasses The former CSS className value
	       */$updateClass:function $updateClass(newClasses,oldClasses){var toAdd=tokenDifference(newClasses,oldClasses);if(toAdd&&toAdd.length){$animate.addClass(this.$$element,toAdd);}var toRemove=tokenDifference(oldClasses,newClasses);if(toRemove&&toRemove.length){$animate.removeClass(this.$$element,toRemove);}},/**
	       * Set a normalized attribute on the element in a way such that all directives
	       * can share the attribute. This function properly handles boolean attributes.
	       * @param {string} key Normalized key. (ie ngAttribute)
	       * @param {string|boolean} value The value to set. If `null` attribute will be deleted.
	       * @param {boolean=} writeAttr If false, does not write the value to DOM element attribute.
	       *     Defaults to true.
	       * @param {string=} attrName Optional none normalized name. Defaults to key.
	       */$set:function $set(key,value,writeAttr,attrName){// TODO: decide whether or not to throw an error if "class"
	//is set through this function since it may cause $updateClass to
	//become unstable.
	var node=this.$$element[0],booleanKey=getBooleanAttrName(node,key),aliasedKey=getAliasedAttrName(key),observer=key,nodeName;if(booleanKey){this.$$element.prop(key,value);attrName=booleanKey;}else if(aliasedKey){this[aliasedKey]=value;observer=aliasedKey;}this[key]=value;// translate normalized key to actual key
	if(attrName){this.$attr[key]=attrName;}else{attrName=this.$attr[key];if(!attrName){this.$attr[key]=attrName=snake_case(key,'-');}}nodeName=nodeName_(this.$$element);if(nodeName==='a'&&(key==='href'||key==='xlinkHref')||nodeName==='img'&&key==='src'){// sanitize a[href] and img[src] values
	this[key]=value=$$sanitizeUri(value,key==='src');}else if(nodeName==='img'&&key==='srcset'&&isDefined(value)){// sanitize img[srcset] values
	var result='';// first check if there are spaces because it's not the same pattern
	var trimmedSrcset=trim(value);//                (   999x   ,|   999w   ,|   ,|,   )
	var srcPattern=/(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/;var pattern=/\s/.test(trimmedSrcset)?srcPattern:/(,)/;// split srcset into tuple of uri and descriptor except for the last item
	var rawUris=trimmedSrcset.split(pattern);// for each tuples
	var nbrUrisWith2parts=Math.floor(rawUris.length/2);for(var i=0;i<nbrUrisWith2parts;i++){var innerIdx=i*2;// sanitize the uri
	result+=$$sanitizeUri(trim(rawUris[innerIdx]),true);// add the descriptor
	result+=' '+trim(rawUris[innerIdx+1]);}// split the last item into uri and descriptor
	var lastTuple=trim(rawUris[i*2]).split(/\s/);// sanitize the last uri
	result+=$$sanitizeUri(trim(lastTuple[0]),true);// and add the last descriptor if any
	if(lastTuple.length===2){result+=' '+trim(lastTuple[1]);}this[key]=value=result;}if(writeAttr!==false){if(value===null||isUndefined(value)){this.$$element.removeAttr(attrName);}else{if(SIMPLE_ATTR_NAME.test(attrName)){this.$$element.attr(attrName,value);}else{setSpecialAttr(this.$$element[0],attrName,value);}}}// fire observers
	var $$observers=this.$$observers;if($$observers){forEach($$observers[observer],function(fn){try{fn(value);}catch(e){$exceptionHandler(e);}});}},/**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$observe
	       * @kind function
	       *
	       * @description
	       * Observes an interpolated attribute.
	       *
	       * The observer function will be invoked once during the next `$digest` following
	       * compilation. The observer is then invoked whenever the interpolated value
	       * changes.
	       *
	       * @param {string} key Normalized key. (ie ngAttribute) .
	       * @param {function(interpolatedValue)} fn Function that will be called whenever
	                the interpolated value of the attribute changes.
	       *        See the {@link guide/interpolation#how-text-and-attribute-bindings-work Interpolation
	       *        guide} for more info.
	       * @returns {function()} Returns a deregistration function for this observer.
	       */$observe:function $observe(key,fn){var attrs=this,$$observers=attrs.$$observers||(attrs.$$observers=createMap()),listeners=$$observers[key]||($$observers[key]=[]);listeners.push(fn);$rootScope.$evalAsync(function(){if(!listeners.$$inter&&attrs.hasOwnProperty(key)&&!isUndefined(attrs[key])){// no one registered attribute interpolation function, so lets call it manually
	fn(attrs[key]);}});return function(){arrayRemove(listeners,fn);};}};function setSpecialAttr(element,attrName,value){// Attributes names that do not start with letters (such as `(click)`) cannot be set using `setAttribute`
	// so we have to jump through some hoops to get such an attribute
	// https://github.com/angular/angular.js/pull/13318
	specialAttrHolder.innerHTML='<span '+attrName+'>';var attributes=specialAttrHolder.firstChild.attributes;var attribute=attributes[0];// We have to remove the attribute from its container element before we can add it to the destination element
	attributes.removeNamedItem(attribute.name);attribute.value=value;element.attributes.setNamedItem(attribute);}function safeAddClass($element,className){try{$element.addClass(className);}catch(e){// ignore, since it means that we are trying to set class on
	// SVG element, where class name is read-only.
	}}var startSymbol=$interpolate.startSymbol(),endSymbol=$interpolate.endSymbol(),denormalizeTemplate=startSymbol==='{{'&&endSymbol==='}}'?identity:function denormalizeTemplate(template){return template.replace(/\{\{/g,startSymbol).replace(/}}/g,endSymbol);},NG_ATTR_BINDING=/^ngAttr[A-Z]/;var MULTI_ELEMENT_DIR_RE=/^(.+)Start$/;compile.$$addBindingInfo=debugInfoEnabled?function $$addBindingInfo($element,binding){var bindings=$element.data('$binding')||[];if(isArray(binding)){bindings=bindings.concat(binding);}else{bindings.push(binding);}$element.data('$binding',bindings);}:noop;compile.$$addBindingClass=debugInfoEnabled?function $$addBindingClass($element){safeAddClass($element,'ng-binding');}:noop;compile.$$addScopeInfo=debugInfoEnabled?function $$addScopeInfo($element,scope,isolated,noTemplate){var dataName=isolated?noTemplate?'$isolateScopeNoTemplate':'$isolateScope':'$scope';$element.data(dataName,scope);}:noop;compile.$$addScopeClass=debugInfoEnabled?function $$addScopeClass($element,isolated){safeAddClass($element,isolated?'ng-isolate-scope':'ng-scope');}:noop;compile.$$createComment=function(directiveName,comment){var content='';if(debugInfoEnabled){content=' '+(directiveName||'')+': ';if(comment)content+=comment+' ';}return window.document.createComment(content);};return compile;//================================
	function compile($compileNodes,transcludeFn,maxPriority,ignoreDirective,previousCompileContext){if(!($compileNodes instanceof jqLite)){// jquery always rewraps, whereas we need to preserve the original selector so that we can
	// modify it.
	$compileNodes=jqLite($compileNodes);}var compositeLinkFn=compileNodes($compileNodes,transcludeFn,$compileNodes,maxPriority,ignoreDirective,previousCompileContext);compile.$$addScopeClass($compileNodes);var namespace=null;return function publicLinkFn(scope,cloneConnectFn,options){if(!$compileNodes){throw $compileMinErr('multilink','This element has already been linked.');}assertArg(scope,'scope');if(previousCompileContext&&previousCompileContext.needsNewScope){// A parent directive did a replace and a directive on this element asked
	// for transclusion, which caused us to lose a layer of element on which
	// we could hold the new transclusion scope, so we will create it manually
	// here.
	scope=scope.$parent.$new();}options=options||{};var parentBoundTranscludeFn=options.parentBoundTranscludeFn,transcludeControllers=options.transcludeControllers,futureParentElement=options.futureParentElement;// When `parentBoundTranscludeFn` is passed, it is a
	// `controllersBoundTransclude` function (it was previously passed
	// as `transclude` to directive.link) so we must unwrap it to get
	// its `boundTranscludeFn`
	if(parentBoundTranscludeFn&&parentBoundTranscludeFn.$$boundTransclude){parentBoundTranscludeFn=parentBoundTranscludeFn.$$boundTransclude;}if(!namespace){namespace=detectNamespaceForChildElements(futureParentElement);}var $linkNode;if(namespace!=='html'){// When using a directive with replace:true and templateUrl the $compileNodes
	// (or a child element inside of them)
	// might change, so we need to recreate the namespace adapted compileNodes
	// for call to the link function.
	// Note: This will already clone the nodes...
	$linkNode=jqLite(wrapTemplate(namespace,jqLite('<div>').append($compileNodes).html()));}else if(cloneConnectFn){// important!!: we must call our jqLite.clone() since the jQuery one is trying to be smart
	// and sometimes changes the structure of the DOM.
	$linkNode=JQLitePrototype.clone.call($compileNodes);}else{$linkNode=$compileNodes;}if(transcludeControllers){for(var controllerName in transcludeControllers){$linkNode.data('$'+controllerName+'Controller',transcludeControllers[controllerName].instance);}}compile.$$addScopeInfo($linkNode,scope);if(cloneConnectFn)cloneConnectFn($linkNode,scope);if(compositeLinkFn)compositeLinkFn(scope,$linkNode,$linkNode,parentBoundTranscludeFn);if(!cloneConnectFn){$compileNodes=compositeLinkFn=null;}return $linkNode;};}function detectNamespaceForChildElements(parentElement){// TODO: Make this detect MathML as well...
	var node=parentElement&&parentElement[0];if(!node){return'html';}else{return nodeName_(node)!=='foreignobject'&&toString.call(node).match(/SVG/)?'svg':'html';}}/**
	     * Compile function matches each node in nodeList against the directives. Once all directives
	     * for a particular node are collected their compile functions are executed. The compile
	     * functions return values - the linking functions - are combined into a composite linking
	     * function, which is the a linking function for the node.
	     *
	     * @param {NodeList} nodeList an array of nodes or NodeList to compile
	     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
	     *        scope argument is auto-generated to the new child of the transcluded parent scope.
	     * @param {DOMElement=} $rootElement If the nodeList is the root of the compilation tree then
	     *        the rootElement must be set the jqLite collection of the compile root. This is
	     *        needed so that the jqLite collection items can be replaced with widgets.
	     * @param {number=} maxPriority Max directive priority.
	     * @returns {Function} A composite linking function of all of the matched directives or null.
	     */function compileNodes(nodeList,transcludeFn,$rootElement,maxPriority,ignoreDirective,previousCompileContext){var linkFns=[],// `nodeList` can be either an element's `.childNodes` (live NodeList)
	// or a jqLite/jQuery collection or an array
	notLiveList=isArray(nodeList)||nodeList instanceof jqLite,attrs,directives,nodeLinkFn,childNodes,childLinkFn,linkFnFound,nodeLinkFnFound;for(var i=0;i<nodeList.length;i++){attrs=new Attributes();// Support: IE 11 only
	// Workaround for #11781 and #14924
	if(msie===11){mergeConsecutiveTextNodes(nodeList,i,notLiveList);}// We must always refer to `nodeList[i]` hereafter,
	// since the nodes can be replaced underneath us.
	directives=collectDirectives(nodeList[i],[],attrs,i===0?maxPriority:undefined,ignoreDirective);nodeLinkFn=directives.length?applyDirectivesToNode(directives,nodeList[i],attrs,transcludeFn,$rootElement,null,[],[],previousCompileContext):null;if(nodeLinkFn&&nodeLinkFn.scope){compile.$$addScopeClass(attrs.$$element);}childLinkFn=nodeLinkFn&&nodeLinkFn.terminal||!(childNodes=nodeList[i].childNodes)||!childNodes.length?null:compileNodes(childNodes,nodeLinkFn?(nodeLinkFn.transcludeOnThisElement||!nodeLinkFn.templateOnThisElement)&&nodeLinkFn.transclude:transcludeFn);if(nodeLinkFn||childLinkFn){linkFns.push(i,nodeLinkFn,childLinkFn);linkFnFound=true;nodeLinkFnFound=nodeLinkFnFound||nodeLinkFn;}//use the previous context only for the first element in the virtual group
	previousCompileContext=null;}// return a linking function if we have found anything, null otherwise
	return linkFnFound?compositeLinkFn:null;function compositeLinkFn(scope,nodeList,$rootElement,parentBoundTranscludeFn){var nodeLinkFn,childLinkFn,node,childScope,i,ii,idx,childBoundTranscludeFn;var stableNodeList;if(nodeLinkFnFound){// copy nodeList so that if a nodeLinkFn removes or adds an element at this DOM level our
	// offsets don't get screwed up
	var nodeListLength=nodeList.length;stableNodeList=new Array(nodeListLength);// create a sparse array by only copying the elements which have a linkFn
	for(i=0;i<linkFns.length;i+=3){idx=linkFns[i];stableNodeList[idx]=nodeList[idx];}}else{stableNodeList=nodeList;}for(i=0,ii=linkFns.length;i<ii;){node=stableNodeList[linkFns[i++]];nodeLinkFn=linkFns[i++];childLinkFn=linkFns[i++];if(nodeLinkFn){if(nodeLinkFn.scope){childScope=scope.$new();compile.$$addScopeInfo(jqLite(node),childScope);}else{childScope=scope;}if(nodeLinkFn.transcludeOnThisElement){childBoundTranscludeFn=createBoundTranscludeFn(scope,nodeLinkFn.transclude,parentBoundTranscludeFn);}else if(!nodeLinkFn.templateOnThisElement&&parentBoundTranscludeFn){childBoundTranscludeFn=parentBoundTranscludeFn;}else if(!parentBoundTranscludeFn&&transcludeFn){childBoundTranscludeFn=createBoundTranscludeFn(scope,transcludeFn);}else{childBoundTranscludeFn=null;}nodeLinkFn(childLinkFn,childScope,node,$rootElement,childBoundTranscludeFn);}else if(childLinkFn){childLinkFn(scope,node.childNodes,undefined,parentBoundTranscludeFn);}}}}function mergeConsecutiveTextNodes(nodeList,idx,notLiveList){var node=nodeList[idx];var parent=node.parentNode;var sibling;if(node.nodeType!==NODE_TYPE_TEXT){return;}while(true){sibling=parent?node.nextSibling:nodeList[idx+1];if(!sibling||sibling.nodeType!==NODE_TYPE_TEXT){break;}node.nodeValue=node.nodeValue+sibling.nodeValue;if(sibling.parentNode){sibling.parentNode.removeChild(sibling);}if(notLiveList&&sibling===nodeList[idx+1]){nodeList.splice(idx+1,1);}}}function createBoundTranscludeFn(scope,transcludeFn,previousBoundTranscludeFn){function boundTranscludeFn(transcludedScope,cloneFn,controllers,futureParentElement,containingScope){if(!transcludedScope){transcludedScope=scope.$new(false,containingScope);transcludedScope.$$transcluded=true;}return transcludeFn(transcludedScope,cloneFn,{parentBoundTranscludeFn:previousBoundTranscludeFn,transcludeControllers:controllers,futureParentElement:futureParentElement});}// We need  to attach the transclusion slots onto the `boundTranscludeFn`
	// so that they are available inside the `controllersBoundTransclude` function
	var boundSlots=boundTranscludeFn.$$slots=createMap();for(var slotName in transcludeFn.$$slots){if(transcludeFn.$$slots[slotName]){boundSlots[slotName]=createBoundTranscludeFn(scope,transcludeFn.$$slots[slotName],previousBoundTranscludeFn);}else{boundSlots[slotName]=null;}}return boundTranscludeFn;}/**
	     * Looks for directives on the given node and adds them to the directive collection which is
	     * sorted.
	     *
	     * @param node Node to search.
	     * @param directives An array to which the directives are added to. This array is sorted before
	     *        the function returns.
	     * @param attrs The shared attrs object which is used to populate the normalized attributes.
	     * @param {number=} maxPriority Max directive priority.
	     */function collectDirectives(node,directives,attrs,maxPriority,ignoreDirective){var nodeType=node.nodeType,attrsMap=attrs.$attr,match,nodeName,className;switch(nodeType){case NODE_TYPE_ELEMENT:/* Element */nodeName=nodeName_(node);// use the node name: <directive>
	addDirective(directives,directiveNormalize(nodeName),'E',maxPriority,ignoreDirective);// iterate over the attributes
	for(var attr,name,nName,ngAttrName,value,isNgAttr,nAttrs=node.attributes,j=0,jj=nAttrs&&nAttrs.length;j<jj;j++){var attrStartName=false;var attrEndName=false;attr=nAttrs[j];name=attr.name;value=attr.value;// support ngAttr attribute binding
	ngAttrName=directiveNormalize(name);isNgAttr=NG_ATTR_BINDING.test(ngAttrName);if(isNgAttr){name=name.replace(PREFIX_REGEXP,'').substr(8).replace(/_(.)/g,function(match,letter){return letter.toUpperCase();});}var multiElementMatch=ngAttrName.match(MULTI_ELEMENT_DIR_RE);if(multiElementMatch&&directiveIsMultiElement(multiElementMatch[1])){attrStartName=name;attrEndName=name.substr(0,name.length-5)+'end';name=name.substr(0,name.length-6);}nName=directiveNormalize(name.toLowerCase());attrsMap[nName]=name;if(isNgAttr||!attrs.hasOwnProperty(nName)){attrs[nName]=value;if(getBooleanAttrName(node,nName)){attrs[nName]=true;// presence means true
	}}addAttrInterpolateDirective(node,directives,value,nName,isNgAttr);addDirective(directives,nName,'A',maxPriority,ignoreDirective,attrStartName,attrEndName);}if(nodeName==='input'&&node.getAttribute('type')==='hidden'){// Hidden input elements can have strange behaviour when navigating back to the page
	// This tells the browser not to try to cache and reinstate previous values
	node.setAttribute('autocomplete','off');}// use class as directive
	if(!cssClassDirectivesEnabled)break;className=node.className;if(isObject(className)){// Maybe SVGAnimatedString
	className=className.animVal;}if(isString(className)&&className!==''){while(match=CLASS_DIRECTIVE_REGEXP.exec(className)){nName=directiveNormalize(match[2]);if(addDirective(directives,nName,'C',maxPriority,ignoreDirective)){attrs[nName]=trim(match[3]);}className=className.substr(match.index+match[0].length);}}break;case NODE_TYPE_TEXT:/* Text Node */addTextInterpolateDirective(directives,node.nodeValue);break;case NODE_TYPE_COMMENT:/* Comment */if(!commentDirectivesEnabled)break;collectCommentDirectives(node,directives,attrs,maxPriority,ignoreDirective);break;}directives.sort(byPriority);return directives;}function collectCommentDirectives(node,directives,attrs,maxPriority,ignoreDirective){// function created because of performance, try/catch disables
	// the optimization of the whole function #14848
	try{var match=COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);if(match){var nName=directiveNormalize(match[1]);if(addDirective(directives,nName,'M',maxPriority,ignoreDirective)){attrs[nName]=trim(match[2]);}}}catch(e){// turns out that under some circumstances IE9 throws errors when one attempts to read
	// comment's node value.
	// Just ignore it and continue. (Can't seem to reproduce in test case.)
	}}/**
	     * Given a node with a directive-start it collects all of the siblings until it finds
	     * directive-end.
	     * @param node
	     * @param attrStart
	     * @param attrEnd
	     * @returns {*}
	     */function groupScan(node,attrStart,attrEnd){var nodes=[];var depth=0;if(attrStart&&node.hasAttribute&&node.hasAttribute(attrStart)){do{if(!node){throw $compileMinErr('uterdir','Unterminated attribute, found \'{0}\' but no matching \'{1}\' found.',attrStart,attrEnd);}if(node.nodeType===NODE_TYPE_ELEMENT){if(node.hasAttribute(attrStart))depth++;if(node.hasAttribute(attrEnd))depth--;}nodes.push(node);node=node.nextSibling;}while(depth>0);}else{nodes.push(node);}return jqLite(nodes);}/**
	     * Wrapper for linking function which converts normal linking function into a grouped
	     * linking function.
	     * @param linkFn
	     * @param attrStart
	     * @param attrEnd
	     * @returns {Function}
	     */function groupElementsLinkFnWrapper(linkFn,attrStart,attrEnd){return function groupedElementsLink(scope,element,attrs,controllers,transcludeFn){element=groupScan(element[0],attrStart,attrEnd);return linkFn(scope,element,attrs,controllers,transcludeFn);};}/**
	     * A function generator that is used to support both eager and lazy compilation
	     * linking function.
	     * @param eager
	     * @param $compileNodes
	     * @param transcludeFn
	     * @param maxPriority
	     * @param ignoreDirective
	     * @param previousCompileContext
	     * @returns {Function}
	     */function compilationGenerator(eager,$compileNodes,transcludeFn,maxPriority,ignoreDirective,previousCompileContext){var compiled;if(eager){return compile($compileNodes,transcludeFn,maxPriority,ignoreDirective,previousCompileContext);}return(/** @this */function lazyCompilation(){if(!compiled){compiled=compile($compileNodes,transcludeFn,maxPriority,ignoreDirective,previousCompileContext);// Null out all of these references in order to make them eligible for garbage collection
	// since this is a potentially long lived closure
	$compileNodes=transcludeFn=previousCompileContext=null;}return compiled.apply(this,arguments);});}/**
	     * Once the directives have been collected, their compile functions are executed. This method
	     * is responsible for inlining directive templates as well as terminating the application
	     * of the directives if the terminal directive has been reached.
	     *
	     * @param {Array} directives Array of collected directives to execute their compile function.
	     *        this needs to be pre-sorted by priority order.
	     * @param {Node} compileNode The raw DOM node to apply the compile functions to
	     * @param {Object} templateAttrs The shared attribute function
	     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
	     *                                                  scope argument is auto-generated to the new
	     *                                                  child of the transcluded parent scope.
	     * @param {JQLite} jqCollection If we are working on the root of the compile tree then this
	     *                              argument has the root jqLite array so that we can replace nodes
	     *                              on it.
	     * @param {Object=} originalReplaceDirective An optional directive that will be ignored when
	     *                                           compiling the transclusion.
	     * @param {Array.<Function>} preLinkFns
	     * @param {Array.<Function>} postLinkFns
	     * @param {Object} previousCompileContext Context used for previous compilation of the current
	     *                                        node
	     * @returns {Function} linkFn
	     */function applyDirectivesToNode(directives,compileNode,templateAttrs,transcludeFn,jqCollection,originalReplaceDirective,preLinkFns,postLinkFns,previousCompileContext){previousCompileContext=previousCompileContext||{};var terminalPriority=-Number.MAX_VALUE,newScopeDirective=previousCompileContext.newScopeDirective,controllerDirectives=previousCompileContext.controllerDirectives,newIsolateScopeDirective=previousCompileContext.newIsolateScopeDirective,templateDirective=previousCompileContext.templateDirective,nonTlbTranscludeDirective=previousCompileContext.nonTlbTranscludeDirective,hasTranscludeDirective=false,hasTemplate=false,hasElementTranscludeDirective=previousCompileContext.hasElementTranscludeDirective,$compileNode=templateAttrs.$$element=jqLite(compileNode),directive,directiveName,$template,replaceDirective=originalReplaceDirective,childTranscludeFn=transcludeFn,linkFn,didScanForMultipleTransclusion=false,mightHaveMultipleTransclusionError=false,directiveValue;// executes all directives on the current element
	for(var i=0,ii=directives.length;i<ii;i++){directive=directives[i];var attrStart=directive.$$start;var attrEnd=directive.$$end;// collect multiblock sections
	if(attrStart){$compileNode=groupScan(compileNode,attrStart,attrEnd);}$template=undefined;if(terminalPriority>directive.priority){break;// prevent further processing of directives
	}directiveValue=directive.scope;if(directiveValue){// skip the check for directives with async templates, we'll check the derived sync
	// directive when the template arrives
	if(!directive.templateUrl){if(isObject(directiveValue)){// This directive is trying to add an isolated scope.
	// Check that there is no scope of any kind already
	assertNoDuplicate('new/isolated scope',newIsolateScopeDirective||newScopeDirective,directive,$compileNode);newIsolateScopeDirective=directive;}else{// This directive is trying to add a child scope.
	// Check that there is no isolated scope already
	assertNoDuplicate('new/isolated scope',newIsolateScopeDirective,directive,$compileNode);}}newScopeDirective=newScopeDirective||directive;}directiveName=directive.name;// If we encounter a condition that can result in transclusion on the directive,
	// then scan ahead in the remaining directives for others that may cause a multiple
	// transclusion error to be thrown during the compilation process.  If a matching directive
	// is found, then we know that when we encounter a transcluded directive, we need to eagerly
	// compile the `transclude` function rather than doing it lazily in order to throw
	// exceptions at the correct time
	if(!didScanForMultipleTransclusion&&(directive.replace&&(directive.templateUrl||directive.template)||directive.transclude&&!directive.$$tlb)){var candidateDirective;for(var scanningIndex=i+1;candidateDirective=directives[scanningIndex++];){if(candidateDirective.transclude&&!candidateDirective.$$tlb||candidateDirective.replace&&(candidateDirective.templateUrl||candidateDirective.template)){mightHaveMultipleTransclusionError=true;break;}}didScanForMultipleTransclusion=true;}if(!directive.templateUrl&&directive.controller){controllerDirectives=controllerDirectives||createMap();assertNoDuplicate('\''+directiveName+'\' controller',controllerDirectives[directiveName],directive,$compileNode);controllerDirectives[directiveName]=directive;}directiveValue=directive.transclude;if(directiveValue){hasTranscludeDirective=true;// Special case ngIf and ngRepeat so that we don't complain about duplicate transclusion.
	// This option should only be used by directives that know how to safely handle element transclusion,
	// where the transcluded nodes are added or replaced after linking.
	if(!directive.$$tlb){assertNoDuplicate('transclusion',nonTlbTranscludeDirective,directive,$compileNode);nonTlbTranscludeDirective=directive;}if(directiveValue==='element'){hasElementTranscludeDirective=true;terminalPriority=directive.priority;$template=$compileNode;$compileNode=templateAttrs.$$element=jqLite(compile.$$createComment(directiveName,templateAttrs[directiveName]));compileNode=$compileNode[0];replaceWith(jqCollection,sliceArgs($template),compileNode);// Support: Chrome < 50
	// https://github.com/angular/angular.js/issues/14041
	// In the versions of V8 prior to Chrome 50, the document fragment that is created
	// in the `replaceWith` function is improperly garbage collected despite still
	// being referenced by the `parentNode` property of all of the child nodes.  By adding
	// a reference to the fragment via a different property, we can avoid that incorrect
	// behavior.
	// TODO: remove this line after Chrome 50 has been released
	$template[0].$$parentNode=$template[0].parentNode;childTranscludeFn=compilationGenerator(mightHaveMultipleTransclusionError,$template,transcludeFn,terminalPriority,replaceDirective&&replaceDirective.name,{// Don't pass in:
	// - controllerDirectives - otherwise we'll create duplicates controllers
	// - newIsolateScopeDirective or templateDirective - combining templates with
	//   element transclusion doesn't make sense.
	//
	// We need only nonTlbTranscludeDirective so that we prevent putting transclusion
	// on the same element more than once.
	nonTlbTranscludeDirective:nonTlbTranscludeDirective});}else{var slots=createMap();if(!isObject(directiveValue)){$template=jqLite(jqLiteClone(compileNode)).contents();}else{// We have transclusion slots,
	// collect them up, compile them and store their transclusion functions
	$template=[];var slotMap=createMap();var filledSlots=createMap();// Parse the element selectors
	forEach(directiveValue,function(elementSelector,slotName){// If an element selector starts with a ? then it is optional
	var optional=elementSelector.charAt(0)==='?';elementSelector=optional?elementSelector.substring(1):elementSelector;slotMap[elementSelector]=slotName;// We explicitly assign `null` since this implies that a slot was defined but not filled.
	// Later when calling boundTransclusion functions with a slot name we only error if the
	// slot is `undefined`
	slots[slotName]=null;// filledSlots contains `true` for all slots that are either optional or have been
	// filled. This is used to check that we have not missed any required slots
	filledSlots[slotName]=optional;});// Add the matching elements into their slot
	forEach($compileNode.contents(),function(node){var slotName=slotMap[directiveNormalize(nodeName_(node))];if(slotName){filledSlots[slotName]=true;slots[slotName]=slots[slotName]||[];slots[slotName].push(node);}else{$template.push(node);}});// Check for required slots that were not filled
	forEach(filledSlots,function(filled,slotName){if(!filled){throw $compileMinErr('reqslot','Required transclusion slot `{0}` was not filled.',slotName);}});for(var slotName in slots){if(slots[slotName]){// Only define a transclusion function if the slot was filled
	slots[slotName]=compilationGenerator(mightHaveMultipleTransclusionError,slots[slotName],transcludeFn);}}}$compileNode.empty();// clear contents
	childTranscludeFn=compilationGenerator(mightHaveMultipleTransclusionError,$template,transcludeFn,undefined,undefined,{needsNewScope:directive.$$isolateScope||directive.$$newScope});childTranscludeFn.$$slots=slots;}}if(directive.template){hasTemplate=true;assertNoDuplicate('template',templateDirective,directive,$compileNode);templateDirective=directive;directiveValue=isFunction(directive.template)?directive.template($compileNode,templateAttrs):directive.template;directiveValue=denormalizeTemplate(directiveValue);if(directive.replace){replaceDirective=directive;if(jqLiteIsTextNode(directiveValue)){$template=[];}else{$template=removeComments(wrapTemplate(directive.templateNamespace,trim(directiveValue)));}compileNode=$template[0];if($template.length!==1||compileNode.nodeType!==NODE_TYPE_ELEMENT){throw $compileMinErr('tplrt','Template for directive \'{0}\' must have exactly one root element. {1}',directiveName,'');}replaceWith(jqCollection,$compileNode,compileNode);var newTemplateAttrs={$attr:{}};// combine directives from the original node and from the template:
	// - take the array of directives for this element
	// - split it into two parts, those that already applied (processed) and those that weren't (unprocessed)
	// - collect directives from the template and sort them by priority
	// - combine directives as: processed + template + unprocessed
	var templateDirectives=collectDirectives(compileNode,[],newTemplateAttrs);var unprocessedDirectives=directives.splice(i+1,directives.length-(i+1));if(newIsolateScopeDirective||newScopeDirective){// The original directive caused the current element to be replaced but this element
	// also needs to have a new scope, so we need to tell the template directives
	// that they would need to get their scope from further up, if they require transclusion
	markDirectiveScope(templateDirectives,newIsolateScopeDirective,newScopeDirective);}directives=directives.concat(templateDirectives).concat(unprocessedDirectives);mergeTemplateAttributes(templateAttrs,newTemplateAttrs);ii=directives.length;}else{$compileNode.html(directiveValue);}}if(directive.templateUrl){hasTemplate=true;assertNoDuplicate('template',templateDirective,directive,$compileNode);templateDirective=directive;if(directive.replace){replaceDirective=directive;}// eslint-disable-next-line no-func-assign
	nodeLinkFn=compileTemplateUrl(directives.splice(i,directives.length-i),$compileNode,templateAttrs,jqCollection,hasTranscludeDirective&&childTranscludeFn,preLinkFns,postLinkFns,{controllerDirectives:controllerDirectives,newScopeDirective:newScopeDirective!==directive&&newScopeDirective,newIsolateScopeDirective:newIsolateScopeDirective,templateDirective:templateDirective,nonTlbTranscludeDirective:nonTlbTranscludeDirective});ii=directives.length;}else if(directive.compile){try{linkFn=directive.compile($compileNode,templateAttrs,childTranscludeFn);var context=directive.$$originalDirective||directive;if(isFunction(linkFn)){addLinkFns(null,bind(context,linkFn),attrStart,attrEnd);}else if(linkFn){addLinkFns(bind(context,linkFn.pre),bind(context,linkFn.post),attrStart,attrEnd);}}catch(e){$exceptionHandler(e,startingTag($compileNode));}}if(directive.terminal){nodeLinkFn.terminal=true;terminalPriority=Math.max(terminalPriority,directive.priority);}}nodeLinkFn.scope=newScopeDirective&&newScopeDirective.scope===true;nodeLinkFn.transcludeOnThisElement=hasTranscludeDirective;nodeLinkFn.templateOnThisElement=hasTemplate;nodeLinkFn.transclude=childTranscludeFn;previousCompileContext.hasElementTranscludeDirective=hasElementTranscludeDirective;// might be normal or delayed nodeLinkFn depending on if templateUrl is present
	return nodeLinkFn;////////////////////
	function addLinkFns(pre,post,attrStart,attrEnd){if(pre){if(attrStart)pre=groupElementsLinkFnWrapper(pre,attrStart,attrEnd);pre.require=directive.require;pre.directiveName=directiveName;if(newIsolateScopeDirective===directive||directive.$$isolateScope){pre=cloneAndAnnotateFn(pre,{isolateScope:true});}preLinkFns.push(pre);}if(post){if(attrStart)post=groupElementsLinkFnWrapper(post,attrStart,attrEnd);post.require=directive.require;post.directiveName=directiveName;if(newIsolateScopeDirective===directive||directive.$$isolateScope){post=cloneAndAnnotateFn(post,{isolateScope:true});}postLinkFns.push(post);}}function nodeLinkFn(childLinkFn,scope,linkNode,$rootElement,boundTranscludeFn){var i,ii,linkFn,isolateScope,controllerScope,elementControllers,transcludeFn,$element,attrs,scopeBindingInfo;if(compileNode===linkNode){attrs=templateAttrs;$element=templateAttrs.$$element;}else{$element=jqLite(linkNode);attrs=new Attributes($element,templateAttrs);}controllerScope=scope;if(newIsolateScopeDirective){isolateScope=scope.$new(true);}else if(newScopeDirective){controllerScope=scope.$parent;}if(boundTranscludeFn){// track `boundTranscludeFn` so it can be unwrapped if `transcludeFn`
	// is later passed as `parentBoundTranscludeFn` to `publicLinkFn`
	transcludeFn=controllersBoundTransclude;transcludeFn.$$boundTransclude=boundTranscludeFn;// expose the slots on the `$transclude` function
	transcludeFn.isSlotFilled=function(slotName){return!!boundTranscludeFn.$$slots[slotName];};}if(controllerDirectives){elementControllers=setupControllers($element,attrs,transcludeFn,controllerDirectives,isolateScope,scope,newIsolateScopeDirective);}if(newIsolateScopeDirective){// Initialize isolate scope bindings for new isolate scope directive.
	compile.$$addScopeInfo($element,isolateScope,true,!(templateDirective&&(templateDirective===newIsolateScopeDirective||templateDirective===newIsolateScopeDirective.$$originalDirective)));compile.$$addScopeClass($element,true);isolateScope.$$isolateBindings=newIsolateScopeDirective.$$isolateBindings;scopeBindingInfo=initializeDirectiveBindings(scope,attrs,isolateScope,isolateScope.$$isolateBindings,newIsolateScopeDirective);if(scopeBindingInfo.removeWatches){isolateScope.$on('$destroy',scopeBindingInfo.removeWatches);}}// Initialize bindToController bindings
	for(var name in elementControllers){var controllerDirective=controllerDirectives[name];var controller=elementControllers[name];var bindings=controllerDirective.$$bindings.bindToController;if(preAssignBindingsEnabled){if(bindings){controller.bindingInfo=initializeDirectiveBindings(controllerScope,attrs,controller.instance,bindings,controllerDirective);}else{controller.bindingInfo={};}var controllerResult=controller();if(controllerResult!==controller.instance){// If the controller constructor has a return value, overwrite the instance
	// from setupControllers
	controller.instance=controllerResult;$element.data('$'+controllerDirective.name+'Controller',controllerResult);if(controller.bindingInfo.removeWatches){controller.bindingInfo.removeWatches();}controller.bindingInfo=initializeDirectiveBindings(controllerScope,attrs,controller.instance,bindings,controllerDirective);}}else{controller.instance=controller();$element.data('$'+controllerDirective.name+'Controller',controller.instance);controller.bindingInfo=initializeDirectiveBindings(controllerScope,attrs,controller.instance,bindings,controllerDirective);}}// Bind the required controllers to the controller, if `require` is an object and `bindToController` is truthy
	forEach(controllerDirectives,function(controllerDirective,name){var require=controllerDirective.require;if(controllerDirective.bindToController&&!isArray(require)&&isObject(require)){extend(elementControllers[name].instance,getControllers(name,require,$element,elementControllers));}});// Handle the init and destroy lifecycle hooks on all controllers that have them
	forEach(elementControllers,function(controller){var controllerInstance=controller.instance;if(isFunction(controllerInstance.$onChanges)){try{controllerInstance.$onChanges(controller.bindingInfo.initialChanges);}catch(e){$exceptionHandler(e);}}if(isFunction(controllerInstance.$onInit)){try{controllerInstance.$onInit();}catch(e){$exceptionHandler(e);}}if(isFunction(controllerInstance.$doCheck)){controllerScope.$watch(function(){controllerInstance.$doCheck();});controllerInstance.$doCheck();}if(isFunction(controllerInstance.$onDestroy)){controllerScope.$on('$destroy',function callOnDestroyHook(){controllerInstance.$onDestroy();});}});// PRELINKING
	for(i=0,ii=preLinkFns.length;i<ii;i++){linkFn=preLinkFns[i];invokeLinkFn(linkFn,linkFn.isolateScope?isolateScope:scope,$element,attrs,linkFn.require&&getControllers(linkFn.directiveName,linkFn.require,$element,elementControllers),transcludeFn);}// RECURSION
	// We only pass the isolate scope, if the isolate directive has a template,
	// otherwise the child elements do not belong to the isolate directive.
	var scopeToChild=scope;if(newIsolateScopeDirective&&(newIsolateScopeDirective.template||newIsolateScopeDirective.templateUrl===null)){scopeToChild=isolateScope;}if(childLinkFn){childLinkFn(scopeToChild,linkNode.childNodes,undefined,boundTranscludeFn);}// POSTLINKING
	for(i=postLinkFns.length-1;i>=0;i--){linkFn=postLinkFns[i];invokeLinkFn(linkFn,linkFn.isolateScope?isolateScope:scope,$element,attrs,linkFn.require&&getControllers(linkFn.directiveName,linkFn.require,$element,elementControllers),transcludeFn);}// Trigger $postLink lifecycle hooks
	forEach(elementControllers,function(controller){var controllerInstance=controller.instance;if(isFunction(controllerInstance.$postLink)){controllerInstance.$postLink();}});// This is the function that is injected as `$transclude`.
	// Note: all arguments are optional!
	function controllersBoundTransclude(scope,cloneAttachFn,futureParentElement,slotName){var transcludeControllers;// No scope passed in:
	if(!isScope(scope)){slotName=futureParentElement;futureParentElement=cloneAttachFn;cloneAttachFn=scope;scope=undefined;}if(hasElementTranscludeDirective){transcludeControllers=elementControllers;}if(!futureParentElement){futureParentElement=hasElementTranscludeDirective?$element.parent():$element;}if(slotName){// slotTranscludeFn can be one of three things:
	//  * a transclude function - a filled slot
	//  * `null` - an optional slot that was not filled
	//  * `undefined` - a slot that was not declared (i.e. invalid)
	var slotTranscludeFn=boundTranscludeFn.$$slots[slotName];if(slotTranscludeFn){return slotTranscludeFn(scope,cloneAttachFn,transcludeControllers,futureParentElement,scopeToChild);}else if(isUndefined(slotTranscludeFn)){throw $compileMinErr('noslot','No parent directive that requires a transclusion with slot name "{0}". '+'Element: {1}',slotName,startingTag($element));}}else{return boundTranscludeFn(scope,cloneAttachFn,transcludeControllers,futureParentElement,scopeToChild);}}}}function getControllers(directiveName,require,$element,elementControllers){var value;if(isString(require)){var match=require.match(REQUIRE_PREFIX_REGEXP);var name=require.substring(match[0].length);var inheritType=match[1]||match[3];var optional=match[2]==='?';//If only parents then start at the parent element
	if(inheritType==='^^'){$element=$element.parent();//Otherwise attempt getting the controller from elementControllers in case
	//the element is transcluded (and has no data) and to avoid .data if possible
	}else{value=elementControllers&&elementControllers[name];value=value&&value.instance;}if(!value){var dataName='$'+name+'Controller';value=inheritType?$element.inheritedData(dataName):$element.data(dataName);}if(!value&&!optional){throw $compileMinErr('ctreq','Controller \'{0}\', required by directive \'{1}\', can\'t be found!',name,directiveName);}}else if(isArray(require)){value=[];for(var i=0,ii=require.length;i<ii;i++){value[i]=getControllers(directiveName,require[i],$element,elementControllers);}}else if(isObject(require)){value={};forEach(require,function(controller,property){value[property]=getControllers(directiveName,controller,$element,elementControllers);});}return value||null;}function setupControllers($element,attrs,transcludeFn,controllerDirectives,isolateScope,scope,newIsolateScopeDirective){var elementControllers=createMap();for(var controllerKey in controllerDirectives){var directive=controllerDirectives[controllerKey];var locals={$scope:directive===newIsolateScopeDirective||directive.$$isolateScope?isolateScope:scope,$element:$element,$attrs:attrs,$transclude:transcludeFn};var controller=directive.controller;if(controller==='@'){controller=attrs[directive.name];}var controllerInstance=$controller(controller,locals,true,directive.controllerAs);// For directives with element transclusion the element is a comment.
	// In this case .data will not attach any data.
	// Instead, we save the controllers for the element in a local hash and attach to .data
	// later, once we have the actual element.
	elementControllers[directive.name]=controllerInstance;$element.data('$'+directive.name+'Controller',controllerInstance.instance);}return elementControllers;}// Depending upon the context in which a directive finds itself it might need to have a new isolated
	// or child scope created. For instance:
	// * if the directive has been pulled into a template because another directive with a higher priority
	// asked for element transclusion
	// * if the directive itself asks for transclusion but it is at the root of a template and the original
	// element was replaced. See https://github.com/angular/angular.js/issues/12936
	function markDirectiveScope(directives,isolateScope,newScope){for(var j=0,jj=directives.length;j<jj;j++){directives[j]=inherit(directives[j],{$$isolateScope:isolateScope,$$newScope:newScope});}}/**
	     * looks up the directive and decorates it with exception handling and proper parameters. We
	     * call this the boundDirective.
	     *
	     * @param {string} name name of the directive to look up.
	     * @param {string} location The directive must be found in specific format.
	     *   String containing any of theses characters:
	     *
	     *   * `E`: element name
	     *   * `A': attribute
	     *   * `C`: class
	     *   * `M`: comment
	     * @returns {boolean} true if directive was added.
	     */function addDirective(tDirectives,name,location,maxPriority,ignoreDirective,startAttrName,endAttrName){if(name===ignoreDirective)return null;var match=null;if(hasDirectives.hasOwnProperty(name)){for(var directive,directives=$injector.get(name+Suffix),i=0,ii=directives.length;i<ii;i++){directive=directives[i];if((isUndefined(maxPriority)||maxPriority>directive.priority)&&directive.restrict.indexOf(location)!==-1){if(startAttrName){directive=inherit(directive,{$$start:startAttrName,$$end:endAttrName});}if(!directive.$$bindings){var bindings=directive.$$bindings=parseDirectiveBindings(directive,directive.name);if(isObject(bindings.isolateScope)){directive.$$isolateBindings=bindings.isolateScope;}}tDirectives.push(directive);match=directive;}}}return match;}/**
	     * looks up the directive and returns true if it is a multi-element directive,
	     * and therefore requires DOM nodes between -start and -end markers to be grouped
	     * together.
	     *
	     * @param {string} name name of the directive to look up.
	     * @returns true if directive was registered as multi-element.
	     */function directiveIsMultiElement(name){if(hasDirectives.hasOwnProperty(name)){for(var directive,directives=$injector.get(name+Suffix),i=0,ii=directives.length;i<ii;i++){directive=directives[i];if(directive.multiElement){return true;}}}return false;}/**
	     * When the element is replaced with HTML template then the new attributes
	     * on the template need to be merged with the existing attributes in the DOM.
	     * The desired effect is to have both of the attributes present.
	     *
	     * @param {object} dst destination attributes (original DOM)
	     * @param {object} src source attributes (from the directive template)
	     */function mergeTemplateAttributes(dst,src){var srcAttr=src.$attr,dstAttr=dst.$attr;// reapply the old attributes to the new element
	forEach(dst,function(value,key){if(key.charAt(0)!=='$'){if(src[key]&&src[key]!==value){if(value.length){value+=(key==='style'?';':' ')+src[key];}else{value=src[key];}}dst.$set(key,value,true,srcAttr[key]);}});// copy the new attributes on the old attrs object
	forEach(src,function(value,key){// Check if we already set this attribute in the loop above.
	// `dst` will never contain hasOwnProperty as DOM parser won't let it.
	// You will get an "InvalidCharacterError: DOM Exception 5" error if you
	// have an attribute like "has-own-property" or "data-has-own-property", etc.
	if(!dst.hasOwnProperty(key)&&key.charAt(0)!=='$'){dst[key]=value;if(key!=='class'&&key!=='style'){dstAttr[key]=srcAttr[key];}}});}function compileTemplateUrl(directives,$compileNode,tAttrs,$rootElement,childTranscludeFn,preLinkFns,postLinkFns,previousCompileContext){var linkQueue=[],afterTemplateNodeLinkFn,afterTemplateChildLinkFn,beforeTemplateCompileNode=$compileNode[0],origAsyncDirective=directives.shift(),derivedSyncDirective=inherit(origAsyncDirective,{templateUrl:null,transclude:null,replace:null,$$originalDirective:origAsyncDirective}),templateUrl=isFunction(origAsyncDirective.templateUrl)?origAsyncDirective.templateUrl($compileNode,tAttrs):origAsyncDirective.templateUrl,templateNamespace=origAsyncDirective.templateNamespace;$compileNode.empty();$templateRequest(templateUrl).then(function(content){var compileNode,tempTemplateAttrs,$template,childBoundTranscludeFn;content=denormalizeTemplate(content);if(origAsyncDirective.replace){if(jqLiteIsTextNode(content)){$template=[];}else{$template=removeComments(wrapTemplate(templateNamespace,trim(content)));}compileNode=$template[0];if($template.length!==1||compileNode.nodeType!==NODE_TYPE_ELEMENT){throw $compileMinErr('tplrt','Template for directive \'{0}\' must have exactly one root element. {1}',origAsyncDirective.name,templateUrl);}tempTemplateAttrs={$attr:{}};replaceWith($rootElement,$compileNode,compileNode);var templateDirectives=collectDirectives(compileNode,[],tempTemplateAttrs);if(isObject(origAsyncDirective.scope)){// the original directive that caused the template to be loaded async required
	// an isolate scope
	markDirectiveScope(templateDirectives,true);}directives=templateDirectives.concat(directives);mergeTemplateAttributes(tAttrs,tempTemplateAttrs);}else{compileNode=beforeTemplateCompileNode;$compileNode.html(content);}directives.unshift(derivedSyncDirective);afterTemplateNodeLinkFn=applyDirectivesToNode(directives,compileNode,tAttrs,childTranscludeFn,$compileNode,origAsyncDirective,preLinkFns,postLinkFns,previousCompileContext);forEach($rootElement,function(node,i){if(node===compileNode){$rootElement[i]=$compileNode[0];}});afterTemplateChildLinkFn=compileNodes($compileNode[0].childNodes,childTranscludeFn);while(linkQueue.length){var scope=linkQueue.shift(),beforeTemplateLinkNode=linkQueue.shift(),linkRootElement=linkQueue.shift(),boundTranscludeFn=linkQueue.shift(),linkNode=$compileNode[0];if(scope.$$destroyed)continue;if(beforeTemplateLinkNode!==beforeTemplateCompileNode){var oldClasses=beforeTemplateLinkNode.className;if(!(previousCompileContext.hasElementTranscludeDirective&&origAsyncDirective.replace)){// it was cloned therefore we have to clone as well.
	linkNode=jqLiteClone(compileNode);}replaceWith(linkRootElement,jqLite(beforeTemplateLinkNode),linkNode);// Copy in CSS classes from original node
	safeAddClass(jqLite(linkNode),oldClasses);}if(afterTemplateNodeLinkFn.transcludeOnThisElement){childBoundTranscludeFn=createBoundTranscludeFn(scope,afterTemplateNodeLinkFn.transclude,boundTranscludeFn);}else{childBoundTranscludeFn=boundTranscludeFn;}afterTemplateNodeLinkFn(afterTemplateChildLinkFn,scope,linkNode,$rootElement,childBoundTranscludeFn);}linkQueue=null;}).catch(function(error){if(error instanceof Error){$exceptionHandler(error);}});return function delayedNodeLinkFn(ignoreChildLinkFn,scope,node,rootElement,boundTranscludeFn){var childBoundTranscludeFn=boundTranscludeFn;if(scope.$$destroyed)return;if(linkQueue){linkQueue.push(scope,node,rootElement,childBoundTranscludeFn);}else{if(afterTemplateNodeLinkFn.transcludeOnThisElement){childBoundTranscludeFn=createBoundTranscludeFn(scope,afterTemplateNodeLinkFn.transclude,boundTranscludeFn);}afterTemplateNodeLinkFn(afterTemplateChildLinkFn,scope,node,rootElement,childBoundTranscludeFn);}};}/**
	     * Sorting function for bound directives.
	     */function byPriority(a,b){var diff=b.priority-a.priority;if(diff!==0)return diff;if(a.name!==b.name)return a.name<b.name?-1:1;return a.index-b.index;}function assertNoDuplicate(what,previousDirective,directive,element){function wrapModuleNameIfDefined(moduleName){return moduleName?' (module: '+moduleName+')':'';}if(previousDirective){throw $compileMinErr('multidir','Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}',previousDirective.name,wrapModuleNameIfDefined(previousDirective.$$moduleName),directive.name,wrapModuleNameIfDefined(directive.$$moduleName),what,startingTag(element));}}function addTextInterpolateDirective(directives,text){var interpolateFn=$interpolate(text,true);if(interpolateFn){directives.push({priority:0,compile:function textInterpolateCompileFn(templateNode){var templateNodeParent=templateNode.parent(),hasCompileParent=!!templateNodeParent.length;// When transcluding a template that has bindings in the root
	// we don't have a parent and thus need to add the class during linking fn.
	if(hasCompileParent)compile.$$addBindingClass(templateNodeParent);return function textInterpolateLinkFn(scope,node){var parent=node.parent();if(!hasCompileParent)compile.$$addBindingClass(parent);compile.$$addBindingInfo(parent,interpolateFn.expressions);scope.$watch(interpolateFn,function interpolateFnWatchAction(value){node[0].nodeValue=value;});};}});}}function wrapTemplate(type,template){type=lowercase(type||'html');switch(type){case'svg':case'math':var wrapper=window.document.createElement('div');wrapper.innerHTML='<'+type+'>'+template+'</'+type+'>';return wrapper.childNodes[0].childNodes;default:return template;}}function getTrustedContext(node,attrNormalizedName){if(attrNormalizedName==='srcdoc'){return $sce.HTML;}var tag=nodeName_(node);// All tags with src attributes require a RESOURCE_URL value, except for
	// img and various html5 media tags.
	if(attrNormalizedName==='src'||attrNormalizedName==='ngSrc'){if(['img','video','audio','source','track'].indexOf(tag)===-1){return $sce.RESOURCE_URL;}// maction[xlink:href] can source SVG.  It's not limited to <maction>.
	}else if(attrNormalizedName==='xlinkHref'||tag==='form'&&attrNormalizedName==='action'||// links can be stylesheets or imports, which can run script in the current origin
	tag==='link'&&attrNormalizedName==='href'){return $sce.RESOURCE_URL;}}function addAttrInterpolateDirective(node,directives,value,name,isNgAttr){var trustedContext=getTrustedContext(node,name);var mustHaveExpression=!isNgAttr;var allOrNothing=ALL_OR_NOTHING_ATTRS[name]||isNgAttr;var interpolateFn=$interpolate(value,mustHaveExpression,trustedContext,allOrNothing);// no interpolation found -> ignore
	if(!interpolateFn)return;if(name==='multiple'&&nodeName_(node)==='select'){throw $compileMinErr('selmulti','Binding to the \'multiple\' attribute is not supported. Element: {0}',startingTag(node));}if(EVENT_HANDLER_ATTR_REGEXP.test(name)){throw $compileMinErr('nodomevents','Interpolations for HTML DOM event attributes are disallowed.  Please use the '+'ng- versions (such as ng-click instead of onclick) instead.');}directives.push({priority:100,compile:function compile(){return{pre:function attrInterpolatePreLinkFn(scope,element,attr){var $$observers=attr.$$observers||(attr.$$observers=createMap());// If the attribute has changed since last $interpolate()ed
	var newValue=attr[name];if(newValue!==value){// we need to interpolate again since the attribute value has been updated
	// (e.g. by another directive's compile function)
	// ensure unset/empty values make interpolateFn falsy
	interpolateFn=newValue&&$interpolate(newValue,true,trustedContext,allOrNothing);value=newValue;}// if attribute was updated so that there is no interpolation going on we don't want to
	// register any observers
	if(!interpolateFn)return;// initialize attr object so that it's ready in case we need the value for isolate
	// scope initialization, otherwise the value would not be available from isolate
	// directive's linking fn during linking phase
	attr[name]=interpolateFn(scope);($$observers[name]||($$observers[name]=[])).$$inter=true;(attr.$$observers&&attr.$$observers[name].$$scope||scope).$watch(interpolateFn,function interpolateFnWatchAction(newValue,oldValue){//special case for class attribute addition + removal
	//so that class changes can tap into the animation
	//hooks provided by the $animate service. Be sure to
	//skip animations when the first digest occurs (when
	//both the new and the old values are the same) since
	//the CSS classes are the non-interpolated values
	if(name==='class'&&newValue!==oldValue){attr.$updateClass(newValue,oldValue);}else{attr.$set(name,newValue);}});}};}});}/**
	     * This is a special jqLite.replaceWith, which can replace items which
	     * have no parents, provided that the containing jqLite collection is provided.
	     *
	     * @param {JqLite=} $rootElement The root of the compile tree. Used so that we can replace nodes
	     *                               in the root of the tree.
	     * @param {JqLite} elementsToRemove The jqLite element which we are going to replace. We keep
	     *                                  the shell, but replace its DOM node reference.
	     * @param {Node} newNode The new DOM node.
	     */function replaceWith($rootElement,elementsToRemove,newNode){var firstElementToRemove=elementsToRemove[0],removeCount=elementsToRemove.length,parent=firstElementToRemove.parentNode,i,ii;if($rootElement){for(i=0,ii=$rootElement.length;i<ii;i++){if($rootElement[i]===firstElementToRemove){$rootElement[i++]=newNode;for(var j=i,j2=j+removeCount-1,jj=$rootElement.length;j<jj;j++,j2++){if(j2<jj){$rootElement[j]=$rootElement[j2];}else{delete $rootElement[j];}}$rootElement.length-=removeCount-1;// If the replaced element is also the jQuery .context then replace it
	// .context is a deprecated jQuery api, so we should set it only when jQuery set it
	// http://api.jquery.com/context/
	if($rootElement.context===firstElementToRemove){$rootElement.context=newNode;}break;}}}if(parent){parent.replaceChild(newNode,firstElementToRemove);}// Append all the `elementsToRemove` to a fragment. This will...
	// - remove them from the DOM
	// - allow them to still be traversed with .nextSibling
	// - allow a single fragment.qSA to fetch all elements being removed
	var fragment=window.document.createDocumentFragment();for(i=0;i<removeCount;i++){fragment.appendChild(elementsToRemove[i]);}if(jqLite.hasData(firstElementToRemove)){// Copy over user data (that includes Angular's $scope etc.). Don't copy private
	// data here because there's no public interface in jQuery to do that and copying over
	// event listeners (which is the main use of private data) wouldn't work anyway.
	jqLite.data(newNode,jqLite.data(firstElementToRemove));// Remove $destroy event listeners from `firstElementToRemove`
	jqLite(firstElementToRemove).off('$destroy');}// Cleanup any data/listeners on the elements and children.
	// This includes invoking the $destroy event on any elements with listeners.
	jqLite.cleanData(fragment.querySelectorAll('*'));// Update the jqLite collection to only contain the `newNode`
	for(i=1;i<removeCount;i++){delete elementsToRemove[i];}elementsToRemove[0]=newNode;elementsToRemove.length=1;}function cloneAndAnnotateFn(fn,annotation){return extend(function(){return fn.apply(null,arguments);},fn,annotation);}function invokeLinkFn(linkFn,scope,$element,attrs,controllers,transcludeFn){try{linkFn(scope,$element,attrs,controllers,transcludeFn);}catch(e){$exceptionHandler(e,startingTag($element));}}// Set up $watches for isolate scope and controller bindings.
	function initializeDirectiveBindings(scope,attrs,destination,bindings,directive){var removeWatchCollection=[];var initialChanges={};var changes;forEach(bindings,function initializeBinding(definition,scopeName){var attrName=definition.attrName,optional=definition.optional,mode=definition.mode,// @, =, <, or &
	lastValue,parentGet,parentSet,compare,removeWatch;switch(mode){case'@':if(!optional&&!hasOwnProperty.call(attrs,attrName)){destination[scopeName]=attrs[attrName]=undefined;}removeWatch=attrs.$observe(attrName,function(value){if(isString(value)||isBoolean(value)){var oldValue=destination[scopeName];recordChanges(scopeName,value,oldValue);destination[scopeName]=value;}});attrs.$$observers[attrName].$$scope=scope;lastValue=attrs[attrName];if(isString(lastValue)){// If the attribute has been provided then we trigger an interpolation to ensure
	// the value is there for use in the link fn
	destination[scopeName]=$interpolate(lastValue)(scope);}else if(isBoolean(lastValue)){// If the attributes is one of the BOOLEAN_ATTR then Angular will have converted
	// the value to boolean rather than a string, so we special case this situation
	destination[scopeName]=lastValue;}initialChanges[scopeName]=new SimpleChange(_UNINITIALIZED_VALUE,destination[scopeName]);removeWatchCollection.push(removeWatch);break;case'=':if(!hasOwnProperty.call(attrs,attrName)){if(optional)break;attrs[attrName]=undefined;}if(optional&&!attrs[attrName])break;parentGet=$parse(attrs[attrName]);if(parentGet.literal){compare=equals;}else{compare=simpleCompare;}parentSet=parentGet.assign||function(){// reset the change, or we will throw this exception on every $digest
	lastValue=destination[scopeName]=parentGet(scope);throw $compileMinErr('nonassign','Expression \'{0}\' in attribute \'{1}\' used with directive \'{2}\' is non-assignable!',attrs[attrName],attrName,directive.name);};lastValue=destination[scopeName]=parentGet(scope);var parentValueWatch=function parentValueWatch(parentValue){if(!compare(parentValue,destination[scopeName])){// we are out of sync and need to copy
	if(!compare(parentValue,lastValue)){// parent changed and it has precedence
	destination[scopeName]=parentValue;}else{// if the parent can be assigned then do so
	parentSet(scope,parentValue=destination[scopeName]);}}lastValue=parentValue;return lastValue;};parentValueWatch.$stateful=true;if(definition.collection){removeWatch=scope.$watchCollection(attrs[attrName],parentValueWatch);}else{removeWatch=scope.$watch($parse(attrs[attrName],parentValueWatch),null,parentGet.literal);}removeWatchCollection.push(removeWatch);break;case'<':if(!hasOwnProperty.call(attrs,attrName)){if(optional)break;attrs[attrName]=undefined;}if(optional&&!attrs[attrName])break;parentGet=$parse(attrs[attrName]);var deepWatch=parentGet.literal;var initialValue=destination[scopeName]=parentGet(scope);initialChanges[scopeName]=new SimpleChange(_UNINITIALIZED_VALUE,destination[scopeName]);removeWatch=scope.$watch(parentGet,function parentValueWatchAction(newValue,oldValue){if(oldValue===newValue){if(oldValue===initialValue||deepWatch&&equals(oldValue,initialValue)){return;}oldValue=initialValue;}recordChanges(scopeName,newValue,oldValue);destination[scopeName]=newValue;},deepWatch);removeWatchCollection.push(removeWatch);break;case'&':// Don't assign Object.prototype method to scope
	parentGet=attrs.hasOwnProperty(attrName)?$parse(attrs[attrName]):noop;// Don't assign noop to destination if expression is not valid
	if(parentGet===noop&&optional)break;destination[scopeName]=function(locals){return parentGet(scope,locals);};break;}});function recordChanges(key,currentValue,previousValue){if(isFunction(destination.$onChanges)&&!simpleCompare(currentValue,previousValue)){// If we have not already scheduled the top level onChangesQueue handler then do so now
	if(!onChangesQueue){scope.$$postDigest(flushOnChangesQueue);onChangesQueue=[];}// If we have not already queued a trigger of onChanges for this controller then do so now
	if(!changes){changes={};onChangesQueue.push(triggerOnChangesHook);}// If the has been a change on this property already then we need to reuse the previous value
	if(changes[key]){previousValue=changes[key].previousValue;}// Store this change
	changes[key]=new SimpleChange(previousValue,currentValue);}}function triggerOnChangesHook(){destination.$onChanges(changes);// Now clear the changes so that we schedule onChanges when more changes arrive
	changes=undefined;}return{initialChanges:initialChanges,removeWatches:removeWatchCollection.length&&function removeWatches(){for(var i=0,ii=removeWatchCollection.length;i<ii;++i){removeWatchCollection[i]();}}};}}];}function SimpleChange(previous,current){this.previousValue=previous;this.currentValue=current;}SimpleChange.prototype.isFirstChange=function(){return this.previousValue===_UNINITIALIZED_VALUE;};var PREFIX_REGEXP=/^((?:x|data)[:\-_])/i;var SPECIAL_CHARS_REGEXP=/[:\-_]+(.)/g;/**
	 * Converts all accepted directives format into proper directive name.
	 * @param name Name to normalize
	 */function directiveNormalize(name){return name.replace(PREFIX_REGEXP,'').replace(SPECIAL_CHARS_REGEXP,fnCamelCaseReplace);}/**
	 * @ngdoc type
	 * @name $compile.directive.Attributes
	 *
	 * @description
	 * A shared object between directive compile / linking functions which contains normalized DOM
	 * element attributes. The values reflect current binding state `{{ }}`. The normalization is
	 * needed since all of these are treated as equivalent in Angular:
	 *
	 * ```
	 *    <span ng:bind="a" ng-bind="a" data-ng-bind="a" x-ng-bind="a">
	 * ```
	 *//**
	 * @ngdoc property
	 * @name $compile.directive.Attributes#$attr
	 *
	 * @description
	 * A map of DOM element attribute names to the normalized name. This is
	 * needed to do reverse lookup from normalized name back to actual name.
	 *//**
	 * @ngdoc method
	 * @name $compile.directive.Attributes#$set
	 * @kind function
	 *
	 * @description
	 * Set DOM element attribute value.
	 *
	 *
	 * @param {string} name Normalized element attribute name of the property to modify. The name is
	 *          reverse-translated using the {@link ng.$compile.directive.Attributes#$attr $attr}
	 *          property to the original name.
	 * @param {string} value Value to set the attribute to. The value can be an interpolated string.
	 *//**
	 * Closure compiler type information
	 */function nodesetLinkingFn(/* angular.Scope */scope,/* NodeList */nodeList,/* Element */rootElement,/* function(Function) */boundTranscludeFn){}function directiveLinkingFn(/* nodesetLinkingFn */nodesetLinkingFn,/* angular.Scope */scope,/* Node */node,/* Element */rootElement,/* function(Function) */boundTranscludeFn){}function tokenDifference(str1,str2){var values='',tokens1=str1.split(/\s+/),tokens2=str2.split(/\s+/);outer:for(var i=0;i<tokens1.length;i++){var token=tokens1[i];for(var j=0;j<tokens2.length;j++){if(token===tokens2[j])continue outer;}values+=(values.length>0?' ':'')+token;}return values;}function removeComments(jqNodes){jqNodes=jqLite(jqNodes);var i=jqNodes.length;if(i<=1){return jqNodes;}while(i--){var node=jqNodes[i];if(node.nodeType===NODE_TYPE_COMMENT||node.nodeType===NODE_TYPE_TEXT&&node.nodeValue.trim()===''){splice.call(jqNodes,i,1);}}return jqNodes;}var $controllerMinErr=minErr('$controller');var CNTRL_REG=/^(\S+)(\s+as\s+([\w$]+))?$/;function identifierForController(controller,ident){if(ident&&isString(ident))return ident;if(isString(controller)){var match=CNTRL_REG.exec(controller);if(match)return match[3];}}/**
	 * @ngdoc provider
	 * @name $controllerProvider
	 * @this
	 *
	 * @description
	 * The {@link ng.$controller $controller service} is used by Angular to create new
	 * controllers.
	 *
	 * This provider allows controller registration via the
	 * {@link ng.$controllerProvider#register register} method.
	 */function $ControllerProvider(){var controllers={},globals=false;/**
	   * @ngdoc method
	   * @name $controllerProvider#has
	   * @param {string} name Controller name to check.
	   */this.has=function(name){return controllers.hasOwnProperty(name);};/**
	   * @ngdoc method
	   * @name $controllerProvider#register
	   * @param {string|Object} name Controller name, or an object map of controllers where the keys are
	   *    the names and the values are the constructors.
	   * @param {Function|Array} constructor Controller constructor fn (optionally decorated with DI
	   *    annotations in the array notation).
	   */this.register=function(name,constructor){assertNotHasOwnProperty(name,'controller');if(isObject(name)){extend(controllers,name);}else{controllers[name]=constructor;}};/**
	   * @ngdoc method
	   * @name $controllerProvider#allowGlobals
	   * @description If called, allows `$controller` to find controller constructors on `window`
	   *
	   * @deprecated
	   * sinceVersion="v1.3.0"
	   * removeVersion="v1.7.0"
	   * This method of finding controllers has been deprecated.
	   */this.allowGlobals=function(){globals=true;};this.$get=['$injector','$window',function($injector,$window){/**
	     * @ngdoc service
	     * @name $controller
	     * @requires $injector
	     *
	     * @param {Function|string} constructor If called with a function then it's considered to be the
	     *    controller constructor function. Otherwise it's considered to be a string which is used
	     *    to retrieve the controller constructor using the following steps:
	     *
	     *    * check if a controller with given name is registered via `$controllerProvider`
	     *    * check if evaluating the string on the current scope returns a constructor
	     *    * if $controllerProvider#allowGlobals, check `window[constructor]` on the global
	     *      `window` object (deprecated, not recommended)
	     *
	     *    The string can use the `controller as property` syntax, where the controller instance is published
	     *    as the specified property on the `scope`; the `scope` must be injected into `locals` param for this
	     *    to work correctly.
	     *
	     * @param {Object} locals Injection locals for Controller.
	     * @return {Object} Instance of given controller.
	     *
	     * @description
	     * `$controller` service is responsible for instantiating controllers.
	     *
	     * It's just a simple call to {@link auto.$injector $injector}, but extracted into
	     * a service, so that one can override this service with [BC version](https://gist.github.com/1649788).
	     */return function $controller(expression,locals,later,ident){// PRIVATE API:
	//   param `later` --- indicates that the controller's constructor is invoked at a later time.
	//                     If true, $controller will allocate the object with the correct
	//                     prototype chain, but will not invoke the controller until a returned
	//                     callback is invoked.
	//   param `ident` --- An optional label which overrides the label parsed from the controller
	//                     expression, if any.
	var instance,match,constructor,identifier;later=later===true;if(ident&&isString(ident)){identifier=ident;}if(isString(expression)){match=expression.match(CNTRL_REG);if(!match){throw $controllerMinErr('ctrlfmt','Badly formed controller string \'{0}\'. '+'Must match `__name__ as __id__` or `__name__`.',expression);}constructor=match[1];identifier=identifier||match[3];expression=controllers.hasOwnProperty(constructor)?controllers[constructor]:getter(locals.$scope,constructor,true)||(globals?getter($window,constructor,true):undefined);if(!expression){throw $controllerMinErr('ctrlreg','The controller with the name \'{0}\' is not registered.',constructor);}assertArgFn(expression,constructor,true);}if(later){// Instantiate controller later:
	// This machinery is used to create an instance of the object before calling the
	// controller's constructor itself.
	//
	// This allows properties to be added to the controller before the constructor is
	// invoked. Primarily, this is used for isolate scope bindings in $compile.
	//
	// This feature is not intended for use by applications, and is thus not documented
	// publicly.
	// Object creation: http://jsperf.com/create-constructor/2
	var controllerPrototype=(isArray(expression)?expression[expression.length-1]:expression).prototype;instance=Object.create(controllerPrototype||null);if(identifier){addIdentifier(locals,identifier,instance,constructor||expression.name);}return extend(function $controllerInit(){var result=$injector.invoke(expression,instance,locals,constructor);if(result!==instance&&(isObject(result)||isFunction(result))){instance=result;if(identifier){// If result changed, re-assign controllerAs value to scope.
	addIdentifier(locals,identifier,instance,constructor||expression.name);}}return instance;},{instance:instance,identifier:identifier});}instance=$injector.instantiate(expression,locals,constructor);if(identifier){addIdentifier(locals,identifier,instance,constructor||expression.name);}return instance;};function addIdentifier(locals,identifier,instance,name){if(!(locals&&isObject(locals.$scope))){throw minErr('$controller')('noscp','Cannot export controller \'{0}\' as \'{1}\'! No $scope object provided via `locals`.',name,identifier);}locals.$scope[identifier]=instance;}}];}/**
	 * @ngdoc service
	 * @name $document
	 * @requires $window
	 * @this
	 *
	 * @description
	 * A {@link angular.element jQuery or jqLite} wrapper for the browser's `window.document` object.
	 *
	 * @example
	   <example module="documentExample" name="document">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <p>$document title: <b ng-bind="title"></b></p>
	         <p>window.document title: <b ng-bind="windowTitle"></b></p>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('documentExample', [])
	         .controller('ExampleController', ['$scope', '$document', function($scope, $document) {
	           $scope.title = $document[0].title;
	           $scope.windowTitle = angular.element(window.document)[0].title;
	         }]);
	     </file>
	   </example>
	 */function $DocumentProvider(){this.$get=['$window',function(window){return jqLite(window.document);}];}/**
	 * @private
	 * @this
	 * Listens for document visibility change and makes the current status accessible.
	 */function $$IsDocumentHiddenProvider(){this.$get=['$document','$rootScope',function($document,$rootScope){var doc=$document[0];var hidden=doc&&doc.hidden;$document.on('visibilitychange',changeListener);$rootScope.$on('$destroy',function(){$document.off('visibilitychange',changeListener);});function changeListener(){hidden=doc.hidden;}return function(){return hidden;};}];}/**
	 * @ngdoc service
	 * @name $exceptionHandler
	 * @requires ng.$log
	 * @this
	 *
	 * @description
	 * Any uncaught exception in angular expressions is delegated to this service.
	 * The default implementation simply delegates to `$log.error` which logs it into
	 * the browser console.
	 *
	 * In unit tests, if `angular-mocks.js` is loaded, this service is overridden by
	 * {@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.
	 *
	 * ## Example:
	 *
	 * The example below will overwrite the default `$exceptionHandler` in order to (a) log uncaught
	 * errors to the backend for later inspection by the developers and (b) to use `$log.warn()` instead
	 * of `$log.error()`.
	 *
	 * ```js
	 *   angular.
	 *     module('exceptionOverwrite', []).
	 *     factory('$exceptionHandler', ['$log', 'logErrorsToBackend', function($log, logErrorsToBackend) {
	 *       return function myExceptionHandler(exception, cause) {
	 *         logErrorsToBackend(exception, cause);
	 *         $log.warn(exception, cause);
	 *       };
	 *     }]);
	 * ```
	 *
	 * <hr />
	 * Note, that code executed in event-listeners (even those registered using jqLite's `on`/`bind`
	 * methods) does not delegate exceptions to the {@link ng.$exceptionHandler $exceptionHandler}
	 * (unless executed during a digest).
	 *
	 * If you wish, you can manually delegate exceptions, e.g.
	 * `try { ... } catch(e) { $exceptionHandler(e); }`
	 *
	 * @param {Error} exception Exception associated with the error.
	 * @param {string=} cause Optional information about the context in which
	 *       the error was thrown.
	 *
	 */function $ExceptionHandlerProvider(){this.$get=['$log',function($log){return function(exception,cause){$log.error.apply($log,arguments);};}];}var $$ForceReflowProvider=/** @this */function $$ForceReflowProvider(){this.$get=['$document',function($document){return function(domNode){//the line below will force the browser to perform a repaint so
	//that all the animated elements within the animation frame will
	//be properly updated and drawn on screen. This is required to
	//ensure that the preparation animation is properly flushed so that
	//the active state picks up from there. DO NOT REMOVE THIS LINE.
	//DO NOT OPTIMIZE THIS LINE. THE MINIFIER WILL REMOVE IT OTHERWISE WHICH
	//WILL RESULT IN AN UNPREDICTABLE BUG THAT IS VERY HARD TO TRACK DOWN AND
	//WILL TAKE YEARS AWAY FROM YOUR LIFE.
	if(domNode){if(!domNode.nodeType&&domNode instanceof jqLite){domNode=domNode[0];}}else{domNode=$document[0].body;}return domNode.offsetWidth+1;};}];};var APPLICATION_JSON='application/json';var CONTENT_TYPE_APPLICATION_JSON={'Content-Type':APPLICATION_JSON+';charset=utf-8'};var JSON_START=/^\[|^\{(?!\{)/;var JSON_ENDS={'[':/]$/,'{':/}$/};var JSON_PROTECTION_PREFIX=/^\)]\}',?\n/;var $httpMinErr=minErr('$http');function serializeValue(v){if(isObject(v)){return isDate(v)?v.toISOString():toJson(v);}return v;}/** @this */function $HttpParamSerializerProvider(){/**
	   * @ngdoc service
	   * @name $httpParamSerializer
	   * @description
	   *
	   * Default {@link $http `$http`} params serializer that converts objects to strings
	   * according to the following rules:
	   *
	   * * `{'foo': 'bar'}` results in `foo=bar`
	   * * `{'foo': Date.now()}` results in `foo=2015-04-01T09%3A50%3A49.262Z` (`toISOString()` and encoded representation of a Date object)
	   * * `{'foo': ['bar', 'baz']}` results in `foo=bar&foo=baz` (repeated key for each array element)
	   * * `{'foo': {'bar':'baz'}}` results in `foo=%7B%22bar%22%3A%22baz%22%7D` (stringified and encoded representation of an object)
	   *
	   * Note that serializer will sort the request parameters alphabetically.
	   * */this.$get=function(){return function ngParamSerializer(params){if(!params)return'';var parts=[];forEachSorted(params,function(value,key){if(value===null||isUndefined(value))return;if(isArray(value)){forEach(value,function(v){parts.push(encodeUriQuery(key)+'='+encodeUriQuery(serializeValue(v)));});}else{parts.push(encodeUriQuery(key)+'='+encodeUriQuery(serializeValue(value)));}});return parts.join('&');};};}/** @this */function $HttpParamSerializerJQLikeProvider(){/**
	   * @ngdoc service
	   * @name $httpParamSerializerJQLike
	   *
	   * @description
	   *
	   * Alternative {@link $http `$http`} params serializer that follows
	   * jQuery's [`param()`](http://api.jquery.com/jquery.param/) method logic.
	   * The serializer will also sort the params alphabetically.
	   *
	   * To use it for serializing `$http` request parameters, set it as the `paramSerializer` property:
	   *
	   * ```js
	   * $http({
	   *   url: myUrl,
	   *   method: 'GET',
	   *   params: myParams,
	   *   paramSerializer: '$httpParamSerializerJQLike'
	   * });
	   * ```
	   *
	   * It is also possible to set it as the default `paramSerializer` in the
	   * {@link $httpProvider#defaults `$httpProvider`}.
	   *
	   * Additionally, you can inject the serializer and use it explicitly, for example to serialize
	   * form data for submission:
	   *
	   * ```js
	   * .controller(function($http, $httpParamSerializerJQLike) {
	   *   //...
	   *
	   *   $http({
	   *     url: myUrl,
	   *     method: 'POST',
	   *     data: $httpParamSerializerJQLike(myData),
	   *     headers: {
	   *       'Content-Type': 'application/x-www-form-urlencoded'
	   *     }
	   *   });
	   *
	   * });
	   * ```
	   *
	   * */this.$get=function(){return function jQueryLikeParamSerializer(params){if(!params)return'';var parts=[];serialize(params,'',true);return parts.join('&');function serialize(toSerialize,prefix,topLevel){if(toSerialize===null||isUndefined(toSerialize))return;if(isArray(toSerialize)){forEach(toSerialize,function(value,index){serialize(value,prefix+'['+(isObject(value)?index:'')+']');});}else if(isObject(toSerialize)&&!isDate(toSerialize)){forEachSorted(toSerialize,function(value,key){serialize(value,prefix+(topLevel?'':'[')+key+(topLevel?'':']'));});}else{parts.push(encodeUriQuery(prefix)+'='+encodeUriQuery(serializeValue(toSerialize)));}}};};}function defaultHttpResponseTransform(data,headers){if(isString(data)){// Strip json vulnerability protection prefix and trim whitespace
	var tempData=data.replace(JSON_PROTECTION_PREFIX,'').trim();if(tempData){var contentType=headers('Content-Type');if(contentType&&contentType.indexOf(APPLICATION_JSON)===0||isJsonLike(tempData)){try{data=fromJson(tempData);}catch(e){throw $httpMinErr('baddata','Data must be a valid JSON object. Received: "{0}". '+'Parse error: "{1}"',data,e);}}}}return data;}function isJsonLike(str){var jsonStart=str.match(JSON_START);return jsonStart&&JSON_ENDS[jsonStart[0]].test(str);}/**
	 * Parse headers into key value object
	 *
	 * @param {string} headers Raw headers as a string
	 * @returns {Object} Parsed headers as key value object
	 */function parseHeaders(headers){var parsed=createMap(),i;function fillInParsed(key,val){if(key){parsed[key]=parsed[key]?parsed[key]+', '+val:val;}}if(isString(headers)){forEach(headers.split('\n'),function(line){i=line.indexOf(':');fillInParsed(lowercase(trim(line.substr(0,i))),trim(line.substr(i+1)));});}else if(isObject(headers)){forEach(headers,function(headerVal,headerKey){fillInParsed(lowercase(headerKey),trim(headerVal));});}return parsed;}/**
	 * Returns a function that provides access to parsed headers.
	 *
	 * Headers are lazy parsed when first requested.
	 * @see parseHeaders
	 *
	 * @param {(string|Object)} headers Headers to provide access to.
	 * @returns {function(string=)} Returns a getter function which if called with:
	 *
	 *   - if called with an argument returns a single header value or null
	 *   - if called with no arguments returns an object containing all headers.
	 */function headersGetter(headers){var headersObj;return function(name){if(!headersObj)headersObj=parseHeaders(headers);if(name){var value=headersObj[lowercase(name)];if(value===undefined){value=null;}return value;}return headersObj;};}/**
	 * Chain all given functions
	 *
	 * This function is used for both request and response transforming
	 *
	 * @param {*} data Data to transform.
	 * @param {function(string=)} headers HTTP headers getter fn.
	 * @param {number} status HTTP status code of the response.
	 * @param {(Function|Array.<Function>)} fns Function or an array of functions.
	 * @returns {*} Transformed data.
	 */function transformData(data,headers,status,fns){if(isFunction(fns)){return fns(data,headers,status);}forEach(fns,function(fn){data=fn(data,headers,status);});return data;}function isSuccess(status){return 200<=status&&status<300;}/**
	 * @ngdoc provider
	 * @name $httpProvider
	 * @this
	 *
	 * @description
	 * Use `$httpProvider` to change the default behavior of the {@link ng.$http $http} service.
	 * */function $HttpProvider(){/**
	   * @ngdoc property
	   * @name $httpProvider#defaults
	   * @description
	   *
	   * Object containing default values for all {@link ng.$http $http} requests.
	   *
	   * - **`defaults.cache`** - {boolean|Object} - A boolean value or object created with
	   * {@link ng.$cacheFactory `$cacheFactory`} to enable or disable caching of HTTP responses
	   * by default. See {@link $http#caching $http Caching} for more information.
	   *
	   * - **`defaults.xsrfCookieName`** - {string} - Name of cookie containing the XSRF token.
	   * Defaults value is `'XSRF-TOKEN'`.
	   *
	   * - **`defaults.xsrfHeaderName`** - {string} - Name of HTTP header to populate with the
	   * XSRF token. Defaults value is `'X-XSRF-TOKEN'`.
	   *
	   * - **`defaults.headers`** - {Object} - Default headers for all $http requests.
	   * Refer to {@link ng.$http#setting-http-headers $http} for documentation on
	   * setting default headers.
	   *     - **`defaults.headers.common`**
	   *     - **`defaults.headers.post`**
	   *     - **`defaults.headers.put`**
	   *     - **`defaults.headers.patch`**
	   *
	   *
	   * - **`defaults.paramSerializer`** - `{string|function(Object<string,string>):string}` - A function
	   *  used to the prepare string representation of request parameters (specified as an object).
	   *  If specified as string, it is interpreted as a function registered with the {@link auto.$injector $injector}.
	   *  Defaults to {@link ng.$httpParamSerializer $httpParamSerializer}.
	   *
	   * - **`defaults.jsonpCallbackParam`** - `{string}` - the name of the query parameter that passes the name of the
	   * callback in a JSONP request. The value of this parameter will be replaced with the expression generated by the
	   * {@link $jsonpCallbacks} service. Defaults to `'callback'`.
	   *
	   **/var defaults=this.defaults={// transform incoming response data
	transformResponse:[defaultHttpResponseTransform],// transform outgoing request data
	transformRequest:[function(d){return isObject(d)&&!isFile(d)&&!isBlob(d)&&!isFormData(d)?toJson(d):d;}],// default headers
	headers:{common:{'Accept':'application/json, text/plain, */*'},post:shallowCopy(CONTENT_TYPE_APPLICATION_JSON),put:shallowCopy(CONTENT_TYPE_APPLICATION_JSON),patch:shallowCopy(CONTENT_TYPE_APPLICATION_JSON)},xsrfCookieName:'XSRF-TOKEN',xsrfHeaderName:'X-XSRF-TOKEN',paramSerializer:'$httpParamSerializer',jsonpCallbackParam:'callback'};var useApplyAsync=false;/**
	   * @ngdoc method
	   * @name $httpProvider#useApplyAsync
	   * @description
	   *
	   * Configure $http service to combine processing of multiple http responses received at around
	   * the same time via {@link ng.$rootScope.Scope#$applyAsync $rootScope.$applyAsync}. This can result in
	   * significant performance improvement for bigger applications that make many HTTP requests
	   * concurrently (common during application bootstrap).
	   *
	   * Defaults to false. If no value is specified, returns the current configured value.
	   *
	   * @param {boolean=} value If true, when requests are loaded, they will schedule a deferred
	   *    "apply" on the next tick, giving time for subsequent requests in a roughly ~10ms window
	   *    to load and share the same digest cycle.
	   *
	   * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.
	   *    otherwise, returns the current configured value.
	   **/this.useApplyAsync=function(value){if(isDefined(value)){useApplyAsync=!!value;return this;}return useApplyAsync;};/**
	   * @ngdoc property
	   * @name $httpProvider#interceptors
	   * @description
	   *
	   * Array containing service factories for all synchronous or asynchronous {@link ng.$http $http}
	   * pre-processing of request or postprocessing of responses.
	   *
	   * These service factories are ordered by request, i.e. they are applied in the same order as the
	   * array, on request, but reverse order, on response.
	   *
	   * {@link ng.$http#interceptors Interceptors detailed info}
	   **/var interceptorFactories=this.interceptors=[];this.$get=['$browser','$httpBackend','$$cookieReader','$cacheFactory','$rootScope','$q','$injector','$sce',function($browser,$httpBackend,$$cookieReader,$cacheFactory,$rootScope,$q,$injector,$sce){var defaultCache=$cacheFactory('$http');/**
	     * Make sure that default param serializer is exposed as a function
	     */defaults.paramSerializer=isString(defaults.paramSerializer)?$injector.get(defaults.paramSerializer):defaults.paramSerializer;/**
	     * Interceptors stored in reverse order. Inner interceptors before outer interceptors.
	     * The reversal is needed so that we can build up the interception chain around the
	     * server request.
	     */var reversedInterceptors=[];forEach(interceptorFactories,function(interceptorFactory){reversedInterceptors.unshift(isString(interceptorFactory)?$injector.get(interceptorFactory):$injector.invoke(interceptorFactory));});/**
	     * @ngdoc service
	     * @kind function
	     * @name $http
	     * @requires ng.$httpBackend
	     * @requires $cacheFactory
	     * @requires $rootScope
	     * @requires $q
	     * @requires $injector
	     *
	     * @description
	     * The `$http` service is a core Angular service that facilitates communication with the remote
	     * HTTP servers via the browser's [XMLHttpRequest](https://developer.mozilla.org/en/xmlhttprequest)
	     * object or via [JSONP](http://en.wikipedia.org/wiki/JSONP).
	     *
	     * For unit testing applications that use `$http` service, see
	     * {@link ngMock.$httpBackend $httpBackend mock}.
	     *
	     * For a higher level of abstraction, please check out the {@link ngResource.$resource
	     * $resource} service.
	     *
	     * The $http API is based on the {@link ng.$q deferred/promise APIs} exposed by
	     * the $q service. While for simple usage patterns this doesn't matter much, for advanced usage
	     * it is important to familiarize yourself with these APIs and the guarantees they provide.
	     *
	     *
	     * ## General usage
	     * The `$http` service is a function which takes a single argument — a {@link $http#usage configuration object} —
	     * that is used to generate an HTTP request and returns  a {@link ng.$q promise}.
	     *
	     * ```js
	     *   // Simple GET request example:
	     *   $http({
	     *     method: 'GET',
	     *     url: '/someUrl'
	     *   }).then(function successCallback(response) {
	     *       // this callback will be called asynchronously
	     *       // when the response is available
	     *     }, function errorCallback(response) {
	     *       // called asynchronously if an error occurs
	     *       // or server returns response with an error status.
	     *     });
	     * ```
	     *
	     * The response object has these properties:
	     *
	     *   - **data** – `{string|Object}` – The response body transformed with the transform
	     *     functions.
	     *   - **status** – `{number}` – HTTP status code of the response.
	     *   - **headers** – `{function([headerName])}` – Header getter function.
	     *   - **config** – `{Object}` – The configuration object that was used to generate the request.
	     *   - **statusText** – `{string}` – HTTP status text of the response.
	     *
	     * A response status code between 200 and 299 is considered a success status and will result in
	     * the success callback being called. Any response status code outside of that range is
	     * considered an error status and will result in the error callback being called.
	     * Also, status codes less than -1 are normalized to zero. -1 usually means the request was
	     * aborted, e.g. using a `config.timeout`.
	     * Note that if the response is a redirect, XMLHttpRequest will transparently follow it, meaning
	     * that the outcome (success or error) will be determined by the final response status code.
	     *
	     *
	     * ## Shortcut methods
	     *
	     * Shortcut methods are also available. All shortcut methods require passing in the URL, and
	     * request data must be passed in for POST/PUT requests. An optional config can be passed as the
	     * last argument.
	     *
	     * ```js
	     *   $http.get('/someUrl', config).then(successCallback, errorCallback);
	     *   $http.post('/someUrl', data, config).then(successCallback, errorCallback);
	     * ```
	     *
	     * Complete list of shortcut methods:
	     *
	     * - {@link ng.$http#get $http.get}
	     * - {@link ng.$http#head $http.head}
	     * - {@link ng.$http#post $http.post}
	     * - {@link ng.$http#put $http.put}
	     * - {@link ng.$http#delete $http.delete}
	     * - {@link ng.$http#jsonp $http.jsonp}
	     * - {@link ng.$http#patch $http.patch}
	     *
	     *
	     * ## Writing Unit Tests that use $http
	     * When unit testing (using {@link ngMock ngMock}), it is necessary to call
	     * {@link ngMock.$httpBackend#flush $httpBackend.flush()} to flush each pending
	     * request using trained responses.
	     *
	     * ```
	     * $httpBackend.expectGET(...);
	     * $http.get(...);
	     * $httpBackend.flush();
	     * ```
	     *
	     * ## Setting HTTP Headers
	     *
	     * The $http service will automatically add certain HTTP headers to all requests. These defaults
	     * can be fully configured by accessing the `$httpProvider.defaults.headers` configuration
	     * object, which currently contains this default configuration:
	     *
	     * - `$httpProvider.defaults.headers.common` (headers that are common for all requests):
	     *   - <code>Accept: application/json, text/plain, \*&#65279;/&#65279;\*</code>
	     * - `$httpProvider.defaults.headers.post`: (header defaults for POST requests)
	     *   - `Content-Type: application/json`
	     * - `$httpProvider.defaults.headers.put` (header defaults for PUT requests)
	     *   - `Content-Type: application/json`
	     *
	     * To add or overwrite these defaults, simply add or remove a property from these configuration
	     * objects. To add headers for an HTTP method other than POST or PUT, simply add a new object
	     * with the lowercased HTTP method name as the key, e.g.
	     * `$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }`.
	     *
	     * The defaults can also be set at runtime via the `$http.defaults` object in the same
	     * fashion. For example:
	     *
	     * ```
	     * module.run(function($http) {
	     *   $http.defaults.headers.common.Authorization = 'Basic YmVlcDpib29w';
	     * });
	     * ```
	     *
	     * In addition, you can supply a `headers` property in the config object passed when
	     * calling `$http(config)`, which overrides the defaults without changing them globally.
	     *
	     * To explicitly remove a header automatically added via $httpProvider.defaults.headers on a per request basis,
	     * Use the `headers` property, setting the desired header to `undefined`. For example:
	     *
	     * ```js
	     * var req = {
	     *  method: 'POST',
	     *  url: 'http://example.com',
	     *  headers: {
	     *    'Content-Type': undefined
	     *  },
	     *  data: { test: 'test' }
	     * }
	     *
	     * $http(req).then(function(){...}, function(){...});
	     * ```
	     *
	     * ## Transforming Requests and Responses
	     *
	     * Both requests and responses can be transformed using transformation functions: `transformRequest`
	     * and `transformResponse`. These properties can be a single function that returns
	     * the transformed value (`function(data, headersGetter, status)`) or an array of such transformation functions,
	     * which allows you to `push` or `unshift` a new transformation function into the transformation chain.
	     *
	     * <div class="alert alert-warning">
	     * **Note:** Angular does not make a copy of the `data` parameter before it is passed into the `transformRequest` pipeline.
	     * That means changes to the properties of `data` are not local to the transform function (since Javascript passes objects by reference).
	     * For example, when calling `$http.get(url, $scope.myObject)`, modifications to the object's properties in a transformRequest
	     * function will be reflected on the scope and in any templates where the object is data-bound.
	     * To prevent this, transform functions should have no side-effects.
	     * If you need to modify properties, it is recommended to make a copy of the data, or create new object to return.
	     * </div>
	     *
	     * ### Default Transformations
	     *
	     * The `$httpProvider` provider and `$http` service expose `defaults.transformRequest` and
	     * `defaults.transformResponse` properties. If a request does not provide its own transformations
	     * then these will be applied.
	     *
	     * You can augment or replace the default transformations by modifying these properties by adding to or
	     * replacing the array.
	     *
	     * Angular provides the following default transformations:
	     *
	     * Request transformations (`$httpProvider.defaults.transformRequest` and `$http.defaults.transformRequest`):
	     *
	     * - If the `data` property of the request configuration object contains an object, serialize it
	     *   into JSON format.
	     *
	     * Response transformations (`$httpProvider.defaults.transformResponse` and `$http.defaults.transformResponse`):
	     *
	     *  - If XSRF prefix is detected, strip it (see Security Considerations section below).
	     *  - If JSON response is detected, deserialize it using a JSON parser.
	     *
	     *
	     * ### Overriding the Default Transformations Per Request
	     *
	     * If you wish to override the request/response transformations only for a single request then provide
	     * `transformRequest` and/or `transformResponse` properties on the configuration object passed
	     * into `$http`.
	     *
	     * Note that if you provide these properties on the config object the default transformations will be
	     * overwritten. If you wish to augment the default transformations then you must include them in your
	     * local transformation array.
	     *
	     * The following code demonstrates adding a new response transformation to be run after the default response
	     * transformations have been run.
	     *
	     * ```js
	     * function appendTransform(defaults, transform) {
	     *
	     *   // We can't guarantee that the default transformation is an array
	     *   defaults = angular.isArray(defaults) ? defaults : [defaults];
	     *
	     *   // Append the new transformation to the defaults
	     *   return defaults.concat(transform);
	     * }
	     *
	     * $http({
	     *   url: '...',
	     *   method: 'GET',
	     *   transformResponse: appendTransform($http.defaults.transformResponse, function(value) {
	     *     return doTransform(value);
	     *   })
	     * });
	     * ```
	     *
	     *
	     * ## Caching
	     *
	     * {@link ng.$http `$http`} responses are not cached by default. To enable caching, you must
	     * set the config.cache value or the default cache value to TRUE or to a cache object (created
	     * with {@link ng.$cacheFactory `$cacheFactory`}). If defined, the value of config.cache takes
	     * precedence over the default cache value.
	     *
	     * In order to:
	     *   * cache all responses - set the default cache value to TRUE or to a cache object
	     *   * cache a specific response - set config.cache value to TRUE or to a cache object
	     *
	     * If caching is enabled, but neither the default cache nor config.cache are set to a cache object,
	     * then the default `$cacheFactory("$http")` object is used.
	     *
	     * The default cache value can be set by updating the
	     * {@link ng.$http#defaults `$http.defaults.cache`} property or the
	     * {@link $httpProvider#defaults `$httpProvider.defaults.cache`} property.
	     *
	     * When caching is enabled, {@link ng.$http `$http`} stores the response from the server using
	     * the relevant cache object. The next time the same request is made, the response is returned
	     * from the cache without sending a request to the server.
	     *
	     * Take note that:
	     *
	     *   * Only GET and JSONP requests are cached.
	     *   * The cache key is the request URL including search parameters; headers are not considered.
	     *   * Cached responses are returned asynchronously, in the same way as responses from the server.
	     *   * If multiple identical requests are made using the same cache, which is not yet populated,
	     *     one request will be made to the server and remaining requests will return the same response.
	     *   * A cache-control header on the response does not affect if or how responses are cached.
	     *
	     *
	     * ## Interceptors
	     *
	     * Before you start creating interceptors, be sure to understand the
	     * {@link ng.$q $q and deferred/promise APIs}.
	     *
	     * For purposes of global error handling, authentication, or any kind of synchronous or
	     * asynchronous pre-processing of request or postprocessing of responses, it is desirable to be
	     * able to intercept requests before they are handed to the server and
	     * responses before they are handed over to the application code that
	     * initiated these requests. The interceptors leverage the {@link ng.$q
	     * promise APIs} to fulfill this need for both synchronous and asynchronous pre-processing.
	     *
	     * The interceptors are service factories that are registered with the `$httpProvider` by
	     * adding them to the `$httpProvider.interceptors` array. The factory is called and
	     * injected with dependencies (if specified) and returns the interceptor.
	     *
	     * There are two kinds of interceptors (and two kinds of rejection interceptors):
	     *
	     *   * `request`: interceptors get called with a http {@link $http#usage config} object. The function is free to
	     *     modify the `config` object or create a new one. The function needs to return the `config`
	     *     object directly, or a promise containing the `config` or a new `config` object.
	     *   * `requestError`: interceptor gets called when a previous interceptor threw an error or
	     *     resolved with a rejection.
	     *   * `response`: interceptors get called with http `response` object. The function is free to
	     *     modify the `response` object or create a new one. The function needs to return the `response`
	     *     object directly, or as a promise containing the `response` or a new `response` object.
	     *   * `responseError`: interceptor gets called when a previous interceptor threw an error or
	     *     resolved with a rejection.
	     *
	     *
	     * ```js
	     *   // register the interceptor as a service
	     *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {
	     *     return {
	     *       // optional method
	     *       'request': function(config) {
	     *         // do something on success
	     *         return config;
	     *       },
	     *
	     *       // optional method
	     *      'requestError': function(rejection) {
	     *         // do something on error
	     *         if (canRecover(rejection)) {
	     *           return responseOrNewPromise
	     *         }
	     *         return $q.reject(rejection);
	     *       },
	     *
	     *
	     *
	     *       // optional method
	     *       'response': function(response) {
	     *         // do something on success
	     *         return response;
	     *       },
	     *
	     *       // optional method
	     *      'responseError': function(rejection) {
	     *         // do something on error
	     *         if (canRecover(rejection)) {
	     *           return responseOrNewPromise
	     *         }
	     *         return $q.reject(rejection);
	     *       }
	     *     };
	     *   });
	     *
	     *   $httpProvider.interceptors.push('myHttpInterceptor');
	     *
	     *
	     *   // alternatively, register the interceptor via an anonymous factory
	     *   $httpProvider.interceptors.push(function($q, dependency1, dependency2) {
	     *     return {
	     *      'request': function(config) {
	     *          // same as above
	     *       },
	     *
	     *       'response': function(response) {
	     *          // same as above
	     *       }
	     *     };
	     *   });
	     * ```
	     *
	     * ## Security Considerations
	     *
	     * When designing web applications, consider security threats from:
	     *
	     * - [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
	     * - [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)
	     *
	     * Both server and the client must cooperate in order to eliminate these threats. Angular comes
	     * pre-configured with strategies that address these issues, but for this to work backend server
	     * cooperation is required.
	     *
	     * ### JSON Vulnerability Protection
	     *
	     * A [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
	     * allows third party website to turn your JSON resource URL into
	     * [JSONP](http://en.wikipedia.org/wiki/JSONP) request under some conditions. To
	     * counter this your server can prefix all JSON requests with following string `")]}',\n"`.
	     * Angular will automatically strip the prefix before processing it as JSON.
	     *
	     * For example if your server needs to return:
	     * ```js
	     * ['one','two']
	     * ```
	     *
	     * which is vulnerable to attack, your server can return:
	     * ```js
	     * )]}',
	     * ['one','two']
	     * ```
	     *
	     * Angular will strip the prefix, before processing the JSON.
	     *
	     *
	     * ### Cross Site Request Forgery (XSRF) Protection
	     *
	     * [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery) is an attack technique by
	     * which the attacker can trick an authenticated user into unknowingly executing actions on your
	     * website. Angular provides a mechanism to counter XSRF. When performing XHR requests, the
	     * $http service reads a token from a cookie (by default, `XSRF-TOKEN`) and sets it as an HTTP
	     * header (`X-XSRF-TOKEN`). Since only JavaScript that runs on your domain could read the
	     * cookie, your server can be assured that the XHR came from JavaScript running on your domain.
	     * The header will not be set for cross-domain requests.
	     *
	     * To take advantage of this, your server needs to set a token in a JavaScript readable session
	     * cookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the
	     * server can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure
	     * that only JavaScript running on your domain could have sent the request. The token must be
	     * unique for each user and must be verifiable by the server (to prevent the JavaScript from
	     * making up its own tokens). We recommend that the token is a digest of your site's
	     * authentication cookie with a [salt](https://en.wikipedia.org/wiki/Salt_(cryptography&#41;)
	     * for added security.
	     *
	     * The name of the headers can be specified using the xsrfHeaderName and xsrfCookieName
	     * properties of either $httpProvider.defaults at config-time, $http.defaults at run-time,
	     * or the per-request config object.
	     *
	     * In order to prevent collisions in environments where multiple Angular apps share the
	     * same domain or subdomain, we recommend that each application uses unique cookie name.
	     *
	     * @param {object} config Object describing the request to be made and how it should be
	     *    processed. The object has following properties:
	     *
	     *    - **method** – `{string}` – HTTP method (e.g. 'GET', 'POST', etc)
	     *    - **url** – `{string|TrustedObject}` – Absolute or relative URL of the resource that is being requested;
	     *      or an object created by a call to `$sce.trustAsResourceUrl(url)`.
	     *    - **params** – `{Object.<string|Object>}` – Map of strings or objects which will be serialized
	     *      with the `paramSerializer` and appended as GET parameters.
	     *    - **data** – `{string|Object}` – Data to be sent as the request message data.
	     *    - **headers** – `{Object}` – Map of strings or functions which return strings representing
	     *      HTTP headers to send to the server. If the return value of a function is null, the
	     *      header will not be sent. Functions accept a config object as an argument.
	     *    - **eventHandlers** - `{Object}` - Event listeners to be bound to the XMLHttpRequest object.
	     *      To bind events to the XMLHttpRequest upload object, use `uploadEventHandlers`.
	     *      The handler will be called in the context of a `$apply` block.
	     *    - **uploadEventHandlers** - `{Object}` - Event listeners to be bound to the XMLHttpRequest upload
	     *      object. To bind events to the XMLHttpRequest object, use `eventHandlers`.
	     *      The handler will be called in the context of a `$apply` block.
	     *    - **xsrfHeaderName** – `{string}` – Name of HTTP header to populate with the XSRF token.
	     *    - **xsrfCookieName** – `{string}` – Name of cookie containing the XSRF token.
	     *    - **transformRequest** –
	     *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
	     *      transform function or an array of such functions. The transform function takes the http
	     *      request body and headers and returns its transformed (typically serialized) version.
	     *      See {@link ng.$http#overriding-the-default-transformations-per-request
	     *      Overriding the Default Transformations}
	     *    - **transformResponse** –
	     *      `{function(data, headersGetter, status)|Array.<function(data, headersGetter, status)>}` –
	     *      transform function or an array of such functions. The transform function takes the http
	     *      response body, headers and status and returns its transformed (typically deserialized) version.
	     *      See {@link ng.$http#overriding-the-default-transformations-per-request
	     *      Overriding the Default Transformations}
	     *    - **paramSerializer** - `{string|function(Object<string,string>):string}` - A function used to
	     *      prepare the string representation of request parameters (specified as an object).
	     *      If specified as string, it is interpreted as function registered with the
	     *      {@link $injector $injector}, which means you can create your own serializer
	     *      by registering it as a {@link auto.$provide#service service}.
	     *      The default serializer is the {@link $httpParamSerializer $httpParamSerializer};
	     *      alternatively, you can use the {@link $httpParamSerializerJQLike $httpParamSerializerJQLike}
	     *    - **cache** – `{boolean|Object}` – A boolean value or object created with
	     *      {@link ng.$cacheFactory `$cacheFactory`} to enable or disable caching of the HTTP response.
	     *      See {@link $http#caching $http Caching} for more information.
	     *    - **timeout** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise}
	     *      that should abort the request when resolved.
	     *    - **withCredentials** - `{boolean}` - whether to set the `withCredentials` flag on the
	     *      XHR object. See [requests with credentials](https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials)
	     *      for more information.
	     *    - **responseType** - `{string}` - see
	     *      [XMLHttpRequest.responseType](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#xmlhttprequest-responsetype).
	     *
	     * @returns {HttpPromise} Returns a {@link ng.$q `Promise}` that will be resolved to a response object
	     *                        when the request succeeds or fails.
	     *
	     *
	     * @property {Array.<Object>} pendingRequests Array of config objects for currently pending
	     *   requests. This is primarily meant to be used for debugging purposes.
	     *
	     *
	     * @example
	<example module="httpExample" name="http-service">
	<file name="index.html">
	  <div ng-controller="FetchController">
	    <select ng-model="method" aria-label="Request method">
	      <option>GET</option>
	      <option>JSONP</option>
	    </select>
	    <input type="text" ng-model="url" size="80" aria-label="URL" />
	    <button id="fetchbtn" ng-click="fetch()">fetch</button><br>
	    <button id="samplegetbtn" ng-click="updateModel('GET', 'http-hello.html')">Sample GET</button>
	    <button id="samplejsonpbtn"
	      ng-click="updateModel('JSONP',
	                    'https://angularjs.org/greet.php?name=Super%20Hero')">
	      Sample JSONP
	    </button>
	    <button id="invalidjsonpbtn"
	      ng-click="updateModel('JSONP', 'https://angularjs.org/doesntexist')">
	        Invalid JSONP
	      </button>
	    <pre>http status code: {{status}}</pre>
	    <pre>http response data: {{data}}</pre>
	  </div>
	</file>
	<file name="script.js">
	  angular.module('httpExample', [])
	    .config(['$sceDelegateProvider', function($sceDelegateProvider) {
	      // We must whitelist the JSONP endpoint that we are using to show that we trust it
	      $sceDelegateProvider.resourceUrlWhitelist([
	        'self',
	        'https://angularjs.org/**'
	      ]);
	    }])
	    .controller('FetchController', ['$scope', '$http', '$templateCache',
	      function($scope, $http, $templateCache) {
	        $scope.method = 'GET';
	        $scope.url = 'http-hello.html';
	
	        $scope.fetch = function() {
	          $scope.code = null;
	          $scope.response = null;
	
	          $http({method: $scope.method, url: $scope.url, cache: $templateCache}).
	            then(function(response) {
	              $scope.status = response.status;
	              $scope.data = response.data;
	            }, function(response) {
	              $scope.data = response.data || 'Request failed';
	              $scope.status = response.status;
	          });
	        };
	
	        $scope.updateModel = function(method, url) {
	          $scope.method = method;
	          $scope.url = url;
	        };
	      }]);
	</file>
	<file name="http-hello.html">
	  Hello, $http!
	</file>
	<file name="protractor.js" type="protractor">
	  var status = element(by.binding('status'));
	  var data = element(by.binding('data'));
	  var fetchBtn = element(by.id('fetchbtn'));
	  var sampleGetBtn = element(by.id('samplegetbtn'));
	  var invalidJsonpBtn = element(by.id('invalidjsonpbtn'));
	
	  it('should make an xhr GET request', function() {
	    sampleGetBtn.click();
	    fetchBtn.click();
	    expect(status.getText()).toMatch('200');
	    expect(data.getText()).toMatch(/Hello, \$http!/);
	  });
	
	// Commented out due to flakes. See https://github.com/angular/angular.js/issues/9185
	// it('should make a JSONP request to angularjs.org', function() {
	//   var sampleJsonpBtn = element(by.id('samplejsonpbtn'));
	//   sampleJsonpBtn.click();
	//   fetchBtn.click();
	//   expect(status.getText()).toMatch('200');
	//   expect(data.getText()).toMatch(/Super Hero!/);
	// });
	
	  it('should make JSONP request to invalid URL and invoke the error handler',
	      function() {
	    invalidJsonpBtn.click();
	    fetchBtn.click();
	    expect(status.getText()).toMatch('0');
	    expect(data.getText()).toMatch('Request failed');
	  });
	</file>
	</example>
	     */function $http(requestConfig){if(!isObject(requestConfig)){throw minErr('$http')('badreq','Http request configuration must be an object.  Received: {0}',requestConfig);}if(!isString($sce.valueOf(requestConfig.url))){throw minErr('$http')('badreq','Http request configuration url must be a string or a $sce trusted object.  Received: {0}',requestConfig.url);}var config=extend({method:'get',transformRequest:defaults.transformRequest,transformResponse:defaults.transformResponse,paramSerializer:defaults.paramSerializer,jsonpCallbackParam:defaults.jsonpCallbackParam},requestConfig);config.headers=mergeHeaders(requestConfig);config.method=uppercase(config.method);config.paramSerializer=isString(config.paramSerializer)?$injector.get(config.paramSerializer):config.paramSerializer;$browser.$$incOutstandingRequestCount();var requestInterceptors=[];var responseInterceptors=[];var promise=$q.resolve(config);// apply interceptors
	forEach(reversedInterceptors,function(interceptor){if(interceptor.request||interceptor.requestError){requestInterceptors.unshift(interceptor.request,interceptor.requestError);}if(interceptor.response||interceptor.responseError){responseInterceptors.push(interceptor.response,interceptor.responseError);}});promise=chainInterceptors(promise,requestInterceptors);promise=promise.then(serverRequest);promise=chainInterceptors(promise,responseInterceptors);promise=promise.finally(completeOutstandingRequest);return promise;function chainInterceptors(promise,interceptors){for(var i=0,ii=interceptors.length;i<ii;){var thenFn=interceptors[i++];var rejectFn=interceptors[i++];promise=promise.then(thenFn,rejectFn);}interceptors.length=0;return promise;}function completeOutstandingRequest(){$browser.$$completeOutstandingRequest(noop);}function executeHeaderFns(headers,config){var headerContent,processedHeaders={};forEach(headers,function(headerFn,header){if(isFunction(headerFn)){headerContent=headerFn(config);if(headerContent!=null){processedHeaders[header]=headerContent;}}else{processedHeaders[header]=headerFn;}});return processedHeaders;}function mergeHeaders(config){var defHeaders=defaults.headers,reqHeaders=extend({},config.headers),defHeaderName,lowercaseDefHeaderName,reqHeaderName;defHeaders=extend({},defHeaders.common,defHeaders[lowercase(config.method)]);// using for-in instead of forEach to avoid unnecessary iteration after header has been found
	defaultHeadersIteration:for(defHeaderName in defHeaders){lowercaseDefHeaderName=lowercase(defHeaderName);for(reqHeaderName in reqHeaders){if(lowercase(reqHeaderName)===lowercaseDefHeaderName){continue defaultHeadersIteration;}}reqHeaders[defHeaderName]=defHeaders[defHeaderName];}// execute if header value is a function for merged headers
	return executeHeaderFns(reqHeaders,shallowCopy(config));}function serverRequest(config){var headers=config.headers;var reqData=transformData(config.data,headersGetter(headers),undefined,config.transformRequest);// strip content-type if data is undefined
	if(isUndefined(reqData)){forEach(headers,function(value,header){if(lowercase(header)==='content-type'){delete headers[header];}});}if(isUndefined(config.withCredentials)&&!isUndefined(defaults.withCredentials)){config.withCredentials=defaults.withCredentials;}// send request
	return sendReq(config,reqData).then(transformResponse,transformResponse);}function transformResponse(response){// make a copy since the response must be cacheable
	var resp=extend({},response);resp.data=transformData(response.data,response.headers,response.status,config.transformResponse);return isSuccess(response.status)?resp:$q.reject(resp);}}$http.pendingRequests=[];/**
	     * @ngdoc method
	     * @name $http#get
	     *
	     * @description
	     * Shortcut method to perform `GET` request.
	     *
	     * @param {string|TrustedObject} url Absolute or relative URL of the resource that is being requested;
	     *                                   or an object created by a call to `$sce.trustAsResourceUrl(url)`.
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     *//**
	     * @ngdoc method
	     * @name $http#delete
	     *
	     * @description
	     * Shortcut method to perform `DELETE` request.
	     *
	     * @param {string|TrustedObject} url Absolute or relative URL of the resource that is being requested;
	     *                                   or an object created by a call to `$sce.trustAsResourceUrl(url)`.
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     *//**
	     * @ngdoc method
	     * @name $http#head
	     *
	     * @description
	     * Shortcut method to perform `HEAD` request.
	     *
	     * @param {string|TrustedObject} url Absolute or relative URL of the resource that is being requested;
	     *                                   or an object created by a call to `$sce.trustAsResourceUrl(url)`.
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     *//**
	     * @ngdoc method
	     * @name $http#jsonp
	     *
	     * @description
	     * Shortcut method to perform `JSONP` request.
	     *
	     * Note that, since JSONP requests are sensitive because the response is given full access to the browser,
	     * the url must be declared, via {@link $sce} as a trusted resource URL.
	     * You can trust a URL by adding it to the whitelist via
	     * {@link $sceDelegateProvider#resourceUrlWhitelist  `$sceDelegateProvider.resourceUrlWhitelist`} or
	     * by explicitly trusting the URL via {@link $sce#trustAsResourceUrl `$sce.trustAsResourceUrl(url)`}.
	     *
	     * JSONP requests must specify a callback to be used in the response from the server. This callback
	     * is passed as a query parameter in the request. You must specify the name of this parameter by
	     * setting the `jsonpCallbackParam` property on the request config object.
	     *
	     * ```
	     * $http.jsonp('some/trusted/url', {jsonpCallbackParam: 'callback'})
	     * ```
	     *
	     * You can also specify a default callback parameter name in `$http.defaults.jsonpCallbackParam`.
	     * Initially this is set to `'callback'`.
	     *
	     * <div class="alert alert-danger">
	     * You can no longer use the `JSON_CALLBACK` string as a placeholder for specifying where the callback
	     * parameter value should go.
	     * </div>
	     *
	     * If you would like to customise where and how the callbacks are stored then try overriding
	     * or decorating the {@link $jsonpCallbacks} service.
	     *
	     * @param {string|TrustedObject} url Absolute or relative URL of the resource that is being requested;
	     *                                   or an object created by a call to `$sce.trustAsResourceUrl(url)`.
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */createShortMethods('get','delete','head','jsonp');/**
	     * @ngdoc method
	     * @name $http#post
	     *
	     * @description
	     * Shortcut method to perform `POST` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {*} data Request content
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     *//**
	     * @ngdoc method
	     * @name $http#put
	     *
	     * @description
	     * Shortcut method to perform `PUT` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {*} data Request content
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     *//**
	      * @ngdoc method
	      * @name $http#patch
	      *
	      * @description
	      * Shortcut method to perform `PATCH` request.
	      *
	      * @param {string} url Relative or absolute URL specifying the destination of the request
	      * @param {*} data Request content
	      * @param {Object=} config Optional configuration object
	      * @returns {HttpPromise} Future object
	      */createShortMethodsWithData('post','put','patch');/**
	         * @ngdoc property
	         * @name $http#defaults
	         *
	         * @description
	         * Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of
	         * default headers, withCredentials as well as request and response transformations.
	         *
	         * See "Setting HTTP Headers" and "Transforming Requests and Responses" sections above.
	         */$http.defaults=defaults;return $http;function createShortMethods(names){forEach(arguments,function(name){$http[name]=function(url,config){return $http(extend({},config||{},{method:name,url:url}));};});}function createShortMethodsWithData(name){forEach(arguments,function(name){$http[name]=function(url,data,config){return $http(extend({},config||{},{method:name,url:url,data:data}));};});}/**
	     * Makes the request.
	     *
	     * !!! ACCESSES CLOSURE VARS:
	     * $httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests
	     */function sendReq(config,reqData){var deferred=$q.defer(),promise=deferred.promise,cache,cachedResp,reqHeaders=config.headers,isJsonp=lowercase(config.method)==='jsonp',url=config.url;if(isJsonp){// JSONP is a pretty sensitive operation where we're allowing a script to have full access to
	// our DOM and JS space.  So we require that the URL satisfies SCE.RESOURCE_URL.
	url=$sce.getTrustedResourceUrl(url);}else if(!isString(url)){// If it is not a string then the URL must be a $sce trusted object
	url=$sce.valueOf(url);}url=buildUrl(url,config.paramSerializer(config.params));if(isJsonp){// Check the url and add the JSONP callback placeholder
	url=sanitizeJsonpCallbackParam(url,config.jsonpCallbackParam);}$http.pendingRequests.push(config);promise.then(removePendingReq,removePendingReq);if((config.cache||defaults.cache)&&config.cache!==false&&(config.method==='GET'||config.method==='JSONP')){cache=isObject(config.cache)?config.cache:isObject(/** @type {?} */defaults.cache)?/** @type {?} */defaults.cache:defaultCache;}if(cache){cachedResp=cache.get(url);if(isDefined(cachedResp)){if(isPromiseLike(cachedResp)){// cached request has already been sent, but there is no response yet
	cachedResp.then(resolvePromiseWithResult,resolvePromiseWithResult);}else{// serving from cache
	if(isArray(cachedResp)){resolvePromise(cachedResp[1],cachedResp[0],shallowCopy(cachedResp[2]),cachedResp[3]);}else{resolvePromise(cachedResp,200,{},'OK');}}}else{// put the promise for the non-transformed response into cache as a placeholder
	cache.put(url,promise);}}// if we won't have the response in cache, set the xsrf headers and
	// send the request to the backend
	if(isUndefined(cachedResp)){var xsrfValue=urlIsSameOrigin(config.url)?$$cookieReader()[config.xsrfCookieName||defaults.xsrfCookieName]:undefined;if(xsrfValue){reqHeaders[config.xsrfHeaderName||defaults.xsrfHeaderName]=xsrfValue;}$httpBackend(config.method,url,reqData,done,reqHeaders,config.timeout,config.withCredentials,config.responseType,createApplyHandlers(config.eventHandlers),createApplyHandlers(config.uploadEventHandlers));}return promise;function createApplyHandlers(eventHandlers){if(eventHandlers){var applyHandlers={};forEach(eventHandlers,function(eventHandler,key){applyHandlers[key]=function(event){if(useApplyAsync){$rootScope.$applyAsync(callEventHandler);}else if($rootScope.$$phase){callEventHandler();}else{$rootScope.$apply(callEventHandler);}function callEventHandler(){eventHandler(event);}};});return applyHandlers;}}/**
	       * Callback registered to $httpBackend():
	       *  - caches the response if desired
	       *  - resolves the raw $http promise
	       *  - calls $apply
	       */function done(status,response,headersString,statusText){if(cache){if(isSuccess(status)){cache.put(url,[status,response,parseHeaders(headersString),statusText]);}else{// remove promise from the cache
	cache.remove(url);}}function resolveHttpPromise(){resolvePromise(response,status,headersString,statusText);}if(useApplyAsync){$rootScope.$applyAsync(resolveHttpPromise);}else{resolveHttpPromise();if(!$rootScope.$$phase)$rootScope.$apply();}}/**
	       * Resolves the raw $http promise.
	       */function resolvePromise(response,status,headers,statusText){//status: HTTP response status code, 0, -1 (aborted by timeout / promise)
	status=status>=-1?status:0;(isSuccess(status)?deferred.resolve:deferred.reject)({data:response,status:status,headers:headersGetter(headers),config:config,statusText:statusText});}function resolvePromiseWithResult(result){resolvePromise(result.data,result.status,shallowCopy(result.headers()),result.statusText);}function removePendingReq(){var idx=$http.pendingRequests.indexOf(config);if(idx!==-1)$http.pendingRequests.splice(idx,1);}}function buildUrl(url,serializedParams){if(serializedParams.length>0){url+=(url.indexOf('?')===-1?'?':'&')+serializedParams;}return url;}function sanitizeJsonpCallbackParam(url,key){if(/[&?][^=]+=JSON_CALLBACK/.test(url)){// Throw if the url already contains a reference to JSON_CALLBACK
	throw $httpMinErr('badjsonp','Illegal use of JSON_CALLBACK in url, "{0}"',url);}var callbackParamRegex=new RegExp('[&?]'+key+'=');if(callbackParamRegex.test(url)){// Throw if the callback param was already provided
	throw $httpMinErr('badjsonp','Illegal use of callback param, "{0}", in url, "{1}"',key,url);}// Add in the JSON_CALLBACK callback param value
	url+=(url.indexOf('?')===-1?'?':'&')+key+'=JSON_CALLBACK';return url;}}];}/**
	 * @ngdoc service
	 * @name $xhrFactory
	 * @this
	 *
	 * @description
	 * Factory function used to create XMLHttpRequest objects.
	 *
	 * Replace or decorate this service to create your own custom XMLHttpRequest objects.
	 *
	 * ```
	 * angular.module('myApp', [])
	 * .factory('$xhrFactory', function() {
	 *   return function createXhr(method, url) {
	 *     return new window.XMLHttpRequest({mozSystem: true});
	 *   };
	 * });
	 * ```
	 *
	 * @param {string} method HTTP method of the request (GET, POST, PUT, ..)
	 * @param {string} url URL of the request.
	 */function $xhrFactoryProvider(){this.$get=function(){return function createXhr(){return new window.XMLHttpRequest();};};}/**
	 * @ngdoc service
	 * @name $httpBackend
	 * @requires $jsonpCallbacks
	 * @requires $document
	 * @requires $xhrFactory
	 * @this
	 *
	 * @description
	 * HTTP backend used by the {@link ng.$http service} that delegates to
	 * XMLHttpRequest object or JSONP and deals with browser incompatibilities.
	 *
	 * You should never need to use this service directly, instead use the higher-level abstractions:
	 * {@link ng.$http $http} or {@link ngResource.$resource $resource}.
	 *
	 * During testing this implementation is swapped with {@link ngMock.$httpBackend mock
	 * $httpBackend} which can be trained with responses.
	 */function $HttpBackendProvider(){this.$get=['$browser','$jsonpCallbacks','$document','$xhrFactory',function($browser,$jsonpCallbacks,$document,$xhrFactory){return createHttpBackend($browser,$xhrFactory,$browser.defer,$jsonpCallbacks,$document[0]);}];}function createHttpBackend($browser,createXhr,$browserDefer,callbacks,rawDocument){// TODO(vojta): fix the signature
	return function(method,url,post,callback,headers,timeout,withCredentials,responseType,eventHandlers,uploadEventHandlers){url=url||$browser.url();if(lowercase(method)==='jsonp'){var callbackPath=callbacks.createCallback(url);var jsonpDone=jsonpReq(url,callbackPath,function(status,text){// jsonpReq only ever sets status to 200 (OK), 404 (ERROR) or -1 (WAITING)
	var response=status===200&&callbacks.getResponse(callbackPath);completeRequest(callback,status,response,'',text);callbacks.removeCallback(callbackPath);});}else{var xhr=createXhr(method,url);xhr.open(method,url,true);forEach(headers,function(value,key){if(isDefined(value)){xhr.setRequestHeader(key,value);}});xhr.onload=function requestLoaded(){var statusText=xhr.statusText||'';// responseText is the old-school way of retrieving response (supported by IE9)
	// response/responseType properties were introduced in XHR Level2 spec (supported by IE10)
	var response='response'in xhr?xhr.response:xhr.responseText;// normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
	var status=xhr.status===1223?204:xhr.status;// fix status code when it is 0 (0 status is undocumented).
	// Occurs when accessing file resources or on Android 4.1 stock browser
	// while retrieving files from application cache.
	if(status===0){status=response?200:urlResolve(url).protocol==='file'?404:0;}completeRequest(callback,status,response,xhr.getAllResponseHeaders(),statusText);};var requestError=function requestError(){// The response is always empty
	// See https://xhr.spec.whatwg.org/#request-error-steps and https://fetch.spec.whatwg.org/#concept-network-error
	completeRequest(callback,-1,null,null,'');};xhr.onerror=requestError;xhr.onabort=requestError;xhr.ontimeout=requestError;forEach(eventHandlers,function(value,key){xhr.addEventListener(key,value);});forEach(uploadEventHandlers,function(value,key){xhr.upload.addEventListener(key,value);});if(withCredentials){xhr.withCredentials=true;}if(responseType){try{xhr.responseType=responseType;}catch(e){// WebKit added support for the json responseType value on 09/03/2013
	// https://bugs.webkit.org/show_bug.cgi?id=73648. Versions of Safari prior to 7 are
	// known to throw when setting the value "json" as the response type. Other older
	// browsers implementing the responseType
	//
	// The json response type can be ignored if not supported, because JSON payloads are
	// parsed on the client-side regardless.
	if(responseType!=='json'){throw e;}}}xhr.send(isUndefined(post)?null:post);}if(timeout>0){var timeoutId=$browserDefer(timeoutRequest,timeout);}else if(isPromiseLike(timeout)){timeout.then(timeoutRequest);}function timeoutRequest(){if(jsonpDone){jsonpDone();}if(xhr){xhr.abort();}}function completeRequest(callback,status,response,headersString,statusText){// cancel timeout and subsequent timeout promise resolution
	if(isDefined(timeoutId)){$browserDefer.cancel(timeoutId);}jsonpDone=xhr=null;callback(status,response,headersString,statusText);}};function jsonpReq(url,callbackPath,done){url=url.replace('JSON_CALLBACK',callbackPath);// we can't use jQuery/jqLite here because jQuery does crazy stuff with script elements, e.g.:
	// - fetches local scripts via XHR and evals them
	// - adds and immediately removes script elements from the document
	var script=rawDocument.createElement('script'),_callback=null;script.type='text/javascript';script.src=url;script.async=true;_callback=function callback(event){script.removeEventListener('load',_callback);script.removeEventListener('error',_callback);rawDocument.body.removeChild(script);script=null;var status=-1;var text='unknown';if(event){if(event.type==='load'&&!callbacks.wasCalled(callbackPath)){event={type:'error'};}text=event.type;status=event.type==='error'?404:200;}if(done){done(status,text);}};script.addEventListener('load',_callback);script.addEventListener('error',_callback);rawDocument.body.appendChild(script);return _callback;}}var $interpolateMinErr=angular.$interpolateMinErr=minErr('$interpolate');$interpolateMinErr.throwNoconcat=function(text){throw $interpolateMinErr('noconcat','Error while interpolating: {0}\nStrict Contextual Escaping disallows '+'interpolations that concatenate multiple expressions when a trusted value is '+'required.  See http://docs.angularjs.org/api/ng.$sce',text);};$interpolateMinErr.interr=function(text,err){return $interpolateMinErr('interr','Can\'t interpolate: {0}\n{1}',text,err.toString());};/**
	 * @ngdoc provider
	 * @name $interpolateProvider
	 * @this
	 *
	 * @description
	 *
	 * Used for configuring the interpolation markup. Defaults to `{{` and `}}`.
	 *
	 * <div class="alert alert-danger">
	 * This feature is sometimes used to mix different markup languages, e.g. to wrap an Angular
	 * template within a Python Jinja template (or any other template language). Mixing templating
	 * languages is **very dangerous**. The embedding template language will not safely escape Angular
	 * expressions, so any user-controlled values in the template will cause Cross Site Scripting (XSS)
	 * security bugs!
	 * </div>
	 *
	 * @example
	<example name="custom-interpolation-markup" module="customInterpolationApp">
	<file name="index.html">
	<script>
	  var customInterpolationApp = angular.module('customInterpolationApp', []);
	
	  customInterpolationApp.config(function($interpolateProvider) {
	    $interpolateProvider.startSymbol('//');
	    $interpolateProvider.endSymbol('//');
	  });
	
	
	  customInterpolationApp.controller('DemoController', function() {
	      this.label = "This binding is brought you by // interpolation symbols.";
	  });
	</script>
	<div ng-controller="DemoController as demo">
	    //demo.label//
	</div>
	</file>
	<file name="protractor.js" type="protractor">
	  it('should interpolate binding with custom symbols', function() {
	    expect(element(by.binding('demo.label')).getText()).toBe('This binding is brought you by // interpolation symbols.');
	  });
	</file>
	</example>
	 */function $InterpolateProvider(){var startSymbol='{{';var endSymbol='}}';/**
	   * @ngdoc method
	   * @name $interpolateProvider#startSymbol
	   * @description
	   * Symbol to denote start of expression in the interpolated string. Defaults to `{{`.
	   *
	   * @param {string=} value new value to set the starting symbol to.
	   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
	   */this.startSymbol=function(value){if(value){startSymbol=value;return this;}else{return startSymbol;}};/**
	   * @ngdoc method
	   * @name $interpolateProvider#endSymbol
	   * @description
	   * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
	   *
	   * @param {string=} value new value to set the ending symbol to.
	   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
	   */this.endSymbol=function(value){if(value){endSymbol=value;return this;}else{return endSymbol;}};this.$get=['$parse','$exceptionHandler','$sce',function($parse,$exceptionHandler,$sce){var startSymbolLength=startSymbol.length,endSymbolLength=endSymbol.length,escapedStartRegexp=new RegExp(startSymbol.replace(/./g,escape),'g'),escapedEndRegexp=new RegExp(endSymbol.replace(/./g,escape),'g');function escape(ch){return'\\\\\\'+ch;}function unescapeText(text){return text.replace(escapedStartRegexp,startSymbol).replace(escapedEndRegexp,endSymbol);}// TODO: this is the same as the constantWatchDelegate in parse.js
	function constantWatchDelegate(scope,listener,objectEquality,constantInterp){var unwatch=scope.$watch(function constantInterpolateWatch(scope){unwatch();return constantInterp(scope);},listener,objectEquality);return unwatch;}/**
	     * @ngdoc service
	     * @name $interpolate
	     * @kind function
	     *
	     * @requires $parse
	     * @requires $sce
	     *
	     * @description
	     *
	     * Compiles a string with markup into an interpolation function. This service is used by the
	     * HTML {@link ng.$compile $compile} service for data binding. See
	     * {@link ng.$interpolateProvider $interpolateProvider} for configuring the
	     * interpolation markup.
	     *
	     *
	     * ```js
	     *   var $interpolate = ...; // injected
	     *   var exp = $interpolate('Hello {{name | uppercase}}!');
	     *   expect(exp({name:'Angular'})).toEqual('Hello ANGULAR!');
	     * ```
	     *
	     * `$interpolate` takes an optional fourth argument, `allOrNothing`. If `allOrNothing` is
	     * `true`, the interpolation function will return `undefined` unless all embedded expressions
	     * evaluate to a value other than `undefined`.
	     *
	     * ```js
	     *   var $interpolate = ...; // injected
	     *   var context = {greeting: 'Hello', name: undefined };
	     *
	     *   // default "forgiving" mode
	     *   var exp = $interpolate('{{greeting}} {{name}}!');
	     *   expect(exp(context)).toEqual('Hello !');
	     *
	     *   // "allOrNothing" mode
	     *   exp = $interpolate('{{greeting}} {{name}}!', false, null, true);
	     *   expect(exp(context)).toBeUndefined();
	     *   context.name = 'Angular';
	     *   expect(exp(context)).toEqual('Hello Angular!');
	     * ```
	     *
	     * `allOrNothing` is useful for interpolating URLs. `ngSrc` and `ngSrcset` use this behavior.
	     *
	     * #### Escaped Interpolation
	     * $interpolate provides a mechanism for escaping interpolation markers. Start and end markers
	     * can be escaped by preceding each of their characters with a REVERSE SOLIDUS U+005C (backslash).
	     * It will be rendered as a regular start/end marker, and will not be interpreted as an expression
	     * or binding.
	     *
	     * This enables web-servers to prevent script injection attacks and defacing attacks, to some
	     * degree, while also enabling code examples to work without relying on the
	     * {@link ng.directive:ngNonBindable ngNonBindable} directive.
	     *
	     * **For security purposes, it is strongly encouraged that web servers escape user-supplied data,
	     * replacing angle brackets (&lt;, &gt;) with &amp;lt; and &amp;gt; respectively, and replacing all
	     * interpolation start/end markers with their escaped counterparts.**
	     *
	     * Escaped interpolation markers are only replaced with the actual interpolation markers in rendered
	     * output when the $interpolate service processes the text. So, for HTML elements interpolated
	     * by {@link ng.$compile $compile}, or otherwise interpolated with the `mustHaveExpression` parameter
	     * set to `true`, the interpolated text must contain an unescaped interpolation expression. As such,
	     * this is typically useful only when user-data is used in rendering a template from the server, or
	     * when otherwise untrusted data is used by a directive.
	     *
	     * <example name="interpolation">
	     *  <file name="index.html">
	     *    <div ng-init="username='A user'">
	     *      <p ng-init="apptitle='Escaping demo'">{{apptitle}}: \{\{ username = "defaced value"; \}\}
	     *        </p>
	     *      <p><strong>{{username}}</strong> attempts to inject code which will deface the
	     *        application, but fails to accomplish their task, because the server has correctly
	     *        escaped the interpolation start/end markers with REVERSE SOLIDUS U+005C (backslash)
	     *        characters.</p>
	     *      <p>Instead, the result of the attempted script injection is visible, and can be removed
	     *        from the database by an administrator.</p>
	     *    </div>
	     *  </file>
	     * </example>
	     *
	     * @knownIssue
	     * It is currently not possible for an interpolated expression to contain the interpolation end
	     * symbol. For example, `{{ '}}' }}` will be incorrectly interpreted as `{{ ' }}` + `' }}`, i.e.
	     * an interpolated expression consisting of a single-quote (`'`) and the `' }}` string.
	     *
	     * @knownIssue
	     * All directives and components must use the standard `{{` `}}` interpolation symbols
	     * in their templates. If you change the application interpolation symbols the {@link $compile}
	     * service will attempt to denormalize the standard symbols to the custom symbols.
	     * The denormalization process is not clever enough to know not to replace instances of the standard
	     * symbols where they would not normally be treated as interpolation symbols. For example in the following
	     * code snippet the closing braces of the literal object will get incorrectly denormalized:
	     *
	     * ```
	     * <div data-context='{"context":{"id":3,"type":"page"}}">
	     * ```
	     *
	     * The workaround is to ensure that such instances are separated by whitespace:
	     * ```
	     * <div data-context='{"context":{"id":3,"type":"page"} }">
	     * ```
	     *
	     * See https://github.com/angular/angular.js/pull/14610#issuecomment-219401099 for more information.
	     *
	     * @param {string} text The text with markup to interpolate.
	     * @param {boolean=} mustHaveExpression if set to true then the interpolation string must have
	     *    embedded expression in order to return an interpolation function. Strings with no
	     *    embedded expression will return null for the interpolation function.
	     * @param {string=} trustedContext when provided, the returned function passes the interpolated
	     *    result through {@link ng.$sce#getTrusted $sce.getTrusted(interpolatedResult,
	     *    trustedContext)} before returning it.  Refer to the {@link ng.$sce $sce} service that
	     *    provides Strict Contextual Escaping for details.
	     * @param {boolean=} allOrNothing if `true`, then the returned function returns undefined
	     *    unless all embedded expressions evaluate to a value other than `undefined`.
	     * @returns {function(context)} an interpolation function which is used to compute the
	     *    interpolated string. The function has these parameters:
	     *
	     * - `context`: evaluation context for all expressions embedded in the interpolated text
	     */function $interpolate(text,mustHaveExpression,trustedContext,allOrNothing){// Provide a quick exit and simplified result function for text with no interpolation
	if(!text.length||text.indexOf(startSymbol)===-1){var constantInterp;if(!mustHaveExpression){var unescapedText=unescapeText(text);constantInterp=valueFn(unescapedText);constantInterp.exp=text;constantInterp.expressions=[];constantInterp.$$watchDelegate=constantWatchDelegate;}return constantInterp;}allOrNothing=!!allOrNothing;var startIndex,endIndex,index=0,expressions=[],parseFns=[],textLength=text.length,exp,concat=[],expressionPositions=[];while(index<textLength){if((startIndex=text.indexOf(startSymbol,index))!==-1&&(endIndex=text.indexOf(endSymbol,startIndex+startSymbolLength))!==-1){if(index!==startIndex){concat.push(unescapeText(text.substring(index,startIndex)));}exp=text.substring(startIndex+startSymbolLength,endIndex);expressions.push(exp);parseFns.push($parse(exp,parseStringifyInterceptor));index=endIndex+endSymbolLength;expressionPositions.push(concat.length);concat.push('');}else{// we did not find an interpolation, so we have to add the remainder to the separators array
	if(index!==textLength){concat.push(unescapeText(text.substring(index)));}break;}}// Concatenating expressions makes it hard to reason about whether some combination of
	// concatenated values are unsafe to use and could easily lead to XSS.  By requiring that a
	// single expression be used for iframe[src], object[src], etc., we ensure that the value
	// that's used is assigned or constructed by some JS code somewhere that is more testable or
	// make it obvious that you bound the value to some user controlled value.  This helps reduce
	// the load when auditing for XSS issues.
	if(trustedContext&&concat.length>1){$interpolateMinErr.throwNoconcat(text);}if(!mustHaveExpression||expressions.length){var compute=function compute(values){for(var i=0,ii=expressions.length;i<ii;i++){if(allOrNothing&&isUndefined(values[i]))return;concat[expressionPositions[i]]=values[i];}return concat.join('');};var getValue=function getValue(value){return trustedContext?$sce.getTrusted(trustedContext,value):$sce.valueOf(value);};return extend(function interpolationFn(context){var i=0;var ii=expressions.length;var values=new Array(ii);try{for(;i<ii;i++){values[i]=parseFns[i](context);}return compute(values);}catch(err){$exceptionHandler($interpolateMinErr.interr(text,err));}},{// all of these properties are undocumented for now
	exp:text,//just for compatibility with regular watchers created via $watch
	expressions:expressions,$$watchDelegate:function $$watchDelegate(scope,listener){var lastValue;return scope.$watchGroup(parseFns,/** @this */function interpolateFnWatcher(values,oldValues){var currValue=compute(values);if(isFunction(listener)){listener.call(this,currValue,values!==oldValues?lastValue:currValue,scope);}lastValue=currValue;});}});}function parseStringifyInterceptor(value){try{value=getValue(value);return allOrNothing&&!isDefined(value)?value:stringify(value);}catch(err){$exceptionHandler($interpolateMinErr.interr(text,err));}}}/**
	     * @ngdoc method
	     * @name $interpolate#startSymbol
	     * @description
	     * Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.
	     *
	     * Use {@link ng.$interpolateProvider#startSymbol `$interpolateProvider.startSymbol`} to change
	     * the symbol.
	     *
	     * @returns {string} start symbol.
	     */$interpolate.startSymbol=function(){return startSymbol;};/**
	     * @ngdoc method
	     * @name $interpolate#endSymbol
	     * @description
	     * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
	     *
	     * Use {@link ng.$interpolateProvider#endSymbol `$interpolateProvider.endSymbol`} to change
	     * the symbol.
	     *
	     * @returns {string} end symbol.
	     */$interpolate.endSymbol=function(){return endSymbol;};return $interpolate;}];}/** @this */function $IntervalProvider(){this.$get=['$rootScope','$window','$q','$$q','$browser',function($rootScope,$window,$q,$$q,$browser){var intervals={};/**
	      * @ngdoc service
	      * @name $interval
	      *
	      * @description
	      * Angular's wrapper for `window.setInterval`. The `fn` function is executed every `delay`
	      * milliseconds.
	      *
	      * The return value of registering an interval function is a promise. This promise will be
	      * notified upon each tick of the interval, and will be resolved after `count` iterations, or
	      * run indefinitely if `count` is not defined. The value of the notification will be the
	      * number of iterations that have run.
	      * To cancel an interval, call `$interval.cancel(promise)`.
	      *
	      * In tests you can use {@link ngMock.$interval#flush `$interval.flush(millis)`} to
	      * move forward by `millis` milliseconds and trigger any functions scheduled to run in that
	      * time.
	      *
	      * <div class="alert alert-warning">
	      * **Note**: Intervals created by this service must be explicitly destroyed when you are finished
	      * with them.  In particular they are not automatically destroyed when a controller's scope or a
	      * directive's element are destroyed.
	      * You should take this into consideration and make sure to always cancel the interval at the
	      * appropriate moment.  See the example below for more details on how and when to do this.
	      * </div>
	      *
	      * @param {function()} fn A function that should be called repeatedly. If no additional arguments
	      *   are passed (see below), the function is called with the current iteration count.
	      * @param {number} delay Number of milliseconds between each function call.
	      * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat
	      *   indefinitely.
	      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
	      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
	      * @param {...*=} Pass additional parameters to the executed function.
	      * @returns {promise} A promise which will be notified on each iteration. It will resolve once all iterations of the interval complete.
	      *
	      * @example
	      * <example module="intervalExample" name="interval-service">
	      * <file name="index.html">
	      *   <script>
	      *     angular.module('intervalExample', [])
	      *       .controller('ExampleController', ['$scope', '$interval',
	      *         function($scope, $interval) {
	      *           $scope.format = 'M/d/yy h:mm:ss a';
	      *           $scope.blood_1 = 100;
	      *           $scope.blood_2 = 120;
	      *
	      *           var stop;
	      *           $scope.fight = function() {
	      *             // Don't start a new fight if we are already fighting
	      *             if ( angular.isDefined(stop) ) return;
	      *
	      *             stop = $interval(function() {
	      *               if ($scope.blood_1 > 0 && $scope.blood_2 > 0) {
	      *                 $scope.blood_1 = $scope.blood_1 - 3;
	      *                 $scope.blood_2 = $scope.blood_2 - 4;
	      *               } else {
	      *                 $scope.stopFight();
	      *               }
	      *             }, 100);
	      *           };
	      *
	      *           $scope.stopFight = function() {
	      *             if (angular.isDefined(stop)) {
	      *               $interval.cancel(stop);
	      *               stop = undefined;
	      *             }
	      *           };
	      *
	      *           $scope.resetFight = function() {
	      *             $scope.blood_1 = 100;
	      *             $scope.blood_2 = 120;
	      *           };
	      *
	      *           $scope.$on('$destroy', function() {
	      *             // Make sure that the interval is destroyed too
	      *             $scope.stopFight();
	      *           });
	      *         }])
	      *       // Register the 'myCurrentTime' directive factory method.
	      *       // We inject $interval and dateFilter service since the factory method is DI.
	      *       .directive('myCurrentTime', ['$interval', 'dateFilter',
	      *         function($interval, dateFilter) {
	      *           // return the directive link function. (compile function not needed)
	      *           return function(scope, element, attrs) {
	      *             var format,  // date format
	      *                 stopTime; // so that we can cancel the time updates
	      *
	      *             // used to update the UI
	      *             function updateTime() {
	      *               element.text(dateFilter(new Date(), format));
	      *             }
	      *
	      *             // watch the expression, and update the UI on change.
	      *             scope.$watch(attrs.myCurrentTime, function(value) {
	      *               format = value;
	      *               updateTime();
	      *             });
	      *
	      *             stopTime = $interval(updateTime, 1000);
	      *
	      *             // listen on DOM destroy (removal) event, and cancel the next UI update
	      *             // to prevent updating time after the DOM element was removed.
	      *             element.on('$destroy', function() {
	      *               $interval.cancel(stopTime);
	      *             });
	      *           }
	      *         }]);
	      *   </script>
	      *
	      *   <div>
	      *     <div ng-controller="ExampleController">
	      *       <label>Date format: <input ng-model="format"></label> <hr/>
	      *       Current time is: <span my-current-time="format"></span>
	      *       <hr/>
	      *       Blood 1 : <font color='red'>{{blood_1}}</font>
	      *       Blood 2 : <font color='red'>{{blood_2}}</font>
	      *       <button type="button" data-ng-click="fight()">Fight</button>
	      *       <button type="button" data-ng-click="stopFight()">StopFight</button>
	      *       <button type="button" data-ng-click="resetFight()">resetFight</button>
	      *     </div>
	      *   </div>
	      *
	      * </file>
	      * </example>
	      */function interval(fn,delay,count,invokeApply){var hasParams=arguments.length>4,args=hasParams?sliceArgs(arguments,4):[],setInterval=$window.setInterval,clearInterval=$window.clearInterval,iteration=0,skipApply=isDefined(invokeApply)&&!invokeApply,deferred=(skipApply?$$q:$q).defer(),promise=deferred.promise;count=isDefined(count)?count:0;promise.$$intervalId=setInterval(function tick(){if(skipApply){$browser.defer(callback);}else{$rootScope.$evalAsync(callback);}deferred.notify(iteration++);if(count>0&&iteration>=count){deferred.resolve(iteration);clearInterval(promise.$$intervalId);delete intervals[promise.$$intervalId];}if(!skipApply)$rootScope.$apply();},delay);intervals[promise.$$intervalId]=deferred;return promise;function callback(){if(!hasParams){fn(iteration);}else{fn.apply(null,args);}}}/**
	      * @ngdoc method
	      * @name $interval#cancel
	      *
	      * @description
	      * Cancels a task associated with the `promise`.
	      *
	      * @param {Promise=} promise returned by the `$interval` function.
	      * @returns {boolean} Returns `true` if the task was successfully canceled.
	      */interval.cancel=function(promise){if(promise&&promise.$$intervalId in intervals){// Interval cancels should not report as unhandled promise.
	intervals[promise.$$intervalId].promise.catch(noop);intervals[promise.$$intervalId].reject('canceled');$window.clearInterval(promise.$$intervalId);delete intervals[promise.$$intervalId];return true;}return false;};return interval;}];}/**
	 * @ngdoc service
	 * @name $jsonpCallbacks
	 * @requires $window
	 * @description
	 * This service handles the lifecycle of callbacks to handle JSONP requests.
	 * Override this service if you wish to customise where the callbacks are stored and
	 * how they vary compared to the requested url.
	 */var $jsonpCallbacksProvider=/** @this */function $jsonpCallbacksProvider(){this.$get=function(){var callbacks=angular.callbacks;var callbackMap={};function _createCallback(callbackId){var callback=function callback(data){callback.data=data;callback.called=true;};callback.id=callbackId;return callback;}return{/**
	       * @ngdoc method
	       * @name $jsonpCallbacks#createCallback
	       * @param {string} url the url of the JSONP request
	       * @returns {string} the callback path to send to the server as part of the JSONP request
	       * @description
	       * {@link $httpBackend} calls this method to create a callback and get hold of the path to the callback
	       * to pass to the server, which will be used to call the callback with its payload in the JSONP response.
	       */createCallback:function createCallback(url){var callbackId='_'+(callbacks.$$counter++).toString(36);var callbackPath='angular.callbacks.'+callbackId;var callback=_createCallback(callbackId);callbackMap[callbackPath]=callbacks[callbackId]=callback;return callbackPath;},/**
	       * @ngdoc method
	       * @name $jsonpCallbacks#wasCalled
	       * @param {string} callbackPath the path to the callback that was sent in the JSONP request
	       * @returns {boolean} whether the callback has been called, as a result of the JSONP response
	       * @description
	       * {@link $httpBackend} calls this method to find out whether the JSONP response actually called the
	       * callback that was passed in the request.
	       */wasCalled:function wasCalled(callbackPath){return callbackMap[callbackPath].called;},/**
	       * @ngdoc method
	       * @name $jsonpCallbacks#getResponse
	       * @param {string} callbackPath the path to the callback that was sent in the JSONP request
	       * @returns {*} the data received from the response via the registered callback
	       * @description
	       * {@link $httpBackend} calls this method to get hold of the data that was provided to the callback
	       * in the JSONP response.
	       */getResponse:function getResponse(callbackPath){return callbackMap[callbackPath].data;},/**
	       * @ngdoc method
	       * @name $jsonpCallbacks#removeCallback
	       * @param {string} callbackPath the path to the callback that was sent in the JSONP request
	       * @description
	       * {@link $httpBackend} calls this method to remove the callback after the JSONP request has
	       * completed or timed-out.
	       */removeCallback:function removeCallback(callbackPath){var callback=callbackMap[callbackPath];delete callbacks[callback.id];delete callbackMap[callbackPath];}};};};/**
	 * @ngdoc service
	 * @name $locale
	 *
	 * @description
	 * $locale service provides localization rules for various Angular components. As of right now the
	 * only public api is:
	 *
	 * * `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)
	 */var PATH_MATCH=/^([^?#]*)(\?([^#]*))?(#(.*))?$/,DEFAULT_PORTS={'http':80,'https':443,'ftp':21};var $locationMinErr=minErr('$location');/**
	 * Encode path using encodeUriSegment, ignoring forward slashes
	 *
	 * @param {string} path Path to encode
	 * @returns {string}
	 */function encodePath(path){var segments=path.split('/'),i=segments.length;while(i--){segments[i]=encodeUriSegment(segments[i]);}return segments.join('/');}function parseAbsoluteUrl(absoluteUrl,locationObj){var parsedUrl=urlResolve(absoluteUrl);locationObj.$$protocol=parsedUrl.protocol;locationObj.$$host=parsedUrl.hostname;locationObj.$$port=toInt(parsedUrl.port)||DEFAULT_PORTS[parsedUrl.protocol]||null;}var DOUBLE_SLASH_REGEX=/^\s*[\\/]{2,}/;function parseAppUrl(url,locationObj){if(DOUBLE_SLASH_REGEX.test(url)){throw $locationMinErr('badpath','Invalid url "{0}".',url);}var prefixed=url.charAt(0)!=='/';if(prefixed){url='/'+url;}var match=urlResolve(url);locationObj.$$path=decodeURIComponent(prefixed&&match.pathname.charAt(0)==='/'?match.pathname.substring(1):match.pathname);locationObj.$$search=parseKeyValue(match.search);locationObj.$$hash=decodeURIComponent(match.hash);// make sure path starts with '/';
	if(locationObj.$$path&&locationObj.$$path.charAt(0)!=='/'){locationObj.$$path='/'+locationObj.$$path;}}function startsWith(str,search){return str.slice(0,search.length)===search;}/**
	 *
	 * @param {string} base
	 * @param {string} url
	 * @returns {string} returns text from `url` after `base` or `undefined` if it does not begin with
	 *                   the expected string.
	 */function stripBaseUrl(base,url){if(startsWith(url,base)){return url.substr(base.length);}}function stripHash(url){var index=url.indexOf('#');return index===-1?url:url.substr(0,index);}function trimEmptyHash(url){return url.replace(/(#.+)|#$/,'$1');}function stripFile(url){return url.substr(0,stripHash(url).lastIndexOf('/')+1);}/* return the server only (scheme://host:port) */function serverBase(url){return url.substring(0,url.indexOf('/',url.indexOf('//')+2));}/**
	 * LocationHtml5Url represents a URL
	 * This object is exposed as $location service when HTML5 mode is enabled and supported
	 *
	 * @constructor
	 * @param {string} appBase application base URL
	 * @param {string} appBaseNoFile application base URL stripped of any filename
	 * @param {string} basePrefix URL path prefix
	 */function LocationHtml5Url(appBase,appBaseNoFile,basePrefix){this.$$html5=true;basePrefix=basePrefix||'';parseAbsoluteUrl(appBase,this);/**
	   * Parse given HTML5 (regular) URL string into properties
	   * @param {string} url HTML5 URL
	   * @private
	   */this.$$parse=function(url){var pathUrl=stripBaseUrl(appBaseNoFile,url);if(!isString(pathUrl)){throw $locationMinErr('ipthprfx','Invalid url "{0}", missing path prefix "{1}".',url,appBaseNoFile);}parseAppUrl(pathUrl,this);if(!this.$$path){this.$$path='/';}this.$$compose();};/**
	   * Compose url and update `absUrl` property
	   * @private
	   */this.$$compose=function(){var search=toKeyValue(this.$$search),hash=this.$$hash?'#'+encodeUriSegment(this.$$hash):'';this.$$url=encodePath(this.$$path)+(search?'?'+search:'')+hash;this.$$absUrl=appBaseNoFile+this.$$url.substr(1);// first char is always '/'
	this.$$urlUpdatedByLocation=true;};this.$$parseLinkUrl=function(url,relHref){if(relHref&&relHref[0]==='#'){// special case for links to hash fragments:
	// keep the old url and only replace the hash fragment
	this.hash(relHref.slice(1));return true;}var appUrl,prevAppUrl;var rewrittenUrl;if(isDefined(appUrl=stripBaseUrl(appBase,url))){prevAppUrl=appUrl;if(basePrefix&&isDefined(appUrl=stripBaseUrl(basePrefix,appUrl))){rewrittenUrl=appBaseNoFile+(stripBaseUrl('/',appUrl)||appUrl);}else{rewrittenUrl=appBase+prevAppUrl;}}else if(isDefined(appUrl=stripBaseUrl(appBaseNoFile,url))){rewrittenUrl=appBaseNoFile+appUrl;}else if(appBaseNoFile===url+'/'){rewrittenUrl=appBaseNoFile;}if(rewrittenUrl){this.$$parse(rewrittenUrl);}return!!rewrittenUrl;};}/**
	 * LocationHashbangUrl represents URL
	 * This object is exposed as $location service when developer doesn't opt into html5 mode.
	 * It also serves as the base class for html5 mode fallback on legacy browsers.
	 *
	 * @constructor
	 * @param {string} appBase application base URL
	 * @param {string} appBaseNoFile application base URL stripped of any filename
	 * @param {string} hashPrefix hashbang prefix
	 */function LocationHashbangUrl(appBase,appBaseNoFile,hashPrefix){parseAbsoluteUrl(appBase,this);/**
	   * Parse given hashbang URL into properties
	   * @param {string} url Hashbang URL
	   * @private
	   */this.$$parse=function(url){var withoutBaseUrl=stripBaseUrl(appBase,url)||stripBaseUrl(appBaseNoFile,url);var withoutHashUrl;if(!isUndefined(withoutBaseUrl)&&withoutBaseUrl.charAt(0)==='#'){// The rest of the URL starts with a hash so we have
	// got either a hashbang path or a plain hash fragment
	withoutHashUrl=stripBaseUrl(hashPrefix,withoutBaseUrl);if(isUndefined(withoutHashUrl)){// There was no hashbang prefix so we just have a hash fragment
	withoutHashUrl=withoutBaseUrl;}}else{// There was no hashbang path nor hash fragment:
	// If we are in HTML5 mode we use what is left as the path;
	// Otherwise we ignore what is left
	if(this.$$html5){withoutHashUrl=withoutBaseUrl;}else{withoutHashUrl='';if(isUndefined(withoutBaseUrl)){appBase=url;/** @type {?} */this.replace();}}}parseAppUrl(withoutHashUrl,this);this.$$path=removeWindowsDriveName(this.$$path,withoutHashUrl,appBase);this.$$compose();/*
	     * In Windows, on an anchor node on documents loaded from
	     * the filesystem, the browser will return a pathname
	     * prefixed with the drive name ('/C:/path') when a
	     * pathname without a drive is set:
	     *  * a.setAttribute('href', '/foo')
	     *   * a.pathname === '/C:/foo' //true
	     *
	     * Inside of Angular, we're always using pathnames that
	     * do not include drive names for routing.
	     */function removeWindowsDriveName(path,url,base){/*
	      Matches paths for file protocol on windows,
	      such as /C:/foo/bar, and captures only /foo/bar.
	      */var windowsFilePathExp=/^\/[A-Z]:(\/.*)/;var firstPathSegmentMatch;//Get the relative path from the input URL.
	if(startsWith(url,base)){url=url.replace(base,'');}// The input URL intentionally contains a first path segment that ends with a colon.
	if(windowsFilePathExp.exec(url)){return path;}firstPathSegmentMatch=windowsFilePathExp.exec(path);return firstPathSegmentMatch?firstPathSegmentMatch[1]:path;}};/**
	   * Compose hashbang URL and update `absUrl` property
	   * @private
	   */this.$$compose=function(){var search=toKeyValue(this.$$search),hash=this.$$hash?'#'+encodeUriSegment(this.$$hash):'';this.$$url=encodePath(this.$$path)+(search?'?'+search:'')+hash;this.$$absUrl=appBase+(this.$$url?hashPrefix+this.$$url:'');this.$$urlUpdatedByLocation=true;};this.$$parseLinkUrl=function(url,relHref){if(stripHash(appBase)===stripHash(url)){this.$$parse(url);return true;}return false;};}/**
	 * LocationHashbangUrl represents URL
	 * This object is exposed as $location service when html5 history api is enabled but the browser
	 * does not support it.
	 *
	 * @constructor
	 * @param {string} appBase application base URL
	 * @param {string} appBaseNoFile application base URL stripped of any filename
	 * @param {string} hashPrefix hashbang prefix
	 */function LocationHashbangInHtml5Url(appBase,appBaseNoFile,hashPrefix){this.$$html5=true;LocationHashbangUrl.apply(this,arguments);this.$$parseLinkUrl=function(url,relHref){if(relHref&&relHref[0]==='#'){// special case for links to hash fragments:
	// keep the old url and only replace the hash fragment
	this.hash(relHref.slice(1));return true;}var rewrittenUrl;var appUrl;if(appBase===stripHash(url)){rewrittenUrl=url;}else if(appUrl=stripBaseUrl(appBaseNoFile,url)){rewrittenUrl=appBase+hashPrefix+appUrl;}else if(appBaseNoFile===url+'/'){rewrittenUrl=appBaseNoFile;}if(rewrittenUrl){this.$$parse(rewrittenUrl);}return!!rewrittenUrl;};this.$$compose=function(){var search=toKeyValue(this.$$search),hash=this.$$hash?'#'+encodeUriSegment(this.$$hash):'';this.$$url=encodePath(this.$$path)+(search?'?'+search:'')+hash;// include hashPrefix in $$absUrl when $$url is empty so IE9 does not reload page because of removal of '#'
	this.$$absUrl=appBase+hashPrefix+this.$$url;this.$$urlUpdatedByLocation=true;};}var locationPrototype={/**
	   * Ensure absolute URL is initialized.
	   * @private
	   */$$absUrl:'',/**
	   * Are we in html5 mode?
	   * @private
	   */$$html5:false,/**
	   * Has any change been replacing?
	   * @private
	   */$$replace:false,/**
	   * @ngdoc method
	   * @name $location#absUrl
	   *
	   * @description
	   * This method is getter only.
	   *
	   * Return full URL representation with all segments encoded according to rules specified in
	   * [RFC 3986](http://www.ietf.org/rfc/rfc3986.txt).
	   *
	   *
	   * ```js
	   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var absUrl = $location.absUrl();
	   * // => "http://example.com/#/some/path?foo=bar&baz=xoxo"
	   * ```
	   *
	   * @return {string} full URL
	   */absUrl:locationGetter('$$absUrl'),/**
	   * @ngdoc method
	   * @name $location#url
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return URL (e.g. `/path?a=b#hash`) when called without any parameter.
	   *
	   * Change path, search and hash, when called with parameter and return `$location`.
	   *
	   *
	   * ```js
	   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var url = $location.url();
	   * // => "/some/path?foo=bar&baz=xoxo"
	   * ```
	   *
	   * @param {string=} url New URL without base prefix (e.g. `/path?a=b#hash`)
	   * @return {string} url
	   */url:function url(_url){if(isUndefined(_url)){return this.$$url;}var match=PATH_MATCH.exec(_url);if(match[1]||_url==='')this.path(decodeURIComponent(match[1]));if(match[2]||match[1]||_url==='')this.search(match[3]||'');this.hash(match[5]||'');return this;},/**
	   * @ngdoc method
	   * @name $location#protocol
	   *
	   * @description
	   * This method is getter only.
	   *
	   * Return protocol of current URL.
	   *
	   *
	   * ```js
	   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var protocol = $location.protocol();
	   * // => "http"
	   * ```
	   *
	   * @return {string} protocol of current URL
	   */protocol:locationGetter('$$protocol'),/**
	   * @ngdoc method
	   * @name $location#host
	   *
	   * @description
	   * This method is getter only.
	   *
	   * Return host of current URL.
	   *
	   * Note: compared to the non-angular version `location.host` which returns `hostname:port`, this returns the `hostname` portion only.
	   *
	   *
	   * ```js
	   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var host = $location.host();
	   * // => "example.com"
	   *
	   * // given URL http://user:password@example.com:8080/#/some/path?foo=bar&baz=xoxo
	   * host = $location.host();
	   * // => "example.com"
	   * host = location.host;
	   * // => "example.com:8080"
	   * ```
	   *
	   * @return {string} host of current URL.
	   */host:locationGetter('$$host'),/**
	   * @ngdoc method
	   * @name $location#port
	   *
	   * @description
	   * This method is getter only.
	   *
	   * Return port of current URL.
	   *
	   *
	   * ```js
	   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var port = $location.port();
	   * // => 80
	   * ```
	   *
	   * @return {Number} port
	   */port:locationGetter('$$port'),/**
	   * @ngdoc method
	   * @name $location#path
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return path of current URL when called without any parameter.
	   *
	   * Change path when called with parameter and return `$location`.
	   *
	   * Note: Path should always begin with forward slash (/), this method will add the forward slash
	   * if it is missing.
	   *
	   *
	   * ```js
	   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var path = $location.path();
	   * // => "/some/path"
	   * ```
	   *
	   * @param {(string|number)=} path New path
	   * @return {(string|object)} path if called with no parameters, or `$location` if called with a parameter
	   */path:locationGetterSetter('$$path',function(path){path=path!==null?path.toString():'';return path.charAt(0)==='/'?path:'/'+path;}),/**
	   * @ngdoc method
	   * @name $location#search
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return search part (as object) of current URL when called without any parameter.
	   *
	   * Change search part when called with parameter and return `$location`.
	   *
	   *
	   * ```js
	   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var searchObject = $location.search();
	   * // => {foo: 'bar', baz: 'xoxo'}
	   *
	   * // set foo to 'yipee'
	   * $location.search('foo', 'yipee');
	   * // $location.search() => {foo: 'yipee', baz: 'xoxo'}
	   * ```
	   *
	   * @param {string|Object.<string>|Object.<Array.<string>>} search New search params - string or
	   * hash object.
	   *
	   * When called with a single argument the method acts as a setter, setting the `search` component
	   * of `$location` to the specified value.
	   *
	   * If the argument is a hash object containing an array of values, these values will be encoded
	   * as duplicate search parameters in the URL.
	   *
	   * @param {(string|Number|Array<string>|boolean)=} paramValue If `search` is a string or number, then `paramValue`
	   * will override only a single search property.
	   *
	   * If `paramValue` is an array, it will override the property of the `search` component of
	   * `$location` specified via the first argument.
	   *
	   * If `paramValue` is `null`, the property specified via the first argument will be deleted.
	   *
	   * If `paramValue` is `true`, the property specified via the first argument will be added with no
	   * value nor trailing equal sign.
	   *
	   * @return {Object} If called with no arguments returns the parsed `search` object. If called with
	   * one or more arguments returns `$location` object itself.
	   */search:function search(_search,paramValue){switch(arguments.length){case 0:return this.$$search;case 1:if(isString(_search)||isNumber(_search)){_search=_search.toString();this.$$search=parseKeyValue(_search);}else if(isObject(_search)){_search=copy(_search,{});// remove object undefined or null properties
	forEach(_search,function(value,key){if(value==null)delete _search[key];});this.$$search=_search;}else{throw $locationMinErr('isrcharg','The first argument of the `$location#search()` call must be a string or an object.');}break;default:if(isUndefined(paramValue)||paramValue===null){delete this.$$search[_search];}else{this.$$search[_search]=paramValue;}}this.$$compose();return this;},/**
	   * @ngdoc method
	   * @name $location#hash
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Returns the hash fragment when called without any parameters.
	   *
	   * Changes the hash fragment when called with a parameter and returns `$location`.
	   *
	   *
	   * ```js
	   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo#hashValue
	   * var hash = $location.hash();
	   * // => "hashValue"
	   * ```
	   *
	   * @param {(string|number)=} hash New hash fragment
	   * @return {string} hash
	   */hash:locationGetterSetter('$$hash',function(hash){return hash!==null?hash.toString():'';}),/**
	   * @ngdoc method
	   * @name $location#replace
	   *
	   * @description
	   * If called, all changes to $location during the current `$digest` will replace the current history
	   * record, instead of adding a new one.
	   */replace:function replace(){this.$$replace=true;return this;}};forEach([LocationHashbangInHtml5Url,LocationHashbangUrl,LocationHtml5Url],function(Location){Location.prototype=Object.create(locationPrototype);/**
	   * @ngdoc method
	   * @name $location#state
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return the history state object when called without any parameter.
	   *
	   * Change the history state object when called with one parameter and return `$location`.
	   * The state object is later passed to `pushState` or `replaceState`.
	   *
	   * NOTE: This method is supported only in HTML5 mode and only in browsers supporting
	   * the HTML5 History API (i.e. methods `pushState` and `replaceState`). If you need to support
	   * older browsers (like IE9 or Android < 4.0), don't use this method.
	   *
	   * @param {object=} state State object for pushState or replaceState
	   * @return {object} state
	   */Location.prototype.state=function(state){if(!arguments.length){return this.$$state;}if(Location!==LocationHtml5Url||!this.$$html5){throw $locationMinErr('nostate','History API state support is available only '+'in HTML5 mode and only in browsers supporting HTML5 History API');}// The user might modify `stateObject` after invoking `$location.state(stateObject)`
	// but we're changing the $$state reference to $browser.state() during the $digest
	// so the modification window is narrow.
	this.$$state=isUndefined(state)?null:state;this.$$urlUpdatedByLocation=true;return this;};});function locationGetter(property){return(/** @this */function(){return this[property];});}function locationGetterSetter(property,preprocess){return(/** @this */function(value){if(isUndefined(value)){return this[property];}this[property]=preprocess(value);this.$$compose();return this;});}/**
	 * @ngdoc service
	 * @name $location
	 *
	 * @requires $rootElement
	 *
	 * @description
	 * The $location service parses the URL in the browser address bar (based on the
	 * [window.location](https://developer.mozilla.org/en/window.location)) and makes the URL
	 * available to your application. Changes to the URL in the address bar are reflected into
	 * $location service and changes to $location are reflected into the browser address bar.
	 *
	 * **The $location service:**
	 *
	 * - Exposes the current URL in the browser address bar, so you can
	 *   - Watch and observe the URL.
	 *   - Change the URL.
	 * - Synchronizes the URL with the browser when the user
	 *   - Changes the address bar.
	 *   - Clicks the back or forward button (or clicks a History link).
	 *   - Clicks on a link.
	 * - Represents the URL object as a set of methods (protocol, host, port, path, search, hash).
	 *
	 * For more information see {@link guide/$location Developer Guide: Using $location}
	 *//**
	 * @ngdoc provider
	 * @name $locationProvider
	 * @this
	 *
	 * @description
	 * Use the `$locationProvider` to configure how the application deep linking paths are stored.
	 */function $LocationProvider(){var hashPrefix='!',html5Mode={enabled:false,requireBase:true,rewriteLinks:true};/**
	   * @ngdoc method
	   * @name $locationProvider#hashPrefix
	   * @description
	   * The default value for the prefix is `'!'`.
	   * @param {string=} prefix Prefix for hash part (containing path and search)
	   * @returns {*} current value if used as getter or itself (chaining) if used as setter
	   */this.hashPrefix=function(prefix){if(isDefined(prefix)){hashPrefix=prefix;return this;}else{return hashPrefix;}};/**
	   * @ngdoc method
	   * @name $locationProvider#html5Mode
	   * @description
	   * @param {(boolean|Object)=} mode If boolean, sets `html5Mode.enabled` to value.
	   *   If object, sets `enabled`, `requireBase` and `rewriteLinks` to respective values. Supported
	   *   properties:
	   *   - **enabled** – `{boolean}` – (default: false) If true, will rely on `history.pushState` to
	   *     change urls where supported. Will fall back to hash-prefixed paths in browsers that do not
	   *     support `pushState`.
	   *   - **requireBase** - `{boolean}` - (default: `true`) When html5Mode is enabled, specifies
	   *     whether or not a <base> tag is required to be present. If `enabled` and `requireBase` are
	   *     true, and a base tag is not present, an error will be thrown when `$location` is injected.
	   *     See the {@link guide/$location $location guide for more information}
	   *   - **rewriteLinks** - `{boolean|string}` - (default: `true`) When html5Mode is enabled,
	   *     enables/disables URL rewriting for relative links. If set to a string, URL rewriting will
	   *     only happen on links with an attribute that matches the given string. For example, if set
	   *     to `'internal-link'`, then the URL will only be rewritten for `<a internal-link>` links.
	   *     Note that [attribute name normalization](guide/directive#normalization) does not apply
	   *     here, so `'internalLink'` will **not** match `'internal-link'`.
	   *
	   * @returns {Object} html5Mode object if used as getter or itself (chaining) if used as setter
	   */this.html5Mode=function(mode){if(isBoolean(mode)){html5Mode.enabled=mode;return this;}else if(isObject(mode)){if(isBoolean(mode.enabled)){html5Mode.enabled=mode.enabled;}if(isBoolean(mode.requireBase)){html5Mode.requireBase=mode.requireBase;}if(isBoolean(mode.rewriteLinks)||isString(mode.rewriteLinks)){html5Mode.rewriteLinks=mode.rewriteLinks;}return this;}else{return html5Mode;}};/**
	   * @ngdoc event
	   * @name $location#$locationChangeStart
	   * @eventType broadcast on root scope
	   * @description
	   * Broadcasted before a URL will change.
	   *
	   * This change can be prevented by calling
	   * `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on} for more
	   * details about event object. Upon successful change
	   * {@link ng.$location#$locationChangeSuccess $locationChangeSuccess} is fired.
	   *
	   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
	   * the browser supports the HTML5 History API.
	   *
	   * @param {Object} angularEvent Synthetic event object.
	   * @param {string} newUrl New URL
	   * @param {string=} oldUrl URL that was before it was changed.
	   * @param {string=} newState New history state object
	   * @param {string=} oldState History state object that was before it was changed.
	   *//**
	   * @ngdoc event
	   * @name $location#$locationChangeSuccess
	   * @eventType broadcast on root scope
	   * @description
	   * Broadcasted after a URL was changed.
	   *
	   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
	   * the browser supports the HTML5 History API.
	   *
	   * @param {Object} angularEvent Synthetic event object.
	   * @param {string} newUrl New URL
	   * @param {string=} oldUrl URL that was before it was changed.
	   * @param {string=} newState New history state object
	   * @param {string=} oldState History state object that was before it was changed.
	   */this.$get=['$rootScope','$browser','$sniffer','$rootElement','$window',function($rootScope,$browser,$sniffer,$rootElement,$window){var $location,LocationMode,baseHref=$browser.baseHref(),// if base[href] is undefined, it defaults to ''
	initialUrl=$browser.url(),appBase;if(html5Mode.enabled){if(!baseHref&&html5Mode.requireBase){throw $locationMinErr('nobase','$location in HTML5 mode requires a <base> tag to be present!');}appBase=serverBase(initialUrl)+(baseHref||'/');LocationMode=$sniffer.history?LocationHtml5Url:LocationHashbangInHtml5Url;}else{appBase=stripHash(initialUrl);LocationMode=LocationHashbangUrl;}var appBaseNoFile=stripFile(appBase);$location=new LocationMode(appBase,appBaseNoFile,'#'+hashPrefix);$location.$$parseLinkUrl(initialUrl,initialUrl);$location.$$state=$browser.state();var IGNORE_URI_REGEXP=/^\s*(javascript|mailto):/i;function setBrowserUrlWithFallback(url,replace,state){var oldUrl=$location.url();var oldState=$location.$$state;try{$browser.url(url,replace,state);// Make sure $location.state() returns referentially identical (not just deeply equal)
	// state object; this makes possible quick checking if the state changed in the digest
	// loop. Checking deep equality would be too expensive.
	$location.$$state=$browser.state();}catch(e){// Restore old values if pushState fails
	$location.url(oldUrl);$location.$$state=oldState;throw e;}}$rootElement.on('click',function(event){var rewriteLinks=html5Mode.rewriteLinks;// TODO(vojta): rewrite link when opening in new tab/window (in legacy browser)
	// currently we open nice url link and redirect then
	if(!rewriteLinks||event.ctrlKey||event.metaKey||event.shiftKey||event.which===2||event.button===2)return;var elm=jqLite(event.target);// traverse the DOM up to find first A tag
	while(nodeName_(elm[0])!=='a'){// ignore rewriting if no A tag (reached root element, or no parent - removed from document)
	if(elm[0]===$rootElement[0]||!(elm=elm.parent())[0])return;}if(isString(rewriteLinks)&&isUndefined(elm.attr(rewriteLinks)))return;var absHref=elm.prop('href');// get the actual href attribute - see
	// http://msdn.microsoft.com/en-us/library/ie/dd347148(v=vs.85).aspx
	var relHref=elm.attr('href')||elm.attr('xlink:href');if(isObject(absHref)&&absHref.toString()==='[object SVGAnimatedString]'){// SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during
	// an animation.
	absHref=urlResolve(absHref.animVal).href;}// Ignore when url is started with javascript: or mailto:
	if(IGNORE_URI_REGEXP.test(absHref))return;if(absHref&&!elm.attr('target')&&!event.isDefaultPrevented()){if($location.$$parseLinkUrl(absHref,relHref)){// We do a preventDefault for all urls that are part of the angular application,
	// in html5mode and also without, so that we are able to abort navigation without
	// getting double entries in the location history.
	event.preventDefault();// update location manually
	if($location.absUrl()!==$browser.url()){$rootScope.$apply();// hack to work around FF6 bug 684208 when scenario runner clicks on links
	$window.angular['ff-684208-preventDefault']=true;}}}});// rewrite hashbang url <> html5 url
	if(trimEmptyHash($location.absUrl())!==trimEmptyHash(initialUrl)){$browser.url($location.absUrl(),true);}var initializing=true;// update $location when $browser url changes
	$browser.onUrlChange(function(newUrl,newState){if(!startsWith(newUrl,appBaseNoFile)){// If we are navigating outside of the app then force a reload
	$window.location.href=newUrl;return;}$rootScope.$evalAsync(function(){var oldUrl=$location.absUrl();var oldState=$location.$$state;var defaultPrevented;newUrl=trimEmptyHash(newUrl);$location.$$parse(newUrl);$location.$$state=newState;defaultPrevented=$rootScope.$broadcast('$locationChangeStart',newUrl,oldUrl,newState,oldState).defaultPrevented;// if the location was changed by a `$locationChangeStart` handler then stop
	// processing this location change
	if($location.absUrl()!==newUrl)return;if(defaultPrevented){$location.$$parse(oldUrl);$location.$$state=oldState;setBrowserUrlWithFallback(oldUrl,false,oldState);}else{initializing=false;afterLocationChange(oldUrl,oldState);}});if(!$rootScope.$$phase)$rootScope.$digest();});// update browser
	$rootScope.$watch(function $locationWatch(){if(initializing||$location.$$urlUpdatedByLocation){$location.$$urlUpdatedByLocation=false;var oldUrl=trimEmptyHash($browser.url());var newUrl=trimEmptyHash($location.absUrl());var oldState=$browser.state();var currentReplace=$location.$$replace;var urlOrStateChanged=oldUrl!==newUrl||$location.$$html5&&$sniffer.history&&oldState!==$location.$$state;if(initializing||urlOrStateChanged){initializing=false;$rootScope.$evalAsync(function(){var newUrl=$location.absUrl();var defaultPrevented=$rootScope.$broadcast('$locationChangeStart',newUrl,oldUrl,$location.$$state,oldState).defaultPrevented;// if the location was changed by a `$locationChangeStart` handler then stop
	// processing this location change
	if($location.absUrl()!==newUrl)return;if(defaultPrevented){$location.$$parse(oldUrl);$location.$$state=oldState;}else{if(urlOrStateChanged){setBrowserUrlWithFallback(newUrl,currentReplace,oldState===$location.$$state?null:$location.$$state);}afterLocationChange(oldUrl,oldState);}});}}$location.$$replace=false;// we don't need to return anything because $evalAsync will make the digest loop dirty when
	// there is a change
	});return $location;function afterLocationChange(oldUrl,oldState){$rootScope.$broadcast('$locationChangeSuccess',$location.absUrl(),oldUrl,$location.$$state,oldState);}}];}/**
	 * @ngdoc service
	 * @name $log
	 * @requires $window
	 *
	 * @description
	 * Simple service for logging. Default implementation safely writes the message
	 * into the browser's console (if present).
	 *
	 * The main purpose of this service is to simplify debugging and troubleshooting.
	 *
	 * The default is to log `debug` messages. You can use
	 * {@link ng.$logProvider ng.$logProvider#debugEnabled} to change this.
	 *
	 * @example
	   <example module="logExample" name="log-service">
	     <file name="script.js">
	       angular.module('logExample', [])
	         .controller('LogController', ['$scope', '$log', function($scope, $log) {
	           $scope.$log = $log;
	           $scope.message = 'Hello World!';
	         }]);
	     </file>
	     <file name="index.html">
	       <div ng-controller="LogController">
	         <p>Reload this page with open console, enter text and hit the log button...</p>
	         <label>Message:
	         <input type="text" ng-model="message" /></label>
	         <button ng-click="$log.log(message)">log</button>
	         <button ng-click="$log.warn(message)">warn</button>
	         <button ng-click="$log.info(message)">info</button>
	         <button ng-click="$log.error(message)">error</button>
	         <button ng-click="$log.debug(message)">debug</button>
	       </div>
	     </file>
	   </example>
	 *//**
	 * @ngdoc provider
	 * @name $logProvider
	 * @this
	 *
	 * @description
	 * Use the `$logProvider` to configure how the application logs messages
	 */function $LogProvider(){var debug=true,self=this;/**
	   * @ngdoc method
	   * @name $logProvider#debugEnabled
	   * @description
	   * @param {boolean=} flag enable or disable debug level messages
	   * @returns {*} current value if used as getter or itself (chaining) if used as setter
	   */this.debugEnabled=function(flag){if(isDefined(flag)){debug=flag;return this;}else{return debug;}};this.$get=['$window',function($window){// Support: IE 9-11, Edge 12-14+
	// IE/Edge display errors in such a way that it requires the user to click in 4 places
	// to see the stack trace. There is no way to feature-detect it so there's a chance
	// of the user agent sniffing to go wrong but since it's only about logging, this shouldn't
	// break apps. Other browsers display errors in a sensible way and some of them map stack
	// traces along source maps if available so it makes sense to let browsers display it
	// as they want.
	var formatStackTrace=msie||/\bEdge\//.test($window.navigator&&$window.navigator.userAgent);return{/**
	       * @ngdoc method
	       * @name $log#log
	       *
	       * @description
	       * Write a log message
	       */log:consoleLog('log'),/**
	       * @ngdoc method
	       * @name $log#info
	       *
	       * @description
	       * Write an information message
	       */info:consoleLog('info'),/**
	       * @ngdoc method
	       * @name $log#warn
	       *
	       * @description
	       * Write a warning message
	       */warn:consoleLog('warn'),/**
	       * @ngdoc method
	       * @name $log#error
	       *
	       * @description
	       * Write an error message
	       */error:consoleLog('error'),/**
	       * @ngdoc method
	       * @name $log#debug
	       *
	       * @description
	       * Write a debug message
	       */debug:function(){var fn=consoleLog('debug');return function(){if(debug){fn.apply(self,arguments);}};}()};function formatError(arg){if(arg instanceof Error){if(arg.stack&&formatStackTrace){arg=arg.message&&arg.stack.indexOf(arg.message)===-1?'Error: '+arg.message+'\n'+arg.stack:arg.stack;}else if(arg.sourceURL){arg=arg.message+'\n'+arg.sourceURL+':'+arg.line;}}return arg;}function consoleLog(type){var console=$window.console||{},logFn=console[type]||console.log||noop,hasApply=false;// Note: reading logFn.apply throws an error in IE11 in IE8 document mode.
	// The reason behind this is that console.log has type "object" in IE8...
	try{hasApply=!!logFn.apply;}catch(e){/* empty */}if(hasApply){return function(){var args=[];forEach(arguments,function(arg){args.push(formatError(arg));});return logFn.apply(console,args);};}// we are IE which either doesn't have window.console => this is noop and we do nothing,
	// or we are IE where console.log doesn't have apply so we log at least first 2 args
	return function(arg1,arg2){logFn(arg1,arg2==null?'':arg2);};}}];}/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */var $parseMinErr=minErr('$parse');var objectValueOf={}.constructor.prototype.valueOf;// Sandboxing Angular Expressions
	// ------------------------------
	// Angular expressions are no longer sandboxed. So it is now even easier to access arbitrary JS code by
	// various means such as obtaining a reference to native JS functions like the Function constructor.
	//
	// As an example, consider the following Angular expression:
	//
	//   {}.toString.constructor('alert("evil JS code")')
	//
	// It is important to realize that if you create an expression from a string that contains user provided
	// content then it is possible that your application contains a security vulnerability to an XSS style attack.
	//
	// See https://docs.angularjs.org/guide/security
	function getStringValue(name){// Property names must be strings. This means that non-string objects cannot be used
	// as keys in an object. Any non-string object, including a number, is typecasted
	// into a string via the toString method.
	// -- MDN, https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Property_accessors#Property_names
	//
	// So, to ensure that we are checking the same `name` that JavaScript would use, we cast it
	// to a string. It's not always possible. If `name` is an object and its `toString` method is
	// 'broken' (doesn't return a string, isn't a function, etc.), an error will be thrown:
	//
	// TypeError: Cannot convert object to primitive value
	//
	// For performance reasons, we don't catch this error here and allow it to propagate up the call
	// stack. Note that you'll get the same error in JavaScript if you try to access a property using
	// such a 'broken' object as a key.
	return name+'';}var OPERATORS=createMap();forEach('+ - * / % === !== == != < > <= >= && || ! = |'.split(' '),function(operator){OPERATORS[operator]=true;});var ESCAPE={'n':'\n','f':'\f','r':'\r','t':'\t','v':'\v','\'':'\'','"':'"'};/////////////////////////////////////////
	/**
	 * @constructor
	 */var Lexer=function Lexer(options){this.options=options;};Lexer.prototype={constructor:Lexer,lex:function lex(text){this.text=text;this.index=0;this.tokens=[];while(this.index<this.text.length){var ch=this.text.charAt(this.index);if(ch==='"'||ch==='\''){this.readString(ch);}else if(this.isNumber(ch)||ch==='.'&&this.isNumber(this.peek())){this.readNumber();}else if(this.isIdentifierStart(this.peekMultichar())){this.readIdent();}else if(this.is(ch,'(){}[].,;:?')){this.tokens.push({index:this.index,text:ch});this.index++;}else if(this.isWhitespace(ch)){this.index++;}else{var ch2=ch+this.peek();var ch3=ch2+this.peek(2);var op1=OPERATORS[ch];var op2=OPERATORS[ch2];var op3=OPERATORS[ch3];if(op1||op2||op3){var token=op3?ch3:op2?ch2:ch;this.tokens.push({index:this.index,text:token,operator:true});this.index+=token.length;}else{this.throwError('Unexpected next character ',this.index,this.index+1);}}}return this.tokens;},is:function is(ch,chars){return chars.indexOf(ch)!==-1;},peek:function peek(i){var num=i||1;return this.index+num<this.text.length?this.text.charAt(this.index+num):false;},isNumber:function isNumber(ch){return'0'<=ch&&ch<='9'&&typeof ch==='string';},isWhitespace:function isWhitespace(ch){// IE treats non-breaking space as \u00A0
	return ch===' '||ch==='\r'||ch==='\t'||ch==='\n'||ch==='\v'||ch==='\xA0';},isIdentifierStart:function isIdentifierStart(ch){return this.options.isIdentifierStart?this.options.isIdentifierStart(ch,this.codePointAt(ch)):this.isValidIdentifierStart(ch);},isValidIdentifierStart:function isValidIdentifierStart(ch){return'a'<=ch&&ch<='z'||'A'<=ch&&ch<='Z'||'_'===ch||ch==='$';},isIdentifierContinue:function isIdentifierContinue(ch){return this.options.isIdentifierContinue?this.options.isIdentifierContinue(ch,this.codePointAt(ch)):this.isValidIdentifierContinue(ch);},isValidIdentifierContinue:function isValidIdentifierContinue(ch,cp){return this.isValidIdentifierStart(ch,cp)||this.isNumber(ch);},codePointAt:function codePointAt(ch){if(ch.length===1)return ch.charCodeAt(0);// eslint-disable-next-line no-bitwise
	return(ch.charCodeAt(0)<<10)+ch.charCodeAt(1)-0x35FDC00;},peekMultichar:function peekMultichar(){var ch=this.text.charAt(this.index);var peek=this.peek();if(!peek){return ch;}var cp1=ch.charCodeAt(0);var cp2=peek.charCodeAt(0);if(cp1>=0xD800&&cp1<=0xDBFF&&cp2>=0xDC00&&cp2<=0xDFFF){return ch+peek;}return ch;},isExpOperator:function isExpOperator(ch){return ch==='-'||ch==='+'||this.isNumber(ch);},throwError:function throwError(error,start,end){end=end||this.index;var colStr=isDefined(start)?'s '+start+'-'+this.index+' ['+this.text.substring(start,end)+']':' '+end;throw $parseMinErr('lexerr','Lexer Error: {0} at column{1} in expression [{2}].',error,colStr,this.text);},readNumber:function readNumber(){var number='';var start=this.index;while(this.index<this.text.length){var ch=lowercase(this.text.charAt(this.index));if(ch==='.'||this.isNumber(ch)){number+=ch;}else{var peekCh=this.peek();if(ch==='e'&&this.isExpOperator(peekCh)){number+=ch;}else if(this.isExpOperator(ch)&&peekCh&&this.isNumber(peekCh)&&number.charAt(number.length-1)==='e'){number+=ch;}else if(this.isExpOperator(ch)&&(!peekCh||!this.isNumber(peekCh))&&number.charAt(number.length-1)==='e'){this.throwError('Invalid exponent');}else{break;}}this.index++;}this.tokens.push({index:start,text:number,constant:true,value:Number(number)});},readIdent:function readIdent(){var start=this.index;this.index+=this.peekMultichar().length;while(this.index<this.text.length){var ch=this.peekMultichar();if(!this.isIdentifierContinue(ch)){break;}this.index+=ch.length;}this.tokens.push({index:start,text:this.text.slice(start,this.index),identifier:true});},readString:function readString(quote){var start=this.index;this.index++;var string='';var rawString=quote;var escape=false;while(this.index<this.text.length){var ch=this.text.charAt(this.index);rawString+=ch;if(escape){if(ch==='u'){var hex=this.text.substring(this.index+1,this.index+5);if(!hex.match(/[\da-f]{4}/i)){this.throwError('Invalid unicode escape [\\u'+hex+']');}this.index+=4;string+=String.fromCharCode(parseInt(hex,16));}else{var rep=ESCAPE[ch];string=string+(rep||ch);}escape=false;}else if(ch==='\\'){escape=true;}else if(ch===quote){this.index++;this.tokens.push({index:start,text:rawString,constant:true,value:string});return;}else{string+=ch;}this.index++;}this.throwError('Unterminated quote',start);}};var AST=function AST(lexer,options){this.lexer=lexer;this.options=options;};AST.Program='Program';AST.ExpressionStatement='ExpressionStatement';AST.AssignmentExpression='AssignmentExpression';AST.ConditionalExpression='ConditionalExpression';AST.LogicalExpression='LogicalExpression';AST.BinaryExpression='BinaryExpression';AST.UnaryExpression='UnaryExpression';AST.CallExpression='CallExpression';AST.MemberExpression='MemberExpression';AST.Identifier='Identifier';AST.Literal='Literal';AST.ArrayExpression='ArrayExpression';AST.Property='Property';AST.ObjectExpression='ObjectExpression';AST.ThisExpression='ThisExpression';AST.LocalsExpression='LocalsExpression';// Internal use only
	AST.NGValueParameter='NGValueParameter';AST.prototype={ast:function ast(text){this.text=text;this.tokens=this.lexer.lex(text);var value=this.program();if(this.tokens.length!==0){this.throwError('is an unexpected token',this.tokens[0]);}return value;},program:function program(){var body=[];while(true){if(this.tokens.length>0&&!this.peek('}',')',';',']'))body.push(this.expressionStatement());if(!this.expect(';')){return{type:AST.Program,body:body};}}},expressionStatement:function expressionStatement(){return{type:AST.ExpressionStatement,expression:this.filterChain()};},filterChain:function filterChain(){var left=this.expression();while(this.expect('|')){left=this.filter(left);}return left;},expression:function expression(){return this.assignment();},assignment:function assignment(){var result=this.ternary();if(this.expect('=')){if(!isAssignable(result)){throw $parseMinErr('lval','Trying to assign a value to a non l-value');}result={type:AST.AssignmentExpression,left:result,right:this.assignment(),operator:'='};}return result;},ternary:function ternary(){var test=this.logicalOR();var alternate;var consequent;if(this.expect('?')){alternate=this.expression();if(this.consume(':')){consequent=this.expression();return{type:AST.ConditionalExpression,test:test,alternate:alternate,consequent:consequent};}}return test;},logicalOR:function logicalOR(){var left=this.logicalAND();while(this.expect('||')){left={type:AST.LogicalExpression,operator:'||',left:left,right:this.logicalAND()};}return left;},logicalAND:function logicalAND(){var left=this.equality();while(this.expect('&&')){left={type:AST.LogicalExpression,operator:'&&',left:left,right:this.equality()};}return left;},equality:function equality(){var left=this.relational();var token;while(token=this.expect('==','!=','===','!==')){left={type:AST.BinaryExpression,operator:token.text,left:left,right:this.relational()};}return left;},relational:function relational(){var left=this.additive();var token;while(token=this.expect('<','>','<=','>=')){left={type:AST.BinaryExpression,operator:token.text,left:left,right:this.additive()};}return left;},additive:function additive(){var left=this.multiplicative();var token;while(token=this.expect('+','-')){left={type:AST.BinaryExpression,operator:token.text,left:left,right:this.multiplicative()};}return left;},multiplicative:function multiplicative(){var left=this.unary();var token;while(token=this.expect('*','/','%')){left={type:AST.BinaryExpression,operator:token.text,left:left,right:this.unary()};}return left;},unary:function unary(){var token;if(token=this.expect('+','-','!')){return{type:AST.UnaryExpression,operator:token.text,prefix:true,argument:this.unary()};}else{return this.primary();}},primary:function primary(){var primary;if(this.expect('(')){primary=this.filterChain();this.consume(')');}else if(this.expect('[')){primary=this.arrayDeclaration();}else if(this.expect('{')){primary=this.object();}else if(this.selfReferential.hasOwnProperty(this.peek().text)){primary=copy(this.selfReferential[this.consume().text]);}else if(this.options.literals.hasOwnProperty(this.peek().text)){primary={type:AST.Literal,value:this.options.literals[this.consume().text]};}else if(this.peek().identifier){primary=this.identifier();}else if(this.peek().constant){primary=this.constant();}else{this.throwError('not a primary expression',this.peek());}var next;while(next=this.expect('(','[','.')){if(next.text==='('){primary={type:AST.CallExpression,callee:primary,arguments:this.parseArguments()};this.consume(')');}else if(next.text==='['){primary={type:AST.MemberExpression,object:primary,property:this.expression(),computed:true};this.consume(']');}else if(next.text==='.'){primary={type:AST.MemberExpression,object:primary,property:this.identifier(),computed:false};}else{this.throwError('IMPOSSIBLE');}}return primary;},filter:function filter(baseExpression){var args=[baseExpression];var result={type:AST.CallExpression,callee:this.identifier(),arguments:args,filter:true};while(this.expect(':')){args.push(this.expression());}return result;},parseArguments:function parseArguments(){var args=[];if(this.peekToken().text!==')'){do{args.push(this.filterChain());}while(this.expect(','));}return args;},identifier:function identifier(){var token=this.consume();if(!token.identifier){this.throwError('is not a valid identifier',token);}return{type:AST.Identifier,name:token.text};},constant:function constant(){// TODO check that it is a constant
	return{type:AST.Literal,value:this.consume().value};},arrayDeclaration:function arrayDeclaration(){var elements=[];if(this.peekToken().text!==']'){do{if(this.peek(']')){// Support trailing commas per ES5.1.
	break;}elements.push(this.expression());}while(this.expect(','));}this.consume(']');return{type:AST.ArrayExpression,elements:elements};},object:function object(){var properties=[],property;if(this.peekToken().text!=='}'){do{if(this.peek('}')){// Support trailing commas per ES5.1.
	break;}property={type:AST.Property,kind:'init'};if(this.peek().constant){property.key=this.constant();property.computed=false;this.consume(':');property.value=this.expression();}else if(this.peek().identifier){property.key=this.identifier();property.computed=false;if(this.peek(':')){this.consume(':');property.value=this.expression();}else{property.value=property.key;}}else if(this.peek('[')){this.consume('[');property.key=this.expression();this.consume(']');property.computed=true;this.consume(':');property.value=this.expression();}else{this.throwError('invalid key',this.peek());}properties.push(property);}while(this.expect(','));}this.consume('}');return{type:AST.ObjectExpression,properties:properties};},throwError:function throwError(msg,token){throw $parseMinErr('syntax','Syntax Error: Token \'{0}\' {1} at column {2} of the expression [{3}] starting at [{4}].',token.text,msg,token.index+1,this.text,this.text.substring(token.index));},consume:function consume(e1){if(this.tokens.length===0){throw $parseMinErr('ueoe','Unexpected end of expression: {0}',this.text);}var token=this.expect(e1);if(!token){this.throwError('is unexpected, expecting ['+e1+']',this.peek());}return token;},peekToken:function peekToken(){if(this.tokens.length===0){throw $parseMinErr('ueoe','Unexpected end of expression: {0}',this.text);}return this.tokens[0];},peek:function peek(e1,e2,e3,e4){return this.peekAhead(0,e1,e2,e3,e4);},peekAhead:function peekAhead(i,e1,e2,e3,e4){if(this.tokens.length>i){var token=this.tokens[i];var t=token.text;if(t===e1||t===e2||t===e3||t===e4||!e1&&!e2&&!e3&&!e4){return token;}}return false;},expect:function expect(e1,e2,e3,e4){var token=this.peek(e1,e2,e3,e4);if(token){this.tokens.shift();return token;}return false;},selfReferential:{'this':{type:AST.ThisExpression},'$locals':{type:AST.LocalsExpression}}};function ifDefined(v,d){return typeof v!=='undefined'?v:d;}function plusFn(l,r){if(typeof l==='undefined')return r;if(typeof r==='undefined')return l;return l+r;}function isStateless($filter,filterName){var fn=$filter(filterName);return!fn.$stateful;}function findConstantAndWatchExpressions(ast,$filter){var allConstants;var argsToWatch;var isStatelessFilter;switch(ast.type){case AST.Program:allConstants=true;forEach(ast.body,function(expr){findConstantAndWatchExpressions(expr.expression,$filter);allConstants=allConstants&&expr.expression.constant;});ast.constant=allConstants;break;case AST.Literal:ast.constant=true;ast.toWatch=[];break;case AST.UnaryExpression:findConstantAndWatchExpressions(ast.argument,$filter);ast.constant=ast.argument.constant;ast.toWatch=ast.argument.toWatch;break;case AST.BinaryExpression:findConstantAndWatchExpressions(ast.left,$filter);findConstantAndWatchExpressions(ast.right,$filter);ast.constant=ast.left.constant&&ast.right.constant;ast.toWatch=ast.left.toWatch.concat(ast.right.toWatch);break;case AST.LogicalExpression:findConstantAndWatchExpressions(ast.left,$filter);findConstantAndWatchExpressions(ast.right,$filter);ast.constant=ast.left.constant&&ast.right.constant;ast.toWatch=ast.constant?[]:[ast];break;case AST.ConditionalExpression:findConstantAndWatchExpressions(ast.test,$filter);findConstantAndWatchExpressions(ast.alternate,$filter);findConstantAndWatchExpressions(ast.consequent,$filter);ast.constant=ast.test.constant&&ast.alternate.constant&&ast.consequent.constant;ast.toWatch=ast.constant?[]:[ast];break;case AST.Identifier:ast.constant=false;ast.toWatch=[ast];break;case AST.MemberExpression:findConstantAndWatchExpressions(ast.object,$filter);if(ast.computed){findConstantAndWatchExpressions(ast.property,$filter);}ast.constant=ast.object.constant&&(!ast.computed||ast.property.constant);ast.toWatch=[ast];break;case AST.CallExpression:isStatelessFilter=ast.filter?isStateless($filter,ast.callee.name):false;allConstants=isStatelessFilter;argsToWatch=[];forEach(ast.arguments,function(expr){findConstantAndWatchExpressions(expr,$filter);allConstants=allConstants&&expr.constant;if(!expr.constant){argsToWatch.push.apply(argsToWatch,expr.toWatch);}});ast.constant=allConstants;ast.toWatch=isStatelessFilter?argsToWatch:[ast];break;case AST.AssignmentExpression:findConstantAndWatchExpressions(ast.left,$filter);findConstantAndWatchExpressions(ast.right,$filter);ast.constant=ast.left.constant&&ast.right.constant;ast.toWatch=[ast];break;case AST.ArrayExpression:allConstants=true;argsToWatch=[];forEach(ast.elements,function(expr){findConstantAndWatchExpressions(expr,$filter);allConstants=allConstants&&expr.constant;if(!expr.constant){argsToWatch.push.apply(argsToWatch,expr.toWatch);}});ast.constant=allConstants;ast.toWatch=argsToWatch;break;case AST.ObjectExpression:allConstants=true;argsToWatch=[];forEach(ast.properties,function(property){findConstantAndWatchExpressions(property.value,$filter);allConstants=allConstants&&property.value.constant&&!property.computed;if(!property.value.constant){argsToWatch.push.apply(argsToWatch,property.value.toWatch);}if(property.computed){findConstantAndWatchExpressions(property.key,$filter);if(!property.key.constant){argsToWatch.push.apply(argsToWatch,property.key.toWatch);}}});ast.constant=allConstants;ast.toWatch=argsToWatch;break;case AST.ThisExpression:ast.constant=false;ast.toWatch=[];break;case AST.LocalsExpression:ast.constant=false;ast.toWatch=[];break;}}function getInputs(body){if(body.length!==1)return;var lastExpression=body[0].expression;var candidate=lastExpression.toWatch;if(candidate.length!==1)return candidate;return candidate[0]!==lastExpression?candidate:undefined;}function isAssignable(ast){return ast.type===AST.Identifier||ast.type===AST.MemberExpression;}function assignableAST(ast){if(ast.body.length===1&&isAssignable(ast.body[0].expression)){return{type:AST.AssignmentExpression,left:ast.body[0].expression,right:{type:AST.NGValueParameter},operator:'='};}}function isLiteral(ast){return ast.body.length===0||ast.body.length===1&&(ast.body[0].expression.type===AST.Literal||ast.body[0].expression.type===AST.ArrayExpression||ast.body[0].expression.type===AST.ObjectExpression);}function isConstant(ast){return ast.constant;}function ASTCompiler($filter){this.$filter=$filter;}ASTCompiler.prototype={compile:function compile(ast){var self=this;this.state={nextId:0,filters:{},fn:{vars:[],body:[],own:{}},assign:{vars:[],body:[],own:{}},inputs:[]};findConstantAndWatchExpressions(ast,self.$filter);var extra='';var assignable;this.stage='assign';if(assignable=assignableAST(ast)){this.state.computing='assign';var result=this.nextId();this.recurse(assignable,result);this.return_(result);extra='fn.assign='+this.generateFunction('assign','s,v,l');}var toWatch=getInputs(ast.body);self.stage='inputs';forEach(toWatch,function(watch,key){var fnKey='fn'+key;self.state[fnKey]={vars:[],body:[],own:{}};self.state.computing=fnKey;var intoId=self.nextId();self.recurse(watch,intoId);self.return_(intoId);self.state.inputs.push(fnKey);watch.watchId=key;});this.state.computing='fn';this.stage='main';this.recurse(ast);var fnString=// The build and minification steps remove the string "use strict" from the code, but this is done using a regex.
	// This is a workaround for this until we do a better job at only removing the prefix only when we should.
	'"'+this.USE+' '+this.STRICT+'";\n'+this.filterPrefix()+'var fn='+this.generateFunction('fn','s,l,a,i')+extra+this.watchFns()+'return fn;';// eslint-disable-next-line no-new-func
	var fn=new Function('$filter','getStringValue','ifDefined','plus',fnString)(this.$filter,getStringValue,ifDefined,plusFn);this.state=this.stage=undefined;return fn;},USE:'use',STRICT:'strict',watchFns:function watchFns(){var result=[];var fns=this.state.inputs;var self=this;forEach(fns,function(name){result.push('var '+name+'='+self.generateFunction(name,'s'));});if(fns.length){result.push('fn.inputs=['+fns.join(',')+'];');}return result.join('');},generateFunction:function generateFunction(name,params){return'function('+params+'){'+this.varsPrefix(name)+this.body(name)+'};';},filterPrefix:function filterPrefix(){var parts=[];var self=this;forEach(this.state.filters,function(id,filter){parts.push(id+'=$filter('+self.escape(filter)+')');});if(parts.length)return'var '+parts.join(',')+';';return'';},varsPrefix:function varsPrefix(section){return this.state[section].vars.length?'var '+this.state[section].vars.join(',')+';':'';},body:function body(section){return this.state[section].body.join('');},recurse:function recurse(ast,intoId,nameId,recursionFn,create,skipWatchIdCheck){var left,right,self=this,args,expression,computed;recursionFn=recursionFn||noop;if(!skipWatchIdCheck&&isDefined(ast.watchId)){intoId=intoId||this.nextId();this.if_('i',this.lazyAssign(intoId,this.computedMember('i',ast.watchId)),this.lazyRecurse(ast,intoId,nameId,recursionFn,create,true));return;}switch(ast.type){case AST.Program:forEach(ast.body,function(expression,pos){self.recurse(expression.expression,undefined,undefined,function(expr){right=expr;});if(pos!==ast.body.length-1){self.current().body.push(right,';');}else{self.return_(right);}});break;case AST.Literal:expression=this.escape(ast.value);this.assign(intoId,expression);recursionFn(intoId||expression);break;case AST.UnaryExpression:this.recurse(ast.argument,undefined,undefined,function(expr){right=expr;});expression=ast.operator+'('+this.ifDefined(right,0)+')';this.assign(intoId,expression);recursionFn(expression);break;case AST.BinaryExpression:this.recurse(ast.left,undefined,undefined,function(expr){left=expr;});this.recurse(ast.right,undefined,undefined,function(expr){right=expr;});if(ast.operator==='+'){expression=this.plus(left,right);}else if(ast.operator==='-'){expression=this.ifDefined(left,0)+ast.operator+this.ifDefined(right,0);}else{expression='('+left+')'+ast.operator+'('+right+')';}this.assign(intoId,expression);recursionFn(expression);break;case AST.LogicalExpression:intoId=intoId||this.nextId();self.recurse(ast.left,intoId);self.if_(ast.operator==='&&'?intoId:self.not(intoId),self.lazyRecurse(ast.right,intoId));recursionFn(intoId);break;case AST.ConditionalExpression:intoId=intoId||this.nextId();self.recurse(ast.test,intoId);self.if_(intoId,self.lazyRecurse(ast.alternate,intoId),self.lazyRecurse(ast.consequent,intoId));recursionFn(intoId);break;case AST.Identifier:intoId=intoId||this.nextId();if(nameId){nameId.context=self.stage==='inputs'?'s':this.assign(this.nextId(),this.getHasOwnProperty('l',ast.name)+'?l:s');nameId.computed=false;nameId.name=ast.name;}self.if_(self.stage==='inputs'||self.not(self.getHasOwnProperty('l',ast.name)),function(){self.if_(self.stage==='inputs'||'s',function(){if(create&&create!==1){self.if_(self.isNull(self.nonComputedMember('s',ast.name)),self.lazyAssign(self.nonComputedMember('s',ast.name),'{}'));}self.assign(intoId,self.nonComputedMember('s',ast.name));});},intoId&&self.lazyAssign(intoId,self.nonComputedMember('l',ast.name)));recursionFn(intoId);break;case AST.MemberExpression:left=nameId&&(nameId.context=this.nextId())||this.nextId();intoId=intoId||this.nextId();self.recurse(ast.object,left,undefined,function(){self.if_(self.notNull(left),function(){if(ast.computed){right=self.nextId();self.recurse(ast.property,right);self.getStringValue(right);if(create&&create!==1){self.if_(self.not(self.computedMember(left,right)),self.lazyAssign(self.computedMember(left,right),'{}'));}expression=self.computedMember(left,right);self.assign(intoId,expression);if(nameId){nameId.computed=true;nameId.name=right;}}else{if(create&&create!==1){self.if_(self.isNull(self.nonComputedMember(left,ast.property.name)),self.lazyAssign(self.nonComputedMember(left,ast.property.name),'{}'));}expression=self.nonComputedMember(left,ast.property.name);self.assign(intoId,expression);if(nameId){nameId.computed=false;nameId.name=ast.property.name;}}},function(){self.assign(intoId,'undefined');});recursionFn(intoId);},!!create);break;case AST.CallExpression:intoId=intoId||this.nextId();if(ast.filter){right=self.filter(ast.callee.name);args=[];forEach(ast.arguments,function(expr){var argument=self.nextId();self.recurse(expr,argument);args.push(argument);});expression=right+'('+args.join(',')+')';self.assign(intoId,expression);recursionFn(intoId);}else{right=self.nextId();left={};args=[];self.recurse(ast.callee,right,left,function(){self.if_(self.notNull(right),function(){forEach(ast.arguments,function(expr){self.recurse(expr,ast.constant?undefined:self.nextId(),undefined,function(argument){args.push(argument);});});if(left.name){expression=self.member(left.context,left.name,left.computed)+'('+args.join(',')+')';}else{expression=right+'('+args.join(',')+')';}self.assign(intoId,expression);},function(){self.assign(intoId,'undefined');});recursionFn(intoId);});}break;case AST.AssignmentExpression:right=this.nextId();left={};this.recurse(ast.left,undefined,left,function(){self.if_(self.notNull(left.context),function(){self.recurse(ast.right,right);expression=self.member(left.context,left.name,left.computed)+ast.operator+right;self.assign(intoId,expression);recursionFn(intoId||expression);});},1);break;case AST.ArrayExpression:args=[];forEach(ast.elements,function(expr){self.recurse(expr,ast.constant?undefined:self.nextId(),undefined,function(argument){args.push(argument);});});expression='['+args.join(',')+']';this.assign(intoId,expression);recursionFn(intoId||expression);break;case AST.ObjectExpression:args=[];computed=false;forEach(ast.properties,function(property){if(property.computed){computed=true;}});if(computed){intoId=intoId||this.nextId();this.assign(intoId,'{}');forEach(ast.properties,function(property){if(property.computed){left=self.nextId();self.recurse(property.key,left);}else{left=property.key.type===AST.Identifier?property.key.name:''+property.key.value;}right=self.nextId();self.recurse(property.value,right);self.assign(self.member(intoId,left,property.computed),right);});}else{forEach(ast.properties,function(property){self.recurse(property.value,ast.constant?undefined:self.nextId(),undefined,function(expr){args.push(self.escape(property.key.type===AST.Identifier?property.key.name:''+property.key.value)+':'+expr);});});expression='{'+args.join(',')+'}';this.assign(intoId,expression);}recursionFn(intoId||expression);break;case AST.ThisExpression:this.assign(intoId,'s');recursionFn(intoId||'s');break;case AST.LocalsExpression:this.assign(intoId,'l');recursionFn(intoId||'l');break;case AST.NGValueParameter:this.assign(intoId,'v');recursionFn(intoId||'v');break;}},getHasOwnProperty:function getHasOwnProperty(element,property){var key=element+'.'+property;var own=this.current().own;if(!own.hasOwnProperty(key)){own[key]=this.nextId(false,element+'&&('+this.escape(property)+' in '+element+')');}return own[key];},assign:function assign(id,value){if(!id)return;this.current().body.push(id,'=',value,';');return id;},filter:function filter(filterName){if(!this.state.filters.hasOwnProperty(filterName)){this.state.filters[filterName]=this.nextId(true);}return this.state.filters[filterName];},ifDefined:function ifDefined(id,defaultValue){return'ifDefined('+id+','+this.escape(defaultValue)+')';},plus:function plus(left,right){return'plus('+left+','+right+')';},return_:function return_(id){this.current().body.push('return ',id,';');},if_:function if_(test,alternate,consequent){if(test===true){alternate();}else{var body=this.current().body;body.push('if(',test,'){');alternate();body.push('}');if(consequent){body.push('else{');consequent();body.push('}');}}},not:function not(expression){return'!('+expression+')';},isNull:function isNull(expression){return expression+'==null';},notNull:function notNull(expression){return expression+'!=null';},nonComputedMember:function nonComputedMember(left,right){var SAFE_IDENTIFIER=/^[$_a-zA-Z][$_a-zA-Z0-9]*$/;var UNSAFE_CHARACTERS=/[^$_a-zA-Z0-9]/g;if(SAFE_IDENTIFIER.test(right)){return left+'.'+right;}else{return left+'["'+right.replace(UNSAFE_CHARACTERS,this.stringEscapeFn)+'"]';}},computedMember:function computedMember(left,right){return left+'['+right+']';},member:function member(left,right,computed){if(computed)return this.computedMember(left,right);return this.nonComputedMember(left,right);},getStringValue:function getStringValue(item){this.assign(item,'getStringValue('+item+')');},lazyRecurse:function lazyRecurse(ast,intoId,nameId,recursionFn,create,skipWatchIdCheck){var self=this;return function(){self.recurse(ast,intoId,nameId,recursionFn,create,skipWatchIdCheck);};},lazyAssign:function lazyAssign(id,value){var self=this;return function(){self.assign(id,value);};},stringEscapeRegex:/[^ a-zA-Z0-9]/g,stringEscapeFn:function stringEscapeFn(c){return'\\u'+('0000'+c.charCodeAt(0).toString(16)).slice(-4);},escape:function escape(value){if(isString(value))return'\''+value.replace(this.stringEscapeRegex,this.stringEscapeFn)+'\'';if(isNumber(value))return value.toString();if(value===true)return'true';if(value===false)return'false';if(value===null)return'null';if(typeof value==='undefined')return'undefined';throw $parseMinErr('esc','IMPOSSIBLE');},nextId:function nextId(skip,init){var id='v'+this.state.nextId++;if(!skip){this.current().vars.push(id+(init?'='+init:''));}return id;},current:function current(){return this.state[this.state.computing];}};function ASTInterpreter($filter){this.$filter=$filter;}ASTInterpreter.prototype={compile:function compile(ast){var self=this;findConstantAndWatchExpressions(ast,self.$filter);var assignable;var assign;if(assignable=assignableAST(ast)){assign=this.recurse(assignable);}var toWatch=getInputs(ast.body);var inputs;if(toWatch){inputs=[];forEach(toWatch,function(watch,key){var input=self.recurse(watch);watch.input=input;inputs.push(input);watch.watchId=key;});}var expressions=[];forEach(ast.body,function(expression){expressions.push(self.recurse(expression.expression));});var fn=ast.body.length===0?noop:ast.body.length===1?expressions[0]:function(scope,locals){var lastValue;forEach(expressions,function(exp){lastValue=exp(scope,locals);});return lastValue;};if(assign){fn.assign=function(scope,value,locals){return assign(scope,locals,value);};}if(inputs){fn.inputs=inputs;}return fn;},recurse:function recurse(ast,context,create){var left,right,self=this,args;if(ast.input){return this.inputs(ast.input,ast.watchId);}switch(ast.type){case AST.Literal:return this.value(ast.value,context);case AST.UnaryExpression:right=this.recurse(ast.argument);return this['unary'+ast.operator](right,context);case AST.BinaryExpression:left=this.recurse(ast.left);right=this.recurse(ast.right);return this['binary'+ast.operator](left,right,context);case AST.LogicalExpression:left=this.recurse(ast.left);right=this.recurse(ast.right);return this['binary'+ast.operator](left,right,context);case AST.ConditionalExpression:return this['ternary?:'](this.recurse(ast.test),this.recurse(ast.alternate),this.recurse(ast.consequent),context);case AST.Identifier:return self.identifier(ast.name,context,create);case AST.MemberExpression:left=this.recurse(ast.object,false,!!create);if(!ast.computed){right=ast.property.name;}if(ast.computed)right=this.recurse(ast.property);return ast.computed?this.computedMember(left,right,context,create):this.nonComputedMember(left,right,context,create);case AST.CallExpression:args=[];forEach(ast.arguments,function(expr){args.push(self.recurse(expr));});if(ast.filter)right=this.$filter(ast.callee.name);if(!ast.filter)right=this.recurse(ast.callee,true);return ast.filter?function(scope,locals,assign,inputs){var values=[];for(var i=0;i<args.length;++i){values.push(args[i](scope,locals,assign,inputs));}var value=right.apply(undefined,values,inputs);return context?{context:undefined,name:undefined,value:value}:value;}:function(scope,locals,assign,inputs){var rhs=right(scope,locals,assign,inputs);var value;if(rhs.value!=null){var values=[];for(var i=0;i<args.length;++i){values.push(args[i](scope,locals,assign,inputs));}value=rhs.value.apply(rhs.context,values);}return context?{value:value}:value;};case AST.AssignmentExpression:left=this.recurse(ast.left,true,1);right=this.recurse(ast.right);return function(scope,locals,assign,inputs){var lhs=left(scope,locals,assign,inputs);var rhs=right(scope,locals,assign,inputs);lhs.context[lhs.name]=rhs;return context?{value:rhs}:rhs;};case AST.ArrayExpression:args=[];forEach(ast.elements,function(expr){args.push(self.recurse(expr));});return function(scope,locals,assign,inputs){var value=[];for(var i=0;i<args.length;++i){value.push(args[i](scope,locals,assign,inputs));}return context?{value:value}:value;};case AST.ObjectExpression:args=[];forEach(ast.properties,function(property){if(property.computed){args.push({key:self.recurse(property.key),computed:true,value:self.recurse(property.value)});}else{args.push({key:property.key.type===AST.Identifier?property.key.name:''+property.key.value,computed:false,value:self.recurse(property.value)});}});return function(scope,locals,assign,inputs){var value={};for(var i=0;i<args.length;++i){if(args[i].computed){value[args[i].key(scope,locals,assign,inputs)]=args[i].value(scope,locals,assign,inputs);}else{value[args[i].key]=args[i].value(scope,locals,assign,inputs);}}return context?{value:value}:value;};case AST.ThisExpression:return function(scope){return context?{value:scope}:scope;};case AST.LocalsExpression:return function(scope,locals){return context?{value:locals}:locals;};case AST.NGValueParameter:return function(scope,locals,assign){return context?{value:assign}:assign;};}},'unary+':function unary(argument,context){return function(scope,locals,assign,inputs){var arg=argument(scope,locals,assign,inputs);if(isDefined(arg)){arg=+arg;}else{arg=0;}return context?{value:arg}:arg;};},'unary-':function unary(argument,context){return function(scope,locals,assign,inputs){var arg=argument(scope,locals,assign,inputs);if(isDefined(arg)){arg=-arg;}else{arg=-0;}return context?{value:arg}:arg;};},'unary!':function unary(argument,context){return function(scope,locals,assign,inputs){var arg=!argument(scope,locals,assign,inputs);return context?{value:arg}:arg;};},'binary+':function binary(left,right,context){return function(scope,locals,assign,inputs){var lhs=left(scope,locals,assign,inputs);var rhs=right(scope,locals,assign,inputs);var arg=plusFn(lhs,rhs);return context?{value:arg}:arg;};},'binary-':function binary(left,right,context){return function(scope,locals,assign,inputs){var lhs=left(scope,locals,assign,inputs);var rhs=right(scope,locals,assign,inputs);var arg=(isDefined(lhs)?lhs:0)-(isDefined(rhs)?rhs:0);return context?{value:arg}:arg;};},'binary*':function binary(left,right,context){return function(scope,locals,assign,inputs){var arg=left(scope,locals,assign,inputs)*right(scope,locals,assign,inputs);return context?{value:arg}:arg;};},'binary/':function binary(left,right,context){return function(scope,locals,assign,inputs){var arg=left(scope,locals,assign,inputs)/right(scope,locals,assign,inputs);return context?{value:arg}:arg;};},'binary%':function binary(left,right,context){return function(scope,locals,assign,inputs){var arg=left(scope,locals,assign,inputs)%right(scope,locals,assign,inputs);return context?{value:arg}:arg;};},'binary===':function binary(left,right,context){return function(scope,locals,assign,inputs){var arg=left(scope,locals,assign,inputs)===right(scope,locals,assign,inputs);return context?{value:arg}:arg;};},'binary!==':function binary(left,right,context){return function(scope,locals,assign,inputs){var arg=left(scope,locals,assign,inputs)!==right(scope,locals,assign,inputs);return context?{value:arg}:arg;};},'binary==':function binary(left,right,context){return function(scope,locals,assign,inputs){// eslint-disable-next-line eqeqeq
	var arg=left(scope,locals,assign,inputs)==right(scope,locals,assign,inputs);return context?{value:arg}:arg;};},'binary!=':function binary(left,right,context){return function(scope,locals,assign,inputs){// eslint-disable-next-line eqeqeq
	var arg=left(scope,locals,assign,inputs)!=right(scope,locals,assign,inputs);return context?{value:arg}:arg;};},'binary<':function binary(left,right,context){return function(scope,locals,assign,inputs){var arg=left(scope,locals,assign,inputs)<right(scope,locals,assign,inputs);return context?{value:arg}:arg;};},'binary>':function binary(left,right,context){return function(scope,locals,assign,inputs){var arg=left(scope,locals,assign,inputs)>right(scope,locals,assign,inputs);return context?{value:arg}:arg;};},'binary<=':function binary(left,right,context){return function(scope,locals,assign,inputs){var arg=left(scope,locals,assign,inputs)<=right(scope,locals,assign,inputs);return context?{value:arg}:arg;};},'binary>=':function binary(left,right,context){return function(scope,locals,assign,inputs){var arg=left(scope,locals,assign,inputs)>=right(scope,locals,assign,inputs);return context?{value:arg}:arg;};},'binary&&':function binary(left,right,context){return function(scope,locals,assign,inputs){var arg=left(scope,locals,assign,inputs)&&right(scope,locals,assign,inputs);return context?{value:arg}:arg;};},'binary||':function binary(left,right,context){return function(scope,locals,assign,inputs){var arg=left(scope,locals,assign,inputs)||right(scope,locals,assign,inputs);return context?{value:arg}:arg;};},'ternary?:':function ternary(test,alternate,consequent,context){return function(scope,locals,assign,inputs){var arg=test(scope,locals,assign,inputs)?alternate(scope,locals,assign,inputs):consequent(scope,locals,assign,inputs);return context?{value:arg}:arg;};},value:function value(_value2,context){return function(){return context?{context:undefined,name:undefined,value:_value2}:_value2;};},identifier:function identifier(name,context,create){return function(scope,locals,assign,inputs){var base=locals&&name in locals?locals:scope;if(create&&create!==1&&base&&base[name]==null){base[name]={};}var value=base?base[name]:undefined;if(context){return{context:base,name:name,value:value};}else{return value;}};},computedMember:function computedMember(left,right,context,create){return function(scope,locals,assign,inputs){var lhs=left(scope,locals,assign,inputs);var rhs;var value;if(lhs!=null){rhs=right(scope,locals,assign,inputs);rhs=getStringValue(rhs);if(create&&create!==1){if(lhs&&!lhs[rhs]){lhs[rhs]={};}}value=lhs[rhs];}if(context){return{context:lhs,name:rhs,value:value};}else{return value;}};},nonComputedMember:function nonComputedMember(left,right,context,create){return function(scope,locals,assign,inputs){var lhs=left(scope,locals,assign,inputs);if(create&&create!==1){if(lhs&&lhs[right]==null){lhs[right]={};}}var value=lhs!=null?lhs[right]:undefined;if(context){return{context:lhs,name:right,value:value};}else{return value;}};},inputs:function inputs(input,watchId){return function(scope,value,locals,inputs){if(inputs)return inputs[watchId];return input(scope,value,locals);};}};/**
	 * @constructor
	 */function Parser(lexer,$filter,options){this.ast=new AST(lexer,options);this.astCompiler=options.csp?new ASTInterpreter($filter):new ASTCompiler($filter);}Parser.prototype={constructor:Parser,parse:function parse(text){var ast=this.ast.ast(text);var fn=this.astCompiler.compile(ast);fn.literal=isLiteral(ast);fn.constant=isConstant(ast);return fn;}};function getValueOf(value){return isFunction(value.valueOf)?value.valueOf():objectValueOf.call(value);}///////////////////////////////////
	/**
	 * @ngdoc service
	 * @name $parse
	 * @kind function
	 *
	 * @description
	 *
	 * Converts Angular {@link guide/expression expression} into a function.
	 *
	 * ```js
	 *   var getter = $parse('user.name');
	 *   var setter = getter.assign;
	 *   var context = {user:{name:'angular'}};
	 *   var locals = {user:{name:'local'}};
	 *
	 *   expect(getter(context)).toEqual('angular');
	 *   setter(context, 'newValue');
	 *   expect(context.user.name).toEqual('newValue');
	 *   expect(getter(context, locals)).toEqual('local');
	 * ```
	 *
	 *
	 * @param {string} expression String expression to compile.
	 * @returns {function(context, locals)} a function which represents the compiled expression:
	 *
	 *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	 *      are evaluated against (typically a scope object).
	 *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	 *      `context`.
	 *
	 *    The returned function also has the following properties:
	 *      * `literal` – `{boolean}` – whether the expression's top-level node is a JavaScript
	 *        literal.
	 *      * `constant` – `{boolean}` – whether the expression is made entirely of JavaScript
	 *        constant literals.
	 *      * `assign` – `{?function(context, value)}` – if the expression is assignable, this will be
	 *        set to a function to change its value on the given context.
	 *
	 *//**
	 * @ngdoc provider
	 * @name $parseProvider
	 * @this
	 *
	 * @description
	 * `$parseProvider` can be used for configuring the default behavior of the {@link ng.$parse $parse}
	 *  service.
	 */function $ParseProvider(){var cache=createMap();var literals={'true':true,'false':false,'null':null,'undefined':undefined};var identStart,identContinue;/**
	   * @ngdoc method
	   * @name $parseProvider#addLiteral
	   * @description
	   *
	   * Configure $parse service to add literal values that will be present as literal at expressions.
	   *
	   * @param {string} literalName Token for the literal value. The literal name value must be a valid literal name.
	   * @param {*} literalValue Value for this literal. All literal values must be primitives or `undefined`.
	   *
	   **/this.addLiteral=function(literalName,literalValue){literals[literalName]=literalValue;};/**
	  * @ngdoc method
	  * @name $parseProvider#setIdentifierFns
	  *
	  * @description
	  *
	  * Allows defining the set of characters that are allowed in Angular expressions. The function
	  * `identifierStart` will get called to know if a given character is a valid character to be the
	  * first character for an identifier. The function `identifierContinue` will get called to know if
	  * a given character is a valid character to be a follow-up identifier character. The functions
	  * `identifierStart` and `identifierContinue` will receive as arguments the single character to be
	  * identifier and the character code point. These arguments will be `string` and `numeric`. Keep in
	  * mind that the `string` parameter can be two characters long depending on the character
	  * representation. It is expected for the function to return `true` or `false`, whether that
	  * character is allowed or not.
	  *
	  * Since this function will be called extensively, keep the implementation of these functions fast,
	  * as the performance of these functions have a direct impact on the expressions parsing speed.
	  *
	  * @param {function=} identifierStart The function that will decide whether the given character is
	  *   a valid identifier start character.
	  * @param {function=} identifierContinue The function that will decide whether the given character is
	  *   a valid identifier continue character.
	  */this.setIdentifierFns=function(identifierStart,identifierContinue){identStart=identifierStart;identContinue=identifierContinue;return this;};this.$get=['$filter',function($filter){var noUnsafeEval=csp().noUnsafeEval;var $parseOptions={csp:noUnsafeEval,literals:copy(literals),isIdentifierStart:isFunction(identStart)&&identStart,isIdentifierContinue:isFunction(identContinue)&&identContinue};return $parse;function $parse(exp,interceptorFn){var parsedExpression,oneTime,cacheKey;switch(typeof exp==='undefined'?'undefined':_typeof(exp)){case'string':exp=exp.trim();cacheKey=exp;parsedExpression=cache[cacheKey];if(!parsedExpression){if(exp.charAt(0)===':'&&exp.charAt(1)===':'){oneTime=true;exp=exp.substring(2);}var lexer=new Lexer($parseOptions);var parser=new Parser(lexer,$filter,$parseOptions);parsedExpression=parser.parse(exp);if(parsedExpression.constant){parsedExpression.$$watchDelegate=constantWatchDelegate;}else if(oneTime){parsedExpression.oneTime=true;parsedExpression.$$watchDelegate=oneTimeWatchDelegate;}else if(parsedExpression.inputs){parsedExpression.$$watchDelegate=inputsWatchDelegate;}cache[cacheKey]=parsedExpression;}return addInterceptor(parsedExpression,interceptorFn);case'function':return addInterceptor(exp,interceptorFn);default:return addInterceptor(noop,interceptorFn);}}function expressionInputDirtyCheck(newValue,oldValueOfValue,compareObjectIdentity){if(newValue==null||oldValueOfValue==null){// null/undefined
	return newValue===oldValueOfValue;}if((typeof newValue==='undefined'?'undefined':_typeof(newValue))==='object'){// attempt to convert the value to a primitive type
	// TODO(docs): add a note to docs that by implementing valueOf even objects and arrays can
	//             be cheaply dirty-checked
	newValue=getValueOf(newValue);if((typeof newValue==='undefined'?'undefined':_typeof(newValue))==='object'&&!compareObjectIdentity){// objects/arrays are not supported - deep-watching them would be too expensive
	return false;}// fall-through to the primitive equality check
	}//Primitive or NaN
	// eslint-disable-next-line no-self-compare
	return newValue===oldValueOfValue||newValue!==newValue&&oldValueOfValue!==oldValueOfValue;}function inputsWatchDelegate(scope,listener,objectEquality,parsedExpression,prettyPrintExpression){var inputExpressions=parsedExpression.inputs;var lastResult;if(inputExpressions.length===1){var oldInputValueOf=expressionInputDirtyCheck;// init to something unique so that equals check fails
	inputExpressions=inputExpressions[0];return scope.$watch(function expressionInputWatch(scope){var newInputValue=inputExpressions(scope);if(!expressionInputDirtyCheck(newInputValue,oldInputValueOf,parsedExpression.literal)){lastResult=parsedExpression(scope,undefined,undefined,[newInputValue]);oldInputValueOf=newInputValue&&getValueOf(newInputValue);}return lastResult;},listener,objectEquality,prettyPrintExpression);}var oldInputValueOfValues=[];var oldInputValues=[];for(var i=0,ii=inputExpressions.length;i<ii;i++){oldInputValueOfValues[i]=expressionInputDirtyCheck;// init to something unique so that equals check fails
	oldInputValues[i]=null;}return scope.$watch(function expressionInputsWatch(scope){var changed=false;for(var i=0,ii=inputExpressions.length;i<ii;i++){var newInputValue=inputExpressions[i](scope);if(changed||(changed=!expressionInputDirtyCheck(newInputValue,oldInputValueOfValues[i],parsedExpression.literal))){oldInputValues[i]=newInputValue;oldInputValueOfValues[i]=newInputValue&&getValueOf(newInputValue);}}if(changed){lastResult=parsedExpression(scope,undefined,undefined,oldInputValues);}return lastResult;},listener,objectEquality,prettyPrintExpression);}function oneTimeWatchDelegate(scope,listener,objectEquality,parsedExpression,prettyPrintExpression){var isDone=parsedExpression.literal?isAllDefined:isDefined;var unwatch,lastValue;if(parsedExpression.inputs){unwatch=inputsWatchDelegate(scope,oneTimeListener,objectEquality,parsedExpression,prettyPrintExpression);}else{unwatch=scope.$watch(oneTimeWatch,oneTimeListener,objectEquality);}return unwatch;function oneTimeWatch(scope){return parsedExpression(scope);}function oneTimeListener(value,old,scope){lastValue=value;if(isFunction(listener)){listener(value,old,scope);}if(isDone(value)){scope.$$postDigest(function(){if(isDone(lastValue)){unwatch();}});}}}function isAllDefined(value){var allDefined=true;forEach(value,function(val){if(!isDefined(val))allDefined=false;});return allDefined;}function constantWatchDelegate(scope,listener,objectEquality,parsedExpression){var unwatch=scope.$watch(function constantWatch(scope){unwatch();return parsedExpression(scope);},listener,objectEquality);return unwatch;}function addInterceptor(parsedExpression,interceptorFn){if(!interceptorFn)return parsedExpression;var watchDelegate=parsedExpression.$$watchDelegate;var useInputs=false;var isDone=parsedExpression.literal?isAllDefined:isDefined;function regularInterceptedExpression(scope,locals,assign,inputs){var value=useInputs&&inputs?inputs[0]:parsedExpression(scope,locals,assign,inputs);return interceptorFn(value,scope,locals);}function oneTimeInterceptedExpression(scope,locals,assign,inputs){var value=useInputs&&inputs?inputs[0]:parsedExpression(scope,locals,assign,inputs);var result=interceptorFn(value,scope,locals);// we only return the interceptor's result if the
	// initial value is defined (for bind-once)
	return isDone(value)?result:value;}var fn=parsedExpression.oneTime?oneTimeInterceptedExpression:regularInterceptedExpression;// Propogate the literal/oneTime attributes
	fn.literal=parsedExpression.literal;fn.oneTime=parsedExpression.oneTime;// Propagate or create inputs / $$watchDelegates
	useInputs=!parsedExpression.inputs;if(watchDelegate&&watchDelegate!==inputsWatchDelegate){fn.$$watchDelegate=watchDelegate;fn.inputs=parsedExpression.inputs;}else if(!interceptorFn.$stateful){// If there is an interceptor, but no watchDelegate then treat the interceptor like
	// we treat filters - it is assumed to be a pure function unless flagged with $stateful
	fn.$$watchDelegate=inputsWatchDelegate;fn.inputs=parsedExpression.inputs?parsedExpression.inputs:[parsedExpression];}return fn;}}];}/**
	 * @ngdoc service
	 * @name $q
	 * @requires $rootScope
	 *
	 * @description
	 * A service that helps you run functions asynchronously, and use their return values (or exceptions)
	 * when they are done processing.
	 *
	 * This is a [Promises/A+](https://promisesaplus.com/)-compliant implementation of promises/deferred
	 * objects inspired by [Kris Kowal's Q](https://github.com/kriskowal/q).
	 *
	 * $q can be used in two fashions --- one which is more similar to Kris Kowal's Q or jQuery's Deferred
	 * implementations, and the other which resembles ES6 (ES2015) promises to some degree.
	 *
	 * # $q constructor
	 *
	 * The streamlined ES6 style promise is essentially just using $q as a constructor which takes a `resolver`
	 * function as the first argument. This is similar to the native Promise implementation from ES6,
	 * see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).
	 *
	 * While the constructor-style use is supported, not all of the supporting methods from ES6 promises are
	 * available yet.
	 *
	 * It can be used like so:
	 *
	 * ```js
	 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
	 *   // are available in the current lexical scope (they could have been injected or passed in).
	 *
	 *   function asyncGreet(name) {
	 *     // perform some asynchronous operation, resolve or reject the promise when appropriate.
	 *     return $q(function(resolve, reject) {
	 *       setTimeout(function() {
	 *         if (okToGreet(name)) {
	 *           resolve('Hello, ' + name + '!');
	 *         } else {
	 *           reject('Greeting ' + name + ' is not allowed.');
	 *         }
	 *       }, 1000);
	 *     });
	 *   }
	 *
	 *   var promise = asyncGreet('Robin Hood');
	 *   promise.then(function(greeting) {
	 *     alert('Success: ' + greeting);
	 *   }, function(reason) {
	 *     alert('Failed: ' + reason);
	 *   });
	 * ```
	 *
	 * Note: progress/notify callbacks are not currently supported via the ES6-style interface.
	 *
	 * Note: unlike ES6 behavior, an exception thrown in the constructor function will NOT implicitly reject the promise.
	 *
	 * However, the more traditional CommonJS-style usage is still available, and documented below.
	 *
	 * [The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an
	 * interface for interacting with an object that represents the result of an action that is
	 * performed asynchronously, and may or may not be finished at any given point in time.
	 *
	 * From the perspective of dealing with error handling, deferred and promise APIs are to
	 * asynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.
	 *
	 * ```js
	 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
	 *   // are available in the current lexical scope (they could have been injected or passed in).
	 *
	 *   function asyncGreet(name) {
	 *     var deferred = $q.defer();
	 *
	 *     setTimeout(function() {
	 *       deferred.notify('About to greet ' + name + '.');
	 *
	 *       if (okToGreet(name)) {
	 *         deferred.resolve('Hello, ' + name + '!');
	 *       } else {
	 *         deferred.reject('Greeting ' + name + ' is not allowed.');
	 *       }
	 *     }, 1000);
	 *
	 *     return deferred.promise;
	 *   }
	 *
	 *   var promise = asyncGreet('Robin Hood');
	 *   promise.then(function(greeting) {
	 *     alert('Success: ' + greeting);
	 *   }, function(reason) {
	 *     alert('Failed: ' + reason);
	 *   }, function(update) {
	 *     alert('Got notification: ' + update);
	 *   });
	 * ```
	 *
	 * At first it might not be obvious why this extra complexity is worth the trouble. The payoff
	 * comes in the way of guarantees that promise and deferred APIs make, see
	 * https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md.
	 *
	 * Additionally the promise api allows for composition that is very hard to do with the
	 * traditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.
	 * For more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the
	 * section on serial or parallel joining of promises.
	 *
	 * # The Deferred API
	 *
	 * A new instance of deferred is constructed by calling `$q.defer()`.
	 *
	 * The purpose of the deferred object is to expose the associated Promise instance as well as APIs
	 * that can be used for signaling the successful or unsuccessful completion, as well as the status
	 * of the task.
	 *
	 * **Methods**
	 *
	 * - `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection
	 *   constructed via `$q.reject`, the promise will be rejected instead.
	 * - `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to
	 *   resolving it with a rejection constructed via `$q.reject`.
	 * - `notify(value)` - provides updates on the status of the promise's execution. This may be called
	 *   multiple times before the promise is either resolved or rejected.
	 *
	 * **Properties**
	 *
	 * - promise – `{Promise}` – promise object associated with this deferred.
	 *
	 *
	 * # The Promise API
	 *
	 * A new promise instance is created when a deferred instance is created and can be retrieved by
	 * calling `deferred.promise`.
	 *
	 * The purpose of the promise object is to allow for interested parties to get access to the result
	 * of the deferred task when it completes.
	 *
	 * **Methods**
	 *
	 * - `then(successCallback, [errorCallback], [notifyCallback])` – regardless of when the promise was or
	 *   will be resolved or rejected, `then` calls one of the success or error callbacks asynchronously
	 *   as soon as the result is available. The callbacks are called with a single argument: the result
	 *   or rejection reason. Additionally, the notify callback may be called zero or more times to
	 *   provide a progress indication, before the promise is resolved or rejected.
	 *
	 *   This method *returns a new promise* which is resolved or rejected via the return value of the
	 *   `successCallback`, `errorCallback` (unless that value is a promise, in which case it is resolved
	 *   with the value which is resolved in that promise using
	 *   [promise chaining](http://www.html5rocks.com/en/tutorials/es6/promises/#toc-promises-queues)).
	 *   It also notifies via the return value of the `notifyCallback` method. The promise cannot be
	 *   resolved or rejected from the notifyCallback method. The errorCallback and notifyCallback
	 *   arguments are optional.
	 *
	 * - `catch(errorCallback)` – shorthand for `promise.then(null, errorCallback)`
	 *
	 * - `finally(callback, notifyCallback)` – allows you to observe either the fulfillment or rejection of a promise,
	 *   but to do so without modifying the final value. This is useful to release resources or do some
	 *   clean-up that needs to be done whether the promise was rejected or resolved. See the [full
	 *   specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for
	 *   more information.
	 *
	 * # Chaining promises
	 *
	 * Because calling the `then` method of a promise returns a new derived promise, it is easily
	 * possible to create a chain of promises:
	 *
	 * ```js
	 *   promiseB = promiseA.then(function(result) {
	 *     return result + 1;
	 *   });
	 *
	 *   // promiseB will be resolved immediately after promiseA is resolved and its value
	 *   // will be the result of promiseA incremented by 1
	 * ```
	 *
	 * It is possible to create chains of any length and since a promise can be resolved with another
	 * promise (which will defer its resolution further), it is possible to pause/defer resolution of
	 * the promises at any point in the chain. This makes it possible to implement powerful APIs like
	 * $http's response interceptors.
	 *
	 *
	 * # Differences between Kris Kowal's Q and $q
	 *
	 *  There are two main differences:
	 *
	 * - $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation
	 *   mechanism in angular, which means faster propagation of resolution or rejection into your
	 *   models and avoiding unnecessary browser repaints, which would result in flickering UI.
	 * - Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains
	 *   all the important functionality needed for common async tasks.
	 *
	 * # Testing
	 *
	 *  ```js
	 *    it('should simulate promise', inject(function($q, $rootScope) {
	 *      var deferred = $q.defer();
	 *      var promise = deferred.promise;
	 *      var resolvedValue;
	 *
	 *      promise.then(function(value) { resolvedValue = value; });
	 *      expect(resolvedValue).toBeUndefined();
	 *
	 *      // Simulate resolving of promise
	 *      deferred.resolve(123);
	 *      // Note that the 'then' function does not get called synchronously.
	 *      // This is because we want the promise API to always be async, whether or not
	 *      // it got called synchronously or asynchronously.
	 *      expect(resolvedValue).toBeUndefined();
	 *
	 *      // Propagate promise resolution to 'then' functions using $apply().
	 *      $rootScope.$apply();
	 *      expect(resolvedValue).toEqual(123);
	 *    }));
	 *  ```
	 *
	 * @param {function(function, function)} resolver Function which is responsible for resolving or
	 *   rejecting the newly created promise. The first parameter is a function which resolves the
	 *   promise, the second parameter is a function which rejects the promise.
	 *
	 * @returns {Promise} The newly created promise.
	 *//**
	 * @ngdoc provider
	 * @name $qProvider
	 * @this
	 *
	 * @description
	 */function $QProvider(){var errorOnUnhandledRejections=true;this.$get=['$rootScope','$exceptionHandler',function($rootScope,$exceptionHandler){return qFactory(function(callback){$rootScope.$evalAsync(callback);},$exceptionHandler,errorOnUnhandledRejections);}];/**
	   * @ngdoc method
	   * @name $qProvider#errorOnUnhandledRejections
	   * @kind function
	   *
	   * @description
	   * Retrieves or overrides whether to generate an error when a rejected promise is not handled.
	   * This feature is enabled by default.
	   *
	   * @param {boolean=} value Whether to generate an error when a rejected promise is not handled.
	   * @returns {boolean|ng.$qProvider} Current value when called without a new value or self for
	   *    chaining otherwise.
	   */this.errorOnUnhandledRejections=function(value){if(isDefined(value)){errorOnUnhandledRejections=value;return this;}else{return errorOnUnhandledRejections;}};}/** @this */function $$QProvider(){var errorOnUnhandledRejections=true;this.$get=['$browser','$exceptionHandler',function($browser,$exceptionHandler){return qFactory(function(callback){$browser.defer(callback);},$exceptionHandler,errorOnUnhandledRejections);}];this.errorOnUnhandledRejections=function(value){if(isDefined(value)){errorOnUnhandledRejections=value;return this;}else{return errorOnUnhandledRejections;}};}/**
	 * Constructs a promise manager.
	 *
	 * @param {function(function)} nextTick Function for executing functions in the next turn.
	 * @param {function(...*)} exceptionHandler Function into which unexpected exceptions are passed for
	 *     debugging purposes.
	 @ param {=boolean} errorOnUnhandledRejections Whether an error should be generated on unhandled
	 *     promises rejections.
	 * @returns {object} Promise manager.
	 */function qFactory(nextTick,exceptionHandler,errorOnUnhandledRejections){var $qMinErr=minErr('$q',TypeError);var queueSize=0;var checkQueue=[];/**
	   * @ngdoc method
	   * @name ng.$q#defer
	   * @kind function
	   *
	   * @description
	   * Creates a `Deferred` object which represents a task which will finish in the future.
	   *
	   * @returns {Deferred} Returns a new instance of deferred.
	   */function defer(){return new Deferred();}function Deferred(){var promise=this.promise=new Promise();//Non prototype methods necessary to support unbound execution :/
	this.resolve=function(val){resolvePromise(promise,val);};this.reject=function(reason){rejectPromise(promise,reason);};this.notify=function(progress){notifyPromise(promise,progress);};}function Promise(){this.$$state={status:0};}extend(Promise.prototype,{then:function then(onFulfilled,onRejected,progressBack){if(isUndefined(onFulfilled)&&isUndefined(onRejected)&&isUndefined(progressBack)){return this;}var result=new Promise();this.$$state.pending=this.$$state.pending||[];this.$$state.pending.push([result,onFulfilled,onRejected,progressBack]);if(this.$$state.status>0)scheduleProcessQueue(this.$$state);return result;},'catch':function _catch(callback){return this.then(null,callback);},'finally':function _finally(callback,progressBack){return this.then(function(value){return handleCallback(value,resolve,callback);},function(error){return handleCallback(error,reject,callback);},progressBack);}});function processQueue(state){var fn,promise,pending;pending=state.pending;state.processScheduled=false;state.pending=undefined;try{for(var i=0,ii=pending.length;i<ii;++i){state.pur=true;promise=pending[i][0];fn=pending[i][state.status];try{if(isFunction(fn)){resolvePromise(promise,fn(state.value));}else if(state.status===1){resolvePromise(promise,state.value);}else{rejectPromise(promise,state.value);}}catch(e){rejectPromise(promise,e);}}}finally{--queueSize;if(errorOnUnhandledRejections&&queueSize===0){nextTick(processChecks);}}}function processChecks(){// eslint-disable-next-line no-unmodified-loop-condition
	while(!queueSize&&checkQueue.length){var toCheck=checkQueue.shift();if(!toCheck.pur){toCheck.pur=true;var errorMessage='Possibly unhandled rejection: '+toDebugString(toCheck.value);if(toCheck.value instanceof Error){exceptionHandler(toCheck.value,errorMessage);}else{exceptionHandler(errorMessage);}}}}function scheduleProcessQueue(state){if(errorOnUnhandledRejections&&!state.pending&&state.status===2&&!state.pur){if(queueSize===0&&checkQueue.length===0){nextTick(processChecks);}checkQueue.push(state);}if(state.processScheduled||!state.pending)return;state.processScheduled=true;++queueSize;nextTick(function(){processQueue(state);});}function resolvePromise(promise,val){if(promise.$$state.status)return;if(val===promise){$$reject(promise,$qMinErr('qcycle','Expected promise to be resolved with value other than itself \'{0}\'',val));}else{$$resolve(promise,val);}}function $$resolve(promise,val){var then;var done=false;try{if(isObject(val)||isFunction(val))then=val.then;if(isFunction(then)){promise.$$state.status=-1;then.call(val,doResolve,doReject,doNotify);}else{promise.$$state.value=val;promise.$$state.status=1;scheduleProcessQueue(promise.$$state);}}catch(e){doReject(e);}function doResolve(val){if(done)return;done=true;$$resolve(promise,val);}function doReject(val){if(done)return;done=true;$$reject(promise,val);}function doNotify(progress){notifyPromise(promise,progress);}}function rejectPromise(promise,reason){if(promise.$$state.status)return;$$reject(promise,reason);}function $$reject(promise,reason){promise.$$state.value=reason;promise.$$state.status=2;scheduleProcessQueue(promise.$$state);}function notifyPromise(promise,progress){var callbacks=promise.$$state.pending;if(promise.$$state.status<=0&&callbacks&&callbacks.length){nextTick(function(){var callback,result;for(var i=0,ii=callbacks.length;i<ii;i++){result=callbacks[i][0];callback=callbacks[i][3];try{notifyPromise(result,isFunction(callback)?callback(progress):progress);}catch(e){exceptionHandler(e);}}});}}/**
	   * @ngdoc method
	   * @name $q#reject
	   * @kind function
	   *
	   * @description
	   * Creates a promise that is resolved as rejected with the specified `reason`. This api should be
	   * used to forward rejection in a chain of promises. If you are dealing with the last promise in
	   * a promise chain, you don't need to worry about it.
	   *
	   * When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of
	   * `reject` as the `throw` keyword in JavaScript. This also means that if you "catch" an error via
	   * a promise error callback and you want to forward the error to the promise derived from the
	   * current promise, you have to "rethrow" the error by returning a rejection constructed via
	   * `reject`.
	   *
	   * ```js
	   *   promiseB = promiseA.then(function(result) {
	   *     // success: do something and resolve promiseB
	   *     //          with the old or a new result
	   *     return result;
	   *   }, function(reason) {
	   *     // error: handle the error if possible and
	   *     //        resolve promiseB with newPromiseOrValue,
	   *     //        otherwise forward the rejection to promiseB
	   *     if (canHandle(reason)) {
	   *      // handle the error and recover
	   *      return newPromiseOrValue;
	   *     }
	   *     return $q.reject(reason);
	   *   });
	   * ```
	   *
	   * @param {*} reason Constant, message, exception or an object representing the rejection reason.
	   * @returns {Promise} Returns a promise that was already resolved as rejected with the `reason`.
	   */function reject(reason){var result=new Promise();rejectPromise(result,reason);return result;}function handleCallback(value,resolver,callback){var callbackOutput=null;try{if(isFunction(callback))callbackOutput=callback();}catch(e){return reject(e);}if(isPromiseLike(callbackOutput)){return callbackOutput.then(function(){return resolver(value);},reject);}else{return resolver(value);}}/**
	   * @ngdoc method
	   * @name $q#when
	   * @kind function
	   *
	   * @description
	   * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.
	   * This is useful when you are dealing with an object that might or might not be a promise, or if
	   * the promise comes from a source that can't be trusted.
	   *
	   * @param {*} value Value or a promise
	   * @param {Function=} successCallback
	   * @param {Function=} errorCallback
	   * @param {Function=} progressCallback
	   * @returns {Promise} Returns a promise of the passed value or promise
	   */function when(value,callback,errback,progressBack){var result=new Promise();resolvePromise(result,value);return result.then(callback,errback,progressBack);}/**
	   * @ngdoc method
	   * @name $q#resolve
	   * @kind function
	   *
	   * @description
	   * Alias of {@link ng.$q#when when} to maintain naming consistency with ES6.
	   *
	   * @param {*} value Value or a promise
	   * @param {Function=} successCallback
	   * @param {Function=} errorCallback
	   * @param {Function=} progressCallback
	   * @returns {Promise} Returns a promise of the passed value or promise
	   */var resolve=when;/**
	   * @ngdoc method
	   * @name $q#all
	   * @kind function
	   *
	   * @description
	   * Combines multiple promises into a single promise that is resolved when all of the input
	   * promises are resolved.
	   *
	   * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.
	   * @returns {Promise} Returns a single promise that will be resolved with an array/hash of values,
	   *   each value corresponding to the promise at the same index/key in the `promises` array/hash.
	   *   If any of the promises is resolved with a rejection, this resulting promise will be rejected
	   *   with the same rejection value.
	   */function all(promises){var result=new Promise(),counter=0,results=isArray(promises)?[]:{};forEach(promises,function(promise,key){counter++;when(promise).then(function(value){results[key]=value;if(! --counter)resolvePromise(result,results);},function(reason){rejectPromise(result,reason);});});if(counter===0){resolvePromise(result,results);}return result;}/**
	   * @ngdoc method
	   * @name $q#race
	   * @kind function
	   *
	   * @description
	   * Returns a promise that resolves or rejects as soon as one of those promises
	   * resolves or rejects, with the value or reason from that promise.
	   *
	   * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.
	   * @returns {Promise} a promise that resolves or rejects as soon as one of the `promises`
	   * resolves or rejects, with the value or reason from that promise.
	   */function race(promises){var deferred=defer();forEach(promises,function(promise){when(promise).then(deferred.resolve,deferred.reject);});return deferred.promise;}function $Q(resolver){if(!isFunction(resolver)){throw $qMinErr('norslvr','Expected resolverFn, got \'{0}\'',resolver);}var promise=new Promise();function resolveFn(value){resolvePromise(promise,value);}function rejectFn(reason){rejectPromise(promise,reason);}resolver(resolveFn,rejectFn);return promise;}// Let's make the instanceof operator work for promises, so that
	// `new $q(fn) instanceof $q` would evaluate to true.
	$Q.prototype=Promise.prototype;$Q.defer=defer;$Q.reject=reject;$Q.when=when;$Q.resolve=resolve;$Q.all=all;$Q.race=race;return $Q;}/** @this */function $$RAFProvider(){//rAF
	this.$get=['$window','$timeout',function($window,$timeout){var requestAnimationFrame=$window.requestAnimationFrame||$window.webkitRequestAnimationFrame;var cancelAnimationFrame=$window.cancelAnimationFrame||$window.webkitCancelAnimationFrame||$window.webkitCancelRequestAnimationFrame;var rafSupported=!!requestAnimationFrame;var raf=rafSupported?function(fn){var id=requestAnimationFrame(fn);return function(){cancelAnimationFrame(id);};}:function(fn){var timer=$timeout(fn,16.66,false);// 1000 / 60 = 16.666
	return function(){$timeout.cancel(timer);};};raf.supported=rafSupported;return raf;}];}/**
	 * DESIGN NOTES
	 *
	 * The design decisions behind the scope are heavily favored for speed and memory consumption.
	 *
	 * The typical use of scope is to watch the expressions, which most of the time return the same
	 * value as last time so we optimize the operation.
	 *
	 * Closures construction is expensive in terms of speed as well as memory:
	 *   - No closures, instead use prototypical inheritance for API
	 *   - Internal state needs to be stored on scope directly, which means that private state is
	 *     exposed as $$____ properties
	 *
	 * Loop operations are optimized by using while(count--) { ... }
	 *   - This means that in order to keep the same order of execution as addition we have to add
	 *     items to the array at the beginning (unshift) instead of at the end (push)
	 *
	 * Child scopes are created and removed often
	 *   - Using an array would be slow since inserts in the middle are expensive; so we use linked lists
	 *
	 * There are fewer watches than observers. This is why you don't want the observer to be implemented
	 * in the same way as watch. Watch requires return of the initialization function which is expensive
	 * to construct.
	 *//**
	 * @ngdoc provider
	 * @name $rootScopeProvider
	 * @description
	 *
	 * Provider for the $rootScope service.
	 *//**
	 * @ngdoc method
	 * @name $rootScopeProvider#digestTtl
	 * @description
	 *
	 * Sets the number of `$digest` iterations the scope should attempt to execute before giving up and
	 * assuming that the model is unstable.
	 *
	 * The current default is 10 iterations.
	 *
	 * In complex applications it's possible that the dependencies between `$watch`s will result in
	 * several digest iterations. However if an application needs more than the default 10 digest
	 * iterations for its model to stabilize then you should investigate what is causing the model to
	 * continuously change during the digest.
	 *
	 * Increasing the TTL could have performance implications, so you should not change it without
	 * proper justification.
	 *
	 * @param {number} limit The number of digest iterations.
	 *//**
	 * @ngdoc service
	 * @name $rootScope
	 * @this
	 *
	 * @description
	 *
	 * Every application has a single root {@link ng.$rootScope.Scope scope}.
	 * All other scopes are descendant scopes of the root scope. Scopes provide separation
	 * between the model and the view, via a mechanism for watching the model for changes.
	 * They also provide event emission/broadcast and subscription facility. See the
	 * {@link guide/scope developer guide on scopes}.
	 */function $RootScopeProvider(){var TTL=10;var $rootScopeMinErr=minErr('$rootScope');var lastDirtyWatch=null;var applyAsyncId=null;this.digestTtl=function(value){if(arguments.length){TTL=value;}return TTL;};function createChildScopeClass(parent){function ChildScope(){this.$$watchers=this.$$nextSibling=this.$$childHead=this.$$childTail=null;this.$$listeners={};this.$$listenerCount={};this.$$watchersCount=0;this.$id=nextUid();this.$$ChildScope=null;}ChildScope.prototype=parent;return ChildScope;}this.$get=['$exceptionHandler','$parse','$browser',function($exceptionHandler,$parse,$browser){function destroyChildScope($event){$event.currentScope.$$destroyed=true;}function cleanUpScope($scope){// Support: IE 9 only
	if(msie===9){// There is a memory leak in IE9 if all child scopes are not disconnected
	// completely when a scope is destroyed. So this code will recurse up through
	// all this scopes children
	//
	// See issue https://github.com/angular/angular.js/issues/10706
	if($scope.$$childHead){cleanUpScope($scope.$$childHead);}if($scope.$$nextSibling){cleanUpScope($scope.$$nextSibling);}}// The code below works around IE9 and V8's memory leaks
	//
	// See:
	// - https://code.google.com/p/v8/issues/detail?id=2073#c26
	// - https://github.com/angular/angular.js/issues/6794#issuecomment-38648909
	// - https://github.com/angular/angular.js/issues/1313#issuecomment-10378451
	$scope.$parent=$scope.$$nextSibling=$scope.$$prevSibling=$scope.$$childHead=$scope.$$childTail=$scope.$root=$scope.$$watchers=null;}/**
	     * @ngdoc type
	     * @name $rootScope.Scope
	     *
	     * @description
	     * A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the
	     * {@link auto.$injector $injector}. Child scopes are created using the
	     * {@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when
	     * compiled HTML template is executed.) See also the {@link guide/scope Scopes guide} for
	     * an in-depth introduction and usage examples.
	     *
	     *
	     * # Inheritance
	     * A scope can inherit from a parent scope, as in this example:
	     * ```js
	         var parent = $rootScope;
	         var child = parent.$new();
	
	         parent.salutation = "Hello";
	         expect(child.salutation).toEqual('Hello');
	
	         child.salutation = "Welcome";
	         expect(child.salutation).toEqual('Welcome');
	         expect(parent.salutation).toEqual('Hello');
	     * ```
	     *
	     * When interacting with `Scope` in tests, additional helper methods are available on the
	     * instances of `Scope` type. See {@link ngMock.$rootScope.Scope ngMock Scope} for additional
	     * details.
	     *
	     *
	     * @param {Object.<string, function()>=} providers Map of service factory which need to be
	     *                                       provided for the current scope. Defaults to {@link ng}.
	     * @param {Object.<string, *>=} instanceCache Provides pre-instantiated services which should
	     *                              append/override services provided by `providers`. This is handy
	     *                              when unit-testing and having the need to override a default
	     *                              service.
	     * @returns {Object} Newly created scope.
	     *
	     */function Scope(){this.$id=nextUid();this.$$phase=this.$parent=this.$$watchers=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=null;this.$root=this;this.$$destroyed=false;this.$$listeners={};this.$$listenerCount={};this.$$watchersCount=0;this.$$isolateBindings=null;}/**
	     * @ngdoc property
	     * @name $rootScope.Scope#$id
	     *
	     * @description
	     * Unique scope ID (monotonically increasing) useful for debugging.
	     *//**
	      * @ngdoc property
	      * @name $rootScope.Scope#$parent
	      *
	      * @description
	      * Reference to the parent scope.
	      *//**
	       * @ngdoc property
	       * @name $rootScope.Scope#$root
	       *
	       * @description
	       * Reference to the root scope.
	       */Scope.prototype={constructor:Scope,/**
	       * @ngdoc method
	       * @name $rootScope.Scope#$new
	       * @kind function
	       *
	       * @description
	       * Creates a new child {@link ng.$rootScope.Scope scope}.
	       *
	       * The parent scope will propagate the {@link ng.$rootScope.Scope#$digest $digest()} event.
	       * The scope can be removed from the scope hierarchy using {@link ng.$rootScope.Scope#$destroy $destroy()}.
	       *
	       * {@link ng.$rootScope.Scope#$destroy $destroy()} must be called on a scope when it is
	       * desired for the scope and its child scopes to be permanently detached from the parent and
	       * thus stop participating in model change detection and listener notification by invoking.
	       *
	       * @param {boolean} isolate If true, then the scope does not prototypically inherit from the
	       *         parent scope. The scope is isolated, as it can not see parent scope properties.
	       *         When creating widgets, it is useful for the widget to not accidentally read parent
	       *         state.
	       *
	       * @param {Scope} [parent=this] The {@link ng.$rootScope.Scope `Scope`} that will be the `$parent`
	       *                              of the newly created scope. Defaults to `this` scope if not provided.
	       *                              This is used when creating a transclude scope to correctly place it
	       *                              in the scope hierarchy while maintaining the correct prototypical
	       *                              inheritance.
	       *
	       * @returns {Object} The newly created child scope.
	       *
	       */$new:function $new(isolate,parent){var child;parent=parent||this;if(isolate){child=new Scope();child.$root=this.$root;}else{// Only create a child scope class if somebody asks for one,
	// but cache it to allow the VM to optimize lookups.
	if(!this.$$ChildScope){this.$$ChildScope=createChildScopeClass(this);}child=new this.$$ChildScope();}child.$parent=parent;child.$$prevSibling=parent.$$childTail;if(parent.$$childHead){parent.$$childTail.$$nextSibling=child;parent.$$childTail=child;}else{parent.$$childHead=parent.$$childTail=child;}// When the new scope is not isolated or we inherit from `this`, and
	// the parent scope is destroyed, the property `$$destroyed` is inherited
	// prototypically. In all other cases, this property needs to be set
	// when the parent scope is destroyed.
	// The listener needs to be added after the parent is set
	if(isolate||parent!==this)child.$on('$destroy',destroyChildScope);return child;},/**
	       * @ngdoc method
	       * @name $rootScope.Scope#$watch
	       * @kind function
	       *
	       * @description
	       * Registers a `listener` callback to be executed whenever the `watchExpression` changes.
	       *
	       * - The `watchExpression` is called on every call to {@link ng.$rootScope.Scope#$digest
	       *   $digest()} and should return the value that will be watched. (`watchExpression` should not change
	       *   its value when executed multiple times with the same input because it may be executed multiple
	       *   times by {@link ng.$rootScope.Scope#$digest $digest()}. That is, `watchExpression` should be
	       *   [idempotent](http://en.wikipedia.org/wiki/Idempotence).)
	       * - The `listener` is called only when the value from the current `watchExpression` and the
	       *   previous call to `watchExpression` are not equal (with the exception of the initial run,
	       *   see below). Inequality is determined according to reference inequality,
	       *   [strict comparison](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)
	       *    via the `!==` Javascript operator, unless `objectEquality == true`
	       *   (see next point)
	       * - When `objectEquality == true`, inequality of the `watchExpression` is determined
	       *   according to the {@link angular.equals} function. To save the value of the object for
	       *   later comparison, the {@link angular.copy} function is used. This therefore means that
	       *   watching complex objects will have adverse memory and performance implications.
	       * - This should not be used to watch for changes in objects that are
	       *   or contain [File](https://developer.mozilla.org/docs/Web/API/File) objects due to limitations with {@link angular.copy `angular.copy`}.
	       * - The watch `listener` may change the model, which may trigger other `listener`s to fire.
	       *   This is achieved by rerunning the watchers until no changes are detected. The rerun
	       *   iteration limit is 10 to prevent an infinite loop deadlock.
	       *
	       *
	       * If you want to be notified whenever {@link ng.$rootScope.Scope#$digest $digest} is called,
	       * you can register a `watchExpression` function with no `listener`. (Be prepared for
	       * multiple calls to your `watchExpression` because it will execute multiple times in a
	       * single {@link ng.$rootScope.Scope#$digest $digest} cycle if a change is detected.)
	       *
	       * After a watcher is registered with the scope, the `listener` fn is called asynchronously
	       * (via {@link ng.$rootScope.Scope#$evalAsync $evalAsync}) to initialize the
	       * watcher. In rare cases, this is undesirable because the listener is called when the result
	       * of `watchExpression` didn't change. To detect this scenario within the `listener` fn, you
	       * can compare the `newVal` and `oldVal`. If these two values are identical (`===`) then the
	       * listener was called due to initialization.
	       *
	       *
	       *
	       * # Example
	       * ```js
	           // let's assume that scope was dependency injected as the $rootScope
	           var scope = $rootScope;
	           scope.name = 'misko';
	           scope.counter = 0;
	
	           expect(scope.counter).toEqual(0);
	           scope.$watch('name', function(newValue, oldValue) {
	             scope.counter = scope.counter + 1;
	           });
	           expect(scope.counter).toEqual(0);
	
	           scope.$digest();
	           // the listener is always called during the first $digest loop after it was registered
	           expect(scope.counter).toEqual(1);
	
	           scope.$digest();
	           // but now it will not be called unless the value changes
	           expect(scope.counter).toEqual(1);
	
	           scope.name = 'adam';
	           scope.$digest();
	           expect(scope.counter).toEqual(2);
	
	
	
	           // Using a function as a watchExpression
	           var food;
	           scope.foodCounter = 0;
	           expect(scope.foodCounter).toEqual(0);
	           scope.$watch(
	             // This function returns the value being watched. It is called for each turn of the $digest loop
	             function() { return food; },
	             // This is the change listener, called when the value returned from the above function changes
	             function(newValue, oldValue) {
	               if ( newValue !== oldValue ) {
	                 // Only increment the counter if the value changed
	                 scope.foodCounter = scope.foodCounter + 1;
	               }
	             }
	           );
	           // No digest has been run so the counter will be zero
	           expect(scope.foodCounter).toEqual(0);
	
	           // Run the digest but since food has not changed count will still be zero
	           scope.$digest();
	           expect(scope.foodCounter).toEqual(0);
	
	           // Update food and run digest.  Now the counter will increment
	           food = 'cheeseburger';
	           scope.$digest();
	           expect(scope.foodCounter).toEqual(1);
	
	       * ```
	       *
	       *
	       *
	       * @param {(function()|string)} watchExpression Expression that is evaluated on each
	       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. A change in the return value triggers
	       *    a call to the `listener`.
	       *
	       *    - `string`: Evaluated as {@link guide/expression expression}
	       *    - `function(scope)`: called with current `scope` as a parameter.
	       * @param {function(newVal, oldVal, scope)} listener Callback called whenever the value
	       *    of `watchExpression` changes.
	       *
	       *    - `newVal` contains the current value of the `watchExpression`
	       *    - `oldVal` contains the previous value of the `watchExpression`
	       *    - `scope` refers to the current scope
	       * @param {boolean=} [objectEquality=false] Compare for object equality using {@link angular.equals} instead of
	       *     comparing for reference equality.
	       * @returns {function()} Returns a deregistration function for this listener.
	       */$watch:function $watch(watchExp,listener,objectEquality,prettyPrintExpression){var get=$parse(watchExp);if(get.$$watchDelegate){return get.$$watchDelegate(this,listener,objectEquality,get,watchExp);}var scope=this,array=scope.$$watchers,watcher={fn:listener,last:initWatchVal,get:get,exp:prettyPrintExpression||watchExp,eq:!!objectEquality};lastDirtyWatch=null;if(!isFunction(listener)){watcher.fn=noop;}if(!array){array=scope.$$watchers=[];array.$$digestWatchIndex=-1;}// we use unshift since we use a while loop in $digest for speed.
	// the while loop reads in reverse order.
	array.unshift(watcher);array.$$digestWatchIndex++;incrementWatchersCount(this,1);return function deregisterWatch(){var index=arrayRemove(array,watcher);if(index>=0){incrementWatchersCount(scope,-1);if(index<array.$$digestWatchIndex){array.$$digestWatchIndex--;}}lastDirtyWatch=null;};},/**
	       * @ngdoc method
	       * @name $rootScope.Scope#$watchGroup
	       * @kind function
	       *
	       * @description
	       * A variant of {@link ng.$rootScope.Scope#$watch $watch()} where it watches an array of `watchExpressions`.
	       * If any one expression in the collection changes the `listener` is executed.
	       *
	       * - The items in the `watchExpressions` array are observed via the standard `$watch` operation. Their return
	       *   values are examined for changes on every call to `$digest`.
	       * - The `listener` is called whenever any expression in the `watchExpressions` array changes.
	       *
	       * @param {Array.<string|Function(scope)>} watchExpressions Array of expressions that will be individually
	       * watched using {@link ng.$rootScope.Scope#$watch $watch()}
	       *
	       * @param {function(newValues, oldValues, scope)} listener Callback called whenever the return value of any
	       *    expression in `watchExpressions` changes
	       *    The `newValues` array contains the current values of the `watchExpressions`, with the indexes matching
	       *    those of `watchExpression`
	       *    and the `oldValues` array contains the previous values of the `watchExpressions`, with the indexes matching
	       *    those of `watchExpression`
	       *    The `scope` refers to the current scope.
	       * @returns {function()} Returns a de-registration function for all listeners.
	       */$watchGroup:function $watchGroup(watchExpressions,listener){var oldValues=new Array(watchExpressions.length);var newValues=new Array(watchExpressions.length);var deregisterFns=[];var self=this;var changeReactionScheduled=false;var firstRun=true;if(!watchExpressions.length){// No expressions means we call the listener ASAP
	var shouldCall=true;self.$evalAsync(function(){if(shouldCall)listener(newValues,newValues,self);});return function deregisterWatchGroup(){shouldCall=false;};}if(watchExpressions.length===1){// Special case size of one
	return this.$watch(watchExpressions[0],function watchGroupAction(value,oldValue,scope){newValues[0]=value;oldValues[0]=oldValue;listener(newValues,value===oldValue?newValues:oldValues,scope);});}forEach(watchExpressions,function(expr,i){var unwatchFn=self.$watch(expr,function watchGroupSubAction(value,oldValue){newValues[i]=value;oldValues[i]=oldValue;if(!changeReactionScheduled){changeReactionScheduled=true;self.$evalAsync(watchGroupAction);}});deregisterFns.push(unwatchFn);});function watchGroupAction(){changeReactionScheduled=false;if(firstRun){firstRun=false;listener(newValues,newValues,self);}else{listener(newValues,oldValues,self);}}return function deregisterWatchGroup(){while(deregisterFns.length){deregisterFns.shift()();}};},/**
	       * @ngdoc method
	       * @name $rootScope.Scope#$watchCollection
	       * @kind function
	       *
	       * @description
	       * Shallow watches the properties of an object and fires whenever any of the properties change
	       * (for arrays, this implies watching the array items; for object maps, this implies watching
	       * the properties). If a change is detected, the `listener` callback is fired.
	       *
	       * - The `obj` collection is observed via standard $watch operation and is examined on every
	       *   call to $digest() to see if any items have been added, removed, or moved.
	       * - The `listener` is called whenever anything within the `obj` has changed. Examples include
	       *   adding, removing, and moving items belonging to an object or array.
	       *
	       *
	       * # Example
	       * ```js
	          $scope.names = ['igor', 'matias', 'misko', 'james'];
	          $scope.dataCount = 4;
	
	          $scope.$watchCollection('names', function(newNames, oldNames) {
	            $scope.dataCount = newNames.length;
	          });
	
	          expect($scope.dataCount).toEqual(4);
	          $scope.$digest();
	
	          //still at 4 ... no changes
	          expect($scope.dataCount).toEqual(4);
	
	          $scope.names.pop();
	          $scope.$digest();
	
	          //now there's been a change
	          expect($scope.dataCount).toEqual(3);
	       * ```
	       *
	       *
	       * @param {string|function(scope)} obj Evaluated as {@link guide/expression expression}. The
	       *    expression value should evaluate to an object or an array which is observed on each
	       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. Any shallow change within the
	       *    collection will trigger a call to the `listener`.
	       *
	       * @param {function(newCollection, oldCollection, scope)} listener a callback function called
	       *    when a change is detected.
	       *    - The `newCollection` object is the newly modified data obtained from the `obj` expression
	       *    - The `oldCollection` object is a copy of the former collection data.
	       *      Due to performance considerations, the`oldCollection` value is computed only if the
	       *      `listener` function declares two or more arguments.
	       *    - The `scope` argument refers to the current scope.
	       *
	       * @returns {function()} Returns a de-registration function for this listener. When the
	       *    de-registration function is executed, the internal watch operation is terminated.
	       */$watchCollection:function $watchCollection(obj,listener){$watchCollectionInterceptor.$stateful=true;var self=this;// the current value, updated on each dirty-check run
	var newValue;// a shallow copy of the newValue from the last dirty-check run,
	// updated to match newValue during dirty-check run
	var oldValue;// a shallow copy of the newValue from when the last change happened
	var veryOldValue;// only track veryOldValue if the listener is asking for it
	var trackVeryOldValue=listener.length>1;var changeDetected=0;var changeDetector=$parse(obj,$watchCollectionInterceptor);var internalArray=[];var internalObject={};var initRun=true;var oldLength=0;function $watchCollectionInterceptor(_value){newValue=_value;var newLength,key,bothNaN,newItem,oldItem;// If the new value is undefined, then return undefined as the watch may be a one-time watch
	if(isUndefined(newValue))return;if(!isObject(newValue)){// if primitive
	if(oldValue!==newValue){oldValue=newValue;changeDetected++;}}else if(isArrayLike(newValue)){if(oldValue!==internalArray){// we are transitioning from something which was not an array into array.
	oldValue=internalArray;oldLength=oldValue.length=0;changeDetected++;}newLength=newValue.length;if(oldLength!==newLength){// if lengths do not match we need to trigger change notification
	changeDetected++;oldValue.length=oldLength=newLength;}// copy the items to oldValue and look for changes.
	for(var i=0;i<newLength;i++){oldItem=oldValue[i];newItem=newValue[i];// eslint-disable-next-line no-self-compare
	bothNaN=oldItem!==oldItem&&newItem!==newItem;if(!bothNaN&&oldItem!==newItem){changeDetected++;oldValue[i]=newItem;}}}else{if(oldValue!==internalObject){// we are transitioning from something which was not an object into object.
	oldValue=internalObject={};oldLength=0;changeDetected++;}// copy the items to oldValue and look for changes.
	newLength=0;for(key in newValue){if(hasOwnProperty.call(newValue,key)){newLength++;newItem=newValue[key];oldItem=oldValue[key];if(key in oldValue){// eslint-disable-next-line no-self-compare
	bothNaN=oldItem!==oldItem&&newItem!==newItem;if(!bothNaN&&oldItem!==newItem){changeDetected++;oldValue[key]=newItem;}}else{oldLength++;oldValue[key]=newItem;changeDetected++;}}}if(oldLength>newLength){// we used to have more keys, need to find them and destroy them.
	changeDetected++;for(key in oldValue){if(!hasOwnProperty.call(newValue,key)){oldLength--;delete oldValue[key];}}}}return changeDetected;}function $watchCollectionAction(){if(initRun){initRun=false;listener(newValue,newValue,self);}else{listener(newValue,veryOldValue,self);}// make a copy for the next time a collection is changed
	if(trackVeryOldValue){if(!isObject(newValue)){//primitive
	veryOldValue=newValue;}else if(isArrayLike(newValue)){veryOldValue=new Array(newValue.length);for(var i=0;i<newValue.length;i++){veryOldValue[i]=newValue[i];}}else{// if object
	veryOldValue={};for(var key in newValue){if(hasOwnProperty.call(newValue,key)){veryOldValue[key]=newValue[key];}}}}}return this.$watch(changeDetector,$watchCollectionAction);},/**
	       * @ngdoc method
	       * @name $rootScope.Scope#$digest
	       * @kind function
	       *
	       * @description
	       * Processes all of the {@link ng.$rootScope.Scope#$watch watchers} of the current scope and
	       * its children. Because a {@link ng.$rootScope.Scope#$watch watcher}'s listener can change
	       * the model, the `$digest()` keeps calling the {@link ng.$rootScope.Scope#$watch watchers}
	       * until no more listeners are firing. This means that it is possible to get into an infinite
	       * loop. This function will throw `'Maximum iteration limit exceeded.'` if the number of
	       * iterations exceeds 10.
	       *
	       * Usually, you don't call `$digest()` directly in
	       * {@link ng.directive:ngController controllers} or in
	       * {@link ng.$compileProvider#directive directives}.
	       * Instead, you should call {@link ng.$rootScope.Scope#$apply $apply()} (typically from within
	       * a {@link ng.$compileProvider#directive directive}), which will force a `$digest()`.
	       *
	       * If you want to be notified whenever `$digest()` is called,
	       * you can register a `watchExpression` function with
	       * {@link ng.$rootScope.Scope#$watch $watch()} with no `listener`.
	       *
	       * In unit tests, you may need to call `$digest()` to simulate the scope life cycle.
	       *
	       * # Example
	       * ```js
	           var scope = ...;
	           scope.name = 'misko';
	           scope.counter = 0;
	
	           expect(scope.counter).toEqual(0);
	           scope.$watch('name', function(newValue, oldValue) {
	             scope.counter = scope.counter + 1;
	           });
	           expect(scope.counter).toEqual(0);
	
	           scope.$digest();
	           // the listener is always called during the first $digest loop after it was registered
	           expect(scope.counter).toEqual(1);
	
	           scope.$digest();
	           // but now it will not be called unless the value changes
	           expect(scope.counter).toEqual(1);
	
	           scope.name = 'adam';
	           scope.$digest();
	           expect(scope.counter).toEqual(2);
	       * ```
	       *
	       */$digest:function $digest(){var watch,value,last,fn,get,watchers,dirty,ttl=TTL,next,current,target=this,watchLog=[],logIdx,asyncTask;beginPhase('$digest');// Check for changes to browser url that happened in sync before the call to $digest
	$browser.$$checkUrlChange();if(this===$rootScope&&applyAsyncId!==null){// If this is the root scope, and $applyAsync has scheduled a deferred $apply(), then
	// cancel the scheduled $apply and flush the queue of expressions to be evaluated.
	$browser.defer.cancel(applyAsyncId);flushApplyAsync();}lastDirtyWatch=null;do{// "while dirty" loop
	dirty=false;current=target;// It's safe for asyncQueuePosition to be a local variable here because this loop can't
	// be reentered recursively. Calling $digest from a function passed to $evalAsync would
	// lead to a '$digest already in progress' error.
	for(var asyncQueuePosition=0;asyncQueuePosition<asyncQueue.length;asyncQueuePosition++){try{asyncTask=asyncQueue[asyncQueuePosition];fn=asyncTask.fn;fn(asyncTask.scope,asyncTask.locals);}catch(e){$exceptionHandler(e);}lastDirtyWatch=null;}asyncQueue.length=0;traverseScopesLoop:do{// "traverse the scopes" loop
	if(watchers=current.$$watchers){// process our watches
	watchers.$$digestWatchIndex=watchers.length;while(watchers.$$digestWatchIndex--){try{watch=watchers[watchers.$$digestWatchIndex];// Most common watches are on primitives, in which case we can short
	// circuit it with === operator, only when === fails do we use .equals
	if(watch){get=watch.get;if((value=get(current))!==(last=watch.last)&&!(watch.eq?equals(value,last):isNumberNaN(value)&&isNumberNaN(last))){dirty=true;lastDirtyWatch=watch;watch.last=watch.eq?copy(value,null):value;fn=watch.fn;fn(value,last===initWatchVal?value:last,current);if(ttl<5){logIdx=4-ttl;if(!watchLog[logIdx])watchLog[logIdx]=[];watchLog[logIdx].push({msg:isFunction(watch.exp)?'fn: '+(watch.exp.name||watch.exp.toString()):watch.exp,newVal:value,oldVal:last});}}else if(watch===lastDirtyWatch){// If the most recently dirty watcher is now clean, short circuit since the remaining watchers
	// have already been tested.
	dirty=false;break traverseScopesLoop;}}}catch(e){$exceptionHandler(e);}}}// Insanity Warning: scope depth-first traversal
	// yes, this code is a bit crazy, but it works and we have tests to prove it!
	// this piece should be kept in sync with the traversal in $broadcast
	if(!(next=current.$$watchersCount&&current.$$childHead||current!==target&&current.$$nextSibling)){while(current!==target&&!(next=current.$$nextSibling)){current=current.$parent;}}}while(current=next);// `break traverseScopesLoop;` takes us to here
	if((dirty||asyncQueue.length)&&!ttl--){clearPhase();throw $rootScopeMinErr('infdig','{0} $digest() iterations reached. Aborting!\n'+'Watchers fired in the last 5 iterations: {1}',TTL,watchLog);}}while(dirty||asyncQueue.length);clearPhase();// postDigestQueuePosition isn't local here because this loop can be reentered recursively.
	while(postDigestQueuePosition<postDigestQueue.length){try{postDigestQueue[postDigestQueuePosition++]();}catch(e){$exceptionHandler(e);}}postDigestQueue.length=postDigestQueuePosition=0;// Check for changes to browser url that happened during the $digest
	// (for which no event is fired; e.g. via `history.pushState()`)
	$browser.$$checkUrlChange();},/**
	       * @ngdoc event
	       * @name $rootScope.Scope#$destroy
	       * @eventType broadcast on scope being destroyed
	       *
	       * @description
	       * Broadcasted when a scope and its children are being destroyed.
	       *
	       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
	       * clean up DOM bindings before an element is removed from the DOM.
	       *//**
	       * @ngdoc method
	       * @name $rootScope.Scope#$destroy
	       * @kind function
	       *
	       * @description
	       * Removes the current scope (and all of its children) from the parent scope. Removal implies
	       * that calls to {@link ng.$rootScope.Scope#$digest $digest()} will no longer
	       * propagate to the current scope and its children. Removal also implies that the current
	       * scope is eligible for garbage collection.
	       *
	       * The `$destroy()` is usually used by directives such as
	       * {@link ng.directive:ngRepeat ngRepeat} for managing the
	       * unrolling of the loop.
	       *
	       * Just before a scope is destroyed, a `$destroy` event is broadcasted on this scope.
	       * Application code can register a `$destroy` event handler that will give it a chance to
	       * perform any necessary cleanup.
	       *
	       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
	       * clean up DOM bindings before an element is removed from the DOM.
	       */$destroy:function $destroy(){// We can't destroy a scope that has been already destroyed.
	if(this.$$destroyed)return;var parent=this.$parent;this.$broadcast('$destroy');this.$$destroyed=true;if(this===$rootScope){//Remove handlers attached to window when $rootScope is removed
	$browser.$$applicationDestroyed();}incrementWatchersCount(this,-this.$$watchersCount);for(var eventName in this.$$listenerCount){decrementListenerCount(this,this.$$listenerCount[eventName],eventName);}// sever all the references to parent scopes (after this cleanup, the current scope should
	// not be retained by any of our references and should be eligible for garbage collection)
	if(parent&&parent.$$childHead===this)parent.$$childHead=this.$$nextSibling;if(parent&&parent.$$childTail===this)parent.$$childTail=this.$$prevSibling;if(this.$$prevSibling)this.$$prevSibling.$$nextSibling=this.$$nextSibling;if(this.$$nextSibling)this.$$nextSibling.$$prevSibling=this.$$prevSibling;// Disable listeners, watchers and apply/digest methods
	this.$destroy=this.$digest=this.$apply=this.$evalAsync=this.$applyAsync=noop;this.$on=this.$watch=this.$watchGroup=function(){return noop;};this.$$listeners={};// Disconnect the next sibling to prevent `cleanUpScope` destroying those too
	this.$$nextSibling=null;cleanUpScope(this);},/**
	       * @ngdoc method
	       * @name $rootScope.Scope#$eval
	       * @kind function
	       *
	       * @description
	       * Executes the `expression` on the current scope and returns the result. Any exceptions in
	       * the expression are propagated (uncaught). This is useful when evaluating Angular
	       * expressions.
	       *
	       * # Example
	       * ```js
	           var scope = ng.$rootScope.Scope();
	           scope.a = 1;
	           scope.b = 2;
	
	           expect(scope.$eval('a+b')).toEqual(3);
	           expect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);
	       * ```
	       *
	       * @param {(string|function())=} expression An angular expression to be executed.
	       *
	       *    - `string`: execute using the rules as defined in  {@link guide/expression expression}.
	       *    - `function(scope)`: execute the function with the current `scope` parameter.
	       *
	       * @param {(object)=} locals Local variables object, useful for overriding values in scope.
	       * @returns {*} The result of evaluating the expression.
	       */$eval:function $eval(expr,locals){return $parse(expr)(this,locals);},/**
	       * @ngdoc method
	       * @name $rootScope.Scope#$evalAsync
	       * @kind function
	       *
	       * @description
	       * Executes the expression on the current scope at a later point in time.
	       *
	       * The `$evalAsync` makes no guarantees as to when the `expression` will be executed, only
	       * that:
	       *
	       *   - it will execute after the function that scheduled the evaluation (preferably before DOM
	       *     rendering).
	       *   - at least one {@link ng.$rootScope.Scope#$digest $digest cycle} will be performed after
	       *     `expression` execution.
	       *
	       * Any exceptions from the execution of the expression are forwarded to the
	       * {@link ng.$exceptionHandler $exceptionHandler} service.
	       *
	       * __Note:__ if this function is called outside of a `$digest` cycle, a new `$digest` cycle
	       * will be scheduled. However, it is encouraged to always call code that changes the model
	       * from within an `$apply` call. That includes code evaluated via `$evalAsync`.
	       *
	       * @param {(string|function())=} expression An angular expression to be executed.
	       *
	       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
	       *    - `function(scope)`: execute the function with the current `scope` parameter.
	       *
	       * @param {(object)=} locals Local variables object, useful for overriding values in scope.
	       */$evalAsync:function $evalAsync(expr,locals){// if we are outside of an $digest loop and this is the first time we are scheduling async
	// task also schedule async auto-flush
	if(!$rootScope.$$phase&&!asyncQueue.length){$browser.defer(function(){if(asyncQueue.length){$rootScope.$digest();}});}asyncQueue.push({scope:this,fn:$parse(expr),locals:locals});},$$postDigest:function $$postDigest(fn){postDigestQueue.push(fn);},/**
	       * @ngdoc method
	       * @name $rootScope.Scope#$apply
	       * @kind function
	       *
	       * @description
	       * `$apply()` is used to execute an expression in angular from outside of the angular
	       * framework. (For example from browser DOM events, setTimeout, XHR or third party libraries).
	       * Because we are calling into the angular framework we need to perform proper scope life
	       * cycle of {@link ng.$exceptionHandler exception handling},
	       * {@link ng.$rootScope.Scope#$digest executing watches}.
	       *
	       * ## Life cycle
	       *
	       * # Pseudo-Code of `$apply()`
	       * ```js
	           function $apply(expr) {
	             try {
	               return $eval(expr);
	             } catch (e) {
	               $exceptionHandler(e);
	             } finally {
	               $root.$digest();
	             }
	           }
	       * ```
	       *
	       *
	       * Scope's `$apply()` method transitions through the following stages:
	       *
	       * 1. The {@link guide/expression expression} is executed using the
	       *    {@link ng.$rootScope.Scope#$eval $eval()} method.
	       * 2. Any exceptions from the execution of the expression are forwarded to the
	       *    {@link ng.$exceptionHandler $exceptionHandler} service.
	       * 3. The {@link ng.$rootScope.Scope#$watch watch} listeners are fired immediately after the
	       *    expression was executed using the {@link ng.$rootScope.Scope#$digest $digest()} method.
	       *
	       *
	       * @param {(string|function())=} exp An angular expression to be executed.
	       *
	       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
	       *    - `function(scope)`: execute the function with current `scope` parameter.
	       *
	       * @returns {*} The result of evaluating the expression.
	       */$apply:function $apply(expr){try{beginPhase('$apply');try{return this.$eval(expr);}finally{clearPhase();}}catch(e){$exceptionHandler(e);}finally{try{$rootScope.$digest();}catch(e){$exceptionHandler(e);// eslint-disable-next-line no-unsafe-finally
	throw e;}}},/**
	       * @ngdoc method
	       * @name $rootScope.Scope#$applyAsync
	       * @kind function
	       *
	       * @description
	       * Schedule the invocation of $apply to occur at a later time. The actual time difference
	       * varies across browsers, but is typically around ~10 milliseconds.
	       *
	       * This can be used to queue up multiple expressions which need to be evaluated in the same
	       * digest.
	       *
	       * @param {(string|function())=} exp An angular expression to be executed.
	       *
	       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
	       *    - `function(scope)`: execute the function with current `scope` parameter.
	       */$applyAsync:function $applyAsync(expr){var scope=this;if(expr){applyAsyncQueue.push($applyAsyncExpression);}expr=$parse(expr);scheduleApplyAsync();function $applyAsyncExpression(){scope.$eval(expr);}},/**
	       * @ngdoc method
	       * @name $rootScope.Scope#$on
	       * @kind function
	       *
	       * @description
	       * Listens on events of a given type. See {@link ng.$rootScope.Scope#$emit $emit} for
	       * discussion of event life cycle.
	       *
	       * The event listener function format is: `function(event, args...)`. The `event` object
	       * passed into the listener has the following attributes:
	       *
	       *   - `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or
	       *     `$broadcast`-ed.
	       *   - `currentScope` - `{Scope}`: the scope that is currently handling the event. Once the
	       *     event propagates through the scope hierarchy, this property is set to null.
	       *   - `name` - `{string}`: name of the event.
	       *   - `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel
	       *     further event propagation (available only for events that were `$emit`-ed).
	       *   - `preventDefault` - `{function}`: calling `preventDefault` sets `defaultPrevented` flag
	       *     to true.
	       *   - `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.
	       *
	       * @param {string} name Event name to listen on.
	       * @param {function(event, ...args)} listener Function to call when the event is emitted.
	       * @returns {function()} Returns a deregistration function for this listener.
	       */$on:function $on(name,listener){var namedListeners=this.$$listeners[name];if(!namedListeners){this.$$listeners[name]=namedListeners=[];}namedListeners.push(listener);var current=this;do{if(!current.$$listenerCount[name]){current.$$listenerCount[name]=0;}current.$$listenerCount[name]++;}while(current=current.$parent);var self=this;return function(){var indexOfListener=namedListeners.indexOf(listener);if(indexOfListener!==-1){namedListeners[indexOfListener]=null;decrementListenerCount(self,1,name);}};},/**
	       * @ngdoc method
	       * @name $rootScope.Scope#$emit
	       * @kind function
	       *
	       * @description
	       * Dispatches an event `name` upwards through the scope hierarchy notifying the
	       * registered {@link ng.$rootScope.Scope#$on} listeners.
	       *
	       * The event life cycle starts at the scope on which `$emit` was called. All
	       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
	       * notified. Afterwards, the event traverses upwards toward the root scope and calls all
	       * registered listeners along the way. The event will stop propagating if one of the listeners
	       * cancels it.
	       *
	       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
	       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
	       *
	       * @param {string} name Event name to emit.
	       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
	       * @return {Object} Event object (see {@link ng.$rootScope.Scope#$on}).
	       */$emit:function $emit(name,args){var empty=[],namedListeners,scope=this,_stopPropagation=false,event={name:name,targetScope:scope,stopPropagation:function stopPropagation(){_stopPropagation=true;},preventDefault:function preventDefault(){event.defaultPrevented=true;},defaultPrevented:false},listenerArgs=concat([event],arguments,1),i,length;do{namedListeners=scope.$$listeners[name]||empty;event.currentScope=scope;for(i=0,length=namedListeners.length;i<length;i++){// if listeners were deregistered, defragment the array
	if(!namedListeners[i]){namedListeners.splice(i,1);i--;length--;continue;}try{//allow all listeners attached to the current scope to run
	namedListeners[i].apply(null,listenerArgs);}catch(e){$exceptionHandler(e);}}//if any listener on the current scope stops propagation, prevent bubbling
	if(_stopPropagation){event.currentScope=null;return event;}//traverse upwards
	scope=scope.$parent;}while(scope);event.currentScope=null;return event;},/**
	       * @ngdoc method
	       * @name $rootScope.Scope#$broadcast
	       * @kind function
	       *
	       * @description
	       * Dispatches an event `name` downwards to all child scopes (and their children) notifying the
	       * registered {@link ng.$rootScope.Scope#$on} listeners.
	       *
	       * The event life cycle starts at the scope on which `$broadcast` was called. All
	       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
	       * notified. Afterwards, the event propagates to all direct and indirect scopes of the current
	       * scope and calls all registered listeners along the way. The event cannot be canceled.
	       *
	       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
	       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
	       *
	       * @param {string} name Event name to broadcast.
	       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
	       * @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}
	       */$broadcast:function $broadcast(name,args){var target=this,current=target,next=target,event={name:name,targetScope:target,preventDefault:function preventDefault(){event.defaultPrevented=true;},defaultPrevented:false};if(!target.$$listenerCount[name])return event;var listenerArgs=concat([event],arguments,1),listeners,i,length;//down while you can, then up and next sibling or up and next sibling until back at root
	while(current=next){event.currentScope=current;listeners=current.$$listeners[name]||[];for(i=0,length=listeners.length;i<length;i++){// if listeners were deregistered, defragment the array
	if(!listeners[i]){listeners.splice(i,1);i--;length--;continue;}try{listeners[i].apply(null,listenerArgs);}catch(e){$exceptionHandler(e);}}// Insanity Warning: scope depth-first traversal
	// yes, this code is a bit crazy, but it works and we have tests to prove it!
	// this piece should be kept in sync with the traversal in $digest
	// (though it differs due to having the extra check for $$listenerCount)
	if(!(next=current.$$listenerCount[name]&&current.$$childHead||current!==target&&current.$$nextSibling)){while(current!==target&&!(next=current.$$nextSibling)){current=current.$parent;}}}event.currentScope=null;return event;}};var $rootScope=new Scope();//The internal queues. Expose them on the $rootScope for debugging/testing purposes.
	var asyncQueue=$rootScope.$$asyncQueue=[];var postDigestQueue=$rootScope.$$postDigestQueue=[];var applyAsyncQueue=$rootScope.$$applyAsyncQueue=[];var postDigestQueuePosition=0;return $rootScope;function beginPhase(phase){if($rootScope.$$phase){throw $rootScopeMinErr('inprog','{0} already in progress',$rootScope.$$phase);}$rootScope.$$phase=phase;}function clearPhase(){$rootScope.$$phase=null;}function incrementWatchersCount(current,count){do{current.$$watchersCount+=count;}while(current=current.$parent);}function decrementListenerCount(current,count,name){do{current.$$listenerCount[name]-=count;if(current.$$listenerCount[name]===0){delete current.$$listenerCount[name];}}while(current=current.$parent);}/**
	     * function used as an initial value for watchers.
	     * because it's unique we can easily tell it apart from other values
	     */function initWatchVal(){}function flushApplyAsync(){while(applyAsyncQueue.length){try{applyAsyncQueue.shift()();}catch(e){$exceptionHandler(e);}}applyAsyncId=null;}function scheduleApplyAsync(){if(applyAsyncId===null){applyAsyncId=$browser.defer(function(){$rootScope.$apply(flushApplyAsync);});}}}];}/**
	 * @ngdoc service
	 * @name $rootElement
	 *
	 * @description
	 * The root element of Angular application. This is either the element where {@link
	 * ng.directive:ngApp ngApp} was declared or the element passed into
	 * {@link angular.bootstrap}. The element represents the root element of application. It is also the
	 * location where the application's {@link auto.$injector $injector} service gets
	 * published, and can be retrieved using `$rootElement.injector()`.
	 */// the implementation is in angular.bootstrap
	/**
	 * @this
	 * @description
	 * Private service to sanitize uris for links and images. Used by $compile and $sanitize.
	 */function $$SanitizeUriProvider(){var aHrefSanitizationWhitelist=/^\s*(https?|ftp|mailto|tel|file):/,imgSrcSanitizationWhitelist=/^\s*((https?|ftp|file|blob):|data:image\/)/;/**
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during a[href] sanitization.
	   *
	   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
	   *
	   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */this.aHrefSanitizationWhitelist=function(regexp){if(isDefined(regexp)){aHrefSanitizationWhitelist=regexp;return this;}return aHrefSanitizationWhitelist;};/**
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during img[src] sanitization.
	   *
	   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
	   *
	   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */this.imgSrcSanitizationWhitelist=function(regexp){if(isDefined(regexp)){imgSrcSanitizationWhitelist=regexp;return this;}return imgSrcSanitizationWhitelist;};this.$get=function(){return function sanitizeUri(uri,isImage){var regex=isImage?imgSrcSanitizationWhitelist:aHrefSanitizationWhitelist;var normalizedVal;normalizedVal=urlResolve(uri).href;if(normalizedVal!==''&&!normalizedVal.match(regex)){return'unsafe:'+normalizedVal;}return uri;};};}/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *//* exported $SceProvider, $SceDelegateProvider */var $sceMinErr=minErr('$sce');var SCE_CONTEXTS={// HTML is used when there's HTML rendered (e.g. ng-bind-html, iframe srcdoc binding).
	HTML:'html',// Style statements or stylesheets. Currently unused in AngularJS.
	CSS:'css',// An URL used in a context where it does not refer to a resource that loads code. Currently
	// unused in AngularJS.
	URL:'url',// RESOURCE_URL is a subtype of URL used where the referred-to resource could be interpreted as
	// code. (e.g. ng-include, script src binding, templateUrl)
	RESOURCE_URL:'resourceUrl',// Script. Currently unused in AngularJS.
	JS:'js'};// Helper functions follow.
	var UNDERSCORE_LOWERCASE_REGEXP=/_([a-z])/g;function snakeToCamel(name){return name.replace(UNDERSCORE_LOWERCASE_REGEXP,fnCamelCaseReplace);}function adjustMatcher(matcher){if(matcher==='self'){return matcher;}else if(isString(matcher)){// Strings match exactly except for 2 wildcards - '*' and '**'.
	// '*' matches any character except those from the set ':/.?&'.
	// '**' matches any character (like .* in a RegExp).
	// More than 2 *'s raises an error as it's ill defined.
	if(matcher.indexOf('***')>-1){throw $sceMinErr('iwcard','Illegal sequence *** in string matcher.  String: {0}',matcher);}matcher=escapeForRegexp(matcher).replace(/\\\*\\\*/g,'.*').replace(/\\\*/g,'[^:/.?&;]*');return new RegExp('^'+matcher+'$');}else if(isRegExp(matcher)){// The only other type of matcher allowed is a Regexp.
	// Match entire URL / disallow partial matches.
	// Flags are reset (i.e. no global, ignoreCase or multiline)
	return new RegExp('^'+matcher.source+'$');}else{throw $sceMinErr('imatcher','Matchers may only be "self", string patterns or RegExp objects');}}function adjustMatchers(matchers){var adjustedMatchers=[];if(isDefined(matchers)){forEach(matchers,function(matcher){adjustedMatchers.push(adjustMatcher(matcher));});}return adjustedMatchers;}/**
	 * @ngdoc service
	 * @name $sceDelegate
	 * @kind function
	 *
	 * @description
	 *
	 * `$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict
	 * Contextual Escaping (SCE)} services to AngularJS.
	 *
	 * For an overview of this service and the functionnality it provides in AngularJS, see the main
	 * page for {@link ng.$sce SCE}. The current page is targeted for developers who need to alter how
	 * SCE works in their application, which shouldn't be needed in most cases.
	 *
	 * <div class="alert alert-danger">
	 * AngularJS strongly relies on contextual escaping for the security of bindings: disabling or
	 * modifying this might cause cross site scripting (XSS) vulnerabilities. For libraries owners,
	 * changes to this service will also influence users, so be extra careful and document your changes.
	 * </div>
	 *
	 * Typically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of
	 * the `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is
	 * because, while the `$sce` provides numerous shorthand methods, etc., you really only need to
	 * override 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things
	 * work because `$sce` delegates to `$sceDelegate` for these operations.
	 *
	 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.
	 *
	 * The default instance of `$sceDelegate` should work out of the box with little pain.  While you
	 * can override it completely to change the behavior of `$sce`, the common case would
	 * involve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting
	 * your own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as
	 * templates.  Refer {@link ng.$sceDelegateProvider#resourceUrlWhitelist
	 * $sceDelegateProvider.resourceUrlWhitelist} and {@link
	 * ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
	 *//**
	 * @ngdoc provider
	 * @name $sceDelegateProvider
	 * @this
	 *
	 * @description
	 *
	 * The `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate
	 * $sceDelegate service}, used as a delegate for {@link ng.$sce Strict Contextual Escaping (SCE)}.
	 *
	 * The `$sceDelegateProvider` allows one to get/set the whitelists and blacklists used to ensure
	 * that the URLs used for sourcing AngularJS templates and other script-running URLs are safe (all
	 * places that use the `$sce.RESOURCE_URL` context). See
	 * {@link ng.$sceDelegateProvider#resourceUrlWhitelist $sceDelegateProvider.resourceUrlWhitelist}
	 * and
	 * {@link ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist},
	 *
	 * For the general details about this service in Angular, read the main page for {@link ng.$sce
	 * Strict Contextual Escaping (SCE)}.
	 *
	 * **Example**:  Consider the following case. <a name="example"></a>
	 *
	 * - your app is hosted at url `http://myapp.example.com/`
	 * - but some of your templates are hosted on other domains you control such as
	 *   `http://srv01.assets.example.com/`, `http://srv02.assets.example.com/`, etc.
	 * - and you have an open redirect at `http://myapp.example.com/clickThru?...`.
	 *
	 * Here is what a secure configuration for this scenario might look like:
	 *
	 * ```
	 *  angular.module('myApp', []).config(function($sceDelegateProvider) {
	 *    $sceDelegateProvider.resourceUrlWhitelist([
	 *      // Allow same origin resource loads.
	 *      'self',
	 *      // Allow loading from our assets domain.  Notice the difference between * and **.
	 *      'http://srv*.assets.example.com/**'
	 *    ]);
	 *
	 *    // The blacklist overrides the whitelist so the open redirect here is blocked.
	 *    $sceDelegateProvider.resourceUrlBlacklist([
	 *      'http://myapp.example.com/clickThru**'
	 *    ]);
	 *  });
	 * ```
	 * Note that an empty whitelist will block every resource URL from being loaded, and will require
	 * you to manually mark each one as trusted with `$sce.trustAsResourceUrl`. However, templates
	 * requested by {@link ng.$templateRequest $templateRequest} that are present in
	 * {@link ng.$templateCache $templateCache} will not go through this check. If you have a mechanism
	 * to populate your templates in that cache at config time, then it is a good idea to remove 'self'
	 * from that whitelist. This helps to mitigate the security impact of certain types of issues, like
	 * for instance attacker-controlled `ng-includes`.
	 */function $SceDelegateProvider(){this.SCE_CONTEXTS=SCE_CONTEXTS;// Resource URLs can also be trusted by policy.
	var resourceUrlWhitelist=['self'],resourceUrlBlacklist=[];/**
	   * @ngdoc method
	   * @name $sceDelegateProvider#resourceUrlWhitelist
	   * @kind function
	   *
	   * @param {Array=} whitelist When provided, replaces the resourceUrlWhitelist with the value
	   *     provided.  This must be an array or null.  A snapshot of this array is used so further
	   *     changes to the array are ignored.
	   *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
	   *     allowed in this array.
	   *
	   * @return {Array} The currently set whitelist array.
	   *
	   * @description
	   * Sets/Gets the whitelist of trusted resource URLs.
	   *
	   * The **default value** when no whitelist has been explicitly set is `['self']` allowing only
	   * same origin resource requests.
	   *
	   * <div class="alert alert-warning">
	   * **Note:** the default whitelist of 'self' is not recommended if your app shares its origin
	   * with other apps! It is a good idea to limit it to only your application's directory.
	   * </div>
	   */this.resourceUrlWhitelist=function(value){if(arguments.length){resourceUrlWhitelist=adjustMatchers(value);}return resourceUrlWhitelist;};/**
	   * @ngdoc method
	   * @name $sceDelegateProvider#resourceUrlBlacklist
	   * @kind function
	   *
	   * @param {Array=} blacklist When provided, replaces the resourceUrlBlacklist with the value
	   *     provided.  This must be an array or null.  A snapshot of this array is used so further
	   *     changes to the array are ignored.</p><p>
	   *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
	   *     allowed in this array.</p><p>
	   *     The typical usage for the blacklist is to **block
	   *     [open redirects](http://cwe.mitre.org/data/definitions/601.html)** served by your domain as
	   *     these would otherwise be trusted but actually return content from the redirected domain.
	   *     </p><p>
	   *     Finally, **the blacklist overrides the whitelist** and has the final say.
	   *
	   * @return {Array} The currently set blacklist array.
	   *
	   * @description
	   * Sets/Gets the blacklist of trusted resource URLs.
	   *
	   * The **default value** when no whitelist has been explicitly set is the empty array (i.e. there
	   * is no blacklist.)
	   */this.resourceUrlBlacklist=function(value){if(arguments.length){resourceUrlBlacklist=adjustMatchers(value);}return resourceUrlBlacklist;};this.$get=['$injector',function($injector){var htmlSanitizer=function htmlSanitizer(html){throw $sceMinErr('unsafe','Attempting to use an unsafe value in a safe context.');};if($injector.has('$sanitize')){htmlSanitizer=$injector.get('$sanitize');}function matchUrl(matcher,parsedUrl){if(matcher==='self'){return urlIsSameOrigin(parsedUrl);}else{// definitely a regex.  See adjustMatchers()
	return!!matcher.exec(parsedUrl.href);}}function isResourceUrlAllowedByPolicy(url){var parsedUrl=urlResolve(url.toString());var i,n,allowed=false;// Ensure that at least one item from the whitelist allows this url.
	for(i=0,n=resourceUrlWhitelist.length;i<n;i++){if(matchUrl(resourceUrlWhitelist[i],parsedUrl)){allowed=true;break;}}if(allowed){// Ensure that no item from the blacklist blocked this url.
	for(i=0,n=resourceUrlBlacklist.length;i<n;i++){if(matchUrl(resourceUrlBlacklist[i],parsedUrl)){allowed=false;break;}}}return allowed;}function generateHolderType(Base){var holderType=function TrustedValueHolderType(trustedValue){this.$$unwrapTrustedValue=function(){return trustedValue;};};if(Base){holderType.prototype=new Base();}holderType.prototype.valueOf=function sceValueOf(){return this.$$unwrapTrustedValue();};holderType.prototype.toString=function sceToString(){return this.$$unwrapTrustedValue().toString();};return holderType;}var trustedValueHolderBase=generateHolderType(),byType={};byType[SCE_CONTEXTS.HTML]=generateHolderType(trustedValueHolderBase);byType[SCE_CONTEXTS.CSS]=generateHolderType(trustedValueHolderBase);byType[SCE_CONTEXTS.URL]=generateHolderType(trustedValueHolderBase);byType[SCE_CONTEXTS.JS]=generateHolderType(trustedValueHolderBase);byType[SCE_CONTEXTS.RESOURCE_URL]=generateHolderType(byType[SCE_CONTEXTS.URL]);/**
	     * @ngdoc method
	     * @name $sceDelegate#trustAs
	     *
	     * @description
	     * Returns a trusted representation of the parameter for the specified context. This trusted
	     * object will later on be used as-is, without any security check, by bindings or directives
	     * that require this security context.
	     * For instance, marking a string as trusted for the `$sce.HTML` context will entirely bypass
	     * the potential `$sanitize` call in corresponding `$sce.HTML` bindings or directives, such as
	     * `ng-bind-html`. Note that in most cases you won't need to call this function: if you have the
	     * sanitizer loaded, passing the value itself will render all the HTML that does not pose a
	     * security risk.
	     *
	     * See {@link ng.$sceDelegate#getTrusted getTrusted} for the function that will consume those
	     * trusted values, and {@link ng.$sce $sce} for general documentation about strict contextual
	     * escaping.
	     *
	     * @param {string} type The context in which this value is safe for use, e.g. `$sce.URL`,
	     *     `$sce.RESOURCE_URL`, `$sce.HTML`, `$sce.JS` or `$sce.CSS`.
	     *
	     * @param {*} value The value that should be considered trusted.
	     * @return {*} A trusted representation of value, that can be used in the given context.
	     */function trustAs(type,trustedValue){var Constructor=byType.hasOwnProperty(type)?byType[type]:null;if(!Constructor){throw $sceMinErr('icontext','Attempted to trust a value in invalid context. Context: {0}; Value: {1}',type,trustedValue);}if(trustedValue===null||isUndefined(trustedValue)||trustedValue===''){return trustedValue;}// All the current contexts in SCE_CONTEXTS happen to be strings.  In order to avoid trusting
	// mutable objects, we ensure here that the value passed in is actually a string.
	if(typeof trustedValue!=='string'){throw $sceMinErr('itype','Attempted to trust a non-string value in a content requiring a string: Context: {0}',type);}return new Constructor(trustedValue);}/**
	     * @ngdoc method
	     * @name $sceDelegate#valueOf
	     *
	     * @description
	     * If the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs
	     * `$sceDelegate.trustAs`}, returns the value that had been passed to {@link
	     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.
	     *
	     * If the passed parameter is not a value that had been returned by {@link
	     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, it must be returned as-is.
	     *
	     * @param {*} value The result of a prior {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}
	     *     call or anything else.
	     * @return {*} The `value` that was originally provided to {@link ng.$sceDelegate#trustAs
	     *     `$sceDelegate.trustAs`} if `value` is the result of such a call.  Otherwise, returns
	     *     `value` unchanged.
	     */function valueOf(maybeTrusted){if(maybeTrusted instanceof trustedValueHolderBase){return maybeTrusted.$$unwrapTrustedValue();}else{return maybeTrusted;}}/**
	     * @ngdoc method
	     * @name $sceDelegate#getTrusted
	     *
	     * @description
	     * Takes any input, and either returns a value that's safe to use in the specified context, or
	     * throws an exception.
	     *
	     * In practice, there are several cases. When given a string, this function runs checks
	     * and sanitization to make it safe without prior assumptions. When given the result of a {@link
	     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`} call, it returns the originally supplied
	     * value if that value's context is valid for this call's context. Finally, this function can
	     * also throw when there is no way to turn `maybeTrusted` in a safe value (e.g., no sanitization
	     * is available or possible.)
	     *
	     * @param {string} type The context in which this value is to be used (such as `$sce.HTML`).
	     * @param {*} maybeTrusted The result of a prior {@link ng.$sceDelegate#trustAs
	     *     `$sceDelegate.trustAs`} call, or anything else (which will not be considered trusted.)
	     * @return {*} A version of the value that's safe to use in the given context, or throws an
	     *     exception if this is impossible.
	     */function getTrusted(type,maybeTrusted){if(maybeTrusted===null||isUndefined(maybeTrusted)||maybeTrusted===''){return maybeTrusted;}var constructor=byType.hasOwnProperty(type)?byType[type]:null;// If maybeTrusted is a trusted class instance or subclass instance, then unwrap and return
	// as-is.
	if(constructor&&maybeTrusted instanceof constructor){return maybeTrusted.$$unwrapTrustedValue();}// Otherwise, if we get here, then we may either make it safe, or throw an exception. This
	// depends on the context: some are sanitizatible (HTML), some use whitelists (RESOURCE_URL),
	// some are impossible to do (JS). This step isn't implemented for CSS and URL, as AngularJS
	// has no corresponding sinks.
	if(type===SCE_CONTEXTS.RESOURCE_URL){// RESOURCE_URL uses a whitelist.
	if(isResourceUrlAllowedByPolicy(maybeTrusted)){return maybeTrusted;}else{throw $sceMinErr('insecurl','Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}',maybeTrusted.toString());}}else if(type===SCE_CONTEXTS.HTML){// htmlSanitizer throws its own error when no sanitizer is available.
	return htmlSanitizer(maybeTrusted);}// Default error when the $sce service has no way to make the input safe.
	throw $sceMinErr('unsafe','Attempting to use an unsafe value in a safe context.');}return{trustAs:trustAs,getTrusted:getTrusted,valueOf:valueOf};}];}/**
	 * @ngdoc provider
	 * @name $sceProvider
	 * @this
	 *
	 * @description
	 *
	 * The $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.
	 * -   enable/disable Strict Contextual Escaping (SCE) in a module
	 * -   override the default implementation with a custom delegate
	 *
	 * Read more about {@link ng.$sce Strict Contextual Escaping (SCE)}.
	 *//**
	 * @ngdoc service
	 * @name $sce
	 * @kind function
	 *
	 * @description
	 *
	 * `$sce` is a service that provides Strict Contextual Escaping services to AngularJS.
	 *
	 * # Strict Contextual Escaping
	 *
	 * Strict Contextual Escaping (SCE) is a mode in which AngularJS constrains bindings to only render
	 * trusted values. Its goal is to assist in writing code in a way that (a) is secure by default, and
	 * (b) makes auditing for security vulnerabilities such as XSS, clickjacking, etc. a lot easier.
	 *
	 * ## Overview
	 *
	 * To systematically block XSS security bugs, AngularJS treats all values as untrusted by default in
	 * HTML or sensitive URL bindings. When binding untrusted values, AngularJS will automatically
	 * run security checks on them (sanitizations, whitelists, depending on context), or throw when it
	 * cannot guarantee the security of the result. That behavior depends strongly on contexts: HTML
	 * can be sanitized, but template URLs cannot, for instance.
	 *
	 * To illustrate this, consider the `ng-bind-html` directive. It renders its value directly as HTML:
	 * we call that the *context*. When given an untrusted input, AngularJS will attempt to sanitize it
	 * before rendering if a sanitizer is available, and throw otherwise. To bypass sanitization and
	 * render the input as-is, you will need to mark it as trusted for that context before attempting
	 * to bind it.
	 *
	 * As of version 1.2, AngularJS ships with SCE enabled by default.
	 *
	 * ## In practice
	 *
	 * Here's an example of a binding in a privileged context:
	 *
	 * ```
	 * <input ng-model="userHtml" aria-label="User input">
	 * <div ng-bind-html="userHtml"></div>
	 * ```
	 *
	 * Notice that `ng-bind-html` is bound to `userHtml` controlled by the user.  With SCE
	 * disabled, this application allows the user to render arbitrary HTML into the DIV, which would
	 * be an XSS security bug. In a more realistic example, one may be rendering user comments, blog
	 * articles, etc. via bindings. (HTML is just one example of a context where rendering user
	 * controlled input creates security vulnerabilities.)
	 *
	 * For the case of HTML, you might use a library, either on the client side, or on the server side,
	 * to sanitize unsafe HTML before binding to the value and rendering it in the document.
	 *
	 * How would you ensure that every place that used these types of bindings was bound to a value that
	 * was sanitized by your library (or returned as safe for rendering by your server?)  How can you
	 * ensure that you didn't accidentally delete the line that sanitized the value, or renamed some
	 * properties/fields and forgot to update the binding to the sanitized value?
	 *
	 * To be secure by default, AngularJS makes sure bindings go through that sanitization, or
	 * any similar validation process, unless there's a good reason to trust the given value in this
	 * context.  That trust is formalized with a function call. This means that as a developer, you
	 * can assume all untrusted bindings are safe. Then, to audit your code for binding security issues,
	 * you just need to ensure the values you mark as trusted indeed are safe - because they were
	 * received from your server, sanitized by your library, etc. You can organize your codebase to
	 * help with this - perhaps allowing only the files in a specific directory to do this.
	 * Ensuring that the internal API exposed by that code doesn't markup arbitrary values as safe then
	 * becomes a more manageable task.
	 *
	 * In the case of AngularJS' SCE service, one uses {@link ng.$sce#trustAs $sce.trustAs}
	 * (and shorthand methods such as {@link ng.$sce#trustAsHtml $sce.trustAsHtml}, etc.) to
	 * build the trusted versions of your values.
	 *
	 * ## How does it work?
	 *
	 * In privileged contexts, directives and code will bind to the result of {@link ng.$sce#getTrusted
	 * $sce.getTrusted(context, value)} rather than to the value directly.  Think of this function as
	 * a way to enforce the required security context in your data sink. Directives use {@link
	 * ng.$sce#parseAs $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs
	 * the {@link ng.$sce#getTrusted $sce.getTrusted} behind the scenes on non-constant literals. Also,
	 * when binding without directives, AngularJS will understand the context of your bindings
	 * automatically.
	 *
	 * As an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link
	 * ng.$sce#parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly
	 * simplified):
	 *
	 * ```
	 * var ngBindHtmlDirective = ['$sce', function($sce) {
	 *   return function(scope, element, attr) {
	 *     scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {
	 *       element.html(value || '');
	 *     });
	 *   };
	 * }];
	 * ```
	 *
	 * ## Impact on loading templates
	 *
	 * This applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as
	 * `templateUrl`'s specified by {@link guide/directive directives}.
	 *
	 * By default, Angular only loads templates from the same domain and protocol as the application
	 * document.  This is done by calling {@link ng.$sce#getTrustedResourceUrl
	 * $sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or
	 * protocols, you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist
	 * them} or {@link ng.$sce#trustAsResourceUrl wrap it} into a trusted value.
	 *
	 * *Please note*:
	 * The browser's
	 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
	 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
	 * policy apply in addition to this and may further restrict whether the template is successfully
	 * loaded.  This means that without the right CORS policy, loading templates from a different domain
	 * won't work on all browsers.  Also, loading templates from `file://` URL does not work on some
	 * browsers.
	 *
	 * ## This feels like too much overhead
	 *
	 * It's important to remember that SCE only applies to interpolation expressions.
	 *
	 * If your expressions are constant literals, they're automatically trusted and you don't need to
	 * call `$sce.trustAs` on them (e.g.
	 * `<div ng-bind-html="'<b>implicitly trusted</b>'"></div>`) just works. The `$sceDelegate` will
	 * also use the `$sanitize` service if it is available when binding untrusted values to
	 * `$sce.HTML` context. AngularJS provides an implementation in `angular-sanitize.js`, and if you
	 * wish to use it, you will also need to depend on the {@link ngSanitize `ngSanitize`} module in
	 * your application.
	 *
	 * The included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load
	 * templates in `ng-include` from your application's domain without having to even know about SCE.
	 * It blocks loading templates from other domains or loading templates over http from an https
	 * served document.  You can change these by setting your own custom {@link
	 * ng.$sceDelegateProvider#resourceUrlWhitelist whitelists} and {@link
	 * ng.$sceDelegateProvider#resourceUrlBlacklist blacklists} for matching such URLs.
	 *
	 * This significantly reduces the overhead.  It is far easier to pay the small overhead and have an
	 * application that's secure and can be audited to verify that with much more ease than bolting
	 * security onto an application later.
	 *
	 * <a name="contexts"></a>
	 * ## What trusted context types are supported?
	 *
	 * | Context             | Notes          |
	 * |---------------------|----------------|
	 * | `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. If an unsafe value is encountered, and the {@link ngSanitize.$sanitize $sanitize} service is available (implemented by the {@link ngSanitize ngSanitize} module) this will sanitize the value instead of throwing an error. |
	 * | `$sce.CSS`          | For CSS that's safe to source into the application.  Currently, no bindings require this context. Feel free to use it in your own directives. |
	 * | `$sce.URL`          | For URLs that are safe to follow as links.  Currently unused (`<a href=`, `<img src=`, and some others sanitize their urls and don't constitute an SCE context.) |
	 * | `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG`, `VIDEO`, `AUDIO`, `SOURCE`, and `TRACK` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` does (it's not just the URL that matters, but also what is at the end of it), and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` are required. |
	 * | `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently, no bindings require this context.  Feel free to use it in your own directives. |
	 *
	 *
	 * Be aware that `a[href]` and `img[src]` automatically sanitize their URLs and do not pass them
	 * through {@link ng.$sce#getTrusted $sce.getTrusted}. There's no CSS-, URL-, or JS-context bindings
	 * in AngularJS currently, so their corresponding `$sce.trustAs` functions aren't useful yet. This
	 * might evolve.
	 *
	 * ## Format of items in {@link ng.$sceDelegateProvider#resourceUrlWhitelist resourceUrlWhitelist}/{@link ng.$sceDelegateProvider#resourceUrlBlacklist Blacklist} <a name="resourceUrlPatternItem"></a>
	 *
	 *  Each element in these arrays must be one of the following:
	 *
	 *  - **'self'**
	 *    - The special **string**, `'self'`, can be used to match against all URLs of the **same
	 *      domain** as the application document using the **same protocol**.
	 *  - **String** (except the special value `'self'`)
	 *    - The string is matched against the full *normalized / absolute URL* of the resource
	 *      being tested (substring matches are not good enough.)
	 *    - There are exactly **two wildcard sequences** - `*` and `**`.  All other characters
	 *      match themselves.
	 *    - `*`: matches zero or more occurrences of any character other than one of the following 6
	 *      characters: '`:`', '`/`', '`.`', '`?`', '`&`' and '`;`'.  It's a useful wildcard for use
	 *      in a whitelist.
	 *    - `**`: matches zero or more occurrences of *any* character.  As such, it's not
	 *      appropriate for use in a scheme, domain, etc. as it would match too much.  (e.g.
	 *      http://**.example.com/ would match http://evil.com/?ignore=.example.com/ and that might
	 *      not have been the intention.)  Its usage at the very end of the path is ok.  (e.g.
	 *      http://foo.example.com/templates/**).
	 *  - **RegExp** (*see caveat below*)
	 *    - *Caveat*:  While regular expressions are powerful and offer great flexibility,  their syntax
	 *      (and all the inevitable escaping) makes them *harder to maintain*.  It's easy to
	 *      accidentally introduce a bug when one updates a complex expression (imho, all regexes should
	 *      have good test coverage).  For instance, the use of `.` in the regex is correct only in a
	 *      small number of cases.  A `.` character in the regex used when matching the scheme or a
	 *      subdomain could be matched against a `:` or literal `.` that was likely not intended.   It
	 *      is highly recommended to use the string patterns and only fall back to regular expressions
	 *      as a last resort.
	 *    - The regular expression must be an instance of RegExp (i.e. not a string.)  It is
	 *      matched against the **entire** *normalized / absolute URL* of the resource being tested
	 *      (even when the RegExp did not have the `^` and `$` codes.)  In addition, any flags
	 *      present on the RegExp (such as multiline, global, ignoreCase) are ignored.
	 *    - If you are generating your JavaScript from some other templating engine (not
	 *      recommended, e.g. in issue [#4006](https://github.com/angular/angular.js/issues/4006)),
	 *      remember to escape your regular expression (and be aware that you might need more than
	 *      one level of escaping depending on your templating engine and the way you interpolated
	 *      the value.)  Do make use of your platform's escaping mechanism as it might be good
	 *      enough before coding your own.  E.g. Ruby has
	 *      [Regexp.escape(str)](http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape)
	 *      and Python has [re.escape](http://docs.python.org/library/re.html#re.escape).
	 *      Javascript lacks a similar built in function for escaping.  Take a look at Google
	 *      Closure library's [goog.string.regExpEscape(s)](
	 *      http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962).
	 *
	 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} for an example.
	 *
	 * ## Show me an example using SCE.
	 *
	 * <example module="mySceApp" deps="angular-sanitize.js" name="sce-service">
	 * <file name="index.html">
	 *   <div ng-controller="AppController as myCtrl">
	 *     <i ng-bind-html="myCtrl.explicitlyTrustedHtml" id="explicitlyTrustedHtml"></i><br><br>
	 *     <b>User comments</b><br>
	 *     By default, HTML that isn't explicitly trusted (e.g. Alice's comment) is sanitized when
	 *     $sanitize is available.  If $sanitize isn't available, this results in an error instead of an
	 *     exploit.
	 *     <div class="well">
	 *       <div ng-repeat="userComment in myCtrl.userComments">
	 *         <b>{{userComment.name}}</b>:
	 *         <span ng-bind-html="userComment.htmlComment" class="htmlComment"></span>
	 *         <br>
	 *       </div>
	 *     </div>
	 *   </div>
	 * </file>
	 *
	 * <file name="script.js">
	 *   angular.module('mySceApp', ['ngSanitize'])
	 *     .controller('AppController', ['$http', '$templateCache', '$sce',
	 *       function AppController($http, $templateCache, $sce) {
	 *         var self = this;
	 *         $http.get('test_data.json', {cache: $templateCache}).then(function(response) {
	 *           self.userComments = response.data;
	 *         });
	 *         self.explicitlyTrustedHtml = $sce.trustAsHtml(
	 *             '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
	 *             'sanitization.&quot;">Hover over this text.</span>');
	 *       }]);
	 * </file>
	 *
	 * <file name="test_data.json">
	 * [
	 *   { "name": "Alice",
	 *     "htmlComment":
	 *         "<span onmouseover='this.textContent=\"PWN3D!\"'>Is <i>anyone</i> reading this?</span>"
	 *   },
	 *   { "name": "Bob",
	 *     "htmlComment": "<i>Yes!</i>  Am I the only other one?"
	 *   }
	 * ]
	 * </file>
	 *
	 * <file name="protractor.js" type="protractor">
	 *   describe('SCE doc demo', function() {
	 *     it('should sanitize untrusted values', function() {
	 *       expect(element.all(by.css('.htmlComment')).first().getAttribute('innerHTML'))
	 *           .toBe('<span>Is <i>anyone</i> reading this?</span>');
	 *     });
	 *
	 *     it('should NOT sanitize explicitly trusted values', function() {
	 *       expect(element(by.id('explicitlyTrustedHtml')).getAttribute('innerHTML')).toBe(
	 *           '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
	 *           'sanitization.&quot;">Hover over this text.</span>');
	 *     });
	 *   });
	 * </file>
	 * </example>
	 *
	 *
	 *
	 * ## Can I disable SCE completely?
	 *
	 * Yes, you can.  However, this is strongly discouraged.  SCE gives you a lot of security benefits
	 * for little coding overhead.  It will be much harder to take an SCE disabled application and
	 * either secure it on your own or enable SCE at a later stage.  It might make sense to disable SCE
	 * for cases where you have a lot of existing code that was written before SCE was introduced and
	 * you're migrating them a module at a time. Also do note that this is an app-wide setting, so if
	 * you are writing a library, you will cause security bugs applications using it.
	 *
	 * That said, here's how you can completely disable SCE:
	 *
	 * ```
	 * angular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {
	 *   // Completely disable SCE.  For demonstration purposes only!
	 *   // Do not use in new projects or libraries.
	 *   $sceProvider.enabled(false);
	 * });
	 * ```
	 *
	 */function $SceProvider(){var enabled=true;/**
	   * @ngdoc method
	   * @name $sceProvider#enabled
	   * @kind function
	   *
	   * @param {boolean=} value If provided, then enables/disables SCE application-wide.
	   * @return {boolean} True if SCE is enabled, false otherwise.
	   *
	   * @description
	   * Enables/disables SCE and returns the current value.
	   */this.enabled=function(value){if(arguments.length){enabled=!!value;}return enabled;};/* Design notes on the default implementation for SCE.
	   *
	   * The API contract for the SCE delegate
	   * -------------------------------------
	   * The SCE delegate object must provide the following 3 methods:
	   *
	   * - trustAs(contextEnum, value)
	   *     This method is used to tell the SCE service that the provided value is OK to use in the
	   *     contexts specified by contextEnum.  It must return an object that will be accepted by
	   *     getTrusted() for a compatible contextEnum and return this value.
	   *
	   * - valueOf(value)
	   *     For values that were not produced by trustAs(), return them as is.  For values that were
	   *     produced by trustAs(), return the corresponding input value to trustAs.  Basically, if
	   *     trustAs is wrapping the given values into some type, this operation unwraps it when given
	   *     such a value.
	   *
	   * - getTrusted(contextEnum, value)
	   *     This function should return the a value that is safe to use in the context specified by
	   *     contextEnum or throw and exception otherwise.
	   *
	   * NOTE: This contract deliberately does NOT state that values returned by trustAs() must be
	   * opaque or wrapped in some holder object.  That happens to be an implementation detail.  For
	   * instance, an implementation could maintain a registry of all trusted objects by context.  In
	   * such a case, trustAs() would return the same object that was passed in.  getTrusted() would
	   * return the same object passed in if it was found in the registry under a compatible context or
	   * throw an exception otherwise.  An implementation might only wrap values some of the time based
	   * on some criteria.  getTrusted() might return a value and not throw an exception for special
	   * constants or objects even if not wrapped.  All such implementations fulfill this contract.
	   *
	   *
	   * A note on the inheritance model for SCE contexts
	   * ------------------------------------------------
	   * I've used inheritance and made RESOURCE_URL wrapped types a subtype of URL wrapped types.  This
	   * is purely an implementation details.
	   *
	   * The contract is simply this:
	   *
	   *     getTrusted($sce.RESOURCE_URL, value) succeeding implies that getTrusted($sce.URL, value)
	   *     will also succeed.
	   *
	   * Inheritance happens to capture this in a natural way. In some future, we may not use
	   * inheritance anymore. That is OK because no code outside of sce.js and sceSpecs.js would need to
	   * be aware of this detail.
	   */this.$get=['$parse','$sceDelegate',function($parse,$sceDelegate){// Support: IE 9-11 only
	// Prereq: Ensure that we're not running in IE<11 quirks mode.  In that mode, IE < 11 allow
	// the "expression(javascript expression)" syntax which is insecure.
	if(enabled&&msie<8){throw $sceMinErr('iequirks','Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks '+'mode.  You can fix this by adding the text <!doctype html> to the top of your HTML '+'document.  See http://docs.angularjs.org/api/ng.$sce for more information.');}var sce=shallowCopy(SCE_CONTEXTS);/**
	     * @ngdoc method
	     * @name $sce#isEnabled
	     * @kind function
	     *
	     * @return {Boolean} True if SCE is enabled, false otherwise.  If you want to set the value, you
	     *     have to do it at module config time on {@link ng.$sceProvider $sceProvider}.
	     *
	     * @description
	     * Returns a boolean indicating if SCE is enabled.
	     */sce.isEnabled=function(){return enabled;};sce.trustAs=$sceDelegate.trustAs;sce.getTrusted=$sceDelegate.getTrusted;sce.valueOf=$sceDelegate.valueOf;if(!enabled){sce.trustAs=sce.getTrusted=function(type,value){return value;};sce.valueOf=identity;}/**
	     * @ngdoc method
	     * @name $sce#parseAs
	     *
	     * @description
	     * Converts Angular {@link guide/expression expression} into a function.  This is like {@link
	     * ng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it
	     * wraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,
	     * *result*)}
	     *
	     * @param {string} type The SCE context in which this result will be used.
	     * @param {string} expression String expression to compile.
	     * @return {function(context, locals)} A function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the
	     *      strings are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values
	     *      in `context`.
	     */sce.parseAs=function sceParseAs(type,expr){var parsed=$parse(expr);if(parsed.literal&&parsed.constant){return parsed;}else{return $parse(expr,function(value){return sce.getTrusted(type,value);});}};/**
	     * @ngdoc method
	     * @name $sce#trustAs
	     *
	     * @description
	     * Delegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}. As such, returns a
	     * wrapped object that represents your value, and the trust you have in its safety for the given
	     * context. AngularJS can then use that value as-is in bindings of the specified secure context.
	     * This is used in bindings for `ng-bind-html`, `ng-include`, and most `src` attribute
	     * interpolations. See {@link ng.$sce $sce} for strict contextual escaping.
	     *
	     * @param {string} type The context in which this value is safe for use, e.g. `$sce.URL`,
	     *     `$sce.RESOURCE_URL`, `$sce.HTML`, `$sce.JS` or `$sce.CSS`.
	     *
	     * @param {*} value The value that that should be considered trusted.
	     * @return {*} A wrapped version of value that can be used as a trusted variant of your `value`
	     *     in the context you specified.
	     *//**
	     * @ngdoc method
	     * @name $sce#trustAsHtml
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsHtml(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}
	     *
	     * @param {*} value The value to mark as trusted for `$sce.HTML` context.
	     * @return {*} A wrapped version of value that can be used as a trusted variant of your `value`
	     *     in `$sce.HTML` context (like `ng-bind-html`).
	     *//**
	     * @ngdoc method
	     * @name $sce#trustAsCss
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsCss(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.CSS, value)`}
	     *
	     * @param {*} value The value to mark as trusted for `$sce.CSS` context.
	     * @return {*} A wrapped version of value that can be used as a trusted variant
	     *     of your `value` in `$sce.CSS` context. This context is currently unused, so there are
	     *     almost no reasons to use this function so far.
	     *//**
	     * @ngdoc method
	     * @name $sce#trustAsUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsUrl(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}
	     *
	     * @param {*} value The value to mark as trusted for `$sce.URL` context.
	     * @return {*} A wrapped version of value that can be used as a trusted variant of your `value`
	     *     in `$sce.URL` context. That context is currently unused, so there are almost no reasons
	     *     to use this function so far.
	     *//**
	     * @ngdoc method
	     * @name $sce#trustAsResourceUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsResourceUrl(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}
	     *
	     * @param {*} value The value to mark as trusted for `$sce.RESOURCE_URL` context.
	     * @return {*} A wrapped version of value that can be used as a trusted variant of your `value`
	     *     in `$sce.RESOURCE_URL` context (template URLs in `ng-include`, most `src` attribute
	     *     bindings, ...)
	     *//**
	     * @ngdoc method
	     * @name $sce#trustAsJs
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsJs(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}
	     *
	     * @param {*} value The value to mark as trusted for `$sce.JS` context.
	     * @return {*} A wrapped version of value that can be used as a trusted variant of your `value`
	     *     in `$sce.JS` context. That context is currently unused, so there are almost no reasons to
	     *     use this function so far.
	     *//**
	     * @ngdoc method
	     * @name $sce#getTrusted
	     *
	     * @description
	     * Delegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such,
	     * takes any input, and either returns a value that's safe to use in the specified context,
	     * or throws an exception. This function is aware of trusted values created by the `trustAs`
	     * function and its shorthands, and when contexts are appropriate, returns the unwrapped value
	     * as-is. Finally, this function can also throw when there is no way to turn `maybeTrusted` in a
	     * safe value (e.g., no sanitization is available or possible.)
	     *
	     * @param {string} type The context in which this value is to be used.
	     * @param {*} maybeTrusted The result of a prior {@link ng.$sce#trustAs
	     *     `$sce.trustAs`} call, or anything else (which will not be considered trusted.)
	     * @return {*} A version of the value that's safe to use in the given context, or throws an
	     *     exception if this is impossible.
	     *//**
	     * @ngdoc method
	     * @name $sce#getTrustedHtml
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedHtml(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @return {*} The return value of `$sce.getTrusted($sce.HTML, value)`
	     *//**
	     * @ngdoc method
	     * @name $sce#getTrustedCss
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedCss(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @return {*} The return value of `$sce.getTrusted($sce.CSS, value)`
	     *//**
	     * @ngdoc method
	     * @name $sce#getTrustedUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedUrl(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @return {*} The return value of `$sce.getTrusted($sce.URL, value)`
	     *//**
	     * @ngdoc method
	     * @name $sce#getTrustedResourceUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedResourceUrl(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}
	     *
	     * @param {*} value The value to pass to `$sceDelegate.getTrusted`.
	     * @return {*} The return value of `$sce.getTrusted($sce.RESOURCE_URL, value)`
	     *//**
	     * @ngdoc method
	     * @name $sce#getTrustedJs
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedJs(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @return {*} The return value of `$sce.getTrusted($sce.JS, value)`
	     *//**
	     * @ngdoc method
	     * @name $sce#parseAsHtml
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsHtml(expression string)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.HTML, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @return {function(context, locals)} A function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the
	     *      strings are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values
	     *      in `context`.
	     *//**
	     * @ngdoc method
	     * @name $sce#parseAsCss
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsCss(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.CSS, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @return {function(context, locals)} A function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the
	     *      strings are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values
	     *      in `context`.
	     *//**
	     * @ngdoc method
	     * @name $sce#parseAsUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsUrl(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.URL, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @return {function(context, locals)} A function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the
	     *      strings are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values
	     *      in `context`.
	     *//**
	     * @ngdoc method
	     * @name $sce#parseAsResourceUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsResourceUrl(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.RESOURCE_URL, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @return {function(context, locals)} A function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the
	     *      strings are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values
	     *      in `context`.
	     *//**
	     * @ngdoc method
	     * @name $sce#parseAsJs
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsJs(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.JS, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @return {function(context, locals)} A function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the
	     *      strings are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values
	     *      in `context`.
	     */// Shorthand delegations.
	var parse=sce.parseAs,getTrusted=sce.getTrusted,trustAs=sce.trustAs;forEach(SCE_CONTEXTS,function(enumValue,name){var lName=lowercase(name);sce[snakeToCamel('parse_as_'+lName)]=function(expr){return parse(enumValue,expr);};sce[snakeToCamel('get_trusted_'+lName)]=function(value){return getTrusted(enumValue,value);};sce[snakeToCamel('trust_as_'+lName)]=function(value){return trustAs(enumValue,value);};});return sce;}];}/* exported $SnifferProvider *//**
	 * !!! This is an undocumented "private" service !!!
	 *
	 * @name $sniffer
	 * @requires $window
	 * @requires $document
	 * @this
	 *
	 * @property {boolean} history Does the browser support html5 history api ?
	 * @property {boolean} transitions Does the browser support CSS transition events ?
	 * @property {boolean} animations Does the browser support CSS animation events ?
	 *
	 * @description
	 * This is very simple implementation of testing browser's features.
	 */function $SnifferProvider(){this.$get=['$window','$document',function($window,$document){var eventSupport={},// Chrome Packaged Apps are not allowed to access `history.pushState`.
	// If not sandboxed, they can be detected by the presence of `chrome.app.runtime`
	// (see https://developer.chrome.com/apps/api_index). If sandboxed, they can be detected by
	// the presence of an extension runtime ID and the absence of other Chrome runtime APIs
	// (see https://developer.chrome.com/apps/manifest/sandbox).
	// (NW.js apps have access to Chrome APIs, but do support `history`.)
	isNw=$window.nw&&$window.nw.process,isChromePackagedApp=!isNw&&$window.chrome&&($window.chrome.app&&$window.chrome.app.runtime||!$window.chrome.app&&$window.chrome.runtime&&$window.chrome.runtime.id),hasHistoryPushState=!isChromePackagedApp&&$window.history&&$window.history.pushState,android=toInt((/android (\d+)/.exec(lowercase(($window.navigator||{}).userAgent))||[])[1]),boxee=/Boxee/i.test(($window.navigator||{}).userAgent),document=$document[0]||{},bodyStyle=document.body&&document.body.style,transitions=false,animations=false;if(bodyStyle){// Support: Android <5, Blackberry Browser 10, default Chrome in Android 4.4.x
	// Mentioned browsers need a -webkit- prefix for transitions & animations.
	transitions=!!('transition'in bodyStyle||'webkitTransition'in bodyStyle);animations=!!('animation'in bodyStyle||'webkitAnimation'in bodyStyle);}return{// Android has history.pushState, but it does not update location correctly
	// so let's not use the history API at all.
	// http://code.google.com/p/android/issues/detail?id=17471
	// https://github.com/angular/angular.js/issues/904
	// older webkit browser (533.9) on Boxee box has exactly the same problem as Android has
	// so let's not use the history API also
	// We are purposefully using `!(android < 4)` to cover the case when `android` is undefined
	history:!!(hasHistoryPushState&&!(android<4)&&!boxee),hasEvent:function hasEvent(event){// Support: IE 9-11 only
	// IE9 implements 'input' event it's so fubared that we rather pretend that it doesn't have
	// it. In particular the event is not fired when backspace or delete key are pressed or
	// when cut operation is performed.
	// IE10+ implements 'input' event but it erroneously fires under various situations,
	// e.g. when placeholder changes, or a form is focused.
	if(event==='input'&&msie)return false;if(isUndefined(eventSupport[event])){var divElm=document.createElement('div');eventSupport[event]='on'+event in divElm;}return eventSupport[event];},csp:csp(),transitions:transitions,animations:animations,android:android};}];}var $templateRequestMinErr=minErr('$compile');/**
	 * @ngdoc provider
	 * @name $templateRequestProvider
	 * @this
	 *
	 * @description
	 * Used to configure the options passed to the {@link $http} service when making a template request.
	 *
	 * For example, it can be used for specifying the "Accept" header that is sent to the server, when
	 * requesting a template.
	 */function $TemplateRequestProvider(){var httpOptions;/**
	   * @ngdoc method
	   * @name $templateRequestProvider#httpOptions
	   * @description
	   * The options to be passed to the {@link $http} service when making the request.
	   * You can use this to override options such as the "Accept" header for template requests.
	   *
	   * The {@link $templateRequest} will set the `cache` and the `transformResponse` properties of the
	   * options if not overridden here.
	   *
	   * @param {string=} value new value for the {@link $http} options.
	   * @returns {string|self} Returns the {@link $http} options when used as getter and self if used as setter.
	   */this.httpOptions=function(val){if(val){httpOptions=val;return this;}return httpOptions;};/**
	   * @ngdoc service
	   * @name $templateRequest
	   *
	   * @description
	   * The `$templateRequest` service runs security checks then downloads the provided template using
	   * `$http` and, upon success, stores the contents inside of `$templateCache`. If the HTTP request
	   * fails or the response data of the HTTP request is empty, a `$compile` error will be thrown (the
	   * exception can be thwarted by setting the 2nd parameter of the function to true). Note that the
	   * contents of `$templateCache` are trusted, so the call to `$sce.getTrustedUrl(tpl)` is omitted
	   * when `tpl` is of type string and `$templateCache` has the matching entry.
	   *
	   * If you want to pass custom options to the `$http` service, such as setting the Accept header you
	   * can configure this via {@link $templateRequestProvider#httpOptions}.
	   *
	   * @param {string|TrustedResourceUrl} tpl The HTTP request template URL
	   * @param {boolean=} ignoreRequestError Whether or not to ignore the exception when the request fails or the template is empty
	   *
	   * @return {Promise} a promise for the HTTP response data of the given URL.
	   *
	   * @property {number} totalPendingRequests total amount of pending template requests being downloaded.
	   */this.$get=['$exceptionHandler','$templateCache','$http','$q','$sce',function($exceptionHandler,$templateCache,$http,$q,$sce){function handleRequestFn(tpl,ignoreRequestError){handleRequestFn.totalPendingRequests++;// We consider the template cache holds only trusted templates, so
	// there's no need to go through whitelisting again for keys that already
	// are included in there. This also makes Angular accept any script
	// directive, no matter its name. However, we still need to unwrap trusted
	// types.
	if(!isString(tpl)||isUndefined($templateCache.get(tpl))){tpl=$sce.getTrustedResourceUrl(tpl);}var transformResponse=$http.defaults&&$http.defaults.transformResponse;if(isArray(transformResponse)){transformResponse=transformResponse.filter(function(transformer){return transformer!==defaultHttpResponseTransform;});}else if(transformResponse===defaultHttpResponseTransform){transformResponse=null;}return $http.get(tpl,extend({cache:$templateCache,transformResponse:transformResponse},httpOptions)).finally(function(){handleRequestFn.totalPendingRequests--;}).then(function(response){$templateCache.put(tpl,response.data);return response.data;},handleError);function handleError(resp){if(!ignoreRequestError){resp=$templateRequestMinErr('tpload','Failed to load template: {0} (HTTP status: {1} {2})',tpl,resp.status,resp.statusText);$exceptionHandler(resp);}return $q.reject(resp);}}handleRequestFn.totalPendingRequests=0;return handleRequestFn;}];}/** @this */function $$TestabilityProvider(){this.$get=['$rootScope','$browser','$location',function($rootScope,$browser,$location){/**
	     * @name $testability
	     *
	     * @description
	     * The private $$testability service provides a collection of methods for use when debugging
	     * or by automated test and debugging tools.
	     */var testability={};/**
	     * @name $$testability#findBindings
	     *
	     * @description
	     * Returns an array of elements that are bound (via ng-bind or {{}})
	     * to expressions matching the input.
	     *
	     * @param {Element} element The element root to search from.
	     * @param {string} expression The binding expression to match.
	     * @param {boolean} opt_exactMatch If true, only returns exact matches
	     *     for the expression. Filters and whitespace are ignored.
	     */testability.findBindings=function(element,expression,opt_exactMatch){var bindings=element.getElementsByClassName('ng-binding');var matches=[];forEach(bindings,function(binding){var dataBinding=angular.element(binding).data('$binding');if(dataBinding){forEach(dataBinding,function(bindingName){if(opt_exactMatch){var matcher=new RegExp('(^|\\s)'+escapeForRegexp(expression)+'(\\s|\\||$)');if(matcher.test(bindingName)){matches.push(binding);}}else{if(bindingName.indexOf(expression)!==-1){matches.push(binding);}}});}});return matches;};/**
	     * @name $$testability#findModels
	     *
	     * @description
	     * Returns an array of elements that are two-way found via ng-model to
	     * expressions matching the input.
	     *
	     * @param {Element} element The element root to search from.
	     * @param {string} expression The model expression to match.
	     * @param {boolean} opt_exactMatch If true, only returns exact matches
	     *     for the expression.
	     */testability.findModels=function(element,expression,opt_exactMatch){var prefixes=['ng-','data-ng-','ng\\:'];for(var p=0;p<prefixes.length;++p){var attributeEquals=opt_exactMatch?'=':'*=';var selector='['+prefixes[p]+'model'+attributeEquals+'"'+expression+'"]';var elements=element.querySelectorAll(selector);if(elements.length){return elements;}}};/**
	     * @name $$testability#getLocation
	     *
	     * @description
	     * Shortcut for getting the location in a browser agnostic way. Returns
	     *     the path, search, and hash. (e.g. /path?a=b#hash)
	     */testability.getLocation=function(){return $location.url();};/**
	     * @name $$testability#setLocation
	     *
	     * @description
	     * Shortcut for navigating to a location without doing a full page reload.
	     *
	     * @param {string} url The location url (path, search and hash,
	     *     e.g. /path?a=b#hash) to go to.
	     */testability.setLocation=function(url){if(url!==$location.url()){$location.url(url);$rootScope.$digest();}};/**
	     * @name $$testability#whenStable
	     *
	     * @description
	     * Calls the callback when $timeout and $http requests are completed.
	     *
	     * @param {function} callback
	     */testability.whenStable=function(callback){$browser.notifyWhenNoOutstandingRequests(callback);};return testability;}];}/** @this */function $TimeoutProvider(){this.$get=['$rootScope','$browser','$q','$$q','$exceptionHandler',function($rootScope,$browser,$q,$$q,$exceptionHandler){var deferreds={};/**
	      * @ngdoc service
	      * @name $timeout
	      *
	      * @description
	      * Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch
	      * block and delegates any exceptions to
	      * {@link ng.$exceptionHandler $exceptionHandler} service.
	      *
	      * The return value of calling `$timeout` is a promise, which will be resolved when
	      * the delay has passed and the timeout function, if provided, is executed.
	      *
	      * To cancel a timeout request, call `$timeout.cancel(promise)`.
	      *
	      * In tests you can use {@link ngMock.$timeout `$timeout.flush()`} to
	      * synchronously flush the queue of deferred functions.
	      *
	      * If you only want a promise that will be resolved after some specified delay
	      * then you can call `$timeout` without the `fn` function.
	      *
	      * @param {function()=} fn A function, whose execution should be delayed.
	      * @param {number=} [delay=0] Delay in milliseconds.
	      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
	      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
	      * @param {...*=} Pass additional parameters to the executed function.
	      * @returns {Promise} Promise that will be resolved when the timeout is reached. The promise
	      *   will be resolved with the return value of the `fn` function.
	      *
	      */function timeout(fn,delay,invokeApply){if(!isFunction(fn)){invokeApply=delay;delay=fn;fn=noop;}var args=sliceArgs(arguments,3),skipApply=isDefined(invokeApply)&&!invokeApply,deferred=(skipApply?$$q:$q).defer(),promise=deferred.promise,timeoutId;timeoutId=$browser.defer(function(){try{deferred.resolve(fn.apply(null,args));}catch(e){deferred.reject(e);$exceptionHandler(e);}finally{delete deferreds[promise.$$timeoutId];}if(!skipApply)$rootScope.$apply();},delay);promise.$$timeoutId=timeoutId;deferreds[timeoutId]=deferred;return promise;}/**
	      * @ngdoc method
	      * @name $timeout#cancel
	      *
	      * @description
	      * Cancels a task associated with the `promise`. As a result of this, the promise will be
	      * resolved with a rejection.
	      *
	      * @param {Promise=} promise Promise returned by the `$timeout` function.
	      * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
	      *   canceled.
	      */timeout.cancel=function(promise){if(promise&&promise.$$timeoutId in deferreds){// Timeout cancels should not report an unhandled promise.
	deferreds[promise.$$timeoutId].promise.catch(noop);deferreds[promise.$$timeoutId].reject('canceled');delete deferreds[promise.$$timeoutId];return $browser.defer.cancel(promise.$$timeoutId);}return false;};return timeout;}];}// NOTE:  The usage of window and document instead of $window and $document here is
	// deliberate.  This service depends on the specific behavior of anchor nodes created by the
	// browser (resolving and parsing URLs) that is unlikely to be provided by mock objects and
	// cause us to break tests.  In addition, when the browser resolves a URL for XHR, it
	// doesn't know about mocked locations and resolves URLs to the real document - which is
	// exactly the behavior needed here.  There is little value is mocking these out for this
	// service.
	var urlParsingNode=window.document.createElement('a');var originUrl=urlResolve(window.location.href);/**
	 *
	 * Implementation Notes for non-IE browsers
	 * ----------------------------------------
	 * Assigning a URL to the href property of an anchor DOM node, even one attached to the DOM,
	 * results both in the normalizing and parsing of the URL.  Normalizing means that a relative
	 * URL will be resolved into an absolute URL in the context of the application document.
	 * Parsing means that the anchor node's host, hostname, protocol, port, pathname and related
	 * properties are all populated to reflect the normalized URL.  This approach has wide
	 * compatibility - Safari 1+, Mozilla 1+ etc.  See
	 * http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
	 *
	 * Implementation Notes for IE
	 * ---------------------------
	 * IE <= 10 normalizes the URL when assigned to the anchor node similar to the other
	 * browsers.  However, the parsed components will not be set if the URL assigned did not specify
	 * them.  (e.g. if you assign a.href = "foo", then a.protocol, a.host, etc. will be empty.)  We
	 * work around that by performing the parsing in a 2nd step by taking a previously normalized
	 * URL (e.g. by assigning to a.href) and assigning it a.href again.  This correctly populates the
	 * properties such as protocol, hostname, port, etc.
	 *
	 * References:
	 *   http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement
	 *   http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
	 *   http://url.spec.whatwg.org/#urlutils
	 *   https://github.com/angular/angular.js/pull/2902
	 *   http://james.padolsey.com/javascript/parsing-urls-with-the-dom/
	 *
	 * @kind function
	 * @param {string} url The URL to be parsed.
	 * @description Normalizes and parses a URL.
	 * @returns {object} Returns the normalized URL as a dictionary.
	 *
	 *   | member name   | Description    |
	 *   |---------------|----------------|
	 *   | href          | A normalized version of the provided URL if it was not an absolute URL |
	 *   | protocol      | The protocol including the trailing colon                              |
	 *   | host          | The host and port (if the port is non-default) of the normalizedUrl    |
	 *   | search        | The search params, minus the question mark                             |
	 *   | hash          | The hash string, minus the hash symbol
	 *   | hostname      | The hostname
	 *   | port          | The port, without ":"
	 *   | pathname      | The pathname, beginning with "/"
	 *
	 */function urlResolve(url){var href=url;// Support: IE 9-11 only
	if(msie){// Normalize before parse.  Refer Implementation Notes on why this is
	// done in two steps on IE.
	urlParsingNode.setAttribute('href',href);href=urlParsingNode.href;}urlParsingNode.setAttribute('href',href);// urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
	return{href:urlParsingNode.href,protocol:urlParsingNode.protocol?urlParsingNode.protocol.replace(/:$/,''):'',host:urlParsingNode.host,search:urlParsingNode.search?urlParsingNode.search.replace(/^\?/,''):'',hash:urlParsingNode.hash?urlParsingNode.hash.replace(/^#/,''):'',hostname:urlParsingNode.hostname,port:urlParsingNode.port,pathname:urlParsingNode.pathname.charAt(0)==='/'?urlParsingNode.pathname:'/'+urlParsingNode.pathname};}/**
	 * Parse a request URL and determine whether this is a same-origin request as the application document.
	 *
	 * @param {string|object} requestUrl The url of the request as a string that will be resolved
	 * or a parsed URL object.
	 * @returns {boolean} Whether the request is for the same origin as the application document.
	 */function urlIsSameOrigin(requestUrl){var parsed=isString(requestUrl)?urlResolve(requestUrl):requestUrl;return parsed.protocol===originUrl.protocol&&parsed.host===originUrl.host;}/**
	 * @ngdoc service
	 * @name $window
	 * @this
	 *
	 * @description
	 * A reference to the browser's `window` object. While `window`
	 * is globally available in JavaScript, it causes testability problems, because
	 * it is a global variable. In angular we always refer to it through the
	 * `$window` service, so it may be overridden, removed or mocked for testing.
	 *
	 * Expressions, like the one defined for the `ngClick` directive in the example
	 * below, are evaluated with respect to the current scope.  Therefore, there is
	 * no risk of inadvertently coding in a dependency on a global value in such an
	 * expression.
	 *
	 * @example
	   <example module="windowExample" name="window-service">
	     <file name="index.html">
	       <script>
	         angular.module('windowExample', [])
	           .controller('ExampleController', ['$scope', '$window', function($scope, $window) {
	             $scope.greeting = 'Hello, World!';
	             $scope.doGreeting = function(greeting) {
	               $window.alert(greeting);
	             };
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <input type="text" ng-model="greeting" aria-label="greeting" />
	         <button ng-click="doGreeting(greeting)">ALERT</button>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	      it('should display the greeting in the input box', function() {
	       element(by.model('greeting')).sendKeys('Hello, E2E Tests');
	       // If we click the button it will block the test runner
	       // element(':button').click();
	      });
	     </file>
	   </example>
	 */function $WindowProvider(){this.$get=valueFn(window);}/**
	 * @name $$cookieReader
	 * @requires $document
	 *
	 * @description
	 * This is a private service for reading cookies used by $http and ngCookies
	 *
	 * @return {Object} a key/value map of the current cookies
	 */function $$CookieReader($document){var rawDocument=$document[0]||{};var lastCookies={};var lastCookieString='';function safeGetCookie(rawDocument){try{return rawDocument.cookie||'';}catch(e){return'';}}function safeDecodeURIComponent(str){try{return decodeURIComponent(str);}catch(e){return str;}}return function(){var cookieArray,cookie,i,index,name;var currentCookieString=safeGetCookie(rawDocument);if(currentCookieString!==lastCookieString){lastCookieString=currentCookieString;cookieArray=lastCookieString.split('; ');lastCookies={};for(i=0;i<cookieArray.length;i++){cookie=cookieArray[i];index=cookie.indexOf('=');if(index>0){//ignore nameless cookies
	name=safeDecodeURIComponent(cookie.substring(0,index));// the first value that is seen for a cookie is the most
	// specific one.  values for the same cookie name that
	// follow are for less specific paths.
	if(isUndefined(lastCookies[name])){lastCookies[name]=safeDecodeURIComponent(cookie.substring(index+1));}}}}return lastCookies;};}$$CookieReader.$inject=['$document'];/** @this */function $$CookieReaderProvider(){this.$get=$$CookieReader;}/* global currencyFilter: true,
	 dateFilter: true,
	 filterFilter: true,
	 jsonFilter: true,
	 limitToFilter: true,
	 lowercaseFilter: true,
	 numberFilter: true,
	 orderByFilter: true,
	 uppercaseFilter: true,
	 *//**
	 * @ngdoc provider
	 * @name $filterProvider
	 * @description
	 *
	 * Filters are just functions which transform input to an output. However filters need to be
	 * Dependency Injected. To achieve this a filter definition consists of a factory function which is
	 * annotated with dependencies and is responsible for creating a filter function.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
	 * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
	 * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
	 * (`myapp_subsection_filterx`).
	 * </div>
	 *
	 * ```js
	 *   // Filter registration
	 *   function MyModule($provide, $filterProvider) {
	 *     // create a service to demonstrate injection (not always needed)
	 *     $provide.value('greet', function(name){
	 *       return 'Hello ' + name + '!';
	 *     });
	 *
	 *     // register a filter factory which uses the
	 *     // greet service to demonstrate DI.
	 *     $filterProvider.register('greet', function(greet){
	 *       // return the filter function which uses the greet service
	 *       // to generate salutation
	 *       return function(text) {
	 *         // filters need to be forgiving so check input validity
	 *         return text && greet(text) || text;
	 *       };
	 *     });
	 *   }
	 * ```
	 *
	 * The filter function is registered with the `$injector` under the filter name suffix with
	 * `Filter`.
	 *
	 * ```js
	 *   it('should be the same instance', inject(
	 *     function($filterProvider) {
	 *       $filterProvider.register('reverse', function(){
	 *         return ...;
	 *       });
	 *     },
	 *     function($filter, reverseFilter) {
	 *       expect($filter('reverse')).toBe(reverseFilter);
	 *     });
	 * ```
	 *
	 *
	 * For more information about how angular filters work, and how to create your own filters, see
	 * {@link guide/filter Filters} in the Angular Developer Guide.
	 *//**
	 * @ngdoc service
	 * @name $filter
	 * @kind function
	 * @description
	 * Filters are used for formatting data displayed to the user.
	 *
	 * They can be used in view templates, controllers or services.Angular comes
	 * with a collection of [built-in filters](api/ng/filter), but it is easy to
	 * define your own as well.
	 *
	 * The general syntax in templates is as follows:
	 *
	 * ```html
	 * {{ expression [| filter_name[:parameter_value] ... ] }}
	 * ```
	 *
	 * @param {String} name Name of the filter function to retrieve
	 * @return {Function} the filter function
	 * @example
	   <example name="$filter" module="filterExample">
	     <file name="index.html">
	       <div ng-controller="MainCtrl">
	        <h3>{{ originalText }}</h3>
	        <h3>{{ filteredText }}</h3>
	       </div>
	     </file>
	
	     <file name="script.js">
	      angular.module('filterExample', [])
	      .controller('MainCtrl', function($scope, $filter) {
	        $scope.originalText = 'hello';
	        $scope.filteredText = $filter('uppercase')($scope.originalText);
	      });
	     </file>
	   </example>
	  */$FilterProvider.$inject=['$provide'];/** @this */function $FilterProvider($provide){var suffix='Filter';/**
	   * @ngdoc method
	   * @name $filterProvider#register
	   * @param {string|Object} name Name of the filter function, or an object map of filters where
	   *    the keys are the filter names and the values are the filter factories.
	   *
	   *    <div class="alert alert-warning">
	   *    **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
	   *    Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
	   *    your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
	   *    (`myapp_subsection_filterx`).
	   *    </div>
	    * @param {Function} factory If the first argument was a string, a factory function for the filter to be registered.
	   * @returns {Object} Registered filter instance, or if a map of filters was provided then a map
	   *    of the registered filter instances.
	   */function register(name,factory){if(isObject(name)){var filters={};forEach(name,function(filter,key){filters[key]=register(key,filter);});return filters;}else{return $provide.factory(name+suffix,factory);}}this.register=register;this.$get=['$injector',function($injector){return function(name){return $injector.get(name+suffix);};}];////////////////////////////////////////
	/* global
	    currencyFilter: false,
	    dateFilter: false,
	    filterFilter: false,
	    jsonFilter: false,
	    limitToFilter: false,
	    lowercaseFilter: false,
	    numberFilter: false,
	    orderByFilter: false,
	    uppercaseFilter: false
	  */register('currency',currencyFilter);register('date',dateFilter);register('filter',filterFilter);register('json',jsonFilter);register('limitTo',limitToFilter);register('lowercase',lowercaseFilter);register('number',numberFilter);register('orderBy',orderByFilter);register('uppercase',uppercaseFilter);}/**
	 * @ngdoc filter
	 * @name filter
	 * @kind function
	 *
	 * @description
	 * Selects a subset of items from `array` and returns it as a new array.
	 *
	 * @param {Array} array The source array.
	 * <div class="alert alert-info">
	 *   **Note**: If the array contains objects that reference themselves, filtering is not possible.
	 * </div>
	 * @param {string|Object|function()} expression The predicate to be used for selecting items from
	 *   `array`.
	 *
	 *   Can be one of:
	 *
	 *   - `string`: The string is used for matching against the contents of the `array`. All strings or
	 *     objects with string properties in `array` that match this string will be returned. This also
	 *     applies to nested object properties.
	 *     The predicate can be negated by prefixing the string with `!`.
	 *
	 *   - `Object`: A pattern object can be used to filter specific properties on objects contained
	 *     by `array`. For example `{name:"M", phone:"1"}` predicate will return an array of items
	 *     which have property `name` containing "M" and property `phone` containing "1". A special
	 *     property name (`$` by default) can be used (e.g. as in `{$: "text"}`) to accept a match
	 *     against any property of the object or its nested object properties. That's equivalent to the
	 *     simple substring match with a `string` as described above. The special property name can be
	 *     overwritten, using the `anyPropertyKey` parameter.
	 *     The predicate can be negated by prefixing the string with `!`.
	 *     For example `{name: "!M"}` predicate will return an array of items which have property `name`
	 *     not containing "M".
	 *
	 *     Note that a named property will match properties on the same level only, while the special
	 *     `$` property will match properties on the same level or deeper. E.g. an array item like
	 *     `{name: {first: 'John', last: 'Doe'}}` will **not** be matched by `{name: 'John'}`, but
	 *     **will** be matched by `{$: 'John'}`.
	 *
	 *   - `function(value, index, array)`: A predicate function can be used to write arbitrary filters.
	 *     The function is called for each element of the array, with the element, its index, and
	 *     the entire array itself as arguments.
	 *
	 *     The final result is an array of those elements that the predicate returned true for.
	 *
	 * @param {function(actual, expected)|true|false} [comparator] Comparator which is used in
	 *     determining if values retrieved using `expression` (when it is not a function) should be
	 *     considered a match based on the the expected value (from the filter expression) and actual
	 *     value (from the object in the array).
	 *
	 *   Can be one of:
	 *
	 *   - `function(actual, expected)`:
	 *     The function will be given the object value and the predicate value to compare and
	 *     should return true if both values should be considered equal.
	 *
	 *   - `true`: A shorthand for `function(actual, expected) { return angular.equals(actual, expected)}`.
	 *     This is essentially strict comparison of expected and actual.
	 *
	 *   - `false`: A short hand for a function which will look for a substring match in a case
	 *     insensitive way. Primitive values are converted to strings. Objects are not compared against
	 *     primitives, unless they have a custom `toString` method (e.g. `Date` objects).
	 *
	 *
	 *   Defaults to `false`.
	 *
	 * @param {string} [anyPropertyKey] The special property name that matches against any property.
	 *     By default `$`.
	 *
	 * @example
	   <example name="filter-filter">
	     <file name="index.html">
	       <div ng-init="friends = [{name:'John', phone:'555-1276'},
	                                {name:'Mary', phone:'800-BIG-MARY'},
	                                {name:'Mike', phone:'555-4321'},
	                                {name:'Adam', phone:'555-5678'},
	                                {name:'Julie', phone:'555-8765'},
	                                {name:'Juliette', phone:'555-5678'}]"></div>
	
	       <label>Search: <input ng-model="searchText"></label>
	       <table id="searchTextResults">
	         <tr><th>Name</th><th>Phone</th></tr>
	         <tr ng-repeat="friend in friends | filter:searchText">
	           <td>{{friend.name}}</td>
	           <td>{{friend.phone}}</td>
	         </tr>
	       </table>
	       <hr>
	       <label>Any: <input ng-model="search.$"></label> <br>
	       <label>Name only <input ng-model="search.name"></label><br>
	       <label>Phone only <input ng-model="search.phone"></label><br>
	       <label>Equality <input type="checkbox" ng-model="strict"></label><br>
	       <table id="searchObjResults">
	         <tr><th>Name</th><th>Phone</th></tr>
	         <tr ng-repeat="friendObj in friends | filter:search:strict">
	           <td>{{friendObj.name}}</td>
	           <td>{{friendObj.phone}}</td>
	         </tr>
	       </table>
	     </file>
	     <file name="protractor.js" type="protractor">
	       var expectFriendNames = function(expectedNames, key) {
	         element.all(by.repeater(key + ' in friends').column(key + '.name')).then(function(arr) {
	           arr.forEach(function(wd, i) {
	             expect(wd.getText()).toMatch(expectedNames[i]);
	           });
	         });
	       };
	
	       it('should search across all fields when filtering with a string', function() {
	         var searchText = element(by.model('searchText'));
	         searchText.clear();
	         searchText.sendKeys('m');
	         expectFriendNames(['Mary', 'Mike', 'Adam'], 'friend');
	
	         searchText.clear();
	         searchText.sendKeys('76');
	         expectFriendNames(['John', 'Julie'], 'friend');
	       });
	
	       it('should search in specific fields when filtering with a predicate object', function() {
	         var searchAny = element(by.model('search.$'));
	         searchAny.clear();
	         searchAny.sendKeys('i');
	         expectFriendNames(['Mary', 'Mike', 'Julie', 'Juliette'], 'friendObj');
	       });
	       it('should use a equal comparison when comparator is true', function() {
	         var searchName = element(by.model('search.name'));
	         var strict = element(by.model('strict'));
	         searchName.clear();
	         searchName.sendKeys('Julie');
	         strict.click();
	         expectFriendNames(['Julie'], 'friendObj');
	       });
	     </file>
	   </example>
	 */function filterFilter(){return function(array,expression,comparator,anyPropertyKey){if(!isArrayLike(array)){if(array==null){return array;}else{throw minErr('filter')('notarray','Expected array but received: {0}',array);}}anyPropertyKey=anyPropertyKey||'$';var expressionType=getTypeForFilter(expression);var predicateFn;var matchAgainstAnyProp;switch(expressionType){case'function':predicateFn=expression;break;case'boolean':case'null':case'number':case'string':matchAgainstAnyProp=true;// falls through
	case'object':predicateFn=createPredicateFn(expression,comparator,anyPropertyKey,matchAgainstAnyProp);break;default:return array;}return Array.prototype.filter.call(array,predicateFn);};}// Helper functions for `filterFilter`
	function createPredicateFn(expression,comparator,anyPropertyKey,matchAgainstAnyProp){var shouldMatchPrimitives=isObject(expression)&&anyPropertyKey in expression;var predicateFn;if(comparator===true){comparator=equals;}else if(!isFunction(comparator)){comparator=function comparator(actual,expected){if(isUndefined(actual)){// No substring matching against `undefined`
	return false;}if(actual===null||expected===null){// No substring matching against `null`; only match against `null`
	return actual===expected;}if(isObject(expected)||isObject(actual)&&!hasCustomToString(actual)){// Should not compare primitives against objects, unless they have custom `toString` method
	return false;}actual=lowercase(''+actual);expected=lowercase(''+expected);return actual.indexOf(expected)!==-1;};}predicateFn=function predicateFn(item){if(shouldMatchPrimitives&&!isObject(item)){return deepCompare(item,expression[anyPropertyKey],comparator,anyPropertyKey,false);}return deepCompare(item,expression,comparator,anyPropertyKey,matchAgainstAnyProp);};return predicateFn;}function deepCompare(actual,expected,comparator,anyPropertyKey,matchAgainstAnyProp,dontMatchWholeObject){var actualType=getTypeForFilter(actual);var expectedType=getTypeForFilter(expected);if(expectedType==='string'&&expected.charAt(0)==='!'){return!deepCompare(actual,expected.substring(1),comparator,anyPropertyKey,matchAgainstAnyProp);}else if(isArray(actual)){// In case `actual` is an array, consider it a match
	// if ANY of it's items matches `expected`
	return actual.some(function(item){return deepCompare(item,expected,comparator,anyPropertyKey,matchAgainstAnyProp);});}switch(actualType){case'object':var key;if(matchAgainstAnyProp){for(key in actual){// Under certain, rare, circumstances, key may not be a string and `charAt` will be undefined
	// See: https://github.com/angular/angular.js/issues/15644
	if(key.charAt&&key.charAt(0)!=='$'&&deepCompare(actual[key],expected,comparator,anyPropertyKey,true)){return true;}}return dontMatchWholeObject?false:deepCompare(actual,expected,comparator,anyPropertyKey,false);}else if(expectedType==='object'){for(key in expected){var expectedVal=expected[key];if(isFunction(expectedVal)||isUndefined(expectedVal)){continue;}var matchAnyProperty=key===anyPropertyKey;var actualVal=matchAnyProperty?actual:actual[key];if(!deepCompare(actualVal,expectedVal,comparator,anyPropertyKey,matchAnyProperty,matchAnyProperty)){return false;}}return true;}else{return comparator(actual,expected);}case'function':return false;default:return comparator(actual,expected);}}// Used for easily differentiating between `null` and actual `object`
	function getTypeForFilter(val){return val===null?'null':typeof val==='undefined'?'undefined':_typeof(val);}var MAX_DIGITS=22;var DECIMAL_SEP='.';var ZERO_CHAR='0';/**
	 * @ngdoc filter
	 * @name currency
	 * @kind function
	 *
	 * @description
	 * Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default
	 * symbol for current locale is used.
	 *
	 * @param {number} amount Input to filter.
	 * @param {string=} symbol Currency symbol or identifier to be displayed.
	 * @param {number=} fractionSize Number of decimal places to round the amount to, defaults to default max fraction size for current locale
	 * @returns {string} Formatted number.
	 *
	 *
	 * @example
	   <example module="currencyExample" name="currency-filter">
	     <file name="index.html">
	       <script>
	         angular.module('currencyExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.amount = 1234.56;
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <input type="number" ng-model="amount" aria-label="amount"> <br>
	         default currency symbol ($): <span id="currency-default">{{amount | currency}}</span><br>
	         custom currency identifier (USD$): <span id="currency-custom">{{amount | currency:"USD$"}}</span><br>
	         no fractions (0): <span id="currency-no-fractions">{{amount | currency:"USD$":0}}</span>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should init with 1234.56', function() {
	         expect(element(by.id('currency-default')).getText()).toBe('$1,234.56');
	         expect(element(by.id('currency-custom')).getText()).toBe('USD$1,234.56');
	         expect(element(by.id('currency-no-fractions')).getText()).toBe('USD$1,235');
	       });
	       it('should update', function() {
	         if (browser.params.browser === 'safari') {
	           // Safari does not understand the minus key. See
	           // https://github.com/angular/protractor/issues/481
	           return;
	         }
	         element(by.model('amount')).clear();
	         element(by.model('amount')).sendKeys('-1234');
	         expect(element(by.id('currency-default')).getText()).toBe('-$1,234.00');
	         expect(element(by.id('currency-custom')).getText()).toBe('-USD$1,234.00');
	         expect(element(by.id('currency-no-fractions')).getText()).toBe('-USD$1,234');
	       });
	     </file>
	   </example>
	 */currencyFilter.$inject=['$locale'];function currencyFilter($locale){var formats=$locale.NUMBER_FORMATS;return function(amount,currencySymbol,fractionSize){if(isUndefined(currencySymbol)){currencySymbol=formats.CURRENCY_SYM;}if(isUndefined(fractionSize)){fractionSize=formats.PATTERNS[1].maxFrac;}// if null or undefined pass it through
	return amount==null?amount:formatNumber(amount,formats.PATTERNS[1],formats.GROUP_SEP,formats.DECIMAL_SEP,fractionSize).replace(/\u00A4/g,currencySymbol);};}/**
	 * @ngdoc filter
	 * @name number
	 * @kind function
	 *
	 * @description
	 * Formats a number as text.
	 *
	 * If the input is null or undefined, it will just be returned.
	 * If the input is infinite (Infinity or -Infinity), the Infinity symbol '∞' or '-∞' is returned, respectively.
	 * If the input is not a number an empty string is returned.
	 *
	 *
	 * @param {number|string} number Number to format.
	 * @param {(number|string)=} fractionSize Number of decimal places to round the number to.
	 * If this is not provided then the fraction size is computed from the current locale's number
	 * formatting pattern. In the case of the default locale, it will be 3.
	 * @returns {string} Number rounded to `fractionSize` appropriately formatted based on the current
	 *                   locale (e.g., in the en_US locale it will have "." as the decimal separator and
	 *                   include "," group separators after each third digit).
	 *
	 * @example
	   <example module="numberFilterExample" name="number-filter">
	     <file name="index.html">
	       <script>
	         angular.module('numberFilterExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.val = 1234.56789;
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <label>Enter number: <input ng-model='val'></label><br>
	         Default formatting: <span id='number-default'>{{val | number}}</span><br>
	         No fractions: <span>{{val | number:0}}</span><br>
	         Negative number: <span>{{-val | number:4}}</span>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should format numbers', function() {
	         expect(element(by.id('number-default')).getText()).toBe('1,234.568');
	         expect(element(by.binding('val | number:0')).getText()).toBe('1,235');
	         expect(element(by.binding('-val | number:4')).getText()).toBe('-1,234.5679');
	       });
	
	       it('should update', function() {
	         element(by.model('val')).clear();
	         element(by.model('val')).sendKeys('3374.333');
	         expect(element(by.id('number-default')).getText()).toBe('3,374.333');
	         expect(element(by.binding('val | number:0')).getText()).toBe('3,374');
	         expect(element(by.binding('-val | number:4')).getText()).toBe('-3,374.3330');
	      });
	     </file>
	   </example>
	 */numberFilter.$inject=['$locale'];function numberFilter($locale){var formats=$locale.NUMBER_FORMATS;return function(number,fractionSize){// if null or undefined pass it through
	return number==null?number:formatNumber(number,formats.PATTERNS[0],formats.GROUP_SEP,formats.DECIMAL_SEP,fractionSize);};}/**
	 * Parse a number (as a string) into three components that can be used
	 * for formatting the number.
	 *
	 * (Significant bits of this parse algorithm came from https://github.com/MikeMcl/big.js/)
	 *
	 * @param  {string} numStr The number to parse
	 * @return {object} An object describing this number, containing the following keys:
	 *  - d : an array of digits containing leading zeros as necessary
	 *  - i : the number of the digits in `d` that are to the left of the decimal point
	 *  - e : the exponent for numbers that would need more than `MAX_DIGITS` digits in `d`
	 *
	 */function parse(numStr){var exponent=0,digits,numberOfIntegerDigits;var i,j,zeros;// Decimal point?
	if((numberOfIntegerDigits=numStr.indexOf(DECIMAL_SEP))>-1){numStr=numStr.replace(DECIMAL_SEP,'');}// Exponential form?
	if((i=numStr.search(/e/i))>0){// Work out the exponent.
	if(numberOfIntegerDigits<0)numberOfIntegerDigits=i;numberOfIntegerDigits+=+numStr.slice(i+1);numStr=numStr.substring(0,i);}else if(numberOfIntegerDigits<0){// There was no decimal point or exponent so it is an integer.
	numberOfIntegerDigits=numStr.length;}// Count the number of leading zeros.
	for(i=0;numStr.charAt(i)===ZERO_CHAR;i++){/* empty */}if(i===(zeros=numStr.length)){// The digits are all zero.
	digits=[0];numberOfIntegerDigits=1;}else{// Count the number of trailing zeros
	zeros--;while(numStr.charAt(zeros)===ZERO_CHAR){zeros--;}// Trailing zeros are insignificant so ignore them
	numberOfIntegerDigits-=i;digits=[];// Convert string to array of digits without leading/trailing zeros.
	for(j=0;i<=zeros;i++,j++){digits[j]=+numStr.charAt(i);}}// If the number overflows the maximum allowed digits then use an exponent.
	if(numberOfIntegerDigits>MAX_DIGITS){digits=digits.splice(0,MAX_DIGITS-1);exponent=numberOfIntegerDigits-1;numberOfIntegerDigits=1;}return{d:digits,e:exponent,i:numberOfIntegerDigits};}/**
	 * Round the parsed number to the specified number of decimal places
	 * This function changed the parsedNumber in-place
	 */function roundNumber(parsedNumber,fractionSize,minFrac,maxFrac){var digits=parsedNumber.d;var fractionLen=digits.length-parsedNumber.i;// determine fractionSize if it is not specified; `+fractionSize` converts it to a number
	fractionSize=isUndefined(fractionSize)?Math.min(Math.max(minFrac,fractionLen),maxFrac):+fractionSize;// The index of the digit to where rounding is to occur
	var roundAt=fractionSize+parsedNumber.i;var digit=digits[roundAt];if(roundAt>0){// Drop fractional digits beyond `roundAt`
	digits.splice(Math.max(parsedNumber.i,roundAt));// Set non-fractional digits beyond `roundAt` to 0
	for(var j=roundAt;j<digits.length;j++){digits[j]=0;}}else{// We rounded to zero so reset the parsedNumber
	fractionLen=Math.max(0,fractionLen);parsedNumber.i=1;digits.length=Math.max(1,roundAt=fractionSize+1);digits[0]=0;for(var i=1;i<roundAt;i++){digits[i]=0;}}if(digit>=5){if(roundAt-1<0){for(var k=0;k>roundAt;k--){digits.unshift(0);parsedNumber.i++;}digits.unshift(1);parsedNumber.i++;}else{digits[roundAt-1]++;}}// Pad out with zeros to get the required fraction length
	for(;fractionLen<Math.max(0,fractionSize);fractionLen++){digits.push(0);}// Do any carrying, e.g. a digit was rounded up to 10
	var carry=digits.reduceRight(function(carry,d,i,digits){d=d+carry;digits[i]=d%10;return Math.floor(d/10);},0);if(carry){digits.unshift(carry);parsedNumber.i++;}}/**
	 * Format a number into a string
	 * @param  {number} number       The number to format
	 * @param  {{
	 *           minFrac, // the minimum number of digits required in the fraction part of the number
	 *           maxFrac, // the maximum number of digits required in the fraction part of the number
	 *           gSize,   // number of digits in each group of separated digits
	 *           lgSize,  // number of digits in the last group of digits before the decimal separator
	 *           negPre,  // the string to go in front of a negative number (e.g. `-` or `(`))
	 *           posPre,  // the string to go in front of a positive number
	 *           negSuf,  // the string to go after a negative number (e.g. `)`)
	 *           posSuf   // the string to go after a positive number
	 *         }} pattern
	 * @param  {string} groupSep     The string to separate groups of number (e.g. `,`)
	 * @param  {string} decimalSep   The string to act as the decimal separator (e.g. `.`)
	 * @param  {[type]} fractionSize The size of the fractional part of the number
	 * @return {string}              The number formatted as a string
	 */function formatNumber(number,pattern,groupSep,decimalSep,fractionSize){if(!(isString(number)||isNumber(number))||isNaN(number))return'';var isInfinity=!isFinite(number);var isZero=false;var numStr=Math.abs(number)+'',formattedText='',parsedNumber;if(isInfinity){formattedText='\u221E';}else{parsedNumber=parse(numStr);roundNumber(parsedNumber,fractionSize,pattern.minFrac,pattern.maxFrac);var digits=parsedNumber.d;var integerLen=parsedNumber.i;var exponent=parsedNumber.e;var decimals=[];isZero=digits.reduce(function(isZero,d){return isZero&&!d;},true);// pad zeros for small numbers
	while(integerLen<0){digits.unshift(0);integerLen++;}// extract decimals digits
	if(integerLen>0){decimals=digits.splice(integerLen,digits.length);}else{decimals=digits;digits=[0];}// format the integer digits with grouping separators
	var groups=[];if(digits.length>=pattern.lgSize){groups.unshift(digits.splice(-pattern.lgSize,digits.length).join(''));}while(digits.length>pattern.gSize){groups.unshift(digits.splice(-pattern.gSize,digits.length).join(''));}if(digits.length){groups.unshift(digits.join(''));}formattedText=groups.join(groupSep);// append the decimal digits
	if(decimals.length){formattedText+=decimalSep+decimals.join('');}if(exponent){formattedText+='e+'+exponent;}}if(number<0&&!isZero){return pattern.negPre+formattedText+pattern.negSuf;}else{return pattern.posPre+formattedText+pattern.posSuf;}}function padNumber(num,digits,trim,negWrap){var neg='';if(num<0||negWrap&&num<=0){if(negWrap){num=-num+1;}else{num=-num;neg='-';}}num=''+num;while(num.length<digits){num=ZERO_CHAR+num;}if(trim){num=num.substr(num.length-digits);}return neg+num;}function dateGetter(name,size,offset,trim,negWrap){offset=offset||0;return function(date){var value=date['get'+name]();if(offset>0||value>-offset){value+=offset;}if(value===0&&offset===-12)value=12;return padNumber(value,size,trim,negWrap);};}function dateStrGetter(name,shortForm,standAlone){return function(date,formats){var value=date['get'+name]();var propPrefix=(standAlone?'STANDALONE':'')+(shortForm?'SHORT':'');var get=uppercase(propPrefix+name);return formats[get][value];};}function timeZoneGetter(date,formats,offset){var zone=-1*offset;var paddedZone=zone>=0?'+':'';paddedZone+=padNumber(Math[zone>0?'floor':'ceil'](zone/60),2)+padNumber(Math.abs(zone%60),2);return paddedZone;}function getFirstThursdayOfYear(year){// 0 = index of January
	var dayOfWeekOnFirst=new Date(year,0,1).getDay();// 4 = index of Thursday (+1 to account for 1st = 5)
	// 11 = index of *next* Thursday (+1 account for 1st = 12)
	return new Date(year,0,(dayOfWeekOnFirst<=4?5:12)-dayOfWeekOnFirst);}function getThursdayThisWeek(datetime){return new Date(datetime.getFullYear(),datetime.getMonth(),// 4 = index of Thursday
	datetime.getDate()+(4-datetime.getDay()));}function weekGetter(size){return function(date){var firstThurs=getFirstThursdayOfYear(date.getFullYear()),thisThurs=getThursdayThisWeek(date);var diff=+thisThurs-+firstThurs,result=1+Math.round(diff/6.048e8);// 6.048e8 ms per week
	return padNumber(result,size);};}function ampmGetter(date,formats){return date.getHours()<12?formats.AMPMS[0]:formats.AMPMS[1];}function eraGetter(date,formats){return date.getFullYear()<=0?formats.ERAS[0]:formats.ERAS[1];}function longEraGetter(date,formats){return date.getFullYear()<=0?formats.ERANAMES[0]:formats.ERANAMES[1];}var DATE_FORMATS={yyyy:dateGetter('FullYear',4,0,false,true),yy:dateGetter('FullYear',2,0,true,true),y:dateGetter('FullYear',1,0,false,true),MMMM:dateStrGetter('Month'),MMM:dateStrGetter('Month',true),MM:dateGetter('Month',2,1),M:dateGetter('Month',1,1),LLLL:dateStrGetter('Month',false,true),dd:dateGetter('Date',2),d:dateGetter('Date',1),HH:dateGetter('Hours',2),H:dateGetter('Hours',1),hh:dateGetter('Hours',2,-12),h:dateGetter('Hours',1,-12),mm:dateGetter('Minutes',2),m:dateGetter('Minutes',1),ss:dateGetter('Seconds',2),s:dateGetter('Seconds',1),// while ISO 8601 requires fractions to be prefixed with `.` or `,`
	// we can be just safely rely on using `sss` since we currently don't support single or two digit fractions
	sss:dateGetter('Milliseconds',3),EEEE:dateStrGetter('Day'),EEE:dateStrGetter('Day',true),a:ampmGetter,Z:timeZoneGetter,ww:weekGetter(2),w:weekGetter(1),G:eraGetter,GG:eraGetter,GGG:eraGetter,GGGG:longEraGetter};var DATE_FORMATS_SPLIT=/((?:[^yMLdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|m+|s+|a|Z|G+|w+))([\s\S]*)/,NUMBER_STRING=/^-?\d+$/;/**
	 * @ngdoc filter
	 * @name date
	 * @kind function
	 *
	 * @description
	 *   Formats `date` to a string based on the requested `format`.
	 *
	 *   `format` string can be composed of the following elements:
	 *
	 *   * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)
	 *   * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)
	 *   * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)
	 *   * `'MMMM'`: Month in year (January-December)
	 *   * `'MMM'`: Month in year (Jan-Dec)
	 *   * `'MM'`: Month in year, padded (01-12)
	 *   * `'M'`: Month in year (1-12)
	 *   * `'LLLL'`: Stand-alone month in year (January-December)
	 *   * `'dd'`: Day in month, padded (01-31)
	 *   * `'d'`: Day in month (1-31)
	 *   * `'EEEE'`: Day in Week,(Sunday-Saturday)
	 *   * `'EEE'`: Day in Week, (Sun-Sat)
	 *   * `'HH'`: Hour in day, padded (00-23)
	 *   * `'H'`: Hour in day (0-23)
	 *   * `'hh'`: Hour in AM/PM, padded (01-12)
	 *   * `'h'`: Hour in AM/PM, (1-12)
	 *   * `'mm'`: Minute in hour, padded (00-59)
	 *   * `'m'`: Minute in hour (0-59)
	 *   * `'ss'`: Second in minute, padded (00-59)
	 *   * `'s'`: Second in minute (0-59)
	 *   * `'sss'`: Millisecond in second, padded (000-999)
	 *   * `'a'`: AM/PM marker
	 *   * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)
	 *   * `'ww'`: Week of year, padded (00-53). Week 01 is the week with the first Thursday of the year
	 *   * `'w'`: Week of year (0-53). Week 1 is the week with the first Thursday of the year
	 *   * `'G'`, `'GG'`, `'GGG'`: The abbreviated form of the era string (e.g. 'AD')
	 *   * `'GGGG'`: The long form of the era string (e.g. 'Anno Domini')
	 *
	 *   `format` string can also be one of the following predefined
	 *   {@link guide/i18n localizable formats}:
	 *
	 *   * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale
	 *     (e.g. Sep 3, 2010 12:05:08 PM)
	 *   * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 PM)
	 *   * `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` for en_US  locale
	 *     (e.g. Friday, September 3, 2010)
	 *   * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)
	 *   * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)
	 *   * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)
	 *   * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 PM)
	 *   * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 PM)
	 *
	 *   `format` string can contain literal values. These need to be escaped by surrounding with single quotes (e.g.
	 *   `"h 'in the morning'"`). In order to output a single quote, escape it - i.e., two single quotes in a sequence
	 *   (e.g. `"h 'o''clock'"`).
	 *
	 *   Any other characters in the `format` string will be output as-is.
	 *
	 * @param {(Date|number|string)} date Date to format either as Date object, milliseconds (string or
	 *    number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.sssZ and its
	 *    shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is
	 *    specified in the string input, the time is considered to be in the local timezone.
	 * @param {string=} format Formatting rules (see Description). If not specified,
	 *    `mediumDate` is used.
	 * @param {string=} timezone Timezone to be used for formatting. It understands UTC/GMT and the
	 *    continental US time zone abbreviations, but for general use, use a time zone offset, for
	 *    example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)
	 *    If not specified, the timezone of the browser will be used.
	 * @returns {string} Formatted string or the input if input is not recognized as date/millis.
	 *
	 * @example
	   <example name="filter-date">
	     <file name="index.html">
	       <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:
	           <span>{{1288323623006 | date:'medium'}}</span><br>
	       <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:
	          <span>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span><br>
	       <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:
	          <span>{{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}</span><br>
	       <span ng-non-bindable>{{1288323623006 | date:"MM/dd/yyyy 'at' h:mma"}}</span>:
	          <span>{{'1288323623006' | date:"MM/dd/yyyy 'at' h:mma"}}</span><br>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should format date', function() {
	         expect(element(by.binding("1288323623006 | date:'medium'")).getText()).
	            toMatch(/Oct 2\d, 2010 \d{1,2}:\d{2}:\d{2} (AM|PM)/);
	         expect(element(by.binding("1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'")).getText()).
	            toMatch(/2010-10-2\d \d{2}:\d{2}:\d{2} (-|\+)?\d{4}/);
	         expect(element(by.binding("'1288323623006' | date:'MM/dd/yyyy @ h:mma'")).getText()).
	            toMatch(/10\/2\d\/2010 @ \d{1,2}:\d{2}(AM|PM)/);
	         expect(element(by.binding("'1288323623006' | date:\"MM/dd/yyyy 'at' h:mma\"")).getText()).
	            toMatch(/10\/2\d\/2010 at \d{1,2}:\d{2}(AM|PM)/);
	       });
	     </file>
	   </example>
	 */dateFilter.$inject=['$locale'];function dateFilter($locale){var R_ISO8601_STR=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;// 1        2       3         4          5          6          7          8  9     10      11
	function jsonStringToDate(string){var match;if(match=string.match(R_ISO8601_STR)){var date=new Date(0),tzHour=0,tzMin=0,dateSetter=match[8]?date.setUTCFullYear:date.setFullYear,timeSetter=match[8]?date.setUTCHours:date.setHours;if(match[9]){tzHour=toInt(match[9]+match[10]);tzMin=toInt(match[9]+match[11]);}dateSetter.call(date,toInt(match[1]),toInt(match[2])-1,toInt(match[3]));var h=toInt(match[4]||0)-tzHour;var m=toInt(match[5]||0)-tzMin;var s=toInt(match[6]||0);var ms=Math.round(parseFloat('0.'+(match[7]||0))*1000);timeSetter.call(date,h,m,s,ms);return date;}return string;}return function(date,format,timezone){var text='',parts=[],fn,match;format=format||'mediumDate';format=$locale.DATETIME_FORMATS[format]||format;if(isString(date)){date=NUMBER_STRING.test(date)?toInt(date):jsonStringToDate(date);}if(isNumber(date)){date=new Date(date);}if(!isDate(date)||!isFinite(date.getTime())){return date;}while(format){match=DATE_FORMATS_SPLIT.exec(format);if(match){parts=concat(parts,match,1);format=parts.pop();}else{parts.push(format);format=null;}}var dateTimezoneOffset=date.getTimezoneOffset();if(timezone){dateTimezoneOffset=timezoneToOffset(timezone,dateTimezoneOffset);date=convertTimezoneToLocal(date,timezone,true);}forEach(parts,function(value){fn=DATE_FORMATS[value];text+=fn?fn(date,$locale.DATETIME_FORMATS,dateTimezoneOffset):value==='\'\''?'\'':value.replace(/(^'|'$)/g,'').replace(/''/g,'\'');});return text;};}/**
	 * @ngdoc filter
	 * @name json
	 * @kind function
	 *
	 * @description
	 *   Allows you to convert a JavaScript object into JSON string.
	 *
	 *   This filter is mostly useful for debugging. When using the double curly {{value}} notation
	 *   the binding is automatically converted to JSON.
	 *
	 * @param {*} object Any JavaScript object (including arrays and primitive types) to filter.
	 * @param {number=} spacing The number of spaces to use per indentation, defaults to 2.
	 * @returns {string} JSON string.
	 *
	 *
	 * @example
	   <example name="filter-json">
	     <file name="index.html">
	       <pre id="default-spacing">{{ {'name':'value'} | json }}</pre>
	       <pre id="custom-spacing">{{ {'name':'value'} | json:4 }}</pre>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should jsonify filtered objects', function() {
	         expect(element(by.id('default-spacing')).getText()).toMatch(/\{\n {2}"name": ?"value"\n}/);
	         expect(element(by.id('custom-spacing')).getText()).toMatch(/\{\n {4}"name": ?"value"\n}/);
	       });
	     </file>
	   </example>
	 *
	 */function jsonFilter(){return function(object,spacing){if(isUndefined(spacing)){spacing=2;}return toJson(object,spacing);};}/**
	 * @ngdoc filter
	 * @name lowercase
	 * @kind function
	 * @description
	 * Converts string to lowercase.
	 * @see angular.lowercase
	 */var lowercaseFilter=valueFn(lowercase);/**
	 * @ngdoc filter
	 * @name uppercase
	 * @kind function
	 * @description
	 * Converts string to uppercase.
	 * @see angular.uppercase
	 */var uppercaseFilter=valueFn(uppercase);/**
	 * @ngdoc filter
	 * @name limitTo
	 * @kind function
	 *
	 * @description
	 * Creates a new array or string containing only a specified number of elements. The elements are
	 * taken from either the beginning or the end of the source array, string or number, as specified by
	 * the value and sign (positive or negative) of `limit`. Other array-like objects are also supported
	 * (e.g. array subclasses, NodeLists, jqLite/jQuery collections etc). If a number is used as input,
	 * it is converted to a string.
	 *
	 * @param {Array|ArrayLike|string|number} input - Array/array-like, string or number to be limited.
	 * @param {string|number} limit - The length of the returned array or string. If the `limit` number
	 *     is positive, `limit` number of items from the beginning of the source array/string are copied.
	 *     If the number is negative, `limit` number  of items from the end of the source array/string
	 *     are copied. The `limit` will be trimmed if it exceeds `array.length`. If `limit` is undefined,
	 *     the input will be returned unchanged.
	 * @param {(string|number)=} begin - Index at which to begin limitation. As a negative index,
	 *     `begin` indicates an offset from the end of `input`. Defaults to `0`.
	 * @returns {Array|string} A new sub-array or substring of length `limit` or less if the input had
	 *     less than `limit` elements.
	 *
	 * @example
	   <example module="limitToExample" name="limit-to-filter">
	     <file name="index.html">
	       <script>
	         angular.module('limitToExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.numbers = [1,2,3,4,5,6,7,8,9];
	             $scope.letters = "abcdefghi";
	             $scope.longNumber = 2345432342;
	             $scope.numLimit = 3;
	             $scope.letterLimit = 3;
	             $scope.longNumberLimit = 3;
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <label>
	            Limit {{numbers}} to:
	            <input type="number" step="1" ng-model="numLimit">
	         </label>
	         <p>Output numbers: {{ numbers | limitTo:numLimit }}</p>
	         <label>
	            Limit {{letters}} to:
	            <input type="number" step="1" ng-model="letterLimit">
	         </label>
	         <p>Output letters: {{ letters | limitTo:letterLimit }}</p>
	         <label>
	            Limit {{longNumber}} to:
	            <input type="number" step="1" ng-model="longNumberLimit">
	         </label>
	         <p>Output long number: {{ longNumber | limitTo:longNumberLimit }}</p>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       var numLimitInput = element(by.model('numLimit'));
	       var letterLimitInput = element(by.model('letterLimit'));
	       var longNumberLimitInput = element(by.model('longNumberLimit'));
	       var limitedNumbers = element(by.binding('numbers | limitTo:numLimit'));
	       var limitedLetters = element(by.binding('letters | limitTo:letterLimit'));
	       var limitedLongNumber = element(by.binding('longNumber | limitTo:longNumberLimit'));
	
	       it('should limit the number array to first three items', function() {
	         expect(numLimitInput.getAttribute('value')).toBe('3');
	         expect(letterLimitInput.getAttribute('value')).toBe('3');
	         expect(longNumberLimitInput.getAttribute('value')).toBe('3');
	         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3]');
	         expect(limitedLetters.getText()).toEqual('Output letters: abc');
	         expect(limitedLongNumber.getText()).toEqual('Output long number: 234');
	       });
	
	       // There is a bug in safari and protractor that doesn't like the minus key
	       // it('should update the output when -3 is entered', function() {
	       //   numLimitInput.clear();
	       //   numLimitInput.sendKeys('-3');
	       //   letterLimitInput.clear();
	       //   letterLimitInput.sendKeys('-3');
	       //   longNumberLimitInput.clear();
	       //   longNumberLimitInput.sendKeys('-3');
	       //   expect(limitedNumbers.getText()).toEqual('Output numbers: [7,8,9]');
	       //   expect(limitedLetters.getText()).toEqual('Output letters: ghi');
	       //   expect(limitedLongNumber.getText()).toEqual('Output long number: 342');
	       // });
	
	       it('should not exceed the maximum size of input array', function() {
	         numLimitInput.clear();
	         numLimitInput.sendKeys('100');
	         letterLimitInput.clear();
	         letterLimitInput.sendKeys('100');
	         longNumberLimitInput.clear();
	         longNumberLimitInput.sendKeys('100');
	         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3,4,5,6,7,8,9]');
	         expect(limitedLetters.getText()).toEqual('Output letters: abcdefghi');
	         expect(limitedLongNumber.getText()).toEqual('Output long number: 2345432342');
	       });
	     </file>
	   </example>
	*/function limitToFilter(){return function(input,limit,begin){if(Math.abs(Number(limit))===Infinity){limit=Number(limit);}else{limit=toInt(limit);}if(isNumberNaN(limit))return input;if(isNumber(input))input=input.toString();if(!isArrayLike(input))return input;begin=!begin||isNaN(begin)?0:toInt(begin);begin=begin<0?Math.max(0,input.length+begin):begin;if(limit>=0){return sliceFn(input,begin,begin+limit);}else{if(begin===0){return sliceFn(input,limit,input.length);}else{return sliceFn(input,Math.max(0,begin+limit),begin);}}};}function sliceFn(input,begin,end){if(isString(input))return input.slice(begin,end);return slice.call(input,begin,end);}/**
	 * @ngdoc filter
	 * @name orderBy
	 * @kind function
	 *
	 * @description
	 * Returns an array containing the items from the specified `collection`, ordered by a `comparator`
	 * function based on the values computed using the `expression` predicate.
	 *
	 * For example, `[{id: 'foo'}, {id: 'bar'}] | orderBy:'id'` would result in
	 * `[{id: 'bar'}, {id: 'foo'}]`.
	 *
	 * The `collection` can be an Array or array-like object (e.g. NodeList, jQuery object, TypedArray,
	 * String, etc).
	 *
	 * The `expression` can be a single predicate, or a list of predicates each serving as a tie-breaker
	 * for the preceding one. The `expression` is evaluated against each item and the output is used
	 * for comparing with other items.
	 *
	 * You can change the sorting order by setting `reverse` to `true`. By default, items are sorted in
	 * ascending order.
	 *
	 * The comparison is done using the `comparator` function. If none is specified, a default, built-in
	 * comparator is used (see below for details - in a nutshell, it compares numbers numerically and
	 * strings alphabetically).
	 *
	 * ### Under the hood
	 *
	 * Ordering the specified `collection` happens in two phases:
	 *
	 * 1. All items are passed through the predicate (or predicates), and the returned values are saved
	 *    along with their type (`string`, `number` etc). For example, an item `{label: 'foo'}`, passed
	 *    through a predicate that extracts the value of the `label` property, would be transformed to:
	 *    ```
	 *    {
	 *      value: 'foo',
	 *      type: 'string',
	 *      index: ...
	 *    }
	 *    ```
	 * 2. The comparator function is used to sort the items, based on the derived values, types and
	 *    indices.
	 *
	 * If you use a custom comparator, it will be called with pairs of objects of the form
	 * `{value: ..., type: '...', index: ...}` and is expected to return `0` if the objects are equal
	 * (as far as the comparator is concerned), `-1` if the 1st one should be ranked higher than the
	 * second, or `1` otherwise.
	 *
	 * In order to ensure that the sorting will be deterministic across platforms, if none of the
	 * specified predicates can distinguish between two items, `orderBy` will automatically introduce a
	 * dummy predicate that returns the item's index as `value`.
	 * (If you are using a custom comparator, make sure it can handle this predicate as well.)
	 *
	 * Finally, in an attempt to simplify things, if a predicate returns an object as the extracted
	 * value for an item, `orderBy` will try to convert that object to a primitive value, before passing
	 * it to the comparator. The following rules govern the conversion:
	 *
	 * 1. If the object has a `valueOf()` method that returns a primitive, its return value will be
	 *    used instead.<br />
	 *    (If the object has a `valueOf()` method that returns another object, then the returned object
	 *    will be used in subsequent steps.)
	 * 2. If the object has a custom `toString()` method (i.e. not the one inherited from `Object`) that
	 *    returns a primitive, its return value will be used instead.<br />
	 *    (If the object has a `toString()` method that returns another object, then the returned object
	 *    will be used in subsequent steps.)
	 * 3. No conversion; the object itself is used.
	 *
	 * ### The default comparator
	 *
	 * The default, built-in comparator should be sufficient for most usecases. In short, it compares
	 * numbers numerically, strings alphabetically (and case-insensitively), for objects falls back to
	 * using their index in the original collection, and sorts values of different types by type.
	 *
	 * More specifically, it follows these steps to determine the relative order of items:
	 *
	 * 1. If the compared values are of different types, compare the types themselves alphabetically.
	 * 2. If both values are of type `string`, compare them alphabetically in a case- and
	 *    locale-insensitive way.
	 * 3. If both values are objects, compare their indices instead.
	 * 4. Otherwise, return:
	 *    -  `0`, if the values are equal (by strict equality comparison, i.e. using `===`).
	 *    - `-1`, if the 1st value is "less than" the 2nd value (compared using the `<` operator).
	 *    -  `1`, otherwise.
	 *
	 * **Note:** If you notice numbers not being sorted as expected, make sure they are actually being
	 *           saved as numbers and not strings.
	 * **Note:** For the purpose of sorting, `null` values are treated as the string `'null'` (i.e.
	 *           `type: 'string'`, `value: 'null'`). This may cause unexpected sort order relative to
	 *           other values.
	 *
	 * @param {Array|ArrayLike} collection - The collection (array or array-like object) to sort.
	 * @param {(Function|string|Array.<Function|string>)=} expression - A predicate (or list of
	 *    predicates) to be used by the comparator to determine the order of elements.
	 *
	 *    Can be one of:
	 *
	 *    - `Function`: A getter function. This function will be called with each item as argument and
	 *      the return value will be used for sorting.
	 *    - `string`: An Angular expression. This expression will be evaluated against each item and the
	 *      result will be used for sorting. For example, use `'label'` to sort by a property called
	 *      `label` or `'label.substring(0, 3)'` to sort by the first 3 characters of the `label`
	 *      property.<br />
	 *      (The result of a constant expression is interpreted as a property name to be used for
	 *      comparison. For example, use `'"special name"'` (note the extra pair of quotes) to sort by a
	 *      property called `special name`.)<br />
	 *      An expression can be optionally prefixed with `+` or `-` to control the sorting direction,
	 *      ascending or descending. For example, `'+label'` or `'-label'`. If no property is provided,
	 *      (e.g. `'+'` or `'-'`), the collection element itself is used in comparisons.
	 *    - `Array`: An array of function and/or string predicates. If a predicate cannot determine the
	 *      relative order of two items, the next predicate is used as a tie-breaker.
	 *
	 * **Note:** If the predicate is missing or empty then it defaults to `'+'`.
	 *
	 * @param {boolean=} reverse - If `true`, reverse the sorting order.
	 * @param {(Function)=} comparator - The comparator function used to determine the relative order of
	 *    value pairs. If omitted, the built-in comparator will be used.
	 *
	 * @returns {Array} - The sorted array.
	 *
	 *
	 * @example
	 * ### Ordering a table with `ngRepeat`
	 *
	 * The example below demonstrates a simple {@link ngRepeat ngRepeat}, where the data is sorted by
	 * age in descending order (expression is set to `'-age'`). The `comparator` is not set, which means
	 * it defaults to the built-in comparator.
	 *
	   <example name="orderBy-static" module="orderByExample1">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <table class="friends">
	           <tr>
	             <th>Name</th>
	             <th>Phone Number</th>
	             <th>Age</th>
	           </tr>
	           <tr ng-repeat="friend in friends | orderBy:'-age'">
	             <td>{{friend.name}}</td>
	             <td>{{friend.phone}}</td>
	             <td>{{friend.age}}</td>
	           </tr>
	         </table>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('orderByExample1', [])
	         .controller('ExampleController', ['$scope', function($scope) {
	           $scope.friends = [
	             {name: 'John',   phone: '555-1212',  age: 10},
	             {name: 'Mary',   phone: '555-9876',  age: 19},
	             {name: 'Mike',   phone: '555-4321',  age: 21},
	             {name: 'Adam',   phone: '555-5678',  age: 35},
	             {name: 'Julie',  phone: '555-8765',  age: 29}
	           ];
	         }]);
	     </file>
	     <file name="style.css">
	       .friends {
	         border-collapse: collapse;
	       }
	
	       .friends th {
	         border-bottom: 1px solid;
	       }
	       .friends td, .friends th {
	         border-left: 1px solid;
	         padding: 5px 10px;
	       }
	       .friends td:first-child, .friends th:first-child {
	         border-left: none;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       // Element locators
	       var names = element.all(by.repeater('friends').column('friend.name'));
	
	       it('should sort friends by age in reverse order', function() {
	         expect(names.get(0).getText()).toBe('Adam');
	         expect(names.get(1).getText()).toBe('Julie');
	         expect(names.get(2).getText()).toBe('Mike');
	         expect(names.get(3).getText()).toBe('Mary');
	         expect(names.get(4).getText()).toBe('John');
	       });
	     </file>
	   </example>
	 * <hr />
	 *
	 * @example
	 * ### Changing parameters dynamically
	 *
	 * All parameters can be changed dynamically. The next example shows how you can make the columns of
	 * a table sortable, by binding the `expression` and `reverse` parameters to scope properties.
	 *
	   <example name="orderBy-dynamic" module="orderByExample2">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <pre>Sort by = {{propertyName}}; reverse = {{reverse}}</pre>
	         <hr/>
	         <button ng-click="propertyName = null; reverse = false">Set to unsorted</button>
	         <hr/>
	         <table class="friends">
	           <tr>
	             <th>
	               <button ng-click="sortBy('name')">Name</button>
	               <span class="sortorder" ng-show="propertyName === 'name'" ng-class="{reverse: reverse}"></span>
	             </th>
	             <th>
	               <button ng-click="sortBy('phone')">Phone Number</button>
	               <span class="sortorder" ng-show="propertyName === 'phone'" ng-class="{reverse: reverse}"></span>
	             </th>
	             <th>
	               <button ng-click="sortBy('age')">Age</button>
	               <span class="sortorder" ng-show="propertyName === 'age'" ng-class="{reverse: reverse}"></span>
	             </th>
	           </tr>
	           <tr ng-repeat="friend in friends | orderBy:propertyName:reverse">
	             <td>{{friend.name}}</td>
	             <td>{{friend.phone}}</td>
	             <td>{{friend.age}}</td>
	           </tr>
	         </table>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('orderByExample2', [])
	         .controller('ExampleController', ['$scope', function($scope) {
	           var friends = [
	             {name: 'John',   phone: '555-1212',  age: 10},
	             {name: 'Mary',   phone: '555-9876',  age: 19},
	             {name: 'Mike',   phone: '555-4321',  age: 21},
	             {name: 'Adam',   phone: '555-5678',  age: 35},
	             {name: 'Julie',  phone: '555-8765',  age: 29}
	           ];
	
	           $scope.propertyName = 'age';
	           $scope.reverse = true;
	           $scope.friends = friends;
	
	           $scope.sortBy = function(propertyName) {
	             $scope.reverse = ($scope.propertyName === propertyName) ? !$scope.reverse : false;
	             $scope.propertyName = propertyName;
	           };
	         }]);
	     </file>
	     <file name="style.css">
	       .friends {
	         border-collapse: collapse;
	       }
	
	       .friends th {
	         border-bottom: 1px solid;
	       }
	       .friends td, .friends th {
	         border-left: 1px solid;
	         padding: 5px 10px;
	       }
	       .friends td:first-child, .friends th:first-child {
	         border-left: none;
	       }
	
	       .sortorder:after {
	         content: '\25b2';   // BLACK UP-POINTING TRIANGLE
	       }
	       .sortorder.reverse:after {
	         content: '\25bc';   // BLACK DOWN-POINTING TRIANGLE
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       // Element locators
	       var unsortButton = element(by.partialButtonText('unsorted'));
	       var nameHeader = element(by.partialButtonText('Name'));
	       var phoneHeader = element(by.partialButtonText('Phone'));
	       var ageHeader = element(by.partialButtonText('Age'));
	       var firstName = element(by.repeater('friends').column('friend.name').row(0));
	       var lastName = element(by.repeater('friends').column('friend.name').row(4));
	
	       it('should sort friends by some property, when clicking on the column header', function() {
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');
	
	         phoneHeader.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Mary');
	
	         nameHeader.click();
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('Mike');
	
	         ageHeader.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Adam');
	       });
	
	       it('should sort friends in reverse order, when clicking on the same column', function() {
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');
	
	         ageHeader.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Adam');
	
	         ageHeader.click();
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');
	       });
	
	       it('should restore the original order, when clicking "Set to unsorted"', function() {
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');
	
	         unsortButton.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Julie');
	       });
	     </file>
	   </example>
	 * <hr />
	 *
	 * @example
	 * ### Using `orderBy` inside a controller
	 *
	 * It is also possible to call the `orderBy` filter manually, by injecting `orderByFilter`, and
	 * calling it with the desired parameters. (Alternatively, you could inject the `$filter` factory
	 * and retrieve the `orderBy` filter with `$filter('orderBy')`.)
	 *
	   <example name="orderBy-call-manually" module="orderByExample3">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <pre>Sort by = {{propertyName}}; reverse = {{reverse}}</pre>
	         <hr/>
	         <button ng-click="sortBy(null)">Set to unsorted</button>
	         <hr/>
	         <table class="friends">
	           <tr>
	             <th>
	               <button ng-click="sortBy('name')">Name</button>
	               <span class="sortorder" ng-show="propertyName === 'name'" ng-class="{reverse: reverse}"></span>
	             </th>
	             <th>
	               <button ng-click="sortBy('phone')">Phone Number</button>
	               <span class="sortorder" ng-show="propertyName === 'phone'" ng-class="{reverse: reverse}"></span>
	             </th>
	             <th>
	               <button ng-click="sortBy('age')">Age</button>
	               <span class="sortorder" ng-show="propertyName === 'age'" ng-class="{reverse: reverse}"></span>
	             </th>
	           </tr>
	           <tr ng-repeat="friend in friends">
	             <td>{{friend.name}}</td>
	             <td>{{friend.phone}}</td>
	             <td>{{friend.age}}</td>
	           </tr>
	         </table>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('orderByExample3', [])
	         .controller('ExampleController', ['$scope', 'orderByFilter', function($scope, orderBy) {
	           var friends = [
	             {name: 'John',   phone: '555-1212',  age: 10},
	             {name: 'Mary',   phone: '555-9876',  age: 19},
	             {name: 'Mike',   phone: '555-4321',  age: 21},
	             {name: 'Adam',   phone: '555-5678',  age: 35},
	             {name: 'Julie',  phone: '555-8765',  age: 29}
	           ];
	
	           $scope.propertyName = 'age';
	           $scope.reverse = true;
	           $scope.friends = orderBy(friends, $scope.propertyName, $scope.reverse);
	
	           $scope.sortBy = function(propertyName) {
	             $scope.reverse = (propertyName !== null && $scope.propertyName === propertyName)
	                 ? !$scope.reverse : false;
	             $scope.propertyName = propertyName;
	             $scope.friends = orderBy(friends, $scope.propertyName, $scope.reverse);
	           };
	         }]);
	     </file>
	     <file name="style.css">
	       .friends {
	         border-collapse: collapse;
	       }
	
	       .friends th {
	         border-bottom: 1px solid;
	       }
	       .friends td, .friends th {
	         border-left: 1px solid;
	         padding: 5px 10px;
	       }
	       .friends td:first-child, .friends th:first-child {
	         border-left: none;
	       }
	
	       .sortorder:after {
	         content: '\25b2';   // BLACK UP-POINTING TRIANGLE
	       }
	       .sortorder.reverse:after {
	         content: '\25bc';   // BLACK DOWN-POINTING TRIANGLE
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       // Element locators
	       var unsortButton = element(by.partialButtonText('unsorted'));
	       var nameHeader = element(by.partialButtonText('Name'));
	       var phoneHeader = element(by.partialButtonText('Phone'));
	       var ageHeader = element(by.partialButtonText('Age'));
	       var firstName = element(by.repeater('friends').column('friend.name').row(0));
	       var lastName = element(by.repeater('friends').column('friend.name').row(4));
	
	       it('should sort friends by some property, when clicking on the column header', function() {
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');
	
	         phoneHeader.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Mary');
	
	         nameHeader.click();
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('Mike');
	
	         ageHeader.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Adam');
	       });
	
	       it('should sort friends in reverse order, when clicking on the same column', function() {
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');
	
	         ageHeader.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Adam');
	
	         ageHeader.click();
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');
	       });
	
	       it('should restore the original order, when clicking "Set to unsorted"', function() {
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');
	
	         unsortButton.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Julie');
	       });
	     </file>
	   </example>
	 * <hr />
	 *
	 * @example
	 * ### Using a custom comparator
	 *
	 * If you have very specific requirements about the way items are sorted, you can pass your own
	 * comparator function. For example, you might need to compare some strings in a locale-sensitive
	 * way. (When specifying a custom comparator, you also need to pass a value for the `reverse`
	 * argument - passing `false` retains the default sorting order, i.e. ascending.)
	 *
	   <example name="orderBy-custom-comparator" module="orderByExample4">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <div class="friends-container custom-comparator">
	           <h3>Locale-sensitive Comparator</h3>
	           <table class="friends">
	             <tr>
	               <th>Name</th>
	               <th>Favorite Letter</th>
	             </tr>
	             <tr ng-repeat="friend in friends | orderBy:'favoriteLetter':false:localeSensitiveComparator">
	               <td>{{friend.name}}</td>
	               <td>{{friend.favoriteLetter}}</td>
	             </tr>
	           </table>
	         </div>
	         <div class="friends-container default-comparator">
	           <h3>Default Comparator</h3>
	           <table class="friends">
	             <tr>
	               <th>Name</th>
	               <th>Favorite Letter</th>
	             </tr>
	             <tr ng-repeat="friend in friends | orderBy:'favoriteLetter'">
	               <td>{{friend.name}}</td>
	               <td>{{friend.favoriteLetter}}</td>
	             </tr>
	           </table>
	         </div>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('orderByExample4', [])
	         .controller('ExampleController', ['$scope', function($scope) {
	           $scope.friends = [
	             {name: 'John',   favoriteLetter: 'Ä'},
	             {name: 'Mary',   favoriteLetter: 'Ü'},
	             {name: 'Mike',   favoriteLetter: 'Ö'},
	             {name: 'Adam',   favoriteLetter: 'H'},
	             {name: 'Julie',  favoriteLetter: 'Z'}
	           ];
	
	           $scope.localeSensitiveComparator = function(v1, v2) {
	             // If we don't get strings, just compare by index
	             if (v1.type !== 'string' || v2.type !== 'string') {
	               return (v1.index < v2.index) ? -1 : 1;
	             }
	
	             // Compare strings alphabetically, taking locale into account
	             return v1.value.localeCompare(v2.value);
	           };
	         }]);
	     </file>
	     <file name="style.css">
	       .friends-container {
	         display: inline-block;
	         margin: 0 30px;
	       }
	
	       .friends {
	         border-collapse: collapse;
	       }
	
	       .friends th {
	         border-bottom: 1px solid;
	       }
	       .friends td, .friends th {
	         border-left: 1px solid;
	         padding: 5px 10px;
	       }
	       .friends td:first-child, .friends th:first-child {
	         border-left: none;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       // Element locators
	       var container = element(by.css('.custom-comparator'));
	       var names = container.all(by.repeater('friends').column('friend.name'));
	
	       it('should sort friends by favorite letter (in correct alphabetical order)', function() {
	         expect(names.get(0).getText()).toBe('John');
	         expect(names.get(1).getText()).toBe('Adam');
	         expect(names.get(2).getText()).toBe('Mike');
	         expect(names.get(3).getText()).toBe('Mary');
	         expect(names.get(4).getText()).toBe('Julie');
	       });
	     </file>
	   </example>
	 *
	 */orderByFilter.$inject=['$parse'];function orderByFilter($parse){return function(array,sortPredicate,reverseOrder,compareFn){if(array==null)return array;if(!isArrayLike(array)){throw minErr('orderBy')('notarray','Expected array but received: {0}',array);}if(!isArray(sortPredicate)){sortPredicate=[sortPredicate];}if(sortPredicate.length===0){sortPredicate=['+'];}var predicates=processPredicates(sortPredicate);var descending=reverseOrder?-1:1;// Define the `compare()` function. Use a default comparator if none is specified.
	var compare=isFunction(compareFn)?compareFn:defaultCompare;// The next three lines are a version of a Swartzian Transform idiom from Perl
	// (sometimes called the Decorate-Sort-Undecorate idiom)
	// See https://en.wikipedia.org/wiki/Schwartzian_transform
	var compareValues=Array.prototype.map.call(array,getComparisonObject);compareValues.sort(doComparison);array=compareValues.map(function(item){return item.value;});return array;function getComparisonObject(value,index){// NOTE: We are adding an extra `tieBreaker` value based on the element's index.
	// This will be used to keep the sort stable when none of the input predicates can
	// distinguish between two elements.
	return{value:value,tieBreaker:{value:index,type:'number',index:index},predicateValues:predicates.map(function(predicate){return getPredicateValue(predicate.get(value),index);})};}function doComparison(v1,v2){for(var i=0,ii=predicates.length;i<ii;i++){var result=compare(v1.predicateValues[i],v2.predicateValues[i]);if(result){return result*predicates[i].descending*descending;}}return compare(v1.tieBreaker,v2.tieBreaker)*descending;}};function processPredicates(sortPredicates){return sortPredicates.map(function(predicate){var descending=1,get=identity;if(isFunction(predicate)){get=predicate;}else if(isString(predicate)){if(predicate.charAt(0)==='+'||predicate.charAt(0)==='-'){descending=predicate.charAt(0)==='-'?-1:1;predicate=predicate.substring(1);}if(predicate!==''){get=$parse(predicate);if(get.constant){var key=get();get=function get(value){return value[key];};}}}return{get:get,descending:descending};});}function isPrimitive(value){switch(typeof value==='undefined'?'undefined':_typeof(value)){case'number':/* falls through */case'boolean':/* falls through */case'string':return true;default:return false;}}function objectValue(value){// If `valueOf` is a valid function use that
	if(isFunction(value.valueOf)){value=value.valueOf();if(isPrimitive(value))return value;}// If `toString` is a valid function and not the one from `Object.prototype` use that
	if(hasCustomToString(value)){value=value.toString();if(isPrimitive(value))return value;}return value;}function getPredicateValue(value,index){var type=typeof value==='undefined'?'undefined':_typeof(value);if(value===null){type='string';value='null';}else if(type==='object'){value=objectValue(value);}return{value:value,type:type,index:index};}function defaultCompare(v1,v2){var result=0;var type1=v1.type;var type2=v2.type;if(type1===type2){var value1=v1.value;var value2=v2.value;if(type1==='string'){// Compare strings case-insensitively
	value1=value1.toLowerCase();value2=value2.toLowerCase();}else if(type1==='object'){// For basic objects, use the position of the object
	// in the collection instead of the value
	if(isObject(value1))value1=v1.index;if(isObject(value2))value2=v2.index;}if(value1!==value2){result=value1<value2?-1:1;}}else{result=type1<type2?-1:1;}return result;}}function ngDirective(directive){if(isFunction(directive)){directive={link:directive};}directive.restrict=directive.restrict||'AC';return valueFn(directive);}/**
	 * @ngdoc directive
	 * @name a
	 * @restrict E
	 *
	 * @description
	 * Modifies the default behavior of the html a tag so that the default action is prevented when
	 * the href attribute is empty.
	 *
	 * For dynamically creating `href` attributes for a tags, see the {@link ng.ngHref `ngHref`} directive.
	 */var htmlAnchorDirective=valueFn({restrict:'E',compile:function compile(element,attr){if(!attr.href&&!attr.xlinkHref){return function(scope,element){// If the linked element is not an anchor tag anymore, do nothing
	if(element[0].nodeName.toLowerCase()!=='a')return;// SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
	var href=toString.call(element.prop('href'))==='[object SVGAnimatedString]'?'xlink:href':'href';element.on('click',function(event){// if we have no href url, then don't navigate anywhere.
	if(!element.attr(href)){event.preventDefault();}});};}}});/**
	 * @ngdoc directive
	 * @name ngHref
	 * @restrict A
	 * @priority 99
	 *
	 * @description
	 * Using Angular markup like `{{hash}}` in an href attribute will
	 * make the link go to the wrong URL if the user clicks it before
	 * Angular has a chance to replace the `{{hash}}` markup with its
	 * value. Until Angular replaces the markup the link will be broken
	 * and will most likely return a 404 error. The `ngHref` directive
	 * solves this problem.
	 *
	 * The wrong way to write it:
	 * ```html
	 * <a href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
	 * ```
	 *
	 * The correct way to write it:
	 * ```html
	 * <a ng-href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
	 * ```
	 *
	 * @element A
	 * @param {template} ngHref any string which can contain `{{}}` markup.
	 *
	 * @example
	 * This example shows various combinations of `href`, `ng-href` and `ng-click` attributes
	 * in links and their different behaviors:
	    <example name="ng-href">
	      <file name="index.html">
	        <input ng-model="value" /><br />
	        <a id="link-1" href ng-click="value = 1">link 1</a> (link, don't reload)<br />
	        <a id="link-2" href="" ng-click="value = 2">link 2</a> (link, don't reload)<br />
	        <a id="link-3" ng-href="/{{'123'}}">link 3</a> (link, reload!)<br />
	        <a id="link-4" href="" name="xx" ng-click="value = 4">anchor</a> (link, don't reload)<br />
	        <a id="link-5" name="xxx" ng-click="value = 5">anchor</a> (no link)<br />
	        <a id="link-6" ng-href="{{value}}">link</a> (link, change location)
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should execute ng-click but not reload when href without value', function() {
	          element(by.id('link-1')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('1');
	          expect(element(by.id('link-1')).getAttribute('href')).toBe('');
	        });
	
	        it('should execute ng-click but not reload when href empty string', function() {
	          element(by.id('link-2')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('2');
	          expect(element(by.id('link-2')).getAttribute('href')).toBe('');
	        });
	
	        it('should execute ng-click and change url when ng-href specified', function() {
	          expect(element(by.id('link-3')).getAttribute('href')).toMatch(/\/123$/);
	
	          element(by.id('link-3')).click();
	
	          // At this point, we navigate away from an Angular page, so we need
	          // to use browser.driver to get the base webdriver.
	
	          browser.wait(function() {
	            return browser.driver.getCurrentUrl().then(function(url) {
	              return url.match(/\/123$/);
	            });
	          }, 5000, 'page should navigate to /123');
	        });
	
	        it('should execute ng-click but not reload when href empty string and name specified', function() {
	          element(by.id('link-4')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('4');
	          expect(element(by.id('link-4')).getAttribute('href')).toBe('');
	        });
	
	        it('should execute ng-click but not reload when no href but name specified', function() {
	          element(by.id('link-5')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('5');
	          expect(element(by.id('link-5')).getAttribute('href')).toBe(null);
	        });
	
	        it('should only change url when only ng-href', function() {
	          element(by.model('value')).clear();
	          element(by.model('value')).sendKeys('6');
	          expect(element(by.id('link-6')).getAttribute('href')).toMatch(/\/6$/);
	
	          element(by.id('link-6')).click();
	
	          // At this point, we navigate away from an Angular page, so we need
	          // to use browser.driver to get the base webdriver.
	          browser.wait(function() {
	            return browser.driver.getCurrentUrl().then(function(url) {
	              return url.match(/\/6$/);
	            });
	          }, 5000, 'page should navigate to /6');
	        });
	      </file>
	    </example>
	 *//**
	 * @ngdoc directive
	 * @name ngSrc
	 * @restrict A
	 * @priority 99
	 *
	 * @description
	 * Using Angular markup like `{{hash}}` in a `src` attribute doesn't
	 * work right: The browser will fetch from the URL with the literal
	 * text `{{hash}}` until Angular replaces the expression inside
	 * `{{hash}}`. The `ngSrc` directive solves this problem.
	 *
	 * The buggy way to write it:
	 * ```html
	 * <img src="http://www.gravatar.com/avatar/{{hash}}" alt="Description"/>
	 * ```
	 *
	 * The correct way to write it:
	 * ```html
	 * <img ng-src="http://www.gravatar.com/avatar/{{hash}}" alt="Description" />
	 * ```
	 *
	 * @element IMG
	 * @param {template} ngSrc any string which can contain `{{}}` markup.
	 *//**
	 * @ngdoc directive
	 * @name ngSrcset
	 * @restrict A
	 * @priority 99
	 *
	 * @description
	 * Using Angular markup like `{{hash}}` in a `srcset` attribute doesn't
	 * work right: The browser will fetch from the URL with the literal
	 * text `{{hash}}` until Angular replaces the expression inside
	 * `{{hash}}`. The `ngSrcset` directive solves this problem.
	 *
	 * The buggy way to write it:
	 * ```html
	 * <img srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description"/>
	 * ```
	 *
	 * The correct way to write it:
	 * ```html
	 * <img ng-srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description" />
	 * ```
	 *
	 * @element IMG
	 * @param {template} ngSrcset any string which can contain `{{}}` markup.
	 *//**
	 * @ngdoc directive
	 * @name ngDisabled
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 *
	 * This directive sets the `disabled` attribute on the element (typically a form control,
	 * e.g. `input`, `button`, `select` etc.) if the
	 * {@link guide/expression expression} inside `ngDisabled` evaluates to truthy.
	 *
	 * A special directive is necessary because we cannot use interpolation inside the `disabled`
	 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
	 *
	 * @example
	    <example name="ng-disabled">
	      <file name="index.html">
	        <label>Click me to toggle: <input type="checkbox" ng-model="checked"></label><br/>
	        <button ng-model="button" ng-disabled="checked">Button</button>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should toggle button', function() {
	          expect(element(by.css('button')).getAttribute('disabled')).toBeFalsy();
	          element(by.model('checked')).click();
	          expect(element(by.css('button')).getAttribute('disabled')).toBeTruthy();
	        });
	      </file>
	    </example>
	 *
	 * @element INPUT
	 * @param {expression} ngDisabled If the {@link guide/expression expression} is truthy,
	 *     then the `disabled` attribute will be set on the element
	 *//**
	 * @ngdoc directive
	 * @name ngChecked
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 * Sets the `checked` attribute on the element, if the expression inside `ngChecked` is truthy.
	 *
	 * Note that this directive should not be used together with {@link ngModel `ngModel`},
	 * as this can lead to unexpected behavior.
	 *
	 * A special directive is necessary because we cannot use interpolation inside the `checked`
	 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
	 *
	 * @example
	    <example name="ng-checked">
	      <file name="index.html">
	        <label>Check me to check both: <input type="checkbox" ng-model="master"></label><br/>
	        <input id="checkSlave" type="checkbox" ng-checked="master" aria-label="Slave input">
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should check both checkBoxes', function() {
	          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeFalsy();
	          element(by.model('master')).click();
	          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeTruthy();
	        });
	      </file>
	    </example>
	 *
	 * @element INPUT
	 * @param {expression} ngChecked If the {@link guide/expression expression} is truthy,
	 *     then the `checked` attribute will be set on the element
	 *//**
	 * @ngdoc directive
	 * @name ngReadonly
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 *
	 * Sets the `readonly` attribute on the element, if the expression inside `ngReadonly` is truthy.
	 * Note that `readonly` applies only to `input` elements with specific types. [See the input docs on
	 * MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) for more information.
	 *
	 * A special directive is necessary because we cannot use interpolation inside the `readonly`
	 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
	 *
	 * @example
	    <example name="ng-readonly">
	      <file name="index.html">
	        <label>Check me to make text readonly: <input type="checkbox" ng-model="checked"></label><br/>
	        <input type="text" ng-readonly="checked" value="I'm Angular" aria-label="Readonly field" />
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should toggle readonly attr', function() {
	          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeFalsy();
	          element(by.model('checked')).click();
	          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeTruthy();
	        });
	      </file>
	    </example>
	 *
	 * @element INPUT
	 * @param {expression} ngReadonly If the {@link guide/expression expression} is truthy,
	 *     then special attribute "readonly" will be set on the element
	 *//**
	 * @ngdoc directive
	 * @name ngSelected
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 *
	 * Sets the `selected` attribute on the element, if the expression inside `ngSelected` is truthy.
	 *
	 * A special directive is necessary because we cannot use interpolation inside the `selected`
	 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
	 *
	 * <div class="alert alert-warning">
	 *   **Note:** `ngSelected` does not interact with the `select` and `ngModel` directives, it only
	 *   sets the `selected` attribute on the element. If you are using `ngModel` on the select, you
	 *   should not use `ngSelected` on the options, as `ngModel` will set the select value and
	 *   selected options.
	 * </div>
	 *
	 * @example
	    <example name="ng-selected">
	      <file name="index.html">
	        <label>Check me to select: <input type="checkbox" ng-model="selected"></label><br/>
	        <select aria-label="ngSelected demo">
	          <option>Hello!</option>
	          <option id="greet" ng-selected="selected">Greetings!</option>
	        </select>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should select Greetings!', function() {
	          expect(element(by.id('greet')).getAttribute('selected')).toBeFalsy();
	          element(by.model('selected')).click();
	          expect(element(by.id('greet')).getAttribute('selected')).toBeTruthy();
	        });
	      </file>
	    </example>
	 *
	 * @element OPTION
	 * @param {expression} ngSelected If the {@link guide/expression expression} is truthy,
	 *     then special attribute "selected" will be set on the element
	 *//**
	 * @ngdoc directive
	 * @name ngOpen
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 *
	 * Sets the `open` attribute on the element, if the expression inside `ngOpen` is truthy.
	 *
	 * A special directive is necessary because we cannot use interpolation inside the `open`
	 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
	 *
	 * ## A note about browser compatibility
	 *
	 * Edge, Firefox, and Internet Explorer do not support the `details` element, it is
	 * recommended to use {@link ng.ngShow} and {@link ng.ngHide} instead.
	 *
	 * @example
	     <example name="ng-open">
	       <file name="index.html">
	         <label>Check me check multiple: <input type="checkbox" ng-model="open"></label><br/>
	         <details id="details" ng-open="open">
	            <summary>Show/Hide me</summary>
	         </details>
	       </file>
	       <file name="protractor.js" type="protractor">
	         it('should toggle open', function() {
	           expect(element(by.id('details')).getAttribute('open')).toBeFalsy();
	           element(by.model('open')).click();
	           expect(element(by.id('details')).getAttribute('open')).toBeTruthy();
	         });
	       </file>
	     </example>
	 *
	 * @element DETAILS
	 * @param {expression} ngOpen If the {@link guide/expression expression} is truthy,
	 *     then special attribute "open" will be set on the element
	 */var ngAttributeAliasDirectives={};// boolean attrs are evaluated
	forEach(BOOLEAN_ATTR,function(propName,attrName){// binding to multiple is not supported
	if(propName==='multiple')return;function defaultLinkFn(scope,element,attr){scope.$watch(attr[normalized],function ngBooleanAttrWatchAction(value){attr.$set(attrName,!!value);});}var normalized=directiveNormalize('ng-'+attrName);var linkFn=defaultLinkFn;if(propName==='checked'){linkFn=function linkFn(scope,element,attr){// ensuring ngChecked doesn't interfere with ngModel when both are set on the same input
	if(attr.ngModel!==attr[normalized]){defaultLinkFn(scope,element,attr);}};}ngAttributeAliasDirectives[normalized]=function(){return{restrict:'A',priority:100,link:linkFn};};});// aliased input attrs are evaluated
	forEach(ALIASED_ATTR,function(htmlAttr,ngAttr){ngAttributeAliasDirectives[ngAttr]=function(){return{priority:100,link:function link(scope,element,attr){//special case ngPattern when a literal regular expression value
	//is used as the expression (this way we don't have to watch anything).
	if(ngAttr==='ngPattern'&&attr.ngPattern.charAt(0)==='/'){var match=attr.ngPattern.match(REGEX_STRING_REGEXP);if(match){attr.$set('ngPattern',new RegExp(match[1],match[2]));return;}}scope.$watch(attr[ngAttr],function ngAttrAliasWatchAction(value){attr.$set(ngAttr,value);});}};};});// ng-src, ng-srcset, ng-href are interpolated
	forEach(['src','srcset','href'],function(attrName){var normalized=directiveNormalize('ng-'+attrName);ngAttributeAliasDirectives[normalized]=function(){return{priority:99,// it needs to run after the attributes are interpolated
	link:function link(scope,element,attr){var propName=attrName,name=attrName;if(attrName==='href'&&toString.call(element.prop('href'))==='[object SVGAnimatedString]'){name='xlinkHref';attr.$attr[name]='xlink:href';propName=null;}attr.$observe(normalized,function(value){if(!value){if(attrName==='href'){attr.$set(name,null);}return;}attr.$set(name,value);// Support: IE 9-11 only
	// On IE, if "ng:src" directive declaration is used and "src" attribute doesn't exist
	// then calling element.setAttribute('src', 'foo') doesn't do anything, so we need
	// to set the property as well to achieve the desired effect.
	// We use attr[attrName] value since $set can sanitize the url.
	if(msie&&propName)element.prop(propName,attr[name]);});}};};});/* global -nullFormCtrl, -PENDING_CLASS, -SUBMITTED_CLASS
	 */var nullFormCtrl={$addControl:noop,$$renameControl:nullFormRenameControl,$removeControl:noop,$setValidity:noop,$setDirty:noop,$setPristine:noop,$setSubmitted:noop},PENDING_CLASS='ng-pending',SUBMITTED_CLASS='ng-submitted';function nullFormRenameControl(control,name){control.$name=name;}/**
	 * @ngdoc type
	 * @name form.FormController
	 *
	 * @property {boolean} $pristine True if user has not interacted with the form yet.
	 * @property {boolean} $dirty True if user has already interacted with the form.
	 * @property {boolean} $valid True if all of the containing forms and controls are valid.
	 * @property {boolean} $invalid True if at least one containing control or form is invalid.
	 * @property {boolean} $pending True if at least one containing control or form is pending.
	 * @property {boolean} $submitted True if user has submitted the form even if its invalid.
	 *
	 * @property {Object} $error Is an object hash, containing references to controls or
	 *  forms with failing validators, where:
	 *
	 *  - keys are validation tokens (error names),
	 *  - values are arrays of controls or forms that have a failing validator for given error name.
	 *
	 *  Built-in validation tokens:
	 *
	 *  - `email`
	 *  - `max`
	 *  - `maxlength`
	 *  - `min`
	 *  - `minlength`
	 *  - `number`
	 *  - `pattern`
	 *  - `required`
	 *  - `url`
	 *  - `date`
	 *  - `datetimelocal`
	 *  - `time`
	 *  - `week`
	 *  - `month`
	 *
	 * @description
	 * `FormController` keeps track of all its controls and nested forms as well as the state of them,
	 * such as being valid/invalid or dirty/pristine.
	 *
	 * Each {@link ng.directive:form form} directive creates an instance
	 * of `FormController`.
	 *
	 *///asks for $scope to fool the BC controller module
	FormController.$inject=['$element','$attrs','$scope','$animate','$interpolate'];function FormController($element,$attrs,$scope,$animate,$interpolate){this.$$controls=[];// init state
	this.$error={};this.$$success={};this.$pending=undefined;this.$name=$interpolate($attrs.name||$attrs.ngForm||'')($scope);this.$dirty=false;this.$pristine=true;this.$valid=true;this.$invalid=false;this.$submitted=false;this.$$parentForm=nullFormCtrl;this.$$element=$element;this.$$animate=$animate;setupValidity(this);}FormController.prototype={/**
	   * @ngdoc method
	   * @name form.FormController#$rollbackViewValue
	   *
	   * @description
	   * Rollback all form controls pending updates to the `$modelValue`.
	   *
	   * Updates may be pending by a debounced event or because the input is waiting for a some future
	   * event defined in `ng-model-options`. This method is typically needed by the reset button of
	   * a form that uses `ng-model-options` to pend updates.
	   */$rollbackViewValue:function $rollbackViewValue(){forEach(this.$$controls,function(control){control.$rollbackViewValue();});},/**
	   * @ngdoc method
	   * @name form.FormController#$commitViewValue
	   *
	   * @description
	   * Commit all form controls pending updates to the `$modelValue`.
	   *
	   * Updates may be pending by a debounced event or because the input is waiting for a some future
	   * event defined in `ng-model-options`. This method is rarely needed as `NgModelController`
	   * usually handles calling this in response to input events.
	   */$commitViewValue:function $commitViewValue(){forEach(this.$$controls,function(control){control.$commitViewValue();});},/**
	   * @ngdoc method
	   * @name form.FormController#$addControl
	   * @param {object} control control object, either a {@link form.FormController} or an
	   * {@link ngModel.NgModelController}
	   *
	   * @description
	   * Register a control with the form. Input elements using ngModelController do this automatically
	   * when they are linked.
	   *
	   * Note that the current state of the control will not be reflected on the new parent form. This
	   * is not an issue with normal use, as freshly compiled and linked controls are in a `$pristine`
	   * state.
	   *
	   * However, if the method is used programmatically, for example by adding dynamically created controls,
	   * or controls that have been previously removed without destroying their corresponding DOM element,
	   * it's the developers responsibility to make sure the current state propagates to the parent form.
	   *
	   * For example, if an input control is added that is already `$dirty` and has `$error` properties,
	   * calling `$setDirty()` and `$validate()` afterwards will propagate the state to the parent form.
	   */$addControl:function $addControl(control){// Breaking change - before, inputs whose name was "hasOwnProperty" were quietly ignored
	// and not added to the scope.  Now we throw an error.
	assertNotHasOwnProperty(control.$name,'input');this.$$controls.push(control);if(control.$name){this[control.$name]=control;}control.$$parentForm=this;},// Private API: rename a form control
	$$renameControl:function $$renameControl(control,newName){var oldName=control.$name;if(this[oldName]===control){delete this[oldName];}this[newName]=control;control.$name=newName;},/**
	   * @ngdoc method
	   * @name form.FormController#$removeControl
	   * @param {object} control control object, either a {@link form.FormController} or an
	   * {@link ngModel.NgModelController}
	   *
	   * @description
	   * Deregister a control from the form.
	   *
	   * Input elements using ngModelController do this automatically when they are destroyed.
	   *
	   * Note that only the removed control's validation state (`$errors`etc.) will be removed from the
	   * form. `$dirty`, `$submitted` states will not be changed, because the expected behavior can be
	   * different from case to case. For example, removing the only `$dirty` control from a form may or
	   * may not mean that the form is still `$dirty`.
	   */$removeControl:function $removeControl(control){if(control.$name&&this[control.$name]===control){delete this[control.$name];}forEach(this.$pending,function(value,name){// eslint-disable-next-line no-invalid-this
	this.$setValidity(name,null,control);},this);forEach(this.$error,function(value,name){// eslint-disable-next-line no-invalid-this
	this.$setValidity(name,null,control);},this);forEach(this.$$success,function(value,name){// eslint-disable-next-line no-invalid-this
	this.$setValidity(name,null,control);},this);arrayRemove(this.$$controls,control);control.$$parentForm=nullFormCtrl;},/**
	   * @ngdoc method
	   * @name form.FormController#$setDirty
	   *
	   * @description
	   * Sets the form to a dirty state.
	   *
	   * This method can be called to add the 'ng-dirty' class and set the form to a dirty
	   * state (ng-dirty class). This method will also propagate to parent forms.
	   */$setDirty:function $setDirty(){this.$$animate.removeClass(this.$$element,PRISTINE_CLASS);this.$$animate.addClass(this.$$element,DIRTY_CLASS);this.$dirty=true;this.$pristine=false;this.$$parentForm.$setDirty();},/**
	   * @ngdoc method
	   * @name form.FormController#$setPristine
	   *
	   * @description
	   * Sets the form to its pristine state.
	   *
	   * This method sets the form's `$pristine` state to true, the `$dirty` state to false, removes
	   * the `ng-dirty` class and adds the `ng-pristine` class. Additionally, it sets the `$submitted`
	   * state to false.
	   *
	   * This method will also propagate to all the controls contained in this form.
	   *
	   * Setting a form back to a pristine state is often useful when we want to 'reuse' a form after
	   * saving or resetting it.
	   */$setPristine:function $setPristine(){this.$$animate.setClass(this.$$element,PRISTINE_CLASS,DIRTY_CLASS+' '+SUBMITTED_CLASS);this.$dirty=false;this.$pristine=true;this.$submitted=false;forEach(this.$$controls,function(control){control.$setPristine();});},/**
	   * @ngdoc method
	   * @name form.FormController#$setUntouched
	   *
	   * @description
	   * Sets the form to its untouched state.
	   *
	   * This method can be called to remove the 'ng-touched' class and set the form controls to their
	   * untouched state (ng-untouched class).
	   *
	   * Setting a form controls back to their untouched state is often useful when setting the form
	   * back to its pristine state.
	   */$setUntouched:function $setUntouched(){forEach(this.$$controls,function(control){control.$setUntouched();});},/**
	   * @ngdoc method
	   * @name form.FormController#$setSubmitted
	   *
	   * @description
	   * Sets the form to its submitted state.
	   */$setSubmitted:function $setSubmitted(){this.$$animate.addClass(this.$$element,SUBMITTED_CLASS);this.$submitted=true;this.$$parentForm.$setSubmitted();}};/**
	 * @ngdoc method
	 * @name form.FormController#$setValidity
	 *
	 * @description
	 * Sets the validity of a form control.
	 *
	 * This method will also propagate to parent forms.
	 */addSetValidityMethod({clazz:FormController,set:function set(object,property,controller){var list=object[property];if(!list){object[property]=[controller];}else{var index=list.indexOf(controller);if(index===-1){list.push(controller);}}},unset:function unset(object,property,controller){var list=object[property];if(!list){return;}arrayRemove(list,controller);if(list.length===0){delete object[property];}}});/**
	 * @ngdoc directive
	 * @name ngForm
	 * @restrict EAC
	 *
	 * @description
	 * Nestable alias of {@link ng.directive:form `form`} directive. HTML
	 * does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a
	 * sub-group of controls needs to be determined.
	 *
	 * Note: the purpose of `ngForm` is to group controls,
	 * but not to be a replacement for the `<form>` tag with all of its capabilities
	 * (e.g. posting to the server, ...).
	 *
	 * @param {string=} ngForm|name Name of the form. If specified, the form controller will be published into
	 *                       related scope, under this name.
	 *
	 *//**
	 * @ngdoc directive
	 * @name form
	 * @restrict E
	 *
	 * @description
	 * Directive that instantiates
	 * {@link form.FormController FormController}.
	 *
	 * If the `name` attribute is specified, the form controller is published onto the current scope under
	 * this name.
	 *
	 * # Alias: {@link ng.directive:ngForm `ngForm`}
	 *
	 * In Angular, forms can be nested. This means that the outer form is valid when all of the child
	 * forms are valid as well. However, browsers do not allow nesting of `<form>` elements, so
	 * Angular provides the {@link ng.directive:ngForm `ngForm`} directive, which behaves identically to
	 * `form` but can be nested. Nested forms can be useful, for example, if the validity of a sub-group
	 * of controls needs to be determined.
	 *
	 * # CSS classes
	 *  - `ng-valid` is set if the form is valid.
	 *  - `ng-invalid` is set if the form is invalid.
	 *  - `ng-pending` is set if the form is pending.
	 *  - `ng-pristine` is set if the form is pristine.
	 *  - `ng-dirty` is set if the form is dirty.
	 *  - `ng-submitted` is set if the form was submitted.
	 *
	 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
	 *
	 *
	 * # Submitting a form and preventing the default action
	 *
	 * Since the role of forms in client-side Angular applications is different than in classical
	 * roundtrip apps, it is desirable for the browser not to translate the form submission into a full
	 * page reload that sends the data to the server. Instead some javascript logic should be triggered
	 * to handle the form submission in an application-specific way.
	 *
	 * For this reason, Angular prevents the default action (form submission to the server) unless the
	 * `<form>` element has an `action` attribute specified.
	 *
	 * You can use one of the following two ways to specify what javascript method should be called when
	 * a form is submitted:
	 *
	 * - {@link ng.directive:ngSubmit ngSubmit} directive on the form element
	 * - {@link ng.directive:ngClick ngClick} directive on the first
	  *  button or input field of type submit (input[type=submit])
	 *
	 * To prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}
	 * or {@link ng.directive:ngClick ngClick} directives.
	 * This is because of the following form submission rules in the HTML specification:
	 *
	 * - If a form has only one input field then hitting enter in this field triggers form submit
	 * (`ngSubmit`)
	 * - if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter
	 * doesn't trigger submit
	 * - if a form has one or more input fields and one or more buttons or input[type=submit] then
	 * hitting enter in any of the input fields will trigger the click handler on the *first* button or
	 * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)
	 *
	 * Any pending `ngModelOptions` changes will take place immediately when an enclosing form is
	 * submitted. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
	 * to have access to the updated model.
	 *
	 * ## Animation Hooks
	 *
	 * Animations in ngForm are triggered when any of the associated CSS classes are added and removed.
	 * These classes are: `.ng-pristine`, `.ng-dirty`, `.ng-invalid` and `.ng-valid` as well as any
	 * other validations that are performed within the form. Animations in ngForm are similar to how
	 * they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well
	 * as JS animations.
	 *
	 * The following example shows a simple way to utilize CSS transitions to style a form element
	 * that has been rendered as invalid after it has been validated:
	 *
	 * <pre>
	 * //be sure to include ngAnimate as a module to hook into more
	 * //advanced animations
	 * .my-form {
	 *   transition:0.5s linear all;
	 *   background: white;
	 * }
	 * .my-form.ng-invalid {
	 *   background: red;
	 *   color:white;
	 * }
	 * </pre>
	 *
	 * @example
	    <example name="ng-form" deps="angular-animate.js" animations="true" fixBase="true" module="formExample">
	      <file name="index.html">
	       <script>
	         angular.module('formExample', [])
	           .controller('FormController', ['$scope', function($scope) {
	             $scope.userType = 'guest';
	           }]);
	       </script>
	       <style>
	        .my-form {
	          transition:all linear 0.5s;
	          background: transparent;
	        }
	        .my-form.ng-invalid {
	          background: red;
	        }
	       </style>
	       <form name="myForm" ng-controller="FormController" class="my-form">
	         userType: <input name="input" ng-model="userType" required>
	         <span class="error" ng-show="myForm.input.$error.required">Required!</span><br>
	         <code>userType = {{userType}}</code><br>
	         <code>myForm.input.$valid = {{myForm.input.$valid}}</code><br>
	         <code>myForm.input.$error = {{myForm.input.$error}}</code><br>
	         <code>myForm.$valid = {{myForm.$valid}}</code><br>
	         <code>myForm.$error.required = {{!!myForm.$error.required}}</code><br>
	        </form>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should initialize to model', function() {
	          var userType = element(by.binding('userType'));
	          var valid = element(by.binding('myForm.input.$valid'));
	
	          expect(userType.getText()).toContain('guest');
	          expect(valid.getText()).toContain('true');
	        });
	
	        it('should be invalid if empty', function() {
	          var userType = element(by.binding('userType'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var userInput = element(by.model('userType'));
	
	          userInput.clear();
	          userInput.sendKeys('');
	
	          expect(userType.getText()).toEqual('userType =');
	          expect(valid.getText()).toContain('false');
	        });
	      </file>
	    </example>
	 *
	 * @param {string=} name Name of the form. If specified, the form controller will be published into
	 *                       related scope, under this name.
	 */var formDirectiveFactory=function formDirectiveFactory(isNgForm){return['$timeout','$parse',function($timeout,$parse){var formDirective={name:'form',restrict:isNgForm?'EAC':'E',require:['form','^^?form'],//first is the form's own ctrl, second is an optional parent form
	controller:FormController,compile:function ngFormCompile(formElement,attr){// Setup initial state of the control
	formElement.addClass(PRISTINE_CLASS).addClass(VALID_CLASS);var nameAttr=attr.name?'name':isNgForm&&attr.ngForm?'ngForm':false;return{pre:function ngFormPreLink(scope,formElement,attr,ctrls){var controller=ctrls[0];// if `action` attr is not present on the form, prevent the default action (submission)
	if(!('action'in attr)){// we can't use jq events because if a form is destroyed during submission the default
	// action is not prevented. see #1238
	//
	// IE 9 is not affected because it doesn't fire a submit event and try to do a full
	// page reload if the form was destroyed by submission of the form via a click handler
	// on a button in the form. Looks like an IE9 specific bug.
	var handleFormSubmission=function handleFormSubmission(event){scope.$apply(function(){controller.$commitViewValue();controller.$setSubmitted();});event.preventDefault();};formElement[0].addEventListener('submit',handleFormSubmission);// unregister the preventDefault listener so that we don't not leak memory but in a
	// way that will achieve the prevention of the default action.
	formElement.on('$destroy',function(){$timeout(function(){formElement[0].removeEventListener('submit',handleFormSubmission);},0,false);});}var parentFormCtrl=ctrls[1]||controller.$$parentForm;parentFormCtrl.$addControl(controller);var setter=nameAttr?getSetter(controller.$name):noop;if(nameAttr){setter(scope,controller);attr.$observe(nameAttr,function(newValue){if(controller.$name===newValue)return;setter(scope,undefined);controller.$$parentForm.$$renameControl(controller,newValue);setter=getSetter(controller.$name);setter(scope,controller);});}formElement.on('$destroy',function(){controller.$$parentForm.$removeControl(controller);setter(scope,undefined);extend(controller,nullFormCtrl);//stop propagating child destruction handlers upwards
	});}};}};return formDirective;function getSetter(expression){if(expression===''){//create an assignable expression, so forms with an empty name can be renamed later
	return $parse('this[""]').assign;}return $parse(expression).assign||noop;}}];};var formDirective=formDirectiveFactory();var ngFormDirective=formDirectiveFactory(true);// helper methods
	function setupValidity(instance){instance.$$classCache={};instance.$$classCache[INVALID_CLASS]=!(instance.$$classCache[VALID_CLASS]=instance.$$element.hasClass(VALID_CLASS));}function addSetValidityMethod(context){var clazz=context.clazz,set=context.set,unset=context.unset;clazz.prototype.$setValidity=function(validationErrorKey,state,controller){if(isUndefined(state)){createAndSet(this,'$pending',validationErrorKey,controller);}else{unsetAndCleanup(this,'$pending',validationErrorKey,controller);}if(!isBoolean(state)){unset(this.$error,validationErrorKey,controller);unset(this.$$success,validationErrorKey,controller);}else{if(state){unset(this.$error,validationErrorKey,controller);set(this.$$success,validationErrorKey,controller);}else{set(this.$error,validationErrorKey,controller);unset(this.$$success,validationErrorKey,controller);}}if(this.$pending){cachedToggleClass(this,PENDING_CLASS,true);this.$valid=this.$invalid=undefined;toggleValidationCss(this,'',null);}else{cachedToggleClass(this,PENDING_CLASS,false);this.$valid=isObjectEmpty(this.$error);this.$invalid=!this.$valid;toggleValidationCss(this,'',this.$valid);}// re-read the state as the set/unset methods could have
	// combined state in this.$error[validationError] (used for forms),
	// where setting/unsetting only increments/decrements the value,
	// and does not replace it.
	var combinedState;if(this.$pending&&this.$pending[validationErrorKey]){combinedState=undefined;}else if(this.$error[validationErrorKey]){combinedState=false;}else if(this.$$success[validationErrorKey]){combinedState=true;}else{combinedState=null;}toggleValidationCss(this,validationErrorKey,combinedState);this.$$parentForm.$setValidity(validationErrorKey,combinedState,this);};function createAndSet(ctrl,name,value,controller){if(!ctrl[name]){ctrl[name]={};}set(ctrl[name],value,controller);}function unsetAndCleanup(ctrl,name,value,controller){if(ctrl[name]){unset(ctrl[name],value,controller);}if(isObjectEmpty(ctrl[name])){ctrl[name]=undefined;}}function cachedToggleClass(ctrl,className,switchValue){if(switchValue&&!ctrl.$$classCache[className]){ctrl.$$animate.addClass(ctrl.$$element,className);ctrl.$$classCache[className]=true;}else if(!switchValue&&ctrl.$$classCache[className]){ctrl.$$animate.removeClass(ctrl.$$element,className);ctrl.$$classCache[className]=false;}}function toggleValidationCss(ctrl,validationErrorKey,isValid){validationErrorKey=validationErrorKey?'-'+snake_case(validationErrorKey,'-'):'';cachedToggleClass(ctrl,VALID_CLASS+validationErrorKey,isValid===true);cachedToggleClass(ctrl,INVALID_CLASS+validationErrorKey,isValid===false);}}function isObjectEmpty(obj){if(obj){for(var prop in obj){if(obj.hasOwnProperty(prop)){return false;}}}return true;}/* global
	  VALID_CLASS: false,
	  INVALID_CLASS: false,
	  PRISTINE_CLASS: false,
	  DIRTY_CLASS: false,
	  ngModelMinErr: false
	*/// Regex code was initially obtained from SO prior to modification: https://stackoverflow.com/questions/3143070/javascript-regex-iso-datetime#answer-3143231
	var ISO_DATE_REGEXP=/^\d{4,}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+(?:[+-][0-2]\d:[0-5]\d|Z)$/;// See valid URLs in RFC3987 (http://tools.ietf.org/html/rfc3987)
	// Note: We are being more lenient, because browsers are too.
	//   1. Scheme
	//   2. Slashes
	//   3. Username
	//   4. Password
	//   5. Hostname
	//   6. Port
	//   7. Path
	//   8. Query
	//   9. Fragment
	//                 1111111111111111 222   333333    44444        55555555555555555555555     666     77777777     8888888     999
	var URL_REGEXP=/^[a-z][a-z\d.+-]*:\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\s:/?#]+|\[[a-f\d:]+])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i;// eslint-disable-next-line max-len
	var EMAIL_REGEXP=/^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;var NUMBER_REGEXP=/^\s*(-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/;var DATE_REGEXP=/^(\d{4,})-(\d{2})-(\d{2})$/;var DATETIMELOCAL_REGEXP=/^(\d{4,})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;var WEEK_REGEXP=/^(\d{4,})-W(\d\d)$/;var MONTH_REGEXP=/^(\d{4,})-(\d\d)$/;var TIME_REGEXP=/^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;var PARTIAL_VALIDATION_EVENTS='keydown wheel mousedown';var PARTIAL_VALIDATION_TYPES=createMap();forEach('date,datetime-local,month,time,week'.split(','),function(type){PARTIAL_VALIDATION_TYPES[type]=true;});var inputType={/**
	   * @ngdoc input
	   * @name input[text]
	   *
	   * @description
	   * Standard HTML text input with angular data binding, inherited by most of the `input` elements.
	   *
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} required Adds `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	   *    minlength.
	   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
	   *    any length.
	   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
	   *    that contains the regular expression body that will be converted to a regular expression
	   *    as in the ngPattern directive.
	   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	   *    If the expression evaluates to a RegExp object, then this is used directly.
	   *    If the expression evaluates to a string, then it will be converted to a RegExp
	   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	   *    `new RegExp('^abc$')`.<br />
	   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	   *    start at the index of the last search's match, thus not taking the whole input value into
	   *    account.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
	   *    This parameter is ignored for input[type=password] controls, which will never trim the
	   *    input.
	   *
	   * @example
	      <example name="text-input-directive" module="textInputExample">
	        <file name="index.html">
	         <script>
	           angular.module('textInputExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.example = {
	                 text: 'guest',
	                 word: /^\s*\w*\s*$/
	               };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>Single word:
	             <input type="text" name="input" ng-model="example.text"
	                    ng-pattern="example.word" required ng-trim="false">
	           </label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.input.$error.required">
	               Required!</span>
	             <span class="error" ng-show="myForm.input.$error.pattern">
	               Single word only!</span>
	           </div>
	           <code>text = {{example.text}}</code><br/>
	           <code>myForm.input.$valid = {{myForm.input.$valid}}</code><br/>
	           <code>myForm.input.$error = {{myForm.input.$error}}</code><br/>
	           <code>myForm.$valid = {{myForm.$valid}}</code><br/>
	           <code>myForm.$error.required = {{!!myForm.$error.required}}</code><br/>
	          </form>
	        </file>
	        <file name="protractor.js" type="protractor">
	          var text = element(by.binding('example.text'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var input = element(by.model('example.text'));
	
	          it('should initialize to model', function() {
	            expect(text.getText()).toContain('guest');
	            expect(valid.getText()).toContain('true');
	          });
	
	          it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');
	
	            expect(text.getText()).toEqual('text =');
	            expect(valid.getText()).toContain('false');
	          });
	
	          it('should be invalid if multi word', function() {
	            input.clear();
	            input.sendKeys('hello world');
	
	            expect(valid.getText()).toContain('false');
	          });
	        </file>
	      </example>
	   */'text':textInputType,/**
	     * @ngdoc input
	     * @name input[date]
	     *
	     * @description
	     * Input with date validation and transformation. In browsers that do not yet support
	     * the HTML5 date input, a text element will be used. In that case, text must be entered in a valid ISO-8601
	     * date format (yyyy-MM-dd), for example: `2009-01-06`. Since many
	     * modern browsers do not yet support this input type, it is important to provide cues to users on the
	     * expected input format via a placeholder or label.
	     *
	     * The model must always be a Date object, otherwise Angular will throw an error.
	     * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	     *
	     * The timezone to be used to read/write the `Date` instance in the model can be defined using
	     * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	     *
	     * @param {string} ngModel Assignable angular expression to data-bind to.
	     * @param {string=} name Property name of the form under which the control is published.
	     * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
	     *   valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute
	     *   (e.g. `min="{{minDate | date:'yyyy-MM-dd'}}"`). Note that `min` will also add native HTML5
	     *   constraint validation.
	     * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
	     *   a valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute
	     *   (e.g. `max="{{maxDate | date:'yyyy-MM-dd'}}"`). Note that `max` will also add native HTML5
	     *   constraint validation.
	     * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO date string
	     *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	     * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO date string
	     *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	     * @param {string=} required Sets `required` validation error key if the value is not entered.
	     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	     *    `required` when you want to data-bind to the `required` attribute.
	     * @param {string=} ngChange Angular expression to be executed when input changes due to user
	     *    interaction with the input element.
	     *
	     * @example
	     <example name="date-input-directive" module="dateInputExample">
	     <file name="index.html">
	       <script>
	          angular.module('dateInputExample', [])
	            .controller('DateController', ['$scope', function($scope) {
	              $scope.example = {
	                value: new Date(2013, 9, 22)
	              };
	            }]);
	       </script>
	       <form name="myForm" ng-controller="DateController as dateCtrl">
	          <label for="exampleInput">Pick a date in 2013:</label>
	          <input type="date" id="exampleInput" name="input" ng-model="example.value"
	              placeholder="yyyy-MM-dd" min="2013-01-01" max="2013-12-31" required />
	          <div role="alert">
	            <span class="error" ng-show="myForm.input.$error.required">
	                Required!</span>
	            <span class="error" ng-show="myForm.input.$error.date">
	                Not a valid date!</span>
	           </div>
	           <tt>value = {{example.value | date: "yyyy-MM-dd"}}</tt><br/>
	           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	       </form>
	     </file>
	     <file name="protractor.js" type="protractor">
	        var value = element(by.binding('example.value | date: "yyyy-MM-dd"'));
	        var valid = element(by.binding('myForm.input.$valid'));
	
	        // currently protractor/webdriver does not support
	        // sending keys to all known HTML5 input controls
	        // for various browsers (see https://github.com/angular/protractor/issues/562).
	        function setInput(val) {
	          // set the value of the element and force validation.
	          var scr = "var ipt = document.getElementById('exampleInput'); " +
	          "ipt.value = '" + val + "';" +
	          "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	          browser.executeScript(scr);
	        }
	
	        it('should initialize to model', function() {
	          expect(value.getText()).toContain('2013-10-22');
	          expect(valid.getText()).toContain('myForm.input.$valid = true');
	        });
	
	        it('should be invalid if empty', function() {
	          setInput('');
	          expect(value.getText()).toEqual('value =');
	          expect(valid.getText()).toContain('myForm.input.$valid = false');
	        });
	
	        it('should be invalid if over max', function() {
	          setInput('2015-01-01');
	          expect(value.getText()).toContain('');
	          expect(valid.getText()).toContain('myForm.input.$valid = false');
	        });
	     </file>
	     </example>
	     */'date':createDateInputType('date',DATE_REGEXP,createDateParser(DATE_REGEXP,['yyyy','MM','dd']),'yyyy-MM-dd'),/**
	    * @ngdoc input
	    * @name input[datetime-local]
	    *
	    * @description
	    * Input with datetime validation and transformation. In browsers that do not yet support
	    * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
	    * local datetime format (yyyy-MM-ddTHH:mm:ss), for example: `2010-12-28T14:57:00`.
	    *
	    * The model must always be a Date object, otherwise Angular will throw an error.
	    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	    *
	    * The timezone to be used to read/write the `Date` instance in the model can be defined using
	    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	    *
	    * @param {string} ngModel Assignable angular expression to data-bind to.
	    * @param {string=} name Property name of the form under which the control is published.
	    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	    *   This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation
	    *   inside this attribute (e.g. `min="{{minDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}"`).
	    *   Note that `min` will also add native HTML5 constraint validation.
	    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	    *   This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation
	    *   inside this attribute (e.g. `max="{{maxDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}"`).
	    *   Note that `max` will also add native HTML5 constraint validation.
	    * @param {(date|string)=} ngMin Sets the `min` validation error key to the Date / ISO datetime string
	    *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	    * @param {(date|string)=} ngMax Sets the `max` validation error key to the Date / ISO datetime string
	    *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	    * @param {string=} required Sets `required` validation error key if the value is not entered.
	    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	    *    `required` when you want to data-bind to the `required` attribute.
	    * @param {string=} ngChange Angular expression to be executed when input changes due to user
	    *    interaction with the input element.
	    *
	    * @example
	    <example name="datetimelocal-input-directive" module="dateExample">
	    <file name="index.html">
	      <script>
	        angular.module('dateExample', [])
	          .controller('DateController', ['$scope', function($scope) {
	            $scope.example = {
	              value: new Date(2010, 11, 28, 14, 57)
	            };
	          }]);
	      </script>
	      <form name="myForm" ng-controller="DateController as dateCtrl">
	        <label for="exampleInput">Pick a date between in 2013:</label>
	        <input type="datetime-local" id="exampleInput" name="input" ng-model="example.value"
	            placeholder="yyyy-MM-ddTHH:mm:ss" min="2001-01-01T00:00:00" max="2013-12-31T00:00:00" required />
	        <div role="alert">
	          <span class="error" ng-show="myForm.input.$error.required">
	              Required!</span>
	          <span class="error" ng-show="myForm.input.$error.datetimelocal">
	              Not a valid date!</span>
	        </div>
	        <tt>value = {{example.value | date: "yyyy-MM-ddTHH:mm:ss"}}</tt><br/>
	        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	      </form>
	    </file>
	    <file name="protractor.js" type="protractor">
	      var value = element(by.binding('example.value | date: "yyyy-MM-ddTHH:mm:ss"'));
	      var valid = element(by.binding('myForm.input.$valid'));
	
	      // currently protractor/webdriver does not support
	      // sending keys to all known HTML5 input controls
	      // for various browsers (https://github.com/angular/protractor/issues/562).
	      function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }
	
	      it('should initialize to model', function() {
	        expect(value.getText()).toContain('2010-12-28T14:57:00');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });
	
	      it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	
	      it('should be invalid if over max', function() {
	        setInput('2015-01-01T23:59:00');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	    </file>
	    </example>
	    */'datetime-local':createDateInputType('datetimelocal',DATETIMELOCAL_REGEXP,createDateParser(DATETIMELOCAL_REGEXP,['yyyy','MM','dd','HH','mm','ss','sss']),'yyyy-MM-ddTHH:mm:ss.sss'),/**
	   * @ngdoc input
	   * @name input[time]
	   *
	   * @description
	   * Input with time validation and transformation. In browsers that do not yet support
	   * the HTML5 time input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
	   * local time format (HH:mm:ss), for example: `14:57:00`. Model must be a Date object. This binding will always output a
	   * Date object to the model of January 1, 1970, or local date `new Date(1970, 0, 1, HH, mm, ss)`.
	   *
	   * The model must always be a Date object, otherwise Angular will throw an error.
	   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	   *
	   * The timezone to be used to read/write the `Date` instance in the model can be defined using
	   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	   *   This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this
	   *   attribute (e.g. `min="{{minTime | date:'HH:mm:ss'}}"`). Note that `min` will also add
	   *   native HTML5 constraint validation.
	   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	   *   This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this
	   *   attribute (e.g. `max="{{maxTime | date:'HH:mm:ss'}}"`). Note that `max` will also add
	   *   native HTML5 constraint validation.
	   * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO time string the
	   *   `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	   * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO time string the
	   *   `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	   <example name="time-input-directive" module="timeExample">
	   <file name="index.html">
	     <script>
	      angular.module('timeExample', [])
	        .controller('DateController', ['$scope', function($scope) {
	          $scope.example = {
	            value: new Date(1970, 0, 1, 14, 57, 0)
	          };
	        }]);
	     </script>
	     <form name="myForm" ng-controller="DateController as dateCtrl">
	        <label for="exampleInput">Pick a time between 8am and 5pm:</label>
	        <input type="time" id="exampleInput" name="input" ng-model="example.value"
	            placeholder="HH:mm:ss" min="08:00:00" max="17:00:00" required />
	        <div role="alert">
	          <span class="error" ng-show="myForm.input.$error.required">
	              Required!</span>
	          <span class="error" ng-show="myForm.input.$error.time">
	              Not a valid date!</span>
	        </div>
	        <tt>value = {{example.value | date: "HH:mm:ss"}}</tt><br/>
	        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	     </form>
	   </file>
	   <file name="protractor.js" type="protractor">
	      var value = element(by.binding('example.value | date: "HH:mm:ss"'));
	      var valid = element(by.binding('myForm.input.$valid'));
	
	      // currently protractor/webdriver does not support
	      // sending keys to all known HTML5 input controls
	      // for various browsers (https://github.com/angular/protractor/issues/562).
	      function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }
	
	      it('should initialize to model', function() {
	        expect(value.getText()).toContain('14:57:00');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });
	
	      it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	
	      it('should be invalid if over max', function() {
	        setInput('23:59:00');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	   </file>
	   </example>
	   */'time':createDateInputType('time',TIME_REGEXP,createDateParser(TIME_REGEXP,['HH','mm','ss','sss']),'HH:mm:ss.sss'),/**
	    * @ngdoc input
	    * @name input[week]
	    *
	    * @description
	    * Input with week-of-the-year validation and transformation to Date. In browsers that do not yet support
	    * the HTML5 week input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
	    * week format (yyyy-W##), for example: `2013-W02`.
	    *
	    * The model must always be a Date object, otherwise Angular will throw an error.
	    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	    *
	    * The timezone to be used to read/write the `Date` instance in the model can be defined using
	    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	    *
	    * @param {string} ngModel Assignable angular expression to data-bind to.
	    * @param {string=} name Property name of the form under which the control is published.
	    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	    *   This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this
	    *   attribute (e.g. `min="{{minWeek | date:'yyyy-Www'}}"`). Note that `min` will also add
	    *   native HTML5 constraint validation.
	    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	    *   This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this
	    *   attribute (e.g. `max="{{maxWeek | date:'yyyy-Www'}}"`). Note that `max` will also add
	    *   native HTML5 constraint validation.
	    * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO week string
	    *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	    * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO week string
	    *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	    * @param {string=} required Sets `required` validation error key if the value is not entered.
	    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	    *    `required` when you want to data-bind to the `required` attribute.
	    * @param {string=} ngChange Angular expression to be executed when input changes due to user
	    *    interaction with the input element.
	    *
	    * @example
	    <example name="week-input-directive" module="weekExample">
	    <file name="index.html">
	      <script>
	      angular.module('weekExample', [])
	        .controller('DateController', ['$scope', function($scope) {
	          $scope.example = {
	            value: new Date(2013, 0, 3)
	          };
	        }]);
	      </script>
	      <form name="myForm" ng-controller="DateController as dateCtrl">
	        <label>Pick a date between in 2013:
	          <input id="exampleInput" type="week" name="input" ng-model="example.value"
	                 placeholder="YYYY-W##" min="2012-W32"
	                 max="2013-W52" required />
	        </label>
	        <div role="alert">
	          <span class="error" ng-show="myForm.input.$error.required">
	              Required!</span>
	          <span class="error" ng-show="myForm.input.$error.week">
	              Not a valid date!</span>
	        </div>
	        <tt>value = {{example.value | date: "yyyy-Www"}}</tt><br/>
	        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	      </form>
	    </file>
	    <file name="protractor.js" type="protractor">
	      var value = element(by.binding('example.value | date: "yyyy-Www"'));
	      var valid = element(by.binding('myForm.input.$valid'));
	
	      // currently protractor/webdriver does not support
	      // sending keys to all known HTML5 input controls
	      // for various browsers (https://github.com/angular/protractor/issues/562).
	      function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }
	
	      it('should initialize to model', function() {
	        expect(value.getText()).toContain('2013-W01');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });
	
	      it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	
	      it('should be invalid if over max', function() {
	        setInput('2015-W01');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	    </file>
	    </example>
	    */'week':createDateInputType('week',WEEK_REGEXP,weekParser,'yyyy-Www'),/**
	   * @ngdoc input
	   * @name input[month]
	   *
	   * @description
	   * Input with month validation and transformation. In browsers that do not yet support
	   * the HTML5 month input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
	   * month format (yyyy-MM), for example: `2009-01`.
	   *
	   * The model must always be a Date object, otherwise Angular will throw an error.
	   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	   * If the model is not set to the first of the month, the next view to model update will set it
	   * to the first of the month.
	   *
	   * The timezone to be used to read/write the `Date` instance in the model can be defined using
	   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	   *   This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this
	   *   attribute (e.g. `min="{{minMonth | date:'yyyy-MM'}}"`). Note that `min` will also add
	   *   native HTML5 constraint validation.
	   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	   *   This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this
	   *   attribute (e.g. `max="{{maxMonth | date:'yyyy-MM'}}"`). Note that `max` will also add
	   *   native HTML5 constraint validation.
	   * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO week string
	   *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	   * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO week string
	   *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	   <example name="month-input-directive" module="monthExample">
	   <file name="index.html">
	     <script>
	      angular.module('monthExample', [])
	        .controller('DateController', ['$scope', function($scope) {
	          $scope.example = {
	            value: new Date(2013, 9, 1)
	          };
	        }]);
	     </script>
	     <form name="myForm" ng-controller="DateController as dateCtrl">
	       <label for="exampleInput">Pick a month in 2013:</label>
	       <input id="exampleInput" type="month" name="input" ng-model="example.value"
	          placeholder="yyyy-MM" min="2013-01" max="2013-12" required />
	       <div role="alert">
	         <span class="error" ng-show="myForm.input.$error.required">
	            Required!</span>
	         <span class="error" ng-show="myForm.input.$error.month">
	            Not a valid month!</span>
	       </div>
	       <tt>value = {{example.value | date: "yyyy-MM"}}</tt><br/>
	       <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	       <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	       <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	       <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	     </form>
	   </file>
	   <file name="protractor.js" type="protractor">
	      var value = element(by.binding('example.value | date: "yyyy-MM"'));
	      var valid = element(by.binding('myForm.input.$valid'));
	
	      // currently protractor/webdriver does not support
	      // sending keys to all known HTML5 input controls
	      // for various browsers (https://github.com/angular/protractor/issues/562).
	      function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }
	
	      it('should initialize to model', function() {
	        expect(value.getText()).toContain('2013-10');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });
	
	      it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	
	      it('should be invalid if over max', function() {
	        setInput('2015-01');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	   </file>
	   </example>
	   */'month':createDateInputType('month',MONTH_REGEXP,createDateParser(MONTH_REGEXP,['yyyy','MM']),'yyyy-MM'),/**
	   * @ngdoc input
	   * @name input[number]
	   *
	   * @description
	   * Text input with number validation and transformation. Sets the `number` validation
	   * error if not a valid number.
	   *
	   * <div class="alert alert-warning">
	   * The model must always be of type `number` otherwise Angular will throw an error.
	   * Be aware that a string containing a number is not enough. See the {@link ngModel:numfmt}
	   * error docs for more information and an example of how to convert your model if necessary.
	   * </div>
	   *
	   * ## Issues with HTML5 constraint validation
	   *
	   * In browsers that follow the
	   * [HTML5 specification](https://html.spec.whatwg.org/multipage/forms.html#number-state-%28type=number%29),
	   * `input[number]` does not work as expected with {@link ngModelOptions `ngModelOptions.allowInvalid`}.
	   * If a non-number is entered in the input, the browser will report the value as an empty string,
	   * which means the view / model values in `ngModel` and subsequently the scope value
	   * will also be an empty string.
	   *
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	   *    Can be interpolated.
	   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	   *    Can be interpolated.
	   * @param {string=} ngMin Like `min`, sets the `min` validation error key if the value entered is less than `ngMin`,
	   *    but does not trigger HTML5 native validation. Takes an expression.
	   * @param {string=} ngMax Like `max`, sets the `max` validation error key if the value entered is greater than `ngMax`,
	   *    but does not trigger HTML5 native validation. Takes an expression.
	   * @param {string=} step Sets the `step` validation error key if the value entered does not fit the `step` constraint.
	   *    Can be interpolated.
	   * @param {string=} ngStep Like `step`, sets the `step` validation error key if the value entered does not fit the `ngStep` constraint,
	   *    but does not trigger HTML5 native validation. Takes an expression.
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	   *    minlength.
	   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
	   *    any length.
	   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
	   *    that contains the regular expression body that will be converted to a regular expression
	   *    as in the ngPattern directive.
	   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	   *    If the expression evaluates to a RegExp object, then this is used directly.
	   *    If the expression evaluates to a string, then it will be converted to a RegExp
	   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	   *    `new RegExp('^abc$')`.<br />
	   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	   *    start at the index of the last search's match, thus not taking the whole input value into
	   *    account.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	      <example name="number-input-directive" module="numberExample">
	        <file name="index.html">
	         <script>
	           angular.module('numberExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.example = {
	                 value: 12
	               };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>Number:
	             <input type="number" name="input" ng-model="example.value"
	                    min="0" max="99" required>
	          </label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.input.$error.required">
	               Required!</span>
	             <span class="error" ng-show="myForm.input.$error.number">
	               Not valid number!</span>
	           </div>
	           <tt>value = {{example.value}}</tt><br/>
	           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	          </form>
	        </file>
	        <file name="protractor.js" type="protractor">
	          var value = element(by.binding('example.value'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var input = element(by.model('example.value'));
	
	          it('should initialize to model', function() {
	            expect(value.getText()).toContain('12');
	            expect(valid.getText()).toContain('true');
	          });
	
	          it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');
	            expect(value.getText()).toEqual('value =');
	            expect(valid.getText()).toContain('false');
	          });
	
	          it('should be invalid if over max', function() {
	            input.clear();
	            input.sendKeys('123');
	            expect(value.getText()).toEqual('value =');
	            expect(valid.getText()).toContain('false');
	          });
	        </file>
	      </example>
	   */'number':numberInputType,/**
	   * @ngdoc input
	   * @name input[url]
	   *
	   * @description
	   * Text input with URL validation. Sets the `url` validation error key if the content is not a
	   * valid URL.
	   *
	   * <div class="alert alert-warning">
	   * **Note:** `input[url]` uses a regex to validate urls that is derived from the regex
	   * used in Chromium. If you need stricter validation, you can use `ng-pattern` or modify
	   * the built-in validators (see the {@link guide/forms Forms guide})
	   * </div>
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	   *    minlength.
	   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
	   *    any length.
	   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
	   *    that contains the regular expression body that will be converted to a regular expression
	   *    as in the ngPattern directive.
	   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	   *    If the expression evaluates to a RegExp object, then this is used directly.
	   *    If the expression evaluates to a string, then it will be converted to a RegExp
	   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	   *    `new RegExp('^abc$')`.<br />
	   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	   *    start at the index of the last search's match, thus not taking the whole input value into
	   *    account.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	      <example name="url-input-directive" module="urlExample">
	        <file name="index.html">
	         <script>
	           angular.module('urlExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.url = {
	                 text: 'http://google.com'
	               };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>URL:
	             <input type="url" name="input" ng-model="url.text" required>
	           <label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.input.$error.required">
	               Required!</span>
	             <span class="error" ng-show="myForm.input.$error.url">
	               Not valid url!</span>
	           </div>
	           <tt>text = {{url.text}}</tt><br/>
	           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	           <tt>myForm.$error.url = {{!!myForm.$error.url}}</tt><br/>
	          </form>
	        </file>
	        <file name="protractor.js" type="protractor">
	          var text = element(by.binding('url.text'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var input = element(by.model('url.text'));
	
	          it('should initialize to model', function() {
	            expect(text.getText()).toContain('http://google.com');
	            expect(valid.getText()).toContain('true');
	          });
	
	          it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');
	
	            expect(text.getText()).toEqual('text =');
	            expect(valid.getText()).toContain('false');
	          });
	
	          it('should be invalid if not url', function() {
	            input.clear();
	            input.sendKeys('box');
	
	            expect(valid.getText()).toContain('false');
	          });
	        </file>
	      </example>
	   */'url':urlInputType,/**
	   * @ngdoc input
	   * @name input[email]
	   *
	   * @description
	   * Text input with email validation. Sets the `email` validation error key if not a valid email
	   * address.
	   *
	   * <div class="alert alert-warning">
	   * **Note:** `input[email]` uses a regex to validate email addresses that is derived from the regex
	   * used in Chromium. If you need stricter validation (e.g. requiring a top-level domain), you can
	   * use `ng-pattern` or modify the built-in validators (see the {@link guide/forms Forms guide})
	   * </div>
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	   *    minlength.
	   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
	   *    any length.
	   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
	   *    that contains the regular expression body that will be converted to a regular expression
	   *    as in the ngPattern directive.
	   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	   *    If the expression evaluates to a RegExp object, then this is used directly.
	   *    If the expression evaluates to a string, then it will be converted to a RegExp
	   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	   *    `new RegExp('^abc$')`.<br />
	   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	   *    start at the index of the last search's match, thus not taking the whole input value into
	   *    account.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	      <example name="email-input-directive" module="emailExample">
	        <file name="index.html">
	         <script>
	           angular.module('emailExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.email = {
	                 text: 'me@example.com'
	               };
	             }]);
	         </script>
	           <form name="myForm" ng-controller="ExampleController">
	             <label>Email:
	               <input type="email" name="input" ng-model="email.text" required>
	             </label>
	             <div role="alert">
	               <span class="error" ng-show="myForm.input.$error.required">
	                 Required!</span>
	               <span class="error" ng-show="myForm.input.$error.email">
	                 Not valid email!</span>
	             </div>
	             <tt>text = {{email.text}}</tt><br/>
	             <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	             <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	             <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	             <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	             <tt>myForm.$error.email = {{!!myForm.$error.email}}</tt><br/>
	           </form>
	         </file>
	        <file name="protractor.js" type="protractor">
	          var text = element(by.binding('email.text'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var input = element(by.model('email.text'));
	
	          it('should initialize to model', function() {
	            expect(text.getText()).toContain('me@example.com');
	            expect(valid.getText()).toContain('true');
	          });
	
	          it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');
	            expect(text.getText()).toEqual('text =');
	            expect(valid.getText()).toContain('false');
	          });
	
	          it('should be invalid if not email', function() {
	            input.clear();
	            input.sendKeys('xxx');
	
	            expect(valid.getText()).toContain('false');
	          });
	        </file>
	      </example>
	   */'email':emailInputType,/**
	   * @ngdoc input
	   * @name input[radio]
	   *
	   * @description
	   * HTML radio button.
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string} value The value to which the `ngModel` expression should be set when selected.
	   *    Note that `value` only supports `string` values, i.e. the scope model needs to be a string,
	   *    too. Use `ngValue` if you need complex models (`number`, `object`, ...).
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   * @param {string} ngValue Angular expression to which `ngModel` will be be set when the radio
	   *    is selected. Should be used instead of the `value` attribute if you need
	   *    a non-string `ngModel` (`boolean`, `array`, ...).
	   *
	   * @example
	      <example name="radio-input-directive" module="radioExample">
	        <file name="index.html">
	         <script>
	           angular.module('radioExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.color = {
	                 name: 'blue'
	               };
	               $scope.specialValue = {
	                 "id": "12345",
	                 "value": "green"
	               };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>
	             <input type="radio" ng-model="color.name" value="red">
	             Red
	           </label><br/>
	           <label>
	             <input type="radio" ng-model="color.name" ng-value="specialValue">
	             Green
	           </label><br/>
	           <label>
	             <input type="radio" ng-model="color.name" value="blue">
	             Blue
	           </label><br/>
	           <tt>color = {{color.name | json}}</tt><br/>
	          </form>
	          Note that `ng-value="specialValue"` sets radio item's value to be the value of `$scope.specialValue`.
	        </file>
	        <file name="protractor.js" type="protractor">
	          it('should change state', function() {
	            var inputs = element.all(by.model('color.name'));
	            var color = element(by.binding('color.name'));
	
	            expect(color.getText()).toContain('blue');
	
	            inputs.get(0).click();
	            expect(color.getText()).toContain('red');
	
	            inputs.get(1).click();
	            expect(color.getText()).toContain('green');
	          });
	        </file>
	      </example>
	   */'radio':radioInputType,/**
	   * @ngdoc input
	   * @name input[range]
	   *
	   * @description
	   * Native range input with validation and transformation.
	   *
	   * The model for the range input must always be a `Number`.
	   *
	   * IE9 and other browsers that do not support the `range` type fall back
	   * to a text input without any default values for `min`, `max` and `step`. Model binding,
	   * validation and number parsing are nevertheless supported.
	   *
	   * Browsers that support range (latest Chrome, Safari, Firefox, Edge) treat `input[range]`
	   * in a way that never allows the input to hold an invalid value. That means:
	   * - any non-numerical value is set to `(max + min) / 2`.
	   * - any numerical value that is less than the current min val, or greater than the current max val
	   * is set to the min / max val respectively.
	   * - additionally, the current `step` is respected, so the nearest value that satisfies a step
	   * is used.
	   *
	   * See the [HTML Spec on input[type=range]](https://www.w3.org/TR/html5/forms.html#range-state-(type=range))
	   * for more info.
	   *
	   * This has the following consequences for Angular:
	   *
	   * Since the element value should always reflect the current model value, a range input
	   * will set the bound ngModel expression to the value that the browser has set for the
	   * input element. For example, in the following input `<input type="range" ng-model="model.value">`,
	   * if the application sets `model.value = null`, the browser will set the input to `'50'`.
	   * Angular will then set the model to `50`, to prevent input and model value being out of sync.
	   *
	   * That means the model for range will immediately be set to `50` after `ngModel` has been
	   * initialized. It also means a range input can never have the required error.
	   *
	   * This does not only affect changes to the model value, but also to the values of the `min`,
	   * `max`, and `step` attributes. When these change in a way that will cause the browser to modify
	   * the input value, Angular will also update the model value.
	   *
	   * Automatic value adjustment also means that a range input element can never have the `required`,
	   * `min`, or `max` errors.
	   *
	   * However, `step` is currently only fully implemented by Firefox. Other browsers have problems
	   * when the step value changes dynamically - they do not adjust the element value correctly, but
	   * instead may set the `stepMismatch` error. If that's the case, the Angular will set the `step`
	   * error on the input, and set the model to `undefined`.
	   *
	   * Note that `input[range]` is not compatible with`ngMax`, `ngMin`, and `ngStep`, because they do
	   * not set the `min` and `max` attributes, which means that the browser won't automatically adjust
	   * the input value based on their values, and will always assume min = 0, max = 100, and step = 1.
	   *
	   * @param {string}  ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} min Sets the `min` validation to ensure that the value entered is greater
	   *                  than `min`. Can be interpolated.
	   * @param {string=} max Sets the `max` validation to ensure that the value entered is less than `max`.
	   *                  Can be interpolated.
	   * @param {string=} step Sets the `step` validation to ensure that the value entered matches the `step`
	   *                  Can be interpolated.
	   * @param {string=} ngChange Angular expression to be executed when the ngModel value changes due
	   *                  to user interaction with the input element.
	   * @param {expression=} ngChecked If the expression is truthy, then the `checked` attribute will be set on the
	   *                      element. **Note** : `ngChecked` should not be used alongside `ngModel`.
	   *                      Checkout {@link ng.directive:ngChecked ngChecked} for usage.
	   *
	   * @example
	      <example name="range-input-directive" module="rangeExample">
	        <file name="index.html">
	          <script>
	            angular.module('rangeExample', [])
	              .controller('ExampleController', ['$scope', function($scope) {
	                $scope.value = 75;
	                $scope.min = 10;
	                $scope.max = 90;
	              }]);
	          </script>
	          <form name="myForm" ng-controller="ExampleController">
	
	            Model as range: <input type="range" name="range" ng-model="value" min="{{min}}"  max="{{max}}">
	            <hr>
	            Model as number: <input type="number" ng-model="value"><br>
	            Min: <input type="number" ng-model="min"><br>
	            Max: <input type="number" ng-model="max"><br>
	            value = <code>{{value}}</code><br/>
	            myForm.range.$valid = <code>{{myForm.range.$valid}}</code><br/>
	            myForm.range.$error = <code>{{myForm.range.$error}}</code>
	          </form>
	        </file>
	      </example>
	
	   * ## Range Input with ngMin & ngMax attributes
	
	   * @example
	      <example name="range-input-directive-ng" module="rangeExample">
	        <file name="index.html">
	          <script>
	            angular.module('rangeExample', [])
	              .controller('ExampleController', ['$scope', function($scope) {
	                $scope.value = 75;
	                $scope.min = 10;
	                $scope.max = 90;
	              }]);
	          </script>
	          <form name="myForm" ng-controller="ExampleController">
	            Model as range: <input type="range" name="range" ng-model="value" ng-min="min" ng-max="max">
	            <hr>
	            Model as number: <input type="number" ng-model="value"><br>
	            Min: <input type="number" ng-model="min"><br>
	            Max: <input type="number" ng-model="max"><br>
	            value = <code>{{value}}</code><br/>
	            myForm.range.$valid = <code>{{myForm.range.$valid}}</code><br/>
	            myForm.range.$error = <code>{{myForm.range.$error}}</code>
	          </form>
	        </file>
	      </example>
	
	   */'range':rangeInputType,/**
	   * @ngdoc input
	   * @name input[checkbox]
	   *
	   * @description
	   * HTML checkbox.
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {expression=} ngTrueValue The value to which the expression should be set when selected.
	   * @param {expression=} ngFalseValue The value to which the expression should be set when not selected.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	      <example name="checkbox-input-directive" module="checkboxExample">
	        <file name="index.html">
	         <script>
	           angular.module('checkboxExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.checkboxModel = {
	                value1 : true,
	                value2 : 'YES'
	              };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>Value1:
	             <input type="checkbox" ng-model="checkboxModel.value1">
	           </label><br/>
	           <label>Value2:
	             <input type="checkbox" ng-model="checkboxModel.value2"
	                    ng-true-value="'YES'" ng-false-value="'NO'">
	            </label><br/>
	           <tt>value1 = {{checkboxModel.value1}}</tt><br/>
	           <tt>value2 = {{checkboxModel.value2}}</tt><br/>
	          </form>
	        </file>
	        <file name="protractor.js" type="protractor">
	          it('should change state', function() {
	            var value1 = element(by.binding('checkboxModel.value1'));
	            var value2 = element(by.binding('checkboxModel.value2'));
	
	            expect(value1.getText()).toContain('true');
	            expect(value2.getText()).toContain('YES');
	
	            element(by.model('checkboxModel.value1')).click();
	            element(by.model('checkboxModel.value2')).click();
	
	            expect(value1.getText()).toContain('false');
	            expect(value2.getText()).toContain('NO');
	          });
	        </file>
	      </example>
	   */'checkbox':checkboxInputType,'hidden':noop,'button':noop,'submit':noop,'reset':noop,'file':noop};function stringBasedInputType(ctrl){ctrl.$formatters.push(function(value){return ctrl.$isEmpty(value)?value:value.toString();});}function textInputType(scope,element,attr,ctrl,$sniffer,$browser){baseInputType(scope,element,attr,ctrl,$sniffer,$browser);stringBasedInputType(ctrl);}function baseInputType(scope,element,attr,ctrl,$sniffer,$browser){var type=lowercase(element[0].type);// In composition mode, users are still inputting intermediate text buffer,
	// hold the listener until composition is done.
	// More about composition events: https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent
	if(!$sniffer.android){var composing=false;element.on('compositionstart',function(){composing=true;});element.on('compositionend',function(){composing=false;listener();});}var timeout;var listener=function listener(ev){if(timeout){$browser.defer.cancel(timeout);timeout=null;}if(composing)return;var value=element.val(),event=ev&&ev.type;// By default we will trim the value
	// If the attribute ng-trim exists we will avoid trimming
	// If input type is 'password', the value is never trimmed
	if(type!=='password'&&(!attr.ngTrim||attr.ngTrim!=='false')){value=trim(value);}// If a control is suffering from bad input (due to native validators), browsers discard its
	// value, so it may be necessary to revalidate (by calling $setViewValue again) even if the
	// control's value is the same empty value twice in a row.
	if(ctrl.$viewValue!==value||value===''&&ctrl.$$hasNativeValidators){ctrl.$setViewValue(value,event);}};// if the browser does support "input" event, we are fine - except on IE9 which doesn't fire the
	// input event on backspace, delete or cut
	if($sniffer.hasEvent('input')){element.on('input',listener);}else{var deferListener=function deferListener(ev,input,origValue){if(!timeout){timeout=$browser.defer(function(){timeout=null;if(!input||input.value!==origValue){listener(ev);}});}};element.on('keydown',/** @this */function(event){var key=event.keyCode;// ignore
	//    command            modifiers                   arrows
	if(key===91||15<key&&key<19||37<=key&&key<=40)return;deferListener(event,this,this.value);});// if user modifies input value using context menu in IE, we need "paste" and "cut" events to catch it
	if($sniffer.hasEvent('paste')){element.on('paste cut',deferListener);}}// if user paste into input using mouse on older browser
	// or form autocomplete on newer browser, we need "change" event to catch it
	element.on('change',listener);// Some native input types (date-family) have the ability to change validity without
	// firing any input/change events.
	// For these event types, when native validators are present and the browser supports the type,
	// check for validity changes on various DOM events.
	if(PARTIAL_VALIDATION_TYPES[type]&&ctrl.$$hasNativeValidators&&type===attr.type){element.on(PARTIAL_VALIDATION_EVENTS,/** @this */function(ev){if(!timeout){var validity=this[VALIDITY_STATE_PROPERTY];var origBadInput=validity.badInput;var origTypeMismatch=validity.typeMismatch;timeout=$browser.defer(function(){timeout=null;if(validity.badInput!==origBadInput||validity.typeMismatch!==origTypeMismatch){listener(ev);}});}});}ctrl.$render=function(){// Workaround for Firefox validation #12102.
	var value=ctrl.$isEmpty(ctrl.$viewValue)?'':ctrl.$viewValue;if(element.val()!==value){element.val(value);}};}function weekParser(isoWeek,existingDate){if(isDate(isoWeek)){return isoWeek;}if(isString(isoWeek)){WEEK_REGEXP.lastIndex=0;var parts=WEEK_REGEXP.exec(isoWeek);if(parts){var year=+parts[1],week=+parts[2],hours=0,minutes=0,seconds=0,milliseconds=0,firstThurs=getFirstThursdayOfYear(year),addDays=(week-1)*7;if(existingDate){hours=existingDate.getHours();minutes=existingDate.getMinutes();seconds=existingDate.getSeconds();milliseconds=existingDate.getMilliseconds();}return new Date(year,0,firstThurs.getDate()+addDays,hours,minutes,seconds,milliseconds);}}return NaN;}function createDateParser(regexp,mapping){return function(iso,date){var parts,map;if(isDate(iso)){return iso;}if(isString(iso)){// When a date is JSON'ified to wraps itself inside of an extra
	// set of double quotes. This makes the date parsing code unable
	// to match the date string and parse it as a date.
	if(iso.charAt(0)==='"'&&iso.charAt(iso.length-1)==='"'){iso=iso.substring(1,iso.length-1);}if(ISO_DATE_REGEXP.test(iso)){return new Date(iso);}regexp.lastIndex=0;parts=regexp.exec(iso);if(parts){parts.shift();if(date){map={yyyy:date.getFullYear(),MM:date.getMonth()+1,dd:date.getDate(),HH:date.getHours(),mm:date.getMinutes(),ss:date.getSeconds(),sss:date.getMilliseconds()/1000};}else{map={yyyy:1970,MM:1,dd:1,HH:0,mm:0,ss:0,sss:0};}forEach(parts,function(part,index){if(index<mapping.length){map[mapping[index]]=+part;}});return new Date(map.yyyy,map.MM-1,map.dd,map.HH,map.mm,map.ss||0,map.sss*1000||0);}}return NaN;};}function createDateInputType(type,regexp,parseDate,format){return function dynamicDateInputType(scope,element,attr,ctrl,$sniffer,$browser,$filter){badInputChecker(scope,element,attr,ctrl);baseInputType(scope,element,attr,ctrl,$sniffer,$browser);var timezone=ctrl&&ctrl.$options.getOption('timezone');var previousDate;ctrl.$$parserName=type;ctrl.$parsers.push(function(value){if(ctrl.$isEmpty(value))return null;if(regexp.test(value)){// Note: We cannot read ctrl.$modelValue, as there might be a different
	// parser/formatter in the processing chain so that the model
	// contains some different data format!
	var parsedDate=parseDate(value,previousDate);if(timezone){parsedDate=convertTimezoneToLocal(parsedDate,timezone);}return parsedDate;}return undefined;});ctrl.$formatters.push(function(value){if(value&&!isDate(value)){throw ngModelMinErr('datefmt','Expected `{0}` to be a date',value);}if(isValidDate(value)){previousDate=value;if(previousDate&&timezone){previousDate=convertTimezoneToLocal(previousDate,timezone,true);}return $filter('date')(value,format,timezone);}else{previousDate=null;return'';}});if(isDefined(attr.min)||attr.ngMin){var minVal;ctrl.$validators.min=function(value){return!isValidDate(value)||isUndefined(minVal)||parseDate(value)>=minVal;};attr.$observe('min',function(val){minVal=parseObservedDateValue(val);ctrl.$validate();});}if(isDefined(attr.max)||attr.ngMax){var maxVal;ctrl.$validators.max=function(value){return!isValidDate(value)||isUndefined(maxVal)||parseDate(value)<=maxVal;};attr.$observe('max',function(val){maxVal=parseObservedDateValue(val);ctrl.$validate();});}function isValidDate(value){// Invalid Date: getTime() returns NaN
	return value&&!(value.getTime&&value.getTime()!==value.getTime());}function parseObservedDateValue(val){return isDefined(val)&&!isDate(val)?parseDate(val)||undefined:val;}};}function badInputChecker(scope,element,attr,ctrl){var node=element[0];var nativeValidation=ctrl.$$hasNativeValidators=isObject(node.validity);if(nativeValidation){ctrl.$parsers.push(function(value){var validity=element.prop(VALIDITY_STATE_PROPERTY)||{};return validity.badInput||validity.typeMismatch?undefined:value;});}}function numberFormatterParser(ctrl){ctrl.$$parserName='number';ctrl.$parsers.push(function(value){if(ctrl.$isEmpty(value))return null;if(NUMBER_REGEXP.test(value))return parseFloat(value);return undefined;});ctrl.$formatters.push(function(value){if(!ctrl.$isEmpty(value)){if(!isNumber(value)){throw ngModelMinErr('numfmt','Expected `{0}` to be a number',value);}value=value.toString();}return value;});}function parseNumberAttrVal(val){if(isDefined(val)&&!isNumber(val)){val=parseFloat(val);}return!isNumberNaN(val)?val:undefined;}function isNumberInteger(num){// See http://stackoverflow.com/questions/14636536/how-to-check-if-a-variable-is-an-integer-in-javascript#14794066
	// (minus the assumption that `num` is a number)
	// eslint-disable-next-line no-bitwise
	return(num|0)===num;}function countDecimals(num){var numString=num.toString();var decimalSymbolIndex=numString.indexOf('.');if(decimalSymbolIndex===-1){if(-1<num&&num<1){// It may be in the exponential notation format (`1e-X`)
	var match=/e-(\d+)$/.exec(numString);if(match){return Number(match[1]);}}return 0;}return numString.length-decimalSymbolIndex-1;}function isValidForStep(viewValue,stepBase,step){// At this point `stepBase` and `step` are expected to be non-NaN values
	// and `viewValue` is expected to be a valid stringified number.
	var value=Number(viewValue);var isNonIntegerValue=!isNumberInteger(value);var isNonIntegerStepBase=!isNumberInteger(stepBase);var isNonIntegerStep=!isNumberInteger(step);// Due to limitations in Floating Point Arithmetic (e.g. `0.3 - 0.2 !== 0.1` or
	// `0.5 % 0.1 !== 0`), we need to convert all numbers to integers.
	if(isNonIntegerValue||isNonIntegerStepBase||isNonIntegerStep){var valueDecimals=isNonIntegerValue?countDecimals(value):0;var stepBaseDecimals=isNonIntegerStepBase?countDecimals(stepBase):0;var stepDecimals=isNonIntegerStep?countDecimals(step):0;var decimalCount=Math.max(valueDecimals,stepBaseDecimals,stepDecimals);var multiplier=Math.pow(10,decimalCount);value=value*multiplier;stepBase=stepBase*multiplier;step=step*multiplier;if(isNonIntegerValue)value=Math.round(value);if(isNonIntegerStepBase)stepBase=Math.round(stepBase);if(isNonIntegerStep)step=Math.round(step);}return(value-stepBase)%step===0;}function numberInputType(scope,element,attr,ctrl,$sniffer,$browser){badInputChecker(scope,element,attr,ctrl);numberFormatterParser(ctrl);baseInputType(scope,element,attr,ctrl,$sniffer,$browser);var minVal;var maxVal;if(isDefined(attr.min)||attr.ngMin){ctrl.$validators.min=function(value){return ctrl.$isEmpty(value)||isUndefined(minVal)||value>=minVal;};attr.$observe('min',function(val){minVal=parseNumberAttrVal(val);// TODO(matsko): implement validateLater to reduce number of validations
	ctrl.$validate();});}if(isDefined(attr.max)||attr.ngMax){ctrl.$validators.max=function(value){return ctrl.$isEmpty(value)||isUndefined(maxVal)||value<=maxVal;};attr.$observe('max',function(val){maxVal=parseNumberAttrVal(val);// TODO(matsko): implement validateLater to reduce number of validations
	ctrl.$validate();});}if(isDefined(attr.step)||attr.ngStep){var stepVal;ctrl.$validators.step=function(modelValue,viewValue){return ctrl.$isEmpty(viewValue)||isUndefined(stepVal)||isValidForStep(viewValue,minVal||0,stepVal);};attr.$observe('step',function(val){stepVal=parseNumberAttrVal(val);// TODO(matsko): implement validateLater to reduce number of validations
	ctrl.$validate();});}}function rangeInputType(scope,element,attr,ctrl,$sniffer,$browser){badInputChecker(scope,element,attr,ctrl);numberFormatterParser(ctrl);baseInputType(scope,element,attr,ctrl,$sniffer,$browser);var supportsRange=ctrl.$$hasNativeValidators&&element[0].type==='range',minVal=supportsRange?0:undefined,maxVal=supportsRange?100:undefined,stepVal=supportsRange?1:undefined,validity=element[0].validity,hasMinAttr=isDefined(attr.min),hasMaxAttr=isDefined(attr.max),hasStepAttr=isDefined(attr.step);var originalRender=ctrl.$render;ctrl.$render=supportsRange&&isDefined(validity.rangeUnderflow)&&isDefined(validity.rangeOverflow)?//Browsers that implement range will set these values automatically, but reading the adjusted values after
	//$render would cause the min / max validators to be applied with the wrong value
	function rangeRender(){originalRender();ctrl.$setViewValue(element.val());}:originalRender;if(hasMinAttr){ctrl.$validators.min=supportsRange?// Since all browsers set the input to a valid value, we don't need to check validity
	function noopMinValidator(){return true;}:// non-support browsers validate the min val
	function minValidator(modelValue,viewValue){return ctrl.$isEmpty(viewValue)||isUndefined(minVal)||viewValue>=minVal;};setInitialValueAndObserver('min',minChange);}if(hasMaxAttr){ctrl.$validators.max=supportsRange?// Since all browsers set the input to a valid value, we don't need to check validity
	function noopMaxValidator(){return true;}:// non-support browsers validate the max val
	function maxValidator(modelValue,viewValue){return ctrl.$isEmpty(viewValue)||isUndefined(maxVal)||viewValue<=maxVal;};setInitialValueAndObserver('max',maxChange);}if(hasStepAttr){ctrl.$validators.step=supportsRange?function nativeStepValidator(){// Currently, only FF implements the spec on step change correctly (i.e. adjusting the
	// input element value to a valid value). It's possible that other browsers set the stepMismatch
	// validity error instead, so we can at least report an error in that case.
	return!validity.stepMismatch;}:// ngStep doesn't set the setp attr, so the browser doesn't adjust the input value as setting step would
	function stepValidator(modelValue,viewValue){return ctrl.$isEmpty(viewValue)||isUndefined(stepVal)||isValidForStep(viewValue,minVal||0,stepVal);};setInitialValueAndObserver('step',stepChange);}function setInitialValueAndObserver(htmlAttrName,changeFn){// interpolated attributes set the attribute value only after a digest, but we need the
	// attribute value when the input is first rendered, so that the browser can adjust the
	// input value based on the min/max value
	element.attr(htmlAttrName,attr[htmlAttrName]);attr.$observe(htmlAttrName,changeFn);}function minChange(val){minVal=parseNumberAttrVal(val);// ignore changes before model is initialized
	if(isNumberNaN(ctrl.$modelValue)){return;}if(supportsRange){var elVal=element.val();// IE11 doesn't set the el val correctly if the minVal is greater than the element value
	if(minVal>elVal){elVal=minVal;element.val(elVal);}ctrl.$setViewValue(elVal);}else{// TODO(matsko): implement validateLater to reduce number of validations
	ctrl.$validate();}}function maxChange(val){maxVal=parseNumberAttrVal(val);// ignore changes before model is initialized
	if(isNumberNaN(ctrl.$modelValue)){return;}if(supportsRange){var elVal=element.val();// IE11 doesn't set the el val correctly if the maxVal is less than the element value
	if(maxVal<elVal){element.val(maxVal);// IE11 and Chrome don't set the value to the minVal when max < min
	elVal=maxVal<minVal?minVal:maxVal;}ctrl.$setViewValue(elVal);}else{// TODO(matsko): implement validateLater to reduce number of validations
	ctrl.$validate();}}function stepChange(val){stepVal=parseNumberAttrVal(val);// ignore changes before model is initialized
	if(isNumberNaN(ctrl.$modelValue)){return;}// Some browsers don't adjust the input value correctly, but set the stepMismatch error
	if(supportsRange&&ctrl.$viewValue!==element.val()){ctrl.$setViewValue(element.val());}else{// TODO(matsko): implement validateLater to reduce number of validations
	ctrl.$validate();}}}function urlInputType(scope,element,attr,ctrl,$sniffer,$browser){// Note: no badInputChecker here by purpose as `url` is only a validation
	// in browsers, i.e. we can always read out input.value even if it is not valid!
	baseInputType(scope,element,attr,ctrl,$sniffer,$browser);stringBasedInputType(ctrl);ctrl.$$parserName='url';ctrl.$validators.url=function(modelValue,viewValue){var value=modelValue||viewValue;return ctrl.$isEmpty(value)||URL_REGEXP.test(value);};}function emailInputType(scope,element,attr,ctrl,$sniffer,$browser){// Note: no badInputChecker here by purpose as `url` is only a validation
	// in browsers, i.e. we can always read out input.value even if it is not valid!
	baseInputType(scope,element,attr,ctrl,$sniffer,$browser);stringBasedInputType(ctrl);ctrl.$$parserName='email';ctrl.$validators.email=function(modelValue,viewValue){var value=modelValue||viewValue;return ctrl.$isEmpty(value)||EMAIL_REGEXP.test(value);};}function radioInputType(scope,element,attr,ctrl){var doTrim=!attr.ngTrim||trim(attr.ngTrim)!=='false';// make the name unique, if not defined
	if(isUndefined(attr.name)){element.attr('name',nextUid());}var listener=function listener(ev){var value;if(element[0].checked){value=attr.value;if(doTrim){value=trim(value);}ctrl.$setViewValue(value,ev&&ev.type);}};element.on('click',listener);ctrl.$render=function(){var value=attr.value;if(doTrim){value=trim(value);}element[0].checked=value===ctrl.$viewValue;};attr.$observe('value',ctrl.$render);}function parseConstantExpr($parse,context,name,expression,fallback){var parseFn;if(isDefined(expression)){parseFn=$parse(expression);if(!parseFn.constant){throw ngModelMinErr('constexpr','Expected constant expression for `{0}`, but saw '+'`{1}`.',name,expression);}return parseFn(context);}return fallback;}function checkboxInputType(scope,element,attr,ctrl,$sniffer,$browser,$filter,$parse){var trueValue=parseConstantExpr($parse,scope,'ngTrueValue',attr.ngTrueValue,true);var falseValue=parseConstantExpr($parse,scope,'ngFalseValue',attr.ngFalseValue,false);var listener=function listener(ev){ctrl.$setViewValue(element[0].checked,ev&&ev.type);};element.on('click',listener);ctrl.$render=function(){element[0].checked=ctrl.$viewValue;};// Override the standard `$isEmpty` because the $viewValue of an empty checkbox is always set to `false`
	// This is because of the parser below, which compares the `$modelValue` with `trueValue` to convert
	// it to a boolean.
	ctrl.$isEmpty=function(value){return value===false;};ctrl.$formatters.push(function(value){return equals(value,trueValue);});ctrl.$parsers.push(function(value){return value?trueValue:falseValue;});}/**
	 * @ngdoc directive
	 * @name textarea
	 * @restrict E
	 *
	 * @description
	 * HTML textarea element control with angular data-binding. The data-binding and validation
	 * properties of this element are exactly the same as those of the
	 * {@link ng.directive:input input element}.
	 *
	 * @param {string} ngModel Assignable angular expression to data-bind to.
	 * @param {string=} name Property name of the form under which the control is published.
	 * @param {string=} required Sets `required` validation error key if the value is not entered.
	 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	 *    `required` when you want to data-bind to the `required` attribute.
	 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	 *    minlength.
	 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
	 *    length.
	 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	 *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	 *    If the expression evaluates to a RegExp object, then this is used directly.
	 *    If the expression evaluates to a string, then it will be converted to a RegExp
	 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	 *    `new RegExp('^abc$')`.<br />
	 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	 *    start at the index of the last search's match, thus not taking the whole input value into
	 *    account.
	 * @param {string=} ngChange Angular expression to be executed when input changes due to user
	 *    interaction with the input element.
	 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
	 *
	 * @knownIssue
	 *
	 * When specifying the `placeholder` attribute of `<textarea>`, Internet Explorer will temporarily
	 * insert the placeholder value as the textarea's content. If the placeholder value contains
	 * interpolation (`{{ ... }}`), an error will be logged in the console when Angular tries to update
	 * the value of the by-then-removed text node. This doesn't affect the functionality of the
	 * textarea, but can be undesirable.
	 *
	 * You can work around this Internet Explorer issue by using `ng-attr-placeholder` instead of
	 * `placeholder` on textareas, whenever you need interpolation in the placeholder value. You can
	 * find more details on `ngAttr` in the
	 * [Interpolation](guide/interpolation#-ngattr-for-binding-to-arbitrary-attributes) section of the
	 * Developer Guide.
	 *//**
	 * @ngdoc directive
	 * @name input
	 * @restrict E
	 *
	 * @description
	 * HTML input element control. When used together with {@link ngModel `ngModel`}, it provides data-binding,
	 * input state control, and validation.
	 * Input control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Not every feature offered is available for all input types.
	 * Specifically, data binding and event handling via `ng-model` is unsupported for `input[file]`.
	 * </div>
	 *
	 * @param {string} ngModel Assignable angular expression to data-bind to.
	 * @param {string=} name Property name of the form under which the control is published.
	 * @param {string=} required Sets `required` validation error key if the value is not entered.
	 * @param {boolean=} ngRequired Sets `required` attribute if set to true
	 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	 *    minlength.
	 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
	 *    length.
	 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	 *    value does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	 *    If the expression evaluates to a RegExp object, then this is used directly.
	 *    If the expression evaluates to a string, then it will be converted to a RegExp
	 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	 *    `new RegExp('^abc$')`.<br />
	 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	 *    start at the index of the last search's match, thus not taking the whole input value into
	 *    account.
	 * @param {string=} ngChange Angular expression to be executed when input changes due to user
	 *    interaction with the input element.
	 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
	 *    This parameter is ignored for input[type=password] controls, which will never trim the
	 *    input.
	 *
	 * @example
	    <example name="input-directive" module="inputExample">
	      <file name="index.html">
	       <script>
	          angular.module('inputExample', [])
	            .controller('ExampleController', ['$scope', function($scope) {
	              $scope.user = {name: 'guest', last: 'visitor'};
	            }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <form name="myForm">
	           <label>
	              User name:
	              <input type="text" name="userName" ng-model="user.name" required>
	           </label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.userName.$error.required">
	              Required!</span>
	           </div>
	           <label>
	              Last name:
	              <input type="text" name="lastName" ng-model="user.last"
	              ng-minlength="3" ng-maxlength="10">
	           </label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.lastName.$error.minlength">
	               Too short!</span>
	             <span class="error" ng-show="myForm.lastName.$error.maxlength">
	               Too long!</span>
	           </div>
	         </form>
	         <hr>
	         <tt>user = {{user}}</tt><br/>
	         <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br/>
	         <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br/>
	         <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br/>
	         <tt>myForm.lastName.$error = {{myForm.lastName.$error}}</tt><br/>
	         <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	         <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br/>
	         <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br/>
	       </div>
	      </file>
	      <file name="protractor.js" type="protractor">
	        var user = element(by.exactBinding('user'));
	        var userNameValid = element(by.binding('myForm.userName.$valid'));
	        var lastNameValid = element(by.binding('myForm.lastName.$valid'));
	        var lastNameError = element(by.binding('myForm.lastName.$error'));
	        var formValid = element(by.binding('myForm.$valid'));
	        var userNameInput = element(by.model('user.name'));
	        var userLastInput = element(by.model('user.last'));
	
	        it('should initialize to model', function() {
	          expect(user.getText()).toContain('{"name":"guest","last":"visitor"}');
	          expect(userNameValid.getText()).toContain('true');
	          expect(formValid.getText()).toContain('true');
	        });
	
	        it('should be invalid if empty when required', function() {
	          userNameInput.clear();
	          userNameInput.sendKeys('');
	
	          expect(user.getText()).toContain('{"last":"visitor"}');
	          expect(userNameValid.getText()).toContain('false');
	          expect(formValid.getText()).toContain('false');
	        });
	
	        it('should be valid if empty when min length is set', function() {
	          userLastInput.clear();
	          userLastInput.sendKeys('');
	
	          expect(user.getText()).toContain('{"name":"guest","last":""}');
	          expect(lastNameValid.getText()).toContain('true');
	          expect(formValid.getText()).toContain('true');
	        });
	
	        it('should be invalid if less than required min length', function() {
	          userLastInput.clear();
	          userLastInput.sendKeys('xx');
	
	          expect(user.getText()).toContain('{"name":"guest"}');
	          expect(lastNameValid.getText()).toContain('false');
	          expect(lastNameError.getText()).toContain('minlength');
	          expect(formValid.getText()).toContain('false');
	        });
	
	        it('should be invalid if longer than max length', function() {
	          userLastInput.clear();
	          userLastInput.sendKeys('some ridiculously long name');
	
	          expect(user.getText()).toContain('{"name":"guest"}');
	          expect(lastNameValid.getText()).toContain('false');
	          expect(lastNameError.getText()).toContain('maxlength');
	          expect(formValid.getText()).toContain('false');
	        });
	      </file>
	    </example>
	 */var inputDirective=['$browser','$sniffer','$filter','$parse',function($browser,$sniffer,$filter,$parse){return{restrict:'E',require:['?ngModel'],link:{pre:function pre(scope,element,attr,ctrls){if(ctrls[0]){(inputType[lowercase(attr.type)]||inputType.text)(scope,element,attr,ctrls[0],$sniffer,$browser,$filter,$parse);}}}};}];var CONSTANT_VALUE_REGEXP=/^(true|false|\d+)$/;/**
	 * @ngdoc directive
	 * @name ngValue
	 *
	 * @description
	 * Binds the given expression to the value of the element.
	 *
	 * It is mainly used on {@link input[radio] `input[radio]`} and option elements,
	 * so that when the element is selected, the {@link ngModel `ngModel`} of that element (or its
	 * {@link select `select`} parent element) is set to the bound value. It is especially useful
	 * for dynamically generated lists using {@link ngRepeat `ngRepeat`}, as shown below.
	 *
	 * It can also be used to achieve one-way binding of a given expression to an input element
	 * such as an `input[text]` or a `textarea`, when that element does not use ngModel.
	 *
	 * @element input
	 * @param {string=} ngValue angular expression, whose value will be bound to the `value` attribute
	 * and `value` property of the element.
	 *
	 * @example
	    <example name="ngValue-directive" module="valueExample">
	      <file name="index.html">
	       <script>
	          angular.module('valueExample', [])
	            .controller('ExampleController', ['$scope', function($scope) {
	              $scope.names = ['pizza', 'unicorns', 'robots'];
	              $scope.my = { favorite: 'unicorns' };
	            }]);
	       </script>
	        <form ng-controller="ExampleController">
	          <h2>Which is your favorite?</h2>
	            <label ng-repeat="name in names" for="{{name}}">
	              {{name}}
	              <input type="radio"
	                     ng-model="my.favorite"
	                     ng-value="name"
	                     id="{{name}}"
	                     name="favorite">
	            </label>
	          <div>You chose {{my.favorite}}</div>
	        </form>
	      </file>
	      <file name="protractor.js" type="protractor">
	        var favorite = element(by.binding('my.favorite'));
	
	        it('should initialize to model', function() {
	          expect(favorite.getText()).toContain('unicorns');
	        });
	        it('should bind the values to the inputs', function() {
	          element.all(by.model('my.favorite')).get(0).click();
	          expect(favorite.getText()).toContain('pizza');
	        });
	      </file>
	    </example>
	 */var ngValueDirective=function ngValueDirective(){/**
	   *  inputs use the value attribute as their default value if the value property is not set.
	   *  Once the value property has been set (by adding input), it will not react to changes to
	   *  the value attribute anymore. Setting both attribute and property fixes this behavior, and
	   *  makes it possible to use ngValue as a sort of one-way bind.
	   */function updateElementValue(element,attr,value){// Support: IE9 only
	// In IE9 values are converted to string (e.g. `input.value = null` results in `input.value === 'null'`).
	var propValue=isDefined(value)?value:msie===9?'':null;element.prop('value',propValue);attr.$set('value',value);}return{restrict:'A',priority:100,compile:function compile(tpl,tplAttr){if(CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue)){return function ngValueConstantLink(scope,elm,attr){var value=scope.$eval(attr.ngValue);updateElementValue(elm,attr,value);};}else{return function ngValueLink(scope,elm,attr){scope.$watch(attr.ngValue,function valueWatchAction(value){updateElementValue(elm,attr,value);});};}}};};/**
	 * @ngdoc directive
	 * @name ngBind
	 * @restrict AC
	 *
	 * @description
	 * The `ngBind` attribute tells Angular to replace the text content of the specified HTML element
	 * with the value of a given expression, and to update the text content when the value of that
	 * expression changes.
	 *
	 * Typically, you don't use `ngBind` directly, but instead you use the double curly markup like
	 * `{{ expression }}` which is similar but less verbose.
	 *
	 * It is preferable to use `ngBind` instead of `{{ expression }}` if a template is momentarily
	 * displayed by the browser in its raw state before Angular compiles it. Since `ngBind` is an
	 * element attribute, it makes the bindings invisible to the user while the page is loading.
	 *
	 * An alternative solution to this problem would be using the
	 * {@link ng.directive:ngCloak ngCloak} directive.
	 *
	 *
	 * @element ANY
	 * @param {expression} ngBind {@link guide/expression Expression} to evaluate.
	 *
	 * @example
	 * Enter a name in the Live Preview text box; the greeting below the text box changes instantly.
	   <example module="bindExample" name="ng-bind">
	     <file name="index.html">
	       <script>
	         angular.module('bindExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.name = 'Whirled';
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <label>Enter name: <input type="text" ng-model="name"></label><br>
	         Hello <span ng-bind="name"></span>!
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-bind', function() {
	         var nameInput = element(by.model('name'));
	
	         expect(element(by.binding('name')).getText()).toBe('Whirled');
	         nameInput.clear();
	         nameInput.sendKeys('world');
	         expect(element(by.binding('name')).getText()).toBe('world');
	       });
	     </file>
	   </example>
	 */var ngBindDirective=['$compile',function($compile){return{restrict:'AC',compile:function ngBindCompile(templateElement){$compile.$$addBindingClass(templateElement);return function ngBindLink(scope,element,attr){$compile.$$addBindingInfo(element,attr.ngBind);element=element[0];scope.$watch(attr.ngBind,function ngBindWatchAction(value){element.textContent=stringify(value);});};}};}];/**
	 * @ngdoc directive
	 * @name ngBindTemplate
	 *
	 * @description
	 * The `ngBindTemplate` directive specifies that the element
	 * text content should be replaced with the interpolation of the template
	 * in the `ngBindTemplate` attribute.
	 * Unlike `ngBind`, the `ngBindTemplate` can contain multiple `{{` `}}`
	 * expressions. This directive is needed since some HTML elements
	 * (such as TITLE and OPTION) cannot contain SPAN elements.
	 *
	 * @element ANY
	 * @param {string} ngBindTemplate template of form
	 *   <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.
	 *
	 * @example
	 * Try it here: enter text in text box and watch the greeting change.
	   <example module="bindExample" name="ng-bind-template">
	     <file name="index.html">
	       <script>
	         angular.module('bindExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.salutation = 'Hello';
	             $scope.name = 'World';
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	        <label>Salutation: <input type="text" ng-model="salutation"></label><br>
	        <label>Name: <input type="text" ng-model="name"></label><br>
	        <pre ng-bind-template="{{salutation}} {{name}}!"></pre>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-bind', function() {
	         var salutationElem = element(by.binding('salutation'));
	         var salutationInput = element(by.model('salutation'));
	         var nameInput = element(by.model('name'));
	
	         expect(salutationElem.getText()).toBe('Hello World!');
	
	         salutationInput.clear();
	         salutationInput.sendKeys('Greetings');
	         nameInput.clear();
	         nameInput.sendKeys('user');
	
	         expect(salutationElem.getText()).toBe('Greetings user!');
	       });
	     </file>
	   </example>
	 */var ngBindTemplateDirective=['$interpolate','$compile',function($interpolate,$compile){return{compile:function ngBindTemplateCompile(templateElement){$compile.$$addBindingClass(templateElement);return function ngBindTemplateLink(scope,element,attr){var interpolateFn=$interpolate(element.attr(attr.$attr.ngBindTemplate));$compile.$$addBindingInfo(element,interpolateFn.expressions);element=element[0];attr.$observe('ngBindTemplate',function(value){element.textContent=isUndefined(value)?'':value;});};}};}];/**
	 * @ngdoc directive
	 * @name ngBindHtml
	 *
	 * @description
	 * Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default,
	 * the resulting HTML content will be sanitized using the {@link ngSanitize.$sanitize $sanitize} service.
	 * To utilize this functionality, ensure that `$sanitize` is available, for example, by including {@link
	 * ngSanitize} in your module's dependencies (not in core Angular). In order to use {@link ngSanitize}
	 * in your module's dependencies, you need to include "angular-sanitize.js" in your application.
	 *
	 * You may also bypass sanitization for values you know are safe. To do so, bind to
	 * an explicitly trusted value via {@link ng.$sce#trustAsHtml $sce.trustAsHtml}.  See the example
	 * under {@link ng.$sce#show-me-an-example-using-sce- Strict Contextual Escaping (SCE)}.
	 *
	 * Note: If a `$sanitize` service is unavailable and the bound value isn't explicitly trusted, you
	 * will have an exception (instead of an exploit.)
	 *
	 * @element ANY
	 * @param {expression} ngBindHtml {@link guide/expression Expression} to evaluate.
	 *
	 * @example
	
	   <example module="bindHtmlExample" deps="angular-sanitize.js" name="ng-bind-html">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	        <p ng-bind-html="myHTML"></p>
	       </div>
	     </file>
	
	     <file name="script.js">
	       angular.module('bindHtmlExample', ['ngSanitize'])
	         .controller('ExampleController', ['$scope', function($scope) {
	           $scope.myHTML =
	              'I am an <code>HTML</code>string with ' +
	              '<a href="#">links!</a> and other <em>stuff</em>';
	         }]);
	     </file>
	
	     <file name="protractor.js" type="protractor">
	       it('should check ng-bind-html', function() {
	         expect(element(by.binding('myHTML')).getText()).toBe(
	             'I am an HTMLstring with links! and other stuff');
	       });
	     </file>
	   </example>
	 */var ngBindHtmlDirective=['$sce','$parse','$compile',function($sce,$parse,$compile){return{restrict:'A',compile:function ngBindHtmlCompile(tElement,tAttrs){var ngBindHtmlGetter=$parse(tAttrs.ngBindHtml);var ngBindHtmlWatch=$parse(tAttrs.ngBindHtml,function sceValueOf(val){// Unwrap the value to compare the actual inner safe value, not the wrapper object.
	return $sce.valueOf(val);});$compile.$$addBindingClass(tElement);return function ngBindHtmlLink(scope,element,attr){$compile.$$addBindingInfo(element,attr.ngBindHtml);scope.$watch(ngBindHtmlWatch,function ngBindHtmlWatchAction(){// The watched value is the unwrapped value. To avoid re-escaping, use the direct getter.
	var value=ngBindHtmlGetter(scope);element.html($sce.getTrustedHtml(value)||'');});};}};}];/**
	 * @ngdoc directive
	 * @name ngChange
	 *
	 * @description
	 * Evaluate the given expression when the user changes the input.
	 * The expression is evaluated immediately, unlike the JavaScript onchange event
	 * which only triggers at the end of a change (usually, when the user leaves the
	 * form element or presses the return key).
	 *
	 * The `ngChange` expression is only evaluated when a change in the input value causes
	 * a new value to be committed to the model.
	 *
	 * It will not be evaluated:
	 * * if the value returned from the `$parsers` transformation pipeline has not changed
	 * * if the input has continued to be invalid since the model will stay `null`
	 * * if the model is changed programmatically and not by a change to the input value
	 *
	 *
	 * Note, this directive requires `ngModel` to be present.
	 *
	 * @element input
	 * @param {expression} ngChange {@link guide/expression Expression} to evaluate upon change
	 * in input value.
	 *
	 * @example
	 * <example name="ngChange-directive" module="changeExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('changeExample', [])
	 *         .controller('ExampleController', ['$scope', function($scope) {
	 *           $scope.counter = 0;
	 *           $scope.change = function() {
	 *             $scope.counter++;
	 *           };
	 *         }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <input type="checkbox" ng-model="confirmed" ng-change="change()" id="ng-change-example1" />
	 *       <input type="checkbox" ng-model="confirmed" id="ng-change-example2" />
	 *       <label for="ng-change-example2">Confirmed</label><br />
	 *       <tt>debug = {{confirmed}}</tt><br/>
	 *       <tt>counter = {{counter}}</tt><br/>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     var counter = element(by.binding('counter'));
	 *     var debug = element(by.binding('confirmed'));
	 *
	 *     it('should evaluate the expression if changing from view', function() {
	 *       expect(counter.getText()).toContain('0');
	 *
	 *       element(by.id('ng-change-example1')).click();
	 *
	 *       expect(counter.getText()).toContain('1');
	 *       expect(debug.getText()).toContain('true');
	 *     });
	 *
	 *     it('should not evaluate the expression if changing from model', function() {
	 *       element(by.id('ng-change-example2')).click();
	
	 *       expect(counter.getText()).toContain('0');
	 *       expect(debug.getText()).toContain('true');
	 *     });
	 *   </file>
	 * </example>
	 */var ngChangeDirective=valueFn({restrict:'A',require:'ngModel',link:function link(scope,element,attr,ctrl){ctrl.$viewChangeListeners.push(function(){scope.$eval(attr.ngChange);});}});/* exported
	  ngClassDirective,
	  ngClassEvenDirective,
	  ngClassOddDirective
	*/function classDirective(name,selector){name='ngClass'+name;var indexWatchExpression;return['$parse',function($parse){return{restrict:'AC',link:function link(scope,element,attr){var classCounts=element.data('$classCounts');var oldModulo=true;var oldClassString;if(!classCounts){// Use createMap() to prevent class assumptions involving property
	// names in Object.prototype
	classCounts=createMap();element.data('$classCounts',classCounts);}if(name!=='ngClass'){if(!indexWatchExpression){indexWatchExpression=$parse('$index',function moduloTwo($index){// eslint-disable-next-line no-bitwise
	return $index&1;});}scope.$watch(indexWatchExpression,ngClassIndexWatchAction);}scope.$watch($parse(attr[name],toClassString),ngClassWatchAction);function addClasses(classString){classString=digestClassCounts(split(classString),1);attr.$addClass(classString);}function removeClasses(classString){classString=digestClassCounts(split(classString),-1);attr.$removeClass(classString);}function updateClasses(oldClassString,newClassString){var oldClassArray=split(oldClassString);var newClassArray=split(newClassString);var toRemoveArray=arrayDifference(oldClassArray,newClassArray);var toAddArray=arrayDifference(newClassArray,oldClassArray);var toRemoveString=digestClassCounts(toRemoveArray,-1);var toAddString=digestClassCounts(toAddArray,1);attr.$addClass(toAddString);attr.$removeClass(toRemoveString);}function digestClassCounts(classArray,count){var classesToUpdate=[];forEach(classArray,function(className){if(count>0||classCounts[className]){classCounts[className]=(classCounts[className]||0)+count;if(classCounts[className]===+(count>0)){classesToUpdate.push(className);}}});return classesToUpdate.join(' ');}function ngClassIndexWatchAction(newModulo){// This watch-action should run before the `ngClassWatchAction()`, thus it
	// adds/removes `oldClassString`. If the `ngClass` expression has changed as well, the
	// `ngClassWatchAction()` will update the classes.
	if(newModulo===selector){addClasses(oldClassString);}else{removeClasses(oldClassString);}oldModulo=newModulo;}function ngClassWatchAction(newClassString){// When using a one-time binding the newClassString will return
	// the pre-interceptor value until the one-time is complete
	if(!isString(newClassString)){newClassString=toClassString(newClassString);}if(oldModulo===selector){updateClasses(oldClassString,newClassString);}oldClassString=newClassString;}}};}];// Helpers
	function arrayDifference(tokens1,tokens2){if(!tokens1||!tokens1.length)return[];if(!tokens2||!tokens2.length)return tokens1;var values=[];outer:for(var i=0;i<tokens1.length;i++){var token=tokens1[i];for(var j=0;j<tokens2.length;j++){if(token===tokens2[j])continue outer;}values.push(token);}return values;}function split(classString){return classString&&classString.split(' ');}function toClassString(classValue){var classString=classValue;if(isArray(classValue)){classString=classValue.map(toClassString).join(' ');}else if(isObject(classValue)){classString=Object.keys(classValue).filter(function(key){return classValue[key];}).join(' ');}return classString;}}/**
	 * @ngdoc directive
	 * @name ngClass
	 * @restrict AC
	 *
	 * @description
	 * The `ngClass` directive allows you to dynamically set CSS classes on an HTML element by databinding
	 * an expression that represents all classes to be added.
	 *
	 * The directive operates in three different ways, depending on which of three types the expression
	 * evaluates to:
	 *
	 * 1. If the expression evaluates to a string, the string should be one or more space-delimited class
	 * names.
	 *
	 * 2. If the expression evaluates to an object, then for each key-value pair of the
	 * object with a truthy value the corresponding key is used as a class name.
	 *
	 * 3. If the expression evaluates to an array, each element of the array should either be a string as in
	 * type 1 or an object as in type 2. This means that you can mix strings and objects together in an array
	 * to give you more control over what CSS classes appear. See the code below for an example of this.
	 *
	 *
	 * The directive won't add duplicate classes if a particular class was already set.
	 *
	 * When the expression changes, the previously added classes are removed and only then are the
	 * new classes added.
	 *
	 * @knownIssue
	 * You should not use {@link guide/interpolation interpolation} in the value of the `class`
	 * attribute, when using the `ngClass` directive on the same element.
	 * See {@link guide/interpolation#known-issues here} for more info.
	 *
	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link ng.$animate#addClass addClass}       | just before the class is applied to the element   |
	 * | {@link ng.$animate#removeClass removeClass} | just before the class is removed from the element |
	 *
	 * @element ANY
	 * @param {expression} ngClass {@link guide/expression Expression} to eval. The result
	 *   of the evaluation can be a string representing space delimited class
	 *   names, an array, or a map of class names to boolean values. In the case of a map, the
	 *   names of the properties whose values are truthy will be added as css classes to the
	 *   element.
	 *
	 * @example Example that demonstrates basic bindings via ngClass directive.
	   <example name="ng-class">
	     <file name="index.html">
	       <p ng-class="{strike: deleted, bold: important, 'has-error': error}">Map Syntax Example</p>
	       <label>
	          <input type="checkbox" ng-model="deleted">
	          deleted (apply "strike" class)
	       </label><br>
	       <label>
	          <input type="checkbox" ng-model="important">
	          important (apply "bold" class)
	       </label><br>
	       <label>
	          <input type="checkbox" ng-model="error">
	          error (apply "has-error" class)
	       </label>
	       <hr>
	       <p ng-class="style">Using String Syntax</p>
	       <input type="text" ng-model="style"
	              placeholder="Type: bold strike red" aria-label="Type: bold strike red">
	       <hr>
	       <p ng-class="[style1, style2, style3]">Using Array Syntax</p>
	       <input ng-model="style1"
	              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red"><br>
	       <input ng-model="style2"
	              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 2"><br>
	       <input ng-model="style3"
	              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 3"><br>
	       <hr>
	       <p ng-class="[style4, {orange: warning}]">Using Array and Map Syntax</p>
	       <input ng-model="style4" placeholder="Type: bold, strike" aria-label="Type: bold, strike"><br>
	       <label><input type="checkbox" ng-model="warning"> warning (apply "orange" class)</label>
	     </file>
	     <file name="style.css">
	       .strike {
	           text-decoration: line-through;
	       }
	       .bold {
	           font-weight: bold;
	       }
	       .red {
	           color: red;
	       }
	       .has-error {
	           color: red;
	           background-color: yellow;
	       }
	       .orange {
	           color: orange;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       var ps = element.all(by.css('p'));
	
	       it('should let you toggle the class', function() {
	
	         expect(ps.first().getAttribute('class')).not.toMatch(/bold/);
	         expect(ps.first().getAttribute('class')).not.toMatch(/has-error/);
	
	         element(by.model('important')).click();
	         expect(ps.first().getAttribute('class')).toMatch(/bold/);
	
	         element(by.model('error')).click();
	         expect(ps.first().getAttribute('class')).toMatch(/has-error/);
	       });
	
	       it('should let you toggle string example', function() {
	         expect(ps.get(1).getAttribute('class')).toBe('');
	         element(by.model('style')).clear();
	         element(by.model('style')).sendKeys('red');
	         expect(ps.get(1).getAttribute('class')).toBe('red');
	       });
	
	       it('array example should have 3 classes', function() {
	         expect(ps.get(2).getAttribute('class')).toBe('');
	         element(by.model('style1')).sendKeys('bold');
	         element(by.model('style2')).sendKeys('strike');
	         element(by.model('style3')).sendKeys('red');
	         expect(ps.get(2).getAttribute('class')).toBe('bold strike red');
	       });
	
	       it('array with map example should have 2 classes', function() {
	         expect(ps.last().getAttribute('class')).toBe('');
	         element(by.model('style4')).sendKeys('bold');
	         element(by.model('warning')).click();
	         expect(ps.last().getAttribute('class')).toBe('bold orange');
	       });
	     </file>
	   </example>
	
	   ## Animations
	
	   The example below demonstrates how to perform animations using ngClass.
	
	   <example module="ngAnimate" deps="angular-animate.js" animations="true" name="ng-class">
	     <file name="index.html">
	      <input id="setbtn" type="button" value="set" ng-click="myVar='my-class'">
	      <input id="clearbtn" type="button" value="clear" ng-click="myVar=''">
	      <br>
	      <span class="base-class" ng-class="myVar">Sample Text</span>
	     </file>
	     <file name="style.css">
	       .base-class {
	         transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
	       }
	
	       .base-class.my-class {
	         color: red;
	         font-size:3em;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-class', function() {
	         expect(element(by.css('.base-class')).getAttribute('class')).not.
	           toMatch(/my-class/);
	
	         element(by.id('setbtn')).click();
	
	         expect(element(by.css('.base-class')).getAttribute('class')).
	           toMatch(/my-class/);
	
	         element(by.id('clearbtn')).click();
	
	         expect(element(by.css('.base-class')).getAttribute('class')).not.
	           toMatch(/my-class/);
	       });
	     </file>
	   </example>
	
	
	   ## ngClass and pre-existing CSS3 Transitions/Animations
	   The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure.
	   Upon animation ngAnimate will apply supplementary CSS classes to track the start and end of an animation, but this will not hinder
	   any pre-existing CSS transitions already on the element. To get an idea of what happens during a class-based animation, be sure
	   to view the step by step details of {@link $animate#addClass $animate.addClass} and
	   {@link $animate#removeClass $animate.removeClass}.
	 */var ngClassDirective=classDirective('',true);/**
	 * @ngdoc directive
	 * @name ngClassOdd
	 * @restrict AC
	 *
	 * @description
	 * The `ngClassOdd` and `ngClassEven` directives work exactly as
	 * {@link ng.directive:ngClass ngClass}, except they work in
	 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
	 *
	 * This directive can be applied only within the scope of an
	 * {@link ng.directive:ngRepeat ngRepeat}.
	 *
	 * @element ANY
	 * @param {expression} ngClassOdd {@link guide/expression Expression} to eval. The result
	 *   of the evaluation can be a string representing space delimited class names or an array.
	 *
	 * @example
	   <example name="ng-class-odd">
	     <file name="index.html">
	        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
	          <li ng-repeat="name in names">
	           <span ng-class-odd="'odd'" ng-class-even="'even'">
	             {{name}}
	           </span>
	          </li>
	        </ol>
	     </file>
	     <file name="style.css">
	       .odd {
	         color: red;
	       }
	       .even {
	         color: blue;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-class-odd and ng-class-even', function() {
	         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
	           toMatch(/odd/);
	         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
	           toMatch(/even/);
	       });
	     </file>
	   </example>
	 */var ngClassOddDirective=classDirective('Odd',0);/**
	 * @ngdoc directive
	 * @name ngClassEven
	 * @restrict AC
	 *
	 * @description
	 * The `ngClassOdd` and `ngClassEven` directives work exactly as
	 * {@link ng.directive:ngClass ngClass}, except they work in
	 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
	 *
	 * This directive can be applied only within the scope of an
	 * {@link ng.directive:ngRepeat ngRepeat}.
	 *
	 * @element ANY
	 * @param {expression} ngClassEven {@link guide/expression Expression} to eval. The
	 *   result of the evaluation can be a string representing space delimited class names or an array.
	 *
	 * @example
	   <example name="ng-class-even">
	     <file name="index.html">
	        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
	          <li ng-repeat="name in names">
	           <span ng-class-odd="'odd'" ng-class-even="'even'">
	             {{name}} &nbsp; &nbsp; &nbsp;
	           </span>
	          </li>
	        </ol>
	     </file>
	     <file name="style.css">
	       .odd {
	         color: red;
	       }
	       .even {
	         color: blue;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-class-odd and ng-class-even', function() {
	         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
	           toMatch(/odd/);
	         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
	           toMatch(/even/);
	       });
	     </file>
	   </example>
	 */var ngClassEvenDirective=classDirective('Even',1);/**
	 * @ngdoc directive
	 * @name ngCloak
	 * @restrict AC
	 *
	 * @description
	 * The `ngCloak` directive is used to prevent the Angular html template from being briefly
	 * displayed by the browser in its raw (uncompiled) form while your application is loading. Use this
	 * directive to avoid the undesirable flicker effect caused by the html template display.
	 *
	 * The directive can be applied to the `<body>` element, but the preferred usage is to apply
	 * multiple `ngCloak` directives to small portions of the page to permit progressive rendering
	 * of the browser view.
	 *
	 * `ngCloak` works in cooperation with the following css rule embedded within `angular.js` and
	 * `angular.min.js`.
	 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
	 *
	 * ```css
	 * [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {
	 *   display: none !important;
	 * }
	 * ```
	 *
	 * When this css rule is loaded by the browser, all html elements (including their children) that
	 * are tagged with the `ngCloak` directive are hidden. When Angular encounters this directive
	 * during the compilation of the template it deletes the `ngCloak` element attribute, making
	 * the compiled element visible.
	 *
	 * For the best result, the `angular.js` script must be loaded in the head section of the html
	 * document; alternatively, the css rule above must be included in the external stylesheet of the
	 * application.
	 *
	 * @element ANY
	 *
	 * @example
	   <example name="ng-cloak">
	     <file name="index.html">
	        <div id="template1" ng-cloak>{{ 'hello' }}</div>
	        <div id="template2" class="ng-cloak">{{ 'world' }}</div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should remove the template directive and css class', function() {
	         expect($('#template1').getAttribute('ng-cloak')).
	           toBeNull();
	         expect($('#template2').getAttribute('ng-cloak')).
	           toBeNull();
	       });
	     </file>
	   </example>
	 *
	 */var ngCloakDirective=ngDirective({compile:function compile(element,attr){attr.$set('ngCloak',undefined);element.removeClass('ng-cloak');}});/**
	 * @ngdoc directive
	 * @name ngController
	 *
	 * @description
	 * The `ngController` directive attaches a controller class to the view. This is a key aspect of how angular
	 * supports the principles behind the Model-View-Controller design pattern.
	 *
	 * MVC components in angular:
	 *
	 * * Model — Models are the properties of a scope; scopes are attached to the DOM where scope properties
	 *   are accessed through bindings.
	 * * View — The template (HTML with data bindings) that is rendered into the View.
	 * * Controller — The `ngController` directive specifies a Controller class; the class contains business
	 *   logic behind the application to decorate the scope with functions and values
	 *
	 * Note that you can also attach controllers to the DOM by declaring it in a route definition
	 * via the {@link ngRoute.$route $route} service. A common mistake is to declare the controller
	 * again using `ng-controller` in the template itself.  This will cause the controller to be attached
	 * and executed twice.
	 *
	 * @element ANY
	 * @scope
	 * @priority 500
	 * @param {expression} ngController Name of a constructor function registered with the current
	 * {@link ng.$controllerProvider $controllerProvider} or an {@link guide/expression expression}
	 * that on the current scope evaluates to a constructor function.
	 *
	 * The controller instance can be published into a scope property by specifying
	 * `ng-controller="as propertyName"`.
	 *
	 * If the current `$controllerProvider` is configured to use globals (via
	 * {@link ng.$controllerProvider#allowGlobals `$controllerProvider.allowGlobals()` }), this may
	 * also be the name of a globally accessible constructor function (deprecated, not recommended).
	 *
	 * @example
	 * Here is a simple form for editing user contact information. Adding, removing, clearing, and
	 * greeting are methods declared on the controller (see source tab). These methods can
	 * easily be called from the angular markup. Any changes to the data are automatically reflected
	 * in the View without the need for a manual update.
	 *
	 * Two different declaration styles are included below:
	 *
	 * * one binds methods and properties directly onto the controller using `this`:
	 * `ng-controller="SettingsController1 as settings"`
	 * * one injects `$scope` into the controller:
	 * `ng-controller="SettingsController2"`
	 *
	 * The second option is more common in the Angular community, and is generally used in boilerplates
	 * and in this guide. However, there are advantages to binding properties directly to the controller
	 * and avoiding scope.
	 *
	 * * Using `controller as` makes it obvious which controller you are accessing in the template when
	 * multiple controllers apply to an element.
	 * * If you are writing your controllers as classes you have easier access to the properties and
	 * methods, which will appear on the scope, from inside the controller code.
	 * * Since there is always a `.` in the bindings, you don't have to worry about prototypal
	 * inheritance masking primitives.
	 *
	 * This example demonstrates the `controller as` syntax.
	 *
	 * <example name="ngControllerAs" module="controllerAsExample">
	 *   <file name="index.html">
	 *    <div id="ctrl-as-exmpl" ng-controller="SettingsController1 as settings">
	 *      <label>Name: <input type="text" ng-model="settings.name"/></label>
	 *      <button ng-click="settings.greet()">greet</button><br/>
	 *      Contact:
	 *      <ul>
	 *        <li ng-repeat="contact in settings.contacts">
	 *          <select ng-model="contact.type" aria-label="Contact method" id="select_{{$index}}">
	 *             <option>phone</option>
	 *             <option>email</option>
	 *          </select>
	 *          <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />
	 *          <button ng-click="settings.clearContact(contact)">clear</button>
	 *          <button ng-click="settings.removeContact(contact)" aria-label="Remove">X</button>
	 *        </li>
	 *        <li><button ng-click="settings.addContact()">add</button></li>
	 *     </ul>
	 *    </div>
	 *   </file>
	 *   <file name="app.js">
	 *    angular.module('controllerAsExample', [])
	 *      .controller('SettingsController1', SettingsController1);
	 *
	 *    function SettingsController1() {
	 *      this.name = 'John Smith';
	 *      this.contacts = [
	 *        {type: 'phone', value: '408 555 1212'},
	 *        {type: 'email', value: 'john.smith@example.org'}
	 *      ];
	 *    }
	 *
	 *    SettingsController1.prototype.greet = function() {
	 *      alert(this.name);
	 *    };
	 *
	 *    SettingsController1.prototype.addContact = function() {
	 *      this.contacts.push({type: 'email', value: 'yourname@example.org'});
	 *    };
	 *
	 *    SettingsController1.prototype.removeContact = function(contactToRemove) {
	 *     var index = this.contacts.indexOf(contactToRemove);
	 *      this.contacts.splice(index, 1);
	 *    };
	 *
	 *    SettingsController1.prototype.clearContact = function(contact) {
	 *      contact.type = 'phone';
	 *      contact.value = '';
	 *    };
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     it('should check controller as', function() {
	 *       var container = element(by.id('ctrl-as-exmpl'));
	 *         expect(container.element(by.model('settings.name'))
	 *           .getAttribute('value')).toBe('John Smith');
	 *
	 *       var firstRepeat =
	 *           container.element(by.repeater('contact in settings.contacts').row(0));
	 *       var secondRepeat =
	 *           container.element(by.repeater('contact in settings.contacts').row(1));
	 *
	 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *           .toBe('408 555 1212');
	 *
	 *       expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *           .toBe('john.smith@example.org');
	 *
	 *       firstRepeat.element(by.buttonText('clear')).click();
	 *
	 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *           .toBe('');
	 *
	 *       container.element(by.buttonText('add')).click();
	 *
	 *       expect(container.element(by.repeater('contact in settings.contacts').row(2))
	 *           .element(by.model('contact.value'))
	 *           .getAttribute('value'))
	 *           .toBe('yourname@example.org');
	 *     });
	 *   </file>
	 * </example>
	 *
	 * This example demonstrates the "attach to `$scope`" style of controller.
	 *
	 * <example name="ngController" module="controllerExample">
	 *  <file name="index.html">
	 *   <div id="ctrl-exmpl" ng-controller="SettingsController2">
	 *     <label>Name: <input type="text" ng-model="name"/></label>
	 *     <button ng-click="greet()">greet</button><br/>
	 *     Contact:
	 *     <ul>
	 *       <li ng-repeat="contact in contacts">
	 *         <select ng-model="contact.type" id="select_{{$index}}">
	 *            <option>phone</option>
	 *            <option>email</option>
	 *         </select>
	 *         <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />
	 *         <button ng-click="clearContact(contact)">clear</button>
	 *         <button ng-click="removeContact(contact)">X</button>
	 *       </li>
	 *       <li>[ <button ng-click="addContact()">add</button> ]</li>
	 *    </ul>
	 *   </div>
	 *  </file>
	 *  <file name="app.js">
	 *   angular.module('controllerExample', [])
	 *     .controller('SettingsController2', ['$scope', SettingsController2]);
	 *
	 *   function SettingsController2($scope) {
	 *     $scope.name = 'John Smith';
	 *     $scope.contacts = [
	 *       {type:'phone', value:'408 555 1212'},
	 *       {type:'email', value:'john.smith@example.org'}
	 *     ];
	 *
	 *     $scope.greet = function() {
	 *       alert($scope.name);
	 *     };
	 *
	 *     $scope.addContact = function() {
	 *       $scope.contacts.push({type:'email', value:'yourname@example.org'});
	 *     };
	 *
	 *     $scope.removeContact = function(contactToRemove) {
	 *       var index = $scope.contacts.indexOf(contactToRemove);
	 *       $scope.contacts.splice(index, 1);
	 *     };
	 *
	 *     $scope.clearContact = function(contact) {
	 *       contact.type = 'phone';
	 *       contact.value = '';
	 *     };
	 *   }
	 *  </file>
	 *  <file name="protractor.js" type="protractor">
	 *    it('should check controller', function() {
	 *      var container = element(by.id('ctrl-exmpl'));
	 *
	 *      expect(container.element(by.model('name'))
	 *          .getAttribute('value')).toBe('John Smith');
	 *
	 *      var firstRepeat =
	 *          container.element(by.repeater('contact in contacts').row(0));
	 *      var secondRepeat =
	 *          container.element(by.repeater('contact in contacts').row(1));
	 *
	 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *          .toBe('408 555 1212');
	 *      expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *          .toBe('john.smith@example.org');
	 *
	 *      firstRepeat.element(by.buttonText('clear')).click();
	 *
	 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *          .toBe('');
	 *
	 *      container.element(by.buttonText('add')).click();
	 *
	 *      expect(container.element(by.repeater('contact in contacts').row(2))
	 *          .element(by.model('contact.value'))
	 *          .getAttribute('value'))
	 *          .toBe('yourname@example.org');
	 *    });
	 *  </file>
	 *</example>
	
	 */var ngControllerDirective=[function(){return{restrict:'A',scope:true,controller:'@',priority:500};}];/**
	 * @ngdoc directive
	 * @name ngCsp
	 *
	 * @restrict A
	 * @element ANY
	 * @description
	 *
	 * Angular has some features that can conflict with certain restrictions that are applied when using
	 * [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) rules.
	 *
	 * If you intend to implement CSP with these rules then you must tell Angular not to use these
	 * features.
	 *
	 * This is necessary when developing things like Google Chrome Extensions or Universal Windows Apps.
	 *
	 *
	 * The following default rules in CSP affect Angular:
	 *
	 * * The use of `eval()`, `Function(string)` and similar functions to dynamically create and execute
	 * code from strings is forbidden. Angular makes use of this in the {@link $parse} service to
	 * provide a 30% increase in the speed of evaluating Angular expressions. (This CSP rule can be
	 * disabled with the CSP keyword `unsafe-eval`, but it is generally not recommended as it would
	 * weaken the protections offered by CSP.)
	 *
	 * * The use of inline resources, such as inline `<script>` and `<style>` elements, are forbidden.
	 * This prevents apps from injecting custom styles directly into the document. Angular makes use of
	 * this to include some CSS rules (e.g. {@link ngCloak} and {@link ngHide}). To make these
	 * directives work when a CSP rule is blocking inline styles, you must link to the `angular-csp.css`
	 * in your HTML manually. (This CSP rule can be disabled with the CSP keyword `unsafe-inline`, but
	 * it is generally not recommended as it would weaken the protections offered by CSP.)
	 *
	 * If you do not provide `ngCsp` then Angular tries to autodetect if CSP is blocking dynamic code
	 * creation from strings (e.g., `unsafe-eval` not specified in CSP header) and automatically
	 * deactivates this feature in the {@link $parse} service. This autodetection, however, triggers a
	 * CSP error to be logged in the console:
	 *
	 * ```
	 * Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of
	 * script in the following Content Security Policy directive: "default-src 'self'". Note that
	 * 'script-src' was not explicitly set, so 'default-src' is used as a fallback.
	 * ```
	 *
	 * This error is harmless but annoying. To prevent the error from showing up, put the `ngCsp`
	 * directive on an element of the HTML document that appears before the `<script>` tag that loads
	 * the `angular.js` file.
	 *
	 * *Note: This directive is only available in the `ng-csp` and `data-ng-csp` attribute form.*
	 *
	 * You can specify which of the CSP related Angular features should be deactivated by providing
	 * a value for the `ng-csp` attribute. The options are as follows:
	 *
	 * * no-inline-style: this stops Angular from injecting CSS styles into the DOM
	 *
	 * * no-unsafe-eval: this stops Angular from optimizing $parse with unsafe eval of strings
	 *
	 * You can use these values in the following combinations:
	 *
	 *
	 * * No declaration means that Angular will assume that you can do inline styles, but it will do
	 * a runtime check for unsafe-eval. E.g. `<body>`. This is backwardly compatible with previous
	 * versions of Angular.
	 *
	 * * A simple `ng-csp` (or `data-ng-csp`) attribute will tell Angular to deactivate both inline
	 * styles and unsafe eval. E.g. `<body ng-csp>`. This is backwardly compatible with previous
	 * versions of Angular.
	 *
	 * * Specifying only `no-unsafe-eval` tells Angular that we must not use eval, but that we can
	 * inject inline styles. E.g. `<body ng-csp="no-unsafe-eval">`.
	 *
	 * * Specifying only `no-inline-style` tells Angular that we must not inject styles, but that we can
	 * run eval - no automatic check for unsafe eval will occur. E.g. `<body ng-csp="no-inline-style">`
	 *
	 * * Specifying both `no-unsafe-eval` and `no-inline-style` tells Angular that we must not inject
	 * styles nor use eval, which is the same as an empty: ng-csp.
	 * E.g.`<body ng-csp="no-inline-style;no-unsafe-eval">`
	 *
	 * @example
	 * This example shows how to apply the `ngCsp` directive to the `html` tag.
	   ```html
	     <!doctype html>
	     <html ng-app ng-csp>
	     ...
	     ...
	     </html>
	   ```
	  * @example
	      <!-- Note: the `.csp` suffix in the example name triggers CSP mode in our http server! -->
	      <example name="example.csp" module="cspExample" ng-csp="true">
	        <file name="index.html">
	          <div ng-controller="MainController as ctrl">
	            <div>
	              <button ng-click="ctrl.inc()" id="inc">Increment</button>
	              <span id="counter">
	                {{ctrl.counter}}
	              </span>
	            </div>
	
	            <div>
	              <button ng-click="ctrl.evil()" id="evil">Evil</button>
	              <span id="evilError">
	                {{ctrl.evilError}}
	              </span>
	            </div>
	          </div>
	        </file>
	        <file name="script.js">
	           angular.module('cspExample', [])
	             .controller('MainController', function MainController() {
	                this.counter = 0;
	                this.inc = function() {
	                  this.counter++;
	                };
	                this.evil = function() {
	                  try {
	                    eval('1+2'); // eslint-disable-line no-eval
	                  } catch (e) {
	                    this.evilError = e.message;
	                  }
	                };
	              });
	        </file>
	        <file name="protractor.js" type="protractor">
	          var util, webdriver;
	
	          var incBtn = element(by.id('inc'));
	          var counter = element(by.id('counter'));
	          var evilBtn = element(by.id('evil'));
	          var evilError = element(by.id('evilError'));
	
	          function getAndClearSevereErrors() {
	            return browser.manage().logs().get('browser').then(function(browserLog) {
	              return browserLog.filter(function(logEntry) {
	                return logEntry.level.value > webdriver.logging.Level.WARNING.value;
	              });
	            });
	          }
	
	          function clearErrors() {
	            getAndClearSevereErrors();
	          }
	
	          function expectNoErrors() {
	            getAndClearSevereErrors().then(function(filteredLog) {
	              expect(filteredLog.length).toEqual(0);
	              if (filteredLog.length) {
	                console.log('browser console errors: ' + util.inspect(filteredLog));
	              }
	            });
	          }
	
	          function expectError(regex) {
	            getAndClearSevereErrors().then(function(filteredLog) {
	              var found = false;
	              filteredLog.forEach(function(log) {
	                if (log.message.match(regex)) {
	                  found = true;
	                }
	              });
	              if (!found) {
	                throw new Error('expected an error that matches ' + regex);
	              }
	            });
	          }
	
	          beforeEach(function() {
	            util = require('util');
	            webdriver = require('selenium-webdriver');
	          });
	
	          // For now, we only test on Chrome,
	          // as Safari does not load the page with Protractor's injected scripts,
	          // and Firefox webdriver always disables content security policy (#6358)
	          if (browser.params.browser !== 'chrome') {
	            return;
	          }
	
	          it('should not report errors when the page is loaded', function() {
	            // clear errors so we are not dependent on previous tests
	            clearErrors();
	            // Need to reload the page as the page is already loaded when
	            // we come here
	            browser.driver.getCurrentUrl().then(function(url) {
	              browser.get(url);
	            });
	            expectNoErrors();
	          });
	
	          it('should evaluate expressions', function() {
	            expect(counter.getText()).toEqual('0');
	            incBtn.click();
	            expect(counter.getText()).toEqual('1');
	            expectNoErrors();
	          });
	
	          it('should throw and report an error when using "eval"', function() {
	            evilBtn.click();
	            expect(evilError.getText()).toMatch(/Content Security Policy/);
	            expectError(/Content Security Policy/);
	          });
	        </file>
	      </example>
	  */// `ngCsp` is not implemented as a proper directive any more, because we need it be processed while
	// we bootstrap the app (before `$parse` is instantiated). For this reason, we just have the `csp()`
	// fn that looks for the `ng-csp` attribute anywhere in the current doc.
	/**
	 * @ngdoc directive
	 * @name ngClick
	 *
	 * @description
	 * The ngClick directive allows you to specify custom behavior when
	 * an element is clicked.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngClick {@link guide/expression Expression} to evaluate upon
	 * click. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example name="ng-click">
	     <file name="index.html">
	      <button ng-click="count = count + 1" ng-init="count=0">
	        Increment
	      </button>
	      <span>
	        count: {{count}}
	      </span>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-click', function() {
	         expect(element(by.binding('count')).getText()).toMatch('0');
	         element(by.css('button')).click();
	         expect(element(by.binding('count')).getText()).toMatch('1');
	       });
	     </file>
	   </example>
	 *//*
	 * A collection of directives that allows creation of custom event handlers that are defined as
	 * angular expressions and are compiled and executed within the current scope.
	 */var ngEventDirectives={};// For events that might fire synchronously during DOM manipulation
	// we need to execute their event handlers asynchronously using $evalAsync,
	// so that they are not executed in an inconsistent state.
	var forceAsyncEvents={'blur':true,'focus':true};forEach('click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'.split(' '),function(eventName){var directiveName=directiveNormalize('ng-'+eventName);ngEventDirectives[directiveName]=['$parse','$rootScope',function($parse,$rootScope){return{restrict:'A',compile:function compile($element,attr){// NOTE:
	// We expose the powerful `$event` object on the scope that provides access to the Window,
	// etc. This is OK, because expressions are not sandboxed any more (and the expression
	// sandbox was never meant to be a security feature anyway).
	var fn=$parse(attr[directiveName]);return function ngEventHandler(scope,element){element.on(eventName,function(event){var callback=function callback(){fn(scope,{$event:event});};if(forceAsyncEvents[eventName]&&$rootScope.$$phase){scope.$evalAsync(callback);}else{scope.$apply(callback);}});};}};}];});/**
	 * @ngdoc directive
	 * @name ngDblclick
	 *
	 * @description
	 * The `ngDblclick` directive allows you to specify custom behavior on a dblclick event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngDblclick {@link guide/expression Expression} to evaluate upon
	 * a dblclick. (The Event object is available as `$event`)
	 *
	 * @example
	   <example name="ng-dblclick">
	     <file name="index.html">
	      <button ng-dblclick="count = count + 1" ng-init="count=0">
	        Increment (on double click)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 *//**
	 * @ngdoc directive
	 * @name ngMousedown
	 *
	 * @description
	 * The ngMousedown directive allows you to specify custom behavior on mousedown event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMousedown {@link guide/expression Expression} to evaluate upon
	 * mousedown. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example name="ng-mousedown">
	     <file name="index.html">
	      <button ng-mousedown="count = count + 1" ng-init="count=0">
	        Increment (on mouse down)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 *//**
	 * @ngdoc directive
	 * @name ngMouseup
	 *
	 * @description
	 * Specify custom behavior on mouseup event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseup {@link guide/expression Expression} to evaluate upon
	 * mouseup. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example name="ng-mouseup">
	     <file name="index.html">
	      <button ng-mouseup="count = count + 1" ng-init="count=0">
	        Increment (on mouse up)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 *//**
	 * @ngdoc directive
	 * @name ngMouseover
	 *
	 * @description
	 * Specify custom behavior on mouseover event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseover {@link guide/expression Expression} to evaluate upon
	 * mouseover. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example name="ng-mouseover">
	     <file name="index.html">
	      <button ng-mouseover="count = count + 1" ng-init="count=0">
	        Increment (when mouse is over)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 *//**
	 * @ngdoc directive
	 * @name ngMouseenter
	 *
	 * @description
	 * Specify custom behavior on mouseenter event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseenter {@link guide/expression Expression} to evaluate upon
	 * mouseenter. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example name="ng-mouseenter">
	     <file name="index.html">
	      <button ng-mouseenter="count = count + 1" ng-init="count=0">
	        Increment (when mouse enters)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 *//**
	 * @ngdoc directive
	 * @name ngMouseleave
	 *
	 * @description
	 * Specify custom behavior on mouseleave event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseleave {@link guide/expression Expression} to evaluate upon
	 * mouseleave. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example name="ng-mouseleave">
	     <file name="index.html">
	      <button ng-mouseleave="count = count + 1" ng-init="count=0">
	        Increment (when mouse leaves)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 *//**
	 * @ngdoc directive
	 * @name ngMousemove
	 *
	 * @description
	 * Specify custom behavior on mousemove event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMousemove {@link guide/expression Expression} to evaluate upon
	 * mousemove. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example name="ng-mousemove">
	     <file name="index.html">
	      <button ng-mousemove="count = count + 1" ng-init="count=0">
	        Increment (when mouse moves)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 *//**
	 * @ngdoc directive
	 * @name ngKeydown
	 *
	 * @description
	 * Specify custom behavior on keydown event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngKeydown {@link guide/expression Expression} to evaluate upon
	 * keydown. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
	 *
	 * @example
	   <example name="ng-keydown">
	     <file name="index.html">
	      <input ng-keydown="count = count + 1" ng-init="count=0">
	      key down count: {{count}}
	     </file>
	   </example>
	 *//**
	 * @ngdoc directive
	 * @name ngKeyup
	 *
	 * @description
	 * Specify custom behavior on keyup event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngKeyup {@link guide/expression Expression} to evaluate upon
	 * keyup. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
	 *
	 * @example
	   <example name="ng-keyup">
	     <file name="index.html">
	       <p>Typing in the input box below updates the key count</p>
	       <input ng-keyup="count = count + 1" ng-init="count=0"> key up count: {{count}}
	
	       <p>Typing in the input box below updates the keycode</p>
	       <input ng-keyup="event=$event">
	       <p>event keyCode: {{ event.keyCode }}</p>
	       <p>event altKey: {{ event.altKey }}</p>
	     </file>
	   </example>
	 *//**
	 * @ngdoc directive
	 * @name ngKeypress
	 *
	 * @description
	 * Specify custom behavior on keypress event.
	 *
	 * @element ANY
	 * @param {expression} ngKeypress {@link guide/expression Expression} to evaluate upon
	 * keypress. ({@link guide/expression#-event- Event object is available as `$event`}
	 * and can be interrogated for keyCode, altKey, etc.)
	 *
	 * @example
	   <example name="ng-keypress">
	     <file name="index.html">
	      <input ng-keypress="count = count + 1" ng-init="count=0">
	      key press count: {{count}}
	     </file>
	   </example>
	 *//**
	 * @ngdoc directive
	 * @name ngSubmit
	 *
	 * @description
	 * Enables binding angular expressions to onsubmit events.
	 *
	 * Additionally it prevents the default action (which for form means sending the request to the
	 * server and reloading the current page), but only if the form does not contain `action`,
	 * `data-action`, or `x-action` attributes.
	 *
	 * <div class="alert alert-warning">
	 * **Warning:** Be careful not to cause "double-submission" by using both the `ngClick` and
	 * `ngSubmit` handlers together. See the
	 * {@link form#submitting-a-form-and-preventing-the-default-action `form` directive documentation}
	 * for a detailed discussion of when `ngSubmit` may be triggered.
	 * </div>
	 *
	 * @element form
	 * @priority 0
	 * @param {expression} ngSubmit {@link guide/expression Expression} to eval.
	 * ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example module="submitExample" name="ng-submit">
	     <file name="index.html">
	      <script>
	        angular.module('submitExample', [])
	          .controller('ExampleController', ['$scope', function($scope) {
	            $scope.list = [];
	            $scope.text = 'hello';
	            $scope.submit = function() {
	              if ($scope.text) {
	                $scope.list.push(this.text);
	                $scope.text = '';
	              }
	            };
	          }]);
	      </script>
	      <form ng-submit="submit()" ng-controller="ExampleController">
	        Enter text and hit enter:
	        <input type="text" ng-model="text" name="text" />
	        <input type="submit" id="submit" value="Submit" />
	        <pre>list={{list}}</pre>
	      </form>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-submit', function() {
	         expect(element(by.binding('list')).getText()).toBe('list=[]');
	         element(by.css('#submit')).click();
	         expect(element(by.binding('list')).getText()).toContain('hello');
	         expect(element(by.model('text')).getAttribute('value')).toBe('');
	       });
	       it('should ignore empty strings', function() {
	         expect(element(by.binding('list')).getText()).toBe('list=[]');
	         element(by.css('#submit')).click();
	         element(by.css('#submit')).click();
	         expect(element(by.binding('list')).getText()).toContain('hello');
	        });
	     </file>
	   </example>
	 *//**
	 * @ngdoc directive
	 * @name ngFocus
	 *
	 * @description
	 * Specify custom behavior on focus event.
	 *
	 * Note: As the `focus` event is executed synchronously when calling `input.focus()`
	 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
	 * during an `$apply` to ensure a consistent state.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngFocus {@link guide/expression Expression} to evaluate upon
	 * focus. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	 * See {@link ng.directive:ngClick ngClick}
	 *//**
	 * @ngdoc directive
	 * @name ngBlur
	 *
	 * @description
	 * Specify custom behavior on blur event.
	 *
	 * A [blur event](https://developer.mozilla.org/en-US/docs/Web/Events/blur) fires when
	 * an element has lost focus.
	 *
	 * Note: As the `blur` event is executed synchronously also during DOM manipulations
	 * (e.g. removing a focussed input),
	 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
	 * during an `$apply` to ensure a consistent state.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngBlur {@link guide/expression Expression} to evaluate upon
	 * blur. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	 * See {@link ng.directive:ngClick ngClick}
	 *//**
	 * @ngdoc directive
	 * @name ngCopy
	 *
	 * @description
	 * Specify custom behavior on copy event.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngCopy {@link guide/expression Expression} to evaluate upon
	 * copy. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example name="ng-copy">
	     <file name="index.html">
	      <input ng-copy="copied=true" ng-init="copied=false; value='copy me'" ng-model="value">
	      copied: {{copied}}
	     </file>
	   </example>
	 *//**
	 * @ngdoc directive
	 * @name ngCut
	 *
	 * @description
	 * Specify custom behavior on cut event.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngCut {@link guide/expression Expression} to evaluate upon
	 * cut. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example name="ng-cut">
	     <file name="index.html">
	      <input ng-cut="cut=true" ng-init="cut=false; value='cut me'" ng-model="value">
	      cut: {{cut}}
	     </file>
	   </example>
	 *//**
	 * @ngdoc directive
	 * @name ngPaste
	 *
	 * @description
	 * Specify custom behavior on paste event.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngPaste {@link guide/expression Expression} to evaluate upon
	 * paste. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example name="ng-paste">
	     <file name="index.html">
	      <input ng-paste="paste=true" ng-init="paste=false" placeholder='paste here'>
	      pasted: {{paste}}
	     </file>
	   </example>
	 *//**
	 * @ngdoc directive
	 * @name ngIf
	 * @restrict A
	 * @multiElement
	 *
	 * @description
	 * The `ngIf` directive removes or recreates a portion of the DOM tree based on an
	 * {expression}. If the expression assigned to `ngIf` evaluates to a false
	 * value then the element is removed from the DOM, otherwise a clone of the
	 * element is reinserted into the DOM.
	 *
	 * `ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the
	 * element in the DOM rather than changing its visibility via the `display` css property.  A common
	 * case when this difference is significant is when using css selectors that rely on an element's
	 * position within the DOM, such as the `:first-child` or `:last-child` pseudo-classes.
	 *
	 * Note that when an element is removed using `ngIf` its scope is destroyed and a new scope
	 * is created when the element is restored.  The scope created within `ngIf` inherits from
	 * its parent scope using
	 * [prototypal inheritance](https://github.com/angular/angular.js/wiki/Understanding-Scopes#javascript-prototypal-inheritance).
	 * An important implication of this is if `ngModel` is used within `ngIf` to bind to
	 * a javascript primitive defined in the parent scope. In this case any modifications made to the
	 * variable within the child scope will override (hide) the value in the parent scope.
	 *
	 * Also, `ngIf` recreates elements using their compiled state. An example of this behavior
	 * is if an element's class attribute is directly modified after it's compiled, using something like
	 * jQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element
	 * the added class will be lost because the original compiled state is used to regenerate the element.
	 *
	 * Additionally, you can provide animations via the `ngAnimate` module to animate the `enter`
	 * and `leave` effects.
	 *
	 * @animations
	 * | Animation                        | Occurs                               |
	 * |----------------------------------|-------------------------------------|
	 * | {@link ng.$animate#enter enter}  | just after the `ngIf` contents change and a new DOM element is created and injected into the `ngIf` container |
	 * | {@link ng.$animate#leave leave}  | just before the `ngIf` contents are removed from the DOM |
	 *
	 * @element ANY
	 * @scope
	 * @priority 600
	 * @param {expression} ngIf If the {@link guide/expression expression} is falsy then
	 *     the element is removed from the DOM tree. If it is truthy a copy of the compiled
	 *     element is added to the DOM tree.
	 *
	 * @example
	  <example module="ngAnimate" deps="angular-animate.js" animations="true" name="ng-if">
	    <file name="index.html">
	      <label>Click me: <input type="checkbox" ng-model="checked" ng-init="checked=true" /></label><br/>
	      Show when checked:
	      <span ng-if="checked" class="animate-if">
	        This is removed when the checkbox is unchecked.
	      </span>
	    </file>
	    <file name="animations.css">
	      .animate-if {
	        background:white;
	        border:1px solid black;
	        padding:10px;
	      }
	
	      .animate-if.ng-enter, .animate-if.ng-leave {
	        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
	      }
	
	      .animate-if.ng-enter,
	      .animate-if.ng-leave.ng-leave-active {
	        opacity:0;
	      }
	
	      .animate-if.ng-leave,
	      .animate-if.ng-enter.ng-enter-active {
	        opacity:1;
	      }
	    </file>
	  </example>
	 */var ngIfDirective=['$animate','$compile',function($animate,$compile){return{multiElement:true,transclude:'element',priority:600,terminal:true,restrict:'A',$$tlb:true,link:function link($scope,$element,$attr,ctrl,$transclude){var block,childScope,previousElements;$scope.$watch($attr.ngIf,function ngIfWatchAction(value){if(value){if(!childScope){$transclude(function(clone,newScope){childScope=newScope;clone[clone.length++]=$compile.$$createComment('end ngIf',$attr.ngIf);// Note: We only need the first/last node of the cloned nodes.
	// However, we need to keep the reference to the jqlite wrapper as it might be changed later
	// by a directive with templateUrl when its template arrives.
	block={clone:clone};$animate.enter(clone,$element.parent(),$element);});}}else{if(previousElements){previousElements.remove();previousElements=null;}if(childScope){childScope.$destroy();childScope=null;}if(block){previousElements=getBlockNodes(block.clone);$animate.leave(previousElements).done(function(response){if(response!==false)previousElements=null;});block=null;}}});}};}];/**
	 * @ngdoc directive
	 * @name ngInclude
	 * @restrict ECA
	 *
	 * @description
	 * Fetches, compiles and includes an external HTML fragment.
	 *
	 * By default, the template URL is restricted to the same domain and protocol as the
	 * application document. This is done by calling {@link $sce#getTrustedResourceUrl
	 * $sce.getTrustedResourceUrl} on it. To load templates from other domains or protocols
	 * you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist them} or
	 * {@link $sce#trustAsResourceUrl wrap them} as trusted values. Refer to Angular's {@link
	 * ng.$sce Strict Contextual Escaping}.
	 *
	 * In addition, the browser's
	 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
	 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
	 * policy may further restrict whether the template is successfully loaded.
	 * For example, `ngInclude` won't work for cross-domain requests on all browsers and for `file://`
	 * access on some browsers.
	 *
	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link ng.$animate#enter enter}  | when the expression changes, on the new include |
	 * | {@link ng.$animate#leave leave}  | when the expression changes, on the old include |
	 *
	 * The enter and leave animation occur concurrently.
	 *
	 * @scope
	 * @priority 400
	 *
	 * @param {string} ngInclude|src angular expression evaluating to URL. If the source is a string constant,
	 *                 make sure you wrap it in **single** quotes, e.g. `src="'myPartialTemplate.html'"`.
	 * @param {string=} onload Expression to evaluate when a new partial is loaded.
	 *                  <div class="alert alert-warning">
	 *                  **Note:** When using onload on SVG elements in IE11, the browser will try to call
	 *                  a function with the name on the window element, which will usually throw a
	 *                  "function is undefined" error. To fix this, you can instead use `data-onload` or a
	 *                  different form that {@link guide/directive#normalization matches} `onload`.
	 *                  </div>
	   *
	 * @param {string=} autoscroll Whether `ngInclude` should call {@link ng.$anchorScroll
	 *                  $anchorScroll} to scroll the viewport after the content is loaded.
	 *
	 *                  - If the attribute is not set, disable scrolling.
	 *                  - If the attribute is set without value, enable scrolling.
	 *                  - Otherwise enable scrolling only if the expression evaluates to truthy value.
	 *
	 * @example
	  <example module="includeExample" deps="angular-animate.js" animations="true" name="ng-include">
	    <file name="index.html">
	     <div ng-controller="ExampleController">
	       <select ng-model="template" ng-options="t.name for t in templates">
	        <option value="">(blank)</option>
	       </select>
	       url of the template: <code>{{template.url}}</code>
	       <hr/>
	       <div class="slide-animate-container">
	         <div class="slide-animate" ng-include="template.url"></div>
	       </div>
	     </div>
	    </file>
	    <file name="script.js">
	      angular.module('includeExample', ['ngAnimate'])
	        .controller('ExampleController', ['$scope', function($scope) {
	          $scope.templates =
	            [{ name: 'template1.html', url: 'template1.html'},
	             { name: 'template2.html', url: 'template2.html'}];
	          $scope.template = $scope.templates[0];
	        }]);
	     </file>
	    <file name="template1.html">
	      Content of template1.html
	    </file>
	    <file name="template2.html">
	      Content of template2.html
	    </file>
	    <file name="animations.css">
	      .slide-animate-container {
	        position:relative;
	        background:white;
	        border:1px solid black;
	        height:40px;
	        overflow:hidden;
	      }
	
	      .slide-animate {
	        padding:10px;
	      }
	
	      .slide-animate.ng-enter, .slide-animate.ng-leave {
	        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
	
	        position:absolute;
	        top:0;
	        left:0;
	        right:0;
	        bottom:0;
	        display:block;
	        padding:10px;
	      }
	
	      .slide-animate.ng-enter {
	        top:-50px;
	      }
	      .slide-animate.ng-enter.ng-enter-active {
	        top:0;
	      }
	
	      .slide-animate.ng-leave {
	        top:0;
	      }
	      .slide-animate.ng-leave.ng-leave-active {
	        top:50px;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var templateSelect = element(by.model('template'));
	      var includeElem = element(by.css('[ng-include]'));
	
	      it('should load template1.html', function() {
	        expect(includeElem.getText()).toMatch(/Content of template1.html/);
	      });
	
	      it('should load template2.html', function() {
	        if (browser.params.browser === 'firefox') {
	          // Firefox can't handle using selects
	          // See https://github.com/angular/protractor/issues/480
	          return;
	        }
	        templateSelect.click();
	        templateSelect.all(by.css('option')).get(2).click();
	        expect(includeElem.getText()).toMatch(/Content of template2.html/);
	      });
	
	      it('should change to blank', function() {
	        if (browser.params.browser === 'firefox') {
	          // Firefox can't handle using selects
	          return;
	        }
	        templateSelect.click();
	        templateSelect.all(by.css('option')).get(0).click();
	        expect(includeElem.isPresent()).toBe(false);
	      });
	    </file>
	  </example>
	 *//**
	 * @ngdoc event
	 * @name ngInclude#$includeContentRequested
	 * @eventType emit on the scope ngInclude was declared in
	 * @description
	 * Emitted every time the ngInclude content is requested.
	 *
	 * @param {Object} angularEvent Synthetic event object.
	 * @param {String} src URL of content to load.
	 *//**
	 * @ngdoc event
	 * @name ngInclude#$includeContentLoaded
	 * @eventType emit on the current ngInclude scope
	 * @description
	 * Emitted every time the ngInclude content is reloaded.
	 *
	 * @param {Object} angularEvent Synthetic event object.
	 * @param {String} src URL of content to load.
	 *//**
	 * @ngdoc event
	 * @name ngInclude#$includeContentError
	 * @eventType emit on the scope ngInclude was declared in
	 * @description
	 * Emitted when a template HTTP request yields an erroneous response (status < 200 || status > 299)
	 *
	 * @param {Object} angularEvent Synthetic event object.
	 * @param {String} src URL of content to load.
	 */var ngIncludeDirective=['$templateRequest','$anchorScroll','$animate',function($templateRequest,$anchorScroll,$animate){return{restrict:'ECA',priority:400,terminal:true,transclude:'element',controller:angular.noop,compile:function compile(element,attr){var srcExp=attr.ngInclude||attr.src,onloadExp=attr.onload||'',autoScrollExp=attr.autoscroll;return function(scope,$element,$attr,ctrl,$transclude){var changeCounter=0,currentScope,previousElement,currentElement;var cleanupLastIncludeContent=function cleanupLastIncludeContent(){if(previousElement){previousElement.remove();previousElement=null;}if(currentScope){currentScope.$destroy();currentScope=null;}if(currentElement){$animate.leave(currentElement).done(function(response){if(response!==false)previousElement=null;});previousElement=currentElement;currentElement=null;}};scope.$watch(srcExp,function ngIncludeWatchAction(src){var afterAnimation=function afterAnimation(response){if(response!==false&&isDefined(autoScrollExp)&&(!autoScrollExp||scope.$eval(autoScrollExp))){$anchorScroll();}};var thisChangeId=++changeCounter;if(src){//set the 2nd param to true to ignore the template request error so that the inner
	//contents and scope can be cleaned up.
	$templateRequest(src,true).then(function(response){if(scope.$$destroyed)return;if(thisChangeId!==changeCounter)return;var newScope=scope.$new();ctrl.template=response;// Note: This will also link all children of ng-include that were contained in the original
	// html. If that content contains controllers, ... they could pollute/change the scope.
	// However, using ng-include on an element with additional content does not make sense...
	// Note: We can't remove them in the cloneAttchFn of $transclude as that
	// function is called before linking the content, which would apply child
	// directives to non existing elements.
	var clone=$transclude(newScope,function(clone){cleanupLastIncludeContent();$animate.enter(clone,null,$element).done(afterAnimation);});currentScope=newScope;currentElement=clone;currentScope.$emit('$includeContentLoaded',src);scope.$eval(onloadExp);},function(){if(scope.$$destroyed)return;if(thisChangeId===changeCounter){cleanupLastIncludeContent();scope.$emit('$includeContentError',src);}});scope.$emit('$includeContentRequested',src);}else{cleanupLastIncludeContent();ctrl.template=null;}});};}};}];// This directive is called during the $transclude call of the first `ngInclude` directive.
	// It will replace and compile the content of the element with the loaded template.
	// We need this directive so that the element content is already filled when
	// the link function of another directive on the same element as ngInclude
	// is called.
	var ngIncludeFillContentDirective=['$compile',function($compile){return{restrict:'ECA',priority:-400,require:'ngInclude',link:function link(scope,$element,$attr,ctrl){if(toString.call($element[0]).match(/SVG/)){// WebKit: https://bugs.webkit.org/show_bug.cgi?id=135698 --- SVG elements do not
	// support innerHTML, so detect this here and try to generate the contents
	// specially.
	$element.empty();$compile(jqLiteBuildFragment(ctrl.template,window.document).childNodes)(scope,function namespaceAdaptedClone(clone){$element.append(clone);},{futureParentElement:$element});return;}$element.html(ctrl.template);$compile($element.contents())(scope);}};}];/**
	 * @ngdoc directive
	 * @name ngInit
	 * @restrict AC
	 *
	 * @description
	 * The `ngInit` directive allows you to evaluate an expression in the
	 * current scope.
	 *
	 * <div class="alert alert-danger">
	 * This directive can be abused to add unnecessary amounts of logic into your templates.
	 * There are only a few appropriate uses of `ngInit`, such as for aliasing special properties of
	 * {@link ng.directive:ngRepeat `ngRepeat`}, as seen in the demo below; and for injecting data via
	 * server side scripting. Besides these few cases, you should use {@link guide/controller controllers}
	 * rather than `ngInit` to initialize values on a scope.
	 * </div>
	 *
	 * <div class="alert alert-warning">
	 * **Note**: If you have assignment in `ngInit` along with a {@link ng.$filter `filter`}, make
	 * sure you have parentheses to ensure correct operator precedence:
	 * <pre class="prettyprint">
	 * `<div ng-init="test1 = ($index | toString)"></div>`
	 * </pre>
	 * </div>
	 *
	 * @priority 450
	 *
	 * @element ANY
	 * @param {expression} ngInit {@link guide/expression Expression} to eval.
	 *
	 * @example
	   <example module="initExample" name="ng-init">
	     <file name="index.html">
	   <script>
	     angular.module('initExample', [])
	       .controller('ExampleController', ['$scope', function($scope) {
	         $scope.list = [['a', 'b'], ['c', 'd']];
	       }]);
	   </script>
	   <div ng-controller="ExampleController">
	     <div ng-repeat="innerList in list" ng-init="outerIndex = $index">
	       <div ng-repeat="value in innerList" ng-init="innerIndex = $index">
	          <span class="example-init">list[ {{outerIndex}} ][ {{innerIndex}} ] = {{value}};</span>
	       </div>
	     </div>
	   </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should alias index positions', function() {
	         var elements = element.all(by.css('.example-init'));
	         expect(elements.get(0).getText()).toBe('list[ 0 ][ 0 ] = a;');
	         expect(elements.get(1).getText()).toBe('list[ 0 ][ 1 ] = b;');
	         expect(elements.get(2).getText()).toBe('list[ 1 ][ 0 ] = c;');
	         expect(elements.get(3).getText()).toBe('list[ 1 ][ 1 ] = d;');
	       });
	     </file>
	   </example>
	 */var ngInitDirective=ngDirective({priority:450,compile:function compile(){return{pre:function pre(scope,element,attrs){scope.$eval(attrs.ngInit);}};}});/**
	 * @ngdoc directive
	 * @name ngList
	 *
	 * @description
	 * Text input that converts between a delimited string and an array of strings. The default
	 * delimiter is a comma followed by a space - equivalent to `ng-list=", "`. You can specify a custom
	 * delimiter as the value of the `ngList` attribute - for example, `ng-list=" | "`.
	 *
	 * The behaviour of the directive is affected by the use of the `ngTrim` attribute.
	 * * If `ngTrim` is set to `"false"` then whitespace around both the separator and each
	 *   list item is respected. This implies that the user of the directive is responsible for
	 *   dealing with whitespace but also allows you to use whitespace as a delimiter, such as a
	 *   tab or newline character.
	 * * Otherwise whitespace around the delimiter is ignored when splitting (although it is respected
	 *   when joining the list items back together) and whitespace around each list item is stripped
	 *   before it is added to the model.
	 *
	 * ### Example with Validation
	 *
	 * <example name="ngList-directive" module="listExample">
	 *   <file name="app.js">
	 *      angular.module('listExample', [])
	 *        .controller('ExampleController', ['$scope', function($scope) {
	 *          $scope.names = ['morpheus', 'neo', 'trinity'];
	 *        }]);
	 *   </file>
	 *   <file name="index.html">
	 *    <form name="myForm" ng-controller="ExampleController">
	 *      <label>List: <input name="namesInput" ng-model="names" ng-list required></label>
	 *      <span role="alert">
	 *        <span class="error" ng-show="myForm.namesInput.$error.required">
	 *        Required!</span>
	 *      </span>
	 *      <br>
	 *      <tt>names = {{names}}</tt><br/>
	 *      <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>
	 *      <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>
	 *      <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	 *      <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	 *     </form>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     var listInput = element(by.model('names'));
	 *     var names = element(by.exactBinding('names'));
	 *     var valid = element(by.binding('myForm.namesInput.$valid'));
	 *     var error = element(by.css('span.error'));
	 *
	 *     it('should initialize to model', function() {
	 *       expect(names.getText()).toContain('["morpheus","neo","trinity"]');
	 *       expect(valid.getText()).toContain('true');
	 *       expect(error.getCssValue('display')).toBe('none');
	 *     });
	 *
	 *     it('should be invalid if empty', function() {
	 *       listInput.clear();
	 *       listInput.sendKeys('');
	 *
	 *       expect(names.getText()).toContain('');
	 *       expect(valid.getText()).toContain('false');
	 *       expect(error.getCssValue('display')).not.toBe('none');
	 *     });
	 *   </file>
	 * </example>
	 *
	 * ### Example - splitting on newline
	 * <example name="ngList-directive-newlines">
	 *   <file name="index.html">
	 *    <textarea ng-model="list" ng-list="&#10;" ng-trim="false"></textarea>
	 *    <pre>{{ list | json }}</pre>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     it("should split the text by newlines", function() {
	 *       var listInput = element(by.model('list'));
	 *       var output = element(by.binding('list | json'));
	 *       listInput.sendKeys('abc\ndef\nghi');
	 *       expect(output.getText()).toContain('[\n  "abc",\n  "def",\n  "ghi"\n]');
	 *     });
	 *   </file>
	 * </example>
	 *
	 * @element input
	 * @param {string=} ngList optional delimiter that should be used to split the value.
	 */var ngListDirective=function ngListDirective(){return{restrict:'A',priority:100,require:'ngModel',link:function link(scope,element,attr,ctrl){var ngList=attr.ngList||', ';var trimValues=attr.ngTrim!=='false';var separator=trimValues?trim(ngList):ngList;var parse=function parse(viewValue){// If the viewValue is invalid (say required but empty) it will be `undefined`
	if(isUndefined(viewValue))return;var list=[];if(viewValue){forEach(viewValue.split(separator),function(value){if(value)list.push(trimValues?trim(value):value);});}return list;};ctrl.$parsers.push(parse);ctrl.$formatters.push(function(value){if(isArray(value)){return value.join(ngList);}return undefined;});// Override the standard $isEmpty because an empty array means the input is empty.
	ctrl.$isEmpty=function(value){return!value||!value.length;};}};};/* global VALID_CLASS: true,
	  INVALID_CLASS: true,
	  PRISTINE_CLASS: true,
	  DIRTY_CLASS: true,
	  UNTOUCHED_CLASS: true,
	  TOUCHED_CLASS: true,
	  PENDING_CLASS: true,
	  addSetValidityMethod: true,
	  setupValidity: true,
	  defaultModelOptions: false
	*/var VALID_CLASS='ng-valid',INVALID_CLASS='ng-invalid',PRISTINE_CLASS='ng-pristine',DIRTY_CLASS='ng-dirty',UNTOUCHED_CLASS='ng-untouched',TOUCHED_CLASS='ng-touched',EMPTY_CLASS='ng-empty',NOT_EMPTY_CLASS='ng-not-empty';var ngModelMinErr=minErr('ngModel');/**
	 * @ngdoc type
	 * @name ngModel.NgModelController
	 *
	 * @property {*} $viewValue The actual value from the control's view. For `input` elements, this is a
	 * String. See {@link ngModel.NgModelController#$setViewValue} for information about when the $viewValue
	 * is set.
	 *
	 * @property {*} $modelValue The value in the model that the control is bound to.
	 *
	 * @property {Array.<Function>} $parsers Array of functions to execute, as a pipeline, whenever
	 *  the control updates the ngModelController with a new {@link ngModel.NgModelController#$viewValue
	    `$viewValue`} from the DOM, usually via user input.
	    See {@link ngModel.NgModelController#$setViewValue `$setViewValue()`} for a detailed lifecycle explanation.
	    Note that the `$parsers` are not called when the bound ngModel expression changes programmatically.
	
	  The functions are called in array order, each passing
	    its return value through to the next. The last return value is forwarded to the
	    {@link ngModel.NgModelController#$validators `$validators`} collection.
	
	  Parsers are used to sanitize / convert the {@link ngModel.NgModelController#$viewValue
	    `$viewValue`}.
	
	  Returning `undefined` from a parser means a parse error occurred. In that case,
	    no {@link ngModel.NgModelController#$validators `$validators`} will run and the `ngModel`
	    will be set to `undefined` unless {@link ngModelOptions `ngModelOptions.allowInvalid`}
	    is set to `true`. The parse error is stored in `ngModel.$error.parse`.
	
	  This simple example shows a parser that would convert text input value to lowercase:
	 * ```js
	 * function parse(value) {
	 *   if (value) {
	 *     return value.toLowerCase();
	 *   }
	 * }
	 * ngModelController.$parsers.push(parse);
	 * ```
	
	 *
	 * @property {Array.<Function>} $formatters Array of functions to execute, as a pipeline, whenever
	    the bound ngModel expression changes programmatically. The `$formatters` are not called when the
	    value of the control is changed by user interaction.
	
	  Formatters are used to format / convert the {@link ngModel.NgModelController#$modelValue
	    `$modelValue`} for display in the control.
	
	  The functions are called in reverse array order, each passing the value through to the
	    next. The last return value is used as the actual DOM value.
	
	  This simple example shows a formatter that would convert the model value to uppercase:
	
	 * ```js
	 * function format(value) {
	 *   if (value) {
	 *     return value.toUpperCase();
	 *   }
	 * }
	 * ngModel.$formatters.push(format);
	 * ```
	 *
	 * @property {Object.<string, function>} $validators A collection of validators that are applied
	 *      whenever the model value changes. The key value within the object refers to the name of the
	 *      validator while the function refers to the validation operation. The validation operation is
	 *      provided with the model value as an argument and must return a true or false value depending
	 *      on the response of that validation.
	 *
	 * ```js
	 * ngModel.$validators.validCharacters = function(modelValue, viewValue) {
	 *   var value = modelValue || viewValue;
	 *   return /[0-9]+/.test(value) &&
	 *          /[a-z]+/.test(value) &&
	 *          /[A-Z]+/.test(value) &&
	 *          /\W+/.test(value);
	 * };
	 * ```
	 *
	 * @property {Object.<string, function>} $asyncValidators A collection of validations that are expected to
	 *      perform an asynchronous validation (e.g. a HTTP request). The validation function that is provided
	 *      is expected to return a promise when it is run during the model validation process. Once the promise
	 *      is delivered then the validation status will be set to true when fulfilled and false when rejected.
	 *      When the asynchronous validators are triggered, each of the validators will run in parallel and the model
	 *      value will only be updated once all validators have been fulfilled. As long as an asynchronous validator
	 *      is unfulfilled, its key will be added to the controllers `$pending` property. Also, all asynchronous validators
	 *      will only run once all synchronous validators have passed.
	 *
	 * Please note that if $http is used then it is important that the server returns a success HTTP response code
	 * in order to fulfill the validation and a status level of `4xx` in order to reject the validation.
	 *
	 * ```js
	 * ngModel.$asyncValidators.uniqueUsername = function(modelValue, viewValue) {
	 *   var value = modelValue || viewValue;
	 *
	 *   // Lookup user by username
	 *   return $http.get('/api/users/' + value).
	 *      then(function resolved() {
	 *        //username exists, this means validation fails
	 *        return $q.reject('exists');
	 *      }, function rejected() {
	 *        //username does not exist, therefore this validation passes
	 *        return true;
	 *      });
	 * };
	 * ```
	 *
	 * @property {Array.<Function>} $viewChangeListeners Array of functions to execute whenever the
	 *     view value has changed. It is called with no arguments, and its return value is ignored.
	 *     This can be used in place of additional $watches against the model value.
	 *
	 * @property {Object} $error An object hash with all failing validator ids as keys.
	 * @property {Object} $pending An object hash with all pending validator ids as keys.
	 *
	 * @property {boolean} $untouched True if control has not lost focus yet.
	 * @property {boolean} $touched True if control has lost focus.
	 * @property {boolean} $pristine True if user has not interacted with the control yet.
	 * @property {boolean} $dirty True if user has already interacted with the control.
	 * @property {boolean} $valid True if there is no error.
	 * @property {boolean} $invalid True if at least one error on the control.
	 * @property {string} $name The name attribute of the control.
	 *
	 * @description
	 *
	 * `NgModelController` provides API for the {@link ngModel `ngModel`} directive.
	 * The controller contains services for data-binding, validation, CSS updates, and value formatting
	 * and parsing. It purposefully does not contain any logic which deals with DOM rendering or
	 * listening to DOM events.
	 * Such DOM related logic should be provided by other directives which make use of
	 * `NgModelController` for data-binding to control elements.
	 * Angular provides this DOM logic for most {@link input `input`} elements.
	 * At the end of this page you can find a {@link ngModel.NgModelController#custom-control-example
	 * custom control example} that uses `ngModelController` to bind to `contenteditable` elements.
	 *
	 * @example
	 * ### Custom Control Example
	 * This example shows how to use `NgModelController` with a custom control to achieve
	 * data-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)
	 * collaborate together to achieve the desired result.
	 *
	 * `contenteditable` is an HTML5 attribute, which tells the browser to let the element
	 * contents be edited in place by the user.
	 *
	 * We are using the {@link ng.service:$sce $sce} service here and include the {@link ngSanitize $sanitize}
	 * module to automatically remove "bad" content like inline event listener (e.g. `<span onclick="...">`).
	 * However, as we are using `$sce` the model can still decide to provide unsafe content if it marks
	 * that content using the `$sce` service.
	 *
	 * <example name="NgModelController" module="customControl" deps="angular-sanitize.js">
	    <file name="style.css">
	      [contenteditable] {
	        border: 1px solid black;
	        background-color: white;
	        min-height: 20px;
	      }
	
	      .ng-invalid {
	        border: 1px solid red;
	      }
	
	    </file>
	    <file name="script.js">
	      angular.module('customControl', ['ngSanitize']).
	        directive('contenteditable', ['$sce', function($sce) {
	          return {
	            restrict: 'A', // only activate on element attribute
	            require: '?ngModel', // get a hold of NgModelController
	            link: function(scope, element, attrs, ngModel) {
	              if (!ngModel) return; // do nothing if no ng-model
	
	              // Specify how UI should be updated
	              ngModel.$render = function() {
	                element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));
	              };
	
	              // Listen for change events to enable binding
	              element.on('blur keyup change', function() {
	                scope.$evalAsync(read);
	              });
	              read(); // initialize
	
	              // Write data to the model
	              function read() {
	                var html = element.html();
	                // When we clear the content editable the browser leaves a <br> behind
	                // If strip-br attribute is provided then we strip this out
	                if (attrs.stripBr && html === '<br>') {
	                  html = '';
	                }
	                ngModel.$setViewValue(html);
	              }
	            }
	          };
	        }]);
	    </file>
	    <file name="index.html">
	      <form name="myForm">
	       <div contenteditable
	            name="myWidget" ng-model="userContent"
	            strip-br="true"
	            required>Change me!</div>
	        <span ng-show="myForm.myWidget.$error.required">Required!</span>
	       <hr>
	       <textarea ng-model="userContent" aria-label="Dynamic textarea"></textarea>
	      </form>
	    </file>
	    <file name="protractor.js" type="protractor">
	    it('should data-bind and become invalid', function() {
	      if (browser.params.browser === 'safari' || browser.params.browser === 'firefox') {
	        // SafariDriver can't handle contenteditable
	        // and Firefox driver can't clear contenteditables very well
	        return;
	      }
	      var contentEditable = element(by.css('[contenteditable]'));
	      var content = 'Change me!';
	
	      expect(contentEditable.getText()).toEqual(content);
	
	      contentEditable.clear();
	      contentEditable.sendKeys(protractor.Key.BACK_SPACE);
	      expect(contentEditable.getText()).toEqual('');
	      expect(contentEditable.getAttribute('class')).toMatch(/ng-invalid-required/);
	    });
	    </file>
	 * </example>
	 *
	 *
	 */NgModelController.$inject=['$scope','$exceptionHandler','$attrs','$element','$parse','$animate','$timeout','$q','$interpolate'];function NgModelController($scope,$exceptionHandler,$attr,$element,$parse,$animate,$timeout,$q,$interpolate){this.$viewValue=Number.NaN;this.$modelValue=Number.NaN;this.$$rawModelValue=undefined;// stores the parsed modelValue / model set from scope regardless of validity.
	this.$validators={};this.$asyncValidators={};this.$parsers=[];this.$formatters=[];this.$viewChangeListeners=[];this.$untouched=true;this.$touched=false;this.$pristine=true;this.$dirty=false;this.$valid=true;this.$invalid=false;this.$error={};// keep invalid keys here
	this.$$success={};// keep valid keys here
	this.$pending=undefined;// keep pending keys here
	this.$name=$interpolate($attr.name||'',false)($scope);this.$$parentForm=nullFormCtrl;this.$options=defaultModelOptions;this.$$parsedNgModel=$parse($attr.ngModel);this.$$parsedNgModelAssign=this.$$parsedNgModel.assign;this.$$ngModelGet=this.$$parsedNgModel;this.$$ngModelSet=this.$$parsedNgModelAssign;this.$$pendingDebounce=null;this.$$parserValid=undefined;this.$$currentValidationRunId=0;// https://github.com/angular/angular.js/issues/15833
	// Prevent `$$scope` from being iterated over by `copy` when NgModelController is deep watched
	Object.defineProperty(this,'$$scope',{value:$scope});this.$$attr=$attr;this.$$element=$element;this.$$animate=$animate;this.$$timeout=$timeout;this.$$parse=$parse;this.$$q=$q;this.$$exceptionHandler=$exceptionHandler;setupValidity(this);setupModelWatcher(this);}NgModelController.prototype={$$initGetterSetters:function $$initGetterSetters(){if(this.$options.getOption('getterSetter')){var invokeModelGetter=this.$$parse(this.$$attr.ngModel+'()'),invokeModelSetter=this.$$parse(this.$$attr.ngModel+'($$$p)');this.$$ngModelGet=function($scope){var modelValue=this.$$parsedNgModel($scope);if(isFunction(modelValue)){modelValue=invokeModelGetter($scope);}return modelValue;};this.$$ngModelSet=function($scope,newValue){if(isFunction(this.$$parsedNgModel($scope))){invokeModelSetter($scope,{$$$p:newValue});}else{this.$$parsedNgModelAssign($scope,newValue);}};}else if(!this.$$parsedNgModel.assign){throw ngModelMinErr('nonassign','Expression \'{0}\' is non-assignable. Element: {1}',this.$$attr.ngModel,startingTag(this.$$element));}},/**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$render
	   *
	   * @description
	   * Called when the view needs to be updated. It is expected that the user of the ng-model
	   * directive will implement this method.
	   *
	   * The `$render()` method is invoked in the following situations:
	   *
	   * * `$rollbackViewValue()` is called.  If we are rolling back the view value to the last
	   *   committed value then `$render()` is called to update the input control.
	   * * The value referenced by `ng-model` is changed programmatically and both the `$modelValue` and
	   *   the `$viewValue` are different from last time.
	   *
	   * Since `ng-model` does not do a deep watch, `$render()` is only invoked if the values of
	   * `$modelValue` and `$viewValue` are actually different from their previous values. If `$modelValue`
	   * or `$viewValue` are objects (rather than a string or number) then `$render()` will not be
	   * invoked if you only change a property on the objects.
	   */$render:noop,/**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$isEmpty
	   *
	   * @description
	   * This is called when we need to determine if the value of an input is empty.
	   *
	   * For instance, the required directive does this to work out if the input has data or not.
	   *
	   * The default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.
	   *
	   * You can override this for input directives whose concept of being empty is different from the
	   * default. The `checkboxInputType` directive does this because in its case a value of `false`
	   * implies empty.
	   *
	   * @param {*} value The value of the input to check for emptiness.
	   * @returns {boolean} True if `value` is "empty".
	   */$isEmpty:function $isEmpty(value){// eslint-disable-next-line no-self-compare
	return isUndefined(value)||value===''||value===null||value!==value;},$$updateEmptyClasses:function $$updateEmptyClasses(value){if(this.$isEmpty(value)){this.$$animate.removeClass(this.$$element,NOT_EMPTY_CLASS);this.$$animate.addClass(this.$$element,EMPTY_CLASS);}else{this.$$animate.removeClass(this.$$element,EMPTY_CLASS);this.$$animate.addClass(this.$$element,NOT_EMPTY_CLASS);}},/**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setPristine
	   *
	   * @description
	   * Sets the control to its pristine state.
	   *
	   * This method can be called to remove the `ng-dirty` class and set the control to its pristine
	   * state (`ng-pristine` class). A model is considered to be pristine when the control
	   * has not been changed from when first compiled.
	   */$setPristine:function $setPristine(){this.$dirty=false;this.$pristine=true;this.$$animate.removeClass(this.$$element,DIRTY_CLASS);this.$$animate.addClass(this.$$element,PRISTINE_CLASS);},/**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setDirty
	   *
	   * @description
	   * Sets the control to its dirty state.
	   *
	   * This method can be called to remove the `ng-pristine` class and set the control to its dirty
	   * state (`ng-dirty` class). A model is considered to be dirty when the control has been changed
	   * from when first compiled.
	   */$setDirty:function $setDirty(){this.$dirty=true;this.$pristine=false;this.$$animate.removeClass(this.$$element,PRISTINE_CLASS);this.$$animate.addClass(this.$$element,DIRTY_CLASS);this.$$parentForm.$setDirty();},/**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setUntouched
	   *
	   * @description
	   * Sets the control to its untouched state.
	   *
	   * This method can be called to remove the `ng-touched` class and set the control to its
	   * untouched state (`ng-untouched` class). Upon compilation, a model is set as untouched
	   * by default, however this function can be used to restore that state if the model has
	   * already been touched by the user.
	   */$setUntouched:function $setUntouched(){this.$touched=false;this.$untouched=true;this.$$animate.setClass(this.$$element,UNTOUCHED_CLASS,TOUCHED_CLASS);},/**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setTouched
	   *
	   * @description
	   * Sets the control to its touched state.
	   *
	   * This method can be called to remove the `ng-untouched` class and set the control to its
	   * touched state (`ng-touched` class). A model is considered to be touched when the user has
	   * first focused the control element and then shifted focus away from the control (blur event).
	   */$setTouched:function $setTouched(){this.$touched=true;this.$untouched=false;this.$$animate.setClass(this.$$element,TOUCHED_CLASS,UNTOUCHED_CLASS);},/**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$rollbackViewValue
	   *
	   * @description
	   * Cancel an update and reset the input element's value to prevent an update to the `$modelValue`,
	   * which may be caused by a pending debounced event or because the input is waiting for some
	   * future event.
	   *
	   * If you have an input that uses `ng-model-options` to set up debounced updates or updates that
	   * depend on special events such as `blur`, there can be a period when the `$viewValue` is out of
	   * sync with the ngModel's `$modelValue`.
	   *
	   * In this case, you can use `$rollbackViewValue()` to manually cancel the debounced / future update
	   * and reset the input to the last committed view value.
	   *
	   * It is also possible that you run into difficulties if you try to update the ngModel's `$modelValue`
	   * programmatically before these debounced/future events have resolved/occurred, because Angular's
	   * dirty checking mechanism is not able to tell whether the model has actually changed or not.
	   *
	   * The `$rollbackViewValue()` method should be called before programmatically changing the model of an
	   * input which may have such events pending. This is important in order to make sure that the
	   * input field will be updated with the new model value and any pending operations are cancelled.
	   *
	   * <example name="ng-model-cancel-update" module="cancel-update-example">
	   *   <file name="app.js">
	   *     angular.module('cancel-update-example', [])
	   *
	   *     .controller('CancelUpdateController', ['$scope', function($scope) {
	   *       $scope.model = {value1: '', value2: ''};
	   *
	   *       $scope.setEmpty = function(e, value, rollback) {
	   *         if (e.keyCode === 27) {
	   *           e.preventDefault();
	   *           if (rollback) {
	   *             $scope.myForm[value].$rollbackViewValue();
	   *           }
	   *           $scope.model[value] = '';
	   *         }
	   *       };
	   *     }]);
	   *   </file>
	   *   <file name="index.html">
	   *     <div ng-controller="CancelUpdateController">
	   *       <p>Both of these inputs are only updated if they are blurred. Hitting escape should
	   *       empty them. Follow these steps and observe the difference:</p>
	   *       <ol>
	   *         <li>Type something in the input. You will see that the model is not yet updated</li>
	   *         <li>Press the Escape key.
	   *           <ol>
	   *             <li> In the first example, nothing happens, because the model is already '', and no
	   *             update is detected. If you blur the input, the model will be set to the current view.
	   *             </li>
	   *             <li> In the second example, the pending update is cancelled, and the input is set back
	   *             to the last committed view value (''). Blurring the input does nothing.
	   *             </li>
	   *           </ol>
	   *         </li>
	   *       </ol>
	   *
	   *       <form name="myForm" ng-model-options="{ updateOn: 'blur' }">
	   *         <div>
	   *           <p id="inputDescription1">Without $rollbackViewValue():</p>
	   *           <input name="value1" aria-describedby="inputDescription1" ng-model="model.value1"
	   *                  ng-keydown="setEmpty($event, 'value1')">
	   *           value1: "{{ model.value1 }}"
	   *         </div>
	   *
	   *         <div>
	   *           <p id="inputDescription2">With $rollbackViewValue():</p>
	   *           <input name="value2" aria-describedby="inputDescription2" ng-model="model.value2"
	   *                  ng-keydown="setEmpty($event, 'value2', true)">
	   *           value2: "{{ model.value2 }}"
	   *         </div>
	   *       </form>
	   *     </div>
	   *   </file>
	       <file name="style.css">
	          div {
	            display: table-cell;
	          }
	          div:nth-child(1) {
	            padding-right: 30px;
	          }
	
	        </file>
	   * </example>
	   */$rollbackViewValue:function $rollbackViewValue(){this.$$timeout.cancel(this.$$pendingDebounce);this.$viewValue=this.$$lastCommittedViewValue;this.$render();},/**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$validate
	   *
	   * @description
	   * Runs each of the registered validators (first synchronous validators and then
	   * asynchronous validators).
	   * If the validity changes to invalid, the model will be set to `undefined`,
	   * unless {@link ngModelOptions `ngModelOptions.allowInvalid`} is `true`.
	   * If the validity changes to valid, it will set the model to the last available valid
	   * `$modelValue`, i.e. either the last parsed value or the last value set from the scope.
	   */$validate:function $validate(){// ignore $validate before model is initialized
	if(isNumberNaN(this.$modelValue)){return;}var viewValue=this.$$lastCommittedViewValue;// Note: we use the $$rawModelValue as $modelValue might have been
	// set to undefined during a view -> model update that found validation
	// errors. We can't parse the view here, since that could change
	// the model although neither viewValue nor the model on the scope changed
	var modelValue=this.$$rawModelValue;var prevValid=this.$valid;var prevModelValue=this.$modelValue;var allowInvalid=this.$options.getOption('allowInvalid');var that=this;this.$$runValidators(modelValue,viewValue,function(allValid){// If there was no change in validity, don't update the model
	// This prevents changing an invalid modelValue to undefined
	if(!allowInvalid&&prevValid!==allValid){// Note: Don't check this.$valid here, as we could have
	// external validators (e.g. calculated on the server),
	// that just call $setValidity and need the model value
	// to calculate their validity.
	that.$modelValue=allValid?modelValue:undefined;if(that.$modelValue!==prevModelValue){that.$$writeModelToScope();}}});},$$runValidators:function $$runValidators(modelValue,viewValue,doneCallback){this.$$currentValidationRunId++;var localValidationRunId=this.$$currentValidationRunId;var that=this;// check parser error
	if(!processParseErrors()){validationDone(false);return;}if(!processSyncValidators()){validationDone(false);return;}processAsyncValidators();function processParseErrors(){var errorKey=that.$$parserName||'parse';if(isUndefined(that.$$parserValid)){setValidity(errorKey,null);}else{if(!that.$$parserValid){forEach(that.$validators,function(v,name){setValidity(name,null);});forEach(that.$asyncValidators,function(v,name){setValidity(name,null);});}// Set the parse error last, to prevent unsetting it, should a $validators key == parserName
	setValidity(errorKey,that.$$parserValid);return that.$$parserValid;}return true;}function processSyncValidators(){var syncValidatorsValid=true;forEach(that.$validators,function(validator,name){var result=Boolean(validator(modelValue,viewValue));syncValidatorsValid=syncValidatorsValid&&result;setValidity(name,result);});if(!syncValidatorsValid){forEach(that.$asyncValidators,function(v,name){setValidity(name,null);});return false;}return true;}function processAsyncValidators(){var validatorPromises=[];var allValid=true;forEach(that.$asyncValidators,function(validator,name){var promise=validator(modelValue,viewValue);if(!isPromiseLike(promise)){throw ngModelMinErr('nopromise','Expected asynchronous validator to return a promise but got \'{0}\' instead.',promise);}setValidity(name,undefined);validatorPromises.push(promise.then(function(){setValidity(name,true);},function(){allValid=false;setValidity(name,false);}));});if(!validatorPromises.length){validationDone(true);}else{that.$$q.all(validatorPromises).then(function(){validationDone(allValid);},noop);}}function setValidity(name,isValid){if(localValidationRunId===that.$$currentValidationRunId){that.$setValidity(name,isValid);}}function validationDone(allValid){if(localValidationRunId===that.$$currentValidationRunId){doneCallback(allValid);}}},/**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$commitViewValue
	   *
	   * @description
	   * Commit a pending update to the `$modelValue`.
	   *
	   * Updates may be pending by a debounced event or because the input is waiting for a some future
	   * event defined in `ng-model-options`. this method is rarely needed as `NgModelController`
	   * usually handles calling this in response to input events.
	   */$commitViewValue:function $commitViewValue(){var viewValue=this.$viewValue;this.$$timeout.cancel(this.$$pendingDebounce);// If the view value has not changed then we should just exit, except in the case where there is
	// a native validator on the element. In this case the validation state may have changed even though
	// the viewValue has stayed empty.
	if(this.$$lastCommittedViewValue===viewValue&&(viewValue!==''||!this.$$hasNativeValidators)){return;}this.$$updateEmptyClasses(viewValue);this.$$lastCommittedViewValue=viewValue;// change to dirty
	if(this.$pristine){this.$setDirty();}this.$$parseAndValidate();},$$parseAndValidate:function $$parseAndValidate(){var viewValue=this.$$lastCommittedViewValue;var modelValue=viewValue;var that=this;this.$$parserValid=isUndefined(modelValue)?undefined:true;if(this.$$parserValid){for(var i=0;i<this.$parsers.length;i++){modelValue=this.$parsers[i](modelValue);if(isUndefined(modelValue)){this.$$parserValid=false;break;}}}if(isNumberNaN(this.$modelValue)){// this.$modelValue has not been touched yet...
	this.$modelValue=this.$$ngModelGet(this.$$scope);}var prevModelValue=this.$modelValue;var allowInvalid=this.$options.getOption('allowInvalid');this.$$rawModelValue=modelValue;if(allowInvalid){this.$modelValue=modelValue;writeToModelIfNeeded();}// Pass the $$lastCommittedViewValue here, because the cached viewValue might be out of date.
	// This can happen if e.g. $setViewValue is called from inside a parser
	this.$$runValidators(modelValue,this.$$lastCommittedViewValue,function(allValid){if(!allowInvalid){// Note: Don't check this.$valid here, as we could have
	// external validators (e.g. calculated on the server),
	// that just call $setValidity and need the model value
	// to calculate their validity.
	that.$modelValue=allValid?modelValue:undefined;writeToModelIfNeeded();}});function writeToModelIfNeeded(){if(that.$modelValue!==prevModelValue){that.$$writeModelToScope();}}},$$writeModelToScope:function $$writeModelToScope(){this.$$ngModelSet(this.$$scope,this.$modelValue);forEach(this.$viewChangeListeners,function(listener){try{listener();}catch(e){// eslint-disable-next-line no-invalid-this
	this.$$exceptionHandler(e);}},this);},/**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setViewValue
	   *
	   * @description
	   * Update the view value.
	   *
	   * This method should be called when a control wants to change the view value; typically,
	   * this is done from within a DOM event handler. For example, the {@link ng.directive:input input}
	   * directive calls it when the value of the input changes and {@link ng.directive:select select}
	   * calls it when an option is selected.
	   *
	   * When `$setViewValue` is called, the new `value` will be staged for committing through the `$parsers`
	   * and `$validators` pipelines. If there are no special {@link ngModelOptions} specified then the staged
	   * value is sent directly for processing through the `$parsers` pipeline. After this, the `$validators` and
	   * `$asyncValidators` are called and the value is applied to `$modelValue`.
	   * Finally, the value is set to the **expression** specified in the `ng-model` attribute and
	   * all the registered change listeners, in the `$viewChangeListeners` list are called.
	   *
	   * In case the {@link ng.directive:ngModelOptions ngModelOptions} directive is used with `updateOn`
	   * and the `default` trigger is not listed, all those actions will remain pending until one of the
	   * `updateOn` events is triggered on the DOM element.
	   * All these actions will be debounced if the {@link ng.directive:ngModelOptions ngModelOptions}
	   * directive is used with a custom debounce for this particular event.
	   * Note that a `$digest` is only triggered once the `updateOn` events are fired, or if `debounce`
	   * is specified, once the timer runs out.
	   *
	   * When used with standard inputs, the view value will always be a string (which is in some cases
	   * parsed into another type, such as a `Date` object for `input[date]`.)
	   * However, custom controls might also pass objects to this method. In this case, we should make
	   * a copy of the object before passing it to `$setViewValue`. This is because `ngModel` does not
	   * perform a deep watch of objects, it only looks for a change of identity. If you only change
	   * the property of the object then ngModel will not realize that the object has changed and
	   * will not invoke the `$parsers` and `$validators` pipelines. For this reason, you should
	   * not change properties of the copy once it has been passed to `$setViewValue`.
	   * Otherwise you may cause the model value on the scope to change incorrectly.
	   *
	   * <div class="alert alert-info">
	   * In any case, the value passed to the method should always reflect the current value
	   * of the control. For example, if you are calling `$setViewValue` for an input element,
	   * you should pass the input DOM value. Otherwise, the control and the scope model become
	   * out of sync. It's also important to note that `$setViewValue` does not call `$render` or change
	   * the control's DOM value in any way. If we want to change the control's DOM value
	   * programmatically, we should update the `ngModel` scope expression. Its new value will be
	   * picked up by the model controller, which will run it through the `$formatters`, `$render` it
	   * to update the DOM, and finally call `$validate` on it.
	   * </div>
	   *
	   * @param {*} value value from the view.
	   * @param {string} trigger Event that triggered the update.
	   */$setViewValue:function $setViewValue(value,trigger){this.$viewValue=value;if(this.$options.getOption('updateOnDefault')){this.$$debounceViewValueCommit(trigger);}},$$debounceViewValueCommit:function $$debounceViewValueCommit(trigger){var debounceDelay=this.$options.getOption('debounce');if(isNumber(debounceDelay[trigger])){debounceDelay=debounceDelay[trigger];}else if(isNumber(debounceDelay['default'])){debounceDelay=debounceDelay['default'];}this.$$timeout.cancel(this.$$pendingDebounce);var that=this;if(debounceDelay>0){// this fails if debounceDelay is an object
	this.$$pendingDebounce=this.$$timeout(function(){that.$commitViewValue();},debounceDelay);}else if(this.$$scope.$root.$$phase){this.$commitViewValue();}else{this.$$scope.$apply(function(){that.$commitViewValue();});}},/**
	   * @ngdoc method
	   *
	   * @name ngModel.NgModelController#$overrideModelOptions
	   *
	   * @description
	   *
	   * Override the current model options settings programmatically.
	   *
	   * The previous `ModelOptions` value will not be modified. Instead, a
	   * new `ModelOptions` object will inherit from the previous one overriding
	   * or inheriting settings that are defined in the given parameter.
	   *
	   * See {@link ngModelOptions} for information about what options can be specified
	   * and how model option inheritance works.
	   *
	   * @param {Object} options a hash of settings to override the previous options
	   *
	   */$overrideModelOptions:function $overrideModelOptions(options){this.$options=this.$options.createChild(options);}};function setupModelWatcher(ctrl){// model -> value
	// Note: we cannot use a normal scope.$watch as we want to detect the following:
	// 1. scope value is 'a'
	// 2. user enters 'b'
	// 3. ng-change kicks in and reverts scope value to 'a'
	//    -> scope value did not change since the last digest as
	//       ng-change executes in apply phase
	// 4. view should be changed back to 'a'
	ctrl.$$scope.$watch(function ngModelWatch(scope){var modelValue=ctrl.$$ngModelGet(scope);// if scope model value and ngModel value are out of sync
	// TODO(perf): why not move this to the action fn?
	if(modelValue!==ctrl.$modelValue&&(// checks for NaN is needed to allow setting the model to NaN when there's an asyncValidator
	// eslint-disable-next-line no-self-compare
	ctrl.$modelValue===ctrl.$modelValue||modelValue===modelValue)){ctrl.$modelValue=ctrl.$$rawModelValue=modelValue;ctrl.$$parserValid=undefined;var formatters=ctrl.$formatters,idx=formatters.length;var viewValue=modelValue;while(idx--){viewValue=formatters[idx](viewValue);}if(ctrl.$viewValue!==viewValue){ctrl.$$updateEmptyClasses(viewValue);ctrl.$viewValue=ctrl.$$lastCommittedViewValue=viewValue;ctrl.$render();// It is possible that model and view value have been updated during render
	ctrl.$$runValidators(ctrl.$modelValue,ctrl.$viewValue,noop);}}return modelValue;});}/**
	 * @ngdoc method
	 * @name ngModel.NgModelController#$setValidity
	 *
	 * @description
	 * Change the validity state, and notify the form.
	 *
	 * This method can be called within $parsers/$formatters or a custom validation implementation.
	 * However, in most cases it should be sufficient to use the `ngModel.$validators` and
	 * `ngModel.$asyncValidators` collections which will call `$setValidity` automatically.
	 *
	 * @param {string} validationErrorKey Name of the validator. The `validationErrorKey` will be assigned
	 *        to either `$error[validationErrorKey]` or `$pending[validationErrorKey]`
	 *        (for unfulfilled `$asyncValidators`), so that it is available for data-binding.
	 *        The `validationErrorKey` should be in camelCase and will get converted into dash-case
	 *        for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`
	 *        class and can be bound to as  `{{someForm.someControl.$error.myError}}` .
	 * @param {boolean} isValid Whether the current state is valid (true), invalid (false), pending (undefined),
	 *                          or skipped (null). Pending is used for unfulfilled `$asyncValidators`.
	 *                          Skipped is used by Angular when validators do not run because of parse errors and
	 *                          when `$asyncValidators` do not run because any of the `$validators` failed.
	 */addSetValidityMethod({clazz:NgModelController,set:function set(object,property){object[property]=true;},unset:function unset(object,property){delete object[property];}});/**
	 * @ngdoc directive
	 * @name ngModel
	 *
	 * @element input
	 * @priority 1
	 *
	 * @description
	 * The `ngModel` directive binds an `input`,`select`, `textarea` (or custom form control) to a
	 * property on the scope using {@link ngModel.NgModelController NgModelController},
	 * which is created and exposed by this directive.
	 *
	 * `ngModel` is responsible for:
	 *
	 * - Binding the view into the model, which other directives such as `input`, `textarea` or `select`
	 *   require.
	 * - Providing validation behavior (i.e. required, number, email, url).
	 * - Keeping the state of the control (valid/invalid, dirty/pristine, touched/untouched, validation errors).
	 * - Setting related css classes on the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`, `ng-touched`,
	 *   `ng-untouched`, `ng-empty`, `ng-not-empty`) including animations.
	 * - Registering the control with its parent {@link ng.directive:form form}.
	 *
	 * Note: `ngModel` will try to bind to the property given by evaluating the expression on the
	 * current scope. If the property doesn't already exist on this scope, it will be created
	 * implicitly and added to the scope.
	 *
	 * For best practices on using `ngModel`, see:
	 *
	 *  - [Understanding Scopes](https://github.com/angular/angular.js/wiki/Understanding-Scopes)
	 *
	 * For basic examples, how to use `ngModel`, see:
	 *
	 *  - {@link ng.directive:input input}
	 *    - {@link input[text] text}
	 *    - {@link input[checkbox] checkbox}
	 *    - {@link input[radio] radio}
	 *    - {@link input[number] number}
	 *    - {@link input[email] email}
	 *    - {@link input[url] url}
	 *    - {@link input[date] date}
	 *    - {@link input[datetime-local] datetime-local}
	 *    - {@link input[time] time}
	 *    - {@link input[month] month}
	 *    - {@link input[week] week}
	 *  - {@link ng.directive:select select}
	 *  - {@link ng.directive:textarea textarea}
	 *
	 * # Complex Models (objects or collections)
	 *
	 * By default, `ngModel` watches the model by reference, not value. This is important to know when
	 * binding inputs to models that are objects (e.g. `Date`) or collections (e.g. arrays). If only properties of the
	 * object or collection change, `ngModel` will not be notified and so the input will not be  re-rendered.
	 *
	 * The model must be assigned an entirely new object or collection before a re-rendering will occur.
	 *
	 * Some directives have options that will cause them to use a custom `$watchCollection` on the model expression
	 * - for example, `ngOptions` will do so when a `track by` clause is included in the comprehension expression or
	 * if the select is given the `multiple` attribute.
	 *
	 * The `$watchCollection()` method only does a shallow comparison, meaning that changing properties deeper than the
	 * first level of the object (or only changing the properties of an item in the collection if it's an array) will still
	 * not trigger a re-rendering of the model.
	 *
	 * # CSS classes
	 * The following CSS classes are added and removed on the associated input/select/textarea element
	 * depending on the validity of the model.
	 *
	 *  - `ng-valid`: the model is valid
	 *  - `ng-invalid`: the model is invalid
	 *  - `ng-valid-[key]`: for each valid key added by `$setValidity`
	 *  - `ng-invalid-[key]`: for each invalid key added by `$setValidity`
	 *  - `ng-pristine`: the control hasn't been interacted with yet
	 *  - `ng-dirty`: the control has been interacted with
	 *  - `ng-touched`: the control has been blurred
	 *  - `ng-untouched`: the control hasn't been blurred
	 *  - `ng-pending`: any `$asyncValidators` are unfulfilled
	 *  - `ng-empty`: the view does not contain a value or the value is deemed "empty", as defined
	 *     by the {@link ngModel.NgModelController#$isEmpty} method
	 *  - `ng-not-empty`: the view contains a non-empty value
	 *
	 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
	 *
	 * ## Animation Hooks
	 *
	 * Animations within models are triggered when any of the associated CSS classes are added and removed
	 * on the input element which is attached to the model. These classes include: `.ng-pristine`, `.ng-dirty`,
	 * `.ng-invalid` and `.ng-valid` as well as any other validations that are performed on the model itself.
	 * The animations that are triggered within ngModel are similar to how they work in ngClass and
	 * animations can be hooked into using CSS transitions, keyframes as well as JS animations.
	 *
	 * The following example shows a simple way to utilize CSS transitions to style an input element
	 * that has been rendered as invalid after it has been validated:
	 *
	 * <pre>
	 * //be sure to include ngAnimate as a module to hook into more
	 * //advanced animations
	 * .my-input {
	 *   transition:0.5s linear all;
	 *   background: white;
	 * }
	 * .my-input.ng-invalid {
	 *   background: red;
	 *   color:white;
	 * }
	 * </pre>
	 *
	 * @example
	 * <example deps="angular-animate.js" animations="true" fixBase="true" module="inputExample" name="ng-model">
	     <file name="index.html">
	       <script>
	        angular.module('inputExample', [])
	          .controller('ExampleController', ['$scope', function($scope) {
	            $scope.val = '1';
	          }]);
	       </script>
	       <style>
	         .my-input {
	           transition:all linear 0.5s;
	           background: transparent;
	         }
	         .my-input.ng-invalid {
	           color:white;
	           background: red;
	         }
	       </style>
	       <p id="inputDescription">
	        Update input to see transitions when valid/invalid.
	        Integer is a valid value.
	       </p>
	       <form name="testForm" ng-controller="ExampleController">
	         <input ng-model="val" ng-pattern="/^\d+$/" name="anim" class="my-input"
	                aria-describedby="inputDescription" />
	       </form>
	     </file>
	 * </example>
	 *
	 * ## Binding to a getter/setter
	 *
	 * Sometimes it's helpful to bind `ngModel` to a getter/setter function.  A getter/setter is a
	 * function that returns a representation of the model when called with zero arguments, and sets
	 * the internal state of a model when called with an argument. It's sometimes useful to use this
	 * for models that have an internal representation that's different from what the model exposes
	 * to the view.
	 *
	 * <div class="alert alert-success">
	 * **Best Practice:** It's best to keep getters fast because Angular is likely to call them more
	 * frequently than other parts of your code.
	 * </div>
	 *
	 * You use this behavior by adding `ng-model-options="{ getterSetter: true }"` to an element that
	 * has `ng-model` attached to it. You can also add `ng-model-options="{ getterSetter: true }"` to
	 * a `<form>`, which will enable this behavior for all `<input>`s within it. See
	 * {@link ng.directive:ngModelOptions `ngModelOptions`} for more.
	 *
	 * The following example shows how to use `ngModel` with a getter/setter:
	 *
	 * @example
	 * <example name="ngModel-getter-setter" module="getterSetterExample">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <form name="userForm">
	           <label>Name:
	             <input type="text" name="userName"
	                    ng-model="user.name"
	                    ng-model-options="{ getterSetter: true }" />
	           </label>
	         </form>
	         <pre>user.name = <span ng-bind="user.name()"></span></pre>
	       </div>
	     </file>
	     <file name="app.js">
	       angular.module('getterSetterExample', [])
	         .controller('ExampleController', ['$scope', function($scope) {
	           var _name = 'Brian';
	           $scope.user = {
	             name: function(newName) {
	              // Note that newName can be undefined for two reasons:
	              // 1. Because it is called as a getter and thus called with no arguments
	              // 2. Because the property should actually be set to undefined. This happens e.g. if the
	              //    input is invalid
	              return arguments.length ? (_name = newName) : _name;
	             }
	           };
	         }]);
	     </file>
	 * </example>
	 */var ngModelDirective=['$rootScope',function($rootScope){return{restrict:'A',require:['ngModel','^?form','^?ngModelOptions'],controller:NgModelController,// Prelink needs to run before any input directive
	// so that we can set the NgModelOptions in NgModelController
	// before anyone else uses it.
	priority:1,compile:function ngModelCompile(element){// Setup initial state of the control
	element.addClass(PRISTINE_CLASS).addClass(UNTOUCHED_CLASS).addClass(VALID_CLASS);return{pre:function ngModelPreLink(scope,element,attr,ctrls){var modelCtrl=ctrls[0],formCtrl=ctrls[1]||modelCtrl.$$parentForm,optionsCtrl=ctrls[2];if(optionsCtrl){modelCtrl.$options=optionsCtrl.$options;}modelCtrl.$$initGetterSetters();// notify others, especially parent forms
	formCtrl.$addControl(modelCtrl);attr.$observe('name',function(newValue){if(modelCtrl.$name!==newValue){modelCtrl.$$parentForm.$$renameControl(modelCtrl,newValue);}});scope.$on('$destroy',function(){modelCtrl.$$parentForm.$removeControl(modelCtrl);});},post:function ngModelPostLink(scope,element,attr,ctrls){var modelCtrl=ctrls[0];if(modelCtrl.$options.getOption('updateOn')){element.on(modelCtrl.$options.getOption('updateOn'),function(ev){modelCtrl.$$debounceViewValueCommit(ev&&ev.type);});}function setTouched(){modelCtrl.$setTouched();}element.on('blur',function(){if(modelCtrl.$touched)return;if($rootScope.$$phase){scope.$evalAsync(setTouched);}else{scope.$apply(setTouched);}});}};}};}];/* exported defaultModelOptions */var defaultModelOptions;var DEFAULT_REGEXP=/(\s+|^)default(\s+|$)/;/**
	 * @ngdoc type
	 * @name ModelOptions
	 * @description
	 * A container for the options set by the {@link ngModelOptions} directive
	 */function ModelOptions(options){this.$$options=options;}ModelOptions.prototype={/**
	   * @ngdoc method
	   * @name ModelOptions#getOption
	   * @param {string} name the name of the option to retrieve
	   * @returns {*} the value of the option
	   * @description
	   * Returns the value of the given option
	   */getOption:function getOption(name){return this.$$options[name];},/**
	   * @ngdoc method
	   * @name ModelOptions#createChild
	   * @param {Object} options a hash of options for the new child that will override the parent's options
	   * @return {ModelOptions} a new `ModelOptions` object initialized with the given options.
	   */createChild:function createChild(options){var inheritAll=false;// make a shallow copy
	options=extend({},options);// Inherit options from the parent if specified by the value `"$inherit"`
	forEach(options,/* @this */function(option,key){if(option==='$inherit'){if(key==='*'){inheritAll=true;}else{options[key]=this.$$options[key];// `updateOn` is special so we must also inherit the `updateOnDefault` option
	if(key==='updateOn'){options.updateOnDefault=this.$$options.updateOnDefault;}}}else{if(key==='updateOn'){// If the `updateOn` property contains the `default` event then we have to remove
	// it from the event list and set the `updateOnDefault` flag.
	options.updateOnDefault=false;options[key]=trim(option.replace(DEFAULT_REGEXP,function(){options.updateOnDefault=true;return' ';}));}}},this);if(inheritAll){// We have a property of the form: `"*": "$inherit"`
	delete options['*'];defaults(options,this.$$options);}// Finally add in any missing defaults
	defaults(options,defaultModelOptions.$$options);return new ModelOptions(options);}};defaultModelOptions=new ModelOptions({updateOn:'',updateOnDefault:true,debounce:0,getterSetter:false,allowInvalid:false,timezone:null});/**
	 * @ngdoc directive
	 * @name ngModelOptions
	 *
	 * @description
	 * This directive allows you to modify the behaviour of {@link ngModel} directives within your
	 * application. You can specify an `ngModelOptions` directive on any element. All {@link ngModel}
	 * directives will use the options of their nearest `ngModelOptions` ancestor.
	 *
	 * The `ngModelOptions` settings are found by evaluating the value of the attribute directive as
	 * an Angular expression. This expression should evaluate to an object, whose properties contain
	 * the settings. For example: `<div "ng-model-options"="{ debounce: 100 }"`.
	 *
	 * ## Inheriting Options
	 *
	 * You can specify that an `ngModelOptions` setting should be inherited from a parent `ngModelOptions`
	 * directive by giving it the value of `"$inherit"`.
	 * Then it will inherit that setting from the first `ngModelOptions` directive found by traversing up the
	 * DOM tree. If there is no ancestor element containing an `ngModelOptions` directive then default settings
	 * will be used.
	 *
	 * For example given the following fragment of HTML
	 *
	 *
	 * ```html
	 * <div ng-model-options="{ allowInvalid: true, debounce: 200 }">
	 *   <form ng-model-options="{ updateOn: 'blur', allowInvalid: '$inherit' }">
	 *     <input ng-model-options="{ updateOn: 'default', allowInvalid: '$inherit' }" />
	 *   </form>
	 * </div>
	 * ```
	 *
	 * the `input` element will have the following settings
	 *
	 * ```js
	 * { allowInvalid: true, updateOn: 'default', debounce: 0 }
	 * ```
	 *
	 * Notice that the `debounce` setting was not inherited and used the default value instead.
	 *
	 * You can specify that all undefined settings are automatically inherited from an ancestor by
	 * including a property with key of `"*"` and value of `"$inherit"`.
	 *
	 * For example given the following fragment of HTML
	 *
	 *
	 * ```html
	 * <div ng-model-options="{ allowInvalid: true, debounce: 200 }">
	 *   <form ng-model-options="{ updateOn: 'blur', "*": '$inherit' }">
	 *     <input ng-model-options="{ updateOn: 'default', "*": '$inherit' }" />
	 *   </form>
	 * </div>
	 * ```
	 *
	 * the `input` element will have the following settings
	 *
	 * ```js
	 * { allowInvalid: true, updateOn: 'default', debounce: 200 }
	 * ```
	 *
	 * Notice that the `debounce` setting now inherits the value from the outer `<div>` element.
	 *
	 * If you are creating a reusable component then you should be careful when using `"*": "$inherit"`
	 * since you may inadvertently inherit a setting in the future that changes the behavior of your component.
	 *
	 *
	 * ## Triggering and debouncing model updates
	 *
	 * The `updateOn` and `debounce` properties allow you to specify a custom list of events that will
	 * trigger a model update and/or a debouncing delay so that the actual update only takes place when
	 * a timer expires; this timer will be reset after another change takes place.
	 *
	 * Given the nature of `ngModelOptions`, the value displayed inside input fields in the view might
	 * be different from the value in the actual model. This means that if you update the model you
	 * should also invoke {@link ngModel.NgModelController#$rollbackViewValue} on the relevant input field in
	 * order to make sure it is synchronized with the model and that any debounced action is canceled.
	 *
	 * The easiest way to reference the control's {@link ngModel.NgModelController#$rollbackViewValue}
	 * method is by making sure the input is placed inside a form that has a `name` attribute. This is
	 * important because `form` controllers are published to the related scope under the name in their
	 * `name` attribute.
	 *
	 * Any pending changes will take place immediately when an enclosing form is submitted via the
	 * `submit` event. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
	 * to have access to the updated model.
	 *
	 * The following example shows how to override immediate updates. Changes on the inputs within the
	 * form will update the model only when the control loses focus (blur event). If `escape` key is
	 * pressed while the input field is focused, the value is reset to the value in the current model.
	 *
	 * <example name="ngModelOptions-directive-blur" module="optionsExample">
	 *   <file name="index.html">
	 *     <div ng-controller="ExampleController">
	 *       <form name="userForm">
	 *         <label>
	 *           Name:
	 *           <input type="text" name="userName"
	 *                  ng-model="user.name"
	 *                  ng-model-options="{ updateOn: 'blur' }"
	 *                  ng-keyup="cancel($event)" />
	 *         </label><br />
	 *         <label>
	 *           Other data:
	 *           <input type="text" ng-model="user.data" />
	 *         </label><br />
	 *       </form>
	 *       <pre>user.name = <span ng-bind="user.name"></span></pre>
	 *     </div>
	 *   </file>
	 *   <file name="app.js">
	 *     angular.module('optionsExample', [])
	 *       .controller('ExampleController', ['$scope', function($scope) {
	 *         $scope.user = { name: 'say', data: '' };
	 *
	 *         $scope.cancel = function(e) {
	 *           if (e.keyCode === 27) {
	 *             $scope.userForm.userName.$rollbackViewValue();
	 *           }
	 *         };
	 *       }]);
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     var model = element(by.binding('user.name'));
	 *     var input = element(by.model('user.name'));
	 *     var other = element(by.model('user.data'));
	 *
	 *     it('should allow custom events', function() {
	 *       input.sendKeys(' hello');
	 *       input.click();
	 *       expect(model.getText()).toEqual('say');
	 *       other.click();
	 *       expect(model.getText()).toEqual('say hello');
	 *     });
	 *
	 *     it('should $rollbackViewValue when model changes', function() {
	 *       input.sendKeys(' hello');
	 *       expect(input.getAttribute('value')).toEqual('say hello');
	 *       input.sendKeys(protractor.Key.ESCAPE);
	 *       expect(input.getAttribute('value')).toEqual('say');
	 *       other.click();
	 *       expect(model.getText()).toEqual('say');
	 *     });
	 *   </file>
	 * </example>
	 *
	 * The next example shows how to debounce model changes. Model will be updated only 1 sec after last change.
	 * If the `Clear` button is pressed, any debounced action is canceled and the value becomes empty.
	 *
	 * <example name="ngModelOptions-directive-debounce" module="optionsExample">
	 *   <file name="index.html">
	 *     <div ng-controller="ExampleController">
	 *       <form name="userForm">
	 *         Name:
	 *         <input type="text" name="userName"
	 *                ng-model="user.name"
	 *                ng-model-options="{ debounce: 1000 }" />
	 *         <button ng-click="userForm.userName.$rollbackViewValue(); user.name=''">Clear</button><br />
	 *       </form>
	 *       <pre>user.name = <span ng-bind="user.name"></span></pre>
	 *     </div>
	 *   </file>
	 *   <file name="app.js">
	 *     angular.module('optionsExample', [])
	 *       .controller('ExampleController', ['$scope', function($scope) {
	 *         $scope.user = { name: 'say' };
	 *       }]);
	 *   </file>
	 * </example>
	 *
	 * ## Model updates and validation
	 *
	 * The default behaviour in `ngModel` is that the model value is set to `undefined` when the
	 * validation determines that the value is invalid. By setting the `allowInvalid` property to true,
	 * the model will still be updated even if the value is invalid.
	 *
	 *
	 * ## Connecting to the scope
	 *
	 * By setting the `getterSetter` property to true you are telling ngModel that the `ngModel` expression
	 * on the scope refers to a "getter/setter" function rather than the value itself.
	 *
	 * The following example shows how to bind to getter/setters:
	 *
	 * <example name="ngModelOptions-directive-getter-setter" module="getterSetterExample">
	 *   <file name="index.html">
	 *     <div ng-controller="ExampleController">
	 *       <form name="userForm">
	 *         <label>
	 *           Name:
	 *           <input type="text" name="userName"
	 *                  ng-model="user.name"
	 *                  ng-model-options="{ getterSetter: true }" />
	 *         </label>
	 *       </form>
	 *       <pre>user.name = <span ng-bind="user.name()"></span></pre>
	 *     </div>
	 *   </file>
	 *   <file name="app.js">
	 *     angular.module('getterSetterExample', [])
	 *       .controller('ExampleController', ['$scope', function($scope) {
	 *         var _name = 'Brian';
	 *         $scope.user = {
	 *           name: function(newName) {
	 *             return angular.isDefined(newName) ? (_name = newName) : _name;
	 *           }
	 *         };
	 *       }]);
	 *   </file>
	 * </example>
	 *
	 *
	 * ## Specifying timezones
	 *
	 * You can specify the timezone that date/time input directives expect by providing its name in the
	 * `timezone` property.
	 *
	 * @param {Object} ngModelOptions options to apply to {@link ngModel} directives on this element and
	 *   and its descendents. Valid keys are:
	 *   - `updateOn`: string specifying which event should the input be bound to. You can set several
	 *     events using an space delimited list. There is a special event called `default` that
	 *     matches the default events belonging to the control.
	 *   - `debounce`: integer value which contains the debounce model update value in milliseconds. A
	 *     value of 0 triggers an immediate update. If an object is supplied instead, you can specify a
	 *     custom value for each event. For example:
	 *     ```
	 *     ng-model-options="{
	 *       updateOn: 'default blur',
	 *       debounce: { 'default': 500, 'blur': 0 }
	 *     }"
	 *     ```
	 *   - `allowInvalid`: boolean value which indicates that the model can be set with values that did
	 *     not validate correctly instead of the default behavior of setting the model to undefined.
	 *   - `getterSetter`: boolean value which determines whether or not to treat functions bound to
	 *     `ngModel` as getters/setters.
	 *   - `timezone`: Defines the timezone to be used to read/write the `Date` instance in the model for
	 *     `<input type="date" />`, `<input type="time" />`, ... . It understands UTC/GMT and the
	 *     continental US time zone abbreviations, but for general use, use a time zone offset, for
	 *     example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)
	 *     If not specified, the timezone of the browser will be used.
	 *
	 */var ngModelOptionsDirective=function ngModelOptionsDirective(){NgModelOptionsController.$inject=['$attrs','$scope'];function NgModelOptionsController($attrs,$scope){this.$$attrs=$attrs;this.$$scope=$scope;}NgModelOptionsController.prototype={$onInit:function $onInit(){var parentOptions=this.parentCtrl?this.parentCtrl.$options:defaultModelOptions;var modelOptionsDefinition=this.$$scope.$eval(this.$$attrs.ngModelOptions);this.$options=parentOptions.createChild(modelOptionsDefinition);}};return{restrict:'A',// ngModelOptions needs to run before ngModel and input directives
	priority:10,require:{parentCtrl:'?^^ngModelOptions'},bindToController:true,controller:NgModelOptionsController};};// shallow copy over values from `src` that are not already specified on `dst`
	function defaults(dst,src){forEach(src,function(value,key){if(!isDefined(dst[key])){dst[key]=value;}});}/**
	 * @ngdoc directive
	 * @name ngNonBindable
	 * @restrict AC
	 * @priority 1000
	 *
	 * @description
	 * The `ngNonBindable` directive tells Angular not to compile or bind the contents of the current
	 * DOM element. This is useful if the element contains what appears to be Angular directives and
	 * bindings but which should be ignored by Angular. This could be the case if you have a site that
	 * displays snippets of code, for instance.
	 *
	 * @element ANY
	 *
	 * @example
	 * In this example there are two locations where a simple interpolation binding (`{{}}`) is present,
	 * but the one wrapped in `ngNonBindable` is left alone.
	 *
	 * @example
	    <example name="ng-non-bindable">
	      <file name="index.html">
	        <div>Normal: {{1 + 2}}</div>
	        <div ng-non-bindable>Ignored: {{1 + 2}}</div>
	      </file>
	      <file name="protractor.js" type="protractor">
	       it('should check ng-non-bindable', function() {
	         expect(element(by.binding('1 + 2')).getText()).toContain('3');
	         expect(element.all(by.css('div')).last().getText()).toMatch(/1 \+ 2/);
	       });
	      </file>
	    </example>
	 */var ngNonBindableDirective=ngDirective({terminal:true,priority:1000});/* exported ngOptionsDirective *//* global jqLiteRemove */var ngOptionsMinErr=minErr('ngOptions');/**
	 * @ngdoc directive
	 * @name ngOptions
	 * @restrict A
	 *
	 * @description
	 *
	 * The `ngOptions` attribute can be used to dynamically generate a list of `<option>`
	 * elements for the `<select>` element using the array or object obtained by evaluating the
	 * `ngOptions` comprehension expression.
	 *
	 * In many cases, {@link ng.directive:ngRepeat ngRepeat} can be used on `<option>` elements instead of
	 * `ngOptions` to achieve a similar result. However, `ngOptions` provides some benefits:
	 * - more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the
	 * comprehension expression
	 * - reduced memory consumption by not creating a new scope for each repeated instance
	 * - increased render speed by creating the options in a documentFragment instead of individually
	 *
	 * When an item in the `<select>` menu is selected, the array element or object property
	 * represented by the selected option will be bound to the model identified by the `ngModel`
	 * directive.
	 *
	 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
	 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
	 * option. See example below for demonstration.
	 *
	 * ## Complex Models (objects or collections)
	 *
	 * By default, `ngModel` watches the model by reference, not value. This is important to know when
	 * binding the select to a model that is an object or a collection.
	 *
	 * One issue occurs if you want to preselect an option. For example, if you set
	 * the model to an object that is equal to an object in your collection, `ngOptions` won't be able to set the selection,
	 * because the objects are not identical. So by default, you should always reference the item in your collection
	 * for preselections, e.g.: `$scope.selected = $scope.collection[3]`.
	 *
	 * Another solution is to use a `track by` clause, because then `ngOptions` will track the identity
	 * of the item not by reference, but by the result of the `track by` expression. For example, if your
	 * collection items have an id property, you would `track by item.id`.
	 *
	 * A different issue with objects or collections is that ngModel won't detect if an object property or
	 * a collection item changes. For that reason, `ngOptions` additionally watches the model using
	 * `$watchCollection`, when the expression contains a `track by` clause or the the select has the `multiple` attribute.
	 * This allows ngOptions to trigger a re-rendering of the options even if the actual object/collection
	 * has not changed identity, but only a property on the object or an item in the collection changes.
	 *
	 * Note that `$watchCollection` does a shallow comparison of the properties of the object (or the items in the collection
	 * if the model is an array). This means that changing a property deeper than the first level inside the
	 * object/collection will not trigger a re-rendering.
	 *
	 * ## `select` **`as`**
	 *
	 * Using `select` **`as`** will bind the result of the `select` expression to the model, but
	 * the value of the `<select>` and `<option>` html elements will be either the index (for array data sources)
	 * or property name (for object data sources) of the value within the collection. If a **`track by`** expression
	 * is used, the result of that expression will be set as the value of the `option` and `select` elements.
	 *
	 *
	 * ### `select` **`as`** and **`track by`**
	 *
	 * <div class="alert alert-warning">
	 * Be careful when using `select` **`as`** and **`track by`** in the same expression.
	 * </div>
	 *
	 * Given this array of items on the $scope:
	 *
	 * ```js
	 * $scope.items = [{
	 *   id: 1,
	 *   label: 'aLabel',
	 *   subItem: { name: 'aSubItem' }
	 * }, {
	 *   id: 2,
	 *   label: 'bLabel',
	 *   subItem: { name: 'bSubItem' }
	 * }];
	 * ```
	 *
	 * This will work:
	 *
	 * ```html
	 * <select ng-options="item as item.label for item in items track by item.id" ng-model="selected"></select>
	 * ```
	 * ```js
	 * $scope.selected = $scope.items[0];
	 * ```
	 *
	 * but this will not work:
	 *
	 * ```html
	 * <select ng-options="item.subItem as item.label for item in items track by item.id" ng-model="selected"></select>
	 * ```
	 * ```js
	 * $scope.selected = $scope.items[0].subItem;
	 * ```
	 *
	 * In both examples, the **`track by`** expression is applied successfully to each `item` in the
	 * `items` array. Because the selected option has been set programmatically in the controller, the
	 * **`track by`** expression is also applied to the `ngModel` value. In the first example, the
	 * `ngModel` value is `items[0]` and the **`track by`** expression evaluates to `items[0].id` with
	 * no issue. In the second example, the `ngModel` value is `items[0].subItem` and the **`track by`**
	 * expression evaluates to `items[0].subItem.id` (which is undefined). As a result, the model value
	 * is not matched against any `<option>` and the `<select>` appears as having no selected value.
	 *
	 *
	 * @param {string} ngModel Assignable AngularJS expression to data-bind to.
	 * @param {comprehension_expression} ngOptions in one of the following forms:
	 *
	 *   * for array data sources:
	 *     * `label` **`for`** `value` **`in`** `array`
	 *     * `select` **`as`** `label` **`for`** `value` **`in`** `array`
	 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array`
	 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array`
	 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
	 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
	 *     * `label` **`for`** `value` **`in`** `array` | orderBy:`orderexpr` **`track by`** `trackexpr`
	 *        (for including a filter with `track by`)
	 *   * for object data sources:
	 *     * `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
	 *     * `select` **`as`** `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
	 *     * `label` **`group by`** `group` **`for (`**`key`**`,`** `value`**`) in`** `object`
	 *     * `label` **`disable when`** `disable` **`for (`**`key`**`,`** `value`**`) in`** `object`
	 *     * `select` **`as`** `label` **`group by`** `group`
	 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
	 *     * `select` **`as`** `label` **`disable when`** `disable`
	 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
	 *
	 * Where:
	 *
	 *   * `array` / `object`: an expression which evaluates to an array / object to iterate over.
	 *   * `value`: local variable which will refer to each item in the `array` or each property value
	 *      of `object` during iteration.
	 *   * `key`: local variable which will refer to a property name in `object` during iteration.
	 *   * `label`: The result of this expression will be the label for `<option>` element. The
	 *     `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).
	 *   * `select`: The result of this expression will be bound to the model of the parent `<select>`
	 *      element. If not specified, `select` expression will default to `value`.
	 *   * `group`: The result of this expression will be used to group options using the `<optgroup>`
	 *      DOM element.
	 *   * `disable`: The result of this expression will be used to disable the rendered `<option>`
	 *      element. Return `true` to disable.
	 *   * `trackexpr`: Used when working with an array of objects. The result of this expression will be
	 *      used to identify the objects in the array. The `trackexpr` will most likely refer to the
	 *     `value` variable (e.g. `value.propertyName`). With this the selection is preserved
	 *      even when the options are recreated (e.g. reloaded from the server).
	 * @param {string=} name Property name of the form under which the control is published.
	 * @param {string=} required The control is considered valid only if value is entered.
	 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	 *    `required` when you want to data-bind to the `required` attribute.
	 * @param {string=} ngAttrSize sets the size of the select element dynamically. Uses the
	 * {@link guide/interpolation#-ngattr-for-binding-to-arbitrary-attributes ngAttr} directive.
	 *
	 * @example
	    <example module="selectExample" name="select">
	      <file name="index.html">
	        <script>
	        angular.module('selectExample', [])
	          .controller('ExampleController', ['$scope', function($scope) {
	            $scope.colors = [
	              {name:'black', shade:'dark'},
	              {name:'white', shade:'light', notAnOption: true},
	              {name:'red', shade:'dark'},
	              {name:'blue', shade:'dark', notAnOption: true},
	              {name:'yellow', shade:'light', notAnOption: false}
	            ];
	            $scope.myColor = $scope.colors[2]; // red
	          }]);
	        </script>
	        <div ng-controller="ExampleController">
	          <ul>
	            <li ng-repeat="color in colors">
	              <label>Name: <input ng-model="color.name"></label>
	              <label><input type="checkbox" ng-model="color.notAnOption"> Disabled?</label>
	              <button ng-click="colors.splice($index, 1)" aria-label="Remove">X</button>
	            </li>
	            <li>
	              <button ng-click="colors.push({})">add</button>
	            </li>
	          </ul>
	          <hr/>
	          <label>Color (null not allowed):
	            <select ng-model="myColor" ng-options="color.name for color in colors"></select>
	          </label><br/>
	          <label>Color (null allowed):
	          <span  class="nullable">
	            <select ng-model="myColor" ng-options="color.name for color in colors">
	              <option value="">-- choose color --</option>
	            </select>
	          </span></label><br/>
	
	          <label>Color grouped by shade:
	            <select ng-model="myColor" ng-options="color.name group by color.shade for color in colors">
	            </select>
	          </label><br/>
	
	          <label>Color grouped by shade, with some disabled:
	            <select ng-model="myColor"
	                  ng-options="color.name group by color.shade disable when color.notAnOption for color in colors">
	            </select>
	          </label><br/>
	
	
	
	          Select <button ng-click="myColor = { name:'not in list', shade: 'other' }">bogus</button>.
	          <br/>
	          <hr/>
	          Currently selected: {{ {selected_color:myColor} }}
	          <div style="border:solid 1px black; height:20px"
	               ng-style="{'background-color':myColor.name}">
	          </div>
	        </div>
	      </file>
	      <file name="protractor.js" type="protractor">
	         it('should check ng-options', function() {
	           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('red');
	           element.all(by.model('myColor')).first().click();
	           element.all(by.css('select[ng-model="myColor"] option')).first().click();
	           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('black');
	           element(by.css('.nullable select[ng-model="myColor"]')).click();
	           element.all(by.css('.nullable select[ng-model="myColor"] option')).first().click();
	           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('null');
	         });
	      </file>
	    </example>
	 *//* eslint-disable max-len *///                     //00001111111111000000000002222222222000000000000000000000333333333300000000000000000000000004444444444400000000000005555555555555000000000666666666666600000007777777777777000000000000000888888888800000000000000000009999999999
	var NG_OPTIONS_REGEXP=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([$\w][$\w]*)|(?:\(\s*([$\w][$\w]*)\s*,\s*([$\w][$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/;// 1: value expression (valueFn)
	// 2: label expression (displayFn)
	// 3: group by expression (groupByFn)
	// 4: disable when expression (disableWhenFn)
	// 5: array item variable name
	// 6: object item key variable name
	// 7: object item value variable name
	// 8: collection expression
	// 9: track by expression
	/* eslint-enable */var ngOptionsDirective=['$compile','$document','$parse',function($compile,$document,$parse){function parseOptionsExpression(optionsExp,selectElement,scope){var match=optionsExp.match(NG_OPTIONS_REGEXP);if(!match){throw ngOptionsMinErr('iexp','Expected expression in form of '+'\'_select_ (as _label_)? for (_key_,)?_value_ in _collection_\''+' but got \'{0}\'. Element: {1}',optionsExp,startingTag(selectElement));}// Extract the parts from the ngOptions expression
	// The variable name for the value of the item in the collection
	var valueName=match[5]||match[7];// The variable name for the key of the item in the collection
	var keyName=match[6];// An expression that generates the viewValue for an option if there is a label expression
	var selectAs=/ as /.test(match[0])&&match[1];// An expression that is used to track the id of each object in the options collection
	var trackBy=match[9];// An expression that generates the viewValue for an option if there is no label expression
	var valueFn=$parse(match[2]?match[1]:valueName);var selectAsFn=selectAs&&$parse(selectAs);var viewValueFn=selectAsFn||valueFn;var trackByFn=trackBy&&$parse(trackBy);// Get the value by which we are going to track the option
	// if we have a trackFn then use that (passing scope and locals)
	// otherwise just hash the given viewValue
	var getTrackByValueFn=trackBy?function(value,locals){return trackByFn(scope,locals);}:function getHashOfValue(value){return hashKey(value);};var getTrackByValue=function getTrackByValue(value,key){return getTrackByValueFn(value,getLocals(value,key));};var displayFn=$parse(match[2]||match[1]);var groupByFn=$parse(match[3]||'');var disableWhenFn=$parse(match[4]||'');var valuesFn=$parse(match[8]);var locals={};var getLocals=keyName?function(value,key){locals[keyName]=key;locals[valueName]=value;return locals;}:function(value){locals[valueName]=value;return locals;};function Option(selectValue,viewValue,label,group,disabled){this.selectValue=selectValue;this.viewValue=viewValue;this.label=label;this.group=group;this.disabled=disabled;}function getOptionValuesKeys(optionValues){var optionValuesKeys;if(!keyName&&isArrayLike(optionValues)){optionValuesKeys=optionValues;}else{// if object, extract keys, in enumeration order, unsorted
	optionValuesKeys=[];for(var itemKey in optionValues){if(optionValues.hasOwnProperty(itemKey)&&itemKey.charAt(0)!=='$'){optionValuesKeys.push(itemKey);}}}return optionValuesKeys;}return{trackBy:trackBy,getTrackByValue:getTrackByValue,getWatchables:$parse(valuesFn,function(optionValues){// Create a collection of things that we would like to watch (watchedArray)
	// so that they can all be watched using a single $watchCollection
	// that only runs the handler once if anything changes
	var watchedArray=[];optionValues=optionValues||[];var optionValuesKeys=getOptionValuesKeys(optionValues);var optionValuesLength=optionValuesKeys.length;for(var index=0;index<optionValuesLength;index++){var key=optionValues===optionValuesKeys?index:optionValuesKeys[index];var value=optionValues[key];var locals=getLocals(value,key);var selectValue=getTrackByValueFn(value,locals);watchedArray.push(selectValue);// Only need to watch the displayFn if there is a specific label expression
	if(match[2]||match[1]){var label=displayFn(scope,locals);watchedArray.push(label);}// Only need to watch the disableWhenFn if there is a specific disable expression
	if(match[4]){var disableWhen=disableWhenFn(scope,locals);watchedArray.push(disableWhen);}}return watchedArray;}),getOptions:function getOptions(){var optionItems=[];var selectValueMap={};// The option values were already computed in the `getWatchables` fn,
	// which must have been called to trigger `getOptions`
	var optionValues=valuesFn(scope)||[];var optionValuesKeys=getOptionValuesKeys(optionValues);var optionValuesLength=optionValuesKeys.length;for(var index=0;index<optionValuesLength;index++){var key=optionValues===optionValuesKeys?index:optionValuesKeys[index];var value=optionValues[key];var locals=getLocals(value,key);var viewValue=viewValueFn(scope,locals);var selectValue=getTrackByValueFn(viewValue,locals);var label=displayFn(scope,locals);var group=groupByFn(scope,locals);var disabled=disableWhenFn(scope,locals);var optionItem=new Option(selectValue,viewValue,label,group,disabled);optionItems.push(optionItem);selectValueMap[selectValue]=optionItem;}return{items:optionItems,selectValueMap:selectValueMap,getOptionFromViewValue:function getOptionFromViewValue(value){return selectValueMap[getTrackByValue(value)];},getViewValueFromOption:function getViewValueFromOption(option){// If the viewValue could be an object that may be mutated by the application,
	// we need to make a copy and not return the reference to the value on the option.
	return trackBy?copy(option.viewValue):option.viewValue;}};}};}// we can't just jqLite('<option>') since jqLite is not smart enough
	// to create it in <select> and IE barfs otherwise.
	var optionTemplate=window.document.createElement('option'),optGroupTemplate=window.document.createElement('optgroup');function ngOptionsPostLink(scope,selectElement,attr,ctrls){var selectCtrl=ctrls[0];var ngModelCtrl=ctrls[1];var multiple=attr.multiple;// The emptyOption allows the application developer to provide their own custom "empty"
	// option when the viewValue does not match any of the option values.
	for(var i=0,children=selectElement.children(),ii=children.length;i<ii;i++){if(children[i].value===''){selectCtrl.hasEmptyOption=true;selectCtrl.emptyOption=children.eq(i);break;}}var providedEmptyOption=!!selectCtrl.emptyOption;var unknownOption=jqLite(optionTemplate.cloneNode(false));unknownOption.val('?');var options;var ngOptions=parseOptionsExpression(attr.ngOptions,selectElement,scope);// This stores the newly created options before they are appended to the select.
	// Since the contents are removed from the fragment when it is appended,
	// we only need to create it once.
	var listFragment=$document[0].createDocumentFragment();// Overwrite the implementation. ngOptions doesn't use hashes
	selectCtrl.generateUnknownOptionValue=function(val){return'?';};// Update the controller methods for multiple selectable options
	if(!multiple){selectCtrl.writeValue=function writeNgOptionsValue(value){var selectedOption=options.selectValueMap[selectElement.val()];var option=options.getOptionFromViewValue(value);// Make sure to remove the selected attribute from the previously selected option
	// Otherwise, screen readers might get confused
	if(selectedOption)selectedOption.element.removeAttribute('selected');if(option){// Don't update the option when it is already selected.
	// For example, the browser will select the first option by default. In that case,
	// most properties are set automatically - except the `selected` attribute, which we
	// set always
	if(selectElement[0].value!==option.selectValue){selectCtrl.removeUnknownOption();selectCtrl.unselectEmptyOption();selectElement[0].value=option.selectValue;option.element.selected=true;}option.element.setAttribute('selected','selected');}else{if(providedEmptyOption){selectCtrl.selectEmptyOption();}else if(selectCtrl.unknownOption.parent().length){selectCtrl.updateUnknownOption(value);}else{selectCtrl.renderUnknownOption(value);}}};selectCtrl.readValue=function readNgOptionsValue(){var selectedOption=options.selectValueMap[selectElement.val()];if(selectedOption&&!selectedOption.disabled){selectCtrl.unselectEmptyOption();selectCtrl.removeUnknownOption();return options.getViewValueFromOption(selectedOption);}return null;};// If we are using `track by` then we must watch the tracked value on the model
	// since ngModel only watches for object identity change
	// FIXME: When a user selects an option, this watch will fire needlessly
	if(ngOptions.trackBy){scope.$watch(function(){return ngOptions.getTrackByValue(ngModelCtrl.$viewValue);},function(){ngModelCtrl.$render();});}}else{selectCtrl.writeValue=function writeNgOptionsMultiple(values){// Only set `<option>.selected` if necessary, in order to prevent some browsers from
	// scrolling to `<option>` elements that are outside the `<select>` element's viewport.
	var selectedOptions=values&&values.map(getAndUpdateSelectedOption)||[];options.items.forEach(function(option){if(option.element.selected&&!includes(selectedOptions,option)){option.element.selected=false;}});};selectCtrl.readValue=function readNgOptionsMultiple(){var selectedValues=selectElement.val()||[],selections=[];forEach(selectedValues,function(value){var option=options.selectValueMap[value];if(option&&!option.disabled)selections.push(options.getViewValueFromOption(option));});return selections;};// If we are using `track by` then we must watch these tracked values on the model
	// since ngModel only watches for object identity change
	if(ngOptions.trackBy){scope.$watchCollection(function(){if(isArray(ngModelCtrl.$viewValue)){return ngModelCtrl.$viewValue.map(function(value){return ngOptions.getTrackByValue(value);});}},function(){ngModelCtrl.$render();});}}if(providedEmptyOption){// we need to remove it before calling selectElement.empty() because otherwise IE will
	// remove the label from the element. wtf?
	selectCtrl.emptyOption.remove();// compile the element since there might be bindings in it
	$compile(selectCtrl.emptyOption)(scope);if(selectCtrl.emptyOption[0].nodeType===NODE_TYPE_COMMENT){// This means the empty option has currently no actual DOM node, probably because
	// it has been modified by a transclusion directive.
	selectCtrl.hasEmptyOption=false;// Redefine the registerOption function, which will catch
	// options that are added by ngIf etc. (rendering of the node is async because of
	// lazy transclusion)
	selectCtrl.registerOption=function(optionScope,optionEl){if(optionEl.val()===''){selectCtrl.hasEmptyOption=true;selectCtrl.emptyOption=optionEl;selectCtrl.emptyOption.removeClass('ng-scope');// This ensures the new empty option is selected if previously no option was selected
	ngModelCtrl.$render();optionEl.on('$destroy',function(){selectCtrl.hasEmptyOption=false;selectCtrl.emptyOption=undefined;});}};}else{// remove the class, which is added automatically because we recompile the element and it
	// becomes the compilation root
	selectCtrl.emptyOption.removeClass('ng-scope');}}selectElement.empty();// We need to do this here to ensure that the options object is defined
	// when we first hit it in writeNgOptionsValue
	updateOptions();// We will re-render the option elements if the option values or labels change
	scope.$watchCollection(ngOptions.getWatchables,updateOptions);// ------------------------------------------------------------------ //
	function addOptionElement(option,parent){var optionElement=optionTemplate.cloneNode(false);parent.appendChild(optionElement);updateOptionElement(option,optionElement);}function getAndUpdateSelectedOption(viewValue){var option=options.getOptionFromViewValue(viewValue);var element=option&&option.element;if(element&&!element.selected)element.selected=true;return option;}function updateOptionElement(option,element){option.element=element;element.disabled=option.disabled;// NOTE: The label must be set before the value, otherwise IE10/11/EDGE create unresponsive
	// selects in certain circumstances when multiple selects are next to each other and display
	// the option list in listbox style, i.e. the select is [multiple], or specifies a [size].
	// See https://github.com/angular/angular.js/issues/11314 for more info.
	// This is unfortunately untestable with unit / e2e tests
	if(option.label!==element.label){element.label=option.label;element.textContent=option.label;}element.value=option.selectValue;}function updateOptions(){var previousValue=options&&selectCtrl.readValue();// We must remove all current options, but cannot simply set innerHTML = null
	// since the providedEmptyOption might have an ngIf on it that inserts comments which we
	// must preserve.
	// Instead, iterate over the current option elements and remove them or their optgroup
	// parents
	if(options){for(var i=options.items.length-1;i>=0;i--){var option=options.items[i];if(isDefined(option.group)){jqLiteRemove(option.element.parentNode);}else{jqLiteRemove(option.element);}}}options=ngOptions.getOptions();var groupElementMap={};// Ensure that the empty option is always there if it was explicitly provided
	if(providedEmptyOption){selectElement.prepend(selectCtrl.emptyOption);}options.items.forEach(function addOption(option){var groupElement;if(isDefined(option.group)){// This option is to live in a group
	// See if we have already created this group
	groupElement=groupElementMap[option.group];if(!groupElement){groupElement=optGroupTemplate.cloneNode(false);listFragment.appendChild(groupElement);// Update the label on the group element
	// "null" is special cased because of Safari
	groupElement.label=option.group===null?'null':option.group;// Store it for use later
	groupElementMap[option.group]=groupElement;}addOptionElement(option,groupElement);}else{// This option is not in a group
	addOptionElement(option,listFragment);}});selectElement[0].appendChild(listFragment);ngModelCtrl.$render();// Check to see if the value has changed due to the update to the options
	if(!ngModelCtrl.$isEmpty(previousValue)){var nextValue=selectCtrl.readValue();var isNotPrimitive=ngOptions.trackBy||multiple;if(isNotPrimitive?!equals(previousValue,nextValue):previousValue!==nextValue){ngModelCtrl.$setViewValue(nextValue);ngModelCtrl.$render();}}}}return{restrict:'A',terminal:true,require:['select','ngModel'],link:{pre:function ngOptionsPreLink(scope,selectElement,attr,ctrls){// Deactivate the SelectController.register method to prevent
	// option directives from accidentally registering themselves
	// (and unwanted $destroy handlers etc.)
	ctrls[0].registerOption=noop;},post:ngOptionsPostLink}};}];/**
	 * @ngdoc directive
	 * @name ngPluralize
	 * @restrict EA
	 *
	 * @description
	 * `ngPluralize` is a directive that displays messages according to en-US localization rules.
	 * These rules are bundled with angular.js, but can be overridden
	 * (see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive
	 * by specifying the mappings between
	 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
	 * and the strings to be displayed.
	 *
	 * # Plural categories and explicit number rules
	 * There are two
	 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
	 * in Angular's default en-US locale: "one" and "other".
	 *
	 * While a plural category may match many numbers (for example, in en-US locale, "other" can match
	 * any number that is not 1), an explicit number rule can only match one number. For example, the
	 * explicit number rule for "3" matches the number 3. There are examples of plural categories
	 * and explicit number rules throughout the rest of this documentation.
	 *
	 * # Configuring ngPluralize
	 * You configure ngPluralize by providing 2 attributes: `count` and `when`.
	 * You can also provide an optional attribute, `offset`.
	 *
	 * The value of the `count` attribute can be either a string or an {@link guide/expression
	 * Angular expression}; these are evaluated on the current scope for its bound value.
	 *
	 * The `when` attribute specifies the mappings between plural categories and the actual
	 * string to be displayed. The value of the attribute should be a JSON object.
	 *
	 * The following example shows how to configure ngPluralize:
	 *
	 * ```html
	 * <ng-pluralize count="personCount"
	                 when="{'0': 'Nobody is viewing.',
	 *                      'one': '1 person is viewing.',
	 *                      'other': '{} people are viewing.'}">
	 * </ng-pluralize>
	 *```
	 *
	 * In the example, `"0: Nobody is viewing."` is an explicit number rule. If you did not
	 * specify this rule, 0 would be matched to the "other" category and "0 people are viewing"
	 * would be shown instead of "Nobody is viewing". You can specify an explicit number rule for
	 * other numbers, for example 12, so that instead of showing "12 people are viewing", you can
	 * show "a dozen people are viewing".
	 *
	 * You can use a set of closed braces (`{}`) as a placeholder for the number that you want substituted
	 * into pluralized strings. In the previous example, Angular will replace `{}` with
	 * <span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder
	 * for <span ng-non-bindable>{{numberExpression}}</span>.
	 *
	 * If no rule is defined for a category, then an empty string is displayed and a warning is generated.
	 * Note that some locales define more categories than `one` and `other`. For example, fr-fr defines `few` and `many`.
	 *
	 * # Configuring ngPluralize with offset
	 * The `offset` attribute allows further customization of pluralized text, which can result in
	 * a better user experience. For example, instead of the message "4 people are viewing this document",
	 * you might display "John, Kate and 2 others are viewing this document".
	 * The offset attribute allows you to offset a number by any desired value.
	 * Let's take a look at an example:
	 *
	 * ```html
	 * <ng-pluralize count="personCount" offset=2
	 *               when="{'0': 'Nobody is viewing.',
	 *                      '1': '{{person1}} is viewing.',
	 *                      '2': '{{person1}} and {{person2}} are viewing.',
	 *                      'one': '{{person1}}, {{person2}} and one other person are viewing.',
	 *                      'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
	 * </ng-pluralize>
	 * ```
	 *
	 * Notice that we are still using two plural categories(one, other), but we added
	 * three explicit number rules 0, 1 and 2.
	 * When one person, perhaps John, views the document, "John is viewing" will be shown.
	 * When three people view the document, no explicit number rule is found, so
	 * an offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.
	 * In this case, plural category 'one' is matched and "John, Mary and one other person are viewing"
	 * is shown.
	 *
	 * Note that when you specify offsets, you must provide explicit number rules for
	 * numbers from 0 up to and including the offset. If you use an offset of 3, for example,
	 * you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for
	 * plural categories "one" and "other".
	 *
	 * @param {string|expression} count The variable to be bound to.
	 * @param {string} when The mapping between plural category to its corresponding strings.
	 * @param {number=} offset Offset to deduct from the total number.
	 *
	 * @example
	    <example module="pluralizeExample" name="ng-pluralize">
	      <file name="index.html">
	        <script>
	          angular.module('pluralizeExample', [])
	            .controller('ExampleController', ['$scope', function($scope) {
	              $scope.person1 = 'Igor';
	              $scope.person2 = 'Misko';
	              $scope.personCount = 1;
	            }]);
	        </script>
	        <div ng-controller="ExampleController">
	          <label>Person 1:<input type="text" ng-model="person1" value="Igor" /></label><br/>
	          <label>Person 2:<input type="text" ng-model="person2" value="Misko" /></label><br/>
	          <label>Number of People:<input type="text" ng-model="personCount" value="1" /></label><br/>
	
	          <!--- Example with simple pluralization rules for en locale --->
	          Without Offset:
	          <ng-pluralize count="personCount"
	                        when="{'0': 'Nobody is viewing.',
	                               'one': '1 person is viewing.',
	                               'other': '{} people are viewing.'}">
	          </ng-pluralize><br>
	
	          <!--- Example with offset --->
	          With Offset(2):
	          <ng-pluralize count="personCount" offset=2
	                        when="{'0': 'Nobody is viewing.',
	                               '1': '{{person1}} is viewing.',
	                               '2': '{{person1}} and {{person2}} are viewing.',
	                               'one': '{{person1}}, {{person2}} and one other person are viewing.',
	                               'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
	          </ng-pluralize>
	        </div>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should show correct pluralized string', function() {
	          var withoutOffset = element.all(by.css('ng-pluralize')).get(0);
	          var withOffset = element.all(by.css('ng-pluralize')).get(1);
	          var countInput = element(by.model('personCount'));
	
	          expect(withoutOffset.getText()).toEqual('1 person is viewing.');
	          expect(withOffset.getText()).toEqual('Igor is viewing.');
	
	          countInput.clear();
	          countInput.sendKeys('0');
	
	          expect(withoutOffset.getText()).toEqual('Nobody is viewing.');
	          expect(withOffset.getText()).toEqual('Nobody is viewing.');
	
	          countInput.clear();
	          countInput.sendKeys('2');
	
	          expect(withoutOffset.getText()).toEqual('2 people are viewing.');
	          expect(withOffset.getText()).toEqual('Igor and Misko are viewing.');
	
	          countInput.clear();
	          countInput.sendKeys('3');
	
	          expect(withoutOffset.getText()).toEqual('3 people are viewing.');
	          expect(withOffset.getText()).toEqual('Igor, Misko and one other person are viewing.');
	
	          countInput.clear();
	          countInput.sendKeys('4');
	
	          expect(withoutOffset.getText()).toEqual('4 people are viewing.');
	          expect(withOffset.getText()).toEqual('Igor, Misko and 2 other people are viewing.');
	        });
	        it('should show data-bound names', function() {
	          var withOffset = element.all(by.css('ng-pluralize')).get(1);
	          var personCount = element(by.model('personCount'));
	          var person1 = element(by.model('person1'));
	          var person2 = element(by.model('person2'));
	          personCount.clear();
	          personCount.sendKeys('4');
	          person1.clear();
	          person1.sendKeys('Di');
	          person2.clear();
	          person2.sendKeys('Vojta');
	          expect(withOffset.getText()).toEqual('Di, Vojta and 2 other people are viewing.');
	        });
	      </file>
	    </example>
	 */var ngPluralizeDirective=['$locale','$interpolate','$log',function($locale,$interpolate,$log){var BRACE=/{}/g,IS_WHEN=/^when(Minus)?(.+)$/;return{link:function link(scope,element,attr){var numberExp=attr.count,whenExp=attr.$attr.when&&element.attr(attr.$attr.when),// we have {{}} in attrs
	offset=attr.offset||0,whens=scope.$eval(whenExp)||{},whensExpFns={},startSymbol=$interpolate.startSymbol(),endSymbol=$interpolate.endSymbol(),braceReplacement=startSymbol+numberExp+'-'+offset+endSymbol,watchRemover=angular.noop,lastCount;forEach(attr,function(expression,attributeName){var tmpMatch=IS_WHEN.exec(attributeName);if(tmpMatch){var whenKey=(tmpMatch[1]?'-':'')+lowercase(tmpMatch[2]);whens[whenKey]=element.attr(attr.$attr[attributeName]);}});forEach(whens,function(expression,key){whensExpFns[key]=$interpolate(expression.replace(BRACE,braceReplacement));});scope.$watch(numberExp,function ngPluralizeWatchAction(newVal){var count=parseFloat(newVal);var countIsNaN=isNumberNaN(count);if(!countIsNaN&&!(count in whens)){// If an explicit number rule such as 1, 2, 3... is defined, just use it.
	// Otherwise, check it against pluralization rules in $locale service.
	count=$locale.pluralCat(count-offset);}// If both `count` and `lastCount` are NaN, we don't need to re-register a watch.
	// In JS `NaN !== NaN`, so we have to explicitly check.
	if(count!==lastCount&&!(countIsNaN&&isNumberNaN(lastCount))){watchRemover();var whenExpFn=whensExpFns[count];if(isUndefined(whenExpFn)){if(newVal!=null){$log.debug('ngPluralize: no rule defined for \''+count+'\' in '+whenExp);}watchRemover=noop;updateElementText();}else{watchRemover=scope.$watch(whenExpFn,updateElementText);}lastCount=count;}});function updateElementText(newText){element.text(newText||'');}}};}];/* exported ngRepeatDirective *//**
	 * @ngdoc directive
	 * @name ngRepeat
	 * @multiElement
	 * @restrict A
	 *
	 * @description
	 * The `ngRepeat` directive instantiates a template once per item from a collection. Each template
	 * instance gets its own scope, where the given loop variable is set to the current collection item,
	 * and `$index` is set to the item index or key.
	 *
	 * Special properties are exposed on the local scope of each template instance, including:
	 *
	 * | Variable  | Type            | Details                                                                     |
	 * |-----------|-----------------|-----------------------------------------------------------------------------|
	 * | `$index`  | {@type number}  | iterator offset of the repeated element (0..length-1)                       |
	 * | `$first`  | {@type boolean} | true if the repeated element is first in the iterator.                      |
	 * | `$middle` | {@type boolean} | true if the repeated element is between the first and last in the iterator. |
	 * | `$last`   | {@type boolean} | true if the repeated element is last in the iterator.                       |
	 * | `$even`   | {@type boolean} | true if the iterator position `$index` is even (otherwise false).           |
	 * | `$odd`    | {@type boolean} | true if the iterator position `$index` is odd (otherwise false).            |
	 *
	 * <div class="alert alert-info">
	 *   Creating aliases for these properties is possible with {@link ng.directive:ngInit `ngInit`}.
	 *   This may be useful when, for instance, nesting ngRepeats.
	 * </div>
	 *
	 *
	 * # Iterating over object properties
	 *
	 * It is possible to get `ngRepeat` to iterate over the properties of an object using the following
	 * syntax:
	 *
	 * ```js
	 * <div ng-repeat="(key, value) in myObj"> ... </div>
	 * ```
	 *
	 * However, there are a few limitations compared to array iteration:
	 *
	 * - The JavaScript specification does not define the order of keys
	 *   returned for an object, so Angular relies on the order returned by the browser
	 *   when running `for key in myObj`. Browsers generally follow the strategy of providing
	 *   keys in the order in which they were defined, although there are exceptions when keys are deleted
	 *   and reinstated. See the
	 *   [MDN page on `delete` for more info](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete#Cross-browser_notes).
	 *
	 * - `ngRepeat` will silently *ignore* object keys starting with `$`, because
	 *   it's a prefix used by Angular for public (`$`) and private (`$$`) properties.
	 *
	 * - The built-in filters {@link ng.orderBy orderBy} and {@link ng.filter filter} do not work with
	 *   objects, and will throw an error if used with one.
	 *
	 * If you are hitting any of these limitations, the recommended workaround is to convert your object into an array
	 * that is sorted into the order that you prefer before providing it to `ngRepeat`. You could
	 * do this with a filter such as [toArrayFilter](http://ngmodules.org/modules/angular-toArrayFilter)
	 * or implement a `$watch` on the object yourself.
	 *
	 *
	 * # Tracking and Duplicates
	 *
	 * `ngRepeat` uses {@link $rootScope.Scope#$watchCollection $watchCollection} to detect changes in
	 * the collection. When a change happens, `ngRepeat` then makes the corresponding changes to the DOM:
	 *
	 * * When an item is added, a new instance of the template is added to the DOM.
	 * * When an item is removed, its template instance is removed from the DOM.
	 * * When items are reordered, their respective templates are reordered in the DOM.
	 *
	 * To minimize creation of DOM elements, `ngRepeat` uses a function
	 * to "keep track" of all items in the collection and their corresponding DOM elements.
	 * For example, if an item is added to the collection, `ngRepeat` will know that all other items
	 * already have DOM elements, and will not re-render them.
	 *
	 * The default tracking function (which tracks items by their identity) does not allow
	 * duplicate items in arrays. This is because when there are duplicates, it is not possible
	 * to maintain a one-to-one mapping between collection items and DOM elements.
	 *
	 * If you do need to repeat duplicate items, you can substitute the default tracking behavior
	 * with your own using the `track by` expression.
	 *
	 * For example, you may track items by the index of each item in the collection, using the
	 * special scope property `$index`:
	 * ```html
	 *    <div ng-repeat="n in [42, 42, 43, 43] track by $index">
	 *      {{n}}
	 *    </div>
	 * ```
	 *
	 * You may also use arbitrary expressions in `track by`, including references to custom functions
	 * on the scope:
	 * ```html
	 *    <div ng-repeat="n in [42, 42, 43, 43] track by myTrackingFunction(n)">
	 *      {{n}}
	 *    </div>
	 * ```
	 *
	 * <div class="alert alert-success">
	 * If you are working with objects that have a unique identifier property, you should track
	 * by this identifier instead of the object instance. Should you reload your data later, `ngRepeat`
	 * will not have to rebuild the DOM elements for items it has already rendered, even if the
	 * JavaScript objects in the collection have been substituted for new ones. For large collections,
	 * this significantly improves rendering performance. If you don't have a unique identifier,
	 * `track by $index` can also provide a performance boost.
	 * </div>
	 *
	 * ```html
	 *    <div ng-repeat="model in collection track by model.id">
	 *      {{model.name}}
	 *    </div>
	 * ```
	 *
	 * <br />
	 * <div class="alert alert-warning">
	 * Avoid using `track by $index` when the repeated template contains
	 * {@link guide/expression#one-time-binding one-time bindings}. In such cases, the `nth` DOM
	 * element will always be matched with the `nth` item of the array, so the bindings on that element
	 * will not be updated even when the corresponding item changes, essentially causing the view to get
	 * out-of-sync with the underlying data.
	 * </div>
	 *
	 * When no `track by` expression is provided, it is equivalent to tracking by the built-in
	 * `$id` function, which tracks items by their identity:
	 * ```html
	 *    <div ng-repeat="obj in collection track by $id(obj)">
	 *      {{obj.prop}}
	 *    </div>
	 * ```
	 *
	 * <br />
	 * <div class="alert alert-warning">
	 * **Note:** `track by` must always be the last expression:
	 * </div>
	 * ```
	 *    <div ng-repeat="model in collection | orderBy: 'id' as filtered_result track by model.id">
	 *      {{model.name}}
	 *    </div>
	 * ```
	 *
	 *
	 * # Special repeat start and end points
	 * To repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending
	 * the range of the repeater by defining explicit start and end points by using **ng-repeat-start** and **ng-repeat-end** respectively.
	 * The **ng-repeat-start** directive works the same as **ng-repeat**, but will repeat all the HTML code (including the tag it's defined on)
	 * up to and including the ending HTML tag where **ng-repeat-end** is placed.
	 *
	 * The example below makes use of this feature:
	 * ```html
	 *   <header ng-repeat-start="item in items">
	 *     Header {{ item }}
	 *   </header>
	 *   <div class="body">
	 *     Body {{ item }}
	 *   </div>
	 *   <footer ng-repeat-end>
	 *     Footer {{ item }}
	 *   </footer>
	 * ```
	 *
	 * And with an input of {@type ['A','B']} for the items variable in the example above, the output will evaluate to:
	 * ```html
	 *   <header>
	 *     Header A
	 *   </header>
	 *   <div class="body">
	 *     Body A
	 *   </div>
	 *   <footer>
	 *     Footer A
	 *   </footer>
	 *   <header>
	 *     Header B
	 *   </header>
	 *   <div class="body">
	 *     Body B
	 *   </div>
	 *   <footer>
	 *     Footer B
	 *   </footer>
	 * ```
	 *
	 * The custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such
	 * as **data-ng-repeat-start**, **x-ng-repeat-start** and **ng:repeat-start**).
	 *
	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link ng.$animate#enter enter} | when a new item is added to the list or when an item is revealed after a filter |
	 * | {@link ng.$animate#leave leave} | when an item is removed from the list or when an item is filtered out |
	 * | {@link ng.$animate#move move } | when an adjacent item is filtered out causing a reorder or when the item contents are reordered |
	 *
	 * See the example below for defining CSS animations with ngRepeat.
	 *
	 * @element ANY
	 * @scope
	 * @priority 1000
	 * @param {repeat_expression} ngRepeat The expression indicating how to enumerate a collection. These
	 *   formats are currently supported:
	 *
	 *   * `variable in expression` – where variable is the user defined loop variable and `expression`
	 *     is a scope expression giving the collection to enumerate.
	 *
	 *     For example: `album in artist.albums`.
	 *
	 *   * `(key, value) in expression` – where `key` and `value` can be any user defined identifiers,
	 *     and `expression` is the scope expression giving the collection to enumerate.
	 *
	 *     For example: `(name, age) in {'adam':10, 'amalie':12}`.
	 *
	 *   * `variable in expression track by tracking_expression` – You can also provide an optional tracking expression
	 *     which can be used to associate the objects in the collection with the DOM elements. If no tracking expression
	 *     is specified, ng-repeat associates elements by identity. It is an error to have
	 *     more than one tracking expression value resolve to the same key. (This would mean that two distinct objects are
	 *     mapped to the same DOM element, which is not possible.)
	 *
	 *     Note that the tracking expression must come last, after any filters, and the alias expression.
	 *
	 *     For example: `item in items` is equivalent to `item in items track by $id(item)`. This implies that the DOM elements
	 *     will be associated by item identity in the array.
	 *
	 *     For example: `item in items track by $id(item)`. A built in `$id()` function can be used to assign a unique
	 *     `$$hashKey` property to each item in the array. This property is then used as a key to associated DOM elements
	 *     with the corresponding item in the array by identity. Moving the same object in array would move the DOM
	 *     element in the same way in the DOM.
	 *
	 *     For example: `item in items track by item.id` is a typical pattern when the items come from the database. In this
	 *     case the object identity does not matter. Two objects are considered equivalent as long as their `id`
	 *     property is same.
	 *
	 *     For example: `item in items | filter:searchText track by item.id` is a pattern that might be used to apply a filter
	 *     to items in conjunction with a tracking expression.
	 *
	 *   * `variable in expression as alias_expression` – You can also provide an optional alias expression which will then store the
	 *     intermediate results of the repeater after the filters have been applied. Typically this is used to render a special message
	 *     when a filter is active on the repeater, but the filtered result set is empty.
	 *
	 *     For example: `item in items | filter:x as results` will store the fragment of the repeated items as `results`, but only after
	 *     the items have been processed through the filter.
	 *
	 *     Please note that `as [variable name] is not an operator but rather a part of ngRepeat micro-syntax so it can be used only at the end
	 *     (and not as operator, inside an expression).
	 *
	 *     For example: `item in items | filter : x | orderBy : order | limitTo : limit as results` .
	 *
	 * @example
	 * This example uses `ngRepeat` to display a list of people. A filter is used to restrict the displayed
	 * results by name or by age. New (entering) and removed (leaving) items are animated.
	  <example module="ngRepeat" name="ngRepeat" deps="angular-animate.js" animations="true" name="ng-repeat">
	    <file name="index.html">
	      <div ng-controller="repeatController">
	        I have {{friends.length}} friends. They are:
	        <input type="search" ng-model="q" placeholder="filter friends..." aria-label="filter friends" />
	        <ul class="example-animate-container">
	          <li class="animate-repeat" ng-repeat="friend in friends | filter:q as results">
	            [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.
	          </li>
	          <li class="animate-repeat" ng-if="results.length === 0">
	            <strong>No results found...</strong>
	          </li>
	        </ul>
	      </div>
	    </file>
	    <file name="script.js">
	      angular.module('ngRepeat', ['ngAnimate']).controller('repeatController', function($scope) {
	        $scope.friends = [
	          {name:'John', age:25, gender:'boy'},
	          {name:'Jessie', age:30, gender:'girl'},
	          {name:'Johanna', age:28, gender:'girl'},
	          {name:'Joy', age:15, gender:'girl'},
	          {name:'Mary', age:28, gender:'girl'},
	          {name:'Peter', age:95, gender:'boy'},
	          {name:'Sebastian', age:50, gender:'boy'},
	          {name:'Erika', age:27, gender:'girl'},
	          {name:'Patrick', age:40, gender:'boy'},
	          {name:'Samantha', age:60, gender:'girl'}
	        ];
	      });
	    </file>
	    <file name="animations.css">
	      .example-animate-container {
	        background:white;
	        border:1px solid black;
	        list-style:none;
	        margin:0;
	        padding:0 10px;
	      }
	
	      .animate-repeat {
	        line-height:30px;
	        list-style:none;
	        box-sizing:border-box;
	      }
	
	      .animate-repeat.ng-move,
	      .animate-repeat.ng-enter,
	      .animate-repeat.ng-leave {
	        transition:all linear 0.5s;
	      }
	
	      .animate-repeat.ng-leave.ng-leave-active,
	      .animate-repeat.ng-move,
	      .animate-repeat.ng-enter {
	        opacity:0;
	        max-height:0;
	      }
	
	      .animate-repeat.ng-leave,
	      .animate-repeat.ng-move.ng-move-active,
	      .animate-repeat.ng-enter.ng-enter-active {
	        opacity:1;
	        max-height:30px;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var friends = element.all(by.repeater('friend in friends'));
	
	      it('should render initial data set', function() {
	        expect(friends.count()).toBe(10);
	        expect(friends.get(0).getText()).toEqual('[1] John who is 25 years old.');
	        expect(friends.get(1).getText()).toEqual('[2] Jessie who is 30 years old.');
	        expect(friends.last().getText()).toEqual('[10] Samantha who is 60 years old.');
	        expect(element(by.binding('friends.length')).getText())
	            .toMatch("I have 10 friends. They are:");
	      });
	
	       it('should update repeater when filter predicate changes', function() {
	         expect(friends.count()).toBe(10);
	
	         element(by.model('q')).sendKeys('ma');
	
	         expect(friends.count()).toBe(2);
	         expect(friends.get(0).getText()).toEqual('[1] Mary who is 28 years old.');
	         expect(friends.last().getText()).toEqual('[2] Samantha who is 60 years old.');
	       });
	      </file>
	    </example>
	 */var ngRepeatDirective=['$parse','$animate','$compile',function($parse,$animate,$compile){var NG_REMOVED='$$NG_REMOVED';var ngRepeatMinErr=minErr('ngRepeat');var updateScope=function updateScope(scope,index,valueIdentifier,value,keyIdentifier,key,arrayLength){// TODO(perf): generate setters to shave off ~40ms or 1-1.5%
	scope[valueIdentifier]=value;if(keyIdentifier)scope[keyIdentifier]=key;scope.$index=index;scope.$first=index===0;scope.$last=index===arrayLength-1;scope.$middle=!(scope.$first||scope.$last);// eslint-disable-next-line no-bitwise
	scope.$odd=!(scope.$even=(index&1)===0);};var getBlockStart=function getBlockStart(block){return block.clone[0];};var getBlockEnd=function getBlockEnd(block){return block.clone[block.clone.length-1];};return{restrict:'A',multiElement:true,transclude:'element',priority:1000,terminal:true,$$tlb:true,compile:function ngRepeatCompile($element,$attr){var expression=$attr.ngRepeat;var ngRepeatEndComment=$compile.$$createComment('end ngRepeat',expression);var match=expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);if(!match){throw ngRepeatMinErr('iexp','Expected expression in form of \'_item_ in _collection_[ track by _id_]\' but got \'{0}\'.',expression);}var lhs=match[1];var rhs=match[2];var aliasAs=match[3];var trackByExp=match[4];match=lhs.match(/^(?:(\s*[$\w]+)|\(\s*([$\w]+)\s*,\s*([$\w]+)\s*\))$/);if(!match){throw ngRepeatMinErr('iidexp','\'_item_\' in \'_item_ in _collection_\' should be an identifier or \'(_key_, _value_)\' expression, but got \'{0}\'.',lhs);}var valueIdentifier=match[3]||match[1];var keyIdentifier=match[2];if(aliasAs&&(!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(aliasAs)||/^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(aliasAs))){throw ngRepeatMinErr('badident','alias \'{0}\' is invalid --- must be a valid JS identifier which is not a reserved name.',aliasAs);}var trackByExpGetter,trackByIdExpFn,trackByIdArrayFn,trackByIdObjFn;var hashFnLocals={$id:hashKey};if(trackByExp){trackByExpGetter=$parse(trackByExp);}else{trackByIdArrayFn=function trackByIdArrayFn(key,value){return hashKey(value);};trackByIdObjFn=function trackByIdObjFn(key){return key;};}return function ngRepeatLink($scope,$element,$attr,ctrl,$transclude){if(trackByExpGetter){trackByIdExpFn=function trackByIdExpFn(key,value,index){// assign key, value, and $index to the locals so that they can be used in hash functions
	if(keyIdentifier)hashFnLocals[keyIdentifier]=key;hashFnLocals[valueIdentifier]=value;hashFnLocals.$index=index;return trackByExpGetter($scope,hashFnLocals);};}// Store a list of elements from previous run. This is a hash where key is the item from the
	// iterator, and the value is objects with following properties.
	//   - scope: bound scope
	//   - element: previous element.
	//   - index: position
	//
	// We are using no-proto object so that we don't need to guard against inherited props via
	// hasOwnProperty.
	var lastBlockMap=createMap();//watch props
	$scope.$watchCollection(rhs,function ngRepeatAction(collection){var index,length,previousNode=$element[0],// node that cloned nodes should be inserted after
	// initialized to the comment node anchor
	nextNode,// Same as lastBlockMap but it has the current state. It will become the
	// lastBlockMap on the next iteration.
	nextBlockMap=createMap(),collectionLength,key,value,// key/value of iteration
	trackById,trackByIdFn,collectionKeys,block,// last object information {scope, element, id}
	nextBlockOrder,elementsToRemove;if(aliasAs){$scope[aliasAs]=collection;}if(isArrayLike(collection)){collectionKeys=collection;trackByIdFn=trackByIdExpFn||trackByIdArrayFn;}else{trackByIdFn=trackByIdExpFn||trackByIdObjFn;// if object, extract keys, in enumeration order, unsorted
	collectionKeys=[];for(var itemKey in collection){if(hasOwnProperty.call(collection,itemKey)&&itemKey.charAt(0)!=='$'){collectionKeys.push(itemKey);}}}collectionLength=collectionKeys.length;nextBlockOrder=new Array(collectionLength);// locate existing items
	for(index=0;index<collectionLength;index++){key=collection===collectionKeys?index:collectionKeys[index];value=collection[key];trackById=trackByIdFn(key,value,index);if(lastBlockMap[trackById]){// found previously seen block
	block=lastBlockMap[trackById];delete lastBlockMap[trackById];nextBlockMap[trackById]=block;nextBlockOrder[index]=block;}else if(nextBlockMap[trackById]){// if collision detected. restore lastBlockMap and throw an error
	forEach(nextBlockOrder,function(block){if(block&&block.scope)lastBlockMap[block.id]=block;});throw ngRepeatMinErr('dupes','Duplicates in a repeater are not allowed. Use \'track by\' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}',expression,trackById,value);}else{// new never before seen block
	nextBlockOrder[index]={id:trackById,scope:undefined,clone:undefined};nextBlockMap[trackById]=true;}}// remove leftover items
	for(var blockKey in lastBlockMap){block=lastBlockMap[blockKey];elementsToRemove=getBlockNodes(block.clone);$animate.leave(elementsToRemove);if(elementsToRemove[0].parentNode){// if the element was not removed yet because of pending animation, mark it as deleted
	// so that we can ignore it later
	for(index=0,length=elementsToRemove.length;index<length;index++){elementsToRemove[index][NG_REMOVED]=true;}}block.scope.$destroy();}// we are not using forEach for perf reasons (trying to avoid #call)
	for(index=0;index<collectionLength;index++){key=collection===collectionKeys?index:collectionKeys[index];value=collection[key];block=nextBlockOrder[index];if(block.scope){// if we have already seen this object, then we need to reuse the
	// associated scope/element
	nextNode=previousNode;// skip nodes that are already pending removal via leave animation
	do{nextNode=nextNode.nextSibling;}while(nextNode&&nextNode[NG_REMOVED]);if(getBlockStart(block)!==nextNode){// existing item which got moved
	$animate.move(getBlockNodes(block.clone),null,previousNode);}previousNode=getBlockEnd(block);updateScope(block.scope,index,valueIdentifier,value,keyIdentifier,key,collectionLength);}else{// new item which we don't know about
	$transclude(function ngRepeatTransclude(clone,scope){block.scope=scope;// http://jsperf.com/clone-vs-createcomment
	var endNode=ngRepeatEndComment.cloneNode(false);clone[clone.length++]=endNode;$animate.enter(clone,null,previousNode);previousNode=endNode;// Note: We only need the first/last node of the cloned nodes.
	// However, we need to keep the reference to the jqlite wrapper as it might be changed later
	// by a directive with templateUrl when its template arrives.
	block.clone=clone;nextBlockMap[block.id]=block;updateScope(block.scope,index,valueIdentifier,value,keyIdentifier,key,collectionLength);});}}lastBlockMap=nextBlockMap;});};}};}];var NG_HIDE_CLASS='ng-hide';var NG_HIDE_IN_PROGRESS_CLASS='ng-hide-animate';/**
	 * @ngdoc directive
	 * @name ngShow
	 * @multiElement
	 *
	 * @description
	 * The `ngShow` directive shows or hides the given HTML element based on the expression provided to
	 * the `ngShow` attribute.
	 *
	 * The element is shown or hidden by removing or adding the `.ng-hide` CSS class onto the element.
	 * The `.ng-hide` CSS class is predefined in AngularJS and sets the display style to none (using an
	 * `!important` flag). For CSP mode please add `angular-csp.css` to your HTML file (see
	 * {@link ng.directive:ngCsp ngCsp}).
	 *
	 * ```html
	 * <!-- when $scope.myValue is truthy (element is visible) -->
	 * <div ng-show="myValue"></div>
	 *
	 * <!-- when $scope.myValue is falsy (element is hidden) -->
	 * <div ng-show="myValue" class="ng-hide"></div>
	 * ```
	 *
	 * When the `ngShow` expression evaluates to a falsy value then the `.ng-hide` CSS class is added
	 * to the class attribute on the element causing it to become hidden. When truthy, the `.ng-hide`
	 * CSS class is removed from the element causing the element not to appear hidden.
	 *
	 * ## Why is `!important` used?
	 *
	 * You may be wondering why `!important` is used for the `.ng-hide` CSS class. This is because the
	 * `.ng-hide` selector can be easily overridden by heavier selectors. For example, something as
	 * simple as changing the display style on a HTML list item would make hidden elements appear
	 * visible. This also becomes a bigger issue when dealing with CSS frameworks.
	 *
	 * By using `!important`, the show and hide behavior will work as expected despite any clash between
	 * CSS selector specificity (when `!important` isn't used with any conflicting styles). If a
	 * developer chooses to override the styling to change how to hide an element then it is just a
	 * matter of using `!important` in their own CSS code.
	 *
	 * ### Overriding `.ng-hide`
	 *
	 * By default, the `.ng-hide` class will style the element with `display: none !important`. If you
	 * wish to change the hide behavior with `ngShow`/`ngHide`, you can simply overwrite the styles for
	 * the `.ng-hide` CSS class. Note that the selector that needs to be used is actually
	 * `.ng-hide:not(.ng-hide-animate)` to cope with extra animation classes that can be added.
	 *
	 * ```css
	 * .ng-hide:not(.ng-hide-animate) {
	 *   /&#42; These are just alternative ways of hiding an element &#42;/
	 *   display: block!important;
	 *   position: absolute;
	 *   top: -9999px;
	 *   left: -9999px;
	 * }
	 * ```
	 *
	 * By default you don't need to override anything in CSS and the animations will work around the
	 * display style.
	 *
	 * ## A note about animations with `ngShow`
	 *
	 * Animations in `ngShow`/`ngHide` work with the show and hide events that are triggered when the
	 * directive expression is true and false. This system works like the animation system present with
	 * `ngClass` except that you must also include the `!important` flag to override the display
	 * property so that the elements are not actually hidden during the animation.
	 *
	 * ```css
	 * /&#42; A working example can be found at the bottom of this page. &#42;/
	 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
	 *   transition: all 0.5s linear;
	 * }
	 *
	 * .my-element.ng-hide-add { ... }
	 * .my-element.ng-hide-add.ng-hide-add-active { ... }
	 * .my-element.ng-hide-remove { ... }
	 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
	 * ```
	 *
	 * Keep in mind that, as of AngularJS version 1.3, there is no need to change the display property
	 * to block during animation states - ngAnimate will automatically handle the style toggling for you.
	 *
	 * @animations
	 * | Animation                                           | Occurs                                                                                                        |
	 * |-----------------------------------------------------|---------------------------------------------------------------------------------------------------------------|
	 * | {@link $animate#addClass addClass} `.ng-hide`       | After the `ngShow` expression evaluates to a non truthy value and just before the contents are set to hidden. |
	 * | {@link $animate#removeClass removeClass} `.ng-hide` | After the `ngShow` expression evaluates to a truthy value and just before contents are set to visible.        |
	 *
	 * @element ANY
	 * @param {expression} ngShow If the {@link guide/expression expression} is truthy/falsy then the
	 *                            element is shown/hidden respectively.
	 *
	 * @example
	 * A simple example, animating the element's opacity:
	 *
	  <example module="ngAnimate" deps="angular-animate.js" animations="true" name="ng-show-simple">
	    <file name="index.html">
	      Show: <input type="checkbox" ng-model="checked" aria-label="Toggle ngShow"><br />
	      <div class="check-element animate-show-hide" ng-show="checked">
	        I show up when your checkbox is checked.
	      </div>
	    </file>
	    <file name="animations.css">
	      .animate-show-hide.ng-hide {
	        opacity: 0;
	      }
	
	      .animate-show-hide.ng-hide-add,
	      .animate-show-hide.ng-hide-remove {
	        transition: all linear 0.5s;
	      }
	
	      .check-element {
	        border: 1px solid black;
	        opacity: 1;
	        padding: 10px;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      it('should check ngShow', function() {
	        var checkbox = element(by.model('checked'));
	        var checkElem = element(by.css('.check-element'));
	
	        expect(checkElem.isDisplayed()).toBe(false);
	        checkbox.click();
	        expect(checkElem.isDisplayed()).toBe(true);
	      });
	    </file>
	  </example>
	 *
	 * <hr />
	 * @example
	 * A more complex example, featuring different show/hide animations:
	 *
	  <example module="ngAnimate" deps="angular-animate.js" animations="true" name="ng-show-complex">
	    <file name="index.html">
	      Show: <input type="checkbox" ng-model="checked" aria-label="Toggle ngShow"><br />
	      <div class="check-element funky-show-hide" ng-show="checked">
	        I show up when your checkbox is checked.
	      </div>
	    </file>
	    <file name="animations.css">
	      body {
	        overflow: hidden;
	        perspective: 1000px;
	      }
	
	      .funky-show-hide.ng-hide-add {
	        transform: rotateZ(0);
	        transform-origin: right;
	        transition: all 0.5s ease-in-out;
	      }
	
	      .funky-show-hide.ng-hide-add.ng-hide-add-active {
	        transform: rotateZ(-135deg);
	      }
	
	      .funky-show-hide.ng-hide-remove {
	        transform: rotateY(90deg);
	        transform-origin: left;
	        transition: all 0.5s ease;
	      }
	
	      .funky-show-hide.ng-hide-remove.ng-hide-remove-active {
	        transform: rotateY(0);
	      }
	
	      .check-element {
	        border: 1px solid black;
	        opacity: 1;
	        padding: 10px;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      it('should check ngShow', function() {
	        var checkbox = element(by.model('checked'));
	        var checkElem = element(by.css('.check-element'));
	
	        expect(checkElem.isDisplayed()).toBe(false);
	        checkbox.click();
	        expect(checkElem.isDisplayed()).toBe(true);
	      });
	    </file>
	  </example>
	 */var ngShowDirective=['$animate',function($animate){return{restrict:'A',multiElement:true,link:function link(scope,element,attr){scope.$watch(attr.ngShow,function ngShowWatchAction(value){// we're adding a temporary, animation-specific class for ng-hide since this way
	// we can control when the element is actually displayed on screen without having
	// to have a global/greedy CSS selector that breaks when other animations are run.
	// Read: https://github.com/angular/angular.js/issues/9103#issuecomment-58335845
	$animate[value?'removeClass':'addClass'](element,NG_HIDE_CLASS,{tempClasses:NG_HIDE_IN_PROGRESS_CLASS});});}};}];/**
	 * @ngdoc directive
	 * @name ngHide
	 * @multiElement
	 *
	 * @description
	 * The `ngHide` directive shows or hides the given HTML element based on the expression provided to
	 * the `ngHide` attribute.
	 *
	 * The element is shown or hidden by removing or adding the `.ng-hide` CSS class onto the element.
	 * The `.ng-hide` CSS class is predefined in AngularJS and sets the display style to none (using an
	 * `!important` flag). For CSP mode please add `angular-csp.css` to your HTML file (see
	 * {@link ng.directive:ngCsp ngCsp}).
	 *
	 * ```html
	 * <!-- when $scope.myValue is truthy (element is hidden) -->
	 * <div ng-hide="myValue" class="ng-hide"></div>
	 *
	 * <!-- when $scope.myValue is falsy (element is visible) -->
	 * <div ng-hide="myValue"></div>
	 * ```
	 *
	 * When the `ngHide` expression evaluates to a truthy value then the `.ng-hide` CSS class is added
	 * to the class attribute on the element causing it to become hidden. When falsy, the `.ng-hide`
	 * CSS class is removed from the element causing the element not to appear hidden.
	 *
	 * ## Why is `!important` used?
	 *
	 * You may be wondering why `!important` is used for the `.ng-hide` CSS class. This is because the
	 * `.ng-hide` selector can be easily overridden by heavier selectors. For example, something as
	 * simple as changing the display style on a HTML list item would make hidden elements appear
	 * visible. This also becomes a bigger issue when dealing with CSS frameworks.
	 *
	 * By using `!important`, the show and hide behavior will work as expected despite any clash between
	 * CSS selector specificity (when `!important` isn't used with any conflicting styles). If a
	 * developer chooses to override the styling to change how to hide an element then it is just a
	 * matter of using `!important` in their own CSS code.
	 *
	 * ### Overriding `.ng-hide`
	 *
	 * By default, the `.ng-hide` class will style the element with `display: none !important`. If you
	 * wish to change the hide behavior with `ngShow`/`ngHide`, you can simply overwrite the styles for
	 * the `.ng-hide` CSS class. Note that the selector that needs to be used is actually
	 * `.ng-hide:not(.ng-hide-animate)` to cope with extra animation classes that can be added.
	 *
	 * ```css
	 * .ng-hide:not(.ng-hide-animate) {
	 *   /&#42; These are just alternative ways of hiding an element &#42;/
	 *   display: block!important;
	 *   position: absolute;
	 *   top: -9999px;
	 *   left: -9999px;
	 * }
	 * ```
	 *
	 * By default you don't need to override in CSS anything and the animations will work around the
	 * display style.
	 *
	 * ## A note about animations with `ngHide`
	 *
	 * Animations in `ngShow`/`ngHide` work with the show and hide events that are triggered when the
	 * directive expression is true and false. This system works like the animation system present with
	 * `ngClass` except that you must also include the `!important` flag to override the display
	 * property so that the elements are not actually hidden during the animation.
	 *
	 * ```css
	 * /&#42; A working example can be found at the bottom of this page. &#42;/
	 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
	 *   transition: all 0.5s linear;
	 * }
	 *
	 * .my-element.ng-hide-add { ... }
	 * .my-element.ng-hide-add.ng-hide-add-active { ... }
	 * .my-element.ng-hide-remove { ... }
	 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
	 * ```
	 *
	 * Keep in mind that, as of AngularJS version 1.3, there is no need to change the display property
	 * to block during animation states - ngAnimate will automatically handle the style toggling for you.
	 *
	 * @animations
	 * | Animation                                           | Occurs                                                                                                     |
	 * |-----------------------------------------------------|------------------------------------------------------------------------------------------------------------|
	 * | {@link $animate#addClass addClass} `.ng-hide`       | After the `ngHide` expression evaluates to a truthy value and just before the contents are set to hidden.  |
	 * | {@link $animate#removeClass removeClass} `.ng-hide` | After the `ngHide` expression evaluates to a non truthy value and just before contents are set to visible. |
	 *
	 *
	 * @element ANY
	 * @param {expression} ngHide If the {@link guide/expression expression} is truthy/falsy then the
	 *                            element is hidden/shown respectively.
	 *
	 * @example
	 * A simple example, animating the element's opacity:
	 *
	  <example module="ngAnimate" deps="angular-animate.js" animations="true" name="ng-hide-simple">
	    <file name="index.html">
	      Hide: <input type="checkbox" ng-model="checked" aria-label="Toggle ngHide"><br />
	      <div class="check-element animate-show-hide" ng-hide="checked">
	        I hide when your checkbox is checked.
	      </div>
	    </file>
	    <file name="animations.css">
	      .animate-show-hide.ng-hide {
	        opacity: 0;
	      }
	
	      .animate-show-hide.ng-hide-add,
	      .animate-show-hide.ng-hide-remove {
	        transition: all linear 0.5s;
	      }
	
	      .check-element {
	        border: 1px solid black;
	        opacity: 1;
	        padding: 10px;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      it('should check ngHide', function() {
	        var checkbox = element(by.model('checked'));
	        var checkElem = element(by.css('.check-element'));
	
	        expect(checkElem.isDisplayed()).toBe(true);
	        checkbox.click();
	        expect(checkElem.isDisplayed()).toBe(false);
	      });
	    </file>
	  </example>
	 *
	 * <hr />
	 * @example
	 * A more complex example, featuring different show/hide animations:
	 *
	  <example module="ngAnimate" deps="angular-animate.js" animations="true" name="ng-hide-complex">
	    <file name="index.html">
	      Hide: <input type="checkbox" ng-model="checked" aria-label="Toggle ngHide"><br />
	      <div class="check-element funky-show-hide" ng-hide="checked">
	        I hide when your checkbox is checked.
	      </div>
	    </file>
	    <file name="animations.css">
	      body {
	        overflow: hidden;
	        perspective: 1000px;
	      }
	
	      .funky-show-hide.ng-hide-add {
	        transform: rotateZ(0);
	        transform-origin: right;
	        transition: all 0.5s ease-in-out;
	      }
	
	      .funky-show-hide.ng-hide-add.ng-hide-add-active {
	        transform: rotateZ(-135deg);
	      }
	
	      .funky-show-hide.ng-hide-remove {
	        transform: rotateY(90deg);
	        transform-origin: left;
	        transition: all 0.5s ease;
	      }
	
	      .funky-show-hide.ng-hide-remove.ng-hide-remove-active {
	        transform: rotateY(0);
	      }
	
	      .check-element {
	        border: 1px solid black;
	        opacity: 1;
	        padding: 10px;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      it('should check ngHide', function() {
	        var checkbox = element(by.model('checked'));
	        var checkElem = element(by.css('.check-element'));
	
	        expect(checkElem.isDisplayed()).toBe(true);
	        checkbox.click();
	        expect(checkElem.isDisplayed()).toBe(false);
	      });
	    </file>
	  </example>
	 */var ngHideDirective=['$animate',function($animate){return{restrict:'A',multiElement:true,link:function link(scope,element,attr){scope.$watch(attr.ngHide,function ngHideWatchAction(value){// The comment inside of the ngShowDirective explains why we add and
	// remove a temporary class for the show/hide animation
	$animate[value?'addClass':'removeClass'](element,NG_HIDE_CLASS,{tempClasses:NG_HIDE_IN_PROGRESS_CLASS});});}};}];/**
	 * @ngdoc directive
	 * @name ngStyle
	 * @restrict AC
	 *
	 * @description
	 * The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.
	 *
	 * @knownIssue
	 * You should not use {@link guide/interpolation interpolation} in the value of the `style`
	 * attribute, when using the `ngStyle` directive on the same element.
	 * See {@link guide/interpolation#known-issues here} for more info.
	 *
	 * @element ANY
	 * @param {expression} ngStyle
	 *
	 * {@link guide/expression Expression} which evals to an
	 * object whose keys are CSS style names and values are corresponding values for those CSS
	 * keys.
	 *
	 * Since some CSS style names are not valid keys for an object, they must be quoted.
	 * See the 'background-color' style in the example below.
	 *
	 * @example
	   <example name="ng-style">
	     <file name="index.html">
	        <input type="button" value="set color" ng-click="myStyle={color:'red'}">
	        <input type="button" value="set background" ng-click="myStyle={'background-color':'blue'}">
	        <input type="button" value="clear" ng-click="myStyle={}">
	        <br/>
	        <span ng-style="myStyle">Sample Text</span>
	        <pre>myStyle={{myStyle}}</pre>
	     </file>
	     <file name="style.css">
	       span {
	         color: black;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       var colorSpan = element(by.css('span'));
	
	       it('should check ng-style', function() {
	         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
	         element(by.css('input[value=\'set color\']')).click();
	         expect(colorSpan.getCssValue('color')).toBe('rgba(255, 0, 0, 1)');
	         element(by.css('input[value=clear]')).click();
	         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
	       });
	     </file>
	   </example>
	 */var ngStyleDirective=ngDirective(function(scope,element,attr){scope.$watch(attr.ngStyle,function ngStyleWatchAction(newStyles,oldStyles){if(oldStyles&&newStyles!==oldStyles){forEach(oldStyles,function(val,style){element.css(style,'');});}if(newStyles)element.css(newStyles);},true);});/**
	 * @ngdoc directive
	 * @name ngSwitch
	 * @restrict EA
	 *
	 * @description
	 * The `ngSwitch` directive is used to conditionally swap DOM structure on your template based on a scope expression.
	 * Elements within `ngSwitch` but without `ngSwitchWhen` or `ngSwitchDefault` directives will be preserved at the location
	 * as specified in the template.
	 *
	 * The directive itself works similar to ngInclude, however, instead of downloading template code (or loading it
	 * from the template cache), `ngSwitch` simply chooses one of the nested elements and makes it visible based on which element
	 * matches the value obtained from the evaluated expression. In other words, you define a container element
	 * (where you place the directive), place an expression on the **`on="..."` attribute**
	 * (or the **`ng-switch="..."` attribute**), define any inner elements inside of the directive and place
	 * a when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on
	 * expression is evaluated. If a matching expression is not found via a when attribute then an element with the default
	 * attribute is displayed.
	 *
	 * <div class="alert alert-info">
	 * Be aware that the attribute values to match against cannot be expressions. They are interpreted
	 * as literal string values to match against.
	 * For example, **`ng-switch-when="someVal"`** will match against the string `"someVal"` not against the
	 * value of the expression `$scope.someVal`.
	 * </div>
	
	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link ng.$animate#enter enter}  | after the ngSwitch contents change and the matched child element is placed inside the container |
	 * | {@link ng.$animate#leave leave}  | after the ngSwitch contents change and just before the former contents are removed from the DOM |
	 *
	 * @usage
	 *
	 * ```
	 * <ANY ng-switch="expression">
	 *   <ANY ng-switch-when="matchValue1">...</ANY>
	 *   <ANY ng-switch-when="matchValue2">...</ANY>
	 *   <ANY ng-switch-default>...</ANY>
	 * </ANY>
	 * ```
	 *
	 *
	 * @scope
	 * @priority 1200
	 * @param {*} ngSwitch|on expression to match against <code>ng-switch-when</code>.
	 * On child elements add:
	 *
	 * * `ngSwitchWhen`: the case statement to match against. If match then this
	 *   case will be displayed. If the same match appears multiple times, all the
	 *   elements will be displayed. It is possible to associate multiple values to
	 *   the same `ngSwitchWhen` by defining the optional attribute
	 *   `ngSwitchWhenSeparator`. The separator will be used to split the value of
	 *   the `ngSwitchWhen` attribute into multiple tokens, and the element will show
	 *   if any of the `ngSwitch` evaluates to any of these tokens.
	 * * `ngSwitchDefault`: the default case when no other case match. If there
	 *   are multiple default cases, all of them will be displayed when no other
	 *   case match.
	 *
	 *
	 * @example
	  <example module="switchExample" deps="angular-animate.js" animations="true" name="ng-switch">
	    <file name="index.html">
	      <div ng-controller="ExampleController">
	        <select ng-model="selection" ng-options="item for item in items">
	        </select>
	        <code>selection={{selection}}</code>
	        <hr/>
	        <div class="animate-switch-container"
	          ng-switch on="selection">
	            <div class="animate-switch" ng-switch-when="settings|options" ng-switch-when-separator="|">Settings Div</div>
	            <div class="animate-switch" ng-switch-when="home">Home Span</div>
	            <div class="animate-switch" ng-switch-default>default</div>
	        </div>
	      </div>
	    </file>
	    <file name="script.js">
	      angular.module('switchExample', ['ngAnimate'])
	        .controller('ExampleController', ['$scope', function($scope) {
	          $scope.items = ['settings', 'home', 'options', 'other'];
	          $scope.selection = $scope.items[0];
	        }]);
	    </file>
	    <file name="animations.css">
	      .animate-switch-container {
	        position:relative;
	        background:white;
	        border:1px solid black;
	        height:40px;
	        overflow:hidden;
	      }
	
	      .animate-switch {
	        padding:10px;
	      }
	
	      .animate-switch.ng-animate {
	        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
	
	        position:absolute;
	        top:0;
	        left:0;
	        right:0;
	        bottom:0;
	      }
	
	      .animate-switch.ng-leave.ng-leave-active,
	      .animate-switch.ng-enter {
	        top:-50px;
	      }
	      .animate-switch.ng-leave,
	      .animate-switch.ng-enter.ng-enter-active {
	        top:0;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var switchElem = element(by.css('[ng-switch]'));
	      var select = element(by.model('selection'));
	
	      it('should start in settings', function() {
	        expect(switchElem.getText()).toMatch(/Settings Div/);
	      });
	      it('should change to home', function() {
	        select.all(by.css('option')).get(1).click();
	        expect(switchElem.getText()).toMatch(/Home Span/);
	      });
	      it('should change to settings via "options"', function() {
	        select.all(by.css('option')).get(2).click();
	        expect(switchElem.getText()).toMatch(/Settings Div/);
	      });
	      it('should select default', function() {
	        select.all(by.css('option')).get(3).click();
	        expect(switchElem.getText()).toMatch(/default/);
	      });
	    </file>
	  </example>
	 */var ngSwitchDirective=['$animate','$compile',function($animate,$compile){return{require:'ngSwitch',// asks for $scope to fool the BC controller module
	controller:['$scope',function NgSwitchController(){this.cases={};}],link:function link(scope,element,attr,ngSwitchController){var watchExpr=attr.ngSwitch||attr.on,selectedTranscludes=[],selectedElements=[],previousLeaveAnimations=[],selectedScopes=[];var spliceFactory=function spliceFactory(array,index){return function(response){if(response!==false)array.splice(index,1);};};scope.$watch(watchExpr,function ngSwitchWatchAction(value){var i,ii;// Start with the last, in case the array is modified during the loop
	while(previousLeaveAnimations.length){$animate.cancel(previousLeaveAnimations.pop());}for(i=0,ii=selectedScopes.length;i<ii;++i){var selected=getBlockNodes(selectedElements[i].clone);selectedScopes[i].$destroy();var runner=previousLeaveAnimations[i]=$animate.leave(selected);runner.done(spliceFactory(previousLeaveAnimations,i));}selectedElements.length=0;selectedScopes.length=0;if(selectedTranscludes=ngSwitchController.cases['!'+value]||ngSwitchController.cases['?']){forEach(selectedTranscludes,function(selectedTransclude){selectedTransclude.transclude(function(caseElement,selectedScope){selectedScopes.push(selectedScope);var anchor=selectedTransclude.element;caseElement[caseElement.length++]=$compile.$$createComment('end ngSwitchWhen');var block={clone:caseElement};selectedElements.push(block);$animate.enter(caseElement,anchor.parent(),anchor);});});}});}};}];var ngSwitchWhenDirective=ngDirective({transclude:'element',priority:1200,require:'^ngSwitch',multiElement:true,link:function link(scope,element,attrs,ctrl,$transclude){var cases=attrs.ngSwitchWhen.split(attrs.ngSwitchWhenSeparator).sort().filter(// Filter duplicate cases
	function(element,index,array){return array[index-1]!==element;});forEach(cases,function(whenCase){ctrl.cases['!'+whenCase]=ctrl.cases['!'+whenCase]||[];ctrl.cases['!'+whenCase].push({transclude:$transclude,element:element});});}});var ngSwitchDefaultDirective=ngDirective({transclude:'element',priority:1200,require:'^ngSwitch',multiElement:true,link:function link(scope,element,attr,ctrl,$transclude){ctrl.cases['?']=ctrl.cases['?']||[];ctrl.cases['?'].push({transclude:$transclude,element:element});}});/**
	 * @ngdoc directive
	 * @name ngTransclude
	 * @restrict EAC
	 *
	 * @description
	 * Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.
	 *
	 * You can specify that you want to insert a named transclusion slot, instead of the default slot, by providing the slot name
	 * as the value of the `ng-transclude` or `ng-transclude-slot` attribute.
	 *
	 * If the transcluded content is not empty (i.e. contains one or more DOM nodes, including whitespace text nodes), any existing
	 * content of this element will be removed before the transcluded content is inserted.
	 * If the transcluded content is empty (or only whitespace), the existing content is left intact. This lets you provide fallback
	 * content in the case that no transcluded content is provided.
	 *
	 * @element ANY
	 *
	 * @param {string} ngTransclude|ngTranscludeSlot the name of the slot to insert at this point. If this is not provided, is empty
	 *                                               or its value is the same as the name of the attribute then the default slot is used.
	 *
	 * @example
	 * ### Basic transclusion
	 * This example demonstrates basic transclusion of content into a component directive.
	 * <example name="simpleTranscludeExample" module="transcludeExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('transcludeExample', [])
	 *        .directive('pane', function(){
	 *           return {
	 *             restrict: 'E',
	 *             transclude: true,
	 *             scope: { title:'@' },
	 *             template: '<div style="border: 1px solid black;">' +
	 *                         '<div style="background-color: gray">{{title}}</div>' +
	 *                         '<ng-transclude></ng-transclude>' +
	 *                       '</div>'
	 *           };
	 *       })
	 *       .controller('ExampleController', ['$scope', function($scope) {
	 *         $scope.title = 'Lorem Ipsum';
	 *         $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';
	 *       }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <input ng-model="title" aria-label="title"> <br/>
	 *       <textarea ng-model="text" aria-label="text"></textarea> <br/>
	 *       <pane title="{{title}}"><span>{{text}}</span></pane>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *      it('should have transcluded', function() {
	 *        var titleElement = element(by.model('title'));
	 *        titleElement.clear();
	 *        titleElement.sendKeys('TITLE');
	 *        var textElement = element(by.model('text'));
	 *        textElement.clear();
	 *        textElement.sendKeys('TEXT');
	 *        expect(element(by.binding('title')).getText()).toEqual('TITLE');
	 *        expect(element(by.binding('text')).getText()).toEqual('TEXT');
	 *      });
	 *   </file>
	 * </example>
	 *
	 * @example
	 * ### Transclude fallback content
	 * This example shows how to use `NgTransclude` with fallback content, that
	 * is displayed if no transcluded content is provided.
	 *
	 * <example module="transcludeFallbackContentExample" name="ng-transclude">
	 * <file name="index.html">
	 * <script>
	 * angular.module('transcludeFallbackContentExample', [])
	 * .directive('myButton', function(){
	 *             return {
	 *               restrict: 'E',
	 *               transclude: true,
	 *               scope: true,
	 *               template: '<button style="cursor: pointer;">' +
	 *                           '<ng-transclude>' +
	 *                             '<b style="color: red;">Button1</b>' +
	 *                           '</ng-transclude>' +
	 *                         '</button>'
	 *             };
	 *         });
	 * </script>
	 * <!-- fallback button content -->
	 * <my-button id="fallback"></my-button>
	 * <!-- modified button content -->
	 * <my-button id="modified">
	 *   <i style="color: green;">Button2</i>
	 * </my-button>
	 * </file>
	 * <file name="protractor.js" type="protractor">
	 * it('should have different transclude element content', function() {
	 *          expect(element(by.id('fallback')).getText()).toBe('Button1');
	 *          expect(element(by.id('modified')).getText()).toBe('Button2');
	 *        });
	 * </file>
	 * </example>
	 *
	 * @example
	 * ### Multi-slot transclusion
	 * This example demonstrates using multi-slot transclusion in a component directive.
	 * <example name="multiSlotTranscludeExample" module="multiSlotTranscludeExample">
	 *   <file name="index.html">
	 *    <style>
	 *      .title, .footer {
	 *        background-color: gray
	 *      }
	 *    </style>
	 *    <div ng-controller="ExampleController">
	 *      <input ng-model="title" aria-label="title"> <br/>
	 *      <textarea ng-model="text" aria-label="text"></textarea> <br/>
	 *      <pane>
	 *        <pane-title><a ng-href="{{link}}">{{title}}</a></pane-title>
	 *        <pane-body><p>{{text}}</p></pane-body>
	 *      </pane>
	 *    </div>
	 *   </file>
	 *   <file name="app.js">
	 *    angular.module('multiSlotTranscludeExample', [])
	 *     .directive('pane', function() {
	 *        return {
	 *          restrict: 'E',
	 *          transclude: {
	 *            'title': '?paneTitle',
	 *            'body': 'paneBody',
	 *            'footer': '?paneFooter'
	 *          },
	 *          template: '<div style="border: 1px solid black;">' +
	 *                      '<div class="title" ng-transclude="title">Fallback Title</div>' +
	 *                      '<div ng-transclude="body"></div>' +
	 *                      '<div class="footer" ng-transclude="footer">Fallback Footer</div>' +
	 *                    '</div>'
	 *        };
	 *    })
	 *    .controller('ExampleController', ['$scope', function($scope) {
	 *      $scope.title = 'Lorem Ipsum';
	 *      $scope.link = 'https://google.com';
	 *      $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';
	 *    }]);
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *      it('should have transcluded the title and the body', function() {
	 *        var titleElement = element(by.model('title'));
	 *        titleElement.clear();
	 *        titleElement.sendKeys('TITLE');
	 *        var textElement = element(by.model('text'));
	 *        textElement.clear();
	 *        textElement.sendKeys('TEXT');
	 *        expect(element(by.css('.title')).getText()).toEqual('TITLE');
	 *        expect(element(by.binding('text')).getText()).toEqual('TEXT');
	 *        expect(element(by.css('.footer')).getText()).toEqual('Fallback Footer');
	 *      });
	 *   </file>
	 * </example>
	 */var ngTranscludeMinErr=minErr('ngTransclude');var ngTranscludeDirective=['$compile',function($compile){return{restrict:'EAC',terminal:true,compile:function ngTranscludeCompile(tElement){// Remove and cache any original content to act as a fallback
	var fallbackLinkFn=$compile(tElement.contents());tElement.empty();return function ngTranscludePostLink($scope,$element,$attrs,controller,$transclude){if(!$transclude){throw ngTranscludeMinErr('orphan','Illegal use of ngTransclude directive in the template! '+'No parent directive that requires a transclusion found. '+'Element: {0}',startingTag($element));}// If the attribute is of the form: `ng-transclude="ng-transclude"` then treat it like the default
	if($attrs.ngTransclude===$attrs.$attr.ngTransclude){$attrs.ngTransclude='';}var slotName=$attrs.ngTransclude||$attrs.ngTranscludeSlot;// If the slot is required and no transclusion content is provided then this call will throw an error
	$transclude(ngTranscludeCloneAttachFn,null,slotName);// If the slot is optional and no transclusion content is provided then use the fallback content
	if(slotName&&!$transclude.isSlotFilled(slotName)){useFallbackContent();}function ngTranscludeCloneAttachFn(clone,transcludedScope){if(clone.length&&notWhitespace(clone)){$element.append(clone);}else{useFallbackContent();// There is nothing linked against the transcluded scope since no content was available,
	// so it should be safe to clean up the generated scope.
	transcludedScope.$destroy();}}function useFallbackContent(){// Since this is the fallback content rather than the transcluded content,
	// we link against the scope of this directive rather than the transcluded scope
	fallbackLinkFn($scope,function(clone){$element.append(clone);});}function notWhitespace(nodes){for(var i=0,ii=nodes.length;i<ii;i++){var node=nodes[i];if(node.nodeType!==NODE_TYPE_TEXT||node.nodeValue.trim()){return true;}}}};}};}];/**
	 * @ngdoc directive
	 * @name script
	 * @restrict E
	 *
	 * @description
	 * Load the content of a `<script>` element into {@link ng.$templateCache `$templateCache`}, so that the
	 * template can be used by {@link ng.directive:ngInclude `ngInclude`},
	 * {@link ngRoute.directive:ngView `ngView`}, or {@link guide/directive directives}. The type of the
	 * `<script>` element must be specified as `text/ng-template`, and a cache name for the template must be
	 * assigned through the element's `id`, which can then be used as a directive's `templateUrl`.
	 *
	 * @param {string} type Must be set to `'text/ng-template'`.
	 * @param {string} id Cache name of the template.
	 *
	 * @example
	  <example  name="script-tag">
	    <file name="index.html">
	      <script type="text/ng-template" id="/tpl.html">
	        Content of the template.
	      </script>
	
	      <a ng-click="currentTpl='/tpl.html'" id="tpl-link">Load inlined template</a>
	      <div id="tpl-content" ng-include src="currentTpl"></div>
	    </file>
	    <file name="protractor.js" type="protractor">
	      it('should load template defined inside script tag', function() {
	        element(by.css('#tpl-link')).click();
	        expect(element(by.css('#tpl-content')).getText()).toMatch(/Content of the template/);
	      });
	    </file>
	  </example>
	 */var scriptDirective=['$templateCache',function($templateCache){return{restrict:'E',terminal:true,compile:function compile(element,attr){if(attr.type==='text/ng-template'){var templateUrl=attr.id,text=element[0].text;$templateCache.put(templateUrl,text);}}};}];/* exported selectDirective, optionDirective */var noopNgModelController={$setViewValue:noop,$render:noop};function setOptionSelectedStatus(optionEl,value){optionEl.prop('selected',value);// needed for IE
	/**
	   * When unselecting an option, setting the property to null / false should be enough
	   * However, screenreaders might react to the selected attribute instead, see
	   * https://github.com/angular/angular.js/issues/14419
	   * Note: "selected" is a boolean attr and will be removed when the "value" arg in attr() is false
	   * or null
	   */optionEl.attr('selected',value);}/**
	 * @ngdoc type
	 * @name  select.SelectController
	 * @description
	 * The controller for the `<select>` directive. This provides support for reading
	 * and writing the selected value(s) of the control and also coordinates dynamically
	 * added `<option>` elements, perhaps by an `ngRepeat` directive.
	 */var SelectController=['$element','$scope',/** @this */function($element,$scope){var self=this,optionsMap=new NgMap();self.selectValueMap={};// Keys are the hashed values, values the original values
	// If the ngModel doesn't get provided then provide a dummy noop version to prevent errors
	self.ngModelCtrl=noopNgModelController;self.multiple=false;// The "unknown" option is one that is prepended to the list if the viewValue
	// does not match any of the options. When it is rendered the value of the unknown
	// option is '? XXX ?' where XXX is the hashKey of the value that is not known.
	//
	// We can't just jqLite('<option>') since jqLite is not smart enough
	// to create it in <select> and IE barfs otherwise.
	self.unknownOption=jqLite(window.document.createElement('option'));// The empty option is an option with the value '' that te application developer can
	// provide inside the select. When the model changes to a value that doesn't match an option,
	// it is selected - so if an empty option is provided, no unknown option is generated.
	// However, the empty option is not removed when the model matches an option. It is always selectable
	// and indicates that a "null" selection has been made.
	self.hasEmptyOption=false;self.emptyOption=undefined;self.renderUnknownOption=function(val){var unknownVal=self.generateUnknownOptionValue(val);self.unknownOption.val(unknownVal);$element.prepend(self.unknownOption);setOptionSelectedStatus(self.unknownOption,true);$element.val(unknownVal);};self.updateUnknownOption=function(val){var unknownVal=self.generateUnknownOptionValue(val);self.unknownOption.val(unknownVal);setOptionSelectedStatus(self.unknownOption,true);$element.val(unknownVal);};self.generateUnknownOptionValue=function(val){return'? '+hashKey(val)+' ?';};self.removeUnknownOption=function(){if(self.unknownOption.parent())self.unknownOption.remove();};self.selectEmptyOption=function(){if(self.emptyOption){$element.val('');setOptionSelectedStatus(self.emptyOption,true);}};self.unselectEmptyOption=function(){if(self.hasEmptyOption){self.emptyOption.removeAttr('selected');}};$scope.$on('$destroy',function(){// disable unknown option so that we don't do work when the whole select is being destroyed
	self.renderUnknownOption=noop;});// Read the value of the select control, the implementation of this changes depending
	// upon whether the select can have multiple values and whether ngOptions is at work.
	self.readValue=function readSingleValue(){var val=$element.val();// ngValue added option values are stored in the selectValueMap, normal interpolations are not
	var realVal=val in self.selectValueMap?self.selectValueMap[val]:val;if(self.hasOption(realVal)){return realVal;}return null;};// Write the value to the select control, the implementation of this changes depending
	// upon whether the select can have multiple values and whether ngOptions is at work.
	self.writeValue=function writeSingleValue(value){// Make sure to remove the selected attribute from the previously selected option
	// Otherwise, screen readers might get confused
	var currentlySelectedOption=$element[0].options[$element[0].selectedIndex];if(currentlySelectedOption)setOptionSelectedStatus(jqLite(currentlySelectedOption),false);if(self.hasOption(value)){self.removeUnknownOption();var hashedVal=hashKey(value);$element.val(hashedVal in self.selectValueMap?hashedVal:value);// Set selected attribute and property on selected option for screen readers
	var selectedOption=$element[0].options[$element[0].selectedIndex];setOptionSelectedStatus(jqLite(selectedOption),true);}else{if(value==null&&self.emptyOption){self.removeUnknownOption();self.selectEmptyOption();}else if(self.unknownOption.parent().length){self.updateUnknownOption(value);}else{self.renderUnknownOption(value);}}};// Tell the select control that an option, with the given value, has been added
	self.addOption=function(value,element){// Skip comment nodes, as they only pollute the `optionsMap`
	if(element[0].nodeType===NODE_TYPE_COMMENT)return;assertNotHasOwnProperty(value,'"option value"');if(value===''){self.hasEmptyOption=true;self.emptyOption=element;}var count=optionsMap.get(value)||0;optionsMap.set(value,count+1);// Only render at the end of a digest. This improves render performance when many options
	// are added during a digest and ensures all relevant options are correctly marked as selected
	scheduleRender();};// Tell the select control that an option, with the given value, has been removed
	self.removeOption=function(value){var count=optionsMap.get(value);if(count){if(count===1){optionsMap.delete(value);if(value===''){self.hasEmptyOption=false;self.emptyOption=undefined;}}else{optionsMap.set(value,count-1);}}};// Check whether the select control has an option matching the given value
	self.hasOption=function(value){return!!optionsMap.get(value);};var renderScheduled=false;function scheduleRender(){if(renderScheduled)return;renderScheduled=true;$scope.$$postDigest(function(){renderScheduled=false;self.ngModelCtrl.$render();});}var updateScheduled=false;function scheduleViewValueUpdate(renderAfter){if(updateScheduled)return;updateScheduled=true;$scope.$$postDigest(function(){if($scope.$$destroyed)return;updateScheduled=false;self.ngModelCtrl.$setViewValue(self.readValue());if(renderAfter)self.ngModelCtrl.$render();});}self.registerOption=function(optionScope,optionElement,optionAttrs,interpolateValueFn,interpolateTextFn){if(optionAttrs.$attr.ngValue){// The value attribute is set by ngValue
	var oldVal,hashedVal=NaN;optionAttrs.$observe('value',function valueAttributeObserveAction(newVal){var removal;var previouslySelected=optionElement.prop('selected');if(isDefined(hashedVal)){self.removeOption(oldVal);delete self.selectValueMap[hashedVal];removal=true;}hashedVal=hashKey(newVal);oldVal=newVal;self.selectValueMap[hashedVal]=newVal;self.addOption(newVal,optionElement);// Set the attribute directly instead of using optionAttrs.$set - this stops the observer
	// from firing a second time. Other $observers on value will also get the result of the
	// ngValue expression, not the hashed value
	optionElement.attr('value',hashedVal);if(removal&&previouslySelected){scheduleViewValueUpdate();}});}else if(interpolateValueFn){// The value attribute is interpolated
	optionAttrs.$observe('value',function valueAttributeObserveAction(newVal){// This method is overwritten in ngOptions and has side-effects!
	self.readValue();var removal;var previouslySelected=optionElement.prop('selected');if(isDefined(oldVal)){self.removeOption(oldVal);removal=true;}oldVal=newVal;self.addOption(newVal,optionElement);if(removal&&previouslySelected){scheduleViewValueUpdate();}});}else if(interpolateTextFn){// The text content is interpolated
	optionScope.$watch(interpolateTextFn,function interpolateWatchAction(newVal,oldVal){optionAttrs.$set('value',newVal);var previouslySelected=optionElement.prop('selected');if(oldVal!==newVal){self.removeOption(oldVal);}self.addOption(newVal,optionElement);if(oldVal&&previouslySelected){scheduleViewValueUpdate();}});}else{// The value attribute is static
	self.addOption(optionAttrs.value,optionElement);}optionAttrs.$observe('disabled',function(newVal){// Since model updates will also select disabled options (like ngOptions),
	// we only have to handle options becoming disabled, not enabled
	if(newVal==='true'||newVal&&optionElement.prop('selected')){if(self.multiple){scheduleViewValueUpdate(true);}else{self.ngModelCtrl.$setViewValue(null);self.ngModelCtrl.$render();}}});optionElement.on('$destroy',function(){var currentValue=self.readValue();var removeValue=optionAttrs.value;self.removeOption(removeValue);scheduleRender();if(self.multiple&&currentValue&&currentValue.indexOf(removeValue)!==-1||currentValue===removeValue){// When multiple (selected) options are destroyed at the same time, we don't want
	// to run a model update for each of them. Instead, run a single update in the $$postDigest
	scheduleViewValueUpdate(true);}});};}];/**
	 * @ngdoc directive
	 * @name select
	 * @restrict E
	 *
	 * @description
	 * HTML `select` element with angular data-binding.
	 *
	 * The `select` directive is used together with {@link ngModel `ngModel`} to provide data-binding
	 * between the scope and the `<select>` control (including setting default values).
	 * It also handles dynamic `<option>` elements, which can be added using the {@link ngRepeat `ngRepeat}` or
	 * {@link ngOptions `ngOptions`} directives.
	 *
	 * When an item in the `<select>` menu is selected, the value of the selected option will be bound
	 * to the model identified by the `ngModel` directive. With static or repeated options, this is
	 * the content of the `value` attribute or the textContent of the `<option>`, if the value attribute is missing.
	 * Value and textContent can be interpolated.
	 *
	 * ## Matching model and option values
	 *
	 * In general, the match between the model and an option is evaluated by strictly comparing the model
	 * value against the value of the available options.
	 *
	 * If you are setting the option value with the option's `value` attribute, or textContent, the
	 * value will always be a `string` which means that the model value must also be a string.
	 * Otherwise the `select` directive cannot match them correctly.
	 *
	 * To bind the model to a non-string value, you can use one of the following strategies:
	 * - the {@link ng.ngOptions `ngOptions`} directive
	 *   ({@link ng.select#using-select-with-ngoptions-and-setting-a-default-value})
	 * - the {@link ng.ngValue `ngValue`} directive, which allows arbitrary expressions to be
	 *   option values ({@link ng.select#using-ngvalue-to-bind-the-model-to-an-array-of-objects Example})
	 * - model $parsers / $formatters to convert the string value
	 *   ({@link ng.select#binding-select-to-a-non-string-value-via-ngmodel-parsing-formatting Example})
	 *
	 * If the viewValue of `ngModel` does not match any of the options, then the control
	 * will automatically add an "unknown" option, which it then removes when the mismatch is resolved.
	 *
	 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
	 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
	 * option. See example below for demonstration.
	 *
	 * ## Choosing between `ngRepeat` and `ngOptions`
	 *
	 * In many cases, `ngRepeat` can be used on `<option>` elements instead of {@link ng.directive:ngOptions
	 * ngOptions} to achieve a similar result. However, `ngOptions` provides some benefits:
	 * - more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the
	 * comprehension expression
	 * - reduced memory consumption by not creating a new scope for each repeated instance
	 * - increased render speed by creating the options in a documentFragment instead of individually
	 *
	 * Specifically, select with repeated options slows down significantly starting at 2000 options in
	 * Chrome and Internet Explorer / Edge.
	 *
	 *
	 * @param {string} ngModel Assignable angular expression to data-bind to.
	 * @param {string=} name Property name of the form under which the control is published.
	 * @param {string=} multiple Allows multiple options to be selected. The selected values will be
	 *     bound to the model as an array.
	 * @param {string=} required Sets `required` validation error key if the value is not entered.
	 * @param {string=} ngRequired Adds required attribute and required validation constraint to
	 * the element when the ngRequired expression evaluates to true. Use ngRequired instead of required
	 * when you want to data-bind to the required attribute.
	 * @param {string=} ngChange Angular expression to be executed when selected option(s) changes due to user
	 *    interaction with the select element.
	 * @param {string=} ngOptions sets the options that the select is populated with and defines what is
	 * set on the model on selection. See {@link ngOptions `ngOptions`}.
	 * @param {string=} ngAttrSize sets the size of the select element dynamically. Uses the
	 * {@link guide/interpolation#-ngattr-for-binding-to-arbitrary-attributes ngAttr} directive.
	 *
	 * @example
	 * ### Simple `select` elements with static options
	 *
	 * <example name="static-select" module="staticSelect">
	 * <file name="index.html">
	 * <div ng-controller="ExampleController">
	 *   <form name="myForm">
	 *     <label for="singleSelect"> Single select: </label><br>
	 *     <select name="singleSelect" ng-model="data.singleSelect">
	 *       <option value="option-1">Option 1</option>
	 *       <option value="option-2">Option 2</option>
	 *     </select><br>
	 *
	 *     <label for="singleSelect"> Single select with "not selected" option and dynamic option values: </label><br>
	 *     <select name="singleSelect" id="singleSelect" ng-model="data.singleSelect">
	 *       <option value="">---Please select---</option> <!-- not selected / blank option -->
	 *       <option value="{{data.option1}}">Option 1</option> <!-- interpolation -->
	 *       <option value="option-2">Option 2</option>
	 *     </select><br>
	 *     <button ng-click="forceUnknownOption()">Force unknown option</button><br>
	 *     <tt>singleSelect = {{data.singleSelect}}</tt>
	 *
	 *     <hr>
	 *     <label for="multipleSelect"> Multiple select: </label><br>
	 *     <select name="multipleSelect" id="multipleSelect" ng-model="data.multipleSelect" multiple>
	 *       <option value="option-1">Option 1</option>
	 *       <option value="option-2">Option 2</option>
	 *       <option value="option-3">Option 3</option>
	 *     </select><br>
	 *     <tt>multipleSelect = {{data.multipleSelect}}</tt><br/>
	 *   </form>
	 * </div>
	 * </file>
	 * <file name="app.js">
	 *  angular.module('staticSelect', [])
	 *    .controller('ExampleController', ['$scope', function($scope) {
	 *      $scope.data = {
	 *       singleSelect: null,
	 *       multipleSelect: [],
	 *       option1: 'option-1'
	 *      };
	 *
	 *      $scope.forceUnknownOption = function() {
	 *        $scope.data.singleSelect = 'nonsense';
	 *      };
	 *   }]);
	 * </file>
	 *</example>
	 *
	 * ### Using `ngRepeat` to generate `select` options
	 * <example name="select-ngrepeat" module="ngrepeatSelect">
	 * <file name="index.html">
	 * <div ng-controller="ExampleController">
	 *   <form name="myForm">
	 *     <label for="repeatSelect"> Repeat select: </label>
	 *     <select name="repeatSelect" id="repeatSelect" ng-model="data.model">
	 *       <option ng-repeat="option in data.availableOptions" value="{{option.id}}">{{option.name}}</option>
	 *     </select>
	 *   </form>
	 *   <hr>
	 *   <tt>model = {{data.model}}</tt><br/>
	 * </div>
	 * </file>
	 * <file name="app.js">
	 *  angular.module('ngrepeatSelect', [])
	 *    .controller('ExampleController', ['$scope', function($scope) {
	 *      $scope.data = {
	 *       model: null,
	 *       availableOptions: [
	 *         {id: '1', name: 'Option A'},
	 *         {id: '2', name: 'Option B'},
	 *         {id: '3', name: 'Option C'}
	 *       ]
	 *      };
	 *   }]);
	 * </file>
	 *</example>
	 *
	 * ### Using `ngValue` to bind the model to an array of objects
	 * <example name="select-ngvalue" module="ngvalueSelect">
	 * <file name="index.html">
	 * <div ng-controller="ExampleController">
	 *   <form name="myForm">
	 *     <label for="ngvalueselect"> ngvalue select: </label>
	 *     <select size="6" name="ngvalueselect" ng-model="data.model" multiple>
	 *       <option ng-repeat="option in data.availableOptions" ng-value="option.value">{{option.name}}</option>
	 *     </select>
	 *   </form>
	 *   <hr>
	 *   <pre>model = {{data.model | json}}</pre><br/>
	 * </div>
	 * </file>
	 * <file name="app.js">
	 *  angular.module('ngvalueSelect', [])
	 *    .controller('ExampleController', ['$scope', function($scope) {
	 *      $scope.data = {
	 *       model: null,
	 *       availableOptions: [
	           {value: 'myString', name: 'string'},
	           {value: 1, name: 'integer'},
	           {value: true, name: 'boolean'},
	           {value: null, name: 'null'},
	           {value: {prop: 'value'}, name: 'object'},
	           {value: ['a'], name: 'array'}
	 *       ]
	 *      };
	 *   }]);
	 * </file>
	 *</example>
	 *
	 * ### Using `select` with `ngOptions` and setting a default value
	 * See the {@link ngOptions ngOptions documentation} for more `ngOptions` usage examples.
	 *
	 * <example name="select-with-default-values" module="defaultValueSelect">
	 * <file name="index.html">
	 * <div ng-controller="ExampleController">
	 *   <form name="myForm">
	 *     <label for="mySelect">Make a choice:</label>
	 *     <select name="mySelect" id="mySelect"
	 *       ng-options="option.name for option in data.availableOptions track by option.id"
	 *       ng-model="data.selectedOption"></select>
	 *   </form>
	 *   <hr>
	 *   <tt>option = {{data.selectedOption}}</tt><br/>
	 * </div>
	 * </file>
	 * <file name="app.js">
	 *  angular.module('defaultValueSelect', [])
	 *    .controller('ExampleController', ['$scope', function($scope) {
	 *      $scope.data = {
	 *       availableOptions: [
	 *         {id: '1', name: 'Option A'},
	 *         {id: '2', name: 'Option B'},
	 *         {id: '3', name: 'Option C'}
	 *       ],
	 *       selectedOption: {id: '3', name: 'Option C'} //This sets the default value of the select in the ui
	 *       };
	 *   }]);
	 * </file>
	 *</example>
	 *
	 *
	 * ### Binding `select` to a non-string value via `ngModel` parsing / formatting
	 *
	 * <example name="select-with-non-string-options" module="nonStringSelect">
	 *   <file name="index.html">
	 *     <select ng-model="model.id" convert-to-number>
	 *       <option value="0">Zero</option>
	 *       <option value="1">One</option>
	 *       <option value="2">Two</option>
	 *     </select>
	 *     {{ model }}
	 *   </file>
	 *   <file name="app.js">
	 *     angular.module('nonStringSelect', [])
	 *       .run(function($rootScope) {
	 *         $rootScope.model = { id: 2 };
	 *       })
	 *       .directive('convertToNumber', function() {
	 *         return {
	 *           require: 'ngModel',
	 *           link: function(scope, element, attrs, ngModel) {
	 *             ngModel.$parsers.push(function(val) {
	 *               return parseInt(val, 10);
	 *             });
	 *             ngModel.$formatters.push(function(val) {
	 *               return '' + val;
	 *             });
	 *           }
	 *         };
	 *       });
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     it('should initialize to model', function() {
	 *       expect(element(by.model('model.id')).$('option:checked').getText()).toEqual('Two');
	 *     });
	 *   </file>
	 * </example>
	 *
	 */var selectDirective=function selectDirective(){return{restrict:'E',require:['select','?ngModel'],controller:SelectController,priority:1,link:{pre:selectPreLink,post:selectPostLink}};function selectPreLink(scope,element,attr,ctrls){var selectCtrl=ctrls[0];var ngModelCtrl=ctrls[1];// if ngModel is not defined, we don't need to do anything but set the registerOption
	// function to noop, so options don't get added internally
	if(!ngModelCtrl){selectCtrl.registerOption=noop;return;}selectCtrl.ngModelCtrl=ngModelCtrl;// When the selected item(s) changes we delegate getting the value of the select control
	// to the `readValue` method, which can be changed if the select can have multiple
	// selected values or if the options are being generated by `ngOptions`
	element.on('change',function(){selectCtrl.removeUnknownOption();scope.$apply(function(){ngModelCtrl.$setViewValue(selectCtrl.readValue());});});// If the select allows multiple values then we need to modify how we read and write
	// values from and to the control; also what it means for the value to be empty and
	// we have to add an extra watch since ngModel doesn't work well with arrays - it
	// doesn't trigger rendering if only an item in the array changes.
	if(attr.multiple){selectCtrl.multiple=true;// Read value now needs to check each option to see if it is selected
	selectCtrl.readValue=function readMultipleValue(){var array=[];forEach(element.find('option'),function(option){if(option.selected&&!option.disabled){var val=option.value;array.push(val in selectCtrl.selectValueMap?selectCtrl.selectValueMap[val]:val);}});return array;};// Write value now needs to set the selected property of each matching option
	selectCtrl.writeValue=function writeMultipleValue(value){forEach(element.find('option'),function(option){var shouldBeSelected=!!value&&(includes(value,option.value)||includes(value,selectCtrl.selectValueMap[option.value]));var currentlySelected=option.selected;// IE and Edge, adding options to the selection via shift+click/UP/DOWN,
	// will de-select already selected options if "selected" on those options was set
	// more than once (i.e. when the options were already selected)
	// So we only modify the selected property if neccessary.
	// Note: this behavior cannot be replicated via unit tests because it only shows in the
	// actual user interface.
	if(shouldBeSelected!==currentlySelected){setOptionSelectedStatus(jqLite(option),shouldBeSelected);}});};// we have to do it on each watch since ngModel watches reference, but
	// we need to work of an array, so we need to see if anything was inserted/removed
	var lastView,lastViewRef=NaN;scope.$watch(function selectMultipleWatch(){if(lastViewRef===ngModelCtrl.$viewValue&&!equals(lastView,ngModelCtrl.$viewValue)){lastView=shallowCopy(ngModelCtrl.$viewValue);ngModelCtrl.$render();}lastViewRef=ngModelCtrl.$viewValue;});// If we are a multiple select then value is now a collection
	// so the meaning of $isEmpty changes
	ngModelCtrl.$isEmpty=function(value){return!value||value.length===0;};}}function selectPostLink(scope,element,attrs,ctrls){// if ngModel is not defined, we don't need to do anything
	var ngModelCtrl=ctrls[1];if(!ngModelCtrl)return;var selectCtrl=ctrls[0];// We delegate rendering to the `writeValue` method, which can be changed
	// if the select can have multiple selected values or if the options are being
	// generated by `ngOptions`.
	// This must be done in the postLink fn to prevent $render to be called before
	// all nodes have been linked correctly.
	ngModelCtrl.$render=function(){selectCtrl.writeValue(ngModelCtrl.$viewValue);};}};// The option directive is purely designed to communicate the existence (or lack of)
	// of dynamically created (and destroyed) option elements to their containing select
	// directive via its controller.
	var optionDirective=['$interpolate',function($interpolate){return{restrict:'E',priority:100,compile:function compile(element,attr){var interpolateValueFn,interpolateTextFn;if(isDefined(attr.ngValue)){// Will be handled by registerOption
	}else if(isDefined(attr.value)){// If the value attribute is defined, check if it contains an interpolation
	interpolateValueFn=$interpolate(attr.value,true);}else{// If the value attribute is not defined then we fall back to the
	// text content of the option element, which may be interpolated
	interpolateTextFn=$interpolate(element.text(),true);if(!interpolateTextFn){attr.$set('value',element.text());}}return function(scope,element,attr){// This is an optimization over using ^^ since we don't want to have to search
	// all the way to the root of the DOM for every single option element
	var selectCtrlName='$selectController',parent=element.parent(),selectCtrl=parent.data(selectCtrlName)||parent.parent().data(selectCtrlName);// in case we are in optgroup
	if(selectCtrl){selectCtrl.registerOption(scope,element,attr,interpolateValueFn,interpolateTextFn);}};}};}];/**
	 * @ngdoc directive
	 * @name ngRequired
	 * @restrict A
	 *
	 * @description
	 *
	 * ngRequired adds the required {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
	 * It is most often used for {@link input `input`} and {@link select `select`} controls, but can also be
	 * applied to custom controls.
	 *
	 * The directive sets the `required` attribute on the element if the Angular expression inside
	 * `ngRequired` evaluates to true. A special directive for setting `required` is necessary because we
	 * cannot use interpolation inside `required`. See the {@link guide/interpolation interpolation guide}
	 * for more info.
	 *
	 * The validator will set the `required` error key to true if the `required` attribute is set and
	 * calling {@link ngModel.NgModelController#$isEmpty `NgModelController.$isEmpty`} with the
	 * {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`} returns `true`. For example, the
	 * `$isEmpty()` implementation for `input[text]` checks the length of the `$viewValue`. When developing
	 * custom controls, `$isEmpty()` can be overwritten to account for a $viewValue that is not string-based.
	 *
	 * @example
	 * <example name="ngRequiredDirective" module="ngRequiredExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('ngRequiredExample', [])
	 *         .controller('ExampleController', ['$scope', function($scope) {
	 *           $scope.required = true;
	 *         }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <form name="form">
	 *         <label for="required">Toggle required: </label>
	 *         <input type="checkbox" ng-model="required" id="required" />
	 *         <br>
	 *         <label for="input">This input must be filled if `required` is true: </label>
	 *         <input type="text" ng-model="model" id="input" name="input" ng-required="required" /><br>
	 *         <hr>
	 *         required error set? = <code>{{form.input.$error.required}}</code><br>
	 *         model = <code>{{model}}</code>
	 *       </form>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	       var required = element(by.binding('form.input.$error.required'));
	       var model = element(by.binding('model'));
	       var input = element(by.id('input'));
	
	       it('should set the required error', function() {
	         expect(required.getText()).toContain('true');
	
	         input.sendKeys('123');
	         expect(required.getText()).not.toContain('true');
	         expect(model.getText()).toContain('123');
	       });
	 *   </file>
	 * </example>
	 */var requiredDirective=function requiredDirective(){return{restrict:'A',require:'?ngModel',link:function link(scope,elm,attr,ctrl){if(!ctrl)return;attr.required=true;// force truthy in case we are on non input element
	ctrl.$validators.required=function(modelValue,viewValue){return!attr.required||!ctrl.$isEmpty(viewValue);};attr.$observe('required',function(){ctrl.$validate();});}};};/**
	 * @ngdoc directive
	 * @name ngPattern
	 *
	 * @description
	 *
	 * ngPattern adds the pattern {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
	 * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.
	 *
	 * The validator sets the `pattern` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}
	 * does not match a RegExp which is obtained by evaluating the Angular expression given in the
	 * `ngPattern` attribute value:
	 * * If the expression evaluates to a RegExp object, then this is used directly.
	 * * If the expression evaluates to a string, then it will be converted to a RegExp after wrapping it
	 * in `^` and `$` characters. For instance, `"abc"` will be converted to `new RegExp('^abc$')`.
	 *
	 * <div class="alert alert-info">
	 * **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	 * start at the index of the last search's match, thus not taking the whole input value into
	 * account.
	 * </div>
	 *
	 * <div class="alert alert-info">
	 * **Note:** This directive is also added when the plain `pattern` attribute is used, with two
	 * differences:
	 * <ol>
	 *   <li>
	 *     `ngPattern` does not set the `pattern` attribute and therefore HTML5 constraint validation is
	 *     not available.
	 *   </li>
	 *   <li>
	 *     The `ngPattern` attribute must be an expression, while the `pattern` value must be
	 *     interpolated.
	 *   </li>
	 * </ol>
	 * </div>
	 *
	 * @example
	 * <example name="ngPatternDirective" module="ngPatternExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('ngPatternExample', [])
	 *         .controller('ExampleController', ['$scope', function($scope) {
	 *           $scope.regex = '\\d+';
	 *         }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <form name="form">
	 *         <label for="regex">Set a pattern (regex string): </label>
	 *         <input type="text" ng-model="regex" id="regex" />
	 *         <br>
	 *         <label for="input">This input is restricted by the current pattern: </label>
	 *         <input type="text" ng-model="model" id="input" name="input" ng-pattern="regex" /><br>
	 *         <hr>
	 *         input valid? = <code>{{form.input.$valid}}</code><br>
	 *         model = <code>{{model}}</code>
	 *       </form>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	       var model = element(by.binding('model'));
	       var input = element(by.id('input'));
	
	       it('should validate the input with the default pattern', function() {
	         input.sendKeys('aaa');
	         expect(model.getText()).not.toContain('aaa');
	
	         input.clear().then(function() {
	           input.sendKeys('123');
	           expect(model.getText()).toContain('123');
	         });
	       });
	 *   </file>
	 * </example>
	 */var patternDirective=function patternDirective(){return{restrict:'A',require:'?ngModel',link:function link(scope,elm,attr,ctrl){if(!ctrl)return;var regexp,patternExp=attr.ngPattern||attr.pattern;attr.$observe('pattern',function(regex){if(isString(regex)&&regex.length>0){regex=new RegExp('^'+regex+'$');}if(regex&&!regex.test){throw minErr('ngPattern')('noregexp','Expected {0} to be a RegExp but was {1}. Element: {2}',patternExp,regex,startingTag(elm));}regexp=regex||undefined;ctrl.$validate();});ctrl.$validators.pattern=function(modelValue,viewValue){// HTML5 pattern constraint validates the input value, so we validate the viewValue
	return ctrl.$isEmpty(viewValue)||isUndefined(regexp)||regexp.test(viewValue);};}};};/**
	 * @ngdoc directive
	 * @name ngMaxlength
	 *
	 * @description
	 *
	 * ngMaxlength adds the maxlength {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
	 * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.
	 *
	 * The validator sets the `maxlength` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}
	 * is longer than the integer obtained by evaluating the Angular expression given in the
	 * `ngMaxlength` attribute value.
	 *
	 * <div class="alert alert-info">
	 * **Note:** This directive is also added when the plain `maxlength` attribute is used, with two
	 * differences:
	 * <ol>
	 *   <li>
	 *     `ngMaxlength` does not set the `maxlength` attribute and therefore HTML5 constraint
	 *     validation is not available.
	 *   </li>
	 *   <li>
	 *     The `ngMaxlength` attribute must be an expression, while the `maxlength` value must be
	 *     interpolated.
	 *   </li>
	 * </ol>
	 * </div>
	 *
	 * @example
	 * <example name="ngMaxlengthDirective" module="ngMaxlengthExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('ngMaxlengthExample', [])
	 *         .controller('ExampleController', ['$scope', function($scope) {
	 *           $scope.maxlength = 5;
	 *         }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <form name="form">
	 *         <label for="maxlength">Set a maxlength: </label>
	 *         <input type="number" ng-model="maxlength" id="maxlength" />
	 *         <br>
	 *         <label for="input">This input is restricted by the current maxlength: </label>
	 *         <input type="text" ng-model="model" id="input" name="input" ng-maxlength="maxlength" /><br>
	 *         <hr>
	 *         input valid? = <code>{{form.input.$valid}}</code><br>
	 *         model = <code>{{model}}</code>
	 *       </form>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	       var model = element(by.binding('model'));
	       var input = element(by.id('input'));
	
	       it('should validate the input with the default maxlength', function() {
	         input.sendKeys('abcdef');
	         expect(model.getText()).not.toContain('abcdef');
	
	         input.clear().then(function() {
	           input.sendKeys('abcde');
	           expect(model.getText()).toContain('abcde');
	         });
	       });
	 *   </file>
	 * </example>
	 */var maxlengthDirective=function maxlengthDirective(){return{restrict:'A',require:'?ngModel',link:function link(scope,elm,attr,ctrl){if(!ctrl)return;var maxlength=-1;attr.$observe('maxlength',function(value){var intVal=toInt(value);maxlength=isNumberNaN(intVal)?-1:intVal;ctrl.$validate();});ctrl.$validators.maxlength=function(modelValue,viewValue){return maxlength<0||ctrl.$isEmpty(viewValue)||viewValue.length<=maxlength;};}};};/**
	 * @ngdoc directive
	 * @name ngMinlength
	 *
	 * @description
	 *
	 * ngMinlength adds the minlength {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
	 * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.
	 *
	 * The validator sets the `minlength` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}
	 * is shorter than the integer obtained by evaluating the Angular expression given in the
	 * `ngMinlength` attribute value.
	 *
	 * <div class="alert alert-info">
	 * **Note:** This directive is also added when the plain `minlength` attribute is used, with two
	 * differences:
	 * <ol>
	 *   <li>
	 *     `ngMinlength` does not set the `minlength` attribute and therefore HTML5 constraint
	 *     validation is not available.
	 *   </li>
	 *   <li>
	 *     The `ngMinlength` value must be an expression, while the `minlength` value must be
	 *     interpolated.
	 *   </li>
	 * </ol>
	 * </div>
	 *
	 * @example
	 * <example name="ngMinlengthDirective" module="ngMinlengthExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('ngMinlengthExample', [])
	 *         .controller('ExampleController', ['$scope', function($scope) {
	 *           $scope.minlength = 3;
	 *         }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <form name="form">
	 *         <label for="minlength">Set a minlength: </label>
	 *         <input type="number" ng-model="minlength" id="minlength" />
	 *         <br>
	 *         <label for="input">This input is restricted by the current minlength: </label>
	 *         <input type="text" ng-model="model" id="input" name="input" ng-minlength="minlength" /><br>
	 *         <hr>
	 *         input valid? = <code>{{form.input.$valid}}</code><br>
	 *         model = <code>{{model}}</code>
	 *       </form>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	       var model = element(by.binding('model'));
	       var input = element(by.id('input'));
	
	       it('should validate the input with the default minlength', function() {
	         input.sendKeys('ab');
	         expect(model.getText()).not.toContain('ab');
	
	         input.sendKeys('abc');
	         expect(model.getText()).toContain('abc');
	       });
	 *   </file>
	 * </example>
	 */var minlengthDirective=function minlengthDirective(){return{restrict:'A',require:'?ngModel',link:function link(scope,elm,attr,ctrl){if(!ctrl)return;var minlength=0;attr.$observe('minlength',function(value){minlength=toInt(value)||0;ctrl.$validate();});ctrl.$validators.minlength=function(modelValue,viewValue){return ctrl.$isEmpty(viewValue)||viewValue.length>=minlength;};}};};if(window.angular.bootstrap){// AngularJS is already loaded, so we can return here...
	if(window.console){console.log('WARNING: Tried to load angular more than once.');}return;}// try to bind to jquery now so that one can write jqLite(fn)
	// but we will rebind on bootstrap again.
	bindJQuery();publishExternalAPI(angular);angular.module("ngLocale",[],["$provide",function($provide){var PLURAL_CATEGORY={ZERO:"zero",ONE:"one",TWO:"two",FEW:"few",MANY:"many",OTHER:"other"};function getDecimals(n){n=n+'';var i=n.indexOf('.');return i==-1?0:n.length-i-1;}function getVF(n,opt_precision){var v=opt_precision;if(undefined===v){v=Math.min(getDecimals(n),3);}var base=Math.pow(10,v);var f=(n*base|0)%base;return{v:v,f:f};}$provide.value("$locale",{"DATETIME_FORMATS":{"AMPMS":["AM","PM"],"DAY":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"ERANAMES":["Before Christ","Anno Domini"],"ERAS":["BC","AD"],"FIRSTDAYOFWEEK":6,"MONTH":["January","February","March","April","May","June","July","August","September","October","November","December"],"SHORTDAY":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"SHORTMONTH":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"STANDALONEMONTH":["January","February","March","April","May","June","July","August","September","October","November","December"],"WEEKENDRANGE":[5,6],"fullDate":"EEEE, MMMM d, y","longDate":"MMMM d, y","medium":"MMM d, y h:mm:ss a","mediumDate":"MMM d, y","mediumTime":"h:mm:ss a","short":"M/d/yy h:mm a","shortDate":"M/d/yy","shortTime":"h:mm a"},"NUMBER_FORMATS":{"CURRENCY_SYM":"$","DECIMAL_SEP":".","GROUP_SEP":",","PATTERNS":[{"gSize":3,"lgSize":3,"maxFrac":3,"minFrac":0,"minInt":1,"negPre":"-","negSuf":"","posPre":"","posSuf":""},{"gSize":3,"lgSize":3,"maxFrac":2,"minFrac":2,"minInt":1,"negPre":'-\xA4',"negSuf":"","posPre":'\xA4',"posSuf":""}]},"id":"en-us","localeID":"en_US","pluralCat":function pluralCat(n,opt_precision){var i=n|0;var vf=getVF(n,opt_precision);if(i==1&&vf.v==0){return PLURAL_CATEGORY.ONE;}return PLURAL_CATEGORY.OTHER;}});}]);jqLite(function(){angularInit(window.document,bootstrap);});})(window);!window.angular.$$csp().noInlineStyle&&window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>');

/***/ },
/* 331 */
/***/ function(module, exports) {

	"use strict";
	
	/**
	 * State-based routing for AngularJS
	 * @version v0.4.3
	 * @link http://angular-ui.github.com/
	 * @license MIT License, http://www.opensource.org/licenses/MIT
	 */
	
	/* commonjs package manager support (eg componentjs) */
	if (typeof module !== "undefined" && typeof exports !== "undefined" && module.exports === exports) {
	  module.exports = 'ui.router';
	}
	
	(function (window, angular, undefined) {
	  /*jshint globalstrict:true*/
	  /*global angular:false*/
	  'use strict';
	
	  var isDefined = angular.isDefined,
	      isFunction = angular.isFunction,
	      isString = angular.isString,
	      isObject = angular.isObject,
	      isArray = angular.isArray,
	      forEach = angular.forEach,
	      extend = angular.extend,
	      copy = angular.copy,
	      toJson = angular.toJson;
	
	  function inherit(parent, extra) {
	    return extend(new (extend(function () {}, { prototype: parent }))(), extra);
	  }
	
	  function merge(dst) {
	    forEach(arguments, function (obj) {
	      if (obj !== dst) {
	        forEach(obj, function (value, key) {
	          if (!dst.hasOwnProperty(key)) dst[key] = value;
	        });
	      }
	    });
	    return dst;
	  }
	
	  /**
	   * Finds the common ancestor path between two states.
	   *
	   * @param {Object} first The first state.
	   * @param {Object} second The second state.
	   * @return {Array} Returns an array of state names in descending order, not including the root.
	   */
	  function ancestors(first, second) {
	    var path = [];
	
	    for (var n in first.path) {
	      if (first.path[n] !== second.path[n]) break;
	      path.push(first.path[n]);
	    }
	    return path;
	  }
	
	  /**
	   * IE8-safe wrapper for `Object.keys()`.
	   *
	   * @param {Object} object A JavaScript object.
	   * @return {Array} Returns the keys of the object as an array.
	   */
	  function objectKeys(object) {
	    if (Object.keys) {
	      return Object.keys(object);
	    }
	    var result = [];
	
	    forEach(object, function (val, key) {
	      result.push(key);
	    });
	    return result;
	  }
	
	  /**
	   * IE8-safe wrapper for `Array.prototype.indexOf()`.
	   *
	   * @param {Array} array A JavaScript array.
	   * @param {*} value A value to search the array for.
	   * @return {Number} Returns the array index value of `value`, or `-1` if not present.
	   */
	  function indexOf(array, value) {
	    if (Array.prototype.indexOf) {
	      return array.indexOf(value, Number(arguments[2]) || 0);
	    }
	    var len = array.length >>> 0,
	        from = Number(arguments[2]) || 0;
	    from = from < 0 ? Math.ceil(from) : Math.floor(from);
	
	    if (from < 0) from += len;
	
	    for (; from < len; from++) {
	      if (from in array && array[from] === value) return from;
	    }
	    return -1;
	  }
	
	  /**
	   * Merges a set of parameters with all parameters inherited between the common parents of the
	   * current state and a given destination state.
	   *
	   * @param {Object} currentParams The value of the current state parameters ($stateParams).
	   * @param {Object} newParams The set of parameters which will be composited with inherited params.
	   * @param {Object} $current Internal definition of object representing the current state.
	   * @param {Object} $to Internal definition of object representing state to transition to.
	   */
	  function inheritParams(currentParams, newParams, $current, $to) {
	    var parents = ancestors($current, $to),
	        parentParams,
	        inherited = {},
	        inheritList = [];
	
	    for (var i in parents) {
	      if (!parents[i] || !parents[i].params) continue;
	      parentParams = objectKeys(parents[i].params);
	      if (!parentParams.length) continue;
	
	      for (var j in parentParams) {
	        if (indexOf(inheritList, parentParams[j]) >= 0) continue;
	        inheritList.push(parentParams[j]);
	        inherited[parentParams[j]] = currentParams[parentParams[j]];
	      }
	    }
	    return extend({}, inherited, newParams);
	  }
	
	  /**
	   * Performs a non-strict comparison of the subset of two objects, defined by a list of keys.
	   *
	   * @param {Object} a The first object.
	   * @param {Object} b The second object.
	   * @param {Array} keys The list of keys within each object to compare. If the list is empty or not specified,
	   *                     it defaults to the list of keys in `a`.
	   * @return {Boolean} Returns `true` if the keys match, otherwise `false`.
	   */
	  function equalForKeys(a, b, keys) {
	    if (!keys) {
	      keys = [];
	      for (var n in a) {
	        keys.push(n);
	      } // Used instead of Object.keys() for IE8 compatibility
	    }
	
	    for (var i = 0; i < keys.length; i++) {
	      var k = keys[i];
	      if (a[k] != b[k]) return false; // Not '===', values aren't necessarily normalized
	    }
	    return true;
	  }
	
	  /**
	   * Returns the subset of an object, based on a list of keys.
	   *
	   * @param {Array} keys
	   * @param {Object} values
	   * @return {Boolean} Returns a subset of `values`.
	   */
	  function filterByKeys(keys, values) {
	    var filtered = {};
	
	    forEach(keys, function (name) {
	      filtered[name] = values[name];
	    });
	    return filtered;
	  }
	
	  // like _.indexBy
	  // when you know that your index values will be unique, or you want last-one-in to win
	  function indexBy(array, propName) {
	    var result = {};
	    forEach(array, function (item) {
	      result[item[propName]] = item;
	    });
	    return result;
	  }
	
	  // extracted from underscore.js
	  // Return a copy of the object only containing the whitelisted properties.
	  function pick(obj) {
	    var copy = {};
	    var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
	    forEach(keys, function (key) {
	      if (key in obj) copy[key] = obj[key];
	    });
	    return copy;
	  }
	
	  // extracted from underscore.js
	  // Return a copy of the object omitting the blacklisted properties.
	  function omit(obj) {
	    var copy = {};
	    var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
	    for (var key in obj) {
	      if (indexOf(keys, key) == -1) copy[key] = obj[key];
	    }
	    return copy;
	  }
	
	  function pluck(collection, key) {
	    var result = isArray(collection) ? [] : {};
	
	    forEach(collection, function (val, i) {
	      result[i] = isFunction(key) ? key(val) : val[key];
	    });
	    return result;
	  }
	
	  function filter(collection, callback) {
	    var array = isArray(collection);
	    var result = array ? [] : {};
	    forEach(collection, function (val, i) {
	      if (callback(val, i)) {
	        result[array ? result.length : i] = val;
	      }
	    });
	    return result;
	  }
	
	  function map(collection, callback) {
	    var result = isArray(collection) ? [] : {};
	
	    forEach(collection, function (val, i) {
	      result[i] = callback(val, i);
	    });
	    return result;
	  }
	
	  // issue #2676 #2889
	  function silenceUncaughtInPromise(promise) {
	    return promise.then(undefined, function () {}) && promise;
	  }
	
	  /**
	   * @ngdoc overview
	   * @name ui.router.util
	   *
	   * @description
	   * # ui.router.util sub-module
	   *
	   * This module is a dependency of other sub-modules. Do not include this module as a dependency
	   * in your angular app (use {@link ui.router} module instead).
	   *
	   */
	  angular.module('ui.router.util', ['ng']);
	
	  /**
	   * @ngdoc overview
	   * @name ui.router.router
	   * 
	   * @requires ui.router.util
	   *
	   * @description
	   * # ui.router.router sub-module
	   *
	   * This module is a dependency of other sub-modules. Do not include this module as a dependency
	   * in your angular app (use {@link ui.router} module instead).
	   */
	  angular.module('ui.router.router', ['ui.router.util']);
	
	  /**
	   * @ngdoc overview
	   * @name ui.router.state
	   * 
	   * @requires ui.router.router
	   * @requires ui.router.util
	   *
	   * @description
	   * # ui.router.state sub-module
	   *
	   * This module is a dependency of the main ui.router module. Do not include this module as a dependency
	   * in your angular app (use {@link ui.router} module instead).
	   * 
	   */
	  angular.module('ui.router.state', ['ui.router.router', 'ui.router.util']);
	
	  /**
	   * @ngdoc overview
	   * @name ui.router
	   *
	   * @requires ui.router.state
	   *
	   * @description
	   * # ui.router
	   * 
	   * ## The main module for ui.router 
	   * There are several sub-modules included with the ui.router module, however only this module is needed
	   * as a dependency within your angular app. The other modules are for organization purposes. 
	   *
	   * The modules are:
	   * * ui.router - the main "umbrella" module
	   * * ui.router.router - 
	   * 
	   * *You'll need to include **only** this module as the dependency within your angular app.*
	   * 
	   * <pre>
	   * <!doctype html>
	   * <html ng-app="myApp">
	   * <head>
	   *   <script src="js/angular.js"></script>
	   *   <!-- Include the ui-router script -->
	   *   <script src="js/angular-ui-router.min.js"></script>
	   *   <script>
	   *     // ...and add 'ui.router' as a dependency
	   *     var myApp = angular.module('myApp', ['ui.router']);
	   *   </script>
	   * </head>
	   * <body>
	   * </body>
	   * </html>
	   * </pre>
	   */
	  angular.module('ui.router', ['ui.router.state']);
	
	  angular.module('ui.router.compat', ['ui.router']);
	
	  /**
	   * @ngdoc object
	   * @name ui.router.util.$resolve
	   *
	   * @requires $q
	   * @requires $injector
	   *
	   * @description
	   * Manages resolution of (acyclic) graphs of promises.
	   */
	  $Resolve.$inject = ['$q', '$injector'];
	  function $Resolve($q, $injector) {
	
	    var VISIT_IN_PROGRESS = 1,
	        VISIT_DONE = 2,
	        NOTHING = {},
	        NO_DEPENDENCIES = [],
	        NO_LOCALS = NOTHING,
	        NO_PARENT = extend($q.when(NOTHING), { $$promises: NOTHING, $$values: NOTHING });
	
	    /**
	     * @ngdoc function
	     * @name ui.router.util.$resolve#study
	     * @methodOf ui.router.util.$resolve
	     *
	     * @description
	     * Studies a set of invocables that are likely to be used multiple times.
	     * <pre>
	     * $resolve.study(invocables)(locals, parent, self)
	     * </pre>
	     * is equivalent to
	     * <pre>
	     * $resolve.resolve(invocables, locals, parent, self)
	     * </pre>
	     * but the former is more efficient (in fact `resolve` just calls `study` 
	     * internally).
	     *
	     * @param {object} invocables Invocable objects
	     * @return {function} a function to pass in locals, parent and self
	     */
	    this.study = function (invocables) {
	      if (!isObject(invocables)) throw new Error("'invocables' must be an object");
	      var invocableKeys = objectKeys(invocables || {});
	
	      // Perform a topological sort of invocables to build an ordered plan
	      var plan = [],
	          cycle = [],
	          visited = {};
	      function visit(value, key) {
	        if (visited[key] === VISIT_DONE) return;
	
	        cycle.push(key);
	        if (visited[key] === VISIT_IN_PROGRESS) {
	          cycle.splice(0, indexOf(cycle, key));
	          throw new Error("Cyclic dependency: " + cycle.join(" -> "));
	        }
	        visited[key] = VISIT_IN_PROGRESS;
	
	        if (isString(value)) {
	          plan.push(key, [function () {
	            return $injector.get(value);
	          }], NO_DEPENDENCIES);
	        } else {
	          var params = $injector.annotate(value);
	          forEach(params, function (param) {
	            if (param !== key && invocables.hasOwnProperty(param)) visit(invocables[param], param);
	          });
	          plan.push(key, value, params);
	        }
	
	        cycle.pop();
	        visited[key] = VISIT_DONE;
	      }
	      forEach(invocables, visit);
	      invocables = cycle = visited = null; // plan is all that's required
	
	      function isResolve(value) {
	        return isObject(value) && value.then && value.$$promises;
	      }
	
	      return function (locals, parent, self) {
	        if (isResolve(locals) && self === undefined) {
	          self = parent;parent = locals;locals = null;
	        }
	        if (!locals) locals = NO_LOCALS;else if (!isObject(locals)) {
	          throw new Error("'locals' must be an object");
	        }
	        if (!parent) parent = NO_PARENT;else if (!isResolve(parent)) {
	          throw new Error("'parent' must be a promise returned by $resolve.resolve()");
	        }
	
	        // To complete the overall resolution, we have to wait for the parent
	        // promise and for the promise for each invokable in our plan.
	        var resolution = $q.defer(),
	            result = silenceUncaughtInPromise(resolution.promise),
	            promises = result.$$promises = {},
	            values = extend({}, locals),
	            wait = 1 + plan.length / 3,
	            merged = false;
	
	        silenceUncaughtInPromise(result);
	
	        function done() {
	          // Merge parent values we haven't got yet and publish our own $$values
	          if (! --wait) {
	            if (!merged) merge(values, parent.$$values);
	            result.$$values = values;
	            result.$$promises = result.$$promises || true; // keep for isResolve()
	            delete result.$$inheritedValues;
	            resolution.resolve(values);
	          }
	        }
	
	        function fail(reason) {
	          result.$$failure = reason;
	          resolution.reject(reason);
	        }
	
	        // Short-circuit if parent has already failed
	        if (isDefined(parent.$$failure)) {
	          fail(parent.$$failure);
	          return result;
	        }
	
	        if (parent.$$inheritedValues) {
	          merge(values, omit(parent.$$inheritedValues, invocableKeys));
	        }
	
	        // Merge parent values if the parent has already resolved, or merge
	        // parent promises and wait if the parent resolve is still in progress.
	        extend(promises, parent.$$promises);
	        if (parent.$$values) {
	          merged = merge(values, omit(parent.$$values, invocableKeys));
	          result.$$inheritedValues = omit(parent.$$values, invocableKeys);
	          done();
	        } else {
	          if (parent.$$inheritedValues) {
	            result.$$inheritedValues = omit(parent.$$inheritedValues, invocableKeys);
	          }
	          parent.then(done, fail);
	        }
	
	        // Process each invocable in the plan, but ignore any where a local of the same name exists.
	        for (var i = 0, ii = plan.length; i < ii; i += 3) {
	          if (locals.hasOwnProperty(plan[i])) done();else invoke(plan[i], plan[i + 1], plan[i + 2]);
	        }
	
	        function invoke(key, invocable, params) {
	          // Create a deferred for this invocation. Failures will propagate to the resolution as well.
	          var invocation = $q.defer(),
	              waitParams = 0;
	          function onfailure(reason) {
	            invocation.reject(reason);
	            fail(reason);
	          }
	          // Wait for any parameter that we have a promise for (either from parent or from this
	          // resolve; in that case study() will have made sure it's ordered before us in the plan).
	          forEach(params, function (dep) {
	            if (promises.hasOwnProperty(dep) && !locals.hasOwnProperty(dep)) {
	              waitParams++;
	              promises[dep].then(function (result) {
	                values[dep] = result;
	                if (! --waitParams) proceed();
	              }, onfailure);
	            }
	          });
	          if (!waitParams) proceed();
	          function proceed() {
	            if (isDefined(result.$$failure)) return;
	            try {
	              invocation.resolve($injector.invoke(invocable, self, values));
	              invocation.promise.then(function (result) {
	                values[key] = result;
	                done();
	              }, onfailure);
	            } catch (e) {
	              onfailure(e);
	            }
	          }
	          // Publish promise synchronously; invocations further down in the plan may depend on it.
	          promises[key] = silenceUncaughtInPromise(invocation.promise);
	        }
	
	        return result;
	      };
	    };
	
	    /**
	     * @ngdoc function
	     * @name ui.router.util.$resolve#resolve
	     * @methodOf ui.router.util.$resolve
	     *
	     * @description
	     * Resolves a set of invocables. An invocable is a function to be invoked via 
	     * `$injector.invoke()`, and can have an arbitrary number of dependencies. 
	     * An invocable can either return a value directly,
	     * or a `$q` promise. If a promise is returned it will be resolved and the 
	     * resulting value will be used instead. Dependencies of invocables are resolved 
	     * (in this order of precedence)
	     *
	     * - from the specified `locals`
	     * - from another invocable that is part of this `$resolve` call
	     * - from an invocable that is inherited from a `parent` call to `$resolve` 
	     *   (or recursively
	     * - from any ancestor `$resolve` of that parent).
	     *
	     * The return value of `$resolve` is a promise for an object that contains 
	     * (in this order of precedence)
	     *
	     * - any `locals` (if specified)
	     * - the resolved return values of all injectables
	     * - any values inherited from a `parent` call to `$resolve` (if specified)
	     *
	     * The promise will resolve after the `parent` promise (if any) and all promises 
	     * returned by injectables have been resolved. If any invocable 
	     * (or `$injector.invoke`) throws an exception, or if a promise returned by an 
	     * invocable is rejected, the `$resolve` promise is immediately rejected with the 
	     * same error. A rejection of a `parent` promise (if specified) will likewise be 
	     * propagated immediately. Once the `$resolve` promise has been rejected, no 
	     * further invocables will be called.
	     * 
	     * Cyclic dependencies between invocables are not permitted and will cause `$resolve`
	     * to throw an error. As a special case, an injectable can depend on a parameter 
	     * with the same name as the injectable, which will be fulfilled from the `parent` 
	     * injectable of the same name. This allows inherited values to be decorated. 
	     * Note that in this case any other injectable in the same `$resolve` with the same
	     * dependency would see the decorated value, not the inherited value.
	     *
	     * Note that missing dependencies -- unlike cyclic dependencies -- will cause an 
	     * (asynchronous) rejection of the `$resolve` promise rather than a (synchronous) 
	     * exception.
	     *
	     * Invocables are invoked eagerly as soon as all dependencies are available. 
	     * This is true even for dependencies inherited from a `parent` call to `$resolve`.
	     *
	     * As a special case, an invocable can be a string, in which case it is taken to 
	     * be a service name to be passed to `$injector.get()`. This is supported primarily 
	     * for backwards-compatibility with the `resolve` property of `$routeProvider` 
	     * routes.
	     *
	     * @param {object} invocables functions to invoke or 
	     * `$injector` services to fetch.
	     * @param {object} locals  values to make available to the injectables
	     * @param {object} parent  a promise returned by another call to `$resolve`.
	     * @param {object} self  the `this` for the invoked methods
	     * @return {object} Promise for an object that contains the resolved return value
	     * of all invocables, as well as any inherited and local values.
	     */
	    this.resolve = function (invocables, locals, parent, self) {
	      return this.study(invocables)(locals, parent, self);
	    };
	  }
	
	  angular.module('ui.router.util').service('$resolve', $Resolve);
	
	  /**
	   * @ngdoc object
	   * @name ui.router.util.$templateFactoryProvider
	   *
	   * @description
	   * Provider for $templateFactory. Manages which template-loading mechanism to
	   * use, and will default to the most recent one ($templateRequest on Angular
	   * versions starting from 1.3, $http otherwise).
	   */
	  function TemplateFactoryProvider() {
	    var shouldUnsafelyUseHttp = angular.version.minor < 3;
	
	    /**
	     * @ngdoc function
	     * @name ui.router.util.$templateFactoryProvider#shouldUnsafelyUseHttp
	     * @methodOf ui.router.util.$templateFactoryProvider
	     *
	     * @description
	     * Forces $templateFactory to use $http instead of $templateRequest. This
	     * might cause XSS, as $http doesn't enforce the regular security checks for
	     * templates that have been introduced in Angular 1.3. Note that setting this
	     * to false on Angular older than 1.3.x will crash, as the $templateRequest
	     * service (and the security checks) are not implemented on these versions.
	     *
	     * See the $sce documentation, section
	     * <a href="https://docs.angularjs.org/api/ng/service/$sce#impact-on-loading-templates">
	     * Impact on loading templates</a> for more details about this mechanism.
	     *
	     * @param {boolean} value
	     */
	    this.shouldUnsafelyUseHttp = function (value) {
	      shouldUnsafelyUseHttp = !!value;
	    };
	
	    /**
	     * @ngdoc object
	     * @name ui.router.util.$templateFactory
	     *
	     * @requires $http
	     * @requires $templateCache
	     * @requires $injector
	     *
	     * @description
	     * Service. Manages loading of templates.
	     */
	    this.$get = ['$http', '$templateCache', '$injector', function ($http, $templateCache, $injector) {
	      return new TemplateFactory($http, $templateCache, $injector, shouldUnsafelyUseHttp);
	    }];
	  }
	
	  /**
	   * @ngdoc object
	   * @name ui.router.util.$templateFactory
	   *
	   * @requires $http
	   * @requires $templateCache
	   * @requires $injector
	   *
	   * @description
	   * Service. Manages loading of templates.
	   */
	  function TemplateFactory($http, $templateCache, $injector, shouldUnsafelyUseHttp) {
	
	    /**
	     * @ngdoc function
	     * @name ui.router.util.$templateFactory#fromConfig
	     * @methodOf ui.router.util.$templateFactory
	     *
	     * @description
	     * Creates a template from a configuration object. 
	     *
	     * @param {object} config Configuration object for which to load a template. 
	     * The following properties are search in the specified order, and the first one 
	     * that is defined is used to create the template:
	     *
	     * @param {string|object} config.template html string template or function to 
	     * load via {@link ui.router.util.$templateFactory#fromString fromString}.
	     * @param {string|object} config.templateUrl url to load or a function returning 
	     * the url to load via {@link ui.router.util.$templateFactory#fromUrl fromUrl}.
	     * @param {Function} config.templateProvider function to invoke via 
	     * {@link ui.router.util.$templateFactory#fromProvider fromProvider}.
	     * @param {object} params  Parameters to pass to the template function.
	     * @param {object} locals Locals to pass to `invoke` if the template is loaded 
	     * via a `templateProvider`. Defaults to `{ params: params }`.
	     *
	     * @return {string|object}  The template html as a string, or a promise for 
	     * that string,or `null` if no template is configured.
	     */
	    this.fromConfig = function (config, params, locals) {
	      return isDefined(config.template) ? this.fromString(config.template, params) : isDefined(config.templateUrl) ? this.fromUrl(config.templateUrl, params) : isDefined(config.templateProvider) ? this.fromProvider(config.templateProvider, params, locals) : null;
	    };
	
	    /**
	     * @ngdoc function
	     * @name ui.router.util.$templateFactory#fromString
	     * @methodOf ui.router.util.$templateFactory
	     *
	     * @description
	     * Creates a template from a string or a function returning a string.
	     *
	     * @param {string|object} template html template as a string or function that 
	     * returns an html template as a string.
	     * @param {object} params Parameters to pass to the template function.
	     *
	     * @return {string|object} The template html as a string, or a promise for that 
	     * string.
	     */
	    this.fromString = function (template, params) {
	      return isFunction(template) ? template(params) : template;
	    };
	
	    /**
	     * @ngdoc function
	     * @name ui.router.util.$templateFactory#fromUrl
	     * @methodOf ui.router.util.$templateFactory
	     * 
	     * @description
	     * Loads a template from the a URL via `$http` and `$templateCache`.
	     *
	     * @param {string|Function} url url of the template to load, or a function 
	     * that returns a url.
	     * @param {Object} params Parameters to pass to the url function.
	     * @return {string|Promise.<string>} The template html as a string, or a promise 
	     * for that string.
	     */
	    this.fromUrl = function (url, params) {
	      if (isFunction(url)) url = url(params);
	      if (url == null) return null;else {
	        if (!shouldUnsafelyUseHttp) {
	          return $injector.get('$templateRequest')(url);
	        } else {
	          return $http.get(url, { cache: $templateCache, headers: { Accept: 'text/html' } }).then(function (response) {
	            return response.data;
	          });
	        }
	      }
	    };
	
	    /**
	     * @ngdoc function
	     * @name ui.router.util.$templateFactory#fromProvider
	     * @methodOf ui.router.util.$templateFactory
	     *
	     * @description
	     * Creates a template by invoking an injectable provider function.
	     *
	     * @param {Function} provider Function to invoke via `$injector.invoke`
	     * @param {Object} params Parameters for the template.
	     * @param {Object} locals Locals to pass to `invoke`. Defaults to 
	     * `{ params: params }`.
	     * @return {string|Promise.<string>} The template html as a string, or a promise 
	     * for that string.
	     */
	    this.fromProvider = function (provider, params, locals) {
	      return $injector.invoke(provider, null, locals || { params: params });
	    };
	  }
	
	  angular.module('ui.router.util').provider('$templateFactory', TemplateFactoryProvider);
	
	  var $$UMFP; // reference to $UrlMatcherFactoryProvider
	
	  /**
	   * @ngdoc object
	   * @name ui.router.util.type:UrlMatcher
	   *
	   * @description
	   * Matches URLs against patterns and extracts named parameters from the path or the search
	   * part of the URL. A URL pattern consists of a path pattern, optionally followed by '?' and a list
	   * of search parameters. Multiple search parameter names are separated by '&'. Search parameters
	   * do not influence whether or not a URL is matched, but their values are passed through into
	   * the matched parameters returned by {@link ui.router.util.type:UrlMatcher#methods_exec exec}.
	   *
	   * Path parameter placeholders can be specified using simple colon/catch-all syntax or curly brace
	   * syntax, which optionally allows a regular expression for the parameter to be specified:
	   *
	   * * `':'` name - colon placeholder
	   * * `'*'` name - catch-all placeholder
	   * * `'{' name '}'` - curly placeholder
	   * * `'{' name ':' regexp|type '}'` - curly placeholder with regexp or type name. Should the
	   *   regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.
	   *
	   * Parameter names may contain only word characters (latin letters, digits, and underscore) and
	   * must be unique within the pattern (across both path and search parameters). For colon
	   * placeholders or curly placeholders without an explicit regexp, a path parameter matches any
	   * number of characters other than '/'. For catch-all placeholders the path parameter matches
	   * any number of characters.
	   *
	   * Examples:
	   *
	   * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for
	   *   trailing slashes, and patterns have to match the entire path, not just a prefix.
	   * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or
	   *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.
	   * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.
	   * * `'/user/{id:[^/]*}'` - Same as the previous example.
	   * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id
	   *   parameter consists of 1 to 8 hex digits.
	   * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the
	   *   path into the parameter 'path'.
	   * * `'/files/*path'` - ditto.
	   * * `'/calendar/{start:date}'` - Matches "/calendar/2014-11-12" (because the pattern defined
	   *   in the built-in  `date` Type matches `2014-11-12`) and provides a Date object in $stateParams.start
	   *
	   * @param {string} pattern  The pattern to compile into a matcher.
	   * @param {Object} config  A configuration object hash:
	   * @param {Object=} parentMatcher Used to concatenate the pattern/config onto
	   *   an existing UrlMatcher
	   *
	   * * `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.
	   * * `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.
	   *
	   * @property {string} prefix  A static prefix of this pattern. The matcher guarantees that any
	   *   URL matching this matcher (i.e. any string for which {@link ui.router.util.type:UrlMatcher#methods_exec exec()} returns
	   *   non-null) will start with this prefix.
	   *
	   * @property {string} source  The pattern that was passed into the constructor
	   *
	   * @property {string} sourcePath  The path portion of the source property
	   *
	   * @property {string} sourceSearch  The search portion of the source property
	   *
	   * @property {string} regex  The constructed regex that will be used to match against the url when
	   *   it is time to determine which url will match.
	   *
	   * @returns {Object}  New `UrlMatcher` object
	   */
	  function UrlMatcher(pattern, config, parentMatcher) {
	    config = extend({ params: {} }, isObject(config) ? config : {});
	
	    // Find all placeholders and create a compiled pattern, using either classic or curly syntax:
	    //   '*' name
	    //   ':' name
	    //   '{' name '}'
	    //   '{' name ':' regexp '}'
	    // The regular expression is somewhat complicated due to the need to allow curly braces
	    // inside the regular expression. The placeholder regexp breaks down as follows:
	    //    ([:*])([\w\[\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)
	    //    \{([\w\[\]]+)(?:\:\s*( ... ))?\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case
	    //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either
	    //    [^{}\\]+                       - anything other than curly braces or backslash
	    //    \\.                            - a backslash escape
	    //    \{(?:[^{}\\]+|\\.)*\}          - a matched set of curly braces containing other atoms
	    var placeholder = /([:*])([\w\[\]]+)|\{([\w\[\]]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,
	        searchPlaceholder = /([:]?)([\w\[\].-]+)|\{([\w\[\].-]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,
	        compiled = '^',
	        last = 0,
	        m,
	        segments = this.segments = [],
	        parentParams = parentMatcher ? parentMatcher.params : {},
	        params = this.params = parentMatcher ? parentMatcher.params.$$new() : new $$UMFP.ParamSet(),
	        paramNames = [];
	
	    function addParameter(id, type, config, location) {
	      paramNames.push(id);
	      if (parentParams[id]) return parentParams[id];
	      if (!/^\w+([-.]+\w+)*(?:\[\])?$/.test(id)) throw new Error("Invalid parameter name '" + id + "' in pattern '" + pattern + "'");
	      if (params[id]) throw new Error("Duplicate parameter name '" + id + "' in pattern '" + pattern + "'");
	      params[id] = new $$UMFP.Param(id, type, config, location);
	      return params[id];
	    }
	
	    function quoteRegExp(string, pattern, squash, optional) {
	      var surroundPattern = ['', ''],
	          result = string.replace(/[\\\[\]\^$*+?.()|{}]/g, "\\$&");
	      if (!pattern) return result;
	      switch (squash) {
	        case false:
	          surroundPattern = ['(', ')' + (optional ? "?" : "")];break;
	        case true:
	          result = result.replace(/\/$/, '');
	          surroundPattern = ['(?:\/(', ')|\/)?'];
	          break;
	        default:
	          surroundPattern = ['(' + squash + "|", ')?'];break;
	      }
	      return result + surroundPattern[0] + pattern + surroundPattern[1];
	    }
	
	    this.source = pattern;
	
	    // Split into static segments separated by path parameter placeholders.
	    // The number of segments is always 1 more than the number of parameters.
	    function matchDetails(m, isSearch) {
	      var id, regexp, segment, type, cfg, arrayMode;
	      id = m[2] || m[3]; // IE[78] returns '' for unmatched groups instead of null
	      cfg = config.params[id];
	      segment = pattern.substring(last, m.index);
	      regexp = isSearch ? m[4] : m[4] || (m[1] == '*' ? '.*' : null);
	
	      if (regexp) {
	        type = $$UMFP.type(regexp) || inherit($$UMFP.type("string"), { pattern: new RegExp(regexp, config.caseInsensitive ? 'i' : undefined) });
	      }
	
	      return {
	        id: id, regexp: regexp, segment: segment, type: type, cfg: cfg
	      };
	    }
	
	    var p, param, segment;
	    while (m = placeholder.exec(pattern)) {
	      p = matchDetails(m, false);
	      if (p.segment.indexOf('?') >= 0) break; // we're into the search part
	
	      param = addParameter(p.id, p.type, p.cfg, "path");
	      compiled += quoteRegExp(p.segment, param.type.pattern.source, param.squash, param.isOptional);
	      segments.push(p.segment);
	      last = placeholder.lastIndex;
	    }
	    segment = pattern.substring(last);
	
	    // Find any search parameter names and remove them from the last segment
	    var i = segment.indexOf('?');
	
	    if (i >= 0) {
	      var search = this.sourceSearch = segment.substring(i);
	      segment = segment.substring(0, i);
	      this.sourcePath = pattern.substring(0, last + i);
	
	      if (search.length > 0) {
	        last = 0;
	        while (m = searchPlaceholder.exec(search)) {
	          p = matchDetails(m, true);
	          param = addParameter(p.id, p.type, p.cfg, "search");
	          last = placeholder.lastIndex;
	          // check if ?&
	        }
	      }
	    } else {
	      this.sourcePath = pattern;
	      this.sourceSearch = '';
	    }
	
	    compiled += quoteRegExp(segment) + (config.strict === false ? '\/?' : '') + '$';
	    segments.push(segment);
	
	    this.regexp = new RegExp(compiled, config.caseInsensitive ? 'i' : undefined);
	    this.prefix = segments[0];
	    this.$$paramNames = paramNames;
	  }
	
	  /**
	   * @ngdoc function
	   * @name ui.router.util.type:UrlMatcher#concat
	   * @methodOf ui.router.util.type:UrlMatcher
	   *
	   * @description
	   * Returns a new matcher for a pattern constructed by appending the path part and adding the
	   * search parameters of the specified pattern to this pattern. The current pattern is not
	   * modified. This can be understood as creating a pattern for URLs that are relative to (or
	   * suffixes of) the current pattern.
	   *
	   * @example
	   * The following two matchers are equivalent:
	   * <pre>
	   * new UrlMatcher('/user/{id}?q').concat('/details?date');
	   * new UrlMatcher('/user/{id}/details?q&date');
	   * </pre>
	   *
	   * @param {string} pattern  The pattern to append.
	   * @param {Object} config  An object hash of the configuration for the matcher.
	   * @returns {UrlMatcher}  A matcher for the concatenated pattern.
	   */
	  UrlMatcher.prototype.concat = function (pattern, config) {
	    // Because order of search parameters is irrelevant, we can add our own search
	    // parameters to the end of the new pattern. Parse the new pattern by itself
	    // and then join the bits together, but it's much easier to do this on a string level.
	    var defaultConfig = {
	      caseInsensitive: $$UMFP.caseInsensitive(),
	      strict: $$UMFP.strictMode(),
	      squash: $$UMFP.defaultSquashPolicy()
	    };
	    return new UrlMatcher(this.sourcePath + pattern + this.sourceSearch, extend(defaultConfig, config), this);
	  };
	
	  UrlMatcher.prototype.toString = function () {
	    return this.source;
	  };
	
	  /**
	   * @ngdoc function
	   * @name ui.router.util.type:UrlMatcher#exec
	   * @methodOf ui.router.util.type:UrlMatcher
	   *
	   * @description
	   * Tests the specified path against this matcher, and returns an object containing the captured
	   * parameter values, or null if the path does not match. The returned object contains the values
	   * of any search parameters that are mentioned in the pattern, but their value may be null if
	   * they are not present in `searchParams`. This means that search parameters are always treated
	   * as optional.
	   *
	   * @example
	   * <pre>
	   * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {
	   *   x: '1', q: 'hello'
	   * });
	   * // returns { id: 'bob', q: 'hello', r: null }
	   * </pre>
	   *
	   * @param {string} path  The URL path to match, e.g. `$location.path()`.
	   * @param {Object} searchParams  URL search parameters, e.g. `$location.search()`.
	   * @returns {Object}  The captured parameter values.
	   */
	  UrlMatcher.prototype.exec = function (path, searchParams) {
	    var m = this.regexp.exec(path);
	    if (!m) return null;
	    searchParams = searchParams || {};
	
	    var paramNames = this.parameters(),
	        nTotal = paramNames.length,
	        nPath = this.segments.length - 1,
	        values = {},
	        i,
	        j,
	        cfg,
	        paramName;
	
	    if (nPath !== m.length - 1) throw new Error("Unbalanced capture group in route '" + this.source + "'");
	
	    function decodePathArray(string) {
	      function reverseString(str) {
	        return str.split("").reverse().join("");
	      }
	      function unquoteDashes(str) {
	        return str.replace(/\\-/g, "-");
	      }
	
	      var split = reverseString(string).split(/-(?!\\)/);
	      var allReversed = map(split, reverseString);
	      return map(allReversed, unquoteDashes).reverse();
	    }
	
	    var param, paramVal;
	    for (i = 0; i < nPath; i++) {
	      paramName = paramNames[i];
	      param = this.params[paramName];
	      paramVal = m[i + 1];
	      // if the param value matches a pre-replace pair, replace the value before decoding.
	      for (j = 0; j < param.replace.length; j++) {
	        if (param.replace[j].from === paramVal) paramVal = param.replace[j].to;
	      }
	      if (paramVal && param.array === true) paramVal = decodePathArray(paramVal);
	      if (isDefined(paramVal)) paramVal = param.type.decode(paramVal);
	      values[paramName] = param.value(paramVal);
	    }
	    for (; /**/i < nTotal; i++) {
	      paramName = paramNames[i];
	      values[paramName] = this.params[paramName].value(searchParams[paramName]);
	      param = this.params[paramName];
	      paramVal = searchParams[paramName];
	      for (j = 0; j < param.replace.length; j++) {
	        if (param.replace[j].from === paramVal) paramVal = param.replace[j].to;
	      }
	      if (isDefined(paramVal)) paramVal = param.type.decode(paramVal);
	      values[paramName] = param.value(paramVal);
	    }
	
	    return values;
	  };
	
	  /**
	   * @ngdoc function
	   * @name ui.router.util.type:UrlMatcher#parameters
	   * @methodOf ui.router.util.type:UrlMatcher
	   *
	   * @description
	   * Returns the names of all path and search parameters of this pattern in an unspecified order.
	   *
	   * @returns {Array.<string>}  An array of parameter names. Must be treated as read-only. If the
	   *    pattern has no parameters, an empty array is returned.
	   */
	  UrlMatcher.prototype.parameters = function (param) {
	    if (!isDefined(param)) return this.$$paramNames;
	    return this.params[param] || null;
	  };
	
	  /**
	   * @ngdoc function
	   * @name ui.router.util.type:UrlMatcher#validates
	   * @methodOf ui.router.util.type:UrlMatcher
	   *
	   * @description
	   * Checks an object hash of parameters to validate their correctness according to the parameter
	   * types of this `UrlMatcher`.
	   *
	   * @param {Object} params The object hash of parameters to validate.
	   * @returns {boolean} Returns `true` if `params` validates, otherwise `false`.
	   */
	  UrlMatcher.prototype.validates = function (params) {
	    return this.params.$$validates(params);
	  };
	
	  /**
	   * @ngdoc function
	   * @name ui.router.util.type:UrlMatcher#format
	   * @methodOf ui.router.util.type:UrlMatcher
	   *
	   * @description
	   * Creates a URL that matches this pattern by substituting the specified values
	   * for the path and search parameters. Null values for path parameters are
	   * treated as empty strings.
	   *
	   * @example
	   * <pre>
	   * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });
	   * // returns '/user/bob?q=yes'
	   * </pre>
	   *
	   * @param {Object} values  the values to substitute for the parameters in this pattern.
	   * @returns {string}  the formatted URL (path and optionally search part).
	   */
	  UrlMatcher.prototype.format = function (values) {
	    values = values || {};
	    var segments = this.segments,
	        params = this.parameters(),
	        paramset = this.params;
	    if (!this.validates(values)) return null;
	
	    var i,
	        search = false,
	        nPath = segments.length - 1,
	        nTotal = params.length,
	        result = segments[0];
	
	    function encodeDashes(str) {
	      // Replace dashes with encoded "\-"
	      return encodeURIComponent(str).replace(/-/g, function (c) {
	        return '%5C%' + c.charCodeAt(0).toString(16).toUpperCase();
	      });
	    }
	
	    for (i = 0; i < nTotal; i++) {
	      var isPathParam = i < nPath;
	      var name = params[i],
	          param = paramset[name],
	          value = param.value(values[name]);
	      var isDefaultValue = param.isOptional && param.type.equals(param.value(), value);
	      var squash = isDefaultValue ? param.squash : false;
	      var encoded = param.type.encode(value);
	
	      if (isPathParam) {
	        var nextSegment = segments[i + 1];
	        var isFinalPathParam = i + 1 === nPath;
	
	        if (squash === false) {
	          if (encoded != null) {
	            if (isArray(encoded)) {
	              result += map(encoded, encodeDashes).join("-");
	            } else {
	              result += encodeURIComponent(encoded);
	            }
	          }
	          result += nextSegment;
	        } else if (squash === true) {
	          var capture = result.match(/\/$/) ? /\/?(.*)/ : /(.*)/;
	          result += nextSegment.match(capture)[1];
	        } else if (isString(squash)) {
	          result += squash + nextSegment;
	        }
	
	        if (isFinalPathParam && param.squash === true && result.slice(-1) === '/') result = result.slice(0, -1);
	      } else {
	        if (encoded == null || isDefaultValue && squash !== false) continue;
	        if (!isArray(encoded)) encoded = [encoded];
	        if (encoded.length === 0) continue;
	        encoded = map(encoded, encodeURIComponent).join('&' + name + '=');
	        result += (search ? '&' : '?') + (name + '=' + encoded);
	        search = true;
	      }
	    }
	
	    return result;
	  };
	
	  /**
	   * @ngdoc object
	   * @name ui.router.util.type:Type
	   *
	   * @description
	   * Implements an interface to define custom parameter types that can be decoded from and encoded to
	   * string parameters matched in a URL. Used by {@link ui.router.util.type:UrlMatcher `UrlMatcher`}
	   * objects when matching or formatting URLs, or comparing or validating parameter values.
	   *
	   * See {@link ui.router.util.$urlMatcherFactory#methods_type `$urlMatcherFactory#type()`} for more
	   * information on registering custom types.
	   *
	   * @param {Object} config  A configuration object which contains the custom type definition.  The object's
	   *        properties will override the default methods and/or pattern in `Type`'s public interface.
	   * @example
	   * <pre>
	   * {
	   *   decode: function(val) { return parseInt(val, 10); },
	   *   encode: function(val) { return val && val.toString(); },
	   *   equals: function(a, b) { return this.is(a) && a === b; },
	   *   is: function(val) { return angular.isNumber(val) isFinite(val) && val % 1 === 0; },
	   *   pattern: /\d+/
	   * }
	   * </pre>
	   *
	   * @property {RegExp} pattern The regular expression pattern used to match values of this type when
	   *           coming from a substring of a URL.
	   *
	   * @returns {Object}  Returns a new `Type` object.
	   */
	  function Type(config) {
	    extend(this, config);
	  }
	
	  /**
	   * @ngdoc function
	   * @name ui.router.util.type:Type#is
	   * @methodOf ui.router.util.type:Type
	   *
	   * @description
	   * Detects whether a value is of a particular type. Accepts a native (decoded) value
	   * and determines whether it matches the current `Type` object.
	   *
	   * @param {*} val  The value to check.
	   * @param {string} key  Optional. If the type check is happening in the context of a specific
	   *        {@link ui.router.util.type:UrlMatcher `UrlMatcher`} object, this is the name of the
	   *        parameter in which `val` is stored. Can be used for meta-programming of `Type` objects.
	   * @returns {Boolean}  Returns `true` if the value matches the type, otherwise `false`.
	   */
	  Type.prototype.is = function (val, key) {
	    return true;
	  };
	
	  /**
	   * @ngdoc function
	   * @name ui.router.util.type:Type#encode
	   * @methodOf ui.router.util.type:Type
	   *
	   * @description
	   * Encodes a custom/native type value to a string that can be embedded in a URL. Note that the
	   * return value does *not* need to be URL-safe (i.e. passed through `encodeURIComponent()`), it
	   * only needs to be a representation of `val` that has been coerced to a string.
	   *
	   * @param {*} val  The value to encode.
	   * @param {string} key  The name of the parameter in which `val` is stored. Can be used for
	   *        meta-programming of `Type` objects.
	   * @returns {string}  Returns a string representation of `val` that can be encoded in a URL.
	   */
	  Type.prototype.encode = function (val, key) {
	    return val;
	  };
	
	  /**
	   * @ngdoc function
	   * @name ui.router.util.type:Type#decode
	   * @methodOf ui.router.util.type:Type
	   *
	   * @description
	   * Converts a parameter value (from URL string or transition param) to a custom/native value.
	   *
	   * @param {string} val  The URL parameter value to decode.
	   * @param {string} key  The name of the parameter in which `val` is stored. Can be used for
	   *        meta-programming of `Type` objects.
	   * @returns {*}  Returns a custom representation of the URL parameter value.
	   */
	  Type.prototype.decode = function (val, key) {
	    return val;
	  };
	
	  /**
	   * @ngdoc function
	   * @name ui.router.util.type:Type#equals
	   * @methodOf ui.router.util.type:Type
	   *
	   * @description
	   * Determines whether two decoded values are equivalent.
	   *
	   * @param {*} a  A value to compare against.
	   * @param {*} b  A value to compare against.
	   * @returns {Boolean}  Returns `true` if the values are equivalent/equal, otherwise `false`.
	   */
	  Type.prototype.equals = function (a, b) {
	    return a == b;
	  };
	
	  Type.prototype.$subPattern = function () {
	    var sub = this.pattern.toString();
	    return sub.substr(1, sub.length - 2);
	  };
	
	  Type.prototype.pattern = /.*/;
	
	  Type.prototype.toString = function () {
	    return "{Type:" + this.name + "}";
	  };
	
	  /** Given an encoded string, or a decoded object, returns a decoded object */
	  Type.prototype.$normalize = function (val) {
	    return this.is(val) ? val : this.decode(val);
	  };
	
	  /*
	   * Wraps an existing custom Type as an array of Type, depending on 'mode'.
	   * e.g.:
	   * - urlmatcher pattern "/path?{queryParam[]:int}"
	   * - url: "/path?queryParam=1&queryParam=2
	   * - $stateParams.queryParam will be [1, 2]
	   * if `mode` is "auto", then
	   * - url: "/path?queryParam=1 will create $stateParams.queryParam: 1
	   * - url: "/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]
	   */
	  Type.prototype.$asArray = function (mode, isSearch) {
	    if (!mode) return this;
	    if (mode === "auto" && !isSearch) throw new Error("'auto' array mode is for query parameters only");
	
	    function ArrayType(type, mode) {
	      function bindTo(type, callbackName) {
	        return function () {
	          return type[callbackName].apply(type, arguments);
	        };
	      }
	
	      // Wrap non-array value as array
	      function arrayWrap(val) {
	        return isArray(val) ? val : isDefined(val) ? [val] : [];
	      }
	      // Unwrap array value for "auto" mode. Return undefined for empty array.
	      function arrayUnwrap(val) {
	        switch (val.length) {
	          case 0:
	            return undefined;
	          case 1:
	            return mode === "auto" ? val[0] : val;
	          default:
	            return val;
	        }
	      }
	      function falsey(val) {
	        return !val;
	      }
	
	      // Wraps type (.is/.encode/.decode) functions to operate on each value of an array
	      function arrayHandler(callback, allTruthyMode) {
	        return function handleArray(val) {
	          if (isArray(val) && val.length === 0) return val;
	          val = arrayWrap(val);
	          var result = map(val, callback);
	          if (allTruthyMode === true) return filter(result, falsey).length === 0;
	          return arrayUnwrap(result);
	        };
	      }
	
	      // Wraps type (.equals) functions to operate on each value of an array
	      function arrayEqualsHandler(callback) {
	        return function handleArray(val1, val2) {
	          var left = arrayWrap(val1),
	              right = arrayWrap(val2);
	          if (left.length !== right.length) return false;
	          for (var i = 0; i < left.length; i++) {
	            if (!callback(left[i], right[i])) return false;
	          }
	          return true;
	        };
	      }
	
	      this.encode = arrayHandler(bindTo(type, 'encode'));
	      this.decode = arrayHandler(bindTo(type, 'decode'));
	      this.is = arrayHandler(bindTo(type, 'is'), true);
	      this.equals = arrayEqualsHandler(bindTo(type, 'equals'));
	      this.pattern = type.pattern;
	      this.$normalize = arrayHandler(bindTo(type, '$normalize'));
	      this.name = type.name;
	      this.$arrayMode = mode;
	    }
	
	    return new ArrayType(this, mode);
	  };
	
	  /**
	   * @ngdoc object
	   * @name ui.router.util.$urlMatcherFactory
	   *
	   * @description
	   * Factory for {@link ui.router.util.type:UrlMatcher `UrlMatcher`} instances. The factory
	   * is also available to providers under the name `$urlMatcherFactoryProvider`.
	   */
	  function $UrlMatcherFactory() {
	    $$UMFP = this;
	
	    var isCaseInsensitive = false,
	        isStrictMode = true,
	        defaultSquashPolicy = false;
	
	    // Use tildes to pre-encode slashes.
	    // If the slashes are simply URLEncoded, the browser can choose to pre-decode them,
	    // and bidirectional encoding/decoding fails.
	    // Tilde was chosen because it's not a RFC 3986 section 2.2 Reserved Character
	    function valToString(val) {
	      return val != null ? val.toString().replace(/(~|\/)/g, function (m) {
	        return { '~': '~~', '/': '~2F' }[m];
	      }) : val;
	    }
	    function valFromString(val) {
	      return val != null ? val.toString().replace(/(~~|~2F)/g, function (m) {
	        return { '~~': '~', '~2F': '/' }[m];
	      }) : val;
	    }
	
	    var $types = {},
	        enqueue = true,
	        typeQueue = [],
	        injector,
	        defaultTypes = {
	      "string": {
	        encode: valToString,
	        decode: valFromString,
	        // TODO: in 1.0, make string .is() return false if value is undefined/null by default.
	        // In 0.2.x, string params are optional by default for backwards compat
	        is: function is(val) {
	          return val == null || !isDefined(val) || typeof val === "string";
	        },
	        pattern: /[^/]*/
	      },
	      "int": {
	        encode: valToString,
	        decode: function decode(val) {
	          return parseInt(val, 10);
	        },
	        is: function is(val) {
	          return val !== undefined && val !== null && this.decode(val.toString()) === val;
	        },
	        pattern: /-?\d+/
	      },
	      "bool": {
	        encode: function encode(val) {
	          return val ? 1 : 0;
	        },
	        decode: function decode(val) {
	          return parseInt(val, 10) !== 0;
	        },
	        is: function is(val) {
	          return val === true || val === false;
	        },
	        pattern: /0|1/
	      },
	      "date": {
	        encode: function encode(val) {
	          if (!this.is(val)) return undefined;
	          return [val.getFullYear(), ('0' + (val.getMonth() + 1)).slice(-2), ('0' + val.getDate()).slice(-2)].join("-");
	        },
	        decode: function decode(val) {
	          if (this.is(val)) return val;
	          var match = this.capture.exec(val);
	          return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;
	        },
	        is: function is(val) {
	          return val instanceof Date && !isNaN(val.valueOf());
	        },
	        equals: function equals(a, b) {
	          return this.is(a) && this.is(b) && a.toISOString() === b.toISOString();
	        },
	        pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,
	        capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/
	      },
	      "json": {
	        encode: angular.toJson,
	        decode: angular.fromJson,
	        is: angular.isObject,
	        equals: angular.equals,
	        pattern: /[^/]*/
	      },
	      "any": { // does not encode/decode
	        encode: angular.identity,
	        decode: angular.identity,
	        equals: angular.equals,
	        pattern: /.*/
	      }
	    };
	
	    function getDefaultConfig() {
	      return {
	        strict: isStrictMode,
	        caseInsensitive: isCaseInsensitive
	      };
	    }
	
	    function isInjectable(value) {
	      return isFunction(value) || isArray(value) && isFunction(value[value.length - 1]);
	    }
	
	    /**
	     * [Internal] Get the default value of a parameter, which may be an injectable function.
	     */
	    $UrlMatcherFactory.$$getDefaultValue = function (config) {
	      if (!isInjectable(config.value)) return config.value;
	      if (!injector) throw new Error("Injectable functions cannot be called at configuration time");
	      return injector.invoke(config.value);
	    };
	
	    /**
	     * @ngdoc function
	     * @name ui.router.util.$urlMatcherFactory#caseInsensitive
	     * @methodOf ui.router.util.$urlMatcherFactory
	     *
	     * @description
	     * Defines whether URL matching should be case sensitive (the default behavior), or not.
	     *
	     * @param {boolean} value `false` to match URL in a case sensitive manner; otherwise `true`;
	     * @returns {boolean} the current value of caseInsensitive
	     */
	    this.caseInsensitive = function (value) {
	      if (isDefined(value)) isCaseInsensitive = value;
	      return isCaseInsensitive;
	    };
	
	    /**
	     * @ngdoc function
	     * @name ui.router.util.$urlMatcherFactory#strictMode
	     * @methodOf ui.router.util.$urlMatcherFactory
	     *
	     * @description
	     * Defines whether URLs should match trailing slashes, or not (the default behavior).
	     *
	     * @param {boolean=} value `false` to match trailing slashes in URLs, otherwise `true`.
	     * @returns {boolean} the current value of strictMode
	     */
	    this.strictMode = function (value) {
	      if (isDefined(value)) isStrictMode = value;
	      return isStrictMode;
	    };
	
	    /**
	     * @ngdoc function
	     * @name ui.router.util.$urlMatcherFactory#defaultSquashPolicy
	     * @methodOf ui.router.util.$urlMatcherFactory
	     *
	     * @description
	     * Sets the default behavior when generating or matching URLs with default parameter values.
	     *
	     * @param {string} value A string that defines the default parameter URL squashing behavior.
	     *    `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL
	     *    `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the
	     *             parameter is surrounded by slashes, squash (remove) one slash from the URL
	     *    any other string, e.g. "~": When generating an href with a default parameter value, squash (remove)
	     *             the parameter value from the URL and replace it with this string.
	     */
	    this.defaultSquashPolicy = function (value) {
	      if (!isDefined(value)) return defaultSquashPolicy;
	      if (value !== true && value !== false && !isString(value)) throw new Error("Invalid squash policy: " + value + ". Valid policies: false, true, arbitrary-string");
	      defaultSquashPolicy = value;
	      return value;
	    };
	
	    /**
	     * @ngdoc function
	     * @name ui.router.util.$urlMatcherFactory#compile
	     * @methodOf ui.router.util.$urlMatcherFactory
	     *
	     * @description
	     * Creates a {@link ui.router.util.type:UrlMatcher `UrlMatcher`} for the specified pattern.
	     *
	     * @param {string} pattern  The URL pattern.
	     * @param {Object} config  The config object hash.
	     * @returns {UrlMatcher}  The UrlMatcher.
	     */
	    this.compile = function (pattern, config) {
	      return new UrlMatcher(pattern, extend(getDefaultConfig(), config));
	    };
	
	    /**
	     * @ngdoc function
	     * @name ui.router.util.$urlMatcherFactory#isMatcher
	     * @methodOf ui.router.util.$urlMatcherFactory
	     *
	     * @description
	     * Returns true if the specified object is a `UrlMatcher`, or false otherwise.
	     *
	     * @param {Object} object  The object to perform the type check against.
	     * @returns {Boolean}  Returns `true` if the object matches the `UrlMatcher` interface, by
	     *          implementing all the same methods.
	     */
	    this.isMatcher = function (o) {
	      if (!isObject(o)) return false;
	      var result = true;
	
	      forEach(UrlMatcher.prototype, function (val, name) {
	        if (isFunction(val)) {
	          result = result && isDefined(o[name]) && isFunction(o[name]);
	        }
	      });
	      return result;
	    };
	
	    /**
	     * @ngdoc function
	     * @name ui.router.util.$urlMatcherFactory#type
	     * @methodOf ui.router.util.$urlMatcherFactory
	     *
	     * @description
	     * Registers a custom {@link ui.router.util.type:Type `Type`} object that can be used to
	     * generate URLs with typed parameters.
	     *
	     * @param {string} name  The type name.
	     * @param {Object|Function} definition   The type definition. See
	     *        {@link ui.router.util.type:Type `Type`} for information on the values accepted.
	     * @param {Object|Function} definitionFn (optional) A function that is injected before the app
	     *        runtime starts.  The result of this function is merged into the existing `definition`.
	     *        See {@link ui.router.util.type:Type `Type`} for information on the values accepted.
	     *
	     * @returns {Object}  Returns `$urlMatcherFactoryProvider`.
	     *
	     * @example
	     * This is a simple example of a custom type that encodes and decodes items from an
	     * array, using the array index as the URL-encoded value:
	     *
	     * <pre>
	     * var list = ['John', 'Paul', 'George', 'Ringo'];
	     *
	     * $urlMatcherFactoryProvider.type('listItem', {
	     *   encode: function(item) {
	     *     // Represent the list item in the URL using its corresponding index
	     *     return list.indexOf(item);
	     *   },
	     *   decode: function(item) {
	     *     // Look up the list item by index
	     *     return list[parseInt(item, 10)];
	     *   },
	     *   is: function(item) {
	     *     // Ensure the item is valid by checking to see that it appears
	     *     // in the list
	     *     return list.indexOf(item) > -1;
	     *   }
	     * });
	     *
	     * $stateProvider.state('list', {
	     *   url: "/list/{item:listItem}",
	     *   controller: function($scope, $stateParams) {
	     *     console.log($stateParams.item);
	     *   }
	     * });
	     *
	     * // ...
	     *
	     * // Changes URL to '/list/3', logs "Ringo" to the console
	     * $state.go('list', { item: "Ringo" });
	     * </pre>
	     *
	     * This is a more complex example of a type that relies on dependency injection to
	     * interact with services, and uses the parameter name from the URL to infer how to
	     * handle encoding and decoding parameter values:
	     *
	     * <pre>
	     * // Defines a custom type that gets a value from a service,
	     * // where each service gets different types of values from
	     * // a backend API:
	     * $urlMatcherFactoryProvider.type('dbObject', {}, function(Users, Posts) {
	     *
	     *   // Matches up services to URL parameter names
	     *   var services = {
	     *     user: Users,
	     *     post: Posts
	     *   };
	     *
	     *   return {
	     *     encode: function(object) {
	     *       // Represent the object in the URL using its unique ID
	     *       return object.id;
	     *     },
	     *     decode: function(value, key) {
	     *       // Look up the object by ID, using the parameter
	     *       // name (key) to call the correct service
	     *       return services[key].findById(value);
	     *     },
	     *     is: function(object, key) {
	     *       // Check that object is a valid dbObject
	     *       return angular.isObject(object) && object.id && services[key];
	     *     }
	     *     equals: function(a, b) {
	     *       // Check the equality of decoded objects by comparing
	     *       // their unique IDs
	     *       return a.id === b.id;
	     *     }
	     *   };
	     * });
	     *
	     * // In a config() block, you can then attach URLs with
	     * // type-annotated parameters:
	     * $stateProvider.state('users', {
	     *   url: "/users",
	     *   // ...
	     * }).state('users.item', {
	     *   url: "/{user:dbObject}",
	     *   controller: function($scope, $stateParams) {
	     *     // $stateParams.user will now be an object returned from
	     *     // the Users service
	     *   },
	     *   // ...
	     * });
	     * </pre>
	     */
	    this.type = function (name, definition, definitionFn) {
	      if (!isDefined(definition)) return $types[name];
	      if ($types.hasOwnProperty(name)) throw new Error("A type named '" + name + "' has already been defined.");
	
	      $types[name] = new Type(extend({ name: name }, definition));
	      if (definitionFn) {
	        typeQueue.push({ name: name, def: definitionFn });
	        if (!enqueue) flushTypeQueue();
	      }
	      return this;
	    };
	
	    // `flushTypeQueue()` waits until `$urlMatcherFactory` is injected before invoking the queued `definitionFn`s
	    function flushTypeQueue() {
	      while (typeQueue.length) {
	        var type = typeQueue.shift();
	        if (type.pattern) throw new Error("You cannot override a type's .pattern at runtime.");
	        angular.extend($types[type.name], injector.invoke(type.def));
	      }
	    }
	
	    // Register default types. Store them in the prototype of $types.
	    forEach(defaultTypes, function (type, name) {
	      $types[name] = new Type(extend({ name: name }, type));
	    });
	    $types = inherit($types, {});
	
	    /* No need to document $get, since it returns this */
	    this.$get = ['$injector', function ($injector) {
	      injector = $injector;
	      enqueue = false;
	      flushTypeQueue();
	
	      forEach(defaultTypes, function (type, name) {
	        if (!$types[name]) $types[name] = new Type(type);
	      });
	      return this;
	    }];
	
	    this.Param = function Param(id, type, config, location) {
	      var self = this;
	      config = unwrapShorthand(config);
	      type = getType(config, type, location);
	      var arrayMode = getArrayMode();
	      type = arrayMode ? type.$asArray(arrayMode, location === "search") : type;
	      if (type.name === "string" && !arrayMode && location === "path" && config.value === undefined) config.value = ""; // for 0.2.x; in 0.3.0+ do not automatically default to ""
	      var isOptional = config.value !== undefined;
	      var squash = getSquashPolicy(config, isOptional);
	      var replace = getReplace(config, arrayMode, isOptional, squash);
	
	      function unwrapShorthand(config) {
	        var keys = isObject(config) ? objectKeys(config) : [];
	        var isShorthand = indexOf(keys, "value") === -1 && indexOf(keys, "type") === -1 && indexOf(keys, "squash") === -1 && indexOf(keys, "array") === -1;
	        if (isShorthand) config = { value: config };
	        config.$$fn = isInjectable(config.value) ? config.value : function () {
	          return config.value;
	        };
	        return config;
	      }
	
	      function getType(config, urlType, location) {
	        if (config.type && urlType) throw new Error("Param '" + id + "' has two type configurations.");
	        if (urlType) return urlType;
	        if (!config.type) return location === "config" ? $types.any : $types.string;
	
	        if (angular.isString(config.type)) return $types[config.type];
	        if (config.type instanceof Type) return config.type;
	        return new Type(config.type);
	      }
	
	      // array config: param name (param[]) overrides default settings.  explicit config overrides param name.
	      function getArrayMode() {
	        var arrayDefaults = { array: location === "search" ? "auto" : false };
	        var arrayParamNomenclature = id.match(/\[\]$/) ? { array: true } : {};
	        return extend(arrayDefaults, arrayParamNomenclature, config).array;
	      }
	
	      /**
	       * returns false, true, or the squash value to indicate the "default parameter url squash policy".
	       */
	      function getSquashPolicy(config, isOptional) {
	        var squash = config.squash;
	        if (!isOptional || squash === false) return false;
	        if (!isDefined(squash) || squash == null) return defaultSquashPolicy;
	        if (squash === true || isString(squash)) return squash;
	        throw new Error("Invalid squash policy: '" + squash + "'. Valid policies: false, true, or arbitrary string");
	      }
	
	      function getReplace(config, arrayMode, isOptional, squash) {
	        var replace,
	            configuredKeys,
	            defaultPolicy = [{ from: "", to: isOptional || arrayMode ? undefined : "" }, { from: null, to: isOptional || arrayMode ? undefined : "" }];
	        replace = isArray(config.replace) ? config.replace : [];
	        if (isString(squash)) replace.push({ from: squash, to: undefined });
	        configuredKeys = map(replace, function (item) {
	          return item.from;
	        });
	        return filter(defaultPolicy, function (item) {
	          return indexOf(configuredKeys, item.from) === -1;
	        }).concat(replace);
	      }
	
	      /**
	       * [Internal] Get the default value of a parameter, which may be an injectable function.
	       */
	      function $$getDefaultValue() {
	        if (!injector) throw new Error("Injectable functions cannot be called at configuration time");
	        var defaultValue = injector.invoke(config.$$fn);
	        if (defaultValue !== null && defaultValue !== undefined && !self.type.is(defaultValue)) throw new Error("Default value (" + defaultValue + ") for parameter '" + self.id + "' is not an instance of Type (" + self.type.name + ")");
	        return defaultValue;
	      }
	
	      /**
	       * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the
	       * default value, which may be the result of an injectable function.
	       */
	      function $value(value) {
	        function hasReplaceVal(val) {
	          return function (obj) {
	            return obj.from === val;
	          };
	        }
	        function $replace(value) {
	          var replacement = map(filter(self.replace, hasReplaceVal(value)), function (obj) {
	            return obj.to;
	          });
	          return replacement.length ? replacement[0] : value;
	        }
	        value = $replace(value);
	        return !isDefined(value) ? $$getDefaultValue() : self.type.$normalize(value);
	      }
	
	      function toString() {
	        return "{Param:" + id + " " + type + " squash: '" + squash + "' optional: " + isOptional + "}";
	      }
	
	      extend(this, {
	        id: id,
	        type: type,
	        location: location,
	        array: arrayMode,
	        squash: squash,
	        replace: replace,
	        isOptional: isOptional,
	        value: $value,
	        dynamic: undefined,
	        config: config,
	        toString: toString
	      });
	    };
	
	    function ParamSet(params) {
	      extend(this, params || {});
	    }
	
	    ParamSet.prototype = {
	      $$new: function $$new() {
	        return inherit(this, extend(new ParamSet(), { $$parent: this }));
	      },
	      $$keys: function $$keys() {
	        var keys = [],
	            chain = [],
	            parent = this,
	            ignore = objectKeys(ParamSet.prototype);
	        while (parent) {
	          chain.push(parent);parent = parent.$$parent;
	        }
	        chain.reverse();
	        forEach(chain, function (paramset) {
	          forEach(objectKeys(paramset), function (key) {
	            if (indexOf(keys, key) === -1 && indexOf(ignore, key) === -1) keys.push(key);
	          });
	        });
	        return keys;
	      },
	      $$values: function $$values(paramValues) {
	        var values = {},
	            self = this;
	        forEach(self.$$keys(), function (key) {
	          values[key] = self[key].value(paramValues && paramValues[key]);
	        });
	        return values;
	      },
	      $$equals: function $$equals(paramValues1, paramValues2) {
	        var equal = true,
	            self = this;
	        forEach(self.$$keys(), function (key) {
	          var left = paramValues1 && paramValues1[key],
	              right = paramValues2 && paramValues2[key];
	          if (!self[key].type.equals(left, right)) equal = false;
	        });
	        return equal;
	      },
	      $$validates: function $$validate(paramValues) {
	        var keys = this.$$keys(),
	            i,
	            param,
	            rawVal,
	            normalized,
	            encoded;
	        for (i = 0; i < keys.length; i++) {
	          param = this[keys[i]];
	          rawVal = paramValues[keys[i]];
	          if ((rawVal === undefined || rawVal === null) && param.isOptional) break; // There was no parameter value, but the param is optional
	          normalized = param.type.$normalize(rawVal);
	          if (!param.type.is(normalized)) return false; // The value was not of the correct Type, and could not be decoded to the correct Type
	          encoded = param.type.encode(normalized);
	          if (angular.isString(encoded) && !param.type.pattern.exec(encoded)) return false; // The value was of the correct type, but when encoded, did not match the Type's regexp
	        }
	        return true;
	      },
	      $$parent: undefined
	    };
	
	    this.ParamSet = ParamSet;
	  }
	
	  // Register as a provider so it's available to other providers
	  angular.module('ui.router.util').provider('$urlMatcherFactory', $UrlMatcherFactory);
	  angular.module('ui.router.util').run(['$urlMatcherFactory', function ($urlMatcherFactory) {}]);
	
	  /**
	   * @ngdoc object
	   * @name ui.router.router.$urlRouterProvider
	   *
	   * @requires ui.router.util.$urlMatcherFactoryProvider
	   * @requires $locationProvider
	   *
	   * @description
	   * `$urlRouterProvider` has the responsibility of watching `$location`. 
	   * When `$location` changes it runs through a list of rules one by one until a 
	   * match is found. `$urlRouterProvider` is used behind the scenes anytime you specify 
	   * a url in a state configuration. All urls are compiled into a UrlMatcher object.
	   *
	   * There are several methods on `$urlRouterProvider` that make it useful to use directly
	   * in your module config.
	   */
	  $UrlRouterProvider.$inject = ['$locationProvider', '$urlMatcherFactoryProvider'];
	  function $UrlRouterProvider($locationProvider, $urlMatcherFactory) {
	    var rules = [],
	        otherwise = null,
	        interceptDeferred = false,
	        listener;
	
	    // Returns a string that is a prefix of all strings matching the RegExp
	    function regExpPrefix(re) {
	      var prefix = /^\^((?:\\[^a-zA-Z0-9]|[^\\\[\]\^$*+?.()|{}]+)*)/.exec(re.source);
	      return prefix != null ? prefix[1].replace(/\\(.)/g, "$1") : '';
	    }
	
	    // Interpolates matched values into a String.replace()-style pattern
	    function interpolate(pattern, match) {
	      return pattern.replace(/\$(\$|\d{1,2})/, function (m, what) {
	        return match[what === '$' ? 0 : Number(what)];
	      });
	    }
	
	    /**
	     * @ngdoc function
	     * @name ui.router.router.$urlRouterProvider#rule
	     * @methodOf ui.router.router.$urlRouterProvider
	     *
	     * @description
	     * Defines rules that are used by `$urlRouterProvider` to find matches for
	     * specific URLs.
	     *
	     * @example
	     * <pre>
	     * var app = angular.module('app', ['ui.router.router']);
	     *
	     * app.config(function ($urlRouterProvider) {
	     *   // Here's an example of how you might allow case insensitive urls
	     *   $urlRouterProvider.rule(function ($injector, $location) {
	     *     var path = $location.path(),
	     *         normalized = path.toLowerCase();
	     *
	     *     if (path !== normalized) {
	     *       return normalized;
	     *     }
	     *   });
	     * });
	     * </pre>
	     *
	     * @param {function} rule Handler function that takes `$injector` and `$location`
	     * services as arguments. You can use them to return a valid path as a string.
	     *
	     * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance
	     */
	    this.rule = function (rule) {
	      if (!isFunction(rule)) throw new Error("'rule' must be a function");
	      rules.push(rule);
	      return this;
	    };
	
	    /**
	     * @ngdoc object
	     * @name ui.router.router.$urlRouterProvider#otherwise
	     * @methodOf ui.router.router.$urlRouterProvider
	     *
	     * @description
	     * Defines a path that is used when an invalid route is requested.
	     *
	     * @example
	     * <pre>
	     * var app = angular.module('app', ['ui.router.router']);
	     *
	     * app.config(function ($urlRouterProvider) {
	     *   // if the path doesn't match any of the urls you configured
	     *   // otherwise will take care of routing the user to the
	     *   // specified url
	     *   $urlRouterProvider.otherwise('/index');
	     *
	     *   // Example of using function rule as param
	     *   $urlRouterProvider.otherwise(function ($injector, $location) {
	     *     return '/a/valid/url';
	     *   });
	     * });
	     * </pre>
	     *
	     * @param {string|function} rule The url path you want to redirect to or a function 
	     * rule that returns the url path. The function version is passed two params: 
	     * `$injector` and `$location` services, and must return a url string.
	     *
	     * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance
	     */
	    this.otherwise = function (rule) {
	      if (isString(rule)) {
	        var redirect = rule;
	        rule = function rule() {
	          return redirect;
	        };
	      } else if (!isFunction(rule)) throw new Error("'rule' must be a function");
	      otherwise = rule;
	      return this;
	    };
	
	    function handleIfMatch($injector, handler, match) {
	      if (!match) return false;
	      var result = $injector.invoke(handler, handler, { $match: match });
	      return isDefined(result) ? result : true;
	    }
	
	    /**
	     * @ngdoc function
	     * @name ui.router.router.$urlRouterProvider#when
	     * @methodOf ui.router.router.$urlRouterProvider
	     *
	     * @description
	     * Registers a handler for a given url matching. 
	     * 
	     * If the handler is a string, it is
	     * treated as a redirect, and is interpolated according to the syntax of match
	     * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).
	     *
	     * If the handler is a function, it is injectable. It gets invoked if `$location`
	     * matches. You have the option of inject the match object as `$match`.
	     *
	     * The handler can return
	     *
	     * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`
	     *   will continue trying to find another one that matches.
	     * - **string** which is treated as a redirect and passed to `$location.url()`
	     * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.
	     *
	     * @example
	     * <pre>
	     * var app = angular.module('app', ['ui.router.router']);
	     *
	     * app.config(function ($urlRouterProvider) {
	     *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {
	     *     if ($state.$current.navigable !== state ||
	     *         !equalForKeys($match, $stateParams) {
	     *      $state.transitionTo(state, $match, false);
	     *     }
	     *   });
	     * });
	     * </pre>
	     *
	     * @param {string|object} what The incoming path that you want to redirect.
	     * @param {string|function} handler The path you want to redirect your user to.
	     */
	    this.when = function (what, handler) {
	      var redirect,
	          handlerIsString = isString(handler);
	      if (isString(what)) what = $urlMatcherFactory.compile(what);
	
	      if (!handlerIsString && !isFunction(handler) && !isArray(handler)) throw new Error("invalid 'handler' in when()");
	
	      var strategies = {
	        matcher: function matcher(what, handler) {
	          if (handlerIsString) {
	            redirect = $urlMatcherFactory.compile(handler);
	            handler = ['$match', function ($match) {
	              return redirect.format($match);
	            }];
	          }
	          return extend(function ($injector, $location) {
	            return handleIfMatch($injector, handler, what.exec($location.path(), $location.search()));
	          }, {
	            prefix: isString(what.prefix) ? what.prefix : ''
	          });
	        },
	        regex: function regex(what, handler) {
	          if (what.global || what.sticky) throw new Error("when() RegExp must not be global or sticky");
	
	          if (handlerIsString) {
	            redirect = handler;
	            handler = ['$match', function ($match) {
	              return interpolate(redirect, $match);
	            }];
	          }
	          return extend(function ($injector, $location) {
	            return handleIfMatch($injector, handler, what.exec($location.path()));
	          }, {
	            prefix: regExpPrefix(what)
	          });
	        }
	      };
	
	      var check = { matcher: $urlMatcherFactory.isMatcher(what), regex: what instanceof RegExp };
	
	      for (var n in check) {
	        if (check[n]) return this.rule(strategies[n](what, handler));
	      }
	
	      throw new Error("invalid 'what' in when()");
	    };
	
	    /**
	     * @ngdoc function
	     * @name ui.router.router.$urlRouterProvider#deferIntercept
	     * @methodOf ui.router.router.$urlRouterProvider
	     *
	     * @description
	     * Disables (or enables) deferring location change interception.
	     *
	     * If you wish to customize the behavior of syncing the URL (for example, if you wish to
	     * defer a transition but maintain the current URL), call this method at configuration time.
	     * Then, at run time, call `$urlRouter.listen()` after you have configured your own
	     * `$locationChangeSuccess` event handler.
	     *
	     * @example
	     * <pre>
	     * var app = angular.module('app', ['ui.router.router']);
	     *
	     * app.config(function ($urlRouterProvider) {
	     *
	     *   // Prevent $urlRouter from automatically intercepting URL changes;
	     *   // this allows you to configure custom behavior in between
	     *   // location changes and route synchronization:
	     *   $urlRouterProvider.deferIntercept();
	     *
	     * }).run(function ($rootScope, $urlRouter, UserService) {
	     *
	     *   $rootScope.$on('$locationChangeSuccess', function(e) {
	     *     // UserService is an example service for managing user state
	     *     if (UserService.isLoggedIn()) return;
	     *
	     *     // Prevent $urlRouter's default handler from firing
	     *     e.preventDefault();
	     *
	     *     UserService.handleLogin().then(function() {
	     *       // Once the user has logged in, sync the current URL
	     *       // to the router:
	     *       $urlRouter.sync();
	     *     });
	     *   });
	     *
	     *   // Configures $urlRouter's listener *after* your custom listener
	     *   $urlRouter.listen();
	     * });
	     * </pre>
	     *
	     * @param {boolean} defer Indicates whether to defer location change interception. Passing
	              no parameter is equivalent to `true`.
	     */
	    this.deferIntercept = function (defer) {
	      if (defer === undefined) defer = true;
	      interceptDeferred = defer;
	    };
	
	    /**
	     * @ngdoc object
	     * @name ui.router.router.$urlRouter
	     *
	     * @requires $location
	     * @requires $rootScope
	     * @requires $injector
	     * @requires $browser
	     *
	     * @description
	     *
	     */
	    this.$get = $get;
	    $get.$inject = ['$location', '$rootScope', '$injector', '$browser', '$sniffer'];
	    function $get($location, $rootScope, $injector, $browser, $sniffer) {
	
	      var baseHref = $browser.baseHref(),
	          location = $location.url(),
	          lastPushedUrl;
	
	      function appendBasePath(url, isHtml5, absolute) {
	        if (baseHref === '/') return url;
	        if (isHtml5) return baseHref.slice(0, -1) + url;
	        if (absolute) return baseHref.slice(1) + url;
	        return url;
	      }
	
	      // TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree
	      function update(evt) {
	        if (evt && evt.defaultPrevented) return;
	        var ignoreUpdate = lastPushedUrl && $location.url() === lastPushedUrl;
	        lastPushedUrl = undefined;
	        // TODO: Re-implement this in 1.0 for https://github.com/angular-ui/ui-router/issues/1573
	        //if (ignoreUpdate) return true;
	
	        function check(rule) {
	          var handled = rule($injector, $location);
	
	          if (!handled) return false;
	          if (isString(handled)) $location.replace().url(handled);
	          return true;
	        }
	        var n = rules.length,
	            i;
	
	        for (i = 0; i < n; i++) {
	          if (check(rules[i])) return;
	        }
	        // always check otherwise last to allow dynamic updates to the set of rules
	        if (otherwise) check(otherwise);
	      }
	
	      function _listen() {
	        listener = listener || $rootScope.$on('$locationChangeSuccess', update);
	        return listener;
	      }
	
	      if (!interceptDeferred) _listen();
	
	      return {
	        /**
	         * @ngdoc function
	         * @name ui.router.router.$urlRouter#sync
	         * @methodOf ui.router.router.$urlRouter
	         *
	         * @description
	         * Triggers an update; the same update that happens when the address bar url changes, aka `$locationChangeSuccess`.
	         * This method is useful when you need to use `preventDefault()` on the `$locationChangeSuccess` event,
	         * perform some custom logic (route protection, auth, config, redirection, etc) and then finally proceed
	         * with the transition by calling `$urlRouter.sync()`.
	         *
	         * @example
	         * <pre>
	         * angular.module('app', ['ui.router'])
	         *   .run(function($rootScope, $urlRouter) {
	         *     $rootScope.$on('$locationChangeSuccess', function(evt) {
	         *       // Halt state change from even starting
	         *       evt.preventDefault();
	         *       // Perform custom logic
	         *       var meetsRequirement = ...
	         *       // Continue with the update and state transition if logic allows
	         *       if (meetsRequirement) $urlRouter.sync();
	         *     });
	         * });
	         * </pre>
	         */
	        sync: function sync() {
	          update();
	        },
	
	        listen: function listen() {
	          return _listen();
	        },
	
	        update: function update(read) {
	          if (read) {
	            location = $location.url();
	            return;
	          }
	          if ($location.url() === location) return;
	
	          $location.url(location);
	          $location.replace();
	        },
	
	        push: function push(urlMatcher, params, options) {
	          var url = urlMatcher.format(params || {});
	
	          // Handle the special hash param, if needed
	          if (url !== null && params && params['#']) {
	            url += '#' + params['#'];
	          }
	
	          $location.url(url);
	          lastPushedUrl = options && options.$$avoidResync ? $location.url() : undefined;
	          if (options && options.replace) $location.replace();
	        },
	
	        /**
	         * @ngdoc function
	         * @name ui.router.router.$urlRouter#href
	         * @methodOf ui.router.router.$urlRouter
	         *
	         * @description
	         * A URL generation method that returns the compiled URL for a given
	         * {@link ui.router.util.type:UrlMatcher `UrlMatcher`}, populated with the provided parameters.
	         *
	         * @example
	         * <pre>
	         * $bob = $urlRouter.href(new UrlMatcher("/about/:person"), {
	         *   person: "bob"
	         * });
	         * // $bob == "/about/bob";
	         * </pre>
	         *
	         * @param {UrlMatcher} urlMatcher The `UrlMatcher` object which is used as the template of the URL to generate.
	         * @param {object=} params An object of parameter values to fill the matcher's required parameters.
	         * @param {object=} options Options object. The options are:
	         *
	         * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
	         *
	         * @returns {string} Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`
	         */
	        href: function href(urlMatcher, params, options) {
	          if (!urlMatcher.validates(params)) return null;
	
	          var isHtml5 = $locationProvider.html5Mode();
	          if (angular.isObject(isHtml5)) {
	            isHtml5 = isHtml5.enabled;
	          }
	
	          isHtml5 = isHtml5 && $sniffer.history;
	
	          var url = urlMatcher.format(params);
	          options = options || {};
	
	          if (!isHtml5 && url !== null) {
	            url = "#" + $locationProvider.hashPrefix() + url;
	          }
	
	          // Handle special hash param, if needed
	          if (url !== null && params && params['#']) {
	            url += '#' + params['#'];
	          }
	
	          url = appendBasePath(url, isHtml5, options.absolute);
	
	          if (!options.absolute || !url) {
	            return url;
	          }
	
	          var slash = !isHtml5 && url ? '/' : '',
	              port = $location.port();
	          port = port === 80 || port === 443 ? '' : ':' + port;
	
	          return [$location.protocol(), '://', $location.host(), port, slash, url].join('');
	        }
	      };
	    }
	  }
	
	  angular.module('ui.router.router').provider('$urlRouter', $UrlRouterProvider);
	
	  /**
	   * @ngdoc object
	   * @name ui.router.state.$stateProvider
	   *
	   * @requires ui.router.router.$urlRouterProvider
	   * @requires ui.router.util.$urlMatcherFactoryProvider
	   *
	   * @description
	   * The new `$stateProvider` works similar to Angular's v1 router, but it focuses purely
	   * on state.
	   *
	   * A state corresponds to a "place" in the application in terms of the overall UI and
	   * navigation. A state describes (via the controller / template / view properties) what
	   * the UI looks like and does at that place.
	   *
	   * States often have things in common, and the primary way of factoring out these
	   * commonalities in this model is via the state hierarchy, i.e. parent/child states aka
	   * nested states.
	   *
	   * The `$stateProvider` provides interfaces to declare these states for your app.
	   */
	  $StateProvider.$inject = ['$urlRouterProvider', '$urlMatcherFactoryProvider'];
	  function $StateProvider($urlRouterProvider, $urlMatcherFactory) {
	
	    var root,
	        states = {},
	        $state,
	        queue = {},
	        abstractKey = 'abstract';
	
	    // Builds state properties from definition passed to registerState()
	    var stateBuilder = {
	
	      // Derive parent state from a hierarchical name only if 'parent' is not explicitly defined.
	      // state.children = [];
	      // if (parent) parent.children.push(state);
	      parent: function parent(state) {
	        if (isDefined(state.parent) && state.parent) return findState(state.parent);
	        // regex matches any valid composite state name
	        // would match "contact.list" but not "contacts"
	        var compositeName = /^(.+)\.[^.]+$/.exec(state.name);
	        return compositeName ? findState(compositeName[1]) : root;
	      },
	
	      // inherit 'data' from parent and override by own values (if any)
	      data: function data(state) {
	        if (state.parent && state.parent.data) {
	          state.data = state.self.data = inherit(state.parent.data, state.data);
	        }
	        return state.data;
	      },
	
	      // Build a URLMatcher if necessary, either via a relative or absolute URL
	      url: function url(state) {
	        var url = state.url,
	            config = { params: state.params || {} };
	
	        if (isString(url)) {
	          if (url.charAt(0) == '^') return $urlMatcherFactory.compile(url.substring(1), config);
	          return (state.parent.navigable || root).url.concat(url, config);
	        }
	
	        if (!url || $urlMatcherFactory.isMatcher(url)) return url;
	        throw new Error("Invalid url '" + url + "' in state '" + state + "'");
	      },
	
	      // Keep track of the closest ancestor state that has a URL (i.e. is navigable)
	      navigable: function navigable(state) {
	        return state.url ? state : state.parent ? state.parent.navigable : null;
	      },
	
	      // Own parameters for this state. state.url.params is already built at this point. Create and add non-url params
	      ownParams: function ownParams(state) {
	        var params = state.url && state.url.params || new $$UMFP.ParamSet();
	        forEach(state.params || {}, function (config, id) {
	          if (!params[id]) params[id] = new $$UMFP.Param(id, null, config, "config");
	        });
	        return params;
	      },
	
	      // Derive parameters for this state and ensure they're a super-set of parent's parameters
	      params: function params(state) {
	        var ownParams = pick(state.ownParams, state.ownParams.$$keys());
	        return state.parent && state.parent.params ? extend(state.parent.params.$$new(), ownParams) : new $$UMFP.ParamSet();
	      },
	
	      // If there is no explicit multi-view configuration, make one up so we don't have
	      // to handle both cases in the view directive later. Note that having an explicit
	      // 'views' property will mean the default unnamed view properties are ignored. This
	      // is also a good time to resolve view names to absolute names, so everything is a
	      // straight lookup at link time.
	      views: function views(state) {
	        var views = {};
	
	        forEach(isDefined(state.views) ? state.views : { '': state }, function (view, name) {
	          if (name.indexOf('@') < 0) name += '@' + state.parent.name;
	          view.resolveAs = view.resolveAs || state.resolveAs || '$resolve';
	          views[name] = view;
	        });
	        return views;
	      },
	
	      // Keep a full path from the root down to this state as this is needed for state activation.
	      path: function path(state) {
	        return state.parent ? state.parent.path.concat(state) : []; // exclude root from path
	      },
	
	      // Speed up $state.contains() as it's used a lot
	      includes: function includes(state) {
	        var includes = state.parent ? extend({}, state.parent.includes) : {};
	        includes[state.name] = true;
	        return includes;
	      },
	
	      $delegates: {}
	    };
	
	    function isRelative(stateName) {
	      return stateName.indexOf(".") === 0 || stateName.indexOf("^") === 0;
	    }
	
	    function findState(stateOrName, base) {
	      if (!stateOrName) return undefined;
	
	      var isStr = isString(stateOrName),
	          name = isStr ? stateOrName : stateOrName.name,
	          path = isRelative(name);
	
	      if (path) {
	        if (!base) throw new Error("No reference point given for path '" + name + "'");
	        base = findState(base);
	
	        var rel = name.split("."),
	            i = 0,
	            pathLength = rel.length,
	            current = base;
	
	        for (; i < pathLength; i++) {
	          if (rel[i] === "" && i === 0) {
	            current = base;
	            continue;
	          }
	          if (rel[i] === "^") {
	            if (!current.parent) throw new Error("Path '" + name + "' not valid for state '" + base.name + "'");
	            current = current.parent;
	            continue;
	          }
	          break;
	        }
	        rel = rel.slice(i).join(".");
	        name = current.name + (current.name && rel ? "." : "") + rel;
	      }
	      var state = states[name];
	
	      if (state && (isStr || !isStr && (state === stateOrName || state.self === stateOrName))) {
	        return state;
	      }
	      return undefined;
	    }
	
	    function queueState(parentName, state) {
	      if (!queue[parentName]) {
	        queue[parentName] = [];
	      }
	      queue[parentName].push(state);
	    }
	
	    function flushQueuedChildren(parentName) {
	      var queued = queue[parentName] || [];
	      while (queued.length) {
	        registerState(queued.shift());
	      }
	    }
	
	    function registerState(state) {
	      // Wrap a new object around the state so we can store our private details easily.
	      state = inherit(state, {
	        self: state,
	        resolve: state.resolve || {},
	        toString: function toString() {
	          return this.name;
	        }
	      });
	
	      var name = state.name;
	      if (!isString(name) || name.indexOf('@') >= 0) throw new Error("State must have a valid name");
	      if (states.hasOwnProperty(name)) throw new Error("State '" + name + "' is already defined");
	
	      // Get parent name
	      var parentName = name.indexOf('.') !== -1 ? name.substring(0, name.lastIndexOf('.')) : isString(state.parent) ? state.parent : isObject(state.parent) && isString(state.parent.name) ? state.parent.name : '';
	
	      // If parent is not registered yet, add state to queue and register later
	      if (parentName && !states[parentName]) {
	        return queueState(parentName, state.self);
	      }
	
	      for (var key in stateBuilder) {
	        if (isFunction(stateBuilder[key])) state[key] = stateBuilder[key](state, stateBuilder.$delegates[key]);
	      }
	      states[name] = state;
	
	      // Register the state in the global state list and with $urlRouter if necessary.
	      if (!state[abstractKey] && state.url) {
	        $urlRouterProvider.when(state.url, ['$match', '$stateParams', function ($match, $stateParams) {
	          if ($state.$current.navigable != state || !equalForKeys($match, $stateParams)) {
	            $state.transitionTo(state, $match, { inherit: true, location: false });
	          }
	        }]);
	      }
	
	      // Register any queued children
	      flushQueuedChildren(name);
	
	      return state;
	    }
	
	    // Checks text to see if it looks like a glob.
	    function isGlob(text) {
	      return text.indexOf('*') > -1;
	    }
	
	    // Returns true if glob matches current $state name.
	    function doesStateMatchGlob(glob) {
	      var globSegments = glob.split('.'),
	          segments = $state.$current.name.split('.');
	
	      //match single stars
	      for (var i = 0, l = globSegments.length; i < l; i++) {
	        if (globSegments[i] === '*') {
	          segments[i] = '*';
	        }
	      }
	
	      //match greedy starts
	      if (globSegments[0] === '**') {
	        segments = segments.slice(indexOf(segments, globSegments[1]));
	        segments.unshift('**');
	      }
	      //match greedy ends
	      if (globSegments[globSegments.length - 1] === '**') {
	        segments.splice(indexOf(segments, globSegments[globSegments.length - 2]) + 1, Number.MAX_VALUE);
	        segments.push('**');
	      }
	
	      if (globSegments.length != segments.length) {
	        return false;
	      }
	
	      return segments.join('') === globSegments.join('');
	    }
	
	    // Implicit root state that is always active
	    root = registerState({
	      name: '',
	      url: '^',
	      views: null,
	      'abstract': true
	    });
	    root.navigable = null;
	
	    /**
	     * @ngdoc function
	     * @name ui.router.state.$stateProvider#decorator
	     * @methodOf ui.router.state.$stateProvider
	     *
	     * @description
	     * Allows you to extend (carefully) or override (at your own peril) the 
	     * `stateBuilder` object used internally by `$stateProvider`. This can be used 
	     * to add custom functionality to ui-router, for example inferring templateUrl 
	     * based on the state name.
	     *
	     * When passing only a name, it returns the current (original or decorated) builder
	     * function that matches `name`.
	     *
	     * The builder functions that can be decorated are listed below. Though not all
	     * necessarily have a good use case for decoration, that is up to you to decide.
	     *
	     * In addition, users can attach custom decorators, which will generate new 
	     * properties within the state's internal definition. There is currently no clear 
	     * use-case for this beyond accessing internal states (i.e. $state.$current), 
	     * however, expect this to become increasingly relevant as we introduce additional 
	     * meta-programming features.
	     *
	     * **Warning**: Decorators should not be interdependent because the order of 
	     * execution of the builder functions in non-deterministic. Builder functions 
	     * should only be dependent on the state definition object and super function.
	     *
	     *
	     * Existing builder functions and current return values:
	     *
	     * - **parent** `{object}` - returns the parent state object.
	     * - **data** `{object}` - returns state data, including any inherited data that is not
	     *   overridden by own values (if any).
	     * - **url** `{object}` - returns a {@link ui.router.util.type:UrlMatcher UrlMatcher}
	     *   or `null`.
	     * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is 
	     *   navigable).
	     * - **params** `{object}` - returns an array of state params that are ensured to 
	     *   be a super-set of parent's params.
	     * - **views** `{object}` - returns a views object where each key is an absolute view 
	     *   name (i.e. "viewName@stateName") and each value is the config object 
	     *   (template, controller) for the view. Even when you don't use the views object 
	     *   explicitly on a state config, one is still created for you internally.
	     *   So by decorating this builder function you have access to decorating template 
	     *   and controller properties.
	     * - **ownParams** `{object}` - returns an array of params that belong to the state, 
	     *   not including any params defined by ancestor states.
	     * - **path** `{string}` - returns the full path from the root down to this state. 
	     *   Needed for state activation.
	     * - **includes** `{object}` - returns an object that includes every state that 
	     *   would pass a `$state.includes()` test.
	     *
	     * @example
	     * <pre>
	     * // Override the internal 'views' builder with a function that takes the state
	     * // definition, and a reference to the internal function being overridden:
	     * $stateProvider.decorator('views', function (state, parent) {
	     *   var result = {},
	     *       views = parent(state);
	     *
	     *   angular.forEach(views, function (config, name) {
	     *     var autoName = (state.name + '.' + name).replace('.', '/');
	     *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';
	     *     result[name] = config;
	     *   });
	     *   return result;
	     * });
	     *
	     * $stateProvider.state('home', {
	     *   views: {
	     *     'contact.list': { controller: 'ListController' },
	     *     'contact.item': { controller: 'ItemController' }
	     *   }
	     * });
	     *
	     * // ...
	     *
	     * $state.go('home');
	     * // Auto-populates list and item views with /partials/home/contact/list.html,
	     * // and /partials/home/contact/item.html, respectively.
	     * </pre>
	     *
	     * @param {string} name The name of the builder function to decorate. 
	     * @param {object} func A function that is responsible for decorating the original 
	     * builder function. The function receives two parameters:
	     *
	     *   - `{object}` - state - The state config object.
	     *   - `{object}` - super - The original builder function.
	     *
	     * @return {object} $stateProvider - $stateProvider instance
	     */
	    this.decorator = decorator;
	    function decorator(name, func) {
	      /*jshint validthis: true */
	      if (isString(name) && !isDefined(func)) {
	        return stateBuilder[name];
	      }
	      if (!isFunction(func) || !isString(name)) {
	        return this;
	      }
	      if (stateBuilder[name] && !stateBuilder.$delegates[name]) {
	        stateBuilder.$delegates[name] = stateBuilder[name];
	      }
	      stateBuilder[name] = func;
	      return this;
	    }
	
	    /**
	     * @ngdoc function
	     * @name ui.router.state.$stateProvider#state
	     * @methodOf ui.router.state.$stateProvider
	     *
	     * @description
	     * Registers a state configuration under a given state name. The stateConfig object
	     * has the following acceptable properties.
	     *
	     * @param {string} name A unique state name, e.g. "home", "about", "contacts".
	     * To create a parent/child state use a dot, e.g. "about.sales", "home.newest".
	     * @param {object} stateConfig State configuration object.
	     * @param {string|function=} stateConfig.template
	     * <a id='template'></a>
	     *   html template as a string or a function that returns
	     *   an html template as a string which should be used by the uiView directives. This property 
	     *   takes precedence over templateUrl.
	     *   
	     *   If `template` is a function, it will be called with the following parameters:
	     *
	     *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by
	     *     applying the current state
	     *
	     * <pre>template:
	     *   "<h1>inline template definition</h1>" +
	     *   "<div ui-view></div>"</pre>
	     * <pre>template: function(params) {
	     *       return "<h1>generated template</h1>"; }</pre>
	     * </div>
	     *
	     * @param {string|function=} stateConfig.templateUrl
	     * <a id='templateUrl'></a>
	     *
	     *   path or function that returns a path to an html
	     *   template that should be used by uiView.
	     *   
	     *   If `templateUrl` is a function, it will be called with the following parameters:
	     *
	     *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by 
	     *     applying the current state
	     *
	     * <pre>templateUrl: "home.html"</pre>
	     * <pre>templateUrl: function(params) {
	     *     return myTemplates[params.pageId]; }</pre>
	     *
	     * @param {function=} stateConfig.templateProvider
	     * <a id='templateProvider'></a>
	     *    Provider function that returns HTML content string.
	     * <pre> templateProvider:
	     *       function(MyTemplateService, params) {
	     *         return MyTemplateService.getTemplate(params.pageId);
	     *       }</pre>
	     *
	     * @param {string|function=} stateConfig.controller
	     * <a id='controller'></a>
	     *
	     *  Controller fn that should be associated with newly
	     *   related scope or the name of a registered controller if passed as a string.
	     *   Optionally, the ControllerAs may be declared here.
	     * <pre>controller: "MyRegisteredController"</pre>
	     * <pre>controller:
	     *     "MyRegisteredController as fooCtrl"}</pre>
	     * <pre>controller: function($scope, MyService) {
	     *     $scope.data = MyService.getData(); }</pre>
	     *
	     * @param {function=} stateConfig.controllerProvider
	     * <a id='controllerProvider'></a>
	     *
	     * Injectable provider function that returns the actual controller or string.
	     * <pre>controllerProvider:
	     *   function(MyResolveData) {
	     *     if (MyResolveData.foo)
	     *       return "FooCtrl"
	     *     else if (MyResolveData.bar)
	     *       return "BarCtrl";
	     *     else return function($scope) {
	     *       $scope.baz = "Qux";
	     *     }
	     *   }</pre>
	     *
	     * @param {string=} stateConfig.controllerAs
	     * <a id='controllerAs'></a>
	     * 
	     * A controller alias name. If present the controller will be
	     *   published to scope under the controllerAs name.
	     * <pre>controllerAs: "myCtrl"</pre>
	     *
	     * @param {string|object=} stateConfig.parent
	     * <a id='parent'></a>
	     * Optionally specifies the parent state of this state.
	     *
	     * <pre>parent: 'parentState'</pre>
	     * <pre>parent: parentState // JS variable</pre>
	     *
	     * @param {object=} stateConfig.resolve
	     * <a id='resolve'></a>
	     *
	     * An optional map&lt;string, function&gt; of dependencies which
	     *   should be injected into the controller. If any of these dependencies are promises, 
	     *   the router will wait for them all to be resolved before the controller is instantiated.
	     *   If all the promises are resolved successfully, the $stateChangeSuccess event is fired
	     *   and the values of the resolved promises are injected into any controllers that reference them.
	     *   If any  of the promises are rejected the $stateChangeError event is fired.
	     *
	     *   The map object is:
	     *   
	     *   - key - {string}: name of dependency to be injected into controller
	     *   - factory - {string|function}: If string then it is alias for service. Otherwise if function, 
	     *     it is injected and return value it treated as dependency. If result is a promise, it is 
	     *     resolved before its value is injected into controller.
	     *
	     * <pre>resolve: {
	     *     myResolve1:
	     *       function($http, $stateParams) {
	     *         return $http.get("/api/foos/"+stateParams.fooID);
	     *       }
	     *     }</pre>
	     *
	     * @param {string=} stateConfig.url
	     * <a id='url'></a>
	     *
	     *   A url fragment with optional parameters. When a state is navigated or
	     *   transitioned to, the `$stateParams` service will be populated with any 
	     *   parameters that were passed.
	     *
	     *   (See {@link ui.router.util.type:UrlMatcher UrlMatcher} `UrlMatcher`} for
	     *   more details on acceptable patterns )
	     *
	     * examples:
	     * <pre>url: "/home"
	     * url: "/users/:userid"
	     * url: "/books/{bookid:[a-zA-Z_-]}"
	     * url: "/books/{categoryid:int}"
	     * url: "/books/{publishername:string}/{categoryid:int}"
	     * url: "/messages?before&after"
	     * url: "/messages?{before:date}&{after:date}"
	     * url: "/messages/:mailboxid?{before:date}&{after:date}"
	     * </pre>
	     *
	     * @param {object=} stateConfig.views
	     * <a id='views'></a>
	     * an optional map&lt;string, object&gt; which defined multiple views, or targets views
	     * manually/explicitly.
	     *
	     * Examples:
	     *
	     * Targets three named `ui-view`s in the parent state's template
	     * <pre>views: {
	     *     header: {
	     *       controller: "headerCtrl",
	     *       templateUrl: "header.html"
	     *     }, body: {
	     *       controller: "bodyCtrl",
	     *       templateUrl: "body.html"
	     *     }, footer: {
	     *       controller: "footCtrl",
	     *       templateUrl: "footer.html"
	     *     }
	     *   }</pre>
	     *
	     * Targets named `ui-view="header"` from grandparent state 'top''s template, and named `ui-view="body" from parent state's template.
	     * <pre>views: {
	     *     'header@top': {
	     *       controller: "msgHeaderCtrl",
	     *       templateUrl: "msgHeader.html"
	     *     }, 'body': {
	     *       controller: "messagesCtrl",
	     *       templateUrl: "messages.html"
	     *     }
	     *   }</pre>
	     *
	     * @param {boolean=} [stateConfig.abstract=false]
	     * <a id='abstract'></a>
	     * An abstract state will never be directly activated,
	     *   but can provide inherited properties to its common children states.
	     * <pre>abstract: true</pre>
	     *
	     * @param {function=} stateConfig.onEnter
	     * <a id='onEnter'></a>
	     *
	     * Callback function for when a state is entered. Good way
	     *   to trigger an action or dispatch an event, such as opening a dialog.
	     * If minifying your scripts, make sure to explicitly annotate this function,
	     * because it won't be automatically annotated by your build tools.
	     *
	     * <pre>onEnter: function(MyService, $stateParams) {
	     *     MyService.foo($stateParams.myParam);
	     * }</pre>
	     *
	     * @param {function=} stateConfig.onExit
	     * <a id='onExit'></a>
	     *
	     * Callback function for when a state is exited. Good way to
	     *   trigger an action or dispatch an event, such as opening a dialog.
	     * If minifying your scripts, make sure to explicitly annotate this function,
	     * because it won't be automatically annotated by your build tools.
	     *
	     * <pre>onExit: function(MyService, $stateParams) {
	     *     MyService.cleanup($stateParams.myParam);
	     * }</pre>
	     *
	     * @param {boolean=} [stateConfig.reloadOnSearch=true]
	     * <a id='reloadOnSearch'></a>
	     *
	     * If `false`, will not retrigger the same state
	     *   just because a search/query parameter has changed (via $location.search() or $location.hash()). 
	     *   Useful for when you'd like to modify $location.search() without triggering a reload.
	     * <pre>reloadOnSearch: false</pre>
	     *
	     * @param {object=} stateConfig.data
	     * <a id='data'></a>
	     *
	     * Arbitrary data object, useful for custom configuration.  The parent state's `data` is
	     *   prototypally inherited.  In other words, adding a data property to a state adds it to
	     *   the entire subtree via prototypal inheritance.
	     *
	     * <pre>data: {
	     *     requiredRole: 'foo'
	     * } </pre>
	     *
	     * @param {object=} stateConfig.params
	     * <a id='params'></a>
	     *
	     * A map which optionally configures parameters declared in the `url`, or
	     *   defines additional non-url parameters.  For each parameter being
	     *   configured, add a configuration object keyed to the name of the parameter.
	     *
	     *   Each parameter configuration object may contain the following properties:
	     *
	     *   - ** value ** - {object|function=}: specifies the default value for this
	     *     parameter.  This implicitly sets this parameter as optional.
	     *
	     *     When UI-Router routes to a state and no value is
	     *     specified for this parameter in the URL or transition, the
	     *     default value will be used instead.  If `value` is a function,
	     *     it will be injected and invoked, and the return value used.
	     *
	     *     *Note*: `undefined` is treated as "no default value" while `null`
	     *     is treated as "the default value is `null`".
	     *
	     *     *Shorthand*: If you only need to configure the default value of the
	     *     parameter, you may use a shorthand syntax.   In the **`params`**
	     *     map, instead mapping the param name to a full parameter configuration
	     *     object, simply set map it to the default parameter value, e.g.:
	     *
	     * <pre>// define a parameter's default value
	     * params: {
	     *     param1: { value: "defaultValue" }
	     * }
	     * // shorthand default values
	     * params: {
	     *     param1: "defaultValue",
	     *     param2: "param2Default"
	     * }</pre>
	     *
	     *   - ** array ** - {boolean=}: *(default: false)* If true, the param value will be
	     *     treated as an array of values.  If you specified a Type, the value will be
	     *     treated as an array of the specified Type.  Note: query parameter values
	     *     default to a special `"auto"` mode.
	     *
	     *     For query parameters in `"auto"` mode, if multiple  values for a single parameter
	     *     are present in the URL (e.g.: `/foo?bar=1&bar=2&bar=3`) then the values
	     *     are mapped to an array (e.g.: `{ foo: [ '1', '2', '3' ] }`).  However, if
	     *     only one value is present (e.g.: `/foo?bar=1`) then the value is treated as single
	     *     value (e.g.: `{ foo: '1' }`).
	     *
	     * <pre>params: {
	     *     param1: { array: true }
	     * }</pre>
	     *
	     *   - ** squash ** - {bool|string=}: `squash` configures how a default parameter value is represented in the URL when
	     *     the current parameter value is the same as the default value. If `squash` is not set, it uses the
	     *     configured default squash policy.
	     *     (See {@link ui.router.util.$urlMatcherFactory#methods_defaultSquashPolicy `defaultSquashPolicy()`})
	     *
	     *   There are three squash settings:
	     *
	     *     - false: The parameter's default value is not squashed.  It is encoded and included in the URL
	     *     - true: The parameter's default value is omitted from the URL.  If the parameter is preceeded and followed
	     *       by slashes in the state's `url` declaration, then one of those slashes are omitted.
	     *       This can allow for cleaner looking URLs.
	     *     - `"<arbitrary string>"`: The parameter's default value is replaced with an arbitrary placeholder of  your choice.
	     *
	     * <pre>params: {
	     *     param1: {
	     *       value: "defaultId",
	     *       squash: true
	     * } }
	     * // squash "defaultValue" to "~"
	     * params: {
	     *     param1: {
	     *       value: "defaultValue",
	     *       squash: "~"
	     * } }
	     * </pre>
	     *
	     *
	     * @example
	     * <pre>
	     * // Some state name examples
	     *
	     * // stateName can be a single top-level name (must be unique).
	     * $stateProvider.state("home", {});
	     *
	     * // Or it can be a nested state name. This state is a child of the
	     * // above "home" state.
	     * $stateProvider.state("home.newest", {});
	     *
	     * // Nest states as deeply as needed.
	     * $stateProvider.state("home.newest.abc.xyz.inception", {});
	     *
	     * // state() returns $stateProvider, so you can chain state declarations.
	     * $stateProvider
	     *   .state("home", {})
	     *   .state("about", {})
	     *   .state("contacts", {});
	     * </pre>
	     *
	     */
	    this.state = state;
	    function state(name, definition) {
	      /*jshint validthis: true */
	      if (isObject(name)) definition = name;else definition.name = name;
	      registerState(definition);
	      return this;
	    }
	
	    /**
	     * @ngdoc object
	     * @name ui.router.state.$state
	     *
	     * @requires $rootScope
	     * @requires $q
	     * @requires ui.router.state.$view
	     * @requires $injector
	     * @requires ui.router.util.$resolve
	     * @requires ui.router.state.$stateParams
	     * @requires ui.router.router.$urlRouter
	     *
	     * @property {object} params A param object, e.g. {sectionId: section.id)}, that 
	     * you'd like to test against the current active state.
	     * @property {object} current A reference to the state's config object. However 
	     * you passed it in. Useful for accessing custom data.
	     * @property {object} transition Currently pending transition. A promise that'll 
	     * resolve or reject.
	     *
	     * @description
	     * `$state` service is responsible for representing states as well as transitioning
	     * between them. It also provides interfaces to ask for current state or even states
	     * you're coming from.
	     */
	    this.$get = $get;
	    $get.$inject = ['$rootScope', '$q', '$view', '$injector', '$resolve', '$stateParams', '$urlRouter', '$location', '$urlMatcherFactory'];
	    function $get($rootScope, $q, $view, $injector, $resolve, $stateParams, $urlRouter, $location, $urlMatcherFactory) {
	
	      var TransitionSupersededError = new Error('transition superseded');
	
	      var TransitionSuperseded = silenceUncaughtInPromise($q.reject(TransitionSupersededError));
	      var TransitionPrevented = silenceUncaughtInPromise($q.reject(new Error('transition prevented')));
	      var TransitionAborted = silenceUncaughtInPromise($q.reject(new Error('transition aborted')));
	      var TransitionFailed = silenceUncaughtInPromise($q.reject(new Error('transition failed')));
	
	      // Handles the case where a state which is the target of a transition is not found, and the user
	      // can optionally retry or defer the transition
	      function handleRedirect(redirect, state, params, options) {
	        /**
	         * @ngdoc event
	         * @name ui.router.state.$state#$stateNotFound
	         * @eventOf ui.router.state.$state
	         * @eventType broadcast on root scope
	         * @description
	         * Fired when a requested state **cannot be found** using the provided state name during transition.
	         * The event is broadcast allowing any handlers a single chance to deal with the error (usually by
	         * lazy-loading the unfound state). A special `unfoundState` object is passed to the listener handler,
	         * you can see its three properties in the example. You can use `event.preventDefault()` to abort the
	         * transition and the promise returned from `go` will be rejected with a `'transition aborted'` value.
	         *
	         * @param {Object} event Event object.
	         * @param {Object} unfoundState Unfound State information. Contains: `to, toParams, options` properties.
	         * @param {State} fromState Current state object.
	         * @param {Object} fromParams Current state params.
	         *
	         * @example
	         *
	         * <pre>
	         * // somewhere, assume lazy.state has not been defined
	         * $state.go("lazy.state", {a:1, b:2}, {inherit:false});
	         *
	         * // somewhere else
	         * $scope.$on('$stateNotFound',
	         * function(event, unfoundState, fromState, fromParams){
	         *     console.log(unfoundState.to); // "lazy.state"
	         *     console.log(unfoundState.toParams); // {a:1, b:2}
	         *     console.log(unfoundState.options); // {inherit:false} + default options
	         * })
	         * </pre>
	         */
	        var evt = $rootScope.$broadcast('$stateNotFound', redirect, state, params);
	
	        if (evt.defaultPrevented) {
	          $urlRouter.update();
	          return TransitionAborted;
	        }
	
	        if (!evt.retry) {
	          return null;
	        }
	
	        // Allow the handler to return a promise to defer state lookup retry
	        if (options.$retry) {
	          $urlRouter.update();
	          return TransitionFailed;
	        }
	        var retryTransition = $state.transition = $q.when(evt.retry);
	
	        retryTransition.then(function () {
	          if (retryTransition !== $state.transition) {
	            $rootScope.$broadcast('$stateChangeCancel', redirect.to, redirect.toParams, state, params);
	            return TransitionSuperseded;
	          }
	          redirect.options.$retry = true;
	          return $state.transitionTo(redirect.to, redirect.toParams, redirect.options);
	        }, function () {
	          return TransitionAborted;
	        });
	        $urlRouter.update();
	
	        return retryTransition;
	      }
	
	      root.locals = { resolve: null, globals: { $stateParams: {} } };
	
	      $state = {
	        params: {},
	        current: root.self,
	        $current: root,
	        transition: null
	      };
	
	      /**
	       * @ngdoc function
	       * @name ui.router.state.$state#reload
	       * @methodOf ui.router.state.$state
	       *
	       * @description
	       * A method that force reloads the current state. All resolves are re-resolved,
	       * controllers reinstantiated, and events re-fired.
	       *
	       * @example
	       * <pre>
	       * var app angular.module('app', ['ui.router']);
	       *
	       * app.controller('ctrl', function ($scope, $state) {
	       *   $scope.reload = function(){
	       *     $state.reload();
	       *   }
	       * });
	       * </pre>
	       *
	       * `reload()` is just an alias for:
	       * <pre>
	       * $state.transitionTo($state.current, $stateParams, { 
	       *   reload: true, inherit: false, notify: true
	       * });
	       * </pre>
	       *
	       * @param {string=|object=} state - A state name or a state object, which is the root of the resolves to be re-resolved.
	       * @example
	       * <pre>
	       * //assuming app application consists of 3 states: 'contacts', 'contacts.detail', 'contacts.detail.item' 
	       * //and current state is 'contacts.detail.item'
	       * var app angular.module('app', ['ui.router']);
	       *
	       * app.controller('ctrl', function ($scope, $state) {
	       *   $scope.reload = function(){
	       *     //will reload 'contact.detail' and 'contact.detail.item' states
	       *     $state.reload('contact.detail');
	       *   }
	       * });
	       * </pre>
	       *
	       * `reload()` is just an alias for:
	       * <pre>
	       * $state.transitionTo($state.current, $stateParams, { 
	       *   reload: true, inherit: false, notify: true
	       * });
	       * </pre>
	        * @returns {promise} A promise representing the state of the new transition. See
	       * {@link ui.router.state.$state#methods_go $state.go}.
	       */
	      $state.reload = function reload(state) {
	        return $state.transitionTo($state.current, $stateParams, { reload: state || true, inherit: false, notify: true });
	      };
	
	      /**
	       * @ngdoc function
	       * @name ui.router.state.$state#go
	       * @methodOf ui.router.state.$state
	       *
	       * @description
	       * Convenience method for transitioning to a new state. `$state.go` calls 
	       * `$state.transitionTo` internally but automatically sets options to 
	       * `{ location: true, inherit: true, relative: $state.$current, notify: true }`. 
	       * This allows you to easily use an absolute or relative to path and specify 
	       * only the parameters you'd like to update (while letting unspecified parameters 
	       * inherit from the currently active ancestor states).
	       *
	       * @example
	       * <pre>
	       * var app = angular.module('app', ['ui.router']);
	       *
	       * app.controller('ctrl', function ($scope, $state) {
	       *   $scope.changeState = function () {
	       *     $state.go('contact.detail');
	       *   };
	       * });
	       * </pre>
	       * <img src='../ngdoc_assets/StateGoExamples.png'/>
	       *
	       * @param {string} to Absolute state name or relative state path. Some examples:
	       *
	       * - `$state.go('contact.detail')` - will go to the `contact.detail` state
	       * - `$state.go('^')` - will go to a parent state
	       * - `$state.go('^.sibling')` - will go to a sibling state
	       * - `$state.go('.child.grandchild')` - will go to grandchild state
	       *
	       * @param {object=} params A map of the parameters that will be sent to the state, 
	       * will populate $stateParams. Any parameters that are not specified will be inherited from currently 
	       * defined parameters. Only parameters specified in the state definition can be overridden, new 
	       * parameters will be ignored. This allows, for example, going to a sibling state that shares parameters
	       * specified in a parent state. Parameter inheritance only works between common ancestor states, I.e.
	       * transitioning to a sibling will get you the parameters for all parents, transitioning to a child
	       * will get you all current parameters, etc.
	       * @param {object=} options Options object. The options are:
	       *
	       * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
	       *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
	       * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
	       * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'), 
	       *    defines which state to be relative from.
	       * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
	       * - **`reload`** (v0.2.5) - {boolean=false|string|object}, If `true` will force transition even if no state or params
	       *    have changed.  It will reload the resolves and views of the current state and parent states.
	       *    If `reload` is a string (or state object), the state object is fetched (by name, or object reference); and \
	       *    the transition reloads the resolves and views for that matched state, and all its children states.
	       *
	       * @returns {promise} A promise representing the state of the new transition.
	       *
	       * Possible success values:
	       *
	       * - $state.current
	       *
	       * <br/>Possible rejection values:
	       *
	       * - 'transition superseded' - when a newer transition has been started after this one
	       * - 'transition prevented' - when `event.preventDefault()` has been called in a `$stateChangeStart` listener
	       * - 'transition aborted' - when `event.preventDefault()` has been called in a `$stateNotFound` listener or
	       *   when a `$stateNotFound` `event.retry` promise errors.
	       * - 'transition failed' - when a state has been unsuccessfully found after 2 tries.
	       * - *resolve error* - when an error has occurred with a `resolve`
	       *
	       */
	      $state.go = function go(to, params, options) {
	        return $state.transitionTo(to, params, extend({ inherit: true, relative: $state.$current }, options));
	      };
	
	      /**
	       * @ngdoc function
	       * @name ui.router.state.$state#transitionTo
	       * @methodOf ui.router.state.$state
	       *
	       * @description
	       * Low-level method for transitioning to a new state. {@link ui.router.state.$state#methods_go $state.go}
	       * uses `transitionTo` internally. `$state.go` is recommended in most situations.
	       *
	       * @example
	       * <pre>
	       * var app = angular.module('app', ['ui.router']);
	       *
	       * app.controller('ctrl', function ($scope, $state) {
	       *   $scope.changeState = function () {
	       *     $state.transitionTo('contact.detail');
	       *   };
	       * });
	       * </pre>
	       *
	       * @param {string} to State name.
	       * @param {object=} toParams A map of the parameters that will be sent to the state,
	       * will populate $stateParams.
	       * @param {object=} options Options object. The options are:
	       *
	       * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
	       *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
	       * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.
	       * - **`relative`** - {object=}, When transitioning with relative path (e.g '^'), 
	       *    defines which state to be relative from.
	       * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
	       * - **`reload`** (v0.2.5) - {boolean=false|string=|object=}, If `true` will force transition even if the state or params 
	       *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd
	       *    use this when you want to force a reload when *everything* is the same, including search params.
	       *    if String, then will reload the state with the name given in reload, and any children.
	       *    if Object, then a stateObj is expected, will reload the state found in stateObj, and any children.
	       *
	       * @returns {promise} A promise representing the state of the new transition. See
	       * {@link ui.router.state.$state#methods_go $state.go}.
	       */
	      $state.transitionTo = function transitionTo(to, toParams, options) {
	        toParams = toParams || {};
	        options = extend({
	          location: true, inherit: false, relative: null, notify: true, reload: false, $retry: false
	        }, options || {});
	
	        var from = $state.$current,
	            fromParams = $state.params,
	            fromPath = from.path;
	        var evt,
	            toState = findState(to, options.relative);
	
	        // Store the hash param for later (since it will be stripped out by various methods)
	        var hash = toParams['#'];
	
	        if (!isDefined(toState)) {
	          var redirect = { to: to, toParams: toParams, options: options };
	          var redirectResult = handleRedirect(redirect, from.self, fromParams, options);
	
	          if (redirectResult) {
	            return redirectResult;
	          }
	
	          // Always retry once if the $stateNotFound was not prevented
	          // (handles either redirect changed or state lazy-definition)
	          to = redirect.to;
	          toParams = redirect.toParams;
	          options = redirect.options;
	          toState = findState(to, options.relative);
	
	          if (!isDefined(toState)) {
	            if (!options.relative) throw new Error("No such state '" + to + "'");
	            throw new Error("Could not resolve '" + to + "' from state '" + options.relative + "'");
	          }
	        }
	        if (toState[abstractKey]) throw new Error("Cannot transition to abstract state '" + to + "'");
	        if (options.inherit) toParams = inheritParams($stateParams, toParams || {}, $state.$current, toState);
	        if (!toState.params.$$validates(toParams)) return TransitionFailed;
	
	        toParams = toState.params.$$values(toParams);
	        to = toState;
	
	        var toPath = to.path;
	
	        // Starting from the root of the path, keep all levels that haven't changed
	        var keep = 0,
	            state = toPath[keep],
	            locals = root.locals,
	            toLocals = [];
	
	        if (!options.reload) {
	          while (state && state === fromPath[keep] && state.ownParams.$$equals(toParams, fromParams)) {
	            locals = toLocals[keep] = state.locals;
	            keep++;
	            state = toPath[keep];
	          }
	        } else if (isString(options.reload) || isObject(options.reload)) {
	          if (isObject(options.reload) && !options.reload.name) {
	            throw new Error('Invalid reload state object');
	          }
	
	          var reloadState = options.reload === true ? fromPath[0] : findState(options.reload);
	          if (options.reload && !reloadState) {
	            throw new Error("No such reload state '" + (isString(options.reload) ? options.reload : options.reload.name) + "'");
	          }
	
	          while (state && state === fromPath[keep] && state !== reloadState) {
	            locals = toLocals[keep] = state.locals;
	            keep++;
	            state = toPath[keep];
	          }
	        }
	
	        // If we're going to the same state and all locals are kept, we've got nothing to do.
	        // But clear 'transition', as we still want to cancel any other pending transitions.
	        // TODO: We may not want to bump 'transition' if we're called from a location change
	        // that we've initiated ourselves, because we might accidentally abort a legitimate
	        // transition initiated from code?
	        if (shouldSkipReload(to, toParams, from, fromParams, locals, options)) {
	          if (hash) toParams['#'] = hash;
	          $state.params = toParams;
	          copy($state.params, $stateParams);
	          copy(filterByKeys(to.params.$$keys(), $stateParams), to.locals.globals.$stateParams);
	          if (options.location && to.navigable && to.navigable.url) {
	            $urlRouter.push(to.navigable.url, toParams, {
	              $$avoidResync: true, replace: options.location === 'replace'
	            });
	            $urlRouter.update(true);
	          }
	          $state.transition = null;
	          return $q.when($state.current);
	        }
	
	        // Filter parameters before we pass them to event handlers etc.
	        toParams = filterByKeys(to.params.$$keys(), toParams || {});
	
	        // Re-add the saved hash before we start returning things or broadcasting $stateChangeStart
	        if (hash) toParams['#'] = hash;
	
	        // Broadcast start event and cancel the transition if requested
	        if (options.notify) {
	          /**
	           * @ngdoc event
	           * @name ui.router.state.$state#$stateChangeStart
	           * @eventOf ui.router.state.$state
	           * @eventType broadcast on root scope
	           * @description
	           * Fired when the state transition **begins**. You can use `event.preventDefault()`
	           * to prevent the transition from happening and then the transition promise will be
	           * rejected with a `'transition prevented'` value.
	           *
	           * @param {Object} event Event object.
	           * @param {State} toState The state being transitioned to.
	           * @param {Object} toParams The params supplied to the `toState`.
	           * @param {State} fromState The current state, pre-transition.
	           * @param {Object} fromParams The params supplied to the `fromState`.
	           *
	           * @example
	           *
	           * <pre>
	           * $rootScope.$on('$stateChangeStart',
	           * function(event, toState, toParams, fromState, fromParams){
	           *     event.preventDefault();
	           *     // transitionTo() promise will be rejected with
	           *     // a 'transition prevented' error
	           * })
	           * </pre>
	           */
	          if ($rootScope.$broadcast('$stateChangeStart', to.self, toParams, from.self, fromParams, options).defaultPrevented) {
	            $rootScope.$broadcast('$stateChangeCancel', to.self, toParams, from.self, fromParams);
	            //Don't update and resync url if there's been a new transition started. see issue #2238, #600
	            if ($state.transition == null) $urlRouter.update();
	            return TransitionPrevented;
	          }
	        }
	
	        // Resolve locals for the remaining states, but don't update any global state just
	        // yet -- if anything fails to resolve the current state needs to remain untouched.
	        // We also set up an inheritance chain for the locals here. This allows the view directive
	        // to quickly look up the correct definition for each view in the current state. Even
	        // though we create the locals object itself outside resolveState(), it is initially
	        // empty and gets filled asynchronously. We need to keep track of the promise for the
	        // (fully resolved) current locals, and pass this down the chain.
	        var resolved = $q.when(locals);
	
	        for (var l = keep; l < toPath.length; l++, state = toPath[l]) {
	          locals = toLocals[l] = inherit(locals);
	          resolved = resolveState(state, toParams, state === to, resolved, locals, options);
	        }
	
	        // Once everything is resolved, we are ready to perform the actual transition
	        // and return a promise for the new state. We also keep track of what the
	        // current promise is, so that we can detect overlapping transitions and
	        // keep only the outcome of the last transition.
	        var transition = $state.transition = resolved.then(function () {
	          var l, entering, exiting;
	
	          if ($state.transition !== transition) {
	            $rootScope.$broadcast('$stateChangeCancel', to.self, toParams, from.self, fromParams);
	            return TransitionSuperseded;
	          }
	
	          // Exit 'from' states not kept
	          for (l = fromPath.length - 1; l >= keep; l--) {
	            exiting = fromPath[l];
	            if (exiting.self.onExit) {
	              $injector.invoke(exiting.self.onExit, exiting.self, exiting.locals.globals);
	            }
	            exiting.locals = null;
	          }
	
	          // Enter 'to' states not kept
	          for (l = keep; l < toPath.length; l++) {
	            entering = toPath[l];
	            entering.locals = toLocals[l];
	            if (entering.self.onEnter) {
	              $injector.invoke(entering.self.onEnter, entering.self, entering.locals.globals);
	            }
	          }
	
	          // Run it again, to catch any transitions in callbacks
	          if ($state.transition !== transition) {
	            $rootScope.$broadcast('$stateChangeCancel', to.self, toParams, from.self, fromParams);
	            return TransitionSuperseded;
	          }
	
	          // Update globals in $state
	          $state.$current = to;
	          $state.current = to.self;
	          $state.params = toParams;
	          copy($state.params, $stateParams);
	          $state.transition = null;
	
	          if (options.location && to.navigable) {
	            $urlRouter.push(to.navigable.url, to.navigable.locals.globals.$stateParams, {
	              $$avoidResync: true, replace: options.location === 'replace'
	            });
	          }
	
	          if (options.notify) {
	            /**
	             * @ngdoc event
	             * @name ui.router.state.$state#$stateChangeSuccess
	             * @eventOf ui.router.state.$state
	             * @eventType broadcast on root scope
	             * @description
	             * Fired once the state transition is **complete**.
	             *
	             * @param {Object} event Event object.
	             * @param {State} toState The state being transitioned to.
	             * @param {Object} toParams The params supplied to the `toState`.
	             * @param {State} fromState The current state, pre-transition.
	             * @param {Object} fromParams The params supplied to the `fromState`.
	             */
	            $rootScope.$broadcast('$stateChangeSuccess', to.self, toParams, from.self, fromParams);
	          }
	          $urlRouter.update(true);
	
	          return $state.current;
	        }).then(null, function (error) {
	          // propagate TransitionSuperseded error without emitting $stateChangeCancel
	          // as it was already emitted in the success handler above
	          if (error === TransitionSupersededError) return TransitionSuperseded;
	
	          if ($state.transition !== transition) {
	            $rootScope.$broadcast('$stateChangeCancel', to.self, toParams, from.self, fromParams);
	            return TransitionSuperseded;
	          }
	
	          $state.transition = null;
	          /**
	           * @ngdoc event
	           * @name ui.router.state.$state#$stateChangeError
	           * @eventOf ui.router.state.$state
	           * @eventType broadcast on root scope
	           * @description
	           * Fired when an **error occurs** during transition. It's important to note that if you
	           * have any errors in your resolve functions (javascript errors, non-existent services, etc)
	           * they will not throw traditionally. You must listen for this $stateChangeError event to
	           * catch **ALL** errors.
	           *
	           * @param {Object} event Event object.
	           * @param {State} toState The state being transitioned to.
	           * @param {Object} toParams The params supplied to the `toState`.
	           * @param {State} fromState The current state, pre-transition.
	           * @param {Object} fromParams The params supplied to the `fromState`.
	           * @param {Error} error The resolve error object.
	           */
	          evt = $rootScope.$broadcast('$stateChangeError', to.self, toParams, from.self, fromParams, error);
	
	          if (!evt.defaultPrevented) {
	            $urlRouter.update();
	          }
	
	          return $q.reject(error);
	        });
	
	        silenceUncaughtInPromise(transition);
	        return transition;
	      };
	
	      /**
	       * @ngdoc function
	       * @name ui.router.state.$state#is
	       * @methodOf ui.router.state.$state
	       *
	       * @description
	       * Similar to {@link ui.router.state.$state#methods_includes $state.includes},
	       * but only checks for the full state name. If params is supplied then it will be
	       * tested for strict equality against the current active params object, so all params
	       * must match with none missing and no extras.
	       *
	       * @example
	       * <pre>
	       * $state.$current.name = 'contacts.details.item';
	       *
	       * // absolute name
	       * $state.is('contact.details.item'); // returns true
	       * $state.is(contactDetailItemStateObject); // returns true
	       *
	       * // relative name (. and ^), typically from a template
	       * // E.g. from the 'contacts.details' template
	       * <div ng-class="{highlighted: $state.is('.item')}">Item</div>
	       * </pre>
	       *
	       * @param {string|object} stateOrName The state name (absolute or relative) or state object you'd like to check.
	       * @param {object=} params A param object, e.g. `{sectionId: section.id}`, that you'd like
	       * to test against the current active state.
	       * @param {object=} options An options object.  The options are:
	       *
	       * - **`relative`** - {string|object} -  If `stateOrName` is a relative state name and `options.relative` is set, .is will
	       * test relative to `options.relative` state (or name).
	       *
	       * @returns {boolean} Returns true if it is the state.
	       */
	      $state.is = function is(stateOrName, params, options) {
	        options = extend({ relative: $state.$current }, options || {});
	        var state = findState(stateOrName, options.relative);
	
	        if (!isDefined(state)) {
	          return undefined;
	        }
	        if ($state.$current !== state) {
	          return false;
	        }
	
	        return !params || objectKeys(params).reduce(function (acc, key) {
	          var paramDef = state.params[key];
	          return acc && (!paramDef || paramDef.type.equals($stateParams[key], params[key]));
	        }, true);
	      };
	
	      /**
	       * @ngdoc function
	       * @name ui.router.state.$state#includes
	       * @methodOf ui.router.state.$state
	       *
	       * @description
	       * A method to determine if the current active state is equal to or is the child of the
	       * state stateName. If any params are passed then they will be tested for a match as well.
	       * Not all the parameters need to be passed, just the ones you'd like to test for equality.
	       *
	       * @example
	       * Partial and relative names
	       * <pre>
	       * $state.$current.name = 'contacts.details.item';
	       *
	       * // Using partial names
	       * $state.includes("contacts"); // returns true
	       * $state.includes("contacts.details"); // returns true
	       * $state.includes("contacts.details.item"); // returns true
	       * $state.includes("contacts.list"); // returns false
	       * $state.includes("about"); // returns false
	       *
	       * // Using relative names (. and ^), typically from a template
	       * // E.g. from the 'contacts.details' template
	       * <div ng-class="{highlighted: $state.includes('.item')}">Item</div>
	       * </pre>
	       *
	       * Basic globbing patterns
	       * <pre>
	       * $state.$current.name = 'contacts.details.item.url';
	       *
	       * $state.includes("*.details.*.*"); // returns true
	       * $state.includes("*.details.**"); // returns true
	       * $state.includes("**.item.**"); // returns true
	       * $state.includes("*.details.item.url"); // returns true
	       * $state.includes("*.details.*.url"); // returns true
	       * $state.includes("*.details.*"); // returns false
	       * $state.includes("item.**"); // returns false
	       * </pre>
	       *
	       * @param {string} stateOrName A partial name, relative name, or glob pattern
	       * to be searched for within the current state name.
	       * @param {object=} params A param object, e.g. `{sectionId: section.id}`,
	       * that you'd like to test against the current active state.
	       * @param {object=} options An options object.  The options are:
	       *
	       * - **`relative`** - {string|object=} -  If `stateOrName` is a relative state reference and `options.relative` is set,
	       * .includes will test relative to `options.relative` state (or name).
	       *
	       * @returns {boolean} Returns true if it does include the state
	       */
	      $state.includes = function includes(stateOrName, params, options) {
	        options = extend({ relative: $state.$current }, options || {});
	        if (isString(stateOrName) && isGlob(stateOrName)) {
	          if (!doesStateMatchGlob(stateOrName)) {
	            return false;
	          }
	          stateOrName = $state.$current.name;
	        }
	
	        var state = findState(stateOrName, options.relative);
	        if (!isDefined(state)) {
	          return undefined;
	        }
	        if (!isDefined($state.$current.includes[state.name])) {
	          return false;
	        }
	        if (!params) {
	          return true;
	        }
	
	        var keys = objectKeys(params);
	        for (var i = 0; i < keys.length; i++) {
	          var key = keys[i],
	              paramDef = state.params[key];
	          if (paramDef && !paramDef.type.equals($stateParams[key], params[key])) {
	            return false;
	          }
	        }
	
	        return objectKeys(params).reduce(function (acc, key) {
	          var paramDef = state.params[key];
	          return acc && !paramDef || paramDef.type.equals($stateParams[key], params[key]);
	        }, true);
	      };
	
	      /**
	       * @ngdoc function
	       * @name ui.router.state.$state#href
	       * @methodOf ui.router.state.$state
	       *
	       * @description
	       * A url generation method that returns the compiled url for the given state populated with the given params.
	       *
	       * @example
	       * <pre>
	       * expect($state.href("about.person", { person: "bob" })).toEqual("/about/bob");
	       * </pre>
	       *
	       * @param {string|object} stateOrName The state name or state object you'd like to generate a url from.
	       * @param {object=} params An object of parameter values to fill the state's required parameters.
	       * @param {object=} options Options object. The options are:
	       *
	       * - **`lossy`** - {boolean=true} -  If true, and if there is no url associated with the state provided in the
	       *    first parameter, then the constructed href url will be built from the first navigable ancestor (aka
	       *    ancestor with a valid url).
	       * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
	       * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'), 
	       *    defines which state to be relative from.
	       * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
	       * 
	       * @returns {string} compiled state url
	       */
	      $state.href = function href(stateOrName, params, options) {
	        options = extend({
	          lossy: true,
	          inherit: true,
	          absolute: false,
	          relative: $state.$current
	        }, options || {});
	
	        var state = findState(stateOrName, options.relative);
	
	        if (!isDefined(state)) return null;
	        if (options.inherit) params = inheritParams($stateParams, params || {}, $state.$current, state);
	
	        var nav = state && options.lossy ? state.navigable : state;
	
	        if (!nav || nav.url === undefined || nav.url === null) {
	          return null;
	        }
	        return $urlRouter.href(nav.url, filterByKeys(state.params.$$keys().concat('#'), params || {}), {
	          absolute: options.absolute
	        });
	      };
	
	      /**
	       * @ngdoc function
	       * @name ui.router.state.$state#get
	       * @methodOf ui.router.state.$state
	       *
	       * @description
	       * Returns the state configuration object for any specific state or all states.
	       *
	       * @param {string|object=} stateOrName (absolute or relative) If provided, will only get the config for
	       * the requested state. If not provided, returns an array of ALL state configs.
	       * @param {string|object=} context When stateOrName is a relative state reference, the state will be retrieved relative to context.
	       * @returns {Object|Array} State configuration object or array of all objects.
	       */
	      $state.get = function (stateOrName, context) {
	        if (arguments.length === 0) return map(objectKeys(states), function (name) {
	          return states[name].self;
	        });
	        var state = findState(stateOrName, context || $state.$current);
	        return state && state.self ? state.self : null;
	      };
	
	      function resolveState(state, params, paramsAreFiltered, inherited, dst, options) {
	        // Make a restricted $stateParams with only the parameters that apply to this state if
	        // necessary. In addition to being available to the controller and onEnter/onExit callbacks,
	        // we also need $stateParams to be available for any $injector calls we make during the
	        // dependency resolution process.
	        var $stateParams = paramsAreFiltered ? params : filterByKeys(state.params.$$keys(), params);
	        var locals = { $stateParams: $stateParams };
	
	        // Resolve 'global' dependencies for the state, i.e. those not specific to a view.
	        // We're also including $stateParams in this; that way the parameters are restricted
	        // to the set that should be visible to the state, and are independent of when we update
	        // the global $state and $stateParams values.
	        dst.resolve = $resolve.resolve(state.resolve, locals, dst.resolve, state);
	        var promises = [dst.resolve.then(function (globals) {
	          dst.globals = globals;
	        })];
	        if (inherited) promises.push(inherited);
	
	        function resolveViews() {
	          var viewsPromises = [];
	
	          // Resolve template and dependencies for all views.
	          forEach(state.views, function (view, name) {
	            var injectables = view.resolve && view.resolve !== state.resolve ? view.resolve : {};
	            injectables.$template = [function () {
	              return $view.load(name, { view: view, locals: dst.globals, params: $stateParams, notify: options.notify }) || '';
	            }];
	
	            viewsPromises.push($resolve.resolve(injectables, dst.globals, dst.resolve, state).then(function (result) {
	              // References to the controller (only instantiated at link time)
	              if (isFunction(view.controllerProvider) || isArray(view.controllerProvider)) {
	                var injectLocals = angular.extend({}, injectables, dst.globals);
	                result.$$controller = $injector.invoke(view.controllerProvider, null, injectLocals);
	              } else {
	                result.$$controller = view.controller;
	              }
	              // Provide access to the state itself for internal use
	              result.$$state = state;
	              result.$$controllerAs = view.controllerAs;
	              result.$$resolveAs = view.resolveAs;
	              dst[name] = result;
	            }));
	          });
	
	          return $q.all(viewsPromises).then(function () {
	            return dst.globals;
	          });
	        }
	
	        // Wait for all the promises and then return the activation object
	        return $q.all(promises).then(resolveViews).then(function (values) {
	          return dst;
	        });
	      }
	
	      return $state;
	    }
	
	    function shouldSkipReload(to, toParams, from, fromParams, locals, options) {
	      // Return true if there are no differences in non-search (path/object) params, false if there are differences
	      function nonSearchParamsEqual(fromAndToState, fromParams, toParams) {
	        // Identify whether all the parameters that differ between `fromParams` and `toParams` were search params.
	        function notSearchParam(key) {
	          return fromAndToState.params[key].location != "search";
	        }
	        var nonQueryParamKeys = fromAndToState.params.$$keys().filter(notSearchParam);
	        var nonQueryParams = pick.apply({}, [fromAndToState.params].concat(nonQueryParamKeys));
	        var nonQueryParamSet = new $$UMFP.ParamSet(nonQueryParams);
	        return nonQueryParamSet.$$equals(fromParams, toParams);
	      }
	
	      // If reload was not explicitly requested
	      // and we're transitioning to the same state we're already in
	      // and    the locals didn't change
	      //     or they changed in a way that doesn't merit reloading
	      //        (reloadOnParams:false, or reloadOnSearch.false and only search params changed)
	      // Then return true.
	      if (!options.reload && to === from && (locals === from.locals || to.self.reloadOnSearch === false && nonSearchParamsEqual(from, fromParams, toParams))) {
	        return true;
	      }
	    }
	  }
	
	  angular.module('ui.router.state').factory('$stateParams', function () {
	    return {};
	  }).constant("$state.runtime", { autoinject: true }).provider('$state', $StateProvider)
	  // Inject $state to initialize when entering runtime. #2574
	  .run(['$injector', function ($injector) {
	    // Allow tests (stateSpec.js) to turn this off by defining this constant
	    if ($injector.get("$state.runtime").autoinject) {
	      $injector.get('$state');
	    }
	  }]);
	
	  $ViewProvider.$inject = [];
	  function $ViewProvider() {
	
	    this.$get = $get;
	    /**
	     * @ngdoc object
	     * @name ui.router.state.$view
	     *
	     * @requires ui.router.util.$templateFactory
	     * @requires $rootScope
	     *
	     * @description
	     *
	     */
	    $get.$inject = ['$rootScope', '$templateFactory'];
	    function $get($rootScope, $templateFactory) {
	      return {
	        // $view.load('full.viewName', { template: ..., controller: ..., resolve: ..., async: false, params: ... })
	        /**
	         * @ngdoc function
	         * @name ui.router.state.$view#load
	         * @methodOf ui.router.state.$view
	         *
	         * @description
	         *
	         * @param {string} name name
	         * @param {object} options option object.
	         */
	        load: function load(name, options) {
	          var result,
	              defaults = {
	            template: null, controller: null, view: null, locals: null, notify: true, async: true, params: {}
	          };
	          options = extend(defaults, options);
	
	          if (options.view) {
	            result = $templateFactory.fromConfig(options.view, options.params, options.locals);
	          }
	          return result;
	        }
	      };
	    }
	  }
	
	  angular.module('ui.router.state').provider('$view', $ViewProvider);
	
	  /**
	   * @ngdoc object
	   * @name ui.router.state.$uiViewScrollProvider
	   *
	   * @description
	   * Provider that returns the {@link ui.router.state.$uiViewScroll} service function.
	   */
	  function $ViewScrollProvider() {
	
	    var useAnchorScroll = false;
	
	    /**
	     * @ngdoc function
	     * @name ui.router.state.$uiViewScrollProvider#useAnchorScroll
	     * @methodOf ui.router.state.$uiViewScrollProvider
	     *
	     * @description
	     * Reverts back to using the core [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll) service for
	     * scrolling based on the url anchor.
	     */
	    this.useAnchorScroll = function () {
	      useAnchorScroll = true;
	    };
	
	    /**
	     * @ngdoc object
	     * @name ui.router.state.$uiViewScroll
	     *
	     * @requires $anchorScroll
	     * @requires $timeout
	     *
	     * @description
	     * When called with a jqLite element, it scrolls the element into view (after a
	     * `$timeout` so the DOM has time to refresh).
	     *
	     * If you prefer to rely on `$anchorScroll` to scroll the view to the anchor,
	     * this can be enabled by calling {@link ui.router.state.$uiViewScrollProvider#methods_useAnchorScroll `$uiViewScrollProvider.useAnchorScroll()`}.
	     */
	    this.$get = ['$anchorScroll', '$timeout', function ($anchorScroll, $timeout) {
	      if (useAnchorScroll) {
	        return $anchorScroll;
	      }
	
	      return function ($element) {
	        return $timeout(function () {
	          $element[0].scrollIntoView();
	        }, 0, false);
	      };
	    }];
	  }
	
	  angular.module('ui.router.state').provider('$uiViewScroll', $ViewScrollProvider);
	
	  /**
	   * @ngdoc directive
	   * @name ui.router.state.directive:ui-view
	   *
	   * @requires ui.router.state.$state
	   * @requires $compile
	   * @requires $controller
	   * @requires $injector
	   * @requires ui.router.state.$uiViewScroll
	   * @requires $document
	   *
	   * @restrict ECA
	   *
	   * @description
	   * The ui-view directive tells $state where to place your templates.
	   *
	   * @param {string=} name A view name. The name should be unique amongst the other views in the
	   * same state. You can have views of the same name that live in different states.
	   *
	   * @param {string=} autoscroll It allows you to set the scroll behavior of the browser window
	   * when a view is populated. By default, $anchorScroll is overridden by ui-router's custom scroll
	   * service, {@link ui.router.state.$uiViewScroll}. This custom service let's you
	   * scroll ui-view elements into view when they are populated during a state activation.
	   *
	   * *Note: To revert back to old [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll)
	   * functionality, call `$uiViewScrollProvider.useAnchorScroll()`.*
	   *
	   * @param {string=} onload Expression to evaluate whenever the view updates.
	   *
	   * @example
	   * A view can be unnamed or named.
	   * <pre>
	   * <!-- Unnamed -->
	   * <div ui-view></div>
	   *
	   * <!-- Named -->
	   * <div ui-view="viewName"></div>
	   * </pre>
	   *
	   * You can only have one unnamed view within any template (or root html). If you are only using a
	   * single view and it is unnamed then you can populate it like so:
	   * <pre>
	   * <div ui-view></div>
	   * $stateProvider.state("home", {
	   *   template: "<h1>HELLO!</h1>"
	   * })
	   * </pre>
	   *
	   * The above is a convenient shortcut equivalent to specifying your view explicitly with the {@link ui.router.state.$stateProvider#methods_state `views`}
	   * config property, by name, in this case an empty name:
	   * <pre>
	   * $stateProvider.state("home", {
	   *   views: {
	   *     "": {
	   *       template: "<h1>HELLO!</h1>"
	   *     }
	   *   }    
	   * })
	   * </pre>
	   *
	   * But typically you'll only use the views property if you name your view or have more than one view
	   * in the same template. There's not really a compelling reason to name a view if its the only one,
	   * but you could if you wanted, like so:
	   * <pre>
	   * <div ui-view="main"></div>
	   * </pre>
	   * <pre>
	   * $stateProvider.state("home", {
	   *   views: {
	   *     "main": {
	   *       template: "<h1>HELLO!</h1>"
	   *     }
	   *   }    
	   * })
	   * </pre>
	   *
	   * Really though, you'll use views to set up multiple views:
	   * <pre>
	   * <div ui-view></div>
	   * <div ui-view="chart"></div>
	   * <div ui-view="data"></div>
	   * </pre>
	   *
	   * <pre>
	   * $stateProvider.state("home", {
	   *   views: {
	   *     "": {
	   *       template: "<h1>HELLO!</h1>"
	   *     },
	   *     "chart": {
	   *       template: "<chart_thing/>"
	   *     },
	   *     "data": {
	   *       template: "<data_thing/>"
	   *     }
	   *   }    
	   * })
	   * </pre>
	   *
	   * Examples for `autoscroll`:
	   *
	   * <pre>
	   * <!-- If autoscroll present with no expression,
	   *      then scroll ui-view into view -->
	   * <ui-view autoscroll/>
	   *
	   * <!-- If autoscroll present with valid expression,
	   *      then scroll ui-view into view if expression evaluates to true -->
	   * <ui-view autoscroll='true'/>
	   * <ui-view autoscroll='false'/>
	   * <ui-view autoscroll='scopeVariable'/>
	   * </pre>
	   *
	   * Resolve data:
	   *
	   * The resolved data from the state's `resolve` block is placed on the scope as `$resolve` (this
	   * can be customized using [[ViewDeclaration.resolveAs]]).  This can be then accessed from the template.
	   *
	   * Note that when `controllerAs` is being used, `$resolve` is set on the controller instance *after* the
	   * controller is instantiated.  The `$onInit()` hook can be used to perform initialization code which
	   * depends on `$resolve` data.
	   *
	   * Example usage of $resolve in a view template
	   * <pre>
	   * $stateProvider.state('home', {
	   *   template: '<my-component user="$resolve.user"></my-component>',
	   *   resolve: {
	   *     user: function(UserService) { return UserService.fetchUser(); }
	   *   }
	   * });
	   * </pre>
	   */
	  $ViewDirective.$inject = ['$state', '$injector', '$uiViewScroll', '$interpolate', '$q'];
	  function $ViewDirective($state, $injector, $uiViewScroll, $interpolate, $q) {
	
	    function getService() {
	      return $injector.has ? function (service) {
	        return $injector.has(service) ? $injector.get(service) : null;
	      } : function (service) {
	        try {
	          return $injector.get(service);
	        } catch (e) {
	          return null;
	        }
	      };
	    }
	
	    var service = getService(),
	        $animator = service('$animator'),
	        $animate = service('$animate');
	
	    // Returns a set of DOM manipulation functions based on which Angular version
	    // it should use
	    function getRenderer(attrs, scope) {
	      var statics = function statics() {
	        return {
	          enter: function enter(element, target, cb) {
	            target.after(element);cb();
	          },
	          leave: function leave(element, cb) {
	            element.remove();cb();
	          }
	        };
	      };
	
	      if ($animate) {
	        return {
	          enter: function enter(element, target, cb) {
	            if (angular.version.minor > 2) {
	              $animate.enter(element, null, target).then(cb);
	            } else {
	              $animate.enter(element, null, target, cb);
	            }
	          },
	          leave: function leave(element, cb) {
	            if (angular.version.minor > 2) {
	              $animate.leave(element).then(cb);
	            } else {
	              $animate.leave(element, cb);
	            }
	          }
	        };
	      }
	
	      if ($animator) {
	        var animate = $animator && $animator(scope, attrs);
	
	        return {
	          enter: function enter(element, target, cb) {
	            animate.enter(element, null, target);cb();
	          },
	          leave: function leave(element, cb) {
	            animate.leave(element);cb();
	          }
	        };
	      }
	
	      return statics();
	    }
	
	    var directive = {
	      restrict: 'ECA',
	      terminal: true,
	      priority: 400,
	      transclude: 'element',
	      compile: function compile(tElement, tAttrs, $transclude) {
	        return function (scope, $element, attrs) {
	          var previousEl,
	              currentEl,
	              currentScope,
	              latestLocals,
	              onloadExp = attrs.onload || '',
	              autoScrollExp = attrs.autoscroll,
	              renderer = getRenderer(attrs, scope),
	              inherited = $element.inheritedData('$uiView');
	
	          scope.$on('$stateChangeSuccess', function () {
	            updateView(false);
	          });
	
	          updateView(true);
	
	          function cleanupLastView() {
	            if (previousEl) {
	              previousEl.remove();
	              previousEl = null;
	            }
	
	            if (currentScope) {
	              currentScope.$destroy();
	              currentScope = null;
	            }
	
	            if (currentEl) {
	              var $uiViewData = currentEl.data('$uiViewAnim');
	              renderer.leave(currentEl, function () {
	                $uiViewData.$$animLeave.resolve();
	                previousEl = null;
	              });
	
	              previousEl = currentEl;
	              currentEl = null;
	            }
	          }
	
	          function updateView(firstTime) {
	            var newScope,
	                name = getUiViewName(scope, attrs, $element, $interpolate),
	                previousLocals = name && $state.$current && $state.$current.locals[name];
	
	            if (!firstTime && previousLocals === latestLocals) return; // nothing to do
	            newScope = scope.$new();
	            latestLocals = $state.$current.locals[name];
	
	            /**
	             * @ngdoc event
	             * @name ui.router.state.directive:ui-view#$viewContentLoading
	             * @eventOf ui.router.state.directive:ui-view
	             * @eventType emits on ui-view directive scope
	             * @description
	             *
	             * Fired once the view **begins loading**, *before* the DOM is rendered.
	             *
	             * @param {Object} event Event object.
	             * @param {string} viewName Name of the view.
	             */
	            newScope.$emit('$viewContentLoading', name);
	
	            var clone = $transclude(newScope, function (clone) {
	              var animEnter = $q.defer(),
	                  animLeave = $q.defer();
	              var viewAnimData = {
	                $animEnter: animEnter.promise,
	                $animLeave: animLeave.promise,
	                $$animLeave: animLeave
	              };
	
	              clone.data('$uiViewAnim', viewAnimData);
	              renderer.enter(clone, $element, function onUiViewEnter() {
	                animEnter.resolve();
	                if (currentScope) {
	                  currentScope.$emit('$viewContentAnimationEnded');
	                }
	
	                if (angular.isDefined(autoScrollExp) && !autoScrollExp || scope.$eval(autoScrollExp)) {
	                  $uiViewScroll(clone);
	                }
	              });
	              cleanupLastView();
	            });
	
	            currentEl = clone;
	            currentScope = newScope;
	            /**
	             * @ngdoc event
	             * @name ui.router.state.directive:ui-view#$viewContentLoaded
	             * @eventOf ui.router.state.directive:ui-view
	             * @eventType emits on ui-view directive scope
	             * @description
	             * Fired once the view is **loaded**, *after* the DOM is rendered.
	             *
	             * @param {Object} event Event object.
	             * @param {string} viewName Name of the view.
	             */
	            currentScope.$emit('$viewContentLoaded', name);
	            currentScope.$eval(onloadExp);
	          }
	        };
	      }
	    };
	
	    return directive;
	  }
	
	  $ViewDirectiveFill.$inject = ['$compile', '$controller', '$state', '$interpolate'];
	  function $ViewDirectiveFill($compile, $controller, $state, $interpolate) {
	    return {
	      restrict: 'ECA',
	      priority: -400,
	      compile: function compile(tElement) {
	        var initial = tElement.html();
	        if (tElement.empty) {
	          tElement.empty();
	        } else {
	          // ng 1.0.0 doesn't have empty(), which cleans up data and handlers
	          tElement[0].innerHTML = null;
	        }
	
	        return function (scope, $element, attrs) {
	          var current = $state.$current,
	              name = getUiViewName(scope, attrs, $element, $interpolate),
	              locals = current && current.locals[name];
	
	          if (!locals) {
	            $element.html(initial);
	            $compile($element.contents())(scope);
	            return;
	          }
	
	          $element.data('$uiView', { name: name, state: locals.$$state });
	          $element.html(locals.$template ? locals.$template : initial);
	
	          var resolveData = angular.extend({}, locals);
	          scope[locals.$$resolveAs] = resolveData;
	
	          var link = $compile($element.contents());
	
	          if (locals.$$controller) {
	            locals.$scope = scope;
	            locals.$element = $element;
	            var controller = $controller(locals.$$controller, locals);
	            if (locals.$$controllerAs) {
	              scope[locals.$$controllerAs] = controller;
	              scope[locals.$$controllerAs][locals.$$resolveAs] = resolveData;
	            }
	            if (isFunction(controller.$onInit)) controller.$onInit();
	            $element.data('$ngControllerController', controller);
	            $element.children().data('$ngControllerController', controller);
	          }
	
	          link(scope);
	        };
	      }
	    };
	  }
	
	  /**
	   * Shared ui-view code for both directives:
	   * Given scope, element, and its attributes, return the view's name
	   */
	  function getUiViewName(scope, attrs, element, $interpolate) {
	    var name = $interpolate(attrs.uiView || attrs.name || '')(scope);
	    var uiViewCreatedBy = element.inheritedData('$uiView');
	    return name.indexOf('@') >= 0 ? name : name + '@' + (uiViewCreatedBy ? uiViewCreatedBy.state.name : '');
	  }
	
	  angular.module('ui.router.state').directive('uiView', $ViewDirective);
	  angular.module('ui.router.state').directive('uiView', $ViewDirectiveFill);
	
	  function parseStateRef(ref, current) {
	    var preparsed = ref.match(/^\s*({[^}]*})\s*$/),
	        parsed;
	    if (preparsed) ref = current + '(' + preparsed[1] + ')';
	    parsed = ref.replace(/\n/g, " ").match(/^([^(]+?)\s*(\((.*)\))?$/);
	    if (!parsed || parsed.length !== 4) throw new Error("Invalid state ref '" + ref + "'");
	    return { state: parsed[1], paramExpr: parsed[3] || null };
	  }
	
	  function stateContext(el) {
	    var stateData = el.parent().inheritedData('$uiView');
	
	    if (stateData && stateData.state && stateData.state.name) {
	      return stateData.state;
	    }
	  }
	
	  function getTypeInfo(el) {
	    // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
	    var isSvg = Object.prototype.toString.call(el.prop('href')) === '[object SVGAnimatedString]';
	    var isForm = el[0].nodeName === "FORM";
	
	    return {
	      attr: isForm ? "action" : isSvg ? 'xlink:href' : 'href',
	      isAnchor: el.prop("tagName").toUpperCase() === "A",
	      clickable: !isForm
	    };
	  }
	
	  function clickHook(el, $state, $timeout, type, current) {
	    return function (e) {
	      var button = e.which || e.button,
	          target = current();
	
	      if (!(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || el.attr('target'))) {
	        // HACK: This is to allow ng-clicks to be processed before the transition is initiated:
	        var transition = $timeout(function () {
	          $state.go(target.state, target.params, target.options);
	        });
	        e.preventDefault();
	
	        // if the state has no URL, ignore one preventDefault from the <a> directive.
	        var ignorePreventDefaultCount = type.isAnchor && !target.href ? 1 : 0;
	
	        e.preventDefault = function () {
	          if (ignorePreventDefaultCount-- <= 0) $timeout.cancel(transition);
	        };
	      }
	    };
	  }
	
	  function defaultOpts(el, $state) {
	    return { relative: stateContext(el) || $state.$current, inherit: true };
	  }
	
	  /**
	   * @ngdoc directive
	   * @name ui.router.state.directive:ui-sref
	   *
	   * @requires ui.router.state.$state
	   * @requires $timeout
	   *
	   * @restrict A
	   *
	   * @description
	   * A directive that binds a link (`<a>` tag) to a state. If the state has an associated
	   * URL, the directive will automatically generate & update the `href` attribute via
	   * the {@link ui.router.state.$state#methods_href $state.href()} method. Clicking
	   * the link will trigger a state transition with optional parameters.
	   *
	   * Also middle-clicking, right-clicking, and ctrl-clicking on the link will be
	   * handled natively by the browser.
	   *
	   * You can also use relative state paths within ui-sref, just like the relative
	   * paths passed to `$state.go()`. You just need to be aware that the path is relative
	   * to the state that the link lives in, in other words the state that loaded the
	   * template containing the link.
	   *
	   * You can specify options to pass to {@link ui.router.state.$state#methods_go $state.go()}
	   * using the `ui-sref-opts` attribute. Options are restricted to `location`, `inherit`,
	   * and `reload`.
	   *
	   * @example
	   * Here's an example of how you'd use ui-sref and how it would compile. If you have the
	   * following template:
	   * <pre>
	   * <a ui-sref="home">Home</a> | <a ui-sref="about">About</a> | <a ui-sref="{page: 2}">Next page</a>
	   *
	   * <ul>
	   *     <li ng-repeat="contact in contacts">
	   *         <a ui-sref="contacts.detail({ id: contact.id })">{{ contact.name }}</a>
	   *     </li>
	   * </ul>
	   * </pre>
	   *
	   * Then the compiled html would be (assuming Html5Mode is off and current state is contacts):
	   * <pre>
	   * <a href="#/home" ui-sref="home">Home</a> | <a href="#/about" ui-sref="about">About</a> | <a href="#/contacts?page=2" ui-sref="{page: 2}">Next page</a>
	   *
	   * <ul>
	   *     <li ng-repeat="contact in contacts">
	   *         <a href="#/contacts/1" ui-sref="contacts.detail({ id: contact.id })">Joe</a>
	   *     </li>
	   *     <li ng-repeat="contact in contacts">
	   *         <a href="#/contacts/2" ui-sref="contacts.detail({ id: contact.id })">Alice</a>
	   *     </li>
	   *     <li ng-repeat="contact in contacts">
	   *         <a href="#/contacts/3" ui-sref="contacts.detail({ id: contact.id })">Bob</a>
	   *     </li>
	   * </ul>
	   *
	   * <a ui-sref="home" ui-sref-opts="{reload: true}">Home</a>
	   * </pre>
	   *
	   * @param {string} ui-sref 'stateName' can be any valid absolute or relative state
	   * @param {Object} ui-sref-opts options to pass to {@link ui.router.state.$state#methods_go $state.go()}
	   */
	  $StateRefDirective.$inject = ['$state', '$timeout'];
	  function $StateRefDirective($state, $timeout) {
	    return {
	      restrict: 'A',
	      require: ['?^uiSrefActive', '?^uiSrefActiveEq'],
	      link: function link(scope, element, attrs, uiSrefActive) {
	        var ref = parseStateRef(attrs.uiSref, $state.current.name);
	        var def = { state: ref.state, href: null, params: null };
	        var type = getTypeInfo(element);
	        var active = uiSrefActive[1] || uiSrefActive[0];
	        var unlinkInfoFn = null;
	        var hookFn;
	
	        def.options = extend(defaultOpts(element, $state), attrs.uiSrefOpts ? scope.$eval(attrs.uiSrefOpts) : {});
	
	        var update = function update(val) {
	          if (val) def.params = angular.copy(val);
	          def.href = $state.href(ref.state, def.params, def.options);
	
	          if (unlinkInfoFn) unlinkInfoFn();
	          if (active) unlinkInfoFn = active.$$addStateInfo(ref.state, def.params);
	          if (def.href !== null) attrs.$set(type.attr, def.href);
	        };
	
	        if (ref.paramExpr) {
	          scope.$watch(ref.paramExpr, function (val) {
	            if (val !== def.params) update(val);
	          }, true);
	          def.params = angular.copy(scope.$eval(ref.paramExpr));
	        }
	        update();
	
	        if (!type.clickable) return;
	        hookFn = clickHook(element, $state, $timeout, type, function () {
	          return def;
	        });
	        element[element.on ? 'on' : 'bind']("click", hookFn);
	        scope.$on('$destroy', function () {
	          element[element.off ? 'off' : 'unbind']("click", hookFn);
	        });
	      }
	    };
	  }
	
	  /**
	   * @ngdoc directive
	   * @name ui.router.state.directive:ui-state
	   *
	   * @requires ui.router.state.uiSref
	   *
	   * @restrict A
	   *
	   * @description
	   * Much like ui-sref, but will accept named $scope properties to evaluate for a state definition,
	   * params and override options.
	   *
	   * @param {string} ui-state 'stateName' can be any valid absolute or relative state
	   * @param {Object} ui-state-params params to pass to {@link ui.router.state.$state#methods_href $state.href()}
	   * @param {Object} ui-state-opts options to pass to {@link ui.router.state.$state#methods_go $state.go()}
	   */
	  $StateRefDynamicDirective.$inject = ['$state', '$timeout'];
	  function $StateRefDynamicDirective($state, $timeout) {
	    return {
	      restrict: 'A',
	      require: ['?^uiSrefActive', '?^uiSrefActiveEq'],
	      link: function link(scope, element, attrs, uiSrefActive) {
	        var type = getTypeInfo(element);
	        var active = uiSrefActive[1] || uiSrefActive[0];
	        var group = [attrs.uiState, attrs.uiStateParams || null, attrs.uiStateOpts || null];
	        var watch = '[' + group.map(function (val) {
	          return val || 'null';
	        }).join(', ') + ']';
	        var def = { state: null, params: null, options: null, href: null };
	        var unlinkInfoFn = null;
	        var hookFn;
	
	        function runStateRefLink(group) {
	          def.state = group[0];def.params = group[1];def.options = group[2];
	          def.href = $state.href(def.state, def.params, def.options);
	
	          if (unlinkInfoFn) unlinkInfoFn();
	          if (active) unlinkInfoFn = active.$$addStateInfo(def.state, def.params);
	          if (def.href) attrs.$set(type.attr, def.href);
	        }
	
	        scope.$watch(watch, runStateRefLink, true);
	        runStateRefLink(scope.$eval(watch));
	
	        if (!type.clickable) return;
	        hookFn = clickHook(element, $state, $timeout, type, function () {
	          return def;
	        });
	        element[element.on ? 'on' : 'bind']("click", hookFn);
	        scope.$on('$destroy', function () {
	          element[element.off ? 'off' : 'unbind']("click", hookFn);
	        });
	      }
	    };
	  }
	
	  /**
	   * @ngdoc directive
	   * @name ui.router.state.directive:ui-sref-active
	   *
	   * @requires ui.router.state.$state
	   * @requires ui.router.state.$stateParams
	   * @requires $interpolate
	   *
	   * @restrict A
	   *
	   * @description
	   * A directive working alongside ui-sref to add classes to an element when the
	   * related ui-sref directive's state is active, and removing them when it is inactive.
	   * The primary use-case is to simplify the special appearance of navigation menus
	   * relying on `ui-sref`, by having the "active" state's menu button appear different,
	   * distinguishing it from the inactive menu items.
	   *
	   * ui-sref-active can live on the same element as ui-sref or on a parent element. The first
	   * ui-sref-active found at the same level or above the ui-sref will be used.
	   *
	   * Will activate when the ui-sref's target state or any child state is active. If you
	   * need to activate only when the ui-sref target state is active and *not* any of
	   * it's children, then you will use
	   * {@link ui.router.state.directive:ui-sref-active-eq ui-sref-active-eq}
	   *
	   * @example
	   * Given the following template:
	   * <pre>
	   * <ul>
	   *   <li ui-sref-active="active" class="item">
	   *     <a href ui-sref="app.user({user: 'bilbobaggins'})">@bilbobaggins</a>
	   *   </li>
	   * </ul>
	   * </pre>
	   *
	   *
	   * When the app state is "app.user" (or any children states), and contains the state parameter "user" with value "bilbobaggins",
	   * the resulting HTML will appear as (note the 'active' class):
	   * <pre>
	   * <ul>
	   *   <li ui-sref-active="active" class="item active">
	   *     <a ui-sref="app.user({user: 'bilbobaggins'})" href="/users/bilbobaggins">@bilbobaggins</a>
	   *   </li>
	   * </ul>
	   * </pre>
	   *
	   * The class name is interpolated **once** during the directives link time (any further changes to the
	   * interpolated value are ignored).
	   *
	   * Multiple classes may be specified in a space-separated format:
	   * <pre>
	   * <ul>
	   *   <li ui-sref-active='class1 class2 class3'>
	   *     <a ui-sref="app.user">link</a>
	   *   </li>
	   * </ul>
	   * </pre>
	   *
	   * It is also possible to pass ui-sref-active an expression that evaluates
	   * to an object hash, whose keys represent active class names and whose
	   * values represent the respective state names/globs.
	   * ui-sref-active will match if the current active state **includes** any of
	   * the specified state names/globs, even the abstract ones.
	   *
	   * @Example
	   * Given the following template, with "admin" being an abstract state:
	   * <pre>
	   * <div ui-sref-active="{'active': 'admin.*'}">
	   *   <a ui-sref-active="active" ui-sref="admin.roles">Roles</a>
	   * </div>
	   * </pre>
	   *
	   * When the current state is "admin.roles" the "active" class will be applied
	   * to both the <div> and <a> elements. It is important to note that the state
	   * names/globs passed to ui-sref-active shadow the state provided by ui-sref.
	   */
	
	  /**
	   * @ngdoc directive
	   * @name ui.router.state.directive:ui-sref-active-eq
	   *
	   * @requires ui.router.state.$state
	   * @requires ui.router.state.$stateParams
	   * @requires $interpolate
	   *
	   * @restrict A
	   *
	   * @description
	   * The same as {@link ui.router.state.directive:ui-sref-active ui-sref-active} but will only activate
	   * when the exact target state used in the `ui-sref` is active; no child states.
	   *
	   */
	  $StateRefActiveDirective.$inject = ['$state', '$stateParams', '$interpolate'];
	  function $StateRefActiveDirective($state, $stateParams, $interpolate) {
	    return {
	      restrict: "A",
	      controller: ['$scope', '$element', '$attrs', '$timeout', function ($scope, $element, $attrs, $timeout) {
	        var states = [],
	            activeClasses = {},
	            activeEqClass,
	            uiSrefActive;
	
	        // There probably isn't much point in $observing this
	        // uiSrefActive and uiSrefActiveEq share the same directive object with some
	        // slight difference in logic routing
	        activeEqClass = $interpolate($attrs.uiSrefActiveEq || '', false)($scope);
	
	        try {
	          uiSrefActive = $scope.$eval($attrs.uiSrefActive);
	        } catch (e) {
	          // Do nothing. uiSrefActive is not a valid expression.
	          // Fall back to using $interpolate below
	        }
	        uiSrefActive = uiSrefActive || $interpolate($attrs.uiSrefActive || '', false)($scope);
	        if (isObject(uiSrefActive)) {
	          forEach(uiSrefActive, function (stateOrName, activeClass) {
	            if (isString(stateOrName)) {
	              var ref = parseStateRef(stateOrName, $state.current.name);
	              addState(ref.state, $scope.$eval(ref.paramExpr), activeClass);
	            }
	          });
	        }
	
	        // Allow uiSref to communicate with uiSrefActive[Equals]
	        this.$$addStateInfo = function (newState, newParams) {
	          // we already got an explicit state provided by ui-sref-active, so we
	          // shadow the one that comes from ui-sref
	          if (isObject(uiSrefActive) && states.length > 0) {
	            return;
	          }
	          var deregister = addState(newState, newParams, uiSrefActive);
	          update();
	          return deregister;
	        };
	
	        $scope.$on('$stateChangeSuccess', update);
	
	        function addState(stateName, stateParams, activeClass) {
	          var state = $state.get(stateName, stateContext($element));
	          var stateHash = createStateHash(stateName, stateParams);
	
	          var stateInfo = {
	            state: state || { name: stateName },
	            params: stateParams,
	            hash: stateHash
	          };
	
	          states.push(stateInfo);
	          activeClasses[stateHash] = activeClass;
	
	          return function removeState() {
	            var idx = states.indexOf(stateInfo);
	            if (idx !== -1) states.splice(idx, 1);
	          };
	        }
	
	        /**
	         * @param {string} state
	         * @param {Object|string} [params]
	         * @return {string}
	         */
	        function createStateHash(state, params) {
	          if (!isString(state)) {
	            throw new Error('state should be a string');
	          }
	          if (isObject(params)) {
	            return state + toJson(params);
	          }
	          params = $scope.$eval(params);
	          if (isObject(params)) {
	            return state + toJson(params);
	          }
	          return state;
	        }
	
	        // Update route state
	        function update() {
	          for (var i = 0; i < states.length; i++) {
	            if (anyMatch(states[i].state, states[i].params)) {
	              addClass($element, activeClasses[states[i].hash]);
	            } else {
	              removeClass($element, activeClasses[states[i].hash]);
	            }
	
	            if (exactMatch(states[i].state, states[i].params)) {
	              addClass($element, activeEqClass);
	            } else {
	              removeClass($element, activeEqClass);
	            }
	          }
	        }
	
	        function addClass(el, className) {
	          $timeout(function () {
	            el.addClass(className);
	          });
	        }
	        function removeClass(el, className) {
	          el.removeClass(className);
	        }
	        function anyMatch(state, params) {
	          return $state.includes(state.name, params);
	        }
	        function exactMatch(state, params) {
	          return $state.is(state.name, params);
	        }
	
	        update();
	      }]
	    };
	  }
	
	  angular.module('ui.router.state').directive('uiSref', $StateRefDirective).directive('uiSrefActive', $StateRefActiveDirective).directive('uiSrefActiveEq', $StateRefActiveDirective).directive('uiState', $StateRefDynamicDirective);
	
	  /**
	   * @ngdoc filter
	   * @name ui.router.state.filter:isState
	   *
	   * @requires ui.router.state.$state
	   *
	   * @description
	   * Translates to {@link ui.router.state.$state#methods_is $state.is("stateName")}.
	   */
	  $IsStateFilter.$inject = ['$state'];
	  function $IsStateFilter($state) {
	    var isFilter = function isFilter(state, params) {
	      return $state.is(state, params);
	    };
	    isFilter.$stateful = true;
	    return isFilter;
	  }
	
	  /**
	   * @ngdoc filter
	   * @name ui.router.state.filter:includedByState
	   *
	   * @requires ui.router.state.$state
	   *
	   * @description
	   * Translates to {@link ui.router.state.$state#methods_includes $state.includes('fullOrPartialStateName')}.
	   */
	  $IncludedByStateFilter.$inject = ['$state'];
	  function $IncludedByStateFilter($state) {
	    var includesFilter = function includesFilter(state, params, options) {
	      return $state.includes(state, params, options);
	    };
	    includesFilter.$stateful = true;
	    return includesFilter;
	  }
	
	  angular.module('ui.router.state').filter('isState', $IsStateFilter).filter('includedByState', $IncludedByStateFilter);
	})(window, window.angular);

/***/ },
/* 332 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	/*!
	 * angular-translate - v2.17.0 - 2017-12-21
	 * 
	 * Copyright (c) 2017 The angular-translate team, Pascal Precht; Licensed MIT
	 */
	(function (root, factory) {
	  if (true) {
	    // AMD. Register as an anonymous module unless amdModuleId is set
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
	      return factory();
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object' && module.exports) {
	    // Node. Does not work with strict CommonJS, but
	    // only CommonJS-like environments that support module.exports,
	    // like Node.
	    module.exports = factory();
	  } else {
	    factory();
	  }
	})(undefined, function () {
	
	  /**
	   * @ngdoc overview
	   * @name pascalprecht.translate
	   *
	   * @description
	   * The main module which holds everything together.
	   */
	  runTranslate.$inject = ['$translate'];
	  $translate.$inject = ['$STORAGE_KEY', '$windowProvider', '$translateSanitizationProvider', 'pascalprechtTranslateOverrider'];
	  $translateDefaultInterpolation.$inject = ['$interpolate', '$translateSanitization'];
	  translateDirective.$inject = ['$translate', '$interpolate', '$compile', '$parse', '$rootScope'];
	  translateAttrDirective.$inject = ['$translate', '$rootScope'];
	  translateCloakDirective.$inject = ['$translate', '$rootScope'];
	  translateFilterFactory.$inject = ['$parse', '$translate'];
	  $translationCache.$inject = ['$cacheFactory'];
	  angular.module('pascalprecht.translate', ['ng']).run(runTranslate);
	
	  function runTranslate($translate) {
	
	    'use strict';
	
	    var key = $translate.storageKey(),
	        storage = $translate.storage();
	
	    var fallbackFromIncorrectStorageValue = function fallbackFromIncorrectStorageValue() {
	      var preferred = $translate.preferredLanguage();
	      if (angular.isString(preferred)) {
	        $translate.use(preferred);
	        // $translate.use() will also remember the language.
	        // So, we don't need to call storage.put() here.
	      } else {
	        storage.put(key, $translate.use());
	      }
	    };
	
	    fallbackFromIncorrectStorageValue.displayName = 'fallbackFromIncorrectStorageValue';
	
	    if (storage) {
	      if (!storage.get(key)) {
	        fallbackFromIncorrectStorageValue();
	      } else {
	        $translate.use(storage.get(key))['catch'](fallbackFromIncorrectStorageValue);
	      }
	    } else if (angular.isString($translate.preferredLanguage())) {
	      $translate.use($translate.preferredLanguage());
	    }
	  }
	
	  runTranslate.displayName = 'runTranslate';
	
	  /**
	   * @ngdoc object
	   * @name pascalprecht.translate.$translateSanitizationProvider
	   *
	   * @description
	   *
	   * Configurations for $translateSanitization
	   */
	  angular.module('pascalprecht.translate').provider('$translateSanitization', $translateSanitizationProvider);
	
	  function $translateSanitizationProvider() {
	
	    'use strict';
	
	    var $sanitize,
	        $sce,
	        currentStrategy = null,
	        // TODO change to either 'sanitize', 'escape' or ['sanitize', 'escapeParameters'] in 3.0.
	    hasConfiguredStrategy = false,
	        hasShownNoStrategyConfiguredWarning = false,
	        strategies;
	
	    /**
	     * Definition of a sanitization strategy function
	     * @callback StrategyFunction
	     * @param {string|object} value - value to be sanitized (either a string or an interpolated value map)
	     * @param {string} mode - either 'text' for a string (translation) or 'params' for the interpolated params
	     * @return {string|object}
	     */
	
	    /**
	     * @ngdoc property
	     * @name strategies
	     * @propertyOf pascalprecht.translate.$translateSanitizationProvider
	     *
	     * @description
	     * Following strategies are built-in:
	     * <dl>
	     *   <dt>sanitize</dt>
	     *   <dd>Sanitizes HTML in the translation text using $sanitize</dd>
	     *   <dt>escape</dt>
	     *   <dd>Escapes HTML in the translation</dd>
	     *   <dt>sanitizeParameters</dt>
	     *   <dd>Sanitizes HTML in the values of the interpolation parameters using $sanitize</dd>
	     *   <dt>escapeParameters</dt>
	     *   <dd>Escapes HTML in the values of the interpolation parameters</dd>
	     *   <dt>escaped</dt>
	     *   <dd>Support legacy strategy name 'escaped' for backwards compatibility (will be removed in 3.0)</dd>
	     * </dl>
	     *
	     */
	
	    strategies = {
	      sanitize: function sanitize(value, mode /*, context*/) {
	        if (mode === 'text') {
	          value = htmlSanitizeValue(value);
	        }
	        return value;
	      },
	      escape: function escape(value, mode /*, context*/) {
	        if (mode === 'text') {
	          value = htmlEscapeValue(value);
	        }
	        return value;
	      },
	      sanitizeParameters: function sanitizeParameters(value, mode /*, context*/) {
	        if (mode === 'params') {
	          value = mapInterpolationParameters(value, htmlSanitizeValue);
	        }
	        return value;
	      },
	      escapeParameters: function escapeParameters(value, mode /*, context*/) {
	        if (mode === 'params') {
	          value = mapInterpolationParameters(value, htmlEscapeValue);
	        }
	        return value;
	      },
	      sce: function sce(value, mode, context) {
	        if (mode === 'text') {
	          value = htmlTrustValue(value);
	        } else if (mode === 'params') {
	          if (context !== 'filter') {
	            // do html escape in filter context #1101
	            value = mapInterpolationParameters(value, htmlEscapeValue);
	          }
	        }
	        return value;
	      },
	      sceParameters: function sceParameters(value, mode /*, context*/) {
	        if (mode === 'params') {
	          value = mapInterpolationParameters(value, htmlTrustValue);
	        }
	        return value;
	      }
	    };
	    // Support legacy strategy name 'escaped' for backwards compatibility.
	    // TODO should be removed in 3.0
	    strategies.escaped = strategies.escapeParameters;
	
	    /**
	     * @ngdoc function
	     * @name pascalprecht.translate.$translateSanitizationProvider#addStrategy
	     * @methodOf pascalprecht.translate.$translateSanitizationProvider
	     *
	     * @description
	     * Adds a sanitization strategy to the list of known strategies.
	     *
	     * @param {string} strategyName - unique key for a strategy
	     * @param {StrategyFunction} strategyFunction - strategy function
	     * @returns {object} this
	     */
	    this.addStrategy = function (strategyName, strategyFunction) {
	      strategies[strategyName] = strategyFunction;
	      return this;
	    };
	
	    /**
	     * @ngdoc function
	     * @name pascalprecht.translate.$translateSanitizationProvider#removeStrategy
	     * @methodOf pascalprecht.translate.$translateSanitizationProvider
	     *
	     * @description
	     * Removes a sanitization strategy from the list of known strategies.
	     *
	     * @param {string} strategyName - unique key for a strategy
	     * @returns {object} this
	     */
	    this.removeStrategy = function (strategyName) {
	      delete strategies[strategyName];
	      return this;
	    };
	
	    /**
	     * @ngdoc function
	     * @name pascalprecht.translate.$translateSanitizationProvider#useStrategy
	     * @methodOf pascalprecht.translate.$translateSanitizationProvider
	     *
	     * @description
	     * Selects a sanitization strategy. When an array is provided the strategies will be executed in order.
	     *
	     * @param {string|StrategyFunction|array} strategy The sanitization strategy / strategies which should be used. Either a name of an existing strategy, a custom strategy function, or an array consisting of multiple names and / or custom functions.
	     * @returns {object} this
	     */
	    this.useStrategy = function (strategy) {
	      hasConfiguredStrategy = true;
	      currentStrategy = strategy;
	      return this;
	    };
	
	    /**
	     * @ngdoc object
	     * @name pascalprecht.translate.$translateSanitization
	     * @requires $injector
	     * @requires $log
	     *
	     * @description
	     * Sanitizes interpolation parameters and translated texts.
	     *
	     */
	    this.$get = ['$injector', '$log', function ($injector, $log) {
	
	      var cachedStrategyMap = {};
	
	      var applyStrategies = function applyStrategies(value, mode, context, selectedStrategies) {
	        angular.forEach(selectedStrategies, function (selectedStrategy) {
	          if (angular.isFunction(selectedStrategy)) {
	            value = selectedStrategy(value, mode, context);
	          } else if (angular.isFunction(strategies[selectedStrategy])) {
	            value = strategies[selectedStrategy](value, mode, context);
	          } else if (angular.isString(strategies[selectedStrategy])) {
	            if (!cachedStrategyMap[strategies[selectedStrategy]]) {
	              try {
	                cachedStrategyMap[strategies[selectedStrategy]] = $injector.get(strategies[selectedStrategy]);
	              } catch (e) {
	                cachedStrategyMap[strategies[selectedStrategy]] = function () {};
	                throw new Error('pascalprecht.translate.$translateSanitization: Unknown sanitization strategy: \'' + selectedStrategy + '\'');
	              }
	            }
	            value = cachedStrategyMap[strategies[selectedStrategy]](value, mode, context);
	          } else {
	            throw new Error('pascalprecht.translate.$translateSanitization: Unknown sanitization strategy: \'' + selectedStrategy + '\'');
	          }
	        });
	        return value;
	      };
	
	      // TODO: should be removed in 3.0
	      var showNoStrategyConfiguredWarning = function showNoStrategyConfiguredWarning() {
	        if (!hasConfiguredStrategy && !hasShownNoStrategyConfiguredWarning) {
	          $log.warn('pascalprecht.translate.$translateSanitization: No sanitization strategy has been configured. This can have serious security implications. See http://angular-translate.github.io/docs/#/guide/19_security for details.');
	          hasShownNoStrategyConfiguredWarning = true;
	        }
	      };
	
	      if ($injector.has('$sanitize')) {
	        $sanitize = $injector.get('$sanitize');
	      }
	      if ($injector.has('$sce')) {
	        $sce = $injector.get('$sce');
	      }
	
	      return {
	        /**
	         * @ngdoc function
	         * @name pascalprecht.translate.$translateSanitization#useStrategy
	         * @methodOf pascalprecht.translate.$translateSanitization
	         *
	         * @description
	         * Selects a sanitization strategy. When an array is provided the strategies will be executed in order.
	         *
	         * @param {string|StrategyFunction|array} strategy The sanitization strategy / strategies which should be used. Either a name of an existing strategy, a custom strategy function, or an array consisting of multiple names and / or custom functions.
	         */
	        useStrategy: function (self) {
	          return function (strategy) {
	            self.useStrategy(strategy);
	          };
	        }(this),
	
	        /**
	         * @ngdoc function
	         * @name pascalprecht.translate.$translateSanitization#sanitize
	         * @methodOf pascalprecht.translate.$translateSanitization
	         *
	         * @description
	         * Sanitizes a value.
	         *
	         * @param {string|object} value The value which should be sanitized.
	         * @param {string} mode The current sanitization mode, either 'params' or 'text'.
	         * @param {string|StrategyFunction|array} [strategy] Optional custom strategy which should be used instead of the currently selected strategy.
	         * @param {string} [context] The context of this call: filter, service. Default is service
	         * @returns {string|object} sanitized value
	         */
	        sanitize: function sanitize(value, mode, strategy, context) {
	          if (!currentStrategy) {
	            showNoStrategyConfiguredWarning();
	          }
	
	          if (!strategy && strategy !== null) {
	            strategy = currentStrategy;
	          }
	
	          if (!strategy) {
	            return value;
	          }
	
	          if (!context) {
	            context = 'service';
	          }
	
	          var selectedStrategies = angular.isArray(strategy) ? strategy : [strategy];
	          return applyStrategies(value, mode, context, selectedStrategies);
	        }
	      };
	    }];
	
	    var htmlEscapeValue = function htmlEscapeValue(value) {
	      var element = angular.element('<div></div>');
	      element.text(value); // not chainable, see #1044
	      return element.html();
	    };
	
	    var htmlSanitizeValue = function htmlSanitizeValue(value) {
	      if (!$sanitize) {
	        throw new Error('pascalprecht.translate.$translateSanitization: Error cannot find $sanitize service. Either include the ngSanitize module (https://docs.angularjs.org/api/ngSanitize) or use a sanitization strategy which does not depend on $sanitize, such as \'escape\'.');
	      }
	      return $sanitize(value);
	    };
	
	    var htmlTrustValue = function htmlTrustValue(value) {
	      if (!$sce) {
	        throw new Error('pascalprecht.translate.$translateSanitization: Error cannot find $sce service.');
	      }
	      return $sce.trustAsHtml(value);
	    };
	
	    var mapInterpolationParameters = function mapInterpolationParameters(value, iteratee, stack) {
	      if (angular.isDate(value)) {
	        return value;
	      } else if (angular.isObject(value)) {
	        var result = angular.isArray(value) ? [] : {};
	
	        if (!stack) {
	          stack = [];
	        } else {
	          if (stack.indexOf(value) > -1) {
	            throw new Error('pascalprecht.translate.$translateSanitization: Error cannot interpolate parameter due recursive object');
	          }
	        }
	
	        stack.push(value);
	        angular.forEach(value, function (propertyValue, propertyKey) {
	
	          /* Skipping function properties. */
	          if (angular.isFunction(propertyValue)) {
	            return;
	          }
	
	          result[propertyKey] = mapInterpolationParameters(propertyValue, iteratee, stack);
	        });
	        stack.splice(-1, 1); // remove last
	
	        return result;
	      } else if (angular.isNumber(value)) {
	        return value;
	      } else if (value === true || value === false) {
	        return value;
	      } else if (!angular.isUndefined(value) && value !== null) {
	        return iteratee(value);
	      } else {
	        return value;
	      }
	    };
	  }
	
	  /**
	   * @ngdoc object
	   * @name pascalprecht.translate.$translateProvider
	   * @description
	   *
	   * $translateProvider allows developers to register translation-tables, asynchronous loaders
	   * and similar to configure translation behavior directly inside of a module.
	   *
	   */
	  angular.module('pascalprecht.translate').constant('pascalprechtTranslateOverrider', {}).provider('$translate', $translate);
	
	  function $translate($STORAGE_KEY, $windowProvider, $translateSanitizationProvider, pascalprechtTranslateOverrider) {
	
	    'use strict';
	
	    var $translationTable = {},
	        $preferredLanguage,
	        $availableLanguageKeys = [],
	        $languageKeyAliases,
	        $fallbackLanguage,
	        $fallbackWasString,
	        $uses,
	        $nextLang,
	        $storageFactory,
	        $storageKey = $STORAGE_KEY,
	        $storagePrefix,
	        $missingTranslationHandlerFactory,
	        $interpolationFactory,
	        $interpolatorFactories = [],
	        $loaderFactory,
	        $cloakClassName = 'translate-cloak',
	        $loaderOptions,
	        $notFoundIndicatorLeft,
	        $notFoundIndicatorRight,
	        $postCompilingEnabled = false,
	        $forceAsyncReloadEnabled = false,
	        $nestedObjectDelimeter = '.',
	        $isReady = false,
	        $keepContent = false,
	        loaderCache,
	        directivePriority = 0,
	        statefulFilter = true,
	        postProcessFn,
	        uniformLanguageTagResolver = 'default',
	        languageTagResolver = {
	      'default': function _default(tag) {
	        return (tag || '').split('-').join('_');
	      },
	      java: function java(tag) {
	        var temp = (tag || '').split('-').join('_');
	        var parts = temp.split('_');
	        return parts.length > 1 ? parts[0].toLowerCase() + '_' + parts[1].toUpperCase() : temp;
	      },
	      bcp47: function bcp47(tag) {
	        var temp = (tag || '').split('_').join('-');
	        var parts = temp.split('-');
	
	        switch (parts.length) {
	          case 1:
	            // language only
	            parts[0] = parts[0].toLowerCase();
	            break;
	          case 2:
	            // language-script or language-region
	            parts[0] = parts[0].toLowerCase();
	            if (parts[1].length === 4) {
	              // parts[1] is script
	              parts[1] = parts[1].charAt(0).toUpperCase() + parts[1].slice(1).toLowerCase();
	            } else {
	              // parts[1] is region
	              parts[1] = parts[1].toUpperCase();
	            }
	            break;
	          case 3:
	            // language-script-region
	            parts[0] = parts[0].toLowerCase();
	            parts[1] = parts[1].charAt(0).toUpperCase() + parts[1].slice(1).toLowerCase();
	            parts[2] = parts[2].toUpperCase();
	            break;
	          default:
	            return temp;
	        }
	
	        return parts.join('-');
	      },
	      'iso639-1': function iso6391(tag) {
	        var temp = (tag || '').split('_').join('-');
	        var parts = temp.split('-');
	        return parts[0].toLowerCase();
	      }
	    };
	
	    var version = '2.17.0';
	
	    // tries to determine the browsers language
	    var getFirstBrowserLanguage = function getFirstBrowserLanguage() {
	
	      // internal purpose only
	      if (angular.isFunction(pascalprechtTranslateOverrider.getLocale)) {
	        return pascalprechtTranslateOverrider.getLocale();
	      }
	
	      var nav = $windowProvider.$get().navigator,
	          browserLanguagePropertyKeys = ['language', 'browserLanguage', 'systemLanguage', 'userLanguage'],
	          i,
	          language;
	
	      // support for HTML 5.1 "navigator.languages"
	      if (angular.isArray(nav.languages)) {
	        for (i = 0; i < nav.languages.length; i++) {
	          language = nav.languages[i];
	          if (language && language.length) {
	            return language;
	          }
	        }
	      }
	
	      // support for other well known properties in browsers
	      for (i = 0; i < browserLanguagePropertyKeys.length; i++) {
	        language = nav[browserLanguagePropertyKeys[i]];
	        if (language && language.length) {
	          return language;
	        }
	      }
	
	      return null;
	    };
	    getFirstBrowserLanguage.displayName = 'angular-translate/service: getFirstBrowserLanguage';
	
	    // tries to determine the browsers locale
	    var getLocale = function getLocale() {
	      var locale = getFirstBrowserLanguage() || '';
	      if (languageTagResolver[uniformLanguageTagResolver]) {
	        locale = languageTagResolver[uniformLanguageTagResolver](locale);
	      }
	      return locale;
	    };
	    getLocale.displayName = 'angular-translate/service: getLocale';
	
	    /**
	     * @name indexOf
	     * @private
	     *
	     * @description
	     * indexOf polyfill. Kinda sorta.
	     *
	     * @param {array} array Array to search in.
	     * @param {string} searchElement Element to search for.
	     *
	     * @returns {int} Index of search element.
	     */
	    var indexOf = function indexOf(array, searchElement) {
	      for (var i = 0, len = array.length; i < len; i++) {
	        if (array[i] === searchElement) {
	          return i;
	        }
	      }
	      return -1;
	    };
	
	    /**
	     * @name trim
	     * @private
	     *
	     * @description
	     * trim polyfill
	     *
	     * @returns {string} The string stripped of whitespace from both ends
	     */
	    var trim = function trim() {
	      return this.toString().replace(/^\s+|\s+$/g, '');
	    };
	
	    /**
	     * @name lowercase
	     * @private
	     *
	     * @description
	     * Return the lowercase string only if the type is string
	     *
	     * @returns {string} The string all in lowercase
	     */
	    var lowercase = function lowercase(string) {
	      return angular.isString(string) ? string.toLowerCase() : string;
	    };
	
	    var negotiateLocale = function negotiateLocale(preferred) {
	      if (!preferred) {
	        return;
	      }
	
	      var avail = [],
	          locale = lowercase(preferred),
	          i = 0,
	          n = $availableLanguageKeys.length;
	
	      for (; i < n; i++) {
	        avail.push(lowercase($availableLanguageKeys[i]));
	      }
	
	      // Check for an exact match in our list of available keys
	      i = indexOf(avail, locale);
	      if (i > -1) {
	        return $availableLanguageKeys[i];
	      }
	
	      if ($languageKeyAliases) {
	        var alias;
	        for (var langKeyAlias in $languageKeyAliases) {
	          if ($languageKeyAliases.hasOwnProperty(langKeyAlias)) {
	            var hasWildcardKey = false;
	            var hasExactKey = Object.prototype.hasOwnProperty.call($languageKeyAliases, langKeyAlias) && lowercase(langKeyAlias) === lowercase(preferred);
	
	            if (langKeyAlias.slice(-1) === '*') {
	              hasWildcardKey = lowercase(langKeyAlias.slice(0, -1)) === lowercase(preferred.slice(0, langKeyAlias.length - 1));
	            }
	            if (hasExactKey || hasWildcardKey) {
	              alias = $languageKeyAliases[langKeyAlias];
	              if (indexOf(avail, lowercase(alias)) > -1) {
	                return alias;
	              }
	            }
	          }
	        }
	      }
	
	      // Check for a language code without region
	      var parts = preferred.split('_');
	
	      if (parts.length > 1 && indexOf(avail, lowercase(parts[0])) > -1) {
	        return parts[0];
	      }
	
	      // If everything fails, return undefined.
	      return;
	    };
	
	    /**
	     * @ngdoc function
	     * @name pascalprecht.translate.$translateProvider#translations
	     * @methodOf pascalprecht.translate.$translateProvider
	     *
	     * @description
	     * Registers a new translation table for specific language key.
	     *
	     * To register a translation table for specific language, pass a defined language
	     * key as first parameter.
	     *
	     * <pre>
	     *  // register translation table for language: 'de_DE'
	     *  $translateProvider.translations('de_DE', {
	     *    'GREETING': 'Hallo Welt!'
	     *  });
	     *
	     *  // register another one
	     *  $translateProvider.translations('en_US', {
	     *    'GREETING': 'Hello world!'
	     *  });
	     * </pre>
	     *
	     * When registering multiple translation tables for for the same language key,
	     * the actual translation table gets extended. This allows you to define module
	     * specific translation which only get added, once a specific module is loaded in
	     * your app.
	     *
	     * Invoking this method with no arguments returns the translation table which was
	     * registered with no language key. Invoking it with a language key returns the
	     * related translation table.
	     *
	     * @param {string} langKey A language key.
	     * @param {object} translationTable A plain old JavaScript object that represents a translation table.
	     *
	     */
	    var translations = function translations(langKey, translationTable) {
	
	      if (!langKey && !translationTable) {
	        return $translationTable;
	      }
	
	      if (langKey && !translationTable) {
	        if (angular.isString(langKey)) {
	          return $translationTable[langKey];
	        }
	      } else {
	        if (!angular.isObject($translationTable[langKey])) {
	          $translationTable[langKey] = {};
	        }
	        angular.extend($translationTable[langKey], flatObject(translationTable));
	      }
	      return this;
	    };
	
	    this.translations = translations;
	
	    /**
	     * @ngdoc function
	     * @name pascalprecht.translate.$translateProvider#cloakClassName
	     * @methodOf pascalprecht.translate.$translateProvider
	     *
	     * @description
	     *
	     * Let's you change the class name for `translate-cloak` directive.
	     * Default class name is `translate-cloak`.
	     *
	     * @param {string} name translate-cloak class name
	     */
	    this.cloakClassName = function (name) {
	      if (!name) {
	        return $cloakClassName;
	      }
	      $cloakClassName = name;
	      return this;
	    };
	
	    /**
	     * @ngdoc function
	     * @name pascalprecht.translate.$translateProvider#nestedObjectDelimeter
	     * @methodOf pascalprecht.translate.$translateProvider
	     *
	     * @description
	     *
	     * Let's you change the delimiter for namespaced translations.
	     * Default delimiter is `.`.
	     *
	     * @param {string} delimiter namespace separator
	     */
	    this.nestedObjectDelimeter = function (delimiter) {
	      if (!delimiter) {
	        return $nestedObjectDelimeter;
	      }
	      $nestedObjectDelimeter = delimiter;
	      return this;
	    };
	
	    /**
	     * @name flatObject
	     * @private
	     *
	     * @description
	     * Flats an object. This function is used to flatten given translation data with
	     * namespaces, so they are later accessible via dot notation.
	     */
	    var flatObject = function flatObject(data, path, result, prevKey) {
	      var key, keyWithPath, keyWithShortPath, val;
	
	      if (!path) {
	        path = [];
	      }
	      if (!result) {
	        result = {};
	      }
	      for (key in data) {
	        if (!Object.prototype.hasOwnProperty.call(data, key)) {
	          continue;
	        }
	        val = data[key];
	        if (angular.isObject(val)) {
	          flatObject(val, path.concat(key), result, key);
	        } else {
	          keyWithPath = path.length ? '' + path.join($nestedObjectDelimeter) + $nestedObjectDelimeter + key : key;
	          if (path.length && key === prevKey) {
	            // Create shortcut path (foo.bar == foo.bar.bar)
	            keyWithShortPath = '' + path.join($nestedObjectDelimeter);
	            // Link it to original path
	            result[keyWithShortPath] = '@:' + keyWithPath;
	          }
	          result[keyWithPath] = val;
	        }
	      }
	      return result;
	    };
	    flatObject.displayName = 'flatObject';
	
	    /**
	     * @ngdoc function
	     * @name pascalprecht.translate.$translateProvider#addInterpolation
	     * @methodOf pascalprecht.translate.$translateProvider
	     *
	     * @description
	     * Adds interpolation services to angular-translate, so it can manage them.
	     *
	     * @param {object} factory Interpolation service factory
	     */
	    this.addInterpolation = function (factory) {
	      $interpolatorFactories.push(factory);
	      return this;
	    };
	
	    /**
	     * @ngdoc function
	     * @name pascalprecht.translate.$translateProvider#useMessageFormatInterpolation
	     * @methodOf pascalprecht.translate.$translateProvider
	     *
	     * @description
	     * Tells angular-translate to use interpolation functionality of messageformat.js.
	     * This is useful when having high level pluralization and gender selection.
	     */
	    this.useMessageFormatInterpolation = function () {
	      return this.useInterpolation('$translateMessageFormatInterpolation');
	    };
	
	    /**
	     * @ngdoc function
	     * @name pascalprecht.translate.$translateProvider#useInterpolation
	     * @methodOf pascalprecht.translate.$translateProvider
	     *
	     * @description
	     * Tells angular-translate which interpolation style to use as default, application-wide.
	     * Simply pass a factory/service name. The interpolation service has to implement
	     * the correct interface.
	     *
	     * @param {string} factory Interpolation service name.
	     */
	    this.useInterpolation = function (factory) {
	      $interpolationFactory = factory;
	      return this;
	    };
	
	    /**
	     * @ngdoc function
	     * @name pascalprecht.translate.$translateProvider#useSanitizeStrategy
	     * @methodOf pascalprecht.translate.$translateProvider
	     *
	     * @description
	     * Simply sets a sanitation strategy type.
	     *
	     * @param {string} value Strategy type.
	     */
	    this.useSanitizeValueStrategy = function (value) {
	      $translateSanitizationProvider.useStrategy(value);
	      return this;
	    };
	
	    /**
	     * @ngdoc function
	     * @name pascalprecht.translate.$translateProvider#preferredLanguage
	     * @methodOf pascalprecht.translate.$translateProvider
	     *
	     * @description
	     * Tells the module which of the registered translation tables to use for translation
	     * at initial startup by passing a language key. Similar to `$translateProvider#use`
	     * only that it says which language to **prefer**.
	     * It is recommended to call this after {@link pascalprecht.translate.$translate#fallbackLanguage fallbackLanguage()}.
	     *
	     * @param {string} langKey A language key.
	     */
	    this.preferredLanguage = function (langKey) {
	      if (langKey) {
	        setupPreferredLanguage(langKey);
	        return this;
	      }
	      return $preferredLanguage;
	    };
	    var setupPreferredLanguage = function setupPreferredLanguage(langKey) {
	      if (langKey) {
	        $preferredLanguage = langKey;
	      }
	      return $preferredLanguage;
	    };
	    /**
	     * @ngdoc function
	     * @name pascalprecht.translate.$translateProvider#translationNotFoundIndicator
	     * @methodOf pascalprecht.translate.$translateProvider
	     *
	     * @description
	     * Sets an indicator which is used when a translation isn't found. E.g. when
	     * setting the indicator as 'X' and one tries to translate a translation id
	     * called `NOT_FOUND`, this will result in `X NOT_FOUND X`.
	     *
	     * Internally this methods sets a left indicator and a right indicator using
	     * `$translateProvider.translationNotFoundIndicatorLeft()` and
	     * `$translateProvider.translationNotFoundIndicatorRight()`.
	     *
	     * **Note**: These methods automatically add a whitespace between the indicators
	     * and the translation id.
	     *
	     * @param {string} indicator An indicator, could be any string.
	     */
	    this.translationNotFoundIndicator = function (indicator) {
	      this.translationNotFoundIndicatorLeft(indicator);
	      this.translationNotFoundIndicatorRight(indicator);
	      return this;
	    };
	
	    /**
	     * ngdoc function
	     * @name pascalprecht.translate.$translateProvider#translationNotFoundIndicatorLeft
	     * @methodOf pascalprecht.translate.$translateProvider
	     *
	     * @description
	     * Sets an indicator which is used when a translation isn't found left to the
	     * translation id.
	     *
	     * @param {string} indicator An indicator.
	     */
	    this.translationNotFoundIndicatorLeft = function (indicator) {
	      if (!indicator) {
	        return $notFoundIndicatorLeft;
	      }
	      $notFoundIndicatorLeft = indicator;
	      return this;
	    };
	
	    /**
	     * ngdoc function
	     * @name pascalprecht.translate.$translateProvider#translationNotFoundIndicatorLeft
	     * @methodOf pascalprecht.translate.$translateProvider
	     *
	     * @description
	     * Sets an indicator which is used when a translation isn't found right to the
	     * translation id.
	     *
	     * @param {string} indicator An indicator.
	     */
	    this.translationNotFoundIndicatorRight = function (indicator) {
	      if (!indicator) {
	        return $notFoundIndicatorRight;
	      }
	      $notFoundIndicatorRight = indicator;
	      return this;
	    };
	
	    /**
	     * @ngdoc function
	     * @name pascalprecht.translate.$translateProvider#fallbackLanguage
	     * @methodOf pascalprecht.translate.$translateProvider
	     *
	     * @description
	     * Tells the module which of the registered translation tables to use when missing translations
	     * at initial startup by passing a language key. Similar to `$translateProvider#use`
	     * only that it says which language to **fallback**.
	     *
	     * @param {string||array} langKey A language key.
	     *
	     */
	    this.fallbackLanguage = function (langKey) {
	      fallbackStack(langKey);
	      return this;
	    };
	
	    var fallbackStack = function fallbackStack(langKey) {
	      if (langKey) {
	        if (angular.isString(langKey)) {
	          $fallbackWasString = true;
	          $fallbackLanguage = [langKey];
	        } else if (angular.isArray(langKey)) {
	          $fallbackWasString = false;
	          $fallbackLanguage = langKey;
	        }
	        if (angular.isString($preferredLanguage) && indexOf($fallbackLanguage, $preferredLanguage) < 0) {
	          $fallbackLanguage.push($preferredLanguage);
	        }
	
	        return this;
	      } else {
	        if ($fallbackWasString) {
	          return $fallbackLanguage[0];
	        } else {
	          return $fallbackLanguage;
	        }
	      }
	    };
	
	    /**
	     * @ngdoc function
	     * @name pascalprecht.translate.$translateProvider#use
	     * @methodOf pascalprecht.translate.$translateProvider
	     *
	     * @description
	     * Set which translation table to use for translation by given language key. When
	     * trying to 'use' a language which isn't provided, it'll throw an error.
	     *
	     * You actually don't have to use this method since `$translateProvider#preferredLanguage`
	     * does the job too.
	     *
	     * @param {string} langKey A language key.
	     */
	    this.use = function (langKey) {
	      if (langKey) {
	        if (!$translationTable[langKey] && !$loaderFactory) {
	          // only throw an error, when not loading translation data asynchronously
	          throw new Error('$translateProvider couldn\'t find translationTable for langKey: \'' + langKey + '\'');
	        }
	        $uses = langKey;
	        return this;
	      }
	      return $uses;
	    };
	
	    /**
	     * @ngdoc function
	     * @name pascalprecht.translate.$translateProvider#resolveClientLocale
	     * @methodOf pascalprecht.translate.$translateProvider
	     *
	     * @description
	     * This returns the current browser/client's language key. The result is processed with the configured uniform tag resolver.
	     *
	     * @returns {string} the current client/browser language key
	     */
	    this.resolveClientLocale = function () {
	      return getLocale();
	    };
	
	    /**
	     * @ngdoc function
	     * @name pascalprecht.translate.$translateProvider#storageKey
	     * @methodOf pascalprecht.translate.$translateProvider
	     *
	     * @description
	     * Tells the module which key must represent the choosed language by a user in the storage.
	     *
	     * @param {string} key A key for the storage.
	     */
	    var storageKey = function storageKey(key) {
	      if (!key) {
	        if ($storagePrefix) {
	          return $storagePrefix + $storageKey;
	        }
	        return $storageKey;
	      }
	      $storageKey = key;
	      return this;
	    };
	
	    this.storageKey = storageKey;
	
	    /**
	     * @ngdoc function
	     * @name pascalprecht.translate.$translateProvider#useUrlLoader
	     * @methodOf pascalprecht.translate.$translateProvider
	     *
	     * @description
	     * Tells angular-translate to use `$translateUrlLoader` extension service as loader.
	     *
	     * @param {string} url Url
	     * @param {Object=} options Optional configuration object
	     */
	    this.useUrlLoader = function (url, options) {
	      return this.useLoader('$translateUrlLoader', angular.extend({ url: url }, options));
	    };
	
	    /**
	     * @ngdoc function
	     * @name pascalprecht.translate.$translateProvider#useStaticFilesLoader
	     * @methodOf pascalprecht.translate.$translateProvider
	     *
	     * @description
	     * Tells angular-translate to use `$translateStaticFilesLoader` extension service as loader.
	     *
	     * @param {Object=} options Optional configuration object
	     */
	    this.useStaticFilesLoader = function (options) {
	      return this.useLoader('$translateStaticFilesLoader', options);
	    };
	
	    /**
	     * @ngdoc function
	     * @name pascalprecht.translate.$translateProvider#useLoader
	     * @methodOf pascalprecht.translate.$translateProvider
	     *
	     * @description
	     * Tells angular-translate to use any other service as loader.
	     *
	     * @param {string} loaderFactory Factory name to use
	     * @param {Object=} options Optional configuration object
	     */
	    this.useLoader = function (loaderFactory, options) {
	      $loaderFactory = loaderFactory;
	      $loaderOptions = options || {};
	      return this;
	    };
	
	    /**
	     * @ngdoc function
	     * @name pascalprecht.translate.$translateProvider#useLocalStorage
	     * @methodOf pascalprecht.translate.$translateProvider
	     *
	     * @description
	     * Tells angular-translate to use `$translateLocalStorage` service as storage layer.
	     *
	     */
	    this.useLocalStorage = function () {
	      return this.useStorage('$translateLocalStorage');
	    };
	
	    /**
	     * @ngdoc function
	     * @name pascalprecht.translate.$translateProvider#useCookieStorage
	     * @methodOf pascalprecht.translate.$translateProvider
	     *
	     * @description
	     * Tells angular-translate to use `$translateCookieStorage` service as storage layer.
	     */
	    this.useCookieStorage = function () {
	      return this.useStorage('$translateCookieStorage');
	    };
	
	    /**
	     * @ngdoc function
	     * @name pascalprecht.translate.$translateProvider#useStorage
	     * @methodOf pascalprecht.translate.$translateProvider
	     *
	     * @description
	     * Tells angular-translate to use custom service as storage layer.
	     */
	    this.useStorage = function (storageFactory) {
	      $storageFactory = storageFactory;
	      return this;
	    };
	
	    /**
	     * @ngdoc function
	     * @name pascalprecht.translate.$translateProvider#storagePrefix
	     * @methodOf pascalprecht.translate.$translateProvider
	     *
	     * @description
	     * Sets prefix for storage key.
	     *
	     * @param {string} prefix Storage key prefix
	     */
	    this.storagePrefix = function (prefix) {
	      if (!prefix) {
	        return prefix;
	      }
	      $storagePrefix = prefix;
	      return this;
	    };
	
	    /**
	     * @ngdoc function
	     * @name pascalprecht.translate.$translateProvider#useMissingTranslationHandlerLog
	     * @methodOf pascalprecht.translate.$translateProvider
	     *
	     * @description
	     * Tells angular-translate to use built-in log handler when trying to translate
	     * a translation Id which doesn't exist.
	     *
	     * This is actually a shortcut method for `useMissingTranslationHandler()`.
	     *
	     */
	    this.useMissingTranslationHandlerLog = function () {
	      return this.useMissingTranslationHandler('$translateMissingTranslationHandlerLog');
	    };
	
	    /**
	     * @ngdoc function
	     * @name pascalprecht.translate.$translateProvider#useMissingTranslationHandler
	     * @methodOf pascalprecht.translate.$translateProvider
	     *
	     * @description
	     * Expects a factory name which later gets instantiated with `$injector`.
	     * This method can be used to tell angular-translate to use a custom
	     * missingTranslationHandler. Just build a factory which returns a function
	     * and expects a translation id as argument.
	     *
	     * Example:
	     * <pre>
	     *  app.config(function ($translateProvider) {
	     *    $translateProvider.useMissingTranslationHandler('customHandler');
	     *  });
	     *
	     *  app.factory('customHandler', function (dep1, dep2) {
	     *    return function (translationId) {
	     *      // something with translationId and dep1 and dep2
	     *    };
	     *  });
	     * </pre>
	     *
	     * @param {string} factory Factory name
	     */
	    this.useMissingTranslationHandler = function (factory) {
	      $missingTranslationHandlerFactory = factory;
	      return this;
	    };
	
	    /**
	     * @ngdoc function
	     * @name pascalprecht.translate.$translateProvider#usePostCompiling
	     * @methodOf pascalprecht.translate.$translateProvider
	     *
	     * @description
	     * If post compiling is enabled, all translated values will be processed
	     * again with AngularJS' $compile.
	     *
	     * Example:
	     * <pre>
	     *  app.config(function ($translateProvider) {
	     *    $translateProvider.usePostCompiling(true);
	     *  });
	     * </pre>
	     *
	     * @param {string} factory Factory name
	     */
	    this.usePostCompiling = function (value) {
	      $postCompilingEnabled = !!value;
	      return this;
	    };
	
	    /**
	     * @ngdoc function
	     * @name pascalprecht.translate.$translateProvider#forceAsyncReload
	     * @methodOf pascalprecht.translate.$translateProvider
	     *
	     * @description
	     * If force async reload is enabled, async loader will always be called
	     * even if $translationTable already contains the language key, adding
	     * possible new entries to the $translationTable.
	     *
	     * Example:
	     * <pre>
	     *  app.config(function ($translateProvider) {
	     *    $translateProvider.forceAsyncReload(true);
	     *  });
	     * </pre>
	     *
	     * @param {boolean} value - valid values are true or false
	     */
	    this.forceAsyncReload = function (value) {
	      $forceAsyncReloadEnabled = !!value;
	      return this;
	    };
	
	    /**
	     * @ngdoc function
	     * @name pascalprecht.translate.$translateProvider#uniformLanguageTag
	     * @methodOf pascalprecht.translate.$translateProvider
	     *
	     * @description
	     * Tells angular-translate which language tag should be used as a result when determining
	     * the current browser language.
	     *
	     * This setting must be set before invoking {@link pascalprecht.translate.$translateProvider#methods_determinePreferredLanguage determinePreferredLanguage()}.
	     *
	     * <pre>
	     * $translateProvider
	     *   .uniformLanguageTag('bcp47')
	     *   .determinePreferredLanguage()
	     * </pre>
	     *
	     * The resolver currently supports:
	     * * default
	     *     (traditionally: hyphens will be converted into underscores, i.e. en-US => en_US)
	     *     en-US => en_US
	     *     en_US => en_US
	     *     en-us => en_us
	     * * java
	     *     like default, but the second part will be always in uppercase
	     *     en-US => en_US
	     *     en_US => en_US
	     *     en-us => en_US
	     * * BCP 47 (RFC 4646 & 4647)
	     *     EN => en
	     *     en-US => en-US
	     *     en_US => en-US
	     *     en-us => en-US
	     *     sr-latn => sr-Latn
	     *     sr-latn-rs => sr-Latn-RS
	     *
	     * See also:
	     * * http://en.wikipedia.org/wiki/IETF_language_tag
	     * * http://www.w3.org/International/core/langtags/
	     * * http://tools.ietf.org/html/bcp47
	     *
	     * @param {string|object} options - options (or standard)
	     * @param {string} options.standard - valid values are 'default', 'bcp47', 'java'
	     */
	    this.uniformLanguageTag = function (options) {
	
	      if (!options) {
	        options = {};
	      } else if (angular.isString(options)) {
	        options = {
	          standard: options
	        };
	      }
	
	      uniformLanguageTagResolver = options.standard;
	
	      return this;
	    };
	
	    /**
	     * @ngdoc function
	     * @name pascalprecht.translate.$translateProvider#determinePreferredLanguage
	     * @methodOf pascalprecht.translate.$translateProvider
	     *
	     * @description
	     * Tells angular-translate to try to determine on its own which language key
	     * to set as preferred language. When `fn` is given, angular-translate uses it
	     * to determine a language key, otherwise it uses the built-in `getLocale()`
	     * method.
	     *
	     * The `getLocale()` returns a language key in the format `[lang]_[country]` or
	     * `[lang]` depending on what the browser provides.
	     *
	     * Use this method at your own risk, since not all browsers return a valid
	     * locale (see {@link pascalprecht.translate.$translateProvider#methods_uniformLanguageTag uniformLanguageTag()}).
	     *
	     * @param {Function=} fn Function to determine a browser's locale
	     */
	    this.determinePreferredLanguage = function (fn) {
	
	      var locale = fn && angular.isFunction(fn) ? fn() : getLocale();
	
	      if (!$availableLanguageKeys.length) {
	        $preferredLanguage = locale;
	      } else {
	        $preferredLanguage = negotiateLocale(locale) || locale;
	      }
	
	      return this;
	    };
	
	    /**
	     * @ngdoc function
	     * @name pascalprecht.translate.$translateProvider#registerAvailableLanguageKeys
	     * @methodOf pascalprecht.translate.$translateProvider
	     *
	     * @description
	     * Registers a set of language keys the app will work with. Use this method in
	     * combination with
	     * {@link pascalprecht.translate.$translateProvider#determinePreferredLanguage determinePreferredLanguage}.
	     * When available languages keys are registered, angular-translate
	     * tries to find the best fitting language key depending on the browsers locale,
	     * considering your language key convention.
	     *
	     * @param {object} languageKeys Array of language keys the your app will use
	     * @param {object=} aliases Alias map.
	     */
	    this.registerAvailableLanguageKeys = function (languageKeys, aliases) {
	      if (languageKeys) {
	        $availableLanguageKeys = languageKeys;
	        if (aliases) {
	          $languageKeyAliases = aliases;
	        }
	        return this;
	      }
	      return $availableLanguageKeys;
	    };
	
	    /**
	     * @ngdoc function
	     * @name pascalprecht.translate.$translateProvider#useLoaderCache
	     * @methodOf pascalprecht.translate.$translateProvider
	     *
	     * @description
	     * Registers a cache for internal $http based loaders.
	     * {@link pascalprecht.translate.$translationCache $translationCache}.
	     * When false the cache will be disabled (default). When true or undefined
	     * the cache will be a default (see $cacheFactory). When an object it will
	     * be treat as a cache object itself: the usage is $http({cache: cache})
	     *
	     * @param {object} cache boolean, string or cache-object
	     */
	    this.useLoaderCache = function (cache) {
	      if (cache === false) {
	        // disable cache
	        loaderCache = undefined;
	      } else if (cache === true) {
	        // enable cache using AJS defaults
	        loaderCache = true;
	      } else if (typeof cache === 'undefined') {
	        // enable cache using default
	        loaderCache = '$translationCache';
	      } else if (cache) {
	        // enable cache using given one (see $cacheFactory)
	        loaderCache = cache;
	      }
	      return this;
	    };
	
	    /**
	     * @ngdoc function
	     * @name pascalprecht.translate.$translateProvider#directivePriority
	     * @methodOf pascalprecht.translate.$translateProvider
	     *
	     * @description
	     * Sets the default priority of the translate directive. The standard value is `0`.
	     * Calling this function without an argument will return the current value.
	     *
	     * @param {number} priority for the translate-directive
	     */
	    this.directivePriority = function (priority) {
	      if (priority === undefined) {
	        // getter
	        return directivePriority;
	      } else {
	        // setter with chaining
	        directivePriority = priority;
	        return this;
	      }
	    };
	
	    /**
	     * @ngdoc function
	     * @name pascalprecht.translate.$translateProvider#statefulFilter
	     * @methodOf pascalprecht.translate.$translateProvider
	     *
	     * @description
	     * Since AngularJS 1.3, filters which are not stateless (depending at the scope)
	     * have to explicit define this behavior.
	     * Sets whether the translate filter should be stateful or stateless. The standard value is `true`
	     * meaning being stateful.
	     * Calling this function without an argument will return the current value.
	     *
	     * @param {boolean} state - defines the state of the filter
	     */
	    this.statefulFilter = function (state) {
	      if (state === undefined) {
	        // getter
	        return statefulFilter;
	      } else {
	        // setter with chaining
	        statefulFilter = state;
	        return this;
	      }
	    };
	
	    /**
	     * @ngdoc function
	     * @name pascalprecht.translate.$translateProvider#postProcess
	     * @methodOf pascalprecht.translate.$translateProvider
	     *
	     * @description
	     * The post processor will be intercept right after the translation result. It can modify the result.
	     *
	     * @param {object} fn Function or service name (string) to be called after the translation value has been set / resolved. The function itself will enrich every value being processed and then continue the normal resolver process
	     */
	    this.postProcess = function (fn) {
	      if (fn) {
	        postProcessFn = fn;
	      } else {
	        postProcessFn = undefined;
	      }
	      return this;
	    };
	
	    /**
	     * @ngdoc function
	     * @name pascalprecht.translate.$translateProvider#keepContent
	     * @methodOf pascalprecht.translate.$translateProvider
	     *
	     * @description
	     * If keepContent is set to true than translate directive will always use innerHTML
	     * as a default translation
	     *
	     * Example:
	     * <pre>
	     *  app.config(function ($translateProvider) {
	     *    $translateProvider.keepContent(true);
	     *  });
	     * </pre>
	     *
	     * @param {boolean} value - valid values are true or false
	     */
	    this.keepContent = function (value) {
	      $keepContent = !!value;
	      return this;
	    };
	
	    /**
	     * @ngdoc object
	     * @name pascalprecht.translate.$translate
	     * @requires $interpolate
	     * @requires $log
	     * @requires $rootScope
	     * @requires $q
	     *
	     * @description
	     * The `$translate` service is the actual core of angular-translate. It expects a translation id
	     * and optional interpolate parameters to translate contents.
	     *
	     * <pre>
	     *  $translate('HEADLINE_TEXT').then(function (translation) {
	     *    $scope.translatedText = translation;
	     *  });
	     * </pre>
	     *
	     * @param {string|array} translationId A token which represents a translation id
	     *                                     This can be optionally an array of translation ids which
	     *                                     results that the function returns an object where each key
	     *                                     is the translation id and the value the translation.
	     * @param {object=} [interpolateParams={}] An object hash for dynamic values
	     * @param {string=} [interpolationId=undefined] The id of the interpolation to use (use default unless set via useInterpolation())
	     * @param {string=} [defaultTranslationText=undefined] the optional default translation text that is written as
	     *                                        as default text in case it is not found in any configured language
	     * @param {string=} [forceLanguage=false] A language to be used instead of the current language
	     * @param {string=} [sanitizeStrategy=undefined] force sanitize strategy for this call instead of using the configured one (use default unless set)
	     * @returns {object} promise
	     */
	    this.$get = ['$log', '$injector', '$rootScope', '$q', function ($log, $injector, $rootScope, $q) {
	
	      var Storage,
	          defaultInterpolator = $injector.get($interpolationFactory || '$translateDefaultInterpolation'),
	          pendingLoader = false,
	          interpolatorHashMap = {},
	          langPromises = {},
	          fallbackIndex,
	          startFallbackIteration;
	
	      var $translate = function $translate(translationId, interpolateParams, interpolationId, defaultTranslationText, forceLanguage, sanitizeStrategy) {
	        if (!$uses && $preferredLanguage) {
	          $uses = $preferredLanguage;
	        }
	        var uses = forceLanguage && forceLanguage !== $uses ? // we don't want to re-negotiate $uses
	        negotiateLocale(forceLanguage) || forceLanguage : $uses;
	
	        // Check forceLanguage is present
	        if (forceLanguage) {
	          loadTranslationsIfMissing(forceLanguage);
	        }
	
	        // Duck detection: If the first argument is an array, a bunch of translations was requested.
	        // The result is an object.
	        if (angular.isArray(translationId)) {
	          // Inspired by Q.allSettled by Kris Kowal
	          // https://github.com/kriskowal/q/blob/b0fa72980717dc202ffc3cbf03b936e10ebbb9d7/q.js#L1553-1563
	          // This transforms all promises regardless resolved or rejected
	          var translateAll = function translateAll(translationIds) {
	            var results = {}; // storing the actual results
	            var promises = []; // promises to wait for
	            // Wraps the promise a) being always resolved and b) storing the link id->value
	            var translate = function translate(translationId) {
	              var deferred = $q.defer();
	              var regardless = function regardless(value) {
	                results[translationId] = value;
	                deferred.resolve([translationId, value]);
	              };
	              // we don't care whether the promise was resolved or rejected; just store the values
	              $translate(translationId, interpolateParams, interpolationId, defaultTranslationText, forceLanguage, sanitizeStrategy).then(regardless, regardless);
	              return deferred.promise;
	            };
	            for (var i = 0, c = translationIds.length; i < c; i++) {
	              promises.push(translate(translationIds[i]));
	            }
	            // wait for all (including storing to results)
	            return $q.all(promises).then(function () {
	              // return the results
	              return results;
	            });
	          };
	          return translateAll(translationId);
	        }
	
	        var deferred = $q.defer();
	
	        // trim off any whitespace
	        if (translationId) {
	          translationId = trim.apply(translationId);
	        }
	
	        var promiseToWaitFor = function () {
	          var promise = langPromises[uses] || langPromises[$preferredLanguage];
	
	          fallbackIndex = 0;
	
	          if ($storageFactory && !promise) {
	            // looks like there's no pending promise for $preferredLanguage or
	            // $uses. Maybe there's one pending for a language that comes from
	            // storage.
	            var langKey = Storage.get($storageKey);
	            promise = langPromises[langKey];
	
	            if ($fallbackLanguage && $fallbackLanguage.length) {
	              var index = indexOf($fallbackLanguage, langKey);
	              // maybe the language from storage is also defined as fallback language
	              // we increase the fallback language index to not search in that language
	              // as fallback, since it's probably the first used language
	              // in that case the index starts after the first element
	              fallbackIndex = index === 0 ? 1 : 0;
	
	              // but we can make sure to ALWAYS fallback to preferred language at least
	              if (indexOf($fallbackLanguage, $preferredLanguage) < 0) {
	                $fallbackLanguage.push($preferredLanguage);
	              }
	            }
	          }
	          return promise;
	        }();
	
	        if (!promiseToWaitFor) {
	          // no promise to wait for? okay. Then there's no loader registered
	          // nor is a one pending for language that comes from storage.
	          // We can just translate.
	          determineTranslation(translationId, interpolateParams, interpolationId, defaultTranslationText, uses, sanitizeStrategy).then(deferred.resolve, deferred.reject);
	        } else {
	          var promiseResolved = function promiseResolved() {
	            // $uses may have changed while waiting
	            if (!forceLanguage) {
	              uses = $uses;
	            }
	            determineTranslation(translationId, interpolateParams, interpolationId, defaultTranslationText, uses, sanitizeStrategy).then(deferred.resolve, deferred.reject);
	          };
	          promiseResolved.displayName = 'promiseResolved';
	
	          promiseToWaitFor['finally'](promiseResolved)['catch'](angular.noop); // we don't care about errors here, already handled
	        }
	        return deferred.promise;
	      };
	
	      /**
	       * @name applyNotFoundIndicators
	       * @private
	       *
	       * @description
	       * Applies not fount indicators to given translation id, if needed.
	       * This function gets only executed, if a translation id doesn't exist,
	       * which is why a translation id is expected as argument.
	       *
	       * @param {string} translationId Translation id.
	       * @returns {string} Same as given translation id but applied with not found
	       * indicators.
	       */
	      var applyNotFoundIndicators = function applyNotFoundIndicators(translationId) {
	        // applying notFoundIndicators
	        if ($notFoundIndicatorLeft) {
	          translationId = [$notFoundIndicatorLeft, translationId].join(' ');
	        }
	        if ($notFoundIndicatorRight) {
	          translationId = [translationId, $notFoundIndicatorRight].join(' ');
	        }
	        return translationId;
	      };
	
	      /**
	       * @name useLanguage
	       * @private
	       *
	       * @description
	       * Makes actual use of a language by setting a given language key as used
	       * language and informs registered interpolators to also use the given
	       * key as locale.
	       *
	       * @param {string} key Locale key.
	       */
	      var useLanguage = function useLanguage(key) {
	        $uses = key;
	
	        // make sure to store new language key before triggering success event
	        if ($storageFactory) {
	          Storage.put($translate.storageKey(), $uses);
	        }
	
	        $rootScope.$emit('$translateChangeSuccess', { language: key });
	
	        // inform default interpolator
	        defaultInterpolator.setLocale($uses);
	
	        var eachInterpolator = function eachInterpolator(interpolator, id) {
	          interpolatorHashMap[id].setLocale($uses);
	        };
	        eachInterpolator.displayName = 'eachInterpolatorLocaleSetter';
	
	        // inform all others too!
	        angular.forEach(interpolatorHashMap, eachInterpolator);
	        $rootScope.$emit('$translateChangeEnd', { language: key });
	      };
	
	      /**
	       * @name loadAsync
	       * @private
	       *
	       * @description
	       * Kicks off registered async loader using `$injector` and applies existing
	       * loader options. When resolved, it updates translation tables accordingly
	       * or rejects with given language key.
	       *
	       * @param {string} key Language key.
	       * @return {Promise} A promise.
	       */
	      var loadAsync = function loadAsync(key) {
	        if (!key) {
	          throw 'No language key specified for loading.';
	        }
	
	        var deferred = $q.defer();
	
	        $rootScope.$emit('$translateLoadingStart', { language: key });
	        pendingLoader = true;
	
	        var cache = loaderCache;
	        if (typeof cache === 'string') {
	          // getting on-demand instance of loader
	          cache = $injector.get(cache);
	        }
	
	        var loaderOptions = angular.extend({}, $loaderOptions, {
	          key: key,
	          $http: angular.extend({}, {
	            cache: cache
	          }, $loaderOptions.$http)
	        });
	
	        var onLoaderSuccess = function onLoaderSuccess(data) {
	          var translationTable = {};
	          $rootScope.$emit('$translateLoadingSuccess', { language: key });
	
	          if (angular.isArray(data)) {
	            angular.forEach(data, function (table) {
	              angular.extend(translationTable, flatObject(table));
	            });
	          } else {
	            angular.extend(translationTable, flatObject(data));
	          }
	          pendingLoader = false;
	          deferred.resolve({
	            key: key,
	            table: translationTable
	          });
	          $rootScope.$emit('$translateLoadingEnd', { language: key });
	        };
	        onLoaderSuccess.displayName = 'onLoaderSuccess';
	
	        var onLoaderError = function onLoaderError(key) {
	          $rootScope.$emit('$translateLoadingError', { language: key });
	          deferred.reject(key);
	          $rootScope.$emit('$translateLoadingEnd', { language: key });
	        };
	        onLoaderError.displayName = 'onLoaderError';
	
	        $injector.get($loaderFactory)(loaderOptions).then(onLoaderSuccess, onLoaderError);
	
	        return deferred.promise;
	      };
	
	      if ($storageFactory) {
	        Storage = $injector.get($storageFactory);
	
	        if (!Storage.get || !Storage.put) {
	          throw new Error('Couldn\'t use storage \'' + $storageFactory + '\', missing get() or put() method!');
	        }
	      }
	
	      // if we have additional interpolations that were added via
	      // $translateProvider.addInterpolation(), we have to map'em
	      if ($interpolatorFactories.length) {
	        var eachInterpolationFactory = function eachInterpolationFactory(interpolatorFactory) {
	          var interpolator = $injector.get(interpolatorFactory);
	          // setting initial locale for each interpolation service
	          interpolator.setLocale($preferredLanguage || $uses);
	          // make'em recognizable through id
	          interpolatorHashMap[interpolator.getInterpolationIdentifier()] = interpolator;
	        };
	        eachInterpolationFactory.displayName = 'interpolationFactoryAdder';
	
	        angular.forEach($interpolatorFactories, eachInterpolationFactory);
	      }
	
	      /**
	       * @name getTranslationTable
	       * @private
	       *
	       * @description
	       * Returns a promise that resolves to the translation table
	       * or is rejected if an error occurred.
	       *
	       * @param langKey
	       * @returns {Q.promise}
	       */
	      var getTranslationTable = function getTranslationTable(langKey) {
	        var deferred = $q.defer();
	        if (Object.prototype.hasOwnProperty.call($translationTable, langKey)) {
	          deferred.resolve($translationTable[langKey]);
	        } else if (langPromises[langKey]) {
	          var onResolve = function onResolve(data) {
	            translations(data.key, data.table);
	            deferred.resolve(data.table);
	          };
	          onResolve.displayName = 'translationTableResolver';
	          langPromises[langKey].then(onResolve, deferred.reject);
	        } else {
	          deferred.reject();
	        }
	        return deferred.promise;
	      };
	
	      /**
	       * @name getFallbackTranslation
	       * @private
	       *
	       * @description
	       * Returns a promise that will resolve to the translation
	       * or be rejected if no translation was found for the language.
	       * This function is currently only used for fallback language translation.
	       *
	       * @param langKey The language to translate to.
	       * @param translationId
	       * @param interpolateParams
	       * @param Interpolator
	       * @param sanitizeStrategy
	       * @returns {Q.promise}
	       */
	      var getFallbackTranslation = function getFallbackTranslation(langKey, translationId, interpolateParams, Interpolator, sanitizeStrategy) {
	        var deferred = $q.defer();
	
	        var onResolve = function onResolve(translationTable) {
	          if (Object.prototype.hasOwnProperty.call(translationTable, translationId) && translationTable[translationId] !== null) {
	            Interpolator.setLocale(langKey);
	            var translation = translationTable[translationId];
	            if (translation.substr(0, 2) === '@:') {
	              getFallbackTranslation(langKey, translation.substr(2), interpolateParams, Interpolator, sanitizeStrategy).then(deferred.resolve, deferred.reject);
	            } else {
	              var interpolatedValue = Interpolator.interpolate(translationTable[translationId], interpolateParams, 'service', sanitizeStrategy, translationId);
	              interpolatedValue = applyPostProcessing(translationId, translationTable[translationId], interpolatedValue, interpolateParams, langKey);
	
	              deferred.resolve(interpolatedValue);
	            }
	            Interpolator.setLocale($uses);
	          } else {
	            deferred.reject();
	          }
	        };
	        onResolve.displayName = 'fallbackTranslationResolver';
	
	        getTranslationTable(langKey).then(onResolve, deferred.reject);
	
	        return deferred.promise;
	      };
	
	      /**
	       * @name getFallbackTranslationInstant
	       * @private
	       *
	       * @description
	       * Returns a translation
	       * This function is currently only used for fallback language translation.
	       *
	       * @param langKey The language to translate to.
	       * @param translationId
	       * @param interpolateParams
	       * @param Interpolator
	       * @param sanitizeStrategy sanitize strategy override
	       *
	       * @returns {string} translation
	       */
	      var getFallbackTranslationInstant = function getFallbackTranslationInstant(langKey, translationId, interpolateParams, Interpolator, sanitizeStrategy) {
	        var result,
	            translationTable = $translationTable[langKey];
	
	        if (translationTable && Object.prototype.hasOwnProperty.call(translationTable, translationId) && translationTable[translationId] !== null) {
	          Interpolator.setLocale(langKey);
	          result = Interpolator.interpolate(translationTable[translationId], interpolateParams, 'filter', sanitizeStrategy, translationId);
	          result = applyPostProcessing(translationId, translationTable[translationId], result, interpolateParams, langKey, sanitizeStrategy);
	          // workaround for TrustedValueHolderType
	          if (!angular.isString(result) && angular.isFunction(result.$$unwrapTrustedValue)) {
	            var result2 = result.$$unwrapTrustedValue();
	            if (result2.substr(0, 2) === '@:') {
	              return getFallbackTranslationInstant(langKey, result2.substr(2), interpolateParams, Interpolator, sanitizeStrategy);
	            }
	          } else if (result.substr(0, 2) === '@:') {
	            return getFallbackTranslationInstant(langKey, result.substr(2), interpolateParams, Interpolator, sanitizeStrategy);
	          }
	          Interpolator.setLocale($uses);
	        }
	
	        return result;
	      };
	
	      /**
	       * @name translateByHandler
	       * @private
	       *
	       * Translate by missing translation handler.
	       *
	       * @param translationId
	       * @param interpolateParams
	       * @param defaultTranslationText
	       * @param sanitizeStrategy sanitize strategy override
	       *
	       * @returns translation created by $missingTranslationHandler or translationId is $missingTranslationHandler is
	       * absent
	       */
	      var translateByHandler = function translateByHandler(translationId, interpolateParams, defaultTranslationText, sanitizeStrategy) {
	        // If we have a handler factory - we might also call it here to determine if it provides
	        // a default text for a translationid that can't be found anywhere in our tables
	        if ($missingTranslationHandlerFactory) {
	          return $injector.get($missingTranslationHandlerFactory)(translationId, $uses, interpolateParams, defaultTranslationText, sanitizeStrategy);
	        } else {
	          return translationId;
	        }
	      };
	
	      /**
	       * @name resolveForFallbackLanguage
	       * @private
	       *
	       * Recursive helper function for fallbackTranslation that will sequentially look
	       * for a translation in the fallbackLanguages starting with fallbackLanguageIndex.
	       *
	       * @param fallbackLanguageIndex
	       * @param translationId
	       * @param interpolateParams
	       * @param Interpolator
	       * @param defaultTranslationText
	       * @param sanitizeStrategy
	       * @returns {Q.promise} Promise that will resolve to the translation.
	       */
	      var resolveForFallbackLanguage = function resolveForFallbackLanguage(fallbackLanguageIndex, translationId, interpolateParams, Interpolator, defaultTranslationText, sanitizeStrategy) {
	        var deferred = $q.defer();
	
	        if (fallbackLanguageIndex < $fallbackLanguage.length) {
	          var langKey = $fallbackLanguage[fallbackLanguageIndex];
	          getFallbackTranslation(langKey, translationId, interpolateParams, Interpolator, sanitizeStrategy).then(function (data) {
	            deferred.resolve(data);
	          }, function () {
	            // Look in the next fallback language for a translation.
	            // It delays the resolving by passing another promise to resolve.
	            return resolveForFallbackLanguage(fallbackLanguageIndex + 1, translationId, interpolateParams, Interpolator, defaultTranslationText, sanitizeStrategy).then(deferred.resolve, deferred.reject);
	          });
	        } else {
	          // No translation found in any fallback language
	          // if a default translation text is set in the directive, then return this as a result
	          if (defaultTranslationText) {
	            deferred.resolve(defaultTranslationText);
	          } else {
	            var missingTranslationHandlerTranslation = translateByHandler(translationId, interpolateParams, defaultTranslationText);
	
	            // if no default translation is set and an error handler is defined, send it to the handler
	            // and then return the result if it isn't undefined
	            if ($missingTranslationHandlerFactory && missingTranslationHandlerTranslation) {
	              deferred.resolve(missingTranslationHandlerTranslation);
	            } else {
	              deferred.reject(applyNotFoundIndicators(translationId));
	            }
	          }
	        }
	        return deferred.promise;
	      };
	
	      /**
	       * @name resolveForFallbackLanguageInstant
	       * @private
	       *
	       * Recursive helper function for fallbackTranslation that will sequentially look
	       * for a translation in the fallbackLanguages starting with fallbackLanguageIndex.
	       *
	       * @param fallbackLanguageIndex
	       * @param translationId
	       * @param interpolateParams
	       * @param Interpolator
	       * @param sanitizeStrategy
	       * @returns {string} translation
	       */
	      var resolveForFallbackLanguageInstant = function resolveForFallbackLanguageInstant(fallbackLanguageIndex, translationId, interpolateParams, Interpolator, sanitizeStrategy) {
	        var result;
	
	        if (fallbackLanguageIndex < $fallbackLanguage.length) {
	          var langKey = $fallbackLanguage[fallbackLanguageIndex];
	          result = getFallbackTranslationInstant(langKey, translationId, interpolateParams, Interpolator, sanitizeStrategy);
	          if (!result && result !== '') {
	            result = resolveForFallbackLanguageInstant(fallbackLanguageIndex + 1, translationId, interpolateParams, Interpolator);
	          }
	        }
	        return result;
	      };
	
	      /**
	       * Translates with the usage of the fallback languages.
	       *
	       * @param translationId
	       * @param interpolateParams
	       * @param Interpolator
	       * @param defaultTranslationText
	       * @param sanitizeStrategy
	       * @returns {Q.promise} Promise, that resolves to the translation.
	       */
	      var fallbackTranslation = function fallbackTranslation(translationId, interpolateParams, Interpolator, defaultTranslationText, sanitizeStrategy) {
	        // Start with the fallbackLanguage with index 0
	        return resolveForFallbackLanguage(startFallbackIteration > 0 ? startFallbackIteration : fallbackIndex, translationId, interpolateParams, Interpolator, defaultTranslationText, sanitizeStrategy);
	      };
	
	      /**
	       * Translates with the usage of the fallback languages.
	       *
	       * @param translationId
	       * @param interpolateParams
	       * @param Interpolator
	       * @param sanitizeStrategy
	       * @returns {String} translation
	       */
	      var fallbackTranslationInstant = function fallbackTranslationInstant(translationId, interpolateParams, Interpolator, sanitizeStrategy) {
	        // Start with the fallbackLanguage with index 0
	        return resolveForFallbackLanguageInstant(startFallbackIteration > 0 ? startFallbackIteration : fallbackIndex, translationId, interpolateParams, Interpolator, sanitizeStrategy);
	      };
	
	      var determineTranslation = function determineTranslation(translationId, interpolateParams, interpolationId, defaultTranslationText, uses, sanitizeStrategy) {
	
	        var deferred = $q.defer();
	
	        var table = uses ? $translationTable[uses] : $translationTable,
	            Interpolator = interpolationId ? interpolatorHashMap[interpolationId] : defaultInterpolator;
	
	        // if the translation id exists, we can just interpolate it
	        if (table && Object.prototype.hasOwnProperty.call(table, translationId) && table[translationId] !== null) {
	          var translation = table[translationId];
	
	          // If using link, rerun $translate with linked translationId and return it
	          if (translation.substr(0, 2) === '@:') {
	
	            $translate(translation.substr(2), interpolateParams, interpolationId, defaultTranslationText, uses, sanitizeStrategy).then(deferred.resolve, deferred.reject);
	          } else {
	            //
	            var resolvedTranslation = Interpolator.interpolate(translation, interpolateParams, 'service', sanitizeStrategy, translationId);
	            resolvedTranslation = applyPostProcessing(translationId, translation, resolvedTranslation, interpolateParams, uses);
	            deferred.resolve(resolvedTranslation);
	          }
	        } else {
	          var missingTranslationHandlerTranslation;
	          // for logging purposes only (as in $translateMissingTranslationHandlerLog), value is not returned to promise
	          if ($missingTranslationHandlerFactory && !pendingLoader) {
	            missingTranslationHandlerTranslation = translateByHandler(translationId, interpolateParams, defaultTranslationText);
	          }
	
	          // since we couldn't translate the inital requested translation id,
	          // we try it now with one or more fallback languages, if fallback language(s) is
	          // configured.
	          if (uses && $fallbackLanguage && $fallbackLanguage.length) {
	            fallbackTranslation(translationId, interpolateParams, Interpolator, defaultTranslationText, sanitizeStrategy).then(function (translation) {
	              deferred.resolve(translation);
	            }, function (_translationId) {
	              deferred.reject(applyNotFoundIndicators(_translationId));
	            });
	          } else if ($missingTranslationHandlerFactory && !pendingLoader && missingTranslationHandlerTranslation) {
	            // looks like the requested translation id doesn't exists.
	            // Now, if there is a registered handler for missing translations and no
	            // asyncLoader is pending, we execute the handler
	            if (defaultTranslationText) {
	              deferred.resolve(defaultTranslationText);
	            } else {
	              deferred.resolve(missingTranslationHandlerTranslation);
	            }
	          } else {
	            if (defaultTranslationText) {
	              deferred.resolve(defaultTranslationText);
	            } else {
	              deferred.reject(applyNotFoundIndicators(translationId));
	            }
	          }
	        }
	        return deferred.promise;
	      };
	
	      var determineTranslationInstant = function determineTranslationInstant(translationId, interpolateParams, interpolationId, uses, sanitizeStrategy) {
	
	        var result,
	            table = uses ? $translationTable[uses] : $translationTable,
	            Interpolator = defaultInterpolator;
	
	        // if the interpolation id exists use custom interpolator
	        if (interpolatorHashMap && Object.prototype.hasOwnProperty.call(interpolatorHashMap, interpolationId)) {
	          Interpolator = interpolatorHashMap[interpolationId];
	        }
	
	        // if the translation id exists, we can just interpolate it
	        if (table && Object.prototype.hasOwnProperty.call(table, translationId) && table[translationId] !== null) {
	          var translation = table[translationId];
	
	          // If using link, rerun $translate with linked translationId and return it
	          if (translation.substr(0, 2) === '@:') {
	            result = determineTranslationInstant(translation.substr(2), interpolateParams, interpolationId, uses, sanitizeStrategy);
	          } else {
	            result = Interpolator.interpolate(translation, interpolateParams, 'filter', sanitizeStrategy, translationId);
	            result = applyPostProcessing(translationId, translation, result, interpolateParams, uses, sanitizeStrategy);
	          }
	        } else {
	          var missingTranslationHandlerTranslation;
	          // for logging purposes only (as in $translateMissingTranslationHandlerLog), value is not returned to promise
	          if ($missingTranslationHandlerFactory && !pendingLoader) {
	            missingTranslationHandlerTranslation = translateByHandler(translationId, interpolateParams, sanitizeStrategy);
	          }
	
	          // since we couldn't translate the inital requested translation id,
	          // we try it now with one or more fallback languages, if fallback language(s) is
	          // configured.
	          if (uses && $fallbackLanguage && $fallbackLanguage.length) {
	            fallbackIndex = 0;
	            result = fallbackTranslationInstant(translationId, interpolateParams, Interpolator, sanitizeStrategy);
	          } else if ($missingTranslationHandlerFactory && !pendingLoader && missingTranslationHandlerTranslation) {
	            // looks like the requested translation id doesn't exists.
	            // Now, if there is a registered handler for missing translations and no
	            // asyncLoader is pending, we execute the handler
	            result = missingTranslationHandlerTranslation;
	          } else {
	            result = applyNotFoundIndicators(translationId);
	          }
	        }
	
	        return result;
	      };
	
	      var clearNextLangAndPromise = function clearNextLangAndPromise(key) {
	        if ($nextLang === key) {
	          $nextLang = undefined;
	        }
	        langPromises[key] = undefined;
	      };
	
	      var applyPostProcessing = function applyPostProcessing(translationId, translation, resolvedTranslation, interpolateParams, uses, sanitizeStrategy) {
	        var fn = postProcessFn;
	
	        if (fn) {
	
	          if (typeof fn === 'string') {
	            // getting on-demand instance
	            fn = $injector.get(fn);
	          }
	          if (fn) {
	            return fn(translationId, translation, resolvedTranslation, interpolateParams, uses, sanitizeStrategy);
	          }
	        }
	
	        return resolvedTranslation;
	      };
	
	      var loadTranslationsIfMissing = function loadTranslationsIfMissing(key) {
	        if (!$translationTable[key] && $loaderFactory && !langPromises[key]) {
	          langPromises[key] = loadAsync(key).then(function (translation) {
	            translations(translation.key, translation.table);
	            return translation;
	          });
	        }
	      };
	
	      /**
	       * @ngdoc function
	       * @name pascalprecht.translate.$translate#preferredLanguage
	       * @methodOf pascalprecht.translate.$translate
	       *
	       * @description
	       * Returns the language key for the preferred language.
	       *
	       * @param {string} langKey language String or Array to be used as preferredLanguage (changing at runtime)
	       *
	       * @return {string} preferred language key
	       */
	      $translate.preferredLanguage = function (langKey) {
	        if (langKey) {
	          setupPreferredLanguage(langKey);
	        }
	        return $preferredLanguage;
	      };
	
	      /**
	       * @ngdoc function
	       * @name pascalprecht.translate.$translate#cloakClassName
	       * @methodOf pascalprecht.translate.$translate
	       *
	       * @description
	       * Returns the configured class name for `translate-cloak` directive.
	       *
	       * @return {string} cloakClassName
	       */
	      $translate.cloakClassName = function () {
	        return $cloakClassName;
	      };
	
	      /**
	       * @ngdoc function
	       * @name pascalprecht.translate.$translate#nestedObjectDelimeter
	       * @methodOf pascalprecht.translate.$translate
	       *
	       * @description
	       * Returns the configured delimiter for nested namespaces.
	       *
	       * @return {string} nestedObjectDelimeter
	       */
	      $translate.nestedObjectDelimeter = function () {
	        return $nestedObjectDelimeter;
	      };
	
	      /**
	       * @ngdoc function
	       * @name pascalprecht.translate.$translate#fallbackLanguage
	       * @methodOf pascalprecht.translate.$translate
	       *
	       * @description
	       * Returns the language key for the fallback languages or sets a new fallback stack.
	       * It is recommended to call this before {@link pascalprecht.translate.$translateProvider#preferredLanguage preferredLanguage()}.
	       *
	       * @param {string=} langKey language String or Array of fallback languages to be used (to change stack at runtime)
	       *
	       * @return {string||array} fallback language key
	       */
	      $translate.fallbackLanguage = function (langKey) {
	        if (langKey !== undefined && langKey !== null) {
	          fallbackStack(langKey);
	
	          // as we might have an async loader initiated and a new translation language might have been defined
	          // we need to add the promise to the stack also. So - iterate.
	          if ($loaderFactory) {
	            if ($fallbackLanguage && $fallbackLanguage.length) {
	              for (var i = 0, len = $fallbackLanguage.length; i < len; i++) {
	                if (!langPromises[$fallbackLanguage[i]]) {
	                  langPromises[$fallbackLanguage[i]] = loadAsync($fallbackLanguage[i]);
	                }
	              }
	            }
	          }
	          $translate.use($translate.use());
	        }
	        if ($fallbackWasString) {
	          return $fallbackLanguage[0];
	        } else {
	          return $fallbackLanguage;
	        }
	      };
	
	      /**
	       * @ngdoc function
	       * @name pascalprecht.translate.$translate#useFallbackLanguage
	       * @methodOf pascalprecht.translate.$translate
	       *
	       * @description
	       * Sets the first key of the fallback language stack to be used for translation.
	       * Therefore all languages in the fallback array BEFORE this key will be skipped!
	       *
	       * @param {string=} langKey Contains the langKey the iteration shall start with. Set to false if you want to
	       * get back to the whole stack
	       */
	      $translate.useFallbackLanguage = function (langKey) {
	        if (langKey !== undefined && langKey !== null) {
	          if (!langKey) {
	            startFallbackIteration = 0;
	          } else {
	            var langKeyPosition = indexOf($fallbackLanguage, langKey);
	            if (langKeyPosition > -1) {
	              startFallbackIteration = langKeyPosition;
	            }
	          }
	        }
	      };
	
	      /**
	       * @ngdoc function
	       * @name pascalprecht.translate.$translate#proposedLanguage
	       * @methodOf pascalprecht.translate.$translate
	       *
	       * @description
	       * Returns the language key of language that is currently loaded asynchronously.
	       *
	       * @return {string} language key
	       */
	      $translate.proposedLanguage = function () {
	        return $nextLang;
	      };
	
	      /**
	       * @ngdoc function
	       * @name pascalprecht.translate.$translate#storage
	       * @methodOf pascalprecht.translate.$translate
	       *
	       * @description
	       * Returns registered storage.
	       *
	       * @return {object} Storage
	       */
	      $translate.storage = function () {
	        return Storage;
	      };
	
	      /**
	       * @ngdoc function
	       * @name pascalprecht.translate.$translate#negotiateLocale
	       * @methodOf pascalprecht.translate.$translate
	       *
	       * @description
	       * Returns a language key based on available languages and language aliases. If a
	       * language key cannot be resolved, returns undefined.
	       *
	       * If no or a falsy key is given, returns undefined.
	       *
	       * @param {string} [key] Language key
	       * @return {string|undefined} Language key or undefined if no language key is found.
	       */
	      $translate.negotiateLocale = negotiateLocale;
	
	      /**
	       * @ngdoc function
	       * @name pascalprecht.translate.$translate#use
	       * @methodOf pascalprecht.translate.$translate
	       *
	       * @description
	       * Tells angular-translate which language to use by given language key. This method is
	       * used to change language at runtime. It also takes care of storing the language
	       * key in a configured store to let your app remember the choosed language.
	       *
	       * When trying to 'use' a language which isn't available it tries to load it
	       * asynchronously with registered loaders.
	       *
	       * Returns promise object with loaded language file data or string of the currently used language.
	       *
	       * If no or a falsy key is given it returns the currently used language key.
	       * The returned string will be ```undefined``` if setting up $translate hasn't finished.
	       * @example
	       * $translate.use("en_US").then(function(data){
	         *   $scope.text = $translate("HELLO");
	         * });
	       *
	       * @param {string=} key Language key
	       * @return {object|string} Promise with loaded language data or the language key if a falsy param was given.
	       */
	      $translate.use = function (key) {
	        if (!key) {
	          return $uses;
	        }
	
	        var deferred = $q.defer();
	        deferred.promise.then(null, angular.noop); // AJS "Possibly unhandled rejection"
	
	        $rootScope.$emit('$translateChangeStart', { language: key });
	
	        // Try to get the aliased language key
	        var aliasedKey = negotiateLocale(key);
	        // Ensure only registered language keys will be loaded
	        if ($availableLanguageKeys.length > 0 && !aliasedKey) {
	          return $q.reject(key);
	        }
	
	        if (aliasedKey) {
	          key = aliasedKey;
	        }
	
	        // if there isn't a translation table for the language we've requested,
	        // we load it asynchronously
	        $nextLang = key;
	        if (($forceAsyncReloadEnabled || !$translationTable[key]) && $loaderFactory && !langPromises[key]) {
	          langPromises[key] = loadAsync(key).then(function (translation) {
	            translations(translation.key, translation.table);
	            deferred.resolve(translation.key);
	            if ($nextLang === key) {
	              useLanguage(translation.key);
	            }
	            return translation;
	          }, function (key) {
	            $rootScope.$emit('$translateChangeError', { language: key });
	            deferred.reject(key);
	            $rootScope.$emit('$translateChangeEnd', { language: key });
	            return $q.reject(key);
	          });
	          langPromises[key]['finally'](function () {
	            clearNextLangAndPromise(key);
	          })['catch'](angular.noop); // we don't care about errors (clearing)
	        } else if (langPromises[key]) {
	          // we are already loading this asynchronously
	          // resolve our new deferred when the old langPromise is resolved
	          langPromises[key].then(function (translation) {
	            if ($nextLang === translation.key) {
	              useLanguage(translation.key);
	            }
	            deferred.resolve(translation.key);
	            return translation;
	          }, function (key) {
	            // find first available fallback language if that request has failed
	            if (!$uses && $fallbackLanguage && $fallbackLanguage.length > 0 && $fallbackLanguage[0] !== key) {
	              return $translate.use($fallbackLanguage[0]).then(deferred.resolve, deferred.reject);
	            } else {
	              return deferred.reject(key);
	            }
	          });
	        } else {
	          deferred.resolve(key);
	          useLanguage(key);
	        }
	
	        return deferred.promise;
	      };
	
	      /**
	       * @ngdoc function
	       * @name pascalprecht.translate.$translate#resolveClientLocale
	       * @methodOf pascalprecht.translate.$translate
	       *
	       * @description
	       * This returns the current browser/client's language key. The result is processed with the configured uniform tag resolver.
	       *
	       * @returns {string} the current client/browser language key
	       */
	      $translate.resolveClientLocale = function () {
	        return getLocale();
	      };
	
	      /**
	       * @ngdoc function
	       * @name pascalprecht.translate.$translate#storageKey
	       * @methodOf pascalprecht.translate.$translate
	       *
	       * @description
	       * Returns the key for the storage.
	       *
	       * @return {string} storage key
	       */
	      $translate.storageKey = function () {
	        return storageKey();
	      };
	
	      /**
	       * @ngdoc function
	       * @name pascalprecht.translate.$translate#isPostCompilingEnabled
	       * @methodOf pascalprecht.translate.$translate
	       *
	       * @description
	       * Returns whether post compiling is enabled or not
	       *
	       * @return {bool} storage key
	       */
	      $translate.isPostCompilingEnabled = function () {
	        return $postCompilingEnabled;
	      };
	
	      /**
	       * @ngdoc function
	       * @name pascalprecht.translate.$translate#isForceAsyncReloadEnabled
	       * @methodOf pascalprecht.translate.$translate
	       *
	       * @description
	       * Returns whether force async reload is enabled or not
	       *
	       * @return {boolean} forceAsyncReload value
	       */
	      $translate.isForceAsyncReloadEnabled = function () {
	        return $forceAsyncReloadEnabled;
	      };
	
	      /**
	       * @ngdoc function
	       * @name pascalprecht.translate.$translate#isKeepContent
	       * @methodOf pascalprecht.translate.$translate
	       *
	       * @description
	       * Returns whether keepContent or not
	       *
	       * @return {boolean} keepContent value
	       */
	      $translate.isKeepContent = function () {
	        return $keepContent;
	      };
	
	      /**
	       * @ngdoc function
	       * @name pascalprecht.translate.$translate#refresh
	       * @methodOf pascalprecht.translate.$translate
	       *
	       * @description
	       * Refreshes a translation table pointed by the given langKey. If langKey is not specified,
	       * the module will drop all existent translation tables and load new version of those which
	       * are currently in use.
	       *
	       * Refresh means that the module will drop target translation table and try to load it again.
	       *
	       * In case there are no loaders registered the refresh() method will throw an Error.
	       *
	       * If the module is able to refresh translation tables refresh() method will broadcast
	       * $translateRefreshStart and $translateRefreshEnd events.
	       *
	       * @example
	       * // this will drop all currently existent translation tables and reload those which are
	       * // currently in use
	       * $translate.refresh();
	       * // this will refresh a translation table for the en_US language
	       * $translate.refresh('en_US');
	       *
	       * @param {string} langKey A language key of the table, which has to be refreshed
	       *
	       * @return {promise} Promise, which will be resolved in case a translation tables refreshing
	       * process is finished successfully, and reject if not.
	       */
	      $translate.refresh = function (langKey) {
	        if (!$loaderFactory) {
	          throw new Error('Couldn\'t refresh translation table, no loader registered!');
	        }
	
	        $rootScope.$emit('$translateRefreshStart', { language: langKey });
	
	        var deferred = $q.defer(),
	            updatedLanguages = {};
	
	        //private helper
	        function loadNewData(languageKey) {
	          var promise = loadAsync(languageKey);
	          //update the load promise cache for this language
	          langPromises[languageKey] = promise;
	          //register a data handler for the promise
	          promise.then(function (data) {
	            //clear the cache for this language
	            $translationTable[languageKey] = {};
	            //add the new data for this language
	            translations(languageKey, data.table);
	            //track that we updated this language
	            updatedLanguages[languageKey] = true;
	          },
	          //handle rejection to appease the $q validation
	          angular.noop);
	          return promise;
	        }
	
	        //set up post-processing
	        deferred.promise.then(function () {
	          for (var key in $translationTable) {
	            if ($translationTable.hasOwnProperty(key)) {
	              //delete cache entries that were not updated
	              if (!(key in updatedLanguages)) {
	                delete $translationTable[key];
	              }
	            }
	          }
	          if ($uses) {
	            useLanguage($uses);
	          }
	        },
	        //handle rejection to appease the $q validation
	        angular.noop)['finally'](function () {
	          $rootScope.$emit('$translateRefreshEnd', { language: langKey });
	        });
	
	        if (!langKey) {
	          // if there's no language key specified we refresh ALL THE THINGS!
	          var languagesToReload = $fallbackLanguage && $fallbackLanguage.slice() || [];
	          if ($uses && languagesToReload.indexOf($uses) === -1) {
	            languagesToReload.push($uses);
	          }
	          $q.all(languagesToReload.map(loadNewData)).then(deferred.resolve, deferred.reject);
	        } else if ($translationTable[langKey]) {
	          //just refresh the specified language cache
	          loadNewData(langKey).then(deferred.resolve, deferred.reject);
	        } else {
	          deferred.reject();
	        }
	
	        return deferred.promise;
	      };
	
	      /**
	       * @ngdoc function
	       * @name pascalprecht.translate.$translate#instant
	       * @methodOf pascalprecht.translate.$translate
	       *
	       * @description
	       * Returns a translation instantly from the internal state of loaded translation. All rules
	       * regarding the current language, the preferred language of even fallback languages will be
	       * used except any promise handling. If a language was not found, an asynchronous loading
	       * will be invoked in the background.
	       *
	       * @param {string|array} translationId A token which represents a translation id
	       *                                     This can be optionally an array of translation ids which
	       *                                     results that the function's promise returns an object where
	       *                                     each key is the translation id and the value the translation.
	       * @param {object=} [interpolateParams={}] Params
	       * @param {string=} [interpolationId=undefined] The id of the interpolation to use (use default unless set via useInterpolation())
	       * @param {string=} [forceLanguage=false] A language to be used instead of the current language
	       * @param {string=} [sanitizeStrategy=undefined] force sanitize strategy for this call instead of using the configured one (use default unless set)
	       *
	       * @return {string|object} translation
	       */
	      $translate.instant = function (translationId, interpolateParams, interpolationId, forceLanguage, sanitizeStrategy) {
	
	        // we don't want to re-negotiate $uses
	        var uses = forceLanguage && forceLanguage !== $uses ? // we don't want to re-negotiate $uses
	        negotiateLocale(forceLanguage) || forceLanguage : $uses;
	
	        // Detect undefined and null values to shorten the execution and prevent exceptions
	        if (translationId === null || angular.isUndefined(translationId)) {
	          return translationId;
	        }
	
	        // Check forceLanguage is present
	        if (forceLanguage) {
	          loadTranslationsIfMissing(forceLanguage);
	        }
	
	        // Duck detection: If the first argument is an array, a bunch of translations was requested.
	        // The result is an object.
	        if (angular.isArray(translationId)) {
	          var results = {};
	          for (var i = 0, c = translationId.length; i < c; i++) {
	            results[translationId[i]] = $translate.instant(translationId[i], interpolateParams, interpolationId, forceLanguage, sanitizeStrategy);
	          }
	          return results;
	        }
	
	        // We discarded unacceptable values. So we just need to verify if translationId is empty String
	        if (angular.isString(translationId) && translationId.length < 1) {
	          return translationId;
	        }
	
	        // trim off any whitespace
	        if (translationId) {
	          translationId = trim.apply(translationId);
	        }
	
	        var result,
	            possibleLangKeys = [];
	        if ($preferredLanguage) {
	          possibleLangKeys.push($preferredLanguage);
	        }
	        if (uses) {
	          possibleLangKeys.push(uses);
	        }
	        if ($fallbackLanguage && $fallbackLanguage.length) {
	          possibleLangKeys = possibleLangKeys.concat($fallbackLanguage);
	        }
	        for (var j = 0, d = possibleLangKeys.length; j < d; j++) {
	          var possibleLangKey = possibleLangKeys[j];
	          if ($translationTable[possibleLangKey]) {
	            if (typeof $translationTable[possibleLangKey][translationId] !== 'undefined') {
	              result = determineTranslationInstant(translationId, interpolateParams, interpolationId, uses, sanitizeStrategy);
	            }
	          }
	          if (typeof result !== 'undefined') {
	            break;
	          }
	        }
	
	        if (!result && result !== '') {
	          if ($notFoundIndicatorLeft || $notFoundIndicatorRight) {
	            result = applyNotFoundIndicators(translationId);
	          } else {
	            // Return translation of default interpolator if not found anything.
	            result = defaultInterpolator.interpolate(translationId, interpolateParams, 'filter', sanitizeStrategy);
	
	            // looks like the requested translation id doesn't exists.
	            // Now, if there is a registered handler for missing translations and no
	            // asyncLoader is pending, we execute the handler
	            var missingTranslationHandlerTranslation;
	            if ($missingTranslationHandlerFactory && !pendingLoader) {
	              missingTranslationHandlerTranslation = translateByHandler(translationId, interpolateParams, sanitizeStrategy);
	            }
	
	            if ($missingTranslationHandlerFactory && !pendingLoader && missingTranslationHandlerTranslation) {
	              result = missingTranslationHandlerTranslation;
	            }
	          }
	        }
	
	        return result;
	      };
	
	      /**
	       * @ngdoc function
	       * @name pascalprecht.translate.$translate#versionInfo
	       * @methodOf pascalprecht.translate.$translate
	       *
	       * @description
	       * Returns the current version information for the angular-translate library
	       *
	       * @return {string} angular-translate version
	       */
	      $translate.versionInfo = function () {
	        return version;
	      };
	
	      /**
	       * @ngdoc function
	       * @name pascalprecht.translate.$translate#loaderCache
	       * @methodOf pascalprecht.translate.$translate
	       *
	       * @description
	       * Returns the defined loaderCache.
	       *
	       * @return {boolean|string|object} current value of loaderCache
	       */
	      $translate.loaderCache = function () {
	        return loaderCache;
	      };
	
	      // internal purpose only
	      $translate.directivePriority = function () {
	        return directivePriority;
	      };
	
	      // internal purpose only
	      $translate.statefulFilter = function () {
	        return statefulFilter;
	      };
	
	      /**
	       * @ngdoc function
	       * @name pascalprecht.translate.$translate#isReady
	       * @methodOf pascalprecht.translate.$translate
	       *
	       * @description
	       * Returns whether the service is "ready" to translate (i.e. loading 1st language).
	       *
	       * See also {@link pascalprecht.translate.$translate#methods_onReady onReady()}.
	       *
	       * @return {boolean} current value of ready
	       */
	      $translate.isReady = function () {
	        return $isReady;
	      };
	
	      var $onReadyDeferred = $q.defer();
	      $onReadyDeferred.promise.then(function () {
	        $isReady = true;
	      });
	
	      /**
	       * @ngdoc function
	       * @name pascalprecht.translate.$translate#onReady
	       * @methodOf pascalprecht.translate.$translate
	       *
	       * @description
	       * Calls the function provided or resolved the returned promise after the service is "ready" to translate (i.e. loading 1st language).
	       *
	       * See also {@link pascalprecht.translate.$translate#methods_isReady isReady()}.
	       *
	       * @param {Function=} fn Function to invoke when service is ready
	       * @return {object} Promise resolved when service is ready
	       */
	      $translate.onReady = function (fn) {
	        var deferred = $q.defer();
	        if (angular.isFunction(fn)) {
	          deferred.promise.then(fn);
	        }
	        if ($isReady) {
	          deferred.resolve();
	        } else {
	          $onReadyDeferred.promise.then(deferred.resolve);
	        }
	        return deferred.promise;
	      };
	
	      /**
	       * @ngdoc function
	       * @name pascalprecht.translate.$translate#getAvailableLanguageKeys
	       * @methodOf pascalprecht.translate.$translate
	       *
	       * @description
	       * This function simply returns the registered language keys being defined before in the config phase
	       * With this, an application can use the array to provide a language selection dropdown or similar
	       * without any additional effort
	       *
	       * @returns {object} returns the list of possibly registered language keys and mapping or null if not defined
	       */
	      $translate.getAvailableLanguageKeys = function () {
	        if ($availableLanguageKeys.length > 0) {
	          return $availableLanguageKeys;
	        }
	        return null;
	      };
	
	      /**
	       * @ngdoc function
	       * @name pascalprecht.translate.$translate#getTranslationTable
	       * @methodOf pascalprecht.translate.$translate
	       *
	       * @description
	       * Returns translation table by the given language key.
	       *
	       * Unless a language is provided it returns a translation table of the current one.
	       * Note: If translation dictionary is currently downloading or in progress
	       * it will return null.
	       *
	       * @param {string} langKey A token which represents a translation id
	       *
	       * @return {object} a copy of angular-translate $translationTable
	       */
	      $translate.getTranslationTable = function (langKey) {
	        langKey = langKey || $translate.use();
	        if (langKey && $translationTable[langKey]) {
	          return angular.copy($translationTable[langKey]);
	        }
	        return null;
	      };
	
	      // Whenever $translateReady is being fired, this will ensure the state of $isReady
	      var globalOnReadyListener = $rootScope.$on('$translateReady', function () {
	        $onReadyDeferred.resolve();
	        globalOnReadyListener(); // one time only
	        globalOnReadyListener = null;
	      });
	      var globalOnChangeListener = $rootScope.$on('$translateChangeEnd', function () {
	        $onReadyDeferred.resolve();
	        globalOnChangeListener(); // one time only
	        globalOnChangeListener = null;
	      });
	
	      if ($loaderFactory) {
	
	        // If at least one async loader is defined and there are no
	        // (default) translations available we should try to load them.
	        if (angular.equals($translationTable, {})) {
	          if ($translate.use()) {
	            $translate.use($translate.use());
	          }
	        }
	
	        // Also, if there are any fallback language registered, we start
	        // loading them asynchronously as soon as we can.
	        if ($fallbackLanguage && $fallbackLanguage.length) {
	          var processAsyncResult = function processAsyncResult(translation) {
	            translations(translation.key, translation.table);
	            $rootScope.$emit('$translateChangeEnd', { language: translation.key });
	            return translation;
	          };
	          for (var i = 0, len = $fallbackLanguage.length; i < len; i++) {
	            var fallbackLanguageId = $fallbackLanguage[i];
	            if ($forceAsyncReloadEnabled || !$translationTable[fallbackLanguageId]) {
	              langPromises[fallbackLanguageId] = loadAsync(fallbackLanguageId).then(processAsyncResult);
	            }
	          }
	        }
	      } else {
	        $rootScope.$emit('$translateReady', { language: $translate.use() });
	      }
	
	      return $translate;
	    }];
	  }
	
	  $translate.displayName = 'displayName';
	
	  /**
	   * @ngdoc object
	   * @name pascalprecht.translate.$translateDefaultInterpolation
	   * @requires $interpolate
	   *
	   * @description
	   * Uses angular's `$interpolate` services to interpolate strings against some values.
	   *
	   * Be aware to configure a proper sanitization strategy.
	   *
	   * See also:
	   * * {@link pascalprecht.translate.$translateSanitization}
	   *
	   * @return {object} $translateDefaultInterpolation Interpolator service
	   */
	  angular.module('pascalprecht.translate').factory('$translateDefaultInterpolation', $translateDefaultInterpolation);
	
	  function $translateDefaultInterpolation($interpolate, $translateSanitization) {
	
	    'use strict';
	
	    var $translateInterpolator = {},
	        $locale,
	        $identifier = 'default';
	
	    /**
	     * @ngdoc function
	     * @name pascalprecht.translate.$translateDefaultInterpolation#setLocale
	     * @methodOf pascalprecht.translate.$translateDefaultInterpolation
	     *
	     * @description
	     * Sets current locale (this is currently not use in this interpolation).
	     *
	     * @param {string} locale Language key or locale.
	     */
	    $translateInterpolator.setLocale = function (locale) {
	      $locale = locale;
	    };
	
	    /**
	     * @ngdoc function
	     * @name pascalprecht.translate.$translateDefaultInterpolation#getInterpolationIdentifier
	     * @methodOf pascalprecht.translate.$translateDefaultInterpolation
	     *
	     * @description
	     * Returns an identifier for this interpolation service.
	     *
	     * @returns {string} $identifier
	     */
	    $translateInterpolator.getInterpolationIdentifier = function () {
	      return $identifier;
	    };
	
	    /**
	     * @deprecated will be removed in 3.0
	     * @see {@link pascalprecht.translate.$translateSanitization}
	     */
	    $translateInterpolator.useSanitizeValueStrategy = function (value) {
	      $translateSanitization.useStrategy(value);
	      return this;
	    };
	
	    /**
	     * @ngdoc function
	     * @name pascalprecht.translate.$translateDefaultInterpolation#interpolate
	     * @methodOf pascalprecht.translate.$translateDefaultInterpolation
	     *
	     * @description
	     * Interpolates given value agains given interpolate params using angulars
	     * `$interpolate` service.
	     *
	     * Since AngularJS 1.5, `value` must not be a string but can be anything input.
	     *
	     * @param {string} value translation
	     * @param {object} [interpolationParams={}] interpolation params
	     * @param {string} [context=undefined] current context (filter, directive, service)
	     * @param {string} [sanitizeStrategy=undefined] sanitize strategy (use default unless set)
	     * @param {string} translationId current translationId
	     *
	     * @returns {string} interpolated string
	     */
	    $translateInterpolator.interpolate = function (value, interpolationParams, context, sanitizeStrategy, translationId) {
	      // jshint ignore:line
	      interpolationParams = interpolationParams || {};
	      interpolationParams = $translateSanitization.sanitize(interpolationParams, 'params', sanitizeStrategy, context);
	
	      var interpolatedText;
	      if (angular.isNumber(value)) {
	        // numbers are safe
	        interpolatedText = '' + value;
	      } else if (angular.isString(value)) {
	        // strings must be interpolated (that's the job here)
	        interpolatedText = $interpolate(value)(interpolationParams);
	        interpolatedText = $translateSanitization.sanitize(interpolatedText, 'text', sanitizeStrategy, context);
	      } else {
	        // neither a number or a string, cant interpolate => empty string
	        interpolatedText = '';
	      }
	
	      return interpolatedText;
	    };
	
	    return $translateInterpolator;
	  }
	
	  $translateDefaultInterpolation.displayName = '$translateDefaultInterpolation';
	
	  angular.module('pascalprecht.translate').constant('$STORAGE_KEY', 'NG_TRANSLATE_LANG_KEY');
	
	  angular.module('pascalprecht.translate')
	  /**
	   * @ngdoc directive
	   * @name pascalprecht.translate.directive:translate
	   * @requires $interpolate,
	   * @requires $compile,
	   * @requires $parse,
	   * @requires $rootScope
	   * @restrict AE
	   *
	   * @description
	   * Translates given translation id either through attribute or DOM content.
	   * Internally it uses $translate service to translate the translation id. It possible to
	   * pass an optional `translate-values` object literal as string into translation id.
	   *
	   * @param {string=} translate Translation id which could be either string or interpolated string.
	   * @param {string=} translate-values Values to pass into translation id. Can be passed as object literal string or interpolated object.
	   * @param {string=} translate-attr-ATTR translate Translation id and put it into ATTR attribute.
	   * @param {string=} translate-default will be used unless translation was successful
	   * @param {string=} translate-sanitize-strategy defines locally sanitize strategy
	   * @param {boolean=} translate-compile (default true if present) defines locally activation of {@link pascalprecht.translate.$translateProvider#methods_usePostCompiling}
	   * @param {boolean=} translate-keep-content (default true if present) defines that in case a KEY could not be translated, that the existing content is left in the innerHTML}
	   *
	   * @example
	     <example module="ngView">
	      <file name="index.html">
	        <div ng-controller="TranslateCtrl">
	  
	          <pre translate="TRANSLATION_ID"></pre>
	          <pre translate>TRANSLATION_ID</pre>
	          <pre translate translate-attr-title="TRANSLATION_ID"></pre>
	          <pre translate="{{translationId}}"></pre>
	          <pre translate>{{translationId}}</pre>
	          <pre translate="WITH_VALUES" translate-values="{value: 5}"></pre>
	          <pre translate translate-values="{value: 5}">WITH_VALUES</pre>
	          <pre translate="WITH_VALUES" translate-values="{{values}}"></pre>
	          <pre translate translate-values="{{values}}">WITH_VALUES</pre>
	          <pre translate translate-attr-title="WITH_VALUES" translate-values="{{values}}"></pre>
	          <pre translate="WITH_CAMEL_CASE_KEY" translate-value-camel-case-key="Hi"></pre>
	  
	        </div>
	      </file>
	      <file name="script.js">
	        angular.module('ngView', ['pascalprecht.translate'])
	  
	        .config(function ($translateProvider) {
	  
	          $translateProvider.translations('en',{
	            'TRANSLATION_ID': 'Hello there!',
	            'WITH_VALUES': 'The following value is dynamic: {{value}}',
	            'WITH_CAMEL_CASE_KEY': 'The interpolation key is camel cased: {{camelCaseKey}}'
	          }).preferredLanguage('en');
	  
	        });
	  
	        angular.module('ngView').controller('TranslateCtrl', function ($scope) {
	          $scope.translationId = 'TRANSLATION_ID';
	  
	          $scope.values = {
	            value: 78
	          };
	        });
	      </file>
	      <file name="scenario.js">
	        it('should translate', function () {
	          inject(function ($rootScope, $compile) {
	            $rootScope.translationId = 'TRANSLATION_ID';
	  
	            element = $compile('<p translate="TRANSLATION_ID"></p>')($rootScope);
	            $rootScope.$digest();
	            expect(element.text()).toBe('Hello there!');
	  
	            element = $compile('<p translate="{{translationId}}"></p>')($rootScope);
	            $rootScope.$digest();
	            expect(element.text()).toBe('Hello there!');
	  
	            element = $compile('<p translate>TRANSLATION_ID</p>')($rootScope);
	            $rootScope.$digest();
	            expect(element.text()).toBe('Hello there!');
	  
	            element = $compile('<p translate>{{translationId}}</p>')($rootScope);
	            $rootScope.$digest();
	            expect(element.text()).toBe('Hello there!');
	  
	            element = $compile('<p translate translate-attr-title="TRANSLATION_ID"></p>')($rootScope);
	            $rootScope.$digest();
	            expect(element.attr('title')).toBe('Hello there!');
	  
	            element = $compile('<p translate="WITH_CAMEL_CASE_KEY" translate-value-camel-case-key="Hello"></p>')($rootScope);
	            $rootScope.$digest();
	            expect(element.text()).toBe('The interpolation key is camel cased: Hello');
	          });
	        });
	      </file>
	     </example>
	   */
	  .directive('translate', translateDirective);
	  function translateDirective($translate, $interpolate, $compile, $parse, $rootScope) {
	
	    'use strict';
	
	    /**
	     * @name trim
	     * @private
	     *
	     * @description
	     * trim polyfill
	     *
	     * @returns {string} The string stripped of whitespace from both ends
	     */
	
	    var trim = function trim() {
	      return this.toString().replace(/^\s+|\s+$/g, '');
	    };
	
	    /**
	     * @name lowercase
	     * @private
	     *
	     * @description
	     * Return the lowercase string only if the type is string
	     *
	     * @returns {string} The string all in lowercase
	     */
	    var lowercase = function lowercase(string) {
	      return angular.isString(string) ? string.toLowerCase() : string;
	    };
	
	    return {
	      restrict: 'AE',
	      scope: true,
	      priority: $translate.directivePriority(),
	      compile: function compile(tElement, tAttr) {
	
	        var translateValuesExist = tAttr.translateValues ? tAttr.translateValues : undefined;
	
	        var translateInterpolation = tAttr.translateInterpolation ? tAttr.translateInterpolation : undefined;
	
	        var translateSanitizeStrategyExist = tAttr.translateSanitizeStrategy ? tAttr.translateSanitizeStrategy : undefined;
	
	        var translateValueExist = tElement[0].outerHTML.match(/translate-value-+/i);
	
	        var interpolateRegExp = '^(.*)(' + $interpolate.startSymbol() + '.*' + $interpolate.endSymbol() + ')(.*)',
	            watcherRegExp = '^(.*)' + $interpolate.startSymbol() + '(.*)' + $interpolate.endSymbol() + '(.*)';
	
	        return function linkFn(scope, iElement, iAttr) {
	
	          scope.interpolateParams = {};
	          scope.preText = '';
	          scope.postText = '';
	          scope.translateNamespace = getTranslateNamespace(scope);
	          var translationIds = {};
	
	          var initInterpolationParams = function initInterpolationParams(interpolateParams, iAttr, tAttr) {
	            // initial setup
	            if (iAttr.translateValues) {
	              angular.extend(interpolateParams, $parse(iAttr.translateValues)(scope.$parent));
	            }
	            // initially fetch all attributes if existing and fill the params
	            if (translateValueExist) {
	              for (var attr in tAttr) {
	                if (Object.prototype.hasOwnProperty.call(iAttr, attr) && attr.substr(0, 14) === 'translateValue' && attr !== 'translateValues') {
	                  var attributeName = lowercase(attr.substr(14, 1)) + attr.substr(15);
	                  interpolateParams[attributeName] = tAttr[attr];
	                }
	              }
	            }
	          };
	
	          // Ensures any change of the attribute "translate" containing the id will
	          // be re-stored to the scope's "translationId".
	          // If the attribute has no content, the element's text value (white spaces trimmed off) will be used.
	          var observeElementTranslation = function observeElementTranslation(translationId) {
	
	            // Remove any old watcher
	            if (angular.isFunction(observeElementTranslation._unwatchOld)) {
	              observeElementTranslation._unwatchOld();
	              observeElementTranslation._unwatchOld = undefined;
	            }
	
	            if (angular.equals(translationId, '') || !angular.isDefined(translationId)) {
	              var iElementText = trim.apply(iElement.text());
	
	              // Resolve translation id by inner html if required
	              var interpolateMatches = iElementText.match(interpolateRegExp);
	              // Interpolate translation id if required
	              if (angular.isArray(interpolateMatches)) {
	                scope.preText = interpolateMatches[1];
	                scope.postText = interpolateMatches[3];
	                translationIds.translate = $interpolate(interpolateMatches[2])(scope.$parent);
	                var watcherMatches = iElementText.match(watcherRegExp);
	                if (angular.isArray(watcherMatches) && watcherMatches[2] && watcherMatches[2].length) {
	                  observeElementTranslation._unwatchOld = scope.$watch(watcherMatches[2], function (newValue) {
	                    translationIds.translate = newValue;
	                    updateTranslations();
	                  });
	                }
	              } else {
	                // do not assigne the translation id if it is empty.
	                translationIds.translate = !iElementText ? undefined : iElementText;
	              }
	            } else {
	              translationIds.translate = translationId;
	            }
	            updateTranslations();
	          };
	
	          var observeAttributeTranslation = function observeAttributeTranslation(translateAttr) {
	            iAttr.$observe(translateAttr, function (translationId) {
	              translationIds[translateAttr] = translationId;
	              updateTranslations();
	            });
	          };
	
	          // initial setup with values
	          initInterpolationParams(scope.interpolateParams, iAttr, tAttr);
	
	          var firstAttributeChangedEvent = true;
	          iAttr.$observe('translate', function (translationId) {
	            if (typeof translationId === 'undefined') {
	              // case of element "<translate>xyz</translate>"
	              observeElementTranslation('');
	            } else {
	              // case of regular attribute
	              if (translationId !== '' || !firstAttributeChangedEvent) {
	                translationIds.translate = translationId;
	                updateTranslations();
	              }
	            }
	            firstAttributeChangedEvent = false;
	          });
	
	          for (var translateAttr in iAttr) {
	            if (iAttr.hasOwnProperty(translateAttr) && translateAttr.substr(0, 13) === 'translateAttr' && translateAttr.length > 13) {
	              observeAttributeTranslation(translateAttr);
	            }
	          }
	
	          iAttr.$observe('translateDefault', function (value) {
	            scope.defaultText = value;
	            updateTranslations();
	          });
	
	          if (translateSanitizeStrategyExist) {
	            iAttr.$observe('translateSanitizeStrategy', function (value) {
	              scope.sanitizeStrategy = $parse(value)(scope.$parent);
	              updateTranslations();
	            });
	          }
	
	          if (translateValuesExist) {
	            iAttr.$observe('translateValues', function (interpolateParams) {
	              if (interpolateParams) {
	                scope.$parent.$watch(function () {
	                  angular.extend(scope.interpolateParams, $parse(interpolateParams)(scope.$parent));
	                });
	              }
	            });
	          }
	
	          if (translateValueExist) {
	            var observeValueAttribute = function observeValueAttribute(attrName) {
	              iAttr.$observe(attrName, function (value) {
	                var attributeName = lowercase(attrName.substr(14, 1)) + attrName.substr(15);
	                scope.interpolateParams[attributeName] = value;
	              });
	            };
	            for (var attr in iAttr) {
	              if (Object.prototype.hasOwnProperty.call(iAttr, attr) && attr.substr(0, 14) === 'translateValue' && attr !== 'translateValues') {
	                observeValueAttribute(attr);
	              }
	            }
	          }
	
	          // Master update function
	          var updateTranslations = function updateTranslations() {
	            for (var key in translationIds) {
	              if (translationIds.hasOwnProperty(key) && translationIds[key] !== undefined) {
	                updateTranslation(key, translationIds[key], scope, scope.interpolateParams, scope.defaultText, scope.translateNamespace);
	              }
	            }
	          };
	
	          // Put translation processing function outside loop
	          var updateTranslation = function updateTranslation(translateAttr, translationId, scope, interpolateParams, defaultTranslationText, translateNamespace) {
	            if (translationId) {
	              // if translation id starts with '.' and translateNamespace given, prepend namespace
	              if (translateNamespace && translationId.charAt(0) === '.') {
	                translationId = translateNamespace + translationId;
	              }
	
	              $translate(translationId, interpolateParams, translateInterpolation, defaultTranslationText, scope.translateLanguage, scope.sanitizeStrategy).then(function (translation) {
	                applyTranslation(translation, scope, true, translateAttr);
	              }, function (translationId) {
	                applyTranslation(translationId, scope, false, translateAttr);
	              });
	            } else {
	              // as an empty string cannot be translated, we can solve this using successful=false
	              applyTranslation(translationId, scope, false, translateAttr);
	            }
	          };
	
	          var applyTranslation = function applyTranslation(value, scope, successful, translateAttr) {
	            if (!successful) {
	              if (typeof scope.defaultText !== 'undefined') {
	                value = scope.defaultText;
	              }
	            }
	            if (translateAttr === 'translate') {
	              // default translate into innerHTML
	              if (successful || !successful && !$translate.isKeepContent() && typeof iAttr.translateKeepContent === 'undefined') {
	                iElement.empty().append(scope.preText + value + scope.postText);
	              }
	              var globallyEnabled = $translate.isPostCompilingEnabled();
	              var locallyDefined = typeof tAttr.translateCompile !== 'undefined';
	              var locallyEnabled = locallyDefined && tAttr.translateCompile !== 'false';
	              if (globallyEnabled && !locallyDefined || locallyEnabled) {
	                $compile(iElement.contents())(scope);
	              }
	            } else {
	              // translate attribute
	              var attributeName = iAttr.$attr[translateAttr];
	              if (attributeName.substr(0, 5) === 'data-') {
	                // ensure html5 data prefix is stripped
	                attributeName = attributeName.substr(5);
	              }
	              attributeName = attributeName.substr(15);
	              iElement.attr(attributeName, value);
	            }
	          };
	
	          if (translateValuesExist || translateValueExist || iAttr.translateDefault) {
	            scope.$watch('interpolateParams', updateTranslations, true);
	          }
	
	          // Replaced watcher on translateLanguage with event listener
	          scope.$on('translateLanguageChanged', updateTranslations);
	
	          // Ensures the text will be refreshed after the current language was changed
	          // w/ $translate.use(...)
	          var unbind = $rootScope.$on('$translateChangeSuccess', updateTranslations);
	
	          // ensure translation will be looked up at least one
	          if (iElement.text().length) {
	            if (iAttr.translate) {
	              observeElementTranslation(iAttr.translate);
	            } else {
	              observeElementTranslation('');
	            }
	          } else if (iAttr.translate) {
	            // ensure attribute will be not skipped
	            observeElementTranslation(iAttr.translate);
	          }
	          updateTranslations();
	          scope.$on('$destroy', unbind);
	        };
	      }
	    };
	  }
	
	  /**
	   * Returns the scope's namespace.
	   * @private
	   * @param scope
	   * @returns {string}
	   */
	  function getTranslateNamespace(scope) {
	    'use strict';
	
	    if (scope.translateNamespace) {
	      return scope.translateNamespace;
	    }
	    if (scope.$parent) {
	      return getTranslateNamespace(scope.$parent);
	    }
	  }
	
	  translateDirective.displayName = 'translateDirective';
	
	  angular.module('pascalprecht.translate')
	  /**
	   * @ngdoc directive
	   * @name pascalprecht.translate.directive:translate-attr
	   * @restrict A
	   *
	   * @description
	   * Translates attributes like translate-attr-ATTR, but with an object like ng-class.
	   * Internally it uses `translate` service to translate translation id. It possible to
	   * pass an optional `translate-values` object literal as string into translation id.
	   *
	   * @param {string=} translate-attr Object literal mapping attributes to translation ids.
	   * @param {string=} translate-values Values to pass into the translation ids. Can be passed as object literal string.
	   * @param {string=} translate-sanitize-strategy defines locally sanitize strategy
	   *
	   * @example
	     <example module="ngView">
	      <file name="index.html">
	        <div ng-controller="TranslateCtrl">
	  
	          <input translate-attr="{ placeholder: translationId, title: 'WITH_VALUES' }" translate-values="{value: 5}" />
	  
	        </div>
	      </file>
	      <file name="script.js">
	        angular.module('ngView', ['pascalprecht.translate'])
	  
	        .config(function ($translateProvider) {
	  
	          $translateProvider.translations('en',{
	            'TRANSLATION_ID': 'Hello there!',
	            'WITH_VALUES': 'The following value is dynamic: {{value}}',
	          }).preferredLanguage('en');
	  
	        });
	  
	        angular.module('ngView').controller('TranslateCtrl', function ($scope) {
	          $scope.translationId = 'TRANSLATION_ID';
	  
	          $scope.values = {
	            value: 78
	          };
	        });
	      </file>
	      <file name="scenario.js">
	        it('should translate', function () {
	          inject(function ($rootScope, $compile) {
	            $rootScope.translationId = 'TRANSLATION_ID';
	  
	            element = $compile('<input translate-attr="{ placeholder: translationId, title: 'WITH_VALUES' }" translate-values="{ value: 5 }" />')($rootScope);
	            $rootScope.$digest();
	            expect(element.attr('placeholder)).toBe('Hello there!');
	            expect(element.attr('title)).toBe('The following value is dynamic: 5');
	          });
	        });
	      </file>
	     </example>
	   */
	  .directive('translateAttr', translateAttrDirective);
	  function translateAttrDirective($translate, $rootScope) {
	
	    'use strict';
	
	    return {
	      restrict: 'A',
	      priority: $translate.directivePriority(),
	      link: function linkFn(scope, element, attr) {
	
	        var translateAttr,
	            translateValues,
	            translateSanitizeStrategy,
	            previousAttributes = {};
	
	        // Main update translations function
	        var updateTranslations = function updateTranslations() {
	          angular.forEach(translateAttr, function (translationId, attributeName) {
	            if (!translationId) {
	              return;
	            }
	            previousAttributes[attributeName] = true;
	
	            // if translation id starts with '.' and translateNamespace given, prepend namespace
	            if (scope.translateNamespace && translationId.charAt(0) === '.') {
	              translationId = scope.translateNamespace + translationId;
	            }
	            $translate(translationId, translateValues, attr.translateInterpolation, undefined, scope.translateLanguage, translateSanitizeStrategy).then(function (translation) {
	              element.attr(attributeName, translation);
	            }, function (translationId) {
	              element.attr(attributeName, translationId);
	            });
	          });
	
	          // Removing unused attributes that were previously used
	          angular.forEach(previousAttributes, function (flag, attributeName) {
	            if (!translateAttr[attributeName]) {
	              element.removeAttr(attributeName);
	              delete previousAttributes[attributeName];
	            }
	          });
	        };
	
	        // Watch for attribute changes
	        watchAttribute(scope, attr.translateAttr, function (newValue) {
	          translateAttr = newValue;
	        }, updateTranslations);
	        // Watch for value changes
	        watchAttribute(scope, attr.translateValues, function (newValue) {
	          translateValues = newValue;
	        }, updateTranslations);
	        // Watch for sanitize strategy changes
	        watchAttribute(scope, attr.translateSanitizeStrategy, function (newValue) {
	          translateSanitizeStrategy = newValue;
	        }, updateTranslations);
	
	        if (attr.translateValues) {
	          scope.$watch(attr.translateValues, updateTranslations, true);
	        }
	
	        // Replaced watcher on translateLanguage with event listener
	        scope.$on('translateLanguageChanged', updateTranslations);
	
	        // Ensures the text will be refreshed after the current language was changed
	        // w/ $translate.use(...)
	        var unbind = $rootScope.$on('$translateChangeSuccess', updateTranslations);
	
	        updateTranslations();
	        scope.$on('$destroy', unbind);
	      }
	    };
	  }
	
	  function watchAttribute(scope, attribute, valueCallback, changeCallback) {
	    'use strict';
	
	    if (!attribute) {
	      return;
	    }
	    if (attribute.substr(0, 2) === '::') {
	      attribute = attribute.substr(2);
	    } else {
	      scope.$watch(attribute, function (newValue) {
	        valueCallback(newValue);
	        changeCallback();
	      }, true);
	    }
	    valueCallback(scope.$eval(attribute));
	  }
	
	  translateAttrDirective.displayName = 'translateAttrDirective';
	
	  angular.module('pascalprecht.translate')
	  /**
	   * @ngdoc directive
	   * @name pascalprecht.translate.directive:translateCloak
	   * @requires $translate
	   * @restrict A
	   *
	   * $description
	   * Adds a `translate-cloak` class name to the given element where this directive
	   * is applied initially and removes it, once a loader has finished loading.
	   *
	   * This directive can be used to prevent initial flickering when loading translation
	   * data asynchronously.
	   *
	   * The class name is defined in
	   * {@link pascalprecht.translate.$translateProvider#cloakClassName $translate.cloakClassName()}.
	   *
	   * @param {string=} translate-cloak If a translationId is provided, it will be used for showing
	   *                                  or hiding the cloak. Basically it relies on the translation
	   *                                  resolve.
	   */
	  .directive('translateCloak', translateCloakDirective);
	
	  function translateCloakDirective($translate, $rootScope) {
	
	    'use strict';
	
	    return {
	      compile: function compile(tElement) {
	        var applyCloak = function applyCloak(element) {
	          element.addClass($translate.cloakClassName());
	        },
	            removeCloak = function removeCloak(element) {
	          element.removeClass($translate.cloakClassName());
	        };
	        applyCloak(tElement);
	
	        return function linkFn(scope, iElement, iAttr) {
	          //Create bound functions that incorporate the active DOM element.
	          var iRemoveCloak = removeCloak.bind(this, iElement),
	              iApplyCloak = applyCloak.bind(this, iElement);
	          if (iAttr.translateCloak && iAttr.translateCloak.length) {
	            // Register a watcher for the defined translation allowing a fine tuned cloak
	            iAttr.$observe('translateCloak', function (translationId) {
	              $translate(translationId).then(iRemoveCloak, iApplyCloak);
	            });
	            $rootScope.$on('$translateChangeSuccess', function () {
	              $translate(iAttr.translateCloak).then(iRemoveCloak, iApplyCloak);
	            });
	          } else {
	            $translate.onReady(iRemoveCloak);
	          }
	        };
	      }
	    };
	  }
	
	  translateCloakDirective.displayName = 'translateCloakDirective';
	
	  angular.module('pascalprecht.translate')
	  /**
	   * @ngdoc directive
	   * @name pascalprecht.translate.directive:translateNamespace
	   * @restrict A
	   *
	   * @description
	   * Translates given translation id either through attribute or DOM content.
	   * Internally it uses `translate` filter to translate translation id. It possible to
	   * pass an optional `translate-values` object literal as string into translation id.
	   *
	   * @param {string=} translate namespace name which could be either string or interpolated string.
	   *
	   * @example
	     <example module="ngView">
	      <file name="index.html">
	        <div translate-namespace="CONTENT">
	  
	          <div>
	              <h1 translate>.HEADERS.TITLE</h1>
	              <h1 translate>.HEADERS.WELCOME</h1>
	          </div>
	  
	          <div translate-namespace=".HEADERS">
	              <h1 translate>.TITLE</h1>
	              <h1 translate>.WELCOME</h1>
	          </div>
	  
	        </div>
	      </file>
	      <file name="script.js">
	        angular.module('ngView', ['pascalprecht.translate'])
	  
	        .config(function ($translateProvider) {
	  
	          $translateProvider.translations('en',{
	            'TRANSLATION_ID': 'Hello there!',
	            'CONTENT': {
	              'HEADERS': {
	                  TITLE: 'Title'
	              }
	            },
	            'CONTENT.HEADERS.WELCOME': 'Welcome'
	          }).preferredLanguage('en');
	  
	        });
	  
	      </file>
	     </example>
	   */
	  .directive('translateNamespace', translateNamespaceDirective);
	
	  function translateNamespaceDirective() {
	
	    'use strict';
	
	    return {
	      restrict: 'A',
	      scope: true,
	      compile: function compile() {
	        return {
	          pre: function pre(scope, iElement, iAttrs) {
	            scope.translateNamespace = getTranslateNamespace(scope);
	
	            if (scope.translateNamespace && iAttrs.translateNamespace.charAt(0) === '.') {
	              scope.translateNamespace += iAttrs.translateNamespace;
	            } else {
	              scope.translateNamespace = iAttrs.translateNamespace;
	            }
	          }
	        };
	      }
	    };
	  }
	
	  /**
	   * Returns the scope's namespace.
	   * @private
	   * @param scope
	   * @returns {string}
	   */
	  function getTranslateNamespace(scope) {
	    'use strict';
	
	    if (scope.translateNamespace) {
	      return scope.translateNamespace;
	    }
	    if (scope.$parent) {
	      return getTranslateNamespace(scope.$parent);
	    }
	  }
	
	  translateNamespaceDirective.displayName = 'translateNamespaceDirective';
	
	  angular.module('pascalprecht.translate')
	  /**
	   * @ngdoc directive
	   * @name pascalprecht.translate.directive:translateLanguage
	   * @restrict A
	   *
	   * @description
	   * Forces the language to the directives in the underlying scope.
	   *
	   * @param {string=} translate language that will be negotiated.
	   *
	   * @example
	     <example module="ngView">
	      <file name="index.html">
	        <div>
	  
	          <div>
	              <h1 translate>HELLO</h1>
	          </div>
	  
	          <div translate-language="de">
	              <h1 translate>HELLO</h1>
	          </div>
	  
	        </div>
	      </file>
	      <file name="script.js">
	        angular.module('ngView', ['pascalprecht.translate'])
	  
	        .config(function ($translateProvider) {
	  
	          $translateProvider
	            .translations('en',{
	              'HELLO': 'Hello world!'
	            })
	            .translations('de',{
	              'HELLO': 'Hallo Welt!'
	            })
	            .preferredLanguage('en');
	  
	        });
	  
	      </file>
	     </example>
	   */
	  .directive('translateLanguage', translateLanguageDirective);
	
	  function translateLanguageDirective() {
	
	    'use strict';
	
	    return {
	      restrict: 'A',
	      scope: true,
	      compile: function compile() {
	        return function linkFn(scope, iElement, iAttrs) {
	
	          iAttrs.$observe('translateLanguage', function (newTranslateLanguage) {
	            scope.translateLanguage = newTranslateLanguage;
	          });
	
	          scope.$watch('translateLanguage', function () {
	            scope.$broadcast('translateLanguageChanged');
	          });
	        };
	      }
	    };
	  }
	
	  translateLanguageDirective.displayName = 'translateLanguageDirective';
	
	  angular.module('pascalprecht.translate')
	  /**
	   * @ngdoc filter
	   * @name pascalprecht.translate.filter:translate
	   * @requires $parse
	   * @requires pascalprecht.translate.$translate
	   * @function
	   *
	   * @description
	   * Uses `$translate` service to translate contents. Accepts interpolate parameters
	   * to pass dynamized values though translation.
	   *
	   * @param {string} translationId A translation id to be translated.
	   * @param {*=} interpolateParams Optional object literal (as hash or string) to pass values into translation.
	   *
	   * @returns {string} Translated text.
	   *
	   * @example
	     <example module="ngView">
	      <file name="index.html">
	        <div ng-controller="TranslateCtrl">
	  
	          <pre>{{ 'TRANSLATION_ID' | translate }}</pre>
	          <pre>{{ translationId | translate }}</pre>
	          <pre>{{ 'WITH_VALUES' | translate:'{value: 5}' }}</pre>
	          <pre>{{ 'WITH_VALUES' | translate:values }}</pre>
	  
	        </div>
	      </file>
	      <file name="script.js">
	        angular.module('ngView', ['pascalprecht.translate'])
	  
	        .config(function ($translateProvider) {
	  
	          $translateProvider.translations('en', {
	            'TRANSLATION_ID': 'Hello there!',
	            'WITH_VALUES': 'The following value is dynamic: {{value}}'
	          });
	          $translateProvider.preferredLanguage('en');
	  
	        });
	  
	        angular.module('ngView').controller('TranslateCtrl', function ($scope) {
	          $scope.translationId = 'TRANSLATION_ID';
	  
	          $scope.values = {
	            value: 78
	          };
	        });
	      </file>
	     </example>
	   */
	  .filter('translate', translateFilterFactory);
	
	  function translateFilterFactory($parse, $translate) {
	
	    'use strict';
	
	    var translateFilter = function translateFilter(translationId, interpolateParams, interpolation, forceLanguage) {
	      if (!angular.isObject(interpolateParams)) {
	        var ctx = this || {
	          '__SCOPE_IS_NOT_AVAILABLE': 'More info at https://github.com/angular/angular.js/commit/8863b9d04c722b278fa93c5d66ad1e578ad6eb1f'
	        };
	        interpolateParams = $parse(interpolateParams)(ctx);
	      }
	
	      return $translate.instant(translationId, interpolateParams, interpolation, forceLanguage);
	    };
	
	    if ($translate.statefulFilter()) {
	      translateFilter.$stateful = true;
	    }
	
	    return translateFilter;
	  }
	
	  translateFilterFactory.displayName = 'translateFilterFactory';
	
	  angular.module('pascalprecht.translate')
	
	  /**
	   * @ngdoc object
	   * @name pascalprecht.translate.$translationCache
	   * @requires $cacheFactory
	   *
	   * @description
	   * The first time a translation table is used, it is loaded in the translation cache for quick retrieval. You
	   * can load translation tables directly into the cache by consuming the
	   * `$translationCache` service directly.
	   *
	   * @return {object} $cacheFactory object.
	   */
	  .factory('$translationCache', $translationCache);
	
	  function $translationCache($cacheFactory) {
	
	    'use strict';
	
	    return $cacheFactory('translations');
	  }
	
	  $translationCache.displayName = '$translationCache';
	  return 'pascalprecht.translate';
	});

/***/ },
/* 333 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _angular = __webpack_require__(329);
	
	var _angular2 = _interopRequireDefault(_angular);
	
	var _dateWrapper = __webpack_require__(334);
	
	var _dateWrapper2 = _interopRequireDefault(_dateWrapper);
	
	var _dateSelector = __webpack_require__(458);
	
	var _dateSelector2 = _interopRequireDefault(_dateSelector);
	
	var _airport = __webpack_require__(461);
	
	var _airport2 = _interopRequireDefault(_airport);
	
	var _inputAutocomplete = __webpack_require__(465);
	
	var _inputAutocomplete2 = _interopRequireDefault(_inputAutocomplete);
	
	var _footer = __webpack_require__(468);
	
	var _footer2 = _interopRequireDefault(_footer);
	
	var _loading = __webpack_require__(471);
	
	var _loading2 = _interopRequireDefault(_loading);
	
	var _header = __webpack_require__(474);
	
	var _header2 = _interopRequireDefault(_header);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _angular2.default.module('app.components', []).component('dateWrapper', _dateWrapper2.default).component('dateSelector', _dateSelector2.default).component('airportSelect', _airport2.default).component('inputAutocomplete', _inputAutocomplete2.default).component('lunesfooter', _footer2.default).component('loading', _loading2.default).component('lunesheader', _header2.default).name;

/***/ },
/* 334 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _dateWrapperComponent = __webpack_require__(335);
	
	var _dateWrapperComponent2 = _interopRequireDefault(_dateWrapperComponent);
	
	var _dateWrapper = __webpack_require__(336);
	
	var _dateWrapper2 = _interopRequireDefault(_dateWrapper);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var DateWrapperComponent = {
	  bindings: {
	    startDate: '=',
	    endDate: '='
	  },
	  template: _dateWrapperComponent2.default,
	  controller: _dateWrapper2.default
	};
	
	exports.default = DateWrapperComponent;

/***/ },
/* 335 */
/***/ function(module, exports) {

	module.exports = "<div class=\"control is-horizontal\">\n  <div class=\"control-label\">\n    <label class=\"label\">\n      Fly out:\n    </label>\n  </div>\n\n  <div class=\"control\">\n    <date-selector date=\"$ctrl.startDate\">\n    </date-selector>\n  </div>\n\n  <div class=\"control-label\">\n    <label class=\"label\">\n      Fly back:\n    </label>\n  </div>\n  <div class=\"control\">\n    <date-selector date=\"$ctrl.endDate\">\n    </date-selector>\n  </div>\n</div>\n"

/***/ },
/* 336 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	DateWrapperController.$inject = ["$scope"];
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = DateWrapperController;
	
	var _moment = __webpack_require__(337);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function DateWrapperController($scope) {
	  'ngInject';
	
	  var _this = this;
	
	  $scope.$watch('$ctrl.startDate', function () {
	    if ((0, _moment2.default)(_this.startDate) > (0, _moment2.default)(_this.endDate)) {
	      _this.endDate = (0, _moment2.default)(_this.startDate).add(2, 'd').toDate();
	    }
	  });
	
	  $scope.$watch('$ctrl.endDate', function () {
	    if ((0, _moment2.default)(_this.endDate) < (0, _moment2.default)(_this.startDate)) {
	      _this.startDate = (0, _moment2.default)(_this.endDate).subtract(2, 'd').toDate();
	    }
	  });
	}

/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;var require;/* WEBPACK VAR INJECTION */(function(module) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js
	//! version : 2.20.1
	//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
	//! license : MIT
	//! momentjs.com
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : global.moment = factory();
	})(undefined, function () {
	    'use strict';
	
	    var hookCallback;
	
	    function hooks() {
	        return hookCallback.apply(null, arguments);
	    }
	
	    // This is done to register the method called with moment()
	    // without creating circular dependencies.
	    function setHookCallback(callback) {
	        hookCallback = callback;
	    }
	
	    function isArray(input) {
	        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
	    }
	
	    function isObject(input) {
	        // IE8 will treat undefined and null as object if it wasn't for
	        // input != null
	        return input != null && Object.prototype.toString.call(input) === '[object Object]';
	    }
	
	    function isObjectEmpty(obj) {
	        if (Object.getOwnPropertyNames) {
	            return Object.getOwnPropertyNames(obj).length === 0;
	        } else {
	            var k;
	            for (k in obj) {
	                if (obj.hasOwnProperty(k)) {
	                    return false;
	                }
	            }
	            return true;
	        }
	    }
	
	    function isUndefined(input) {
	        return input === void 0;
	    }
	
	    function isNumber(input) {
	        return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
	    }
	
	    function isDate(input) {
	        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
	    }
	
	    function map(arr, fn) {
	        var res = [],
	            i;
	        for (i = 0; i < arr.length; ++i) {
	            res.push(fn(arr[i], i));
	        }
	        return res;
	    }
	
	    function hasOwnProp(a, b) {
	        return Object.prototype.hasOwnProperty.call(a, b);
	    }
	
	    function extend(a, b) {
	        for (var i in b) {
	            if (hasOwnProp(b, i)) {
	                a[i] = b[i];
	            }
	        }
	
	        if (hasOwnProp(b, 'toString')) {
	            a.toString = b.toString;
	        }
	
	        if (hasOwnProp(b, 'valueOf')) {
	            a.valueOf = b.valueOf;
	        }
	
	        return a;
	    }
	
	    function createUTC(input, format, locale, strict) {
	        return createLocalOrUTC(input, format, locale, strict, true).utc();
	    }
	
	    function defaultParsingFlags() {
	        // We need to deep clone this object.
	        return {
	            empty: false,
	            unusedTokens: [],
	            unusedInput: [],
	            overflow: -2,
	            charsLeftOver: 0,
	            nullInput: false,
	            invalidMonth: null,
	            invalidFormat: false,
	            userInvalidated: false,
	            iso: false,
	            parsedDateParts: [],
	            meridiem: null,
	            rfc2822: false,
	            weekdayMismatch: false
	        };
	    }
	
	    function getParsingFlags(m) {
	        if (m._pf == null) {
	            m._pf = defaultParsingFlags();
	        }
	        return m._pf;
	    }
	
	    var some;
	    if (Array.prototype.some) {
	        some = Array.prototype.some;
	    } else {
	        some = function some(fun) {
	            var t = Object(this);
	            var len = t.length >>> 0;
	
	            for (var i = 0; i < len; i++) {
	                if (i in t && fun.call(this, t[i], i, t)) {
	                    return true;
	                }
	            }
	
	            return false;
	        };
	    }
	
	    function isValid(m) {
	        if (m._isValid == null) {
	            var flags = getParsingFlags(m);
	            var parsedParts = some.call(flags.parsedDateParts, function (i) {
	                return i != null;
	            });
	            var isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
	
	            if (m._strict) {
	                isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;
	            }
	
	            if (Object.isFrozen == null || !Object.isFrozen(m)) {
	                m._isValid = isNowValid;
	            } else {
	                return isNowValid;
	            }
	        }
	        return m._isValid;
	    }
	
	    function createInvalid(flags) {
	        var m = createUTC(NaN);
	        if (flags != null) {
	            extend(getParsingFlags(m), flags);
	        } else {
	            getParsingFlags(m).userInvalidated = true;
	        }
	
	        return m;
	    }
	
	    // Plugins that add properties should also add the key here (null value),
	    // so we can properly clone ourselves.
	    var momentProperties = hooks.momentProperties = [];
	
	    function copyConfig(to, from) {
	        var i, prop, val;
	
	        if (!isUndefined(from._isAMomentObject)) {
	            to._isAMomentObject = from._isAMomentObject;
	        }
	        if (!isUndefined(from._i)) {
	            to._i = from._i;
	        }
	        if (!isUndefined(from._f)) {
	            to._f = from._f;
	        }
	        if (!isUndefined(from._l)) {
	            to._l = from._l;
	        }
	        if (!isUndefined(from._strict)) {
	            to._strict = from._strict;
	        }
	        if (!isUndefined(from._tzm)) {
	            to._tzm = from._tzm;
	        }
	        if (!isUndefined(from._isUTC)) {
	            to._isUTC = from._isUTC;
	        }
	        if (!isUndefined(from._offset)) {
	            to._offset = from._offset;
	        }
	        if (!isUndefined(from._pf)) {
	            to._pf = getParsingFlags(from);
	        }
	        if (!isUndefined(from._locale)) {
	            to._locale = from._locale;
	        }
	
	        if (momentProperties.length > 0) {
	            for (i = 0; i < momentProperties.length; i++) {
	                prop = momentProperties[i];
	                val = from[prop];
	                if (!isUndefined(val)) {
	                    to[prop] = val;
	                }
	            }
	        }
	
	        return to;
	    }
	
	    var updateInProgress = false;
	
	    // Moment prototype object
	    function Moment(config) {
	        copyConfig(this, config);
	        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
	        if (!this.isValid()) {
	            this._d = new Date(NaN);
	        }
	        // Prevent infinite loop in case updateOffset creates new moment
	        // objects.
	        if (updateInProgress === false) {
	            updateInProgress = true;
	            hooks.updateOffset(this);
	            updateInProgress = false;
	        }
	    }
	
	    function isMoment(obj) {
	        return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
	    }
	
	    function absFloor(number) {
	        if (number < 0) {
	            // -0 -> 0
	            return Math.ceil(number) || 0;
	        } else {
	            return Math.floor(number);
	        }
	    }
	
	    function toInt(argumentForCoercion) {
	        var coercedNumber = +argumentForCoercion,
	            value = 0;
	
	        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
	            value = absFloor(coercedNumber);
	        }
	
	        return value;
	    }
	
	    // compare two arrays, return the number of differences
	    function compareArrays(array1, array2, dontConvert) {
	        var len = Math.min(array1.length, array2.length),
	            lengthDiff = Math.abs(array1.length - array2.length),
	            diffs = 0,
	            i;
	        for (i = 0; i < len; i++) {
	            if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
	                diffs++;
	            }
	        }
	        return diffs + lengthDiff;
	    }
	
	    function warn(msg) {
	        if (hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
	            console.warn('Deprecation warning: ' + msg);
	        }
	    }
	
	    function deprecate(msg, fn) {
	        var firstTime = true;
	
	        return extend(function () {
	            if (hooks.deprecationHandler != null) {
	                hooks.deprecationHandler(null, msg);
	            }
	            if (firstTime) {
	                var args = [];
	                var arg;
	                for (var i = 0; i < arguments.length; i++) {
	                    arg = '';
	                    if (_typeof(arguments[i]) === 'object') {
	                        arg += '\n[' + i + '] ';
	                        for (var key in arguments[0]) {
	                            arg += key + ': ' + arguments[0][key] + ', ';
	                        }
	                        arg = arg.slice(0, -2); // Remove trailing comma and space
	                    } else {
	                        arg = arguments[i];
	                    }
	                    args.push(arg);
	                }
	                warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + new Error().stack);
	                firstTime = false;
	            }
	            return fn.apply(this, arguments);
	        }, fn);
	    }
	
	    var deprecations = {};
	
	    function deprecateSimple(name, msg) {
	        if (hooks.deprecationHandler != null) {
	            hooks.deprecationHandler(name, msg);
	        }
	        if (!deprecations[name]) {
	            warn(msg);
	            deprecations[name] = true;
	        }
	    }
	
	    hooks.suppressDeprecationWarnings = false;
	    hooks.deprecationHandler = null;
	
	    function isFunction(input) {
	        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
	    }
	
	    function set(config) {
	        var prop, i;
	        for (i in config) {
	            prop = config[i];
	            if (isFunction(prop)) {
	                this[i] = prop;
	            } else {
	                this['_' + i] = prop;
	            }
	        }
	        this._config = config;
	        // Lenient ordinal parsing accepts just a number in addition to
	        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
	        // TODO: Remove "ordinalParse" fallback in next major release.
	        this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + '|' + /\d{1,2}/.source);
	    }
	
	    function mergeConfigs(parentConfig, childConfig) {
	        var res = extend({}, parentConfig),
	            prop;
	        for (prop in childConfig) {
	            if (hasOwnProp(childConfig, prop)) {
	                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
	                    res[prop] = {};
	                    extend(res[prop], parentConfig[prop]);
	                    extend(res[prop], childConfig[prop]);
	                } else if (childConfig[prop] != null) {
	                    res[prop] = childConfig[prop];
	                } else {
	                    delete res[prop];
	                }
	            }
	        }
	        for (prop in parentConfig) {
	            if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
	                // make sure changes to properties don't modify parent config
	                res[prop] = extend({}, res[prop]);
	            }
	        }
	        return res;
	    }
	
	    function Locale(config) {
	        if (config != null) {
	            this.set(config);
	        }
	    }
	
	    var keys;
	
	    if (Object.keys) {
	        keys = Object.keys;
	    } else {
	        keys = function keys(obj) {
	            var i,
	                res = [];
	            for (i in obj) {
	                if (hasOwnProp(obj, i)) {
	                    res.push(i);
	                }
	            }
	            return res;
	        };
	    }
	
	    var defaultCalendar = {
	        sameDay: '[Today at] LT',
	        nextDay: '[Tomorrow at] LT',
	        nextWeek: 'dddd [at] LT',
	        lastDay: '[Yesterday at] LT',
	        lastWeek: '[Last] dddd [at] LT',
	        sameElse: 'L'
	    };
	
	    function calendar(key, mom, now) {
	        var output = this._calendar[key] || this._calendar['sameElse'];
	        return isFunction(output) ? output.call(mom, now) : output;
	    }
	
	    var defaultLongDateFormat = {
	        LTS: 'h:mm:ss A',
	        LT: 'h:mm A',
	        L: 'MM/DD/YYYY',
	        LL: 'MMMM D, YYYY',
	        LLL: 'MMMM D, YYYY h:mm A',
	        LLLL: 'dddd, MMMM D, YYYY h:mm A'
	    };
	
	    function longDateFormat(key) {
	        var format = this._longDateFormat[key],
	            formatUpper = this._longDateFormat[key.toUpperCase()];
	
	        if (format || !formatUpper) {
	            return format;
	        }
	
	        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
	            return val.slice(1);
	        });
	
	        return this._longDateFormat[key];
	    }
	
	    var defaultInvalidDate = 'Invalid date';
	
	    function invalidDate() {
	        return this._invalidDate;
	    }
	
	    var defaultOrdinal = '%d';
	    var defaultDayOfMonthOrdinalParse = /\d{1,2}/;
	
	    function ordinal(number) {
	        return this._ordinal.replace('%d', number);
	    }
	
	    var defaultRelativeTime = {
	        future: 'in %s',
	        past: '%s ago',
	        s: 'a few seconds',
	        ss: '%d seconds',
	        m: 'a minute',
	        mm: '%d minutes',
	        h: 'an hour',
	        hh: '%d hours',
	        d: 'a day',
	        dd: '%d days',
	        M: 'a month',
	        MM: '%d months',
	        y: 'a year',
	        yy: '%d years'
	    };
	
	    function relativeTime(number, withoutSuffix, string, isFuture) {
	        var output = this._relativeTime[string];
	        return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
	    }
	
	    function pastFuture(diff, output) {
	        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
	        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
	    }
	
	    var aliases = {};
	
	    function addUnitAlias(unit, shorthand) {
	        var lowerCase = unit.toLowerCase();
	        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
	    }
	
	    function normalizeUnits(units) {
	        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
	    }
	
	    function normalizeObjectUnits(inputObject) {
	        var normalizedInput = {},
	            normalizedProp,
	            prop;
	
	        for (prop in inputObject) {
	            if (hasOwnProp(inputObject, prop)) {
	                normalizedProp = normalizeUnits(prop);
	                if (normalizedProp) {
	                    normalizedInput[normalizedProp] = inputObject[prop];
	                }
	            }
	        }
	
	        return normalizedInput;
	    }
	
	    var priorities = {};
	
	    function addUnitPriority(unit, priority) {
	        priorities[unit] = priority;
	    }
	
	    function getPrioritizedUnits(unitsObj) {
	        var units = [];
	        for (var u in unitsObj) {
	            units.push({ unit: u, priority: priorities[u] });
	        }
	        units.sort(function (a, b) {
	            return a.priority - b.priority;
	        });
	        return units;
	    }
	
	    function zeroFill(number, targetLength, forceSign) {
	        var absNumber = '' + Math.abs(number),
	            zerosToFill = targetLength - absNumber.length,
	            sign = number >= 0;
	        return (sign ? forceSign ? '+' : '' : '-') + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
	    }
	
	    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;
	
	    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;
	
	    var formatFunctions = {};
	
	    var formatTokenFunctions = {};
	
	    // token:    'M'
	    // padded:   ['MM', 2]
	    // ordinal:  'Mo'
	    // callback: function () { this.month() + 1 }
	    function addFormatToken(token, padded, ordinal, callback) {
	        var func = callback;
	        if (typeof callback === 'string') {
	            func = function func() {
	                return this[callback]();
	            };
	        }
	        if (token) {
	            formatTokenFunctions[token] = func;
	        }
	        if (padded) {
	            formatTokenFunctions[padded[0]] = function () {
	                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
	            };
	        }
	        if (ordinal) {
	            formatTokenFunctions[ordinal] = function () {
	                return this.localeData().ordinal(func.apply(this, arguments), token);
	            };
	        }
	    }
	
	    function removeFormattingTokens(input) {
	        if (input.match(/\[[\s\S]/)) {
	            return input.replace(/^\[|\]$/g, '');
	        }
	        return input.replace(/\\/g, '');
	    }
	
	    function makeFormatFunction(format) {
	        var array = format.match(formattingTokens),
	            i,
	            length;
	
	        for (i = 0, length = array.length; i < length; i++) {
	            if (formatTokenFunctions[array[i]]) {
	                array[i] = formatTokenFunctions[array[i]];
	            } else {
	                array[i] = removeFormattingTokens(array[i]);
	            }
	        }
	
	        return function (mom) {
	            var output = '',
	                i;
	            for (i = 0; i < length; i++) {
	                output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
	            }
	            return output;
	        };
	    }
	
	    // format date using native date object
	    function formatMoment(m, format) {
	        if (!m.isValid()) {
	            return m.localeData().invalidDate();
	        }
	
	        format = expandFormat(format, m.localeData());
	        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
	
	        return formatFunctions[format](m);
	    }
	
	    function expandFormat(format, locale) {
	        var i = 5;
	
	        function replaceLongDateFormatTokens(input) {
	            return locale.longDateFormat(input) || input;
	        }
	
	        localFormattingTokens.lastIndex = 0;
	        while (i >= 0 && localFormattingTokens.test(format)) {
	            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
	            localFormattingTokens.lastIndex = 0;
	            i -= 1;
	        }
	
	        return format;
	    }
	
	    var match1 = /\d/; //       0 - 9
	    var match2 = /\d\d/; //      00 - 99
	    var match3 = /\d{3}/; //     000 - 999
	    var match4 = /\d{4}/; //    0000 - 9999
	    var match6 = /[+-]?\d{6}/; // -999999 - 999999
	    var match1to2 = /\d\d?/; //       0 - 99
	    var match3to4 = /\d\d\d\d?/; //     999 - 9999
	    var match5to6 = /\d\d\d\d\d\d?/; //   99999 - 999999
	    var match1to3 = /\d{1,3}/; //       0 - 999
	    var match1to4 = /\d{1,4}/; //       0 - 9999
	    var match1to6 = /[+-]?\d{1,6}/; // -999999 - 999999
	
	    var matchUnsigned = /\d+/; //       0 - inf
	    var matchSigned = /[+-]?\d+/; //    -inf - inf
	
	    var matchOffset = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
	    var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z
	
	    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123
	
	    // any word (or two) characters or numbers including two/three word month in arabic.
	    // includes scottish gaelic two word and hyphenated months
	    var matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;
	
	    var regexes = {};
	
	    function addRegexToken(token, regex, strictRegex) {
	        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
	            return isStrict && strictRegex ? strictRegex : regex;
	        };
	    }
	
	    function getParseRegexForToken(token, config) {
	        if (!hasOwnProp(regexes, token)) {
	            return new RegExp(unescapeFormat(token));
	        }
	
	        return regexes[token](config._strict, config._locale);
	    }
	
	    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
	    function unescapeFormat(s) {
	        return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
	            return p1 || p2 || p3 || p4;
	        }));
	    }
	
	    function regexEscape(s) {
	        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
	    }
	
	    var tokens = {};
	
	    function addParseToken(token, callback) {
	        var i,
	            func = callback;
	        if (typeof token === 'string') {
	            token = [token];
	        }
	        if (isNumber(callback)) {
	            func = function func(input, array) {
	                array[callback] = toInt(input);
	            };
	        }
	        for (i = 0; i < token.length; i++) {
	            tokens[token[i]] = func;
	        }
	    }
	
	    function addWeekParseToken(token, callback) {
	        addParseToken(token, function (input, array, config, token) {
	            config._w = config._w || {};
	            callback(input, config._w, config, token);
	        });
	    }
	
	    function addTimeToArrayFromToken(token, input, config) {
	        if (input != null && hasOwnProp(tokens, token)) {
	            tokens[token](input, config._a, config, token);
	        }
	    }
	
	    var YEAR = 0;
	    var MONTH = 1;
	    var DATE = 2;
	    var HOUR = 3;
	    var MINUTE = 4;
	    var SECOND = 5;
	    var MILLISECOND = 6;
	    var WEEK = 7;
	    var WEEKDAY = 8;
	
	    // FORMATTING
	
	    addFormatToken('Y', 0, 0, function () {
	        var y = this.year();
	        return y <= 9999 ? '' + y : '+' + y;
	    });
	
	    addFormatToken(0, ['YY', 2], 0, function () {
	        return this.year() % 100;
	    });
	
	    addFormatToken(0, ['YYYY', 4], 0, 'year');
	    addFormatToken(0, ['YYYYY', 5], 0, 'year');
	    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');
	
	    // ALIASES
	
	    addUnitAlias('year', 'y');
	
	    // PRIORITIES
	
	    addUnitPriority('year', 1);
	
	    // PARSING
	
	    addRegexToken('Y', matchSigned);
	    addRegexToken('YY', match1to2, match2);
	    addRegexToken('YYYY', match1to4, match4);
	    addRegexToken('YYYYY', match1to6, match6);
	    addRegexToken('YYYYYY', match1to6, match6);
	
	    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
	    addParseToken('YYYY', function (input, array) {
	        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
	    });
	    addParseToken('YY', function (input, array) {
	        array[YEAR] = hooks.parseTwoDigitYear(input);
	    });
	    addParseToken('Y', function (input, array) {
	        array[YEAR] = parseInt(input, 10);
	    });
	
	    // HELPERS
	
	    function daysInYear(year) {
	        return isLeapYear(year) ? 366 : 365;
	    }
	
	    function isLeapYear(year) {
	        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
	    }
	
	    // HOOKS
	
	    hooks.parseTwoDigitYear = function (input) {
	        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
	    };
	
	    // MOMENTS
	
	    var getSetYear = makeGetSet('FullYear', true);
	
	    function getIsLeapYear() {
	        return isLeapYear(this.year());
	    }
	
	    function makeGetSet(unit, keepTime) {
	        return function (value) {
	            if (value != null) {
	                set$1(this, unit, value);
	                hooks.updateOffset(this, keepTime);
	                return this;
	            } else {
	                return get(this, unit);
	            }
	        };
	    }
	
	    function get(mom, unit) {
	        return mom.isValid() ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
	    }
	
	    function set$1(mom, unit, value) {
	        if (mom.isValid() && !isNaN(value)) {
	            if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
	                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
	            } else {
	                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
	            }
	        }
	    }
	
	    // MOMENTS
	
	    function stringGet(units) {
	        units = normalizeUnits(units);
	        if (isFunction(this[units])) {
	            return this[units]();
	        }
	        return this;
	    }
	
	    function stringSet(units, value) {
	        if ((typeof units === 'undefined' ? 'undefined' : _typeof(units)) === 'object') {
	            units = normalizeObjectUnits(units);
	            var prioritized = getPrioritizedUnits(units);
	            for (var i = 0; i < prioritized.length; i++) {
	                this[prioritized[i].unit](units[prioritized[i].unit]);
	            }
	        } else {
	            units = normalizeUnits(units);
	            if (isFunction(this[units])) {
	                return this[units](value);
	            }
	        }
	        return this;
	    }
	
	    function mod(n, x) {
	        return (n % x + x) % x;
	    }
	
	    var indexOf;
	
	    if (Array.prototype.indexOf) {
	        indexOf = Array.prototype.indexOf;
	    } else {
	        indexOf = function indexOf(o) {
	            // I know
	            var i;
	            for (i = 0; i < this.length; ++i) {
	                if (this[i] === o) {
	                    return i;
	                }
	            }
	            return -1;
	        };
	    }
	
	    function daysInMonth(year, month) {
	        if (isNaN(year) || isNaN(month)) {
	            return NaN;
	        }
	        var modMonth = mod(month, 12);
	        year += (month - modMonth) / 12;
	        return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
	    }
	
	    // FORMATTING
	
	    addFormatToken('M', ['MM', 2], 'Mo', function () {
	        return this.month() + 1;
	    });
	
	    addFormatToken('MMM', 0, 0, function (format) {
	        return this.localeData().monthsShort(this, format);
	    });
	
	    addFormatToken('MMMM', 0, 0, function (format) {
	        return this.localeData().months(this, format);
	    });
	
	    // ALIASES
	
	    addUnitAlias('month', 'M');
	
	    // PRIORITY
	
	    addUnitPriority('month', 8);
	
	    // PARSING
	
	    addRegexToken('M', match1to2);
	    addRegexToken('MM', match1to2, match2);
	    addRegexToken('MMM', function (isStrict, locale) {
	        return locale.monthsShortRegex(isStrict);
	    });
	    addRegexToken('MMMM', function (isStrict, locale) {
	        return locale.monthsRegex(isStrict);
	    });
	
	    addParseToken(['M', 'MM'], function (input, array) {
	        array[MONTH] = toInt(input) - 1;
	    });
	
	    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
	        var month = config._locale.monthsParse(input, token, config._strict);
	        // if we didn't find a month name, mark the date as invalid.
	        if (month != null) {
	            array[MONTH] = month;
	        } else {
	            getParsingFlags(config).invalidMonth = input;
	        }
	    });
	
	    // LOCALES
	
	    var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
	    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
	    function localeMonths(m, format) {
	        if (!m) {
	            return isArray(this._months) ? this._months : this._months['standalone'];
	        }
	        return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
	    }
	
	    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
	    function localeMonthsShort(m, format) {
	        if (!m) {
	            return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort['standalone'];
	        }
	        return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
	    }
	
	    function handleStrictParse(monthName, format, strict) {
	        var i,
	            ii,
	            mom,
	            llc = monthName.toLocaleLowerCase();
	        if (!this._monthsParse) {
	            // this is not used
	            this._monthsParse = [];
	            this._longMonthsParse = [];
	            this._shortMonthsParse = [];
	            for (i = 0; i < 12; ++i) {
	                mom = createUTC([2000, i]);
	                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
	                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
	            }
	        }
	
	        if (strict) {
	            if (format === 'MMM') {
	                ii = indexOf.call(this._shortMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._longMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        } else {
	            if (format === 'MMM') {
	                ii = indexOf.call(this._shortMonthsParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._longMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._longMonthsParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._shortMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        }
	    }
	
	    function localeMonthsParse(monthName, format, strict) {
	        var i, mom, regex;
	
	        if (this._monthsParseExact) {
	            return handleStrictParse.call(this, monthName, format, strict);
	        }
	
	        if (!this._monthsParse) {
	            this._monthsParse = [];
	            this._longMonthsParse = [];
	            this._shortMonthsParse = [];
	        }
	
	        // TODO: add sorting
	        // Sorting makes sure if one month (or abbr) is a prefix of another
	        // see sorting in computeMonthsParse
	        for (i = 0; i < 12; i++) {
	            // make the regex if we don't have it already
	            mom = createUTC([2000, i]);
	            if (strict && !this._longMonthsParse[i]) {
	                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
	                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
	            }
	            if (!strict && !this._monthsParse[i]) {
	                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
	                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
	            }
	            // test the regex
	            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
	                return i;
	            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
	                return i;
	            } else if (!strict && this._monthsParse[i].test(monthName)) {
	                return i;
	            }
	        }
	    }
	
	    // MOMENTS
	
	    function setMonth(mom, value) {
	        var dayOfMonth;
	
	        if (!mom.isValid()) {
	            // No op
	            return mom;
	        }
	
	        if (typeof value === 'string') {
	            if (/^\d+$/.test(value)) {
	                value = toInt(value);
	            } else {
	                value = mom.localeData().monthsParse(value);
	                // TODO: Another silent failure?
	                if (!isNumber(value)) {
	                    return mom;
	                }
	            }
	        }
	
	        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
	        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
	        return mom;
	    }
	
	    function getSetMonth(value) {
	        if (value != null) {
	            setMonth(this, value);
	            hooks.updateOffset(this, true);
	            return this;
	        } else {
	            return get(this, 'Month');
	        }
	    }
	
	    function getDaysInMonth() {
	        return daysInMonth(this.year(), this.month());
	    }
	
	    var defaultMonthsShortRegex = matchWord;
	    function monthsShortRegex(isStrict) {
	        if (this._monthsParseExact) {
	            if (!hasOwnProp(this, '_monthsRegex')) {
	                computeMonthsParse.call(this);
	            }
	            if (isStrict) {
	                return this._monthsShortStrictRegex;
	            } else {
	                return this._monthsShortRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_monthsShortRegex')) {
	                this._monthsShortRegex = defaultMonthsShortRegex;
	            }
	            return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
	        }
	    }
	
	    var defaultMonthsRegex = matchWord;
	    function monthsRegex(isStrict) {
	        if (this._monthsParseExact) {
	            if (!hasOwnProp(this, '_monthsRegex')) {
	                computeMonthsParse.call(this);
	            }
	            if (isStrict) {
	                return this._monthsStrictRegex;
	            } else {
	                return this._monthsRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_monthsRegex')) {
	                this._monthsRegex = defaultMonthsRegex;
	            }
	            return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
	        }
	    }
	
	    function computeMonthsParse() {
	        function cmpLenRev(a, b) {
	            return b.length - a.length;
	        }
	
	        var shortPieces = [],
	            longPieces = [],
	            mixedPieces = [],
	            i,
	            mom;
	        for (i = 0; i < 12; i++) {
	            // make the regex if we don't have it already
	            mom = createUTC([2000, i]);
	            shortPieces.push(this.monthsShort(mom, ''));
	            longPieces.push(this.months(mom, ''));
	            mixedPieces.push(this.months(mom, ''));
	            mixedPieces.push(this.monthsShort(mom, ''));
	        }
	        // Sorting makes sure if one month (or abbr) is a prefix of another it
	        // will match the longer piece.
	        shortPieces.sort(cmpLenRev);
	        longPieces.sort(cmpLenRev);
	        mixedPieces.sort(cmpLenRev);
	        for (i = 0; i < 12; i++) {
	            shortPieces[i] = regexEscape(shortPieces[i]);
	            longPieces[i] = regexEscape(longPieces[i]);
	        }
	        for (i = 0; i < 24; i++) {
	            mixedPieces[i] = regexEscape(mixedPieces[i]);
	        }
	
	        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	        this._monthsShortRegex = this._monthsRegex;
	        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
	        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
	    }
	
	    function createDate(y, m, d, h, M, s, ms) {
	        // can't just apply() to create a date:
	        // https://stackoverflow.com/q/181348
	        var date = new Date(y, m, d, h, M, s, ms);
	
	        // the date constructor remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
	            date.setFullYear(y);
	        }
	        return date;
	    }
	
	    function createUTCDate(y) {
	        var date = new Date(Date.UTC.apply(null, arguments));
	
	        // the Date.UTC function remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
	            date.setUTCFullYear(y);
	        }
	        return date;
	    }
	
	    // start-of-first-week - start-of-year
	    function firstWeekOffset(year, dow, doy) {
	        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
	        fwd = 7 + dow - doy,
	
	        // first-week day local weekday -- which local weekday is fwd
	        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
	
	        return -fwdlw + fwd - 1;
	    }
	
	    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
	    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
	        var localWeekday = (7 + weekday - dow) % 7,
	            weekOffset = firstWeekOffset(year, dow, doy),
	            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
	            resYear,
	            resDayOfYear;
	
	        if (dayOfYear <= 0) {
	            resYear = year - 1;
	            resDayOfYear = daysInYear(resYear) + dayOfYear;
	        } else if (dayOfYear > daysInYear(year)) {
	            resYear = year + 1;
	            resDayOfYear = dayOfYear - daysInYear(year);
	        } else {
	            resYear = year;
	            resDayOfYear = dayOfYear;
	        }
	
	        return {
	            year: resYear,
	            dayOfYear: resDayOfYear
	        };
	    }
	
	    function weekOfYear(mom, dow, doy) {
	        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
	            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
	            resWeek,
	            resYear;
	
	        if (week < 1) {
	            resYear = mom.year() - 1;
	            resWeek = week + weeksInYear(resYear, dow, doy);
	        } else if (week > weeksInYear(mom.year(), dow, doy)) {
	            resWeek = week - weeksInYear(mom.year(), dow, doy);
	            resYear = mom.year() + 1;
	        } else {
	            resYear = mom.year();
	            resWeek = week;
	        }
	
	        return {
	            week: resWeek,
	            year: resYear
	        };
	    }
	
	    function weeksInYear(year, dow, doy) {
	        var weekOffset = firstWeekOffset(year, dow, doy),
	            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
	        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
	    }
	
	    // FORMATTING
	
	    addFormatToken('w', ['ww', 2], 'wo', 'week');
	    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');
	
	    // ALIASES
	
	    addUnitAlias('week', 'w');
	    addUnitAlias('isoWeek', 'W');
	
	    // PRIORITIES
	
	    addUnitPriority('week', 5);
	    addUnitPriority('isoWeek', 5);
	
	    // PARSING
	
	    addRegexToken('w', match1to2);
	    addRegexToken('ww', match1to2, match2);
	    addRegexToken('W', match1to2);
	    addRegexToken('WW', match1to2, match2);
	
	    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
	        week[token.substr(0, 1)] = toInt(input);
	    });
	
	    // HELPERS
	
	    // LOCALES
	
	    function localeWeek(mom) {
	        return weekOfYear(mom, this._week.dow, this._week.doy).week;
	    }
	
	    var defaultLocaleWeek = {
	        dow: 0, // Sunday is the first day of the week.
	        doy: 6 // The week that contains Jan 1st is the first week of the year.
	    };
	
	    function localeFirstDayOfWeek() {
	        return this._week.dow;
	    }
	
	    function localeFirstDayOfYear() {
	        return this._week.doy;
	    }
	
	    // MOMENTS
	
	    function getSetWeek(input) {
	        var week = this.localeData().week(this);
	        return input == null ? week : this.add((input - week) * 7, 'd');
	    }
	
	    function getSetISOWeek(input) {
	        var week = weekOfYear(this, 1, 4).week;
	        return input == null ? week : this.add((input - week) * 7, 'd');
	    }
	
	    // FORMATTING
	
	    addFormatToken('d', 0, 'do', 'day');
	
	    addFormatToken('dd', 0, 0, function (format) {
	        return this.localeData().weekdaysMin(this, format);
	    });
	
	    addFormatToken('ddd', 0, 0, function (format) {
	        return this.localeData().weekdaysShort(this, format);
	    });
	
	    addFormatToken('dddd', 0, 0, function (format) {
	        return this.localeData().weekdays(this, format);
	    });
	
	    addFormatToken('e', 0, 0, 'weekday');
	    addFormatToken('E', 0, 0, 'isoWeekday');
	
	    // ALIASES
	
	    addUnitAlias('day', 'd');
	    addUnitAlias('weekday', 'e');
	    addUnitAlias('isoWeekday', 'E');
	
	    // PRIORITY
	    addUnitPriority('day', 11);
	    addUnitPriority('weekday', 11);
	    addUnitPriority('isoWeekday', 11);
	
	    // PARSING
	
	    addRegexToken('d', match1to2);
	    addRegexToken('e', match1to2);
	    addRegexToken('E', match1to2);
	    addRegexToken('dd', function (isStrict, locale) {
	        return locale.weekdaysMinRegex(isStrict);
	    });
	    addRegexToken('ddd', function (isStrict, locale) {
	        return locale.weekdaysShortRegex(isStrict);
	    });
	    addRegexToken('dddd', function (isStrict, locale) {
	        return locale.weekdaysRegex(isStrict);
	    });
	
	    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
	        var weekday = config._locale.weekdaysParse(input, token, config._strict);
	        // if we didn't get a weekday name, mark the date as invalid
	        if (weekday != null) {
	            week.d = weekday;
	        } else {
	            getParsingFlags(config).invalidWeekday = input;
	        }
	    });
	
	    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
	        week[token] = toInt(input);
	    });
	
	    // HELPERS
	
	    function parseWeekday(input, locale) {
	        if (typeof input !== 'string') {
	            return input;
	        }
	
	        if (!isNaN(input)) {
	            return parseInt(input, 10);
	        }
	
	        input = locale.weekdaysParse(input);
	        if (typeof input === 'number') {
	            return input;
	        }
	
	        return null;
	    }
	
	    function parseIsoWeekday(input, locale) {
	        if (typeof input === 'string') {
	            return locale.weekdaysParse(input) % 7 || 7;
	        }
	        return isNaN(input) ? null : input;
	    }
	
	    // LOCALES
	
	    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
	    function localeWeekdays(m, format) {
	        if (!m) {
	            return isArray(this._weekdays) ? this._weekdays : this._weekdays['standalone'];
	        }
	        return isArray(this._weekdays) ? this._weekdays[m.day()] : this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
	    }
	
	    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
	    function localeWeekdaysShort(m) {
	        return m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
	    }
	
	    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
	    function localeWeekdaysMin(m) {
	        return m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
	    }
	
	    function handleStrictParse$1(weekdayName, format, strict) {
	        var i,
	            ii,
	            mom,
	            llc = weekdayName.toLocaleLowerCase();
	        if (!this._weekdaysParse) {
	            this._weekdaysParse = [];
	            this._shortWeekdaysParse = [];
	            this._minWeekdaysParse = [];
	
	            for (i = 0; i < 7; ++i) {
	                mom = createUTC([2000, 1]).day(i);
	                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
	                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
	                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
	            }
	        }
	
	        if (strict) {
	            if (format === 'dddd') {
	                ii = indexOf.call(this._weekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else if (format === 'ddd') {
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        } else {
	            if (format === 'dddd') {
	                ii = indexOf.call(this._weekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else if (format === 'ddd') {
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._weekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._weekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        }
	    }
	
	    function localeWeekdaysParse(weekdayName, format, strict) {
	        var i, mom, regex;
	
	        if (this._weekdaysParseExact) {
	            return handleStrictParse$1.call(this, weekdayName, format, strict);
	        }
	
	        if (!this._weekdaysParse) {
	            this._weekdaysParse = [];
	            this._minWeekdaysParse = [];
	            this._shortWeekdaysParse = [];
	            this._fullWeekdaysParse = [];
	        }
	
	        for (i = 0; i < 7; i++) {
	            // make the regex if we don't have it already
	
	            mom = createUTC([2000, 1]).day(i);
	            if (strict && !this._fullWeekdaysParse[i]) {
	                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
	                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
	                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
	            }
	            if (!this._weekdaysParse[i]) {
	                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
	                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
	            }
	            // test the regex
	            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
	                return i;
	            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
	                return i;
	            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
	                return i;
	            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
	                return i;
	            }
	        }
	    }
	
	    // MOMENTS
	
	    function getSetDayOfWeek(input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
	        if (input != null) {
	            input = parseWeekday(input, this.localeData());
	            return this.add(input - day, 'd');
	        } else {
	            return day;
	        }
	    }
	
	    function getSetLocaleDayOfWeek(input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
	        return input == null ? weekday : this.add(input - weekday, 'd');
	    }
	
	    function getSetISODayOfWeek(input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	
	        // behaves the same as moment#day except
	        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
	        // as a setter, sunday should belong to the previous week.
	
	        if (input != null) {
	            var weekday = parseIsoWeekday(input, this.localeData());
	            return this.day(this.day() % 7 ? weekday : weekday - 7);
	        } else {
	            return this.day() || 7;
	        }
	    }
	
	    var defaultWeekdaysRegex = matchWord;
	    function weekdaysRegex(isStrict) {
	        if (this._weekdaysParseExact) {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                computeWeekdaysParse.call(this);
	            }
	            if (isStrict) {
	                return this._weekdaysStrictRegex;
	            } else {
	                return this._weekdaysRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                this._weekdaysRegex = defaultWeekdaysRegex;
	            }
	            return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
	        }
	    }
	
	    var defaultWeekdaysShortRegex = matchWord;
	    function weekdaysShortRegex(isStrict) {
	        if (this._weekdaysParseExact) {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                computeWeekdaysParse.call(this);
	            }
	            if (isStrict) {
	                return this._weekdaysShortStrictRegex;
	            } else {
	                return this._weekdaysShortRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
	                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
	            }
	            return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
	        }
	    }
	
	    var defaultWeekdaysMinRegex = matchWord;
	    function weekdaysMinRegex(isStrict) {
	        if (this._weekdaysParseExact) {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                computeWeekdaysParse.call(this);
	            }
	            if (isStrict) {
	                return this._weekdaysMinStrictRegex;
	            } else {
	                return this._weekdaysMinRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
	                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
	            }
	            return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
	        }
	    }
	
	    function computeWeekdaysParse() {
	        function cmpLenRev(a, b) {
	            return b.length - a.length;
	        }
	
	        var minPieces = [],
	            shortPieces = [],
	            longPieces = [],
	            mixedPieces = [],
	            i,
	            mom,
	            minp,
	            shortp,
	            longp;
	        for (i = 0; i < 7; i++) {
	            // make the regex if we don't have it already
	            mom = createUTC([2000, 1]).day(i);
	            minp = this.weekdaysMin(mom, '');
	            shortp = this.weekdaysShort(mom, '');
	            longp = this.weekdays(mom, '');
	            minPieces.push(minp);
	            shortPieces.push(shortp);
	            longPieces.push(longp);
	            mixedPieces.push(minp);
	            mixedPieces.push(shortp);
	            mixedPieces.push(longp);
	        }
	        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
	        // will match the longer piece.
	        minPieces.sort(cmpLenRev);
	        shortPieces.sort(cmpLenRev);
	        longPieces.sort(cmpLenRev);
	        mixedPieces.sort(cmpLenRev);
	        for (i = 0; i < 7; i++) {
	            shortPieces[i] = regexEscape(shortPieces[i]);
	            longPieces[i] = regexEscape(longPieces[i]);
	            mixedPieces[i] = regexEscape(mixedPieces[i]);
	        }
	
	        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	        this._weekdaysShortRegex = this._weekdaysRegex;
	        this._weekdaysMinRegex = this._weekdaysRegex;
	
	        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
	        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
	        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
	    }
	
	    // FORMATTING
	
	    function hFormat() {
	        return this.hours() % 12 || 12;
	    }
	
	    function kFormat() {
	        return this.hours() || 24;
	    }
	
	    addFormatToken('H', ['HH', 2], 0, 'hour');
	    addFormatToken('h', ['hh', 2], 0, hFormat);
	    addFormatToken('k', ['kk', 2], 0, kFormat);
	
	    addFormatToken('hmm', 0, 0, function () {
	        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
	    });
	
	    addFormatToken('hmmss', 0, 0, function () {
	        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
	    });
	
	    addFormatToken('Hmm', 0, 0, function () {
	        return '' + this.hours() + zeroFill(this.minutes(), 2);
	    });
	
	    addFormatToken('Hmmss', 0, 0, function () {
	        return '' + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
	    });
	
	    function meridiem(token, lowercase) {
	        addFormatToken(token, 0, 0, function () {
	            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
	        });
	    }
	
	    meridiem('a', true);
	    meridiem('A', false);
	
	    // ALIASES
	
	    addUnitAlias('hour', 'h');
	
	    // PRIORITY
	    addUnitPriority('hour', 13);
	
	    // PARSING
	
	    function matchMeridiem(isStrict, locale) {
	        return locale._meridiemParse;
	    }
	
	    addRegexToken('a', matchMeridiem);
	    addRegexToken('A', matchMeridiem);
	    addRegexToken('H', match1to2);
	    addRegexToken('h', match1to2);
	    addRegexToken('k', match1to2);
	    addRegexToken('HH', match1to2, match2);
	    addRegexToken('hh', match1to2, match2);
	    addRegexToken('kk', match1to2, match2);
	
	    addRegexToken('hmm', match3to4);
	    addRegexToken('hmmss', match5to6);
	    addRegexToken('Hmm', match3to4);
	    addRegexToken('Hmmss', match5to6);
	
	    addParseToken(['H', 'HH'], HOUR);
	    addParseToken(['k', 'kk'], function (input, array, config) {
	        var kInput = toInt(input);
	        array[HOUR] = kInput === 24 ? 0 : kInput;
	    });
	    addParseToken(['a', 'A'], function (input, array, config) {
	        config._isPm = config._locale.isPM(input);
	        config._meridiem = input;
	    });
	    addParseToken(['h', 'hh'], function (input, array, config) {
	        array[HOUR] = toInt(input);
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('hmm', function (input, array, config) {
	        var pos = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos));
	        array[MINUTE] = toInt(input.substr(pos));
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('hmmss', function (input, array, config) {
	        var pos1 = input.length - 4;
	        var pos2 = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos1));
	        array[MINUTE] = toInt(input.substr(pos1, 2));
	        array[SECOND] = toInt(input.substr(pos2));
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('Hmm', function (input, array, config) {
	        var pos = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos));
	        array[MINUTE] = toInt(input.substr(pos));
	    });
	    addParseToken('Hmmss', function (input, array, config) {
	        var pos1 = input.length - 4;
	        var pos2 = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos1));
	        array[MINUTE] = toInt(input.substr(pos1, 2));
	        array[SECOND] = toInt(input.substr(pos2));
	    });
	
	    // LOCALES
	
	    function localeIsPM(input) {
	        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
	        // Using charAt should be more compatible.
	        return (input + '').toLowerCase().charAt(0) === 'p';
	    }
	
	    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
	    function localeMeridiem(hours, minutes, isLower) {
	        if (hours > 11) {
	            return isLower ? 'pm' : 'PM';
	        } else {
	            return isLower ? 'am' : 'AM';
	        }
	    }
	
	    // MOMENTS
	
	    // Setting the hour should keep the time, because the user explicitly
	    // specified which hour he wants. So trying to maintain the same hour (in
	    // a new timezone) makes sense. Adding/subtracting hours does not follow
	    // this rule.
	    var getSetHour = makeGetSet('Hours', true);
	
	    // months
	    // week
	    // weekdays
	    // meridiem
	    var baseConfig = {
	        calendar: defaultCalendar,
	        longDateFormat: defaultLongDateFormat,
	        invalidDate: defaultInvalidDate,
	        ordinal: defaultOrdinal,
	        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
	        relativeTime: defaultRelativeTime,
	
	        months: defaultLocaleMonths,
	        monthsShort: defaultLocaleMonthsShort,
	
	        week: defaultLocaleWeek,
	
	        weekdays: defaultLocaleWeekdays,
	        weekdaysMin: defaultLocaleWeekdaysMin,
	        weekdaysShort: defaultLocaleWeekdaysShort,
	
	        meridiemParse: defaultLocaleMeridiemParse
	    };
	
	    // internal storage for locale config files
	    var locales = {};
	    var localeFamilies = {};
	    var globalLocale;
	
	    function normalizeLocale(key) {
	        return key ? key.toLowerCase().replace('_', '-') : key;
	    }
	
	    // pick the locale from the array
	    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
	    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
	    function chooseLocale(names) {
	        var i = 0,
	            j,
	            next,
	            locale,
	            split;
	
	        while (i < names.length) {
	            split = normalizeLocale(names[i]).split('-');
	            j = split.length;
	            next = normalizeLocale(names[i + 1]);
	            next = next ? next.split('-') : null;
	            while (j > 0) {
	                locale = loadLocale(split.slice(0, j).join('-'));
	                if (locale) {
	                    return locale;
	                }
	                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
	                    //the next array item is better than a shallower substring of this one
	                    break;
	                }
	                j--;
	            }
	            i++;
	        }
	        return null;
	    }
	
	    function loadLocale(name) {
	        var oldLocale = null;
	        // TODO: Find a better way to register and load all the locales in Node
	        if (!locales[name] && typeof module !== 'undefined' && module && module.exports) {
	            try {
	                oldLocale = globalLocale._abbr;
	                var aliasedRequire = require;
	                __webpack_require__(338)("./" + name);
	                getSetGlobalLocale(oldLocale);
	            } catch (e) {}
	        }
	        return locales[name];
	    }
	
	    // This function will load locale and then set the global locale.  If
	    // no arguments are passed in, it will simply return the current global
	    // locale key.
	    function getSetGlobalLocale(key, values) {
	        var data;
	        if (key) {
	            if (isUndefined(values)) {
	                data = getLocale(key);
	            } else {
	                data = defineLocale(key, values);
	            }
	
	            if (data) {
	                // moment.duration._locale = moment._locale = data;
	                globalLocale = data;
	            }
	        }
	
	        return globalLocale._abbr;
	    }
	
	    function defineLocale(name, config) {
	        if (config !== null) {
	            var parentConfig = baseConfig;
	            config.abbr = name;
	            if (locales[name] != null) {
	                deprecateSimple('defineLocaleOverride', 'use moment.updateLocale(localeName, config) to change ' + 'an existing locale. moment.defineLocale(localeName, ' + 'config) should only be used for creating a new locale ' + 'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
	                parentConfig = locales[name]._config;
	            } else if (config.parentLocale != null) {
	                if (locales[config.parentLocale] != null) {
	                    parentConfig = locales[config.parentLocale]._config;
	                } else {
	                    if (!localeFamilies[config.parentLocale]) {
	                        localeFamilies[config.parentLocale] = [];
	                    }
	                    localeFamilies[config.parentLocale].push({
	                        name: name,
	                        config: config
	                    });
	                    return null;
	                }
	            }
	            locales[name] = new Locale(mergeConfigs(parentConfig, config));
	
	            if (localeFamilies[name]) {
	                localeFamilies[name].forEach(function (x) {
	                    defineLocale(x.name, x.config);
	                });
	            }
	
	            // backwards compat for now: also set the locale
	            // make sure we set the locale AFTER all child locales have been
	            // created, so we won't end up with the child locale set.
	            getSetGlobalLocale(name);
	
	            return locales[name];
	        } else {
	            // useful for testing
	            delete locales[name];
	            return null;
	        }
	    }
	
	    function updateLocale(name, config) {
	        if (config != null) {
	            var locale,
	                tmpLocale,
	                parentConfig = baseConfig;
	            // MERGE
	            tmpLocale = loadLocale(name);
	            if (tmpLocale != null) {
	                parentConfig = tmpLocale._config;
	            }
	            config = mergeConfigs(parentConfig, config);
	            locale = new Locale(config);
	            locale.parentLocale = locales[name];
	            locales[name] = locale;
	
	            // backwards compat for now: also set the locale
	            getSetGlobalLocale(name);
	        } else {
	            // pass null for config to unupdate, useful for tests
	            if (locales[name] != null) {
	                if (locales[name].parentLocale != null) {
	                    locales[name] = locales[name].parentLocale;
	                } else if (locales[name] != null) {
	                    delete locales[name];
	                }
	            }
	        }
	        return locales[name];
	    }
	
	    // returns locale data
	    function getLocale(key) {
	        var locale;
	
	        if (key && key._locale && key._locale._abbr) {
	            key = key._locale._abbr;
	        }
	
	        if (!key) {
	            return globalLocale;
	        }
	
	        if (!isArray(key)) {
	            //short-circuit everything else
	            locale = loadLocale(key);
	            if (locale) {
	                return locale;
	            }
	            key = [key];
	        }
	
	        return chooseLocale(key);
	    }
	
	    function listLocales() {
	        return keys(locales);
	    }
	
	    function checkOverflow(m) {
	        var overflow;
	        var a = m._a;
	
	        if (a && getParsingFlags(m).overflow === -2) {
	            overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
	
	            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
	                overflow = DATE;
	            }
	            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
	                overflow = WEEK;
	            }
	            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
	                overflow = WEEKDAY;
	            }
	
	            getParsingFlags(m).overflow = overflow;
	        }
	
	        return m;
	    }
	
	    // Pick the first defined of two or three arguments.
	    function defaults(a, b, c) {
	        if (a != null) {
	            return a;
	        }
	        if (b != null) {
	            return b;
	        }
	        return c;
	    }
	
	    function currentDateArray(config) {
	        // hooks is actually the exported moment object
	        var nowValue = new Date(hooks.now());
	        if (config._useUTC) {
	            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
	        }
	        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
	    }
	
	    // convert an array to a date.
	    // the array should mirror the parameters below
	    // note: all values past the year are optional and will default to the lowest possible value.
	    // [year, month, day , hour, minute, second, millisecond]
	    function configFromArray(config) {
	        var i,
	            date,
	            input = [],
	            currentDate,
	            expectedWeekday,
	            yearToUse;
	
	        if (config._d) {
	            return;
	        }
	
	        currentDate = currentDateArray(config);
	
	        //compute day of the year from weeks and weekdays
	        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
	            dayOfYearFromWeekInfo(config);
	        }
	
	        //if the day of the year is set, figure out what it is
	        if (config._dayOfYear != null) {
	            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
	
	            if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
	                getParsingFlags(config)._overflowDayOfYear = true;
	            }
	
	            date = createUTCDate(yearToUse, 0, config._dayOfYear);
	            config._a[MONTH] = date.getUTCMonth();
	            config._a[DATE] = date.getUTCDate();
	        }
	
	        // Default to current date.
	        // * if no year, month, day of month are given, default to today
	        // * if day of month is given, default month and year
	        // * if month is given, default only year
	        // * if year is given, don't default anything
	        for (i = 0; i < 3 && config._a[i] == null; ++i) {
	            config._a[i] = input[i] = currentDate[i];
	        }
	
	        // Zero out whatever was not defaulted, including time
	        for (; i < 7; i++) {
	            config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
	        }
	
	        // Check for 24:00:00.000
	        if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
	            config._nextDay = true;
	            config._a[HOUR] = 0;
	        }
	
	        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
	        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();
	
	        // Apply timezone offset from input. The actual utcOffset can be changed
	        // with parseZone.
	        if (config._tzm != null) {
	            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
	        }
	
	        if (config._nextDay) {
	            config._a[HOUR] = 24;
	        }
	
	        // check for mismatching day of week
	        if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
	            getParsingFlags(config).weekdayMismatch = true;
	        }
	    }
	
	    function dayOfYearFromWeekInfo(config) {
	        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;
	
	        w = config._w;
	        if (w.GG != null || w.W != null || w.E != null) {
	            dow = 1;
	            doy = 4;
	
	            // TODO: We need to take the current isoWeekYear, but that depends on
	            // how we interpret now (local, utc, fixed offset). So create
	            // a now version of current config (take local/utc/offset flags, and
	            // create now).
	            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
	            week = defaults(w.W, 1);
	            weekday = defaults(w.E, 1);
	            if (weekday < 1 || weekday > 7) {
	                weekdayOverflow = true;
	            }
	        } else {
	            dow = config._locale._week.dow;
	            doy = config._locale._week.doy;
	
	            var curWeek = weekOfYear(createLocal(), dow, doy);
	
	            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
	
	            // Default to current week.
	            week = defaults(w.w, curWeek.week);
	
	            if (w.d != null) {
	                // weekday -- low day numbers are considered next week
	                weekday = w.d;
	                if (weekday < 0 || weekday > 6) {
	                    weekdayOverflow = true;
	                }
	            } else if (w.e != null) {
	                // local weekday -- counting starts from begining of week
	                weekday = w.e + dow;
	                if (w.e < 0 || w.e > 6) {
	                    weekdayOverflow = true;
	                }
	            } else {
	                // default to begining of week
	                weekday = dow;
	            }
	        }
	        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
	            getParsingFlags(config)._overflowWeeks = true;
	        } else if (weekdayOverflow != null) {
	            getParsingFlags(config)._overflowWeekday = true;
	        } else {
	            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
	            config._a[YEAR] = temp.year;
	            config._dayOfYear = temp.dayOfYear;
	        }
	    }
	
	    // iso 8601 regex
	    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
	    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
	    var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
	
	    var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;
	
	    var isoDates = [['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/], ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/], ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/], ['GGGG-[W]WW', /\d{4}-W\d\d/, false], ['YYYY-DDD', /\d{4}-\d{3}/], ['YYYY-MM', /\d{4}-\d\d/, false], ['YYYYYYMMDD', /[+-]\d{10}/], ['YYYYMMDD', /\d{8}/],
	    // YYYYMM is NOT allowed by the standard
	    ['GGGG[W]WWE', /\d{4}W\d{3}/], ['GGGG[W]WW', /\d{4}W\d{2}/, false], ['YYYYDDD', /\d{7}/]];
	
	    // iso time formats and regexes
	    var isoTimes = [['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/], ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/], ['HH:mm:ss', /\d\d:\d\d:\d\d/], ['HH:mm', /\d\d:\d\d/], ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/], ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/], ['HHmmss', /\d\d\d\d\d\d/], ['HHmm', /\d\d\d\d/], ['HH', /\d\d/]];
	
	    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;
	
	    // date from iso format
	    function configFromISO(config) {
	        var i,
	            l,
	            string = config._i,
	            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
	            allowTime,
	            dateFormat,
	            timeFormat,
	            tzFormat;
	
	        if (match) {
	            getParsingFlags(config).iso = true;
	
	            for (i = 0, l = isoDates.length; i < l; i++) {
	                if (isoDates[i][1].exec(match[1])) {
	                    dateFormat = isoDates[i][0];
	                    allowTime = isoDates[i][2] !== false;
	                    break;
	                }
	            }
	            if (dateFormat == null) {
	                config._isValid = false;
	                return;
	            }
	            if (match[3]) {
	                for (i = 0, l = isoTimes.length; i < l; i++) {
	                    if (isoTimes[i][1].exec(match[3])) {
	                        // match[2] should be 'T' or space
	                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
	                        break;
	                    }
	                }
	                if (timeFormat == null) {
	                    config._isValid = false;
	                    return;
	                }
	            }
	            if (!allowTime && timeFormat != null) {
	                config._isValid = false;
	                return;
	            }
	            if (match[4]) {
	                if (tzRegex.exec(match[4])) {
	                    tzFormat = 'Z';
	                } else {
	                    config._isValid = false;
	                    return;
	                }
	            }
	            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
	            configFromStringAndFormat(config);
	        } else {
	            config._isValid = false;
	        }
	    }
	
	    // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
	    var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;
	
	    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
	        var result = [untruncateYear(yearStr), defaultLocaleMonthsShort.indexOf(monthStr), parseInt(dayStr, 10), parseInt(hourStr, 10), parseInt(minuteStr, 10)];
	
	        if (secondStr) {
	            result.push(parseInt(secondStr, 10));
	        }
	
	        return result;
	    }
	
	    function untruncateYear(yearStr) {
	        var year = parseInt(yearStr, 10);
	        if (year <= 49) {
	            return 2000 + year;
	        } else if (year <= 999) {
	            return 1900 + year;
	        }
	        return year;
	    }
	
	    function preprocessRFC2822(s) {
	        // Remove comments and folding whitespace and replace multiple-spaces with a single space
	        return s.replace(/\([^)]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').trim();
	    }
	
	    function checkWeekday(weekdayStr, parsedInput, config) {
	        if (weekdayStr) {
	            // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
	            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
	                weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
	            if (weekdayProvided !== weekdayActual) {
	                getParsingFlags(config).weekdayMismatch = true;
	                config._isValid = false;
	                return false;
	            }
	        }
	        return true;
	    }
	
	    var obsOffsets = {
	        UT: 0,
	        GMT: 0,
	        EDT: -4 * 60,
	        EST: -5 * 60,
	        CDT: -5 * 60,
	        CST: -6 * 60,
	        MDT: -6 * 60,
	        MST: -7 * 60,
	        PDT: -7 * 60,
	        PST: -8 * 60
	    };
	
	    function calculateOffset(obsOffset, militaryOffset, numOffset) {
	        if (obsOffset) {
	            return obsOffsets[obsOffset];
	        } else if (militaryOffset) {
	            // the only allowed military tz is Z
	            return 0;
	        } else {
	            var hm = parseInt(numOffset, 10);
	            var m = hm % 100,
	                h = (hm - m) / 100;
	            return h * 60 + m;
	        }
	    }
	
	    // date and time from ref 2822 format
	    function configFromRFC2822(config) {
	        var match = rfc2822.exec(preprocessRFC2822(config._i));
	        if (match) {
	            var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
	            if (!checkWeekday(match[1], parsedArray, config)) {
	                return;
	            }
	
	            config._a = parsedArray;
	            config._tzm = calculateOffset(match[8], match[9], match[10]);
	
	            config._d = createUTCDate.apply(null, config._a);
	            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
	
	            getParsingFlags(config).rfc2822 = true;
	        } else {
	            config._isValid = false;
	        }
	    }
	
	    // date from iso format or fallback
	    function configFromString(config) {
	        var matched = aspNetJsonRegex.exec(config._i);
	
	        if (matched !== null) {
	            config._d = new Date(+matched[1]);
	            return;
	        }
	
	        configFromISO(config);
	        if (config._isValid === false) {
	            delete config._isValid;
	        } else {
	            return;
	        }
	
	        configFromRFC2822(config);
	        if (config._isValid === false) {
	            delete config._isValid;
	        } else {
	            return;
	        }
	
	        // Final attempt, use Input Fallback
	        hooks.createFromInputFallback(config);
	    }
	
	    hooks.createFromInputFallback = deprecate('value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' + 'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' + 'discouraged and will be removed in an upcoming major release. Please refer to ' + 'http://momentjs.com/guides/#/warnings/js-date/ for more info.', function (config) {
	        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
	    });
	
	    // constant that refers to the ISO standard
	    hooks.ISO_8601 = function () {};
	
	    // constant that refers to the RFC 2822 form
	    hooks.RFC_2822 = function () {};
	
	    // date from string and format string
	    function configFromStringAndFormat(config) {
	        // TODO: Move this to another part of the creation flow to prevent circular deps
	        if (config._f === hooks.ISO_8601) {
	            configFromISO(config);
	            return;
	        }
	        if (config._f === hooks.RFC_2822) {
	            configFromRFC2822(config);
	            return;
	        }
	        config._a = [];
	        getParsingFlags(config).empty = true;
	
	        // This array is used to make a Date, either with `new Date` or `Date.UTC`
	        var string = '' + config._i,
	            i,
	            parsedInput,
	            tokens,
	            token,
	            skipped,
	            stringLength = string.length,
	            totalParsedInputLength = 0;
	
	        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];
	
	        for (i = 0; i < tokens.length; i++) {
	            token = tokens[i];
	            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
	            // console.log('token', token, 'parsedInput', parsedInput,
	            //         'regex', getParseRegexForToken(token, config));
	            if (parsedInput) {
	                skipped = string.substr(0, string.indexOf(parsedInput));
	                if (skipped.length > 0) {
	                    getParsingFlags(config).unusedInput.push(skipped);
	                }
	                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
	                totalParsedInputLength += parsedInput.length;
	            }
	            // don't parse if it's not a known token
	            if (formatTokenFunctions[token]) {
	                if (parsedInput) {
	                    getParsingFlags(config).empty = false;
	                } else {
	                    getParsingFlags(config).unusedTokens.push(token);
	                }
	                addTimeToArrayFromToken(token, parsedInput, config);
	            } else if (config._strict && !parsedInput) {
	                getParsingFlags(config).unusedTokens.push(token);
	            }
	        }
	
	        // add remaining unparsed input length to the string
	        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
	        if (string.length > 0) {
	            getParsingFlags(config).unusedInput.push(string);
	        }
	
	        // clear _12h flag if hour is <= 12
	        if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
	            getParsingFlags(config).bigHour = undefined;
	        }
	
	        getParsingFlags(config).parsedDateParts = config._a.slice(0);
	        getParsingFlags(config).meridiem = config._meridiem;
	        // handle meridiem
	        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
	
	        configFromArray(config);
	        checkOverflow(config);
	    }
	
	    function meridiemFixWrap(locale, hour, meridiem) {
	        var isPm;
	
	        if (meridiem == null) {
	            // nothing to do
	            return hour;
	        }
	        if (locale.meridiemHour != null) {
	            return locale.meridiemHour(hour, meridiem);
	        } else if (locale.isPM != null) {
	            // Fallback
	            isPm = locale.isPM(meridiem);
	            if (isPm && hour < 12) {
	                hour += 12;
	            }
	            if (!isPm && hour === 12) {
	                hour = 0;
	            }
	            return hour;
	        } else {
	            // this is not supposed to happen
	            return hour;
	        }
	    }
	
	    // date from string and array of format strings
	    function configFromStringAndArray(config) {
	        var tempConfig, bestMoment, scoreToBeat, i, currentScore;
	
	        if (config._f.length === 0) {
	            getParsingFlags(config).invalidFormat = true;
	            config._d = new Date(NaN);
	            return;
	        }
	
	        for (i = 0; i < config._f.length; i++) {
	            currentScore = 0;
	            tempConfig = copyConfig({}, config);
	            if (config._useUTC != null) {
	                tempConfig._useUTC = config._useUTC;
	            }
	            tempConfig._f = config._f[i];
	            configFromStringAndFormat(tempConfig);
	
	            if (!isValid(tempConfig)) {
	                continue;
	            }
	
	            // if there is any input that was not parsed add a penalty for that format
	            currentScore += getParsingFlags(tempConfig).charsLeftOver;
	
	            //or tokens
	            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
	
	            getParsingFlags(tempConfig).score = currentScore;
	
	            if (scoreToBeat == null || currentScore < scoreToBeat) {
	                scoreToBeat = currentScore;
	                bestMoment = tempConfig;
	            }
	        }
	
	        extend(config, bestMoment || tempConfig);
	    }
	
	    function configFromObject(config) {
	        if (config._d) {
	            return;
	        }
	
	        var i = normalizeObjectUnits(config._i);
	        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
	            return obj && parseInt(obj, 10);
	        });
	
	        configFromArray(config);
	    }
	
	    function createFromConfig(config) {
	        var res = new Moment(checkOverflow(prepareConfig(config)));
	        if (res._nextDay) {
	            // Adding is smart enough around DST
	            res.add(1, 'd');
	            res._nextDay = undefined;
	        }
	
	        return res;
	    }
	
	    function prepareConfig(config) {
	        var input = config._i,
	            format = config._f;
	
	        config._locale = config._locale || getLocale(config._l);
	
	        if (input === null || format === undefined && input === '') {
	            return createInvalid({ nullInput: true });
	        }
	
	        if (typeof input === 'string') {
	            config._i = input = config._locale.preparse(input);
	        }
	
	        if (isMoment(input)) {
	            return new Moment(checkOverflow(input));
	        } else if (isDate(input)) {
	            config._d = input;
	        } else if (isArray(format)) {
	            configFromStringAndArray(config);
	        } else if (format) {
	            configFromStringAndFormat(config);
	        } else {
	            configFromInput(config);
	        }
	
	        if (!isValid(config)) {
	            config._d = null;
	        }
	
	        return config;
	    }
	
	    function configFromInput(config) {
	        var input = config._i;
	        if (isUndefined(input)) {
	            config._d = new Date(hooks.now());
	        } else if (isDate(input)) {
	            config._d = new Date(input.valueOf());
	        } else if (typeof input === 'string') {
	            configFromString(config);
	        } else if (isArray(input)) {
	            config._a = map(input.slice(0), function (obj) {
	                return parseInt(obj, 10);
	            });
	            configFromArray(config);
	        } else if (isObject(input)) {
	            configFromObject(config);
	        } else if (isNumber(input)) {
	            // from milliseconds
	            config._d = new Date(input);
	        } else {
	            hooks.createFromInputFallback(config);
	        }
	    }
	
	    function createLocalOrUTC(input, format, locale, strict, isUTC) {
	        var c = {};
	
	        if (locale === true || locale === false) {
	            strict = locale;
	            locale = undefined;
	        }
	
	        if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
	            input = undefined;
	        }
	        // object construction must be done this way.
	        // https://github.com/moment/moment/issues/1423
	        c._isAMomentObject = true;
	        c._useUTC = c._isUTC = isUTC;
	        c._l = locale;
	        c._i = input;
	        c._f = format;
	        c._strict = strict;
	
	        return createFromConfig(c);
	    }
	
	    function createLocal(input, format, locale, strict) {
	        return createLocalOrUTC(input, format, locale, strict, false);
	    }
	
	    var prototypeMin = deprecate('moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
	        var other = createLocal.apply(null, arguments);
	        if (this.isValid() && other.isValid()) {
	            return other < this ? this : other;
	        } else {
	            return createInvalid();
	        }
	    });
	
	    var prototypeMax = deprecate('moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
	        var other = createLocal.apply(null, arguments);
	        if (this.isValid() && other.isValid()) {
	            return other > this ? this : other;
	        } else {
	            return createInvalid();
	        }
	    });
	
	    // Pick a moment m from moments so that m[fn](other) is true for all
	    // other. This relies on the function fn to be transitive.
	    //
	    // moments should either be an array of moment objects or an array, whose
	    // first element is an array of moment objects.
	    function pickBy(fn, moments) {
	        var res, i;
	        if (moments.length === 1 && isArray(moments[0])) {
	            moments = moments[0];
	        }
	        if (!moments.length) {
	            return createLocal();
	        }
	        res = moments[0];
	        for (i = 1; i < moments.length; ++i) {
	            if (!moments[i].isValid() || moments[i][fn](res)) {
	                res = moments[i];
	            }
	        }
	        return res;
	    }
	
	    // TODO: Use [].sort instead?
	    function min() {
	        var args = [].slice.call(arguments, 0);
	
	        return pickBy('isBefore', args);
	    }
	
	    function max() {
	        var args = [].slice.call(arguments, 0);
	
	        return pickBy('isAfter', args);
	    }
	
	    var now = function now() {
	        return Date.now ? Date.now() : +new Date();
	    };
	
	    var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];
	
	    function isDurationValid(m) {
	        for (var key in m) {
	            if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
	                return false;
	            }
	        }
	
	        var unitHasDecimal = false;
	        for (var i = 0; i < ordering.length; ++i) {
	            if (m[ordering[i]]) {
	                if (unitHasDecimal) {
	                    return false; // only allow non-integers for smallest unit
	                }
	                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
	                    unitHasDecimal = true;
	                }
	            }
	        }
	
	        return true;
	    }
	
	    function isValid$1() {
	        return this._isValid;
	    }
	
	    function createInvalid$1() {
	        return createDuration(NaN);
	    }
	
	    function Duration(duration) {
	        var normalizedInput = normalizeObjectUnits(duration),
	            years = normalizedInput.year || 0,
	            quarters = normalizedInput.quarter || 0,
	            months = normalizedInput.month || 0,
	            weeks = normalizedInput.week || 0,
	            days = normalizedInput.day || 0,
	            hours = normalizedInput.hour || 0,
	            minutes = normalizedInput.minute || 0,
	            seconds = normalizedInput.second || 0,
	            milliseconds = normalizedInput.millisecond || 0;
	
	        this._isValid = isDurationValid(normalizedInput);
	
	        // representation for dateAddRemove
	        this._milliseconds = +milliseconds + seconds * 1e3 + // 1000
	        minutes * 6e4 + // 1000 * 60
	        hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
	        // Because of dateAddRemove treats 24 hours as different from a
	        // day when working around DST, we need to store them separately
	        this._days = +days + weeks * 7;
	        // It is impossible to translate months into days without knowing
	        // which months you are are talking about, so we have to store
	        // it separately.
	        this._months = +months + quarters * 3 + years * 12;
	
	        this._data = {};
	
	        this._locale = getLocale();
	
	        this._bubble();
	    }
	
	    function isDuration(obj) {
	        return obj instanceof Duration;
	    }
	
	    function absRound(number) {
	        if (number < 0) {
	            return Math.round(-1 * number) * -1;
	        } else {
	            return Math.round(number);
	        }
	    }
	
	    // FORMATTING
	
	    function offset(token, separator) {
	        addFormatToken(token, 0, 0, function () {
	            var offset = this.utcOffset();
	            var sign = '+';
	            if (offset < 0) {
	                offset = -offset;
	                sign = '-';
	            }
	            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2);
	        });
	    }
	
	    offset('Z', ':');
	    offset('ZZ', '');
	
	    // PARSING
	
	    addRegexToken('Z', matchShortOffset);
	    addRegexToken('ZZ', matchShortOffset);
	    addParseToken(['Z', 'ZZ'], function (input, array, config) {
	        config._useUTC = true;
	        config._tzm = offsetFromString(matchShortOffset, input);
	    });
	
	    // HELPERS
	
	    // timezone chunker
	    // '+10:00' > ['10',  '00']
	    // '-1530'  > ['-15', '30']
	    var chunkOffset = /([\+\-]|\d\d)/gi;
	
	    function offsetFromString(matcher, string) {
	        var matches = (string || '').match(matcher);
	
	        if (matches === null) {
	            return null;
	        }
	
	        var chunk = matches[matches.length - 1] || [];
	        var parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
	        var minutes = +(parts[1] * 60) + toInt(parts[2]);
	
	        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
	    }
	
	    // Return a moment from input, that is local/utc/zone equivalent to model.
	    function cloneWithOffset(input, model) {
	        var res, diff;
	        if (model._isUTC) {
	            res = model.clone();
	            diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
	            // Use low-level api, because this fn is low-level api.
	            res._d.setTime(res._d.valueOf() + diff);
	            hooks.updateOffset(res, false);
	            return res;
	        } else {
	            return createLocal(input).local();
	        }
	    }
	
	    function getDateOffset(m) {
	        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
	        // https://github.com/moment/moment/pull/1871
	        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
	    }
	
	    // HOOKS
	
	    // This function will be called whenever a moment is mutated.
	    // It is intended to keep the offset in sync with the timezone.
	    hooks.updateOffset = function () {};
	
	    // MOMENTS
	
	    // keepLocalTime = true means only change the timezone, without
	    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
	    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
	    // +0200, so we adjust the time as needed, to be valid.
	    //
	    // Keeping the time actually adds/subtracts (one hour)
	    // from the actual represented time. That is why we call updateOffset
	    // a second time. In case it wants us to change the offset again
	    // _changeInProgress == true case, then we have to adjust, because
	    // there is no such time in the given timezone.
	    function getSetOffset(input, keepLocalTime, keepMinutes) {
	        var offset = this._offset || 0,
	            localAdjust;
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        if (input != null) {
	            if (typeof input === 'string') {
	                input = offsetFromString(matchShortOffset, input);
	                if (input === null) {
	                    return this;
	                }
	            } else if (Math.abs(input) < 16 && !keepMinutes) {
	                input = input * 60;
	            }
	            if (!this._isUTC && keepLocalTime) {
	                localAdjust = getDateOffset(this);
	            }
	            this._offset = input;
	            this._isUTC = true;
	            if (localAdjust != null) {
	                this.add(localAdjust, 'm');
	            }
	            if (offset !== input) {
	                if (!keepLocalTime || this._changeInProgress) {
	                    addSubtract(this, createDuration(input - offset, 'm'), 1, false);
	                } else if (!this._changeInProgress) {
	                    this._changeInProgress = true;
	                    hooks.updateOffset(this, true);
	                    this._changeInProgress = null;
	                }
	            }
	            return this;
	        } else {
	            return this._isUTC ? offset : getDateOffset(this);
	        }
	    }
	
	    function getSetZone(input, keepLocalTime) {
	        if (input != null) {
	            if (typeof input !== 'string') {
	                input = -input;
	            }
	
	            this.utcOffset(input, keepLocalTime);
	
	            return this;
	        } else {
	            return -this.utcOffset();
	        }
	    }
	
	    function setOffsetToUTC(keepLocalTime) {
	        return this.utcOffset(0, keepLocalTime);
	    }
	
	    function setOffsetToLocal(keepLocalTime) {
	        if (this._isUTC) {
	            this.utcOffset(0, keepLocalTime);
	            this._isUTC = false;
	
	            if (keepLocalTime) {
	                this.subtract(getDateOffset(this), 'm');
	            }
	        }
	        return this;
	    }
	
	    function setOffsetToParsedOffset() {
	        if (this._tzm != null) {
	            this.utcOffset(this._tzm, false, true);
	        } else if (typeof this._i === 'string') {
	            var tZone = offsetFromString(matchOffset, this._i);
	            if (tZone != null) {
	                this.utcOffset(tZone);
	            } else {
	                this.utcOffset(0, true);
	            }
	        }
	        return this;
	    }
	
	    function hasAlignedHourOffset(input) {
	        if (!this.isValid()) {
	            return false;
	        }
	        input = input ? createLocal(input).utcOffset() : 0;
	
	        return (this.utcOffset() - input) % 60 === 0;
	    }
	
	    function isDaylightSavingTime() {
	        return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
	    }
	
	    function isDaylightSavingTimeShifted() {
	        if (!isUndefined(this._isDSTShifted)) {
	            return this._isDSTShifted;
	        }
	
	        var c = {};
	
	        copyConfig(c, this);
	        c = prepareConfig(c);
	
	        if (c._a) {
	            var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
	            this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
	        } else {
	            this._isDSTShifted = false;
	        }
	
	        return this._isDSTShifted;
	    }
	
	    function isLocal() {
	        return this.isValid() ? !this._isUTC : false;
	    }
	
	    function isUtcOffset() {
	        return this.isValid() ? this._isUTC : false;
	    }
	
	    function isUtc() {
	        return this.isValid() ? this._isUTC && this._offset === 0 : false;
	    }
	
	    // ASP.NET json date format regex
	    var aspNetRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;
	
	    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
	    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
	    // and further modified to allow for strings containing both week and day
	    var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
	
	    function createDuration(input, key) {
	        var duration = input,
	
	        // matching against regexp is expensive, do it on demand
	        match = null,
	            sign,
	            ret,
	            diffRes;
	
	        if (isDuration(input)) {
	            duration = {
	                ms: input._milliseconds,
	                d: input._days,
	                M: input._months
	            };
	        } else if (isNumber(input)) {
	            duration = {};
	            if (key) {
	                duration[key] = input;
	            } else {
	                duration.milliseconds = input;
	            }
	        } else if (!!(match = aspNetRegex.exec(input))) {
	            sign = match[1] === '-' ? -1 : 1;
	            duration = {
	                y: 0,
	                d: toInt(match[DATE]) * sign,
	                h: toInt(match[HOUR]) * sign,
	                m: toInt(match[MINUTE]) * sign,
	                s: toInt(match[SECOND]) * sign,
	                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
	            };
	        } else if (!!(match = isoRegex.exec(input))) {
	            sign = match[1] === '-' ? -1 : match[1] === '+' ? 1 : 1;
	            duration = {
	                y: parseIso(match[2], sign),
	                M: parseIso(match[3], sign),
	                w: parseIso(match[4], sign),
	                d: parseIso(match[5], sign),
	                h: parseIso(match[6], sign),
	                m: parseIso(match[7], sign),
	                s: parseIso(match[8], sign)
	            };
	        } else if (duration == null) {
	            // checks for null or undefined
	            duration = {};
	        } else if ((typeof duration === 'undefined' ? 'undefined' : _typeof(duration)) === 'object' && ('from' in duration || 'to' in duration)) {
	            diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
	
	            duration = {};
	            duration.ms = diffRes.milliseconds;
	            duration.M = diffRes.months;
	        }
	
	        ret = new Duration(duration);
	
	        if (isDuration(input) && hasOwnProp(input, '_locale')) {
	            ret._locale = input._locale;
	        }
	
	        return ret;
	    }
	
	    createDuration.fn = Duration.prototype;
	    createDuration.invalid = createInvalid$1;
	
	    function parseIso(inp, sign) {
	        // We'd normally use ~~inp for this, but unfortunately it also
	        // converts floats to ints.
	        // inp may be undefined, so careful calling replace on it.
	        var res = inp && parseFloat(inp.replace(',', '.'));
	        // apply sign while we're at it
	        return (isNaN(res) ? 0 : res) * sign;
	    }
	
	    function positiveMomentsDifference(base, other) {
	        var res = { milliseconds: 0, months: 0 };
	
	        res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
	        if (base.clone().add(res.months, 'M').isAfter(other)) {
	            --res.months;
	        }
	
	        res.milliseconds = +other - +base.clone().add(res.months, 'M');
	
	        return res;
	    }
	
	    function momentsDifference(base, other) {
	        var res;
	        if (!(base.isValid() && other.isValid())) {
	            return { milliseconds: 0, months: 0 };
	        }
	
	        other = cloneWithOffset(other, base);
	        if (base.isBefore(other)) {
	            res = positiveMomentsDifference(base, other);
	        } else {
	            res = positiveMomentsDifference(other, base);
	            res.milliseconds = -res.milliseconds;
	            res.months = -res.months;
	        }
	
	        return res;
	    }
	
	    // TODO: remove 'name' arg after deprecation is removed
	    function createAdder(direction, name) {
	        return function (val, period) {
	            var dur, tmp;
	            //invert the arguments, but complain about it
	            if (period !== null && !isNaN(+period)) {
	                deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' + 'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
	                tmp = val;val = period;period = tmp;
	            }
	
	            val = typeof val === 'string' ? +val : val;
	            dur = createDuration(val, period);
	            addSubtract(this, dur, direction);
	            return this;
	        };
	    }
	
	    function addSubtract(mom, duration, isAdding, updateOffset) {
	        var milliseconds = duration._milliseconds,
	            days = absRound(duration._days),
	            months = absRound(duration._months);
	
	        if (!mom.isValid()) {
	            // No op
	            return;
	        }
	
	        updateOffset = updateOffset == null ? true : updateOffset;
	
	        if (months) {
	            setMonth(mom, get(mom, 'Month') + months * isAdding);
	        }
	        if (days) {
	            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
	        }
	        if (milliseconds) {
	            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
	        }
	        if (updateOffset) {
	            hooks.updateOffset(mom, days || months);
	        }
	    }
	
	    var add = createAdder(1, 'add');
	    var subtract = createAdder(-1, 'subtract');
	
	    function getCalendarFormat(myMoment, now) {
	        var diff = myMoment.diff(now, 'days', true);
	        return diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';
	    }
	
	    function calendar$1(time, formats) {
	        // We want to compare the start of today, vs this.
	        // Getting start-of-today depends on whether we're local/utc/offset or not.
	        var now = time || createLocal(),
	            sod = cloneWithOffset(now, this).startOf('day'),
	            format = hooks.calendarFormat(this, sod) || 'sameElse';
	
	        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);
	
	        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
	    }
	
	    function clone() {
	        return new Moment(this);
	    }
	
	    function isAfter(input, units) {
	        var localInput = isMoment(input) ? input : createLocal(input);
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
	        if (units === 'millisecond') {
	            return this.valueOf() > localInput.valueOf();
	        } else {
	            return localInput.valueOf() < this.clone().startOf(units).valueOf();
	        }
	    }
	
	    function isBefore(input, units) {
	        var localInput = isMoment(input) ? input : createLocal(input);
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
	        if (units === 'millisecond') {
	            return this.valueOf() < localInput.valueOf();
	        } else {
	            return this.clone().endOf(units).valueOf() < localInput.valueOf();
	        }
	    }
	
	    function isBetween(from, to, units, inclusivity) {
	        inclusivity = inclusivity || '()';
	        return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) && (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
	    }
	
	    function isSame(input, units) {
	        var localInput = isMoment(input) ? input : createLocal(input),
	            inputMs;
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(units || 'millisecond');
	        if (units === 'millisecond') {
	            return this.valueOf() === localInput.valueOf();
	        } else {
	            inputMs = localInput.valueOf();
	            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
	        }
	    }
	
	    function isSameOrAfter(input, units) {
	        return this.isSame(input, units) || this.isAfter(input, units);
	    }
	
	    function isSameOrBefore(input, units) {
	        return this.isSame(input, units) || this.isBefore(input, units);
	    }
	
	    function diff(input, units, asFloat) {
	        var that, zoneDelta, delta, output;
	
	        if (!this.isValid()) {
	            return NaN;
	        }
	
	        that = cloneWithOffset(input, this);
	
	        if (!that.isValid()) {
	            return NaN;
	        }
	
	        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
	
	        units = normalizeUnits(units);
	
	        switch (units) {
	            case 'year':
	                output = monthDiff(this, that) / 12;break;
	            case 'month':
	                output = monthDiff(this, that);break;
	            case 'quarter':
	                output = monthDiff(this, that) / 3;break;
	            case 'second':
	                output = (this - that) / 1e3;break; // 1000
	            case 'minute':
	                output = (this - that) / 6e4;break; // 1000 * 60
	            case 'hour':
	                output = (this - that) / 36e5;break; // 1000 * 60 * 60
	            case 'day':
	                output = (this - that - zoneDelta) / 864e5;break; // 1000 * 60 * 60 * 24, negate dst
	            case 'week':
	                output = (this - that - zoneDelta) / 6048e5;break; // 1000 * 60 * 60 * 24 * 7, negate dst
	            default:
	                output = this - that;
	        }
	
	        return asFloat ? output : absFloor(output);
	    }
	
	    function monthDiff(a, b) {
	        // difference in months
	        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
	
	        // b is in (anchor - 1 month, anchor + 1 month)
	        anchor = a.clone().add(wholeMonthDiff, 'months'),
	            anchor2,
	            adjust;
	
	        if (b - anchor < 0) {
	            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
	            // linear across the month
	            adjust = (b - anchor) / (anchor - anchor2);
	        } else {
	            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
	            // linear across the month
	            adjust = (b - anchor) / (anchor2 - anchor);
	        }
	
	        //check for negative zero, return zero if negative zero
	        return -(wholeMonthDiff + adjust) || 0;
	    }
	
	    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
	    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';
	
	    function toString() {
	        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
	    }
	
	    function toISOString(keepOffset) {
	        if (!this.isValid()) {
	            return null;
	        }
	        var utc = keepOffset !== true;
	        var m = utc ? this.clone().utc() : this;
	        if (m.year() < 0 || m.year() > 9999) {
	            return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
	        }
	        if (isFunction(Date.prototype.toISOString)) {
	            // native implementation is ~50x faster, use it when we can
	            if (utc) {
	                return this.toDate().toISOString();
	            } else {
	                return new Date(this._d.valueOf()).toISOString().replace('Z', formatMoment(m, 'Z'));
	            }
	        }
	        return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
	    }
	
	    /**
	     * Return a human readable representation of a moment that can
	     * also be evaluated to get a new moment which is the same
	     *
	     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
	     */
	    function inspect() {
	        if (!this.isValid()) {
	            return 'moment.invalid(/* ' + this._i + ' */)';
	        }
	        var func = 'moment';
	        var zone = '';
	        if (!this.isLocal()) {
	            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
	            zone = 'Z';
	        }
	        var prefix = '[' + func + '("]';
	        var year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
	        var datetime = '-MM-DD[T]HH:mm:ss.SSS';
	        var suffix = zone + '[")]';
	
	        return this.format(prefix + year + datetime + suffix);
	    }
	
	    function format(inputString) {
	        if (!inputString) {
	            inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
	        }
	        var output = formatMoment(this, inputString);
	        return this.localeData().postformat(output);
	    }
	
	    function from(time, withoutSuffix) {
	        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
	            return createDuration({ to: this, from: time }).locale(this.locale()).humanize(!withoutSuffix);
	        } else {
	            return this.localeData().invalidDate();
	        }
	    }
	
	    function fromNow(withoutSuffix) {
	        return this.from(createLocal(), withoutSuffix);
	    }
	
	    function to(time, withoutSuffix) {
	        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
	            return createDuration({ from: this, to: time }).locale(this.locale()).humanize(!withoutSuffix);
	        } else {
	            return this.localeData().invalidDate();
	        }
	    }
	
	    function toNow(withoutSuffix) {
	        return this.to(createLocal(), withoutSuffix);
	    }
	
	    // If passed a locale key, it will set the locale for this
	    // instance.  Otherwise, it will return the locale configuration
	    // variables for this instance.
	    function locale(key) {
	        var newLocaleData;
	
	        if (key === undefined) {
	            return this._locale._abbr;
	        } else {
	            newLocaleData = getLocale(key);
	            if (newLocaleData != null) {
	                this._locale = newLocaleData;
	            }
	            return this;
	        }
	    }
	
	    var lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function (key) {
	        if (key === undefined) {
	            return this.localeData();
	        } else {
	            return this.locale(key);
	        }
	    });
	
	    function localeData() {
	        return this._locale;
	    }
	
	    function startOf(units) {
	        units = normalizeUnits(units);
	        // the following switch intentionally omits break keywords
	        // to utilize falling through the cases.
	        switch (units) {
	            case 'year':
	                this.month(0);
	            /* falls through */
	            case 'quarter':
	            case 'month':
	                this.date(1);
	            /* falls through */
	            case 'week':
	            case 'isoWeek':
	            case 'day':
	            case 'date':
	                this.hours(0);
	            /* falls through */
	            case 'hour':
	                this.minutes(0);
	            /* falls through */
	            case 'minute':
	                this.seconds(0);
	            /* falls through */
	            case 'second':
	                this.milliseconds(0);
	        }
	
	        // weeks are a special case
	        if (units === 'week') {
	            this.weekday(0);
	        }
	        if (units === 'isoWeek') {
	            this.isoWeekday(1);
	        }
	
	        // quarters are also special
	        if (units === 'quarter') {
	            this.month(Math.floor(this.month() / 3) * 3);
	        }
	
	        return this;
	    }
	
	    function endOf(units) {
	        units = normalizeUnits(units);
	        if (units === undefined || units === 'millisecond') {
	            return this;
	        }
	
	        // 'date' is an alias for 'day', so it should be considered as such.
	        if (units === 'date') {
	            units = 'day';
	        }
	
	        return this.startOf(units).add(1, units === 'isoWeek' ? 'week' : units).subtract(1, 'ms');
	    }
	
	    function valueOf() {
	        return this._d.valueOf() - (this._offset || 0) * 60000;
	    }
	
	    function unix() {
	        return Math.floor(this.valueOf() / 1000);
	    }
	
	    function toDate() {
	        return new Date(this.valueOf());
	    }
	
	    function toArray() {
	        var m = this;
	        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
	    }
	
	    function toObject() {
	        var m = this;
	        return {
	            years: m.year(),
	            months: m.month(),
	            date: m.date(),
	            hours: m.hours(),
	            minutes: m.minutes(),
	            seconds: m.seconds(),
	            milliseconds: m.milliseconds()
	        };
	    }
	
	    function toJSON() {
	        // new Date(NaN).toJSON() === null
	        return this.isValid() ? this.toISOString() : null;
	    }
	
	    function isValid$2() {
	        return isValid(this);
	    }
	
	    function parsingFlags() {
	        return extend({}, getParsingFlags(this));
	    }
	
	    function invalidAt() {
	        return getParsingFlags(this).overflow;
	    }
	
	    function creationData() {
	        return {
	            input: this._i,
	            format: this._f,
	            locale: this._locale,
	            isUTC: this._isUTC,
	            strict: this._strict
	        };
	    }
	
	    // FORMATTING
	
	    addFormatToken(0, ['gg', 2], 0, function () {
	        return this.weekYear() % 100;
	    });
	
	    addFormatToken(0, ['GG', 2], 0, function () {
	        return this.isoWeekYear() % 100;
	    });
	
	    function addWeekYearFormatToken(token, getter) {
	        addFormatToken(0, [token, token.length], 0, getter);
	    }
	
	    addWeekYearFormatToken('gggg', 'weekYear');
	    addWeekYearFormatToken('ggggg', 'weekYear');
	    addWeekYearFormatToken('GGGG', 'isoWeekYear');
	    addWeekYearFormatToken('GGGGG', 'isoWeekYear');
	
	    // ALIASES
	
	    addUnitAlias('weekYear', 'gg');
	    addUnitAlias('isoWeekYear', 'GG');
	
	    // PRIORITY
	
	    addUnitPriority('weekYear', 1);
	    addUnitPriority('isoWeekYear', 1);
	
	    // PARSING
	
	    addRegexToken('G', matchSigned);
	    addRegexToken('g', matchSigned);
	    addRegexToken('GG', match1to2, match2);
	    addRegexToken('gg', match1to2, match2);
	    addRegexToken('GGGG', match1to4, match4);
	    addRegexToken('gggg', match1to4, match4);
	    addRegexToken('GGGGG', match1to6, match6);
	    addRegexToken('ggggg', match1to6, match6);
	
	    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
	        week[token.substr(0, 2)] = toInt(input);
	    });
	
	    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
	        week[token] = hooks.parseTwoDigitYear(input);
	    });
	
	    // MOMENTS
	
	    function getSetWeekYear(input) {
	        return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
	    }
	
	    function getSetISOWeekYear(input) {
	        return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
	    }
	
	    function getISOWeeksInYear() {
	        return weeksInYear(this.year(), 1, 4);
	    }
	
	    function getWeeksInYear() {
	        var weekInfo = this.localeData()._week;
	        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
	    }
	
	    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
	        var weeksTarget;
	        if (input == null) {
	            return weekOfYear(this, dow, doy).year;
	        } else {
	            weeksTarget = weeksInYear(input, dow, doy);
	            if (week > weeksTarget) {
	                week = weeksTarget;
	            }
	            return setWeekAll.call(this, input, week, weekday, dow, doy);
	        }
	    }
	
	    function setWeekAll(weekYear, week, weekday, dow, doy) {
	        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
	            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
	
	        this.year(date.getUTCFullYear());
	        this.month(date.getUTCMonth());
	        this.date(date.getUTCDate());
	        return this;
	    }
	
	    // FORMATTING
	
	    addFormatToken('Q', 0, 'Qo', 'quarter');
	
	    // ALIASES
	
	    addUnitAlias('quarter', 'Q');
	
	    // PRIORITY
	
	    addUnitPriority('quarter', 7);
	
	    // PARSING
	
	    addRegexToken('Q', match1);
	    addParseToken('Q', function (input, array) {
	        array[MONTH] = (toInt(input) - 1) * 3;
	    });
	
	    // MOMENTS
	
	    function getSetQuarter(input) {
	        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
	    }
	
	    // FORMATTING
	
	    addFormatToken('D', ['DD', 2], 'Do', 'date');
	
	    // ALIASES
	
	    addUnitAlias('date', 'D');
	
	    // PRIOROITY
	    addUnitPriority('date', 9);
	
	    // PARSING
	
	    addRegexToken('D', match1to2);
	    addRegexToken('DD', match1to2, match2);
	    addRegexToken('Do', function (isStrict, locale) {
	        // TODO: Remove "ordinalParse" fallback in next major release.
	        return isStrict ? locale._dayOfMonthOrdinalParse || locale._ordinalParse : locale._dayOfMonthOrdinalParseLenient;
	    });
	
	    addParseToken(['D', 'DD'], DATE);
	    addParseToken('Do', function (input, array) {
	        array[DATE] = toInt(input.match(match1to2)[0]);
	    });
	
	    // MOMENTS
	
	    var getSetDayOfMonth = makeGetSet('Date', true);
	
	    // FORMATTING
	
	    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');
	
	    // ALIASES
	
	    addUnitAlias('dayOfYear', 'DDD');
	
	    // PRIORITY
	    addUnitPriority('dayOfYear', 4);
	
	    // PARSING
	
	    addRegexToken('DDD', match1to3);
	    addRegexToken('DDDD', match3);
	    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
	        config._dayOfYear = toInt(input);
	    });
	
	    // HELPERS
	
	    // MOMENTS
	
	    function getSetDayOfYear(input) {
	        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
	        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
	    }
	
	    // FORMATTING
	
	    addFormatToken('m', ['mm', 2], 0, 'minute');
	
	    // ALIASES
	
	    addUnitAlias('minute', 'm');
	
	    // PRIORITY
	
	    addUnitPriority('minute', 14);
	
	    // PARSING
	
	    addRegexToken('m', match1to2);
	    addRegexToken('mm', match1to2, match2);
	    addParseToken(['m', 'mm'], MINUTE);
	
	    // MOMENTS
	
	    var getSetMinute = makeGetSet('Minutes', false);
	
	    // FORMATTING
	
	    addFormatToken('s', ['ss', 2], 0, 'second');
	
	    // ALIASES
	
	    addUnitAlias('second', 's');
	
	    // PRIORITY
	
	    addUnitPriority('second', 15);
	
	    // PARSING
	
	    addRegexToken('s', match1to2);
	    addRegexToken('ss', match1to2, match2);
	    addParseToken(['s', 'ss'], SECOND);
	
	    // MOMENTS
	
	    var getSetSecond = makeGetSet('Seconds', false);
	
	    // FORMATTING
	
	    addFormatToken('S', 0, 0, function () {
	        return ~~(this.millisecond() / 100);
	    });
	
	    addFormatToken(0, ['SS', 2], 0, function () {
	        return ~~(this.millisecond() / 10);
	    });
	
	    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
	    addFormatToken(0, ['SSSS', 4], 0, function () {
	        return this.millisecond() * 10;
	    });
	    addFormatToken(0, ['SSSSS', 5], 0, function () {
	        return this.millisecond() * 100;
	    });
	    addFormatToken(0, ['SSSSSS', 6], 0, function () {
	        return this.millisecond() * 1000;
	    });
	    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
	        return this.millisecond() * 10000;
	    });
	    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
	        return this.millisecond() * 100000;
	    });
	    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
	        return this.millisecond() * 1000000;
	    });
	
	    // ALIASES
	
	    addUnitAlias('millisecond', 'ms');
	
	    // PRIORITY
	
	    addUnitPriority('millisecond', 16);
	
	    // PARSING
	
	    addRegexToken('S', match1to3, match1);
	    addRegexToken('SS', match1to3, match2);
	    addRegexToken('SSS', match1to3, match3);
	
	    var token;
	    for (token = 'SSSS'; token.length <= 9; token += 'S') {
	        addRegexToken(token, matchUnsigned);
	    }
	
	    function parseMs(input, array) {
	        array[MILLISECOND] = toInt(('0.' + input) * 1000);
	    }
	
	    for (token = 'S'; token.length <= 9; token += 'S') {
	        addParseToken(token, parseMs);
	    }
	    // MOMENTS
	
	    var getSetMillisecond = makeGetSet('Milliseconds', false);
	
	    // FORMATTING
	
	    addFormatToken('z', 0, 0, 'zoneAbbr');
	    addFormatToken('zz', 0, 0, 'zoneName');
	
	    // MOMENTS
	
	    function getZoneAbbr() {
	        return this._isUTC ? 'UTC' : '';
	    }
	
	    function getZoneName() {
	        return this._isUTC ? 'Coordinated Universal Time' : '';
	    }
	
	    var proto = Moment.prototype;
	
	    proto.add = add;
	    proto.calendar = calendar$1;
	    proto.clone = clone;
	    proto.diff = diff;
	    proto.endOf = endOf;
	    proto.format = format;
	    proto.from = from;
	    proto.fromNow = fromNow;
	    proto.to = to;
	    proto.toNow = toNow;
	    proto.get = stringGet;
	    proto.invalidAt = invalidAt;
	    proto.isAfter = isAfter;
	    proto.isBefore = isBefore;
	    proto.isBetween = isBetween;
	    proto.isSame = isSame;
	    proto.isSameOrAfter = isSameOrAfter;
	    proto.isSameOrBefore = isSameOrBefore;
	    proto.isValid = isValid$2;
	    proto.lang = lang;
	    proto.locale = locale;
	    proto.localeData = localeData;
	    proto.max = prototypeMax;
	    proto.min = prototypeMin;
	    proto.parsingFlags = parsingFlags;
	    proto.set = stringSet;
	    proto.startOf = startOf;
	    proto.subtract = subtract;
	    proto.toArray = toArray;
	    proto.toObject = toObject;
	    proto.toDate = toDate;
	    proto.toISOString = toISOString;
	    proto.inspect = inspect;
	    proto.toJSON = toJSON;
	    proto.toString = toString;
	    proto.unix = unix;
	    proto.valueOf = valueOf;
	    proto.creationData = creationData;
	
	    // Year
	    proto.year = getSetYear;
	    proto.isLeapYear = getIsLeapYear;
	
	    // Week Year
	    proto.weekYear = getSetWeekYear;
	    proto.isoWeekYear = getSetISOWeekYear;
	
	    // Quarter
	    proto.quarter = proto.quarters = getSetQuarter;
	
	    // Month
	    proto.month = getSetMonth;
	    proto.daysInMonth = getDaysInMonth;
	
	    // Week
	    proto.week = proto.weeks = getSetWeek;
	    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
	    proto.weeksInYear = getWeeksInYear;
	    proto.isoWeeksInYear = getISOWeeksInYear;
	
	    // Day
	    proto.date = getSetDayOfMonth;
	    proto.day = proto.days = getSetDayOfWeek;
	    proto.weekday = getSetLocaleDayOfWeek;
	    proto.isoWeekday = getSetISODayOfWeek;
	    proto.dayOfYear = getSetDayOfYear;
	
	    // Hour
	    proto.hour = proto.hours = getSetHour;
	
	    // Minute
	    proto.minute = proto.minutes = getSetMinute;
	
	    // Second
	    proto.second = proto.seconds = getSetSecond;
	
	    // Millisecond
	    proto.millisecond = proto.milliseconds = getSetMillisecond;
	
	    // Offset
	    proto.utcOffset = getSetOffset;
	    proto.utc = setOffsetToUTC;
	    proto.local = setOffsetToLocal;
	    proto.parseZone = setOffsetToParsedOffset;
	    proto.hasAlignedHourOffset = hasAlignedHourOffset;
	    proto.isDST = isDaylightSavingTime;
	    proto.isLocal = isLocal;
	    proto.isUtcOffset = isUtcOffset;
	    proto.isUtc = isUtc;
	    proto.isUTC = isUtc;
	
	    // Timezone
	    proto.zoneAbbr = getZoneAbbr;
	    proto.zoneName = getZoneName;
	
	    // Deprecations
	    proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
	    proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
	    proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
	    proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
	    proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);
	
	    function createUnix(input) {
	        return createLocal(input * 1000);
	    }
	
	    function createInZone() {
	        return createLocal.apply(null, arguments).parseZone();
	    }
	
	    function preParsePostFormat(string) {
	        return string;
	    }
	
	    var proto$1 = Locale.prototype;
	
	    proto$1.calendar = calendar;
	    proto$1.longDateFormat = longDateFormat;
	    proto$1.invalidDate = invalidDate;
	    proto$1.ordinal = ordinal;
	    proto$1.preparse = preParsePostFormat;
	    proto$1.postformat = preParsePostFormat;
	    proto$1.relativeTime = relativeTime;
	    proto$1.pastFuture = pastFuture;
	    proto$1.set = set;
	
	    // Month
	    proto$1.months = localeMonths;
	    proto$1.monthsShort = localeMonthsShort;
	    proto$1.monthsParse = localeMonthsParse;
	    proto$1.monthsRegex = monthsRegex;
	    proto$1.monthsShortRegex = monthsShortRegex;
	
	    // Week
	    proto$1.week = localeWeek;
	    proto$1.firstDayOfYear = localeFirstDayOfYear;
	    proto$1.firstDayOfWeek = localeFirstDayOfWeek;
	
	    // Day of Week
	    proto$1.weekdays = localeWeekdays;
	    proto$1.weekdaysMin = localeWeekdaysMin;
	    proto$1.weekdaysShort = localeWeekdaysShort;
	    proto$1.weekdaysParse = localeWeekdaysParse;
	
	    proto$1.weekdaysRegex = weekdaysRegex;
	    proto$1.weekdaysShortRegex = weekdaysShortRegex;
	    proto$1.weekdaysMinRegex = weekdaysMinRegex;
	
	    // Hours
	    proto$1.isPM = localeIsPM;
	    proto$1.meridiem = localeMeridiem;
	
	    function get$1(format, index, field, setter) {
	        var locale = getLocale();
	        var utc = createUTC().set(setter, index);
	        return locale[field](utc, format);
	    }
	
	    function listMonthsImpl(format, index, field) {
	        if (isNumber(format)) {
	            index = format;
	            format = undefined;
	        }
	
	        format = format || '';
	
	        if (index != null) {
	            return get$1(format, index, field, 'month');
	        }
	
	        var i;
	        var out = [];
	        for (i = 0; i < 12; i++) {
	            out[i] = get$1(format, i, field, 'month');
	        }
	        return out;
	    }
	
	    // ()
	    // (5)
	    // (fmt, 5)
	    // (fmt)
	    // (true)
	    // (true, 5)
	    // (true, fmt, 5)
	    // (true, fmt)
	    function listWeekdaysImpl(localeSorted, format, index, field) {
	        if (typeof localeSorted === 'boolean') {
	            if (isNumber(format)) {
	                index = format;
	                format = undefined;
	            }
	
	            format = format || '';
	        } else {
	            format = localeSorted;
	            index = format;
	            localeSorted = false;
	
	            if (isNumber(format)) {
	                index = format;
	                format = undefined;
	            }
	
	            format = format || '';
	        }
	
	        var locale = getLocale(),
	            shift = localeSorted ? locale._week.dow : 0;
	
	        if (index != null) {
	            return get$1(format, (index + shift) % 7, field, 'day');
	        }
	
	        var i;
	        var out = [];
	        for (i = 0; i < 7; i++) {
	            out[i] = get$1(format, (i + shift) % 7, field, 'day');
	        }
	        return out;
	    }
	
	    function listMonths(format, index) {
	        return listMonthsImpl(format, index, 'months');
	    }
	
	    function listMonthsShort(format, index) {
	        return listMonthsImpl(format, index, 'monthsShort');
	    }
	
	    function listWeekdays(localeSorted, format, index) {
	        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
	    }
	
	    function listWeekdaysShort(localeSorted, format, index) {
	        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
	    }
	
	    function listWeekdaysMin(localeSorted, format, index) {
	        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
	    }
	
	    getSetGlobalLocale('en', {
	        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
	        ordinal: function ordinal(number) {
	            var b = number % 10,
	                output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
	            return number + output;
	        }
	    });
	
	    // Side effect imports
	    hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
	    hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);
	
	    var mathAbs = Math.abs;
	
	    function abs() {
	        var data = this._data;
	
	        this._milliseconds = mathAbs(this._milliseconds);
	        this._days = mathAbs(this._days);
	        this._months = mathAbs(this._months);
	
	        data.milliseconds = mathAbs(data.milliseconds);
	        data.seconds = mathAbs(data.seconds);
	        data.minutes = mathAbs(data.minutes);
	        data.hours = mathAbs(data.hours);
	        data.months = mathAbs(data.months);
	        data.years = mathAbs(data.years);
	
	        return this;
	    }
	
	    function addSubtract$1(duration, input, value, direction) {
	        var other = createDuration(input, value);
	
	        duration._milliseconds += direction * other._milliseconds;
	        duration._days += direction * other._days;
	        duration._months += direction * other._months;
	
	        return duration._bubble();
	    }
	
	    // supports only 2.0-style add(1, 's') or add(duration)
	    function add$1(input, value) {
	        return addSubtract$1(this, input, value, 1);
	    }
	
	    // supports only 2.0-style subtract(1, 's') or subtract(duration)
	    function subtract$1(input, value) {
	        return addSubtract$1(this, input, value, -1);
	    }
	
	    function absCeil(number) {
	        if (number < 0) {
	            return Math.floor(number);
	        } else {
	            return Math.ceil(number);
	        }
	    }
	
	    function bubble() {
	        var milliseconds = this._milliseconds;
	        var days = this._days;
	        var months = this._months;
	        var data = this._data;
	        var seconds, minutes, hours, years, monthsFromDays;
	
	        // if we have a mix of positive and negative values, bubble down first
	        // check: https://github.com/moment/moment/issues/2166
	        if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {
	            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
	            days = 0;
	            months = 0;
	        }
	
	        // The following code bubbles up values, see the tests for
	        // examples of what that means.
	        data.milliseconds = milliseconds % 1000;
	
	        seconds = absFloor(milliseconds / 1000);
	        data.seconds = seconds % 60;
	
	        minutes = absFloor(seconds / 60);
	        data.minutes = minutes % 60;
	
	        hours = absFloor(minutes / 60);
	        data.hours = hours % 24;
	
	        days += absFloor(hours / 24);
	
	        // convert days to months
	        monthsFromDays = absFloor(daysToMonths(days));
	        months += monthsFromDays;
	        days -= absCeil(monthsToDays(monthsFromDays));
	
	        // 12 months -> 1 year
	        years = absFloor(months / 12);
	        months %= 12;
	
	        data.days = days;
	        data.months = months;
	        data.years = years;
	
	        return this;
	    }
	
	    function daysToMonths(days) {
	        // 400 years have 146097 days (taking into account leap year rules)
	        // 400 years have 12 months === 4800
	        return days * 4800 / 146097;
	    }
	
	    function monthsToDays(months) {
	        // the reverse of daysToMonths
	        return months * 146097 / 4800;
	    }
	
	    function as(units) {
	        if (!this.isValid()) {
	            return NaN;
	        }
	        var days;
	        var months;
	        var milliseconds = this._milliseconds;
	
	        units = normalizeUnits(units);
	
	        if (units === 'month' || units === 'year') {
	            days = this._days + milliseconds / 864e5;
	            months = this._months + daysToMonths(days);
	            return units === 'month' ? months : months / 12;
	        } else {
	            // handle milliseconds separately because of floating point math errors (issue #1867)
	            days = this._days + Math.round(monthsToDays(this._months));
	            switch (units) {
	                case 'week':
	                    return days / 7 + milliseconds / 6048e5;
	                case 'day':
	                    return days + milliseconds / 864e5;
	                case 'hour':
	                    return days * 24 + milliseconds / 36e5;
	                case 'minute':
	                    return days * 1440 + milliseconds / 6e4;
	                case 'second':
	                    return days * 86400 + milliseconds / 1000;
	                // Math.floor prevents floating point math errors here
	                case 'millisecond':
	                    return Math.floor(days * 864e5) + milliseconds;
	                default:
	                    throw new Error('Unknown unit ' + units);
	            }
	        }
	    }
	
	    // TODO: Use this.as('ms')?
	    function valueOf$1() {
	        if (!this.isValid()) {
	            return NaN;
	        }
	        return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
	    }
	
	    function makeAs(alias) {
	        return function () {
	            return this.as(alias);
	        };
	    }
	
	    var asMilliseconds = makeAs('ms');
	    var asSeconds = makeAs('s');
	    var asMinutes = makeAs('m');
	    var asHours = makeAs('h');
	    var asDays = makeAs('d');
	    var asWeeks = makeAs('w');
	    var asMonths = makeAs('M');
	    var asYears = makeAs('y');
	
	    function clone$1() {
	        return createDuration(this);
	    }
	
	    function get$2(units) {
	        units = normalizeUnits(units);
	        return this.isValid() ? this[units + 's']() : NaN;
	    }
	
	    function makeGetter(name) {
	        return function () {
	            return this.isValid() ? this._data[name] : NaN;
	        };
	    }
	
	    var milliseconds = makeGetter('milliseconds');
	    var seconds = makeGetter('seconds');
	    var minutes = makeGetter('minutes');
	    var hours = makeGetter('hours');
	    var days = makeGetter('days');
	    var months = makeGetter('months');
	    var years = makeGetter('years');
	
	    function weeks() {
	        return absFloor(this.days() / 7);
	    }
	
	    var round = Math.round;
	    var thresholds = {
	        ss: 44, // a few seconds to seconds
	        s: 45, // seconds to minute
	        m: 45, // minutes to hour
	        h: 22, // hours to day
	        d: 26, // days to month
	        M: 11 // months to year
	    };
	
	    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
	    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
	        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
	    }
	
	    function relativeTime$1(posNegDuration, withoutSuffix, locale) {
	        var duration = createDuration(posNegDuration).abs();
	        var seconds = round(duration.as('s'));
	        var minutes = round(duration.as('m'));
	        var hours = round(duration.as('h'));
	        var days = round(duration.as('d'));
	        var months = round(duration.as('M'));
	        var years = round(duration.as('y'));
	
	        var a = seconds <= thresholds.ss && ['s', seconds] || seconds < thresholds.s && ['ss', seconds] || minutes <= 1 && ['m'] || minutes < thresholds.m && ['mm', minutes] || hours <= 1 && ['h'] || hours < thresholds.h && ['hh', hours] || days <= 1 && ['d'] || days < thresholds.d && ['dd', days] || months <= 1 && ['M'] || months < thresholds.M && ['MM', months] || years <= 1 && ['y'] || ['yy', years];
	
	        a[2] = withoutSuffix;
	        a[3] = +posNegDuration > 0;
	        a[4] = locale;
	        return substituteTimeAgo.apply(null, a);
	    }
	
	    // This function allows you to set the rounding function for relative time strings
	    function getSetRelativeTimeRounding(roundingFunction) {
	        if (roundingFunction === undefined) {
	            return round;
	        }
	        if (typeof roundingFunction === 'function') {
	            round = roundingFunction;
	            return true;
	        }
	        return false;
	    }
	
	    // This function allows you to set a threshold for relative time strings
	    function getSetRelativeTimeThreshold(threshold, limit) {
	        if (thresholds[threshold] === undefined) {
	            return false;
	        }
	        if (limit === undefined) {
	            return thresholds[threshold];
	        }
	        thresholds[threshold] = limit;
	        if (threshold === 's') {
	            thresholds.ss = limit - 1;
	        }
	        return true;
	    }
	
	    function humanize(withSuffix) {
	        if (!this.isValid()) {
	            return this.localeData().invalidDate();
	        }
	
	        var locale = this.localeData();
	        var output = relativeTime$1(this, !withSuffix, locale);
	
	        if (withSuffix) {
	            output = locale.pastFuture(+this, output);
	        }
	
	        return locale.postformat(output);
	    }
	
	    var abs$1 = Math.abs;
	
	    function sign(x) {
	        return (x > 0) - (x < 0) || +x;
	    }
	
	    function toISOString$1() {
	        // for ISO strings we do not use the normal bubbling rules:
	        //  * milliseconds bubble up until they become hours
	        //  * days do not bubble at all
	        //  * months bubble up until they become years
	        // This is because there is no context-free conversion between hours and days
	        // (think of clock changes)
	        // and also not between days and months (28-31 days per month)
	        if (!this.isValid()) {
	            return this.localeData().invalidDate();
	        }
	
	        var seconds = abs$1(this._milliseconds) / 1000;
	        var days = abs$1(this._days);
	        var months = abs$1(this._months);
	        var minutes, hours, years;
	
	        // 3600 seconds -> 60 minutes -> 1 hour
	        minutes = absFloor(seconds / 60);
	        hours = absFloor(minutes / 60);
	        seconds %= 60;
	        minutes %= 60;
	
	        // 12 months -> 1 year
	        years = absFloor(months / 12);
	        months %= 12;
	
	        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
	        var Y = years;
	        var M = months;
	        var D = days;
	        var h = hours;
	        var m = minutes;
	        var s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
	        var total = this.asSeconds();
	
	        if (!total) {
	            // this is the same as C#'s (Noda) and python (isodate)...
	            // but not other JS (goog.date)
	            return 'P0D';
	        }
	
	        var totalSign = total < 0 ? '-' : '';
	        var ymSign = sign(this._months) !== sign(total) ? '-' : '';
	        var daysSign = sign(this._days) !== sign(total) ? '-' : '';
	        var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';
	
	        return totalSign + 'P' + (Y ? ymSign + Y + 'Y' : '') + (M ? ymSign + M + 'M' : '') + (D ? daysSign + D + 'D' : '') + (h || m || s ? 'T' : '') + (h ? hmsSign + h + 'H' : '') + (m ? hmsSign + m + 'M' : '') + (s ? hmsSign + s + 'S' : '');
	    }
	
	    var proto$2 = Duration.prototype;
	
	    proto$2.isValid = isValid$1;
	    proto$2.abs = abs;
	    proto$2.add = add$1;
	    proto$2.subtract = subtract$1;
	    proto$2.as = as;
	    proto$2.asMilliseconds = asMilliseconds;
	    proto$2.asSeconds = asSeconds;
	    proto$2.asMinutes = asMinutes;
	    proto$2.asHours = asHours;
	    proto$2.asDays = asDays;
	    proto$2.asWeeks = asWeeks;
	    proto$2.asMonths = asMonths;
	    proto$2.asYears = asYears;
	    proto$2.valueOf = valueOf$1;
	    proto$2._bubble = bubble;
	    proto$2.clone = clone$1;
	    proto$2.get = get$2;
	    proto$2.milliseconds = milliseconds;
	    proto$2.seconds = seconds;
	    proto$2.minutes = minutes;
	    proto$2.hours = hours;
	    proto$2.days = days;
	    proto$2.weeks = weeks;
	    proto$2.months = months;
	    proto$2.years = years;
	    proto$2.humanize = humanize;
	    proto$2.toISOString = toISOString$1;
	    proto$2.toString = toISOString$1;
	    proto$2.toJSON = toISOString$1;
	    proto$2.locale = locale;
	    proto$2.localeData = localeData;
	
	    // Deprecations
	    proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
	    proto$2.lang = lang;
	
	    // Side effect imports
	
	    // FORMATTING
	
	    addFormatToken('X', 0, 0, 'unix');
	    addFormatToken('x', 0, 0, 'valueOf');
	
	    // PARSING
	
	    addRegexToken('x', matchSigned);
	    addRegexToken('X', matchTimestamp);
	    addParseToken('X', function (input, array, config) {
	        config._d = new Date(parseFloat(input, 10) * 1000);
	    });
	    addParseToken('x', function (input, array, config) {
	        config._d = new Date(toInt(input));
	    });
	
	    // Side effect imports
	
	
	    hooks.version = '2.20.1';
	
	    setHookCallback(createLocal);
	
	    hooks.fn = proto;
	    hooks.min = min;
	    hooks.max = max;
	    hooks.now = now;
	    hooks.utc = createUTC;
	    hooks.unix = createUnix;
	    hooks.months = listMonths;
	    hooks.isDate = isDate;
	    hooks.locale = getSetGlobalLocale;
	    hooks.invalid = createInvalid;
	    hooks.duration = createDuration;
	    hooks.isMoment = isMoment;
	    hooks.weekdays = listWeekdays;
	    hooks.parseZone = createInZone;
	    hooks.localeData = getLocale;
	    hooks.isDuration = isDuration;
	    hooks.monthsShort = listMonthsShort;
	    hooks.weekdaysMin = listWeekdaysMin;
	    hooks.defineLocale = defineLocale;
	    hooks.updateLocale = updateLocale;
	    hooks.locales = listLocales;
	    hooks.weekdaysShort = listWeekdaysShort;
	    hooks.normalizeUnits = normalizeUnits;
	    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
	    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
	    hooks.calendarFormat = getCalendarFormat;
	    hooks.prototype = proto;
	
	    // currently HTML5 input type only supports 24-hour formats
	    hooks.HTML5_FMT = {
	        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type="datetime-local" />
	        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type="datetime-local" step="1" />
	        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type="datetime-local" step="0.001" />
	        DATE: 'YYYY-MM-DD', // <input type="date" />
	        TIME: 'HH:mm', // <input type="time" />
	        TIME_SECONDS: 'HH:mm:ss', // <input type="time" step="1" />
	        TIME_MS: 'HH:mm:ss.SSS', // <input type="time" step="0.001" />
	        WEEK: 'YYYY-[W]WW', // <input type="week" />
	        MONTH: 'YYYY-MM' // <input type="month" />
	    };
	
	    return hooks;
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(324)(module)))

/***/ },
/* 338 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./af": 339,
		"./af.js": 339,
		"./ar": 340,
		"./ar-dz": 341,
		"./ar-dz.js": 341,
		"./ar-kw": 342,
		"./ar-kw.js": 342,
		"./ar-ly": 343,
		"./ar-ly.js": 343,
		"./ar-ma": 344,
		"./ar-ma.js": 344,
		"./ar-sa": 345,
		"./ar-sa.js": 345,
		"./ar-tn": 346,
		"./ar-tn.js": 346,
		"./ar.js": 340,
		"./az": 347,
		"./az.js": 347,
		"./be": 348,
		"./be.js": 348,
		"./bg": 349,
		"./bg.js": 349,
		"./bm": 350,
		"./bm.js": 350,
		"./bn": 351,
		"./bn.js": 351,
		"./bo": 352,
		"./bo.js": 352,
		"./br": 353,
		"./br.js": 353,
		"./bs": 354,
		"./bs.js": 354,
		"./ca": 355,
		"./ca.js": 355,
		"./cs": 356,
		"./cs.js": 356,
		"./cv": 357,
		"./cv.js": 357,
		"./cy": 358,
		"./cy.js": 358,
		"./da": 359,
		"./da.js": 359,
		"./de": 360,
		"./de-at": 361,
		"./de-at.js": 361,
		"./de-ch": 362,
		"./de-ch.js": 362,
		"./de.js": 360,
		"./dv": 363,
		"./dv.js": 363,
		"./el": 364,
		"./el.js": 364,
		"./en-au": 365,
		"./en-au.js": 365,
		"./en-ca": 366,
		"./en-ca.js": 366,
		"./en-gb": 367,
		"./en-gb.js": 367,
		"./en-ie": 368,
		"./en-ie.js": 368,
		"./en-nz": 369,
		"./en-nz.js": 369,
		"./eo": 370,
		"./eo.js": 370,
		"./es": 371,
		"./es-do": 372,
		"./es-do.js": 372,
		"./es-us": 373,
		"./es-us.js": 373,
		"./es.js": 371,
		"./et": 374,
		"./et.js": 374,
		"./eu": 375,
		"./eu.js": 375,
		"./fa": 376,
		"./fa.js": 376,
		"./fi": 377,
		"./fi.js": 377,
		"./fo": 378,
		"./fo.js": 378,
		"./fr": 379,
		"./fr-ca": 380,
		"./fr-ca.js": 380,
		"./fr-ch": 381,
		"./fr-ch.js": 381,
		"./fr.js": 379,
		"./fy": 382,
		"./fy.js": 382,
		"./gd": 383,
		"./gd.js": 383,
		"./gl": 384,
		"./gl.js": 384,
		"./gom-latn": 385,
		"./gom-latn.js": 385,
		"./gu": 386,
		"./gu.js": 386,
		"./he": 387,
		"./he.js": 387,
		"./hi": 388,
		"./hi.js": 388,
		"./hr": 389,
		"./hr.js": 389,
		"./hu": 390,
		"./hu.js": 390,
		"./hy-am": 391,
		"./hy-am.js": 391,
		"./id": 392,
		"./id.js": 392,
		"./is": 393,
		"./is.js": 393,
		"./it": 394,
		"./it.js": 394,
		"./ja": 395,
		"./ja.js": 395,
		"./jv": 396,
		"./jv.js": 396,
		"./ka": 397,
		"./ka.js": 397,
		"./kk": 398,
		"./kk.js": 398,
		"./km": 399,
		"./km.js": 399,
		"./kn": 400,
		"./kn.js": 400,
		"./ko": 401,
		"./ko.js": 401,
		"./ky": 402,
		"./ky.js": 402,
		"./lb": 403,
		"./lb.js": 403,
		"./lo": 404,
		"./lo.js": 404,
		"./lt": 405,
		"./lt.js": 405,
		"./lv": 406,
		"./lv.js": 406,
		"./me": 407,
		"./me.js": 407,
		"./mi": 408,
		"./mi.js": 408,
		"./mk": 409,
		"./mk.js": 409,
		"./ml": 410,
		"./ml.js": 410,
		"./mr": 411,
		"./mr.js": 411,
		"./ms": 412,
		"./ms-my": 413,
		"./ms-my.js": 413,
		"./ms.js": 412,
		"./mt": 414,
		"./mt.js": 414,
		"./my": 415,
		"./my.js": 415,
		"./nb": 416,
		"./nb.js": 416,
		"./ne": 417,
		"./ne.js": 417,
		"./nl": 418,
		"./nl-be": 419,
		"./nl-be.js": 419,
		"./nl.js": 418,
		"./nn": 420,
		"./nn.js": 420,
		"./pa-in": 421,
		"./pa-in.js": 421,
		"./pl": 422,
		"./pl.js": 422,
		"./pt": 423,
		"./pt-br": 424,
		"./pt-br.js": 424,
		"./pt.js": 423,
		"./ro": 425,
		"./ro.js": 425,
		"./ru": 426,
		"./ru.js": 426,
		"./sd": 427,
		"./sd.js": 427,
		"./se": 428,
		"./se.js": 428,
		"./si": 429,
		"./si.js": 429,
		"./sk": 430,
		"./sk.js": 430,
		"./sl": 431,
		"./sl.js": 431,
		"./sq": 432,
		"./sq.js": 432,
		"./sr": 433,
		"./sr-cyrl": 434,
		"./sr-cyrl.js": 434,
		"./sr.js": 433,
		"./ss": 435,
		"./ss.js": 435,
		"./sv": 436,
		"./sv.js": 436,
		"./sw": 437,
		"./sw.js": 437,
		"./ta": 438,
		"./ta.js": 438,
		"./te": 439,
		"./te.js": 439,
		"./tet": 440,
		"./tet.js": 440,
		"./th": 441,
		"./th.js": 441,
		"./tl-ph": 442,
		"./tl-ph.js": 442,
		"./tlh": 443,
		"./tlh.js": 443,
		"./tr": 444,
		"./tr.js": 444,
		"./tzl": 445,
		"./tzl.js": 445,
		"./tzm": 446,
		"./tzm-latn": 447,
		"./tzm-latn.js": 447,
		"./tzm.js": 446,
		"./uk": 448,
		"./uk.js": 448,
		"./ur": 449,
		"./ur.js": 449,
		"./uz": 450,
		"./uz-latn": 451,
		"./uz-latn.js": 451,
		"./uz.js": 450,
		"./vi": 452,
		"./vi.js": 452,
		"./x-pseudo": 453,
		"./x-pseudo.js": 453,
		"./yo": 454,
		"./yo.js": 454,
		"./zh-cn": 455,
		"./zh-cn.js": 455,
		"./zh-hk": 456,
		"./zh-hk.js": 456,
		"./zh-tw": 457,
		"./zh-tw.js": 457
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 338;


/***/ },
/* 339 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Afrikaans [af]
	//! author : Werner Mollentze : https://github.com/wernerm
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var af = moment.defineLocale('af', {
	        months: 'Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember'.split('_'),
	        monthsShort: 'Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des'.split('_'),
	        weekdays: 'Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag'.split('_'),
	        weekdaysShort: 'Son_Maa_Din_Woe_Don_Vry_Sat'.split('_'),
	        weekdaysMin: 'So_Ma_Di_Wo_Do_Vr_Sa'.split('_'),
	        meridiemParse: /vm|nm/i,
	        isPM: function isPM(input) {
	            return (/^nm$/i.test(input)
	            );
	        },
	        meridiem: function meridiem(hours, minutes, isLower) {
	            if (hours < 12) {
	                return isLower ? 'vm' : 'VM';
	            } else {
	                return isLower ? 'nm' : 'NM';
	            }
	        },
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[Vandag om] LT',
	            nextDay: '[Môre om] LT',
	            nextWeek: 'dddd [om] LT',
	            lastDay: '[Gister om] LT',
	            lastWeek: '[Laas] dddd [om] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'oor %s',
	            past: '%s gelede',
	            s: '\'n paar sekondes',
	            ss: '%d sekondes',
	            m: '\'n minuut',
	            mm: '%d minute',
	            h: '\'n uur',
	            hh: '%d ure',
	            d: '\'n dag',
	            dd: '%d dae',
	            M: '\'n maand',
	            MM: '%d maande',
	            y: '\'n jaar',
	            yy: '%d jaar'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
	        ordinal: function ordinal(number) {
	            return number + (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de'); // Thanks to Joris Röling : https://github.com/jjupiter
	        },
	        week: {
	            dow: 1, // Maandag is die eerste dag van die week.
	            doy: 4 // Die week wat die 4de Januarie bevat is die eerste week van die jaar.
	        }
	    });
	
	    return af;
	});

/***/ },
/* 340 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Arabic [ar]
	//! author : Abdel Said: https://github.com/abdelsaid
	//! author : Ahmed Elkhatib
	//! author : forabi https://github.com/forabi
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var symbolMap = {
	        '1': '١',
	        '2': '٢',
	        '3': '٣',
	        '4': '٤',
	        '5': '٥',
	        '6': '٦',
	        '7': '٧',
	        '8': '٨',
	        '9': '٩',
	        '0': '٠'
	    };
	    var numberMap = {
	        '١': '1',
	        '٢': '2',
	        '٣': '3',
	        '٤': '4',
	        '٥': '5',
	        '٦': '6',
	        '٧': '7',
	        '٨': '8',
	        '٩': '9',
	        '٠': '0'
	    };
	    var pluralForm = function pluralForm(n) {
	        return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
	    };
	    var plurals = {
	        s: ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
	        m: ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
	        h: ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
	        d: ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
	        M: ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
	        y: ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
	    };
	    var pluralize = function pluralize(u) {
	        return function (number, withoutSuffix, string, isFuture) {
	            var f = pluralForm(number),
	                str = plurals[u][pluralForm(number)];
	            if (f === 2) {
	                str = str[withoutSuffix ? 0 : 1];
	            }
	            return str.replace(/%d/i, number);
	        };
	    };
	    var months = ['يناير', 'فبراير', 'مارس', 'أبريل', 'مايو', 'يونيو', 'يوليو', 'أغسطس', 'سبتمبر', 'أكتوبر', 'نوفمبر', 'ديسمبر'];
	
	    var ar = moment.defineLocale('ar', {
	        months: months,
	        monthsShort: months,
	        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'D/\u200FM/\u200FYYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm'
	        },
	        meridiemParse: /ص|م/,
	        isPM: function isPM(input) {
	            return 'م' === input;
	        },
	        meridiem: function meridiem(hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ص';
	            } else {
	                return 'م';
	            }
	        },
	        calendar: {
	            sameDay: '[اليوم عند الساعة] LT',
	            nextDay: '[غدًا عند الساعة] LT',
	            nextWeek: 'dddd [عند الساعة] LT',
	            lastDay: '[أمس عند الساعة] LT',
	            lastWeek: 'dddd [عند الساعة] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'بعد %s',
	            past: 'منذ %s',
	            s: pluralize('s'),
	            ss: pluralize('s'),
	            m: pluralize('m'),
	            mm: pluralize('m'),
	            h: pluralize('h'),
	            hh: pluralize('h'),
	            d: pluralize('d'),
	            dd: pluralize('d'),
	            M: pluralize('M'),
	            MM: pluralize('M'),
	            y: pluralize('y'),
	            yy: pluralize('y')
	        },
	        preparse: function preparse(string) {
	            return string.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
	                return numberMap[match];
	            }).replace(/،/g, ',');
	        },
	        postformat: function postformat(string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            }).replace(/,/g, '،');
	        },
	        week: {
	            dow: 6, // Saturday is the first day of the week.
	            doy: 12 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return ar;
	});

/***/ },
/* 341 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Arabic (Algeria) [ar-dz]
	//! author : Noureddine LOUAHEDJ : https://github.com/noureddineme
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var arDz = moment.defineLocale('ar-dz', {
	        months: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	        monthsShort: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort: 'احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin: 'أح_إث_ثلا_أر_خم_جم_سب'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[اليوم على الساعة] LT',
	            nextDay: '[غدا على الساعة] LT',
	            nextWeek: 'dddd [على الساعة] LT',
	            lastDay: '[أمس على الساعة] LT',
	            lastWeek: 'dddd [على الساعة] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'في %s',
	            past: 'منذ %s',
	            s: 'ثوان',
	            ss: '%d ثانية',
	            m: 'دقيقة',
	            mm: '%d دقائق',
	            h: 'ساعة',
	            hh: '%d ساعات',
	            d: 'يوم',
	            dd: '%d أيام',
	            M: 'شهر',
	            MM: '%d أشهر',
	            y: 'سنة',
	            yy: '%d سنوات'
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 4 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return arDz;
	});

/***/ },
/* 342 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Arabic (Kuwait) [ar-kw]
	//! author : Nusret Parlak: https://github.com/nusretparlak
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var arKw = moment.defineLocale('ar-kw', {
	        months: 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
	        monthsShort: 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
	        weekdays: 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort: 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[اليوم على الساعة] LT',
	            nextDay: '[غدا على الساعة] LT',
	            nextWeek: 'dddd [على الساعة] LT',
	            lastDay: '[أمس على الساعة] LT',
	            lastWeek: 'dddd [على الساعة] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'في %s',
	            past: 'منذ %s',
	            s: 'ثوان',
	            ss: '%d ثانية',
	            m: 'دقيقة',
	            mm: '%d دقائق',
	            h: 'ساعة',
	            hh: '%d ساعات',
	            d: 'يوم',
	            dd: '%d أيام',
	            M: 'شهر',
	            MM: '%d أشهر',
	            y: 'سنة',
	            yy: '%d سنوات'
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 12 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return arKw;
	});

/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Arabic (Lybia) [ar-ly]
	//! author : Ali Hmer: https://github.com/kikoanis
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var symbolMap = {
	        '1': '1',
	        '2': '2',
	        '3': '3',
	        '4': '4',
	        '5': '5',
	        '6': '6',
	        '7': '7',
	        '8': '8',
	        '9': '9',
	        '0': '0'
	    };
	    var pluralForm = function pluralForm(n) {
	        return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
	    };
	    var plurals = {
	        s: ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
	        m: ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
	        h: ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
	        d: ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
	        M: ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
	        y: ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
	    };
	    var pluralize = function pluralize(u) {
	        return function (number, withoutSuffix, string, isFuture) {
	            var f = pluralForm(number),
	                str = plurals[u][pluralForm(number)];
	            if (f === 2) {
	                str = str[withoutSuffix ? 0 : 1];
	            }
	            return str.replace(/%d/i, number);
	        };
	    };
	    var months = ['يناير', 'فبراير', 'مارس', 'أبريل', 'مايو', 'يونيو', 'يوليو', 'أغسطس', 'سبتمبر', 'أكتوبر', 'نوفمبر', 'ديسمبر'];
	
	    var arLy = moment.defineLocale('ar-ly', {
	        months: months,
	        monthsShort: months,
	        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'D/\u200FM/\u200FYYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm'
	        },
	        meridiemParse: /ص|م/,
	        isPM: function isPM(input) {
	            return 'م' === input;
	        },
	        meridiem: function meridiem(hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ص';
	            } else {
	                return 'م';
	            }
	        },
	        calendar: {
	            sameDay: '[اليوم عند الساعة] LT',
	            nextDay: '[غدًا عند الساعة] LT',
	            nextWeek: 'dddd [عند الساعة] LT',
	            lastDay: '[أمس عند الساعة] LT',
	            lastWeek: 'dddd [عند الساعة] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'بعد %s',
	            past: 'منذ %s',
	            s: pluralize('s'),
	            ss: pluralize('s'),
	            m: pluralize('m'),
	            mm: pluralize('m'),
	            h: pluralize('h'),
	            hh: pluralize('h'),
	            d: pluralize('d'),
	            dd: pluralize('d'),
	            M: pluralize('M'),
	            MM: pluralize('M'),
	            y: pluralize('y'),
	            yy: pluralize('y')
	        },
	        preparse: function preparse(string) {
	            return string.replace(/،/g, ',');
	        },
	        postformat: function postformat(string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            }).replace(/,/g, '،');
	        },
	        week: {
	            dow: 6, // Saturday is the first day of the week.
	            doy: 12 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return arLy;
	});

/***/ },
/* 344 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Arabic (Morocco) [ar-ma]
	//! author : ElFadili Yassine : https://github.com/ElFadiliY
	//! author : Abdel Said : https://github.com/abdelsaid
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var arMa = moment.defineLocale('ar-ma', {
	        months: 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
	        monthsShort: 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
	        weekdays: 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort: 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[اليوم على الساعة] LT',
	            nextDay: '[غدا على الساعة] LT',
	            nextWeek: 'dddd [على الساعة] LT',
	            lastDay: '[أمس على الساعة] LT',
	            lastWeek: 'dddd [على الساعة] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'في %s',
	            past: 'منذ %s',
	            s: 'ثوان',
	            ss: '%d ثانية',
	            m: 'دقيقة',
	            mm: '%d دقائق',
	            h: 'ساعة',
	            hh: '%d ساعات',
	            d: 'يوم',
	            dd: '%d أيام',
	            M: 'شهر',
	            MM: '%d أشهر',
	            y: 'سنة',
	            yy: '%d سنوات'
	        },
	        week: {
	            dow: 6, // Saturday is the first day of the week.
	            doy: 12 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return arMa;
	});

/***/ },
/* 345 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Arabic (Saudi Arabia) [ar-sa]
	//! author : Suhail Alkowaileet : https://github.com/xsoh
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var symbolMap = {
	        '1': '١',
	        '2': '٢',
	        '3': '٣',
	        '4': '٤',
	        '5': '٥',
	        '6': '٦',
	        '7': '٧',
	        '8': '٨',
	        '9': '٩',
	        '0': '٠'
	    };
	    var numberMap = {
	        '١': '1',
	        '٢': '2',
	        '٣': '3',
	        '٤': '4',
	        '٥': '5',
	        '٦': '6',
	        '٧': '7',
	        '٨': '8',
	        '٩': '9',
	        '٠': '0'
	    };
	
	    var arSa = moment.defineLocale('ar-sa', {
	        months: 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	        monthsShort: 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm'
	        },
	        meridiemParse: /ص|م/,
	        isPM: function isPM(input) {
	            return 'م' === input;
	        },
	        meridiem: function meridiem(hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ص';
	            } else {
	                return 'م';
	            }
	        },
	        calendar: {
	            sameDay: '[اليوم على الساعة] LT',
	            nextDay: '[غدا على الساعة] LT',
	            nextWeek: 'dddd [على الساعة] LT',
	            lastDay: '[أمس على الساعة] LT',
	            lastWeek: 'dddd [على الساعة] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'في %s',
	            past: 'منذ %s',
	            s: 'ثوان',
	            ss: '%d ثانية',
	            m: 'دقيقة',
	            mm: '%d دقائق',
	            h: 'ساعة',
	            hh: '%d ساعات',
	            d: 'يوم',
	            dd: '%d أيام',
	            M: 'شهر',
	            MM: '%d أشهر',
	            y: 'سنة',
	            yy: '%d سنوات'
	        },
	        preparse: function preparse(string) {
	            return string.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
	                return numberMap[match];
	            }).replace(/،/g, ',');
	        },
	        postformat: function postformat(string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            }).replace(/,/g, '،');
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 6 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return arSa;
	});

/***/ },
/* 346 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale  :  Arabic (Tunisia) [ar-tn]
	//! author : Nader Toukabri : https://github.com/naderio
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var arTn = moment.defineLocale('ar-tn', {
	        months: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	        monthsShort: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[اليوم على الساعة] LT',
	            nextDay: '[غدا على الساعة] LT',
	            nextWeek: 'dddd [على الساعة] LT',
	            lastDay: '[أمس على الساعة] LT',
	            lastWeek: 'dddd [على الساعة] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'في %s',
	            past: 'منذ %s',
	            s: 'ثوان',
	            ss: '%d ثانية',
	            m: 'دقيقة',
	            mm: '%d دقائق',
	            h: 'ساعة',
	            hh: '%d ساعات',
	            d: 'يوم',
	            dd: '%d أيام',
	            M: 'شهر',
	            MM: '%d أشهر',
	            y: 'سنة',
	            yy: '%d سنوات'
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return arTn;
	});

/***/ },
/* 347 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Azerbaijani [az]
	//! author : topchiyev : https://github.com/topchiyev
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var suffixes = {
	        1: '-inci',
	        5: '-inci',
	        8: '-inci',
	        70: '-inci',
	        80: '-inci',
	        2: '-nci',
	        7: '-nci',
	        20: '-nci',
	        50: '-nci',
	        3: '-üncü',
	        4: '-üncü',
	        100: '-üncü',
	        6: '-ncı',
	        9: '-uncu',
	        10: '-uncu',
	        30: '-uncu',
	        60: '-ıncı',
	        90: '-ıncı'
	    };
	
	    var az = moment.defineLocale('az', {
	        months: 'yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr'.split('_'),
	        monthsShort: 'yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek'.split('_'),
	        weekdays: 'Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə'.split('_'),
	        weekdaysShort: 'Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən'.split('_'),
	        weekdaysMin: 'Bz_BE_ÇA_Çə_CA_Cü_Şə'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[bugün saat] LT',
	            nextDay: '[sabah saat] LT',
	            nextWeek: '[gələn həftə] dddd [saat] LT',
	            lastDay: '[dünən] LT',
	            lastWeek: '[keçən həftə] dddd [saat] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: '%s sonra',
	            past: '%s əvvəl',
	            s: 'birneçə saniyyə',
	            ss: '%d saniyə',
	            m: 'bir dəqiqə',
	            mm: '%d dəqiqə',
	            h: 'bir saat',
	            hh: '%d saat',
	            d: 'bir gün',
	            dd: '%d gün',
	            M: 'bir ay',
	            MM: '%d ay',
	            y: 'bir il',
	            yy: '%d il'
	        },
	        meridiemParse: /gecə|səhər|gündüz|axşam/,
	        isPM: function isPM(input) {
	            return (/^(gündüz|axşam)$/.test(input)
	            );
	        },
	        meridiem: function meridiem(hour, minute, isLower) {
	            if (hour < 4) {
	                return 'gecə';
	            } else if (hour < 12) {
	                return 'səhər';
	            } else if (hour < 17) {
	                return 'gündüz';
	            } else {
	                return 'axşam';
	            }
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,
	        ordinal: function ordinal(number) {
	            if (number === 0) {
	                // special case for zero
	                return number + '-ıncı';
	            }
	            var a = number % 10,
	                b = number % 100 - a,
	                c = number >= 100 ? 100 : null;
	            return number + (suffixes[a] || suffixes[b] || suffixes[c]);
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return az;
	});

/***/ },
/* 348 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Belarusian [be]
	//! author : Dmitry Demidov : https://github.com/demidov91
	//! author: Praleska: http://praleska.pro/
	//! Author : Menelion Elensúle : https://github.com/Oire
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    function plural(word, num) {
	        var forms = word.split('_');
	        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2];
	    }
	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        var format = {
	            'ss': withoutSuffix ? 'секунда_секунды_секунд' : 'секунду_секунды_секунд',
	            'mm': withoutSuffix ? 'хвіліна_хвіліны_хвілін' : 'хвіліну_хвіліны_хвілін',
	            'hh': withoutSuffix ? 'гадзіна_гадзіны_гадзін' : 'гадзіну_гадзіны_гадзін',
	            'dd': 'дзень_дні_дзён',
	            'MM': 'месяц_месяцы_месяцаў',
	            'yy': 'год_гады_гадоў'
	        };
	        if (key === 'm') {
	            return withoutSuffix ? 'хвіліна' : 'хвіліну';
	        } else if (key === 'h') {
	            return withoutSuffix ? 'гадзіна' : 'гадзіну';
	        } else {
	            return number + ' ' + plural(format[key], +number);
	        }
	    }
	
	    var be = moment.defineLocale('be', {
	        months: {
	            format: 'студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня'.split('_'),
	            standalone: 'студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань'.split('_')
	        },
	        monthsShort: 'студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж'.split('_'),
	        weekdays: {
	            format: 'нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу'.split('_'),
	            standalone: 'нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота'.split('_'),
	            isFormat: /\[ ?[Вв] ?(?:мінулую|наступную)? ?\] ?dddd/
	        },
	        weekdaysShort: 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
	        weekdaysMin: 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY г.',
	            LLL: 'D MMMM YYYY г., HH:mm',
	            LLLL: 'dddd, D MMMM YYYY г., HH:mm'
	        },
	        calendar: {
	            sameDay: '[Сёння ў] LT',
	            nextDay: '[Заўтра ў] LT',
	            lastDay: '[Учора ў] LT',
	            nextWeek: function nextWeek() {
	                return '[У] dddd [ў] LT';
	            },
	            lastWeek: function lastWeek() {
	                switch (this.day()) {
	                    case 0:
	                    case 3:
	                    case 5:
	                    case 6:
	                        return '[У мінулую] dddd [ў] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                        return '[У мінулы] dddd [ў] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'праз %s',
	            past: '%s таму',
	            s: 'некалькі секунд',
	            m: relativeTimeWithPlural,
	            mm: relativeTimeWithPlural,
	            h: relativeTimeWithPlural,
	            hh: relativeTimeWithPlural,
	            d: 'дзень',
	            dd: relativeTimeWithPlural,
	            M: 'месяц',
	            MM: relativeTimeWithPlural,
	            y: 'год',
	            yy: relativeTimeWithPlural
	        },
	        meridiemParse: /ночы|раніцы|дня|вечара/,
	        isPM: function isPM(input) {
	            return (/^(дня|вечара)$/.test(input)
	            );
	        },
	        meridiem: function meridiem(hour, minute, isLower) {
	            if (hour < 4) {
	                return 'ночы';
	            } else if (hour < 12) {
	                return 'раніцы';
	            } else if (hour < 17) {
	                return 'дня';
	            } else {
	                return 'вечара';
	            }
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}-(і|ы|га)/,
	        ordinal: function ordinal(number, period) {
	            switch (period) {
	                case 'M':
	                case 'd':
	                case 'DDD':
	                case 'w':
	                case 'W':
	                    return (number % 10 === 2 || number % 10 === 3) && number % 100 !== 12 && number % 100 !== 13 ? number + '-і' : number + '-ы';
	                case 'D':
	                    return number + '-га';
	                default:
	                    return number;
	            }
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return be;
	});

/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Bulgarian [bg]
	//! author : Krasen Borisov : https://github.com/kraz
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var bg = moment.defineLocale('bg', {
	        months: 'януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември'.split('_'),
	        monthsShort: 'янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек'.split('_'),
	        weekdays: 'неделя_понеделник_вторник_сряда_четвъртък_петък_събота'.split('_'),
	        weekdaysShort: 'нед_пон_вто_сря_чет_пет_съб'.split('_'),
	        weekdaysMin: 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'D.MM.YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY H:mm',
	            LLLL: 'dddd, D MMMM YYYY H:mm'
	        },
	        calendar: {
	            sameDay: '[Днес в] LT',
	            nextDay: '[Утре в] LT',
	            nextWeek: 'dddd [в] LT',
	            lastDay: '[Вчера в] LT',
	            lastWeek: function lastWeek() {
	                switch (this.day()) {
	                    case 0:
	                    case 3:
	                    case 6:
	                        return '[В изминалата] dddd [в] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[В изминалия] dddd [в] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'след %s',
	            past: 'преди %s',
	            s: 'няколко секунди',
	            ss: '%d секунди',
	            m: 'минута',
	            mm: '%d минути',
	            h: 'час',
	            hh: '%d часа',
	            d: 'ден',
	            dd: '%d дни',
	            M: 'месец',
	            MM: '%d месеца',
	            y: 'година',
	            yy: '%d години'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
	        ordinal: function ordinal(number) {
	            var lastDigit = number % 10,
	                last2Digits = number % 100;
	            if (number === 0) {
	                return number + '-ев';
	            } else if (last2Digits === 0) {
	                return number + '-ен';
	            } else if (last2Digits > 10 && last2Digits < 20) {
	                return number + '-ти';
	            } else if (lastDigit === 1) {
	                return number + '-ви';
	            } else if (lastDigit === 2) {
	                return number + '-ри';
	            } else if (lastDigit === 7 || lastDigit === 8) {
	                return number + '-ми';
	            } else {
	                return number + '-ти';
	            }
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return bg;
	});

/***/ },
/* 350 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Bambara [bm]
	//! author : Estelle Comment : https://github.com/estellecomment
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    // Language contact person : Abdoufata Kane : https://github.com/abdoufata
	
	    var bm = moment.defineLocale('bm', {
	        months: 'Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo'.split('_'),
	        monthsShort: 'Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des'.split('_'),
	        weekdays: 'Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri'.split('_'),
	        weekdaysShort: 'Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib'.split('_'),
	        weekdaysMin: 'Ka_Nt_Ta_Ar_Al_Ju_Si'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'MMMM [tile] D [san] YYYY',
	            LLL: 'MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm',
	            LLLL: 'dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm'
	        },
	        calendar: {
	            sameDay: '[Bi lɛrɛ] LT',
	            nextDay: '[Sini lɛrɛ] LT',
	            nextWeek: 'dddd [don lɛrɛ] LT',
	            lastDay: '[Kunu lɛrɛ] LT',
	            lastWeek: 'dddd [tɛmɛnen lɛrɛ] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: '%s kɔnɔ',
	            past: 'a bɛ %s bɔ',
	            s: 'sanga dama dama',
	            ss: 'sekondi %d',
	            m: 'miniti kelen',
	            mm: 'miniti %d',
	            h: 'lɛrɛ kelen',
	            hh: 'lɛrɛ %d',
	            d: 'tile kelen',
	            dd: 'tile %d',
	            M: 'kalo kelen',
	            MM: 'kalo %d',
	            y: 'san kelen',
	            yy: 'san %d'
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return bm;
	});

/***/ },
/* 351 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Bengali [bn]
	//! author : Kaushik Gandhi : https://github.com/kaushikgandhi
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var symbolMap = {
	        '1': '১',
	        '2': '২',
	        '3': '৩',
	        '4': '৪',
	        '5': '৫',
	        '6': '৬',
	        '7': '৭',
	        '8': '৮',
	        '9': '৯',
	        '0': '০'
	    };
	    var numberMap = {
	        '১': '1',
	        '২': '2',
	        '৩': '3',
	        '৪': '4',
	        '৫': '5',
	        '৬': '6',
	        '৭': '7',
	        '৮': '8',
	        '৯': '9',
	        '০': '0'
	    };
	
	    var bn = moment.defineLocale('bn', {
	        months: 'জানুয়ারী_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split('_'),
	        monthsShort: 'জানু_ফেব_মার্চ_এপ্র_মে_জুন_জুল_আগ_সেপ্ট_অক্টো_নভে_ডিসে'.split('_'),
	        weekdays: 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার'.split('_'),
	        weekdaysShort: 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি'.split('_'),
	        weekdaysMin: 'রবি_সোম_মঙ্গ_বুধ_বৃহঃ_শুক্র_শনি'.split('_'),
	        longDateFormat: {
	            LT: 'A h:mm সময়',
	            LTS: 'A h:mm:ss সময়',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY, A h:mm সময়',
	            LLLL: 'dddd, D MMMM YYYY, A h:mm সময়'
	        },
	        calendar: {
	            sameDay: '[আজ] LT',
	            nextDay: '[আগামীকাল] LT',
	            nextWeek: 'dddd, LT',
	            lastDay: '[গতকাল] LT',
	            lastWeek: '[গত] dddd, LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: '%s পরে',
	            past: '%s আগে',
	            s: 'কয়েক সেকেন্ড',
	            ss: '%d সেকেন্ড',
	            m: 'এক মিনিট',
	            mm: '%d মিনিট',
	            h: 'এক ঘন্টা',
	            hh: '%d ঘন্টা',
	            d: 'এক দিন',
	            dd: '%d দিন',
	            M: 'এক মাস',
	            MM: '%d মাস',
	            y: 'এক বছর',
	            yy: '%d বছর'
	        },
	        preparse: function preparse(string) {
	            return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function postformat(string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiemParse: /রাত|সকাল|দুপুর|বিকাল|রাত/,
	        meridiemHour: function meridiemHour(hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'রাত' && hour >= 4 || meridiem === 'দুপুর' && hour < 5 || meridiem === 'বিকাল') {
	                return hour + 12;
	            } else {
	                return hour;
	            }
	        },
	        meridiem: function meridiem(hour, minute, isLower) {
	            if (hour < 4) {
	                return 'রাত';
	            } else if (hour < 10) {
	                return 'সকাল';
	            } else if (hour < 17) {
	                return 'দুপুর';
	            } else if (hour < 20) {
	                return 'বিকাল';
	            } else {
	                return 'রাত';
	            }
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 6 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return bn;
	});

/***/ },
/* 352 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Tibetan [bo]
	//! author : Thupten N. Chakrishar : https://github.com/vajradog
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var symbolMap = {
	        '1': '༡',
	        '2': '༢',
	        '3': '༣',
	        '4': '༤',
	        '5': '༥',
	        '6': '༦',
	        '7': '༧',
	        '8': '༨',
	        '9': '༩',
	        '0': '༠'
	    };
	    var numberMap = {
	        '༡': '1',
	        '༢': '2',
	        '༣': '3',
	        '༤': '4',
	        '༥': '5',
	        '༦': '6',
	        '༧': '7',
	        '༨': '8',
	        '༩': '9',
	        '༠': '0'
	    };
	
	    var bo = moment.defineLocale('bo', {
	        months: 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
	        monthsShort: 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
	        weekdays: 'གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་'.split('_'),
	        weekdaysShort: 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
	        weekdaysMin: 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
	        longDateFormat: {
	            LT: 'A h:mm',
	            LTS: 'A h:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY, A h:mm',
	            LLLL: 'dddd, D MMMM YYYY, A h:mm'
	        },
	        calendar: {
	            sameDay: '[དི་རིང] LT',
	            nextDay: '[སང་ཉིན] LT',
	            nextWeek: '[བདུན་ཕྲག་རྗེས་མ], LT',
	            lastDay: '[ཁ་སང] LT',
	            lastWeek: '[བདུན་ཕྲག་མཐའ་མ] dddd, LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: '%s ལ་',
	            past: '%s སྔན་ལ',
	            s: 'ལམ་སང',
	            ss: '%d སྐར་ཆ།',
	            m: 'སྐར་མ་གཅིག',
	            mm: '%d སྐར་མ',
	            h: 'ཆུ་ཚོད་གཅིག',
	            hh: '%d ཆུ་ཚོད',
	            d: 'ཉིན་གཅིག',
	            dd: '%d ཉིན་',
	            M: 'ཟླ་བ་གཅིག',
	            MM: '%d ཟླ་བ',
	            y: 'ལོ་གཅིག',
	            yy: '%d ལོ'
	        },
	        preparse: function preparse(string) {
	            return string.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function postformat(string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiemParse: /མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,
	        meridiemHour: function meridiemHour(hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'མཚན་མོ' && hour >= 4 || meridiem === 'ཉིན་གུང' && hour < 5 || meridiem === 'དགོང་དག') {
	                return hour + 12;
	            } else {
	                return hour;
	            }
	        },
	        meridiem: function meridiem(hour, minute, isLower) {
	            if (hour < 4) {
	                return 'མཚན་མོ';
	            } else if (hour < 10) {
	                return 'ཞོགས་ཀས';
	            } else if (hour < 17) {
	                return 'ཉིན་གུང';
	            } else if (hour < 20) {
	                return 'དགོང་དག';
	            } else {
	                return 'མཚན་མོ';
	            }
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 6 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return bo;
	});

/***/ },
/* 353 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Breton [br]
	//! author : Jean-Baptiste Le Duigou : https://github.com/jbleduigou
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    function relativeTimeWithMutation(number, withoutSuffix, key) {
	        var format = {
	            'mm': 'munutenn',
	            'MM': 'miz',
	            'dd': 'devezh'
	        };
	        return number + ' ' + mutation(format[key], number);
	    }
	    function specialMutationForYears(number) {
	        switch (lastNumber(number)) {
	            case 1:
	            case 3:
	            case 4:
	            case 5:
	            case 9:
	                return number + ' bloaz';
	            default:
	                return number + ' vloaz';
	        }
	    }
	    function lastNumber(number) {
	        if (number > 9) {
	            return lastNumber(number % 10);
	        }
	        return number;
	    }
	    function mutation(text, number) {
	        if (number === 2) {
	            return softMutation(text);
	        }
	        return text;
	    }
	    function softMutation(text) {
	        var mutationTable = {
	            'm': 'v',
	            'b': 'v',
	            'd': 'z'
	        };
	        if (mutationTable[text.charAt(0)] === undefined) {
	            return text;
	        }
	        return mutationTable[text.charAt(0)] + text.substring(1);
	    }
	
	    var br = moment.defineLocale('br', {
	        months: 'Genver_C\'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu'.split('_'),
	        monthsShort: 'Gen_C\'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker'.split('_'),
	        weekdays: 'Sul_Lun_Meurzh_Merc\'her_Yaou_Gwener_Sadorn'.split('_'),
	        weekdaysShort: 'Sul_Lun_Meu_Mer_Yao_Gwe_Sad'.split('_'),
	        weekdaysMin: 'Su_Lu_Me_Mer_Ya_Gw_Sa'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'h[e]mm A',
	            LTS: 'h[e]mm:ss A',
	            L: 'DD/MM/YYYY',
	            LL: 'D [a viz] MMMM YYYY',
	            LLL: 'D [a viz] MMMM YYYY h[e]mm A',
	            LLLL: 'dddd, D [a viz] MMMM YYYY h[e]mm A'
	        },
	        calendar: {
	            sameDay: '[Hiziv da] LT',
	            nextDay: '[Warc\'hoazh da] LT',
	            nextWeek: 'dddd [da] LT',
	            lastDay: '[Dec\'h da] LT',
	            lastWeek: 'dddd [paset da] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'a-benn %s',
	            past: '%s \'zo',
	            s: 'un nebeud segondennoù',
	            ss: '%d eilenn',
	            m: 'ur vunutenn',
	            mm: relativeTimeWithMutation,
	            h: 'un eur',
	            hh: '%d eur',
	            d: 'un devezh',
	            dd: relativeTimeWithMutation,
	            M: 'ur miz',
	            MM: relativeTimeWithMutation,
	            y: 'ur bloaz',
	            yy: specialMutationForYears
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(añ|vet)/,
	        ordinal: function ordinal(number) {
	            var output = number === 1 ? 'añ' : 'vet';
	            return number + output;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return br;
	});

/***/ },
/* 354 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Bosnian [bs]
	//! author : Nedim Cholich : https://github.com/frontyard
	//! based on (hr) translation by Bojan Marković
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    function translate(number, withoutSuffix, key) {
	        var result = number + ' ';
	        switch (key) {
	            case 'ss':
	                if (number === 1) {
	                    result += 'sekunda';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'sekunde';
	                } else {
	                    result += 'sekundi';
	                }
	                return result;
	            case 'm':
	                return withoutSuffix ? 'jedna minuta' : 'jedne minute';
	            case 'mm':
	                if (number === 1) {
	                    result += 'minuta';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'minute';
	                } else {
	                    result += 'minuta';
	                }
	                return result;
	            case 'h':
	                return withoutSuffix ? 'jedan sat' : 'jednog sata';
	            case 'hh':
	                if (number === 1) {
	                    result += 'sat';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'sata';
	                } else {
	                    result += 'sati';
	                }
	                return result;
	            case 'dd':
	                if (number === 1) {
	                    result += 'dan';
	                } else {
	                    result += 'dana';
	                }
	                return result;
	            case 'MM':
	                if (number === 1) {
	                    result += 'mjesec';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'mjeseca';
	                } else {
	                    result += 'mjeseci';
	                }
	                return result;
	            case 'yy':
	                if (number === 1) {
	                    result += 'godina';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'godine';
	                } else {
	                    result += 'godina';
	                }
	                return result;
	        }
	    }
	
	    var bs = moment.defineLocale('bs', {
	        months: 'januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar'.split('_'),
	        monthsShort: 'jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
	        weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
	        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm',
	            LLLL: 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar: {
	            sameDay: '[danas u] LT',
	            nextDay: '[sutra u] LT',
	            nextWeek: function nextWeek() {
	                switch (this.day()) {
	                    case 0:
	                        return '[u] [nedjelju] [u] LT';
	                    case 3:
	                        return '[u] [srijedu] [u] LT';
	                    case 6:
	                        return '[u] [subotu] [u] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[u] dddd [u] LT';
	                }
	            },
	            lastDay: '[jučer u] LT',
	            lastWeek: function lastWeek() {
	                switch (this.day()) {
	                    case 0:
	                    case 3:
	                        return '[prošlu] dddd [u] LT';
	                    case 6:
	                        return '[prošle] [subote] [u] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[prošli] dddd [u] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'za %s',
	            past: 'prije %s',
	            s: 'par sekundi',
	            ss: translate,
	            m: translate,
	            mm: translate,
	            h: translate,
	            hh: translate,
	            d: 'dan',
	            dd: translate,
	            M: 'mjesec',
	            MM: translate,
	            y: 'godinu',
	            yy: translate
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return bs;
	});

/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Catalan [ca]
	//! author : Juan G. Hurtado : https://github.com/juanghurtado
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var ca = moment.defineLocale('ca', {
	        months: {
	            standalone: 'gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split('_'),
	            format: 'de gener_de febrer_de març_d\'abril_de maig_de juny_de juliol_d\'agost_de setembre_d\'octubre_de novembre_de desembre'.split('_'),
	            isFormat: /D[oD]?(\s)+MMMM/
	        },
	        monthsShort: 'gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split('_'),
	        weekdaysShort: 'dg._dl._dt._dc._dj._dv._ds.'.split('_'),
	        weekdaysMin: 'dg_dl_dt_dc_dj_dv_ds'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM [de] YYYY',
	            ll: 'D MMM YYYY',
	            LLL: 'D MMMM [de] YYYY [a les] H:mm',
	            lll: 'D MMM YYYY, H:mm',
	            LLLL: 'dddd D MMMM [de] YYYY [a les] H:mm',
	            llll: 'ddd D MMM YYYY, H:mm'
	        },
	        calendar: {
	            sameDay: function sameDay() {
	                return '[avui a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
	            },
	            nextDay: function nextDay() {
	                return '[demà a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
	            },
	            nextWeek: function nextWeek() {
	                return 'dddd [a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
	            },
	            lastDay: function lastDay() {
	                return '[ahir a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
	            },
	            lastWeek: function lastWeek() {
	                return '[el] dddd [passat a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
	            },
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'd\'aquí %s',
	            past: 'fa %s',
	            s: 'uns segons',
	            ss: '%d segons',
	            m: 'un minut',
	            mm: '%d minuts',
	            h: 'una hora',
	            hh: '%d hores',
	            d: 'un dia',
	            dd: '%d dies',
	            M: 'un mes',
	            MM: '%d mesos',
	            y: 'un any',
	            yy: '%d anys'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(r|n|t|è|a)/,
	        ordinal: function ordinal(number, period) {
	            var output = number === 1 ? 'r' : number === 2 ? 'n' : number === 3 ? 'r' : number === 4 ? 't' : 'è';
	            if (period === 'w' || period === 'W') {
	                output = 'a';
	            }
	            return number + output;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return ca;
	});

/***/ },
/* 356 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Czech [cs]
	//! author : petrbela : https://github.com/petrbela
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var months = 'leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec'.split('_');
	    var monthsShort = 'led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro'.split('_');
	    function plural(n) {
	        return n > 1 && n < 5 && ~~(n / 10) !== 1;
	    }
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        switch (key) {
	            case 's':
	                // a few seconds / in a few seconds / a few seconds ago
	                return withoutSuffix || isFuture ? 'pár sekund' : 'pár sekundami';
	            case 'ss':
	                // 9 seconds / in 9 seconds / 9 seconds ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'sekundy' : 'sekund');
	                } else {
	                    return result + 'sekundami';
	                }
	                break;
	            case 'm':
	                // a minute / in a minute / a minute ago
	                return withoutSuffix ? 'minuta' : isFuture ? 'minutu' : 'minutou';
	            case 'mm':
	                // 9 minutes / in 9 minutes / 9 minutes ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'minuty' : 'minut');
	                } else {
	                    return result + 'minutami';
	                }
	                break;
	            case 'h':
	                // an hour / in an hour / an hour ago
	                return withoutSuffix ? 'hodina' : isFuture ? 'hodinu' : 'hodinou';
	            case 'hh':
	                // 9 hours / in 9 hours / 9 hours ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'hodiny' : 'hodin');
	                } else {
	                    return result + 'hodinami';
	                }
	                break;
	            case 'd':
	                // a day / in a day / a day ago
	                return withoutSuffix || isFuture ? 'den' : 'dnem';
	            case 'dd':
	                // 9 days / in 9 days / 9 days ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'dny' : 'dní');
	                } else {
	                    return result + 'dny';
	                }
	                break;
	            case 'M':
	                // a month / in a month / a month ago
	                return withoutSuffix || isFuture ? 'měsíc' : 'měsícem';
	            case 'MM':
	                // 9 months / in 9 months / 9 months ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'měsíce' : 'měsíců');
	                } else {
	                    return result + 'měsíci';
	                }
	                break;
	            case 'y':
	                // a year / in a year / a year ago
	                return withoutSuffix || isFuture ? 'rok' : 'rokem';
	            case 'yy':
	                // 9 years / in 9 years / 9 years ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'roky' : 'let');
	                } else {
	                    return result + 'lety';
	                }
	                break;
	        }
	    }
	
	    var cs = moment.defineLocale('cs', {
	        months: months,
	        monthsShort: monthsShort,
	        monthsParse: function (months, monthsShort) {
	            var i,
	                _monthsParse = [];
	            for (i = 0; i < 12; i++) {
	                // use custom parser to solve problem with July (červenec)
	                _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');
	            }
	            return _monthsParse;
	        }(months, monthsShort),
	        shortMonthsParse: function (monthsShort) {
	            var i,
	                _shortMonthsParse = [];
	            for (i = 0; i < 12; i++) {
	                _shortMonthsParse[i] = new RegExp('^' + monthsShort[i] + '$', 'i');
	            }
	            return _shortMonthsParse;
	        }(monthsShort),
	        longMonthsParse: function (months) {
	            var i,
	                _longMonthsParse = [];
	            for (i = 0; i < 12; i++) {
	                _longMonthsParse[i] = new RegExp('^' + months[i] + '$', 'i');
	            }
	            return _longMonthsParse;
	        }(months),
	        weekdays: 'neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota'.split('_'),
	        weekdaysShort: 'ne_po_út_st_čt_pá_so'.split('_'),
	        weekdaysMin: 'ne_po_út_st_čt_pá_so'.split('_'),
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm',
	            LLLL: 'dddd D. MMMM YYYY H:mm',
	            l: 'D. M. YYYY'
	        },
	        calendar: {
	            sameDay: '[dnes v] LT',
	            nextDay: '[zítra v] LT',
	            nextWeek: function nextWeek() {
	                switch (this.day()) {
	                    case 0:
	                        return '[v neděli v] LT';
	                    case 1:
	                    case 2:
	                        return '[v] dddd [v] LT';
	                    case 3:
	                        return '[ve středu v] LT';
	                    case 4:
	                        return '[ve čtvrtek v] LT';
	                    case 5:
	                        return '[v pátek v] LT';
	                    case 6:
	                        return '[v sobotu v] LT';
	                }
	            },
	            lastDay: '[včera v] LT',
	            lastWeek: function lastWeek() {
	                switch (this.day()) {
	                    case 0:
	                        return '[minulou neděli v] LT';
	                    case 1:
	                    case 2:
	                        return '[minulé] dddd [v] LT';
	                    case 3:
	                        return '[minulou středu v] LT';
	                    case 4:
	                    case 5:
	                        return '[minulý] dddd [v] LT';
	                    case 6:
	                        return '[minulou sobotu v] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'za %s',
	            past: 'před %s',
	            s: translate,
	            ss: translate,
	            m: translate,
	            mm: translate,
	            h: translate,
	            hh: translate,
	            d: translate,
	            dd: translate,
	            M: translate,
	            MM: translate,
	            y: translate,
	            yy: translate
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return cs;
	});

/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Chuvash [cv]
	//! author : Anatoly Mironov : https://github.com/mirontoli
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var cv = moment.defineLocale('cv', {
	        months: 'кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав'.split('_'),
	        monthsShort: 'кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш'.split('_'),
	        weekdays: 'вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун'.split('_'),
	        weekdaysShort: 'выр_тун_ытл_юн_кӗҫ_эрн_шӑм'.split('_'),
	        weekdaysMin: 'вр_тн_ыт_юн_кҫ_эр_шм'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD-MM-YYYY',
	            LL: 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]',
	            LLL: 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm',
	            LLLL: 'dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm'
	        },
	        calendar: {
	            sameDay: '[Паян] LT [сехетре]',
	            nextDay: '[Ыран] LT [сехетре]',
	            lastDay: '[Ӗнер] LT [сехетре]',
	            nextWeek: '[Ҫитес] dddd LT [сехетре]',
	            lastWeek: '[Иртнӗ] dddd LT [сехетре]',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: function future(output) {
	                var affix = /сехет$/i.exec(output) ? 'рен' : /ҫул$/i.exec(output) ? 'тан' : 'ран';
	                return output + affix;
	            },
	            past: '%s каялла',
	            s: 'пӗр-ик ҫеккунт',
	            ss: '%d ҫеккунт',
	            m: 'пӗр минут',
	            mm: '%d минут',
	            h: 'пӗр сехет',
	            hh: '%d сехет',
	            d: 'пӗр кун',
	            dd: '%d кун',
	            M: 'пӗр уйӑх',
	            MM: '%d уйӑх',
	            y: 'пӗр ҫул',
	            yy: '%d ҫул'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}-мӗш/,
	        ordinal: '%d-мӗш',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return cv;
	});

/***/ },
/* 358 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Welsh [cy]
	//! author : Robert Allen : https://github.com/robgallen
	//! author : https://github.com/ryangreaves
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var cy = moment.defineLocale('cy', {
	        months: 'Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr'.split('_'),
	        monthsShort: 'Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag'.split('_'),
	        weekdays: 'Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn'.split('_'),
	        weekdaysShort: 'Sul_Llun_Maw_Mer_Iau_Gwe_Sad'.split('_'),
	        weekdaysMin: 'Su_Ll_Ma_Me_Ia_Gw_Sa'.split('_'),
	        weekdaysParseExact: true,
	        // time formats are the same as en-gb
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[Heddiw am] LT',
	            nextDay: '[Yfory am] LT',
	            nextWeek: 'dddd [am] LT',
	            lastDay: '[Ddoe am] LT',
	            lastWeek: 'dddd [diwethaf am] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'mewn %s',
	            past: '%s yn ôl',
	            s: 'ychydig eiliadau',
	            ss: '%d eiliad',
	            m: 'munud',
	            mm: '%d munud',
	            h: 'awr',
	            hh: '%d awr',
	            d: 'diwrnod',
	            dd: '%d diwrnod',
	            M: 'mis',
	            MM: '%d mis',
	            y: 'blwyddyn',
	            yy: '%d flynedd'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,
	        // traditional ordinal numbers above 31 are not commonly used in colloquial Welsh
	        ordinal: function ordinal(number) {
	            var b = number,
	                output = '',
	                lookup = ['', 'af', 'il', 'ydd', 'ydd', 'ed', 'ed', 'ed', 'fed', 'fed', 'fed', // 1af to 10fed
	            'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'fed' // 11eg to 20fed
	            ];
	            if (b > 20) {
	                if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {
	                    output = 'fed'; // not 30ain, 70ain or 90ain
	                } else {
	                    output = 'ain';
	                }
	            } else if (b > 0) {
	                output = lookup[b];
	            }
	            return number + output;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return cy;
	});

/***/ },
/* 359 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Danish [da]
	//! author : Ulrik Nielsen : https://github.com/mrbase
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var da = moment.defineLocale('da', {
	        months: 'januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december'.split('_'),
	        monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
	        weekdays: 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
	        weekdaysShort: 'søn_man_tir_ons_tor_fre_lør'.split('_'),
	        weekdaysMin: 'sø_ma_ti_on_to_fr_lø'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY HH:mm',
	            LLLL: 'dddd [d.] D. MMMM YYYY [kl.] HH:mm'
	        },
	        calendar: {
	            sameDay: '[i dag kl.] LT',
	            nextDay: '[i morgen kl.] LT',
	            nextWeek: 'på dddd [kl.] LT',
	            lastDay: '[i går kl.] LT',
	            lastWeek: '[i] dddd[s kl.] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'om %s',
	            past: '%s siden',
	            s: 'få sekunder',
	            ss: '%d sekunder',
	            m: 'et minut',
	            mm: '%d minutter',
	            h: 'en time',
	            hh: '%d timer',
	            d: 'en dag',
	            dd: '%d dage',
	            M: 'en måned',
	            MM: '%d måneder',
	            y: 'et år',
	            yy: '%d år'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return da;
	});

/***/ },
/* 360 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : German [de]
	//! author : lluchs : https://github.com/lluchs
	//! author: Menelion Elensúle: https://github.com/Oire
	//! author : Mikolaj Dadela : https://github.com/mik01aj
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            'm': ['eine Minute', 'einer Minute'],
	            'h': ['eine Stunde', 'einer Stunde'],
	            'd': ['ein Tag', 'einem Tag'],
	            'dd': [number + ' Tage', number + ' Tagen'],
	            'M': ['ein Monat', 'einem Monat'],
	            'MM': [number + ' Monate', number + ' Monaten'],
	            'y': ['ein Jahr', 'einem Jahr'],
	            'yy': [number + ' Jahre', number + ' Jahren']
	        };
	        return withoutSuffix ? format[key][0] : format[key][1];
	    }
	
	    var de = moment.defineLocale('de', {
	        months: 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
	        monthsShort: 'Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
	        weekdaysShort: 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
	        weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY HH:mm',
	            LLLL: 'dddd, D. MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[heute um] LT [Uhr]',
	            sameElse: 'L',
	            nextDay: '[morgen um] LT [Uhr]',
	            nextWeek: 'dddd [um] LT [Uhr]',
	            lastDay: '[gestern um] LT [Uhr]',
	            lastWeek: '[letzten] dddd [um] LT [Uhr]'
	        },
	        relativeTime: {
	            future: 'in %s',
	            past: 'vor %s',
	            s: 'ein paar Sekunden',
	            ss: '%d Sekunden',
	            m: processRelativeTime,
	            mm: '%d Minuten',
	            h: processRelativeTime,
	            hh: '%d Stunden',
	            d: processRelativeTime,
	            dd: processRelativeTime,
	            M: processRelativeTime,
	            MM: processRelativeTime,
	            y: processRelativeTime,
	            yy: processRelativeTime
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return de;
	});

/***/ },
/* 361 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : German (Austria) [de-at]
	//! author : lluchs : https://github.com/lluchs
	//! author: Menelion Elensúle: https://github.com/Oire
	//! author : Martin Groller : https://github.com/MadMG
	//! author : Mikolaj Dadela : https://github.com/mik01aj
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            'm': ['eine Minute', 'einer Minute'],
	            'h': ['eine Stunde', 'einer Stunde'],
	            'd': ['ein Tag', 'einem Tag'],
	            'dd': [number + ' Tage', number + ' Tagen'],
	            'M': ['ein Monat', 'einem Monat'],
	            'MM': [number + ' Monate', number + ' Monaten'],
	            'y': ['ein Jahr', 'einem Jahr'],
	            'yy': [number + ' Jahre', number + ' Jahren']
	        };
	        return withoutSuffix ? format[key][0] : format[key][1];
	    }
	
	    var deAt = moment.defineLocale('de-at', {
	        months: 'Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
	        monthsShort: 'Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
	        weekdaysShort: 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
	        weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY HH:mm',
	            LLLL: 'dddd, D. MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[heute um] LT [Uhr]',
	            sameElse: 'L',
	            nextDay: '[morgen um] LT [Uhr]',
	            nextWeek: 'dddd [um] LT [Uhr]',
	            lastDay: '[gestern um] LT [Uhr]',
	            lastWeek: '[letzten] dddd [um] LT [Uhr]'
	        },
	        relativeTime: {
	            future: 'in %s',
	            past: 'vor %s',
	            s: 'ein paar Sekunden',
	            ss: '%d Sekunden',
	            m: processRelativeTime,
	            mm: '%d Minuten',
	            h: processRelativeTime,
	            hh: '%d Stunden',
	            d: processRelativeTime,
	            dd: processRelativeTime,
	            M: processRelativeTime,
	            MM: processRelativeTime,
	            y: processRelativeTime,
	            yy: processRelativeTime
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return deAt;
	});

/***/ },
/* 362 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : German (Switzerland) [de-ch]
	//! author : sschueller : https://github.com/sschueller
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    // based on: https://www.bk.admin.ch/dokumentation/sprachen/04915/05016/index.html?lang=de#
	
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            'm': ['eine Minute', 'einer Minute'],
	            'h': ['eine Stunde', 'einer Stunde'],
	            'd': ['ein Tag', 'einem Tag'],
	            'dd': [number + ' Tage', number + ' Tagen'],
	            'M': ['ein Monat', 'einem Monat'],
	            'MM': [number + ' Monate', number + ' Monaten'],
	            'y': ['ein Jahr', 'einem Jahr'],
	            'yy': [number + ' Jahre', number + ' Jahren']
	        };
	        return withoutSuffix ? format[key][0] : format[key][1];
	    }
	
	    var deCh = moment.defineLocale('de-ch', {
	        months: 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
	        monthsShort: 'Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
	        weekdaysShort: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
	        weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY HH:mm',
	            LLLL: 'dddd, D. MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[heute um] LT [Uhr]',
	            sameElse: 'L',
	            nextDay: '[morgen um] LT [Uhr]',
	            nextWeek: 'dddd [um] LT [Uhr]',
	            lastDay: '[gestern um] LT [Uhr]',
	            lastWeek: '[letzten] dddd [um] LT [Uhr]'
	        },
	        relativeTime: {
	            future: 'in %s',
	            past: 'vor %s',
	            s: 'ein paar Sekunden',
	            ss: '%d Sekunden',
	            m: processRelativeTime,
	            mm: '%d Minuten',
	            h: processRelativeTime,
	            hh: '%d Stunden',
	            d: processRelativeTime,
	            dd: processRelativeTime,
	            M: processRelativeTime,
	            MM: processRelativeTime,
	            y: processRelativeTime,
	            yy: processRelativeTime
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return deCh;
	});

/***/ },
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Maldivian [dv]
	//! author : Jawish Hameed : https://github.com/jawish
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var months = ['ޖެނުއަރީ', 'ފެބްރުއަރީ', 'މާރިޗު', 'އޭޕްރީލު', 'މޭ', 'ޖޫން', 'ޖުލައި', 'އޯގަސްޓު', 'ސެޕްޓެމްބަރު', 'އޮކްޓޯބަރު', 'ނޮވެމްބަރު', 'ޑިސެމްބަރު'];
	    var weekdays = ['އާދިއްތަ', 'ހޯމަ', 'އަންގާރަ', 'ބުދަ', 'ބުރާސްފަތި', 'ހުކުރު', 'ހޮނިހިރު'];
	
	    var dv = moment.defineLocale('dv', {
	        months: months,
	        monthsShort: months,
	        weekdays: weekdays,
	        weekdaysShort: weekdays,
	        weekdaysMin: 'އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި'.split('_'),
	        longDateFormat: {
	
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'D/M/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm'
	        },
	        meridiemParse: /މކ|މފ/,
	        isPM: function isPM(input) {
	            return 'މފ' === input;
	        },
	        meridiem: function meridiem(hour, minute, isLower) {
	            if (hour < 12) {
	                return 'މކ';
	            } else {
	                return 'މފ';
	            }
	        },
	        calendar: {
	            sameDay: '[މިއަދު] LT',
	            nextDay: '[މާދަމާ] LT',
	            nextWeek: 'dddd LT',
	            lastDay: '[އިއްޔެ] LT',
	            lastWeek: '[ފާއިތުވި] dddd LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'ތެރޭގައި %s',
	            past: 'ކުރިން %s',
	            s: 'ސިކުންތުކޮޅެއް',
	            ss: 'd% ސިކުންތު',
	            m: 'މިނިޓެއް',
	            mm: 'މިނިޓު %d',
	            h: 'ގަޑިއިރެއް',
	            hh: 'ގަޑިއިރު %d',
	            d: 'ދުވަހެއް',
	            dd: 'ދުވަސް %d',
	            M: 'މަހެއް',
	            MM: 'މަސް %d',
	            y: 'އަހަރެއް',
	            yy: 'އަހަރު %d'
	        },
	        preparse: function preparse(string) {
	            return string.replace(/،/g, ',');
	        },
	        postformat: function postformat(string) {
	            return string.replace(/,/g, '،');
	        },
	        week: {
	            dow: 7, // Sunday is the first day of the week.
	            doy: 12 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return dv;
	});

/***/ },
/* 364 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Greek [el]
	//! author : Aggelos Karalias : https://github.com/mehiel
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    function isFunction(input) {
	        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
	    }
	
	    var el = moment.defineLocale('el', {
	        monthsNominativeEl: 'Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος'.split('_'),
	        monthsGenitiveEl: 'Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου'.split('_'),
	        months: function months(momentToFormat, format) {
	            if (!momentToFormat) {
	                return this._monthsNominativeEl;
	            } else if (typeof format === 'string' && /D/.test(format.substring(0, format.indexOf('MMMM')))) {
	                // if there is a day number before 'MMMM'
	                return this._monthsGenitiveEl[momentToFormat.month()];
	            } else {
	                return this._monthsNominativeEl[momentToFormat.month()];
	            }
	        },
	        monthsShort: 'Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ'.split('_'),
	        weekdays: 'Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο'.split('_'),
	        weekdaysShort: 'Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ'.split('_'),
	        weekdaysMin: 'Κυ_Δε_Τρ_Τε_Πε_Πα_Σα'.split('_'),
	        meridiem: function meridiem(hours, minutes, isLower) {
	            if (hours > 11) {
	                return isLower ? 'μμ' : 'ΜΜ';
	            } else {
	                return isLower ? 'πμ' : 'ΠΜ';
	            }
	        },
	        isPM: function isPM(input) {
	            return (input + '').toLowerCase()[0] === 'μ';
	        },
	        meridiemParse: /[ΠΜ]\.?Μ?\.?/i,
	        longDateFormat: {
	            LT: 'h:mm A',
	            LTS: 'h:mm:ss A',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY h:mm A',
	            LLLL: 'dddd, D MMMM YYYY h:mm A'
	        },
	        calendarEl: {
	            sameDay: '[Σήμερα {}] LT',
	            nextDay: '[Αύριο {}] LT',
	            nextWeek: 'dddd [{}] LT',
	            lastDay: '[Χθες {}] LT',
	            lastWeek: function lastWeek() {
	                switch (this.day()) {
	                    case 6:
	                        return '[το προηγούμενο] dddd [{}] LT';
	                    default:
	                        return '[την προηγούμενη] dddd [{}] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        calendar: function calendar(key, mom) {
	            var output = this._calendarEl[key],
	                hours = mom && mom.hours();
	            if (isFunction(output)) {
	                output = output.apply(mom);
	            }
	            return output.replace('{}', hours % 12 === 1 ? 'στη' : 'στις');
	        },
	        relativeTime: {
	            future: 'σε %s',
	            past: '%s πριν',
	            s: 'λίγα δευτερόλεπτα',
	            ss: '%d δευτερόλεπτα',
	            m: 'ένα λεπτό',
	            mm: '%d λεπτά',
	            h: 'μία ώρα',
	            hh: '%d ώρες',
	            d: 'μία μέρα',
	            dd: '%d μέρες',
	            M: 'ένας μήνας',
	            MM: '%d μήνες',
	            y: 'ένας χρόνος',
	            yy: '%d χρόνια'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}η/,
	        ordinal: '%dη',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4st is the first week of the year.
	        }
	    });
	
	    return el;
	});

/***/ },
/* 365 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : English (Australia) [en-au]
	//! author : Jared Morse : https://github.com/jarcoal
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var enAu = moment.defineLocale('en-au', {
	        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat: {
	            LT: 'h:mm A',
	            LTS: 'h:mm:ss A',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY h:mm A',
	            LLLL: 'dddd, D MMMM YYYY h:mm A'
	        },
	        calendar: {
	            sameDay: '[Today at] LT',
	            nextDay: '[Tomorrow at] LT',
	            nextWeek: 'dddd [at] LT',
	            lastDay: '[Yesterday at] LT',
	            lastWeek: '[Last] dddd [at] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'in %s',
	            past: '%s ago',
	            s: 'a few seconds',
	            ss: '%d seconds',
	            m: 'a minute',
	            mm: '%d minutes',
	            h: 'an hour',
	            hh: '%d hours',
	            d: 'a day',
	            dd: '%d days',
	            M: 'a month',
	            MM: '%d months',
	            y: 'a year',
	            yy: '%d years'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal: function ordinal(number) {
	            var b = number % 10,
	                output = ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
	            return number + output;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return enAu;
	});

/***/ },
/* 366 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : English (Canada) [en-ca]
	//! author : Jonathan Abourbih : https://github.com/jonbca
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var enCa = moment.defineLocale('en-ca', {
	        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat: {
	            LT: 'h:mm A',
	            LTS: 'h:mm:ss A',
	            L: 'YYYY-MM-DD',
	            LL: 'MMMM D, YYYY',
	            LLL: 'MMMM D, YYYY h:mm A',
	            LLLL: 'dddd, MMMM D, YYYY h:mm A'
	        },
	        calendar: {
	            sameDay: '[Today at] LT',
	            nextDay: '[Tomorrow at] LT',
	            nextWeek: 'dddd [at] LT',
	            lastDay: '[Yesterday at] LT',
	            lastWeek: '[Last] dddd [at] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'in %s',
	            past: '%s ago',
	            s: 'a few seconds',
	            ss: '%d seconds',
	            m: 'a minute',
	            mm: '%d minutes',
	            h: 'an hour',
	            hh: '%d hours',
	            d: 'a day',
	            dd: '%d days',
	            M: 'a month',
	            MM: '%d months',
	            y: 'a year',
	            yy: '%d years'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal: function ordinal(number) {
	            var b = number % 10,
	                output = ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
	            return number + output;
	        }
	    });
	
	    return enCa;
	});

/***/ },
/* 367 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : English (United Kingdom) [en-gb]
	//! author : Chris Gedrim : https://github.com/chrisgedrim
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var enGb = moment.defineLocale('en-gb', {
	        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[Today at] LT',
	            nextDay: '[Tomorrow at] LT',
	            nextWeek: 'dddd [at] LT',
	            lastDay: '[Yesterday at] LT',
	            lastWeek: '[Last] dddd [at] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'in %s',
	            past: '%s ago',
	            s: 'a few seconds',
	            ss: '%d seconds',
	            m: 'a minute',
	            mm: '%d minutes',
	            h: 'an hour',
	            hh: '%d hours',
	            d: 'a day',
	            dd: '%d days',
	            M: 'a month',
	            MM: '%d months',
	            y: 'a year',
	            yy: '%d years'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal: function ordinal(number) {
	            var b = number % 10,
	                output = ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
	            return number + output;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return enGb;
	});

/***/ },
/* 368 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : English (Ireland) [en-ie]
	//! author : Chris Cartlidge : https://github.com/chriscartlidge
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var enIe = moment.defineLocale('en-ie', {
	        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD-MM-YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[Today at] LT',
	            nextDay: '[Tomorrow at] LT',
	            nextWeek: 'dddd [at] LT',
	            lastDay: '[Yesterday at] LT',
	            lastWeek: '[Last] dddd [at] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'in %s',
	            past: '%s ago',
	            s: 'a few seconds',
	            ss: '%d seconds',
	            m: 'a minute',
	            mm: '%d minutes',
	            h: 'an hour',
	            hh: '%d hours',
	            d: 'a day',
	            dd: '%d days',
	            M: 'a month',
	            MM: '%d months',
	            y: 'a year',
	            yy: '%d years'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal: function ordinal(number) {
	            var b = number % 10,
	                output = ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
	            return number + output;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return enIe;
	});

/***/ },
/* 369 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : English (New Zealand) [en-nz]
	//! author : Luke McGregor : https://github.com/lukemcgregor
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var enNz = moment.defineLocale('en-nz', {
	        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat: {
	            LT: 'h:mm A',
	            LTS: 'h:mm:ss A',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY h:mm A',
	            LLLL: 'dddd, D MMMM YYYY h:mm A'
	        },
	        calendar: {
	            sameDay: '[Today at] LT',
	            nextDay: '[Tomorrow at] LT',
	            nextWeek: 'dddd [at] LT',
	            lastDay: '[Yesterday at] LT',
	            lastWeek: '[Last] dddd [at] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'in %s',
	            past: '%s ago',
	            s: 'a few seconds',
	            ss: '%d seconds',
	            m: 'a minute',
	            mm: '%d minutes',
	            h: 'an hour',
	            hh: '%d hours',
	            d: 'a day',
	            dd: '%d days',
	            M: 'a month',
	            MM: '%d months',
	            y: 'a year',
	            yy: '%d years'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal: function ordinal(number) {
	            var b = number % 10,
	                output = ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
	            return number + output;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return enNz;
	});

/***/ },
/* 370 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Esperanto [eo]
	//! author : Colin Dean : https://github.com/colindean
	//! author : Mia Nordentoft Imperatori : https://github.com/miestasmia
	//! comment : miestasmia corrected the translation by colindean
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var eo = moment.defineLocale('eo', {
	        months: 'januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro'.split('_'),
	        monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec'.split('_'),
	        weekdays: 'dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato'.split('_'),
	        weekdaysShort: 'dim_lun_mard_merk_ĵaŭ_ven_sab'.split('_'),
	        weekdaysMin: 'di_lu_ma_me_ĵa_ve_sa'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'YYYY-MM-DD',
	            LL: 'D[-a de] MMMM, YYYY',
	            LLL: 'D[-a de] MMMM, YYYY HH:mm',
	            LLLL: 'dddd, [la] D[-a de] MMMM, YYYY HH:mm'
	        },
	        meridiemParse: /[ap]\.t\.m/i,
	        isPM: function isPM(input) {
	            return input.charAt(0).toLowerCase() === 'p';
	        },
	        meridiem: function meridiem(hours, minutes, isLower) {
	            if (hours > 11) {
	                return isLower ? 'p.t.m.' : 'P.T.M.';
	            } else {
	                return isLower ? 'a.t.m.' : 'A.T.M.';
	            }
	        },
	        calendar: {
	            sameDay: '[Hodiaŭ je] LT',
	            nextDay: '[Morgaŭ je] LT',
	            nextWeek: 'dddd [je] LT',
	            lastDay: '[Hieraŭ je] LT',
	            lastWeek: '[pasinta] dddd [je] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'post %s',
	            past: 'antaŭ %s',
	            s: 'sekundoj',
	            ss: '%d sekundoj',
	            m: 'minuto',
	            mm: '%d minutoj',
	            h: 'horo',
	            hh: '%d horoj',
	            d: 'tago', //ne 'diurno', ĉar estas uzita por proksimumo
	            dd: '%d tagoj',
	            M: 'monato',
	            MM: '%d monatoj',
	            y: 'jaro',
	            yy: '%d jaroj'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}a/,
	        ordinal: '%da',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return eo;
	});

/***/ },
/* 371 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Spanish [es]
	//! author : Julio Napurí : https://github.com/julionc
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_');
	    var _monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');
	
	    var monthsParse = [/^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i];
	    var monthsRegex = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;
	
	    var es = moment.defineLocale('es', {
	        months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
	        monthsShort: function monthsShort(m, format) {
	            if (!m) {
	                return monthsShortDot;
	            } else if (/-MMM-/.test(format)) {
	                return _monthsShort[m.month()];
	            } else {
	                return monthsShortDot[m.month()];
	            }
	        },
	        monthsRegex: monthsRegex,
	        monthsShortRegex: monthsRegex,
	        monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
	        monthsShortStrictRegex: /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
	        monthsParse: monthsParse,
	        longMonthsParse: monthsParse,
	        shortMonthsParse: monthsParse,
	        weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
	        weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
	        weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D [de] MMMM [de] YYYY',
	            LLL: 'D [de] MMMM [de] YYYY H:mm',
	            LLLL: 'dddd, D [de] MMMM [de] YYYY H:mm'
	        },
	        calendar: {
	            sameDay: function sameDay() {
	                return '[hoy a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            nextDay: function nextDay() {
	                return '[mañana a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            nextWeek: function nextWeek() {
	                return 'dddd [a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            lastDay: function lastDay() {
	                return '[ayer a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            lastWeek: function lastWeek() {
	                return '[el] dddd [pasado a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'en %s',
	            past: 'hace %s',
	            s: 'unos segundos',
	            ss: '%d segundos',
	            m: 'un minuto',
	            mm: '%d minutos',
	            h: 'una hora',
	            hh: '%d horas',
	            d: 'un día',
	            dd: '%d días',
	            M: 'un mes',
	            MM: '%d meses',
	            y: 'un año',
	            yy: '%d años'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}º/,
	        ordinal: '%dº',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return es;
	});

/***/ },
/* 372 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Spanish (Dominican Republic) [es-do]
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_');
	    var _monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');
	
	    var monthsParse = [/^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i];
	    var monthsRegex = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;
	
	    var esDo = moment.defineLocale('es-do', {
	        months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
	        monthsShort: function monthsShort(m, format) {
	            if (!m) {
	                return monthsShortDot;
	            } else if (/-MMM-/.test(format)) {
	                return _monthsShort[m.month()];
	            } else {
	                return monthsShortDot[m.month()];
	            }
	        },
	        monthsRegex: monthsRegex,
	        monthsShortRegex: monthsRegex,
	        monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
	        monthsShortStrictRegex: /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
	        monthsParse: monthsParse,
	        longMonthsParse: monthsParse,
	        shortMonthsParse: monthsParse,
	        weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
	        weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
	        weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'h:mm A',
	            LTS: 'h:mm:ss A',
	            L: 'DD/MM/YYYY',
	            LL: 'D [de] MMMM [de] YYYY',
	            LLL: 'D [de] MMMM [de] YYYY h:mm A',
	            LLLL: 'dddd, D [de] MMMM [de] YYYY h:mm A'
	        },
	        calendar: {
	            sameDay: function sameDay() {
	                return '[hoy a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            nextDay: function nextDay() {
	                return '[mañana a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            nextWeek: function nextWeek() {
	                return 'dddd [a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            lastDay: function lastDay() {
	                return '[ayer a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            lastWeek: function lastWeek() {
	                return '[el] dddd [pasado a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'en %s',
	            past: 'hace %s',
	            s: 'unos segundos',
	            ss: '%d segundos',
	            m: 'un minuto',
	            mm: '%d minutos',
	            h: 'una hora',
	            hh: '%d horas',
	            d: 'un día',
	            dd: '%d días',
	            M: 'un mes',
	            MM: '%d meses',
	            y: 'un año',
	            yy: '%d años'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}º/,
	        ordinal: '%dº',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return esDo;
	});

/***/ },
/* 373 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Spanish (United States) [es-us]
	//! author : bustta : https://github.com/bustta
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_');
	    var _monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');
	
	    var esUs = moment.defineLocale('es-us', {
	        months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
	        monthsShort: function monthsShort(m, format) {
	            if (!m) {
	                return monthsShortDot;
	            } else if (/-MMM-/.test(format)) {
	                return _monthsShort[m.month()];
	            } else {
	                return monthsShortDot[m.month()];
	            }
	        },
	        monthsParseExact: true,
	        weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
	        weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
	        weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'h:mm A',
	            LTS: 'h:mm:ss A',
	            L: 'MM/DD/YYYY',
	            LL: 'MMMM [de] D [de] YYYY',
	            LLL: 'MMMM [de] D [de] YYYY h:mm A',
	            LLLL: 'dddd, MMMM [de] D [de] YYYY h:mm A'
	        },
	        calendar: {
	            sameDay: function sameDay() {
	                return '[hoy a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            nextDay: function nextDay() {
	                return '[mañana a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            nextWeek: function nextWeek() {
	                return 'dddd [a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            lastDay: function lastDay() {
	                return '[ayer a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            lastWeek: function lastWeek() {
	                return '[el] dddd [pasado a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'en %s',
	            past: 'hace %s',
	            s: 'unos segundos',
	            ss: '%d segundos',
	            m: 'un minuto',
	            mm: '%d minutos',
	            h: 'una hora',
	            hh: '%d horas',
	            d: 'un día',
	            dd: '%d días',
	            M: 'un mes',
	            MM: '%d meses',
	            y: 'un año',
	            yy: '%d años'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}º/,
	        ordinal: '%dº',
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 6 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return esUs;
	});

/***/ },
/* 374 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Estonian [et]
	//! author : Henry Kehlmann : https://github.com/madhenry
	//! improvements : Illimar Tambek : https://github.com/ragulka
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            's': ['mõne sekundi', 'mõni sekund', 'paar sekundit'],
	            'ss': [number + 'sekundi', number + 'sekundit'],
	            'm': ['ühe minuti', 'üks minut'],
	            'mm': [number + ' minuti', number + ' minutit'],
	            'h': ['ühe tunni', 'tund aega', 'üks tund'],
	            'hh': [number + ' tunni', number + ' tundi'],
	            'd': ['ühe päeva', 'üks päev'],
	            'M': ['kuu aja', 'kuu aega', 'üks kuu'],
	            'MM': [number + ' kuu', number + ' kuud'],
	            'y': ['ühe aasta', 'aasta', 'üks aasta'],
	            'yy': [number + ' aasta', number + ' aastat']
	        };
	        if (withoutSuffix) {
	            return format[key][2] ? format[key][2] : format[key][1];
	        }
	        return isFuture ? format[key][0] : format[key][1];
	    }
	
	    var et = moment.defineLocale('et', {
	        months: 'jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember'.split('_'),
	        monthsShort: 'jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets'.split('_'),
	        weekdays: 'pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev'.split('_'),
	        weekdaysShort: 'P_E_T_K_N_R_L'.split('_'),
	        weekdaysMin: 'P_E_T_K_N_R_L'.split('_'),
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm',
	            LLLL: 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar: {
	            sameDay: '[Täna,] LT',
	            nextDay: '[Homme,] LT',
	            nextWeek: '[Järgmine] dddd LT',
	            lastDay: '[Eile,] LT',
	            lastWeek: '[Eelmine] dddd LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: '%s pärast',
	            past: '%s tagasi',
	            s: processRelativeTime,
	            ss: processRelativeTime,
	            m: processRelativeTime,
	            mm: processRelativeTime,
	            h: processRelativeTime,
	            hh: processRelativeTime,
	            d: processRelativeTime,
	            dd: '%d päeva',
	            M: processRelativeTime,
	            MM: processRelativeTime,
	            y: processRelativeTime,
	            yy: processRelativeTime
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return et;
	});

/***/ },
/* 375 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Basque [eu]
	//! author : Eneko Illarramendi : https://github.com/eillarra
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var eu = moment.defineLocale('eu', {
	        months: 'urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua'.split('_'),
	        monthsShort: 'urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata'.split('_'),
	        weekdaysShort: 'ig._al._ar._az._og._ol._lr.'.split('_'),
	        weekdaysMin: 'ig_al_ar_az_og_ol_lr'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'YYYY-MM-DD',
	            LL: 'YYYY[ko] MMMM[ren] D[a]',
	            LLL: 'YYYY[ko] MMMM[ren] D[a] HH:mm',
	            LLLL: 'dddd, YYYY[ko] MMMM[ren] D[a] HH:mm',
	            l: 'YYYY-M-D',
	            ll: 'YYYY[ko] MMM D[a]',
	            lll: 'YYYY[ko] MMM D[a] HH:mm',
	            llll: 'ddd, YYYY[ko] MMM D[a] HH:mm'
	        },
	        calendar: {
	            sameDay: '[gaur] LT[etan]',
	            nextDay: '[bihar] LT[etan]',
	            nextWeek: 'dddd LT[etan]',
	            lastDay: '[atzo] LT[etan]',
	            lastWeek: '[aurreko] dddd LT[etan]',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: '%s barru',
	            past: 'duela %s',
	            s: 'segundo batzuk',
	            ss: '%d segundo',
	            m: 'minutu bat',
	            mm: '%d minutu',
	            h: 'ordu bat',
	            hh: '%d ordu',
	            d: 'egun bat',
	            dd: '%d egun',
	            M: 'hilabete bat',
	            MM: '%d hilabete',
	            y: 'urte bat',
	            yy: '%d urte'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return eu;
	});

/***/ },
/* 376 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Persian [fa]
	//! author : Ebrahim Byagowi : https://github.com/ebraminio
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var symbolMap = {
	        '1': '۱',
	        '2': '۲',
	        '3': '۳',
	        '4': '۴',
	        '5': '۵',
	        '6': '۶',
	        '7': '۷',
	        '8': '۸',
	        '9': '۹',
	        '0': '۰'
	    };
	    var numberMap = {
	        '۱': '1',
	        '۲': '2',
	        '۳': '3',
	        '۴': '4',
	        '۵': '5',
	        '۶': '6',
	        '۷': '7',
	        '۸': '8',
	        '۹': '9',
	        '۰': '0'
	    };
	
	    var fa = moment.defineLocale('fa', {
	        months: 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
	        monthsShort: 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
	        weekdays: '\u06CC\u06A9\u200C\u0634\u0646\u0628\u0647_\u062F\u0648\u0634\u0646\u0628\u0647_\u0633\u0647\u200C\u0634\u0646\u0628\u0647_\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647_\u067E\u0646\u062C\u200C\u0634\u0646\u0628\u0647_\u062C\u0645\u0639\u0647_\u0634\u0646\u0628\u0647'.split('_'),
	        weekdaysShort: '\u06CC\u06A9\u200C\u0634\u0646\u0628\u0647_\u062F\u0648\u0634\u0646\u0628\u0647_\u0633\u0647\u200C\u0634\u0646\u0628\u0647_\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647_\u067E\u0646\u062C\u200C\u0634\u0646\u0628\u0647_\u062C\u0645\u0639\u0647_\u0634\u0646\u0628\u0647'.split('_'),
	        weekdaysMin: 'ی_د_س_چ_پ_ج_ش'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm'
	        },
	        meridiemParse: /قبل از ظهر|بعد از ظهر/,
	        isPM: function isPM(input) {
	            return (/بعد از ظهر/.test(input)
	            );
	        },
	        meridiem: function meridiem(hour, minute, isLower) {
	            if (hour < 12) {
	                return 'قبل از ظهر';
	            } else {
	                return 'بعد از ظهر';
	            }
	        },
	        calendar: {
	            sameDay: '[امروز ساعت] LT',
	            nextDay: '[فردا ساعت] LT',
	            nextWeek: 'dddd [ساعت] LT',
	            lastDay: '[دیروز ساعت] LT',
	            lastWeek: 'dddd [پیش] [ساعت] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'در %s',
	            past: '%s پیش',
	            s: 'چند ثانیه',
	            ss: 'ثانیه d%',
	            m: 'یک دقیقه',
	            mm: '%d دقیقه',
	            h: 'یک ساعت',
	            hh: '%d ساعت',
	            d: 'یک روز',
	            dd: '%d روز',
	            M: 'یک ماه',
	            MM: '%d ماه',
	            y: 'یک سال',
	            yy: '%d سال'
	        },
	        preparse: function preparse(string) {
	            return string.replace(/[۰-۹]/g, function (match) {
	                return numberMap[match];
	            }).replace(/،/g, ',');
	        },
	        postformat: function postformat(string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            }).replace(/,/g, '،');
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}م/,
	        ordinal: '%dم',
	        week: {
	            dow: 6, // Saturday is the first day of the week.
	            doy: 12 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return fa;
	});

/***/ },
/* 377 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Finnish [fi]
	//! author : Tarmo Aidantausta : https://github.com/bleadof
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var numbersPast = 'nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän'.split(' ');
	    var numbersFuture = ['nolla', 'yhden', 'kahden', 'kolmen', 'neljän', 'viiden', 'kuuden', numbersPast[7], numbersPast[8], numbersPast[9]];
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = '';
	        switch (key) {
	            case 's':
	                return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';
	            case 'ss':
	                return isFuture ? 'sekunnin' : 'sekuntia';
	            case 'm':
	                return isFuture ? 'minuutin' : 'minuutti';
	            case 'mm':
	                result = isFuture ? 'minuutin' : 'minuuttia';
	                break;
	            case 'h':
	                return isFuture ? 'tunnin' : 'tunti';
	            case 'hh':
	                result = isFuture ? 'tunnin' : 'tuntia';
	                break;
	            case 'd':
	                return isFuture ? 'päivän' : 'päivä';
	            case 'dd':
	                result = isFuture ? 'päivän' : 'päivää';
	                break;
	            case 'M':
	                return isFuture ? 'kuukauden' : 'kuukausi';
	            case 'MM':
	                result = isFuture ? 'kuukauden' : 'kuukautta';
	                break;
	            case 'y':
	                return isFuture ? 'vuoden' : 'vuosi';
	            case 'yy':
	                result = isFuture ? 'vuoden' : 'vuotta';
	                break;
	        }
	        result = verbalNumber(number, isFuture) + ' ' + result;
	        return result;
	    }
	    function verbalNumber(number, isFuture) {
	        return number < 10 ? isFuture ? numbersFuture[number] : numbersPast[number] : number;
	    }
	
	    var fi = moment.defineLocale('fi', {
	        months: 'tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu'.split('_'),
	        monthsShort: 'tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu'.split('_'),
	        weekdays: 'sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai'.split('_'),
	        weekdaysShort: 'su_ma_ti_ke_to_pe_la'.split('_'),
	        weekdaysMin: 'su_ma_ti_ke_to_pe_la'.split('_'),
	        longDateFormat: {
	            LT: 'HH.mm',
	            LTS: 'HH.mm.ss',
	            L: 'DD.MM.YYYY',
	            LL: 'Do MMMM[ta] YYYY',
	            LLL: 'Do MMMM[ta] YYYY, [klo] HH.mm',
	            LLLL: 'dddd, Do MMMM[ta] YYYY, [klo] HH.mm',
	            l: 'D.M.YYYY',
	            ll: 'Do MMM YYYY',
	            lll: 'Do MMM YYYY, [klo] HH.mm',
	            llll: 'ddd, Do MMM YYYY, [klo] HH.mm'
	        },
	        calendar: {
	            sameDay: '[tänään] [klo] LT',
	            nextDay: '[huomenna] [klo] LT',
	            nextWeek: 'dddd [klo] LT',
	            lastDay: '[eilen] [klo] LT',
	            lastWeek: '[viime] dddd[na] [klo] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: '%s päästä',
	            past: '%s sitten',
	            s: translate,
	            ss: translate,
	            m: translate,
	            mm: translate,
	            h: translate,
	            hh: translate,
	            d: translate,
	            dd: translate,
	            M: translate,
	            MM: translate,
	            y: translate,
	            yy: translate
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return fi;
	});

/***/ },
/* 378 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Faroese [fo]
	//! author : Ragnar Johannesen : https://github.com/ragnar123
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var fo = moment.defineLocale('fo', {
	        months: 'januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
	        monthsShort: 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
	        weekdays: 'sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur'.split('_'),
	        weekdaysShort: 'sun_mán_týs_mik_hós_frí_ley'.split('_'),
	        weekdaysMin: 'su_má_tý_mi_hó_fr_le'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D. MMMM, YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[Í dag kl.] LT',
	            nextDay: '[Í morgin kl.] LT',
	            nextWeek: 'dddd [kl.] LT',
	            lastDay: '[Í gjár kl.] LT',
	            lastWeek: '[síðstu] dddd [kl] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'um %s',
	            past: '%s síðani',
	            s: 'fá sekund',
	            ss: '%d sekundir',
	            m: 'ein minutt',
	            mm: '%d minuttir',
	            h: 'ein tími',
	            hh: '%d tímar',
	            d: 'ein dagur',
	            dd: '%d dagar',
	            M: 'ein mánaði',
	            MM: '%d mánaðir',
	            y: 'eitt ár',
	            yy: '%d ár'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return fo;
	});

/***/ },
/* 379 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : French [fr]
	//! author : John Fischer : https://github.com/jfroffice
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var fr = moment.defineLocale('fr', {
	        months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
	        monthsShort: 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
	        weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
	        weekdaysMin: 'di_lu_ma_me_je_ve_sa'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[Aujourd’hui à] LT',
	            nextDay: '[Demain à] LT',
	            nextWeek: 'dddd [à] LT',
	            lastDay: '[Hier à] LT',
	            lastWeek: 'dddd [dernier à] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'dans %s',
	            past: 'il y a %s',
	            s: 'quelques secondes',
	            ss: '%d secondes',
	            m: 'une minute',
	            mm: '%d minutes',
	            h: 'une heure',
	            hh: '%d heures',
	            d: 'un jour',
	            dd: '%d jours',
	            M: 'un mois',
	            MM: '%d mois',
	            y: 'un an',
	            yy: '%d ans'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(er|)/,
	        ordinal: function ordinal(number, period) {
	            switch (period) {
	                // TODO: Return 'e' when day of month > 1. Move this case inside
	                // block for masculine words below.
	                // See https://github.com/moment/moment/issues/3375
	                case 'D':
	                    return number + (number === 1 ? 'er' : '');
	
	                // Words with masculine grammatical gender: mois, trimestre, jour
	                default:
	                case 'M':
	                case 'Q':
	                case 'DDD':
	                case 'd':
	                    return number + (number === 1 ? 'er' : 'e');
	
	                // Words with feminine grammatical gender: semaine
	                case 'w':
	                case 'W':
	                    return number + (number === 1 ? 're' : 'e');
	            }
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return fr;
	});

/***/ },
/* 380 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : French (Canada) [fr-ca]
	//! author : Jonathan Abourbih : https://github.com/jonbca
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var frCa = moment.defineLocale('fr-ca', {
	        months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
	        monthsShort: 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
	        weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
	        weekdaysMin: 'di_lu_ma_me_je_ve_sa'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'YYYY-MM-DD',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[Aujourd’hui à] LT',
	            nextDay: '[Demain à] LT',
	            nextWeek: 'dddd [à] LT',
	            lastDay: '[Hier à] LT',
	            lastWeek: 'dddd [dernier à] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'dans %s',
	            past: 'il y a %s',
	            s: 'quelques secondes',
	            ss: '%d secondes',
	            m: 'une minute',
	            mm: '%d minutes',
	            h: 'une heure',
	            hh: '%d heures',
	            d: 'un jour',
	            dd: '%d jours',
	            M: 'un mois',
	            MM: '%d mois',
	            y: 'un an',
	            yy: '%d ans'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
	        ordinal: function ordinal(number, period) {
	            switch (period) {
	                // Words with masculine grammatical gender: mois, trimestre, jour
	                default:
	                case 'M':
	                case 'Q':
	                case 'D':
	                case 'DDD':
	                case 'd':
	                    return number + (number === 1 ? 'er' : 'e');
	
	                // Words with feminine grammatical gender: semaine
	                case 'w':
	                case 'W':
	                    return number + (number === 1 ? 're' : 'e');
	            }
	        }
	    });
	
	    return frCa;
	});

/***/ },
/* 381 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : French (Switzerland) [fr-ch]
	//! author : Gaspard Bucher : https://github.com/gaspard
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var frCh = moment.defineLocale('fr-ch', {
	        months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
	        monthsShort: 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
	        weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
	        weekdaysMin: 'di_lu_ma_me_je_ve_sa'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[Aujourd’hui à] LT',
	            nextDay: '[Demain à] LT',
	            nextWeek: 'dddd [à] LT',
	            lastDay: '[Hier à] LT',
	            lastWeek: 'dddd [dernier à] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'dans %s',
	            past: 'il y a %s',
	            s: 'quelques secondes',
	            ss: '%d secondes',
	            m: 'une minute',
	            mm: '%d minutes',
	            h: 'une heure',
	            hh: '%d heures',
	            d: 'un jour',
	            dd: '%d jours',
	            M: 'un mois',
	            MM: '%d mois',
	            y: 'un an',
	            yy: '%d ans'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
	        ordinal: function ordinal(number, period) {
	            switch (period) {
	                // Words with masculine grammatical gender: mois, trimestre, jour
	                default:
	                case 'M':
	                case 'Q':
	                case 'D':
	                case 'DDD':
	                case 'd':
	                    return number + (number === 1 ? 'er' : 'e');
	
	                // Words with feminine grammatical gender: semaine
	                case 'w':
	                case 'W':
	                    return number + (number === 1 ? 're' : 'e');
	            }
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return frCh;
	});

/***/ },
/* 382 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Frisian [fy]
	//! author : Robin van der Vliet : https://github.com/robin0van0der0v
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var monthsShortWithDots = 'jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.'.split('_');
	    var monthsShortWithoutDots = 'jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_');
	
	    var fy = moment.defineLocale('fy', {
	        months: 'jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber'.split('_'),
	        monthsShort: function monthsShort(m, format) {
	            if (!m) {
	                return monthsShortWithDots;
	            } else if (/-MMM-/.test(format)) {
	                return monthsShortWithoutDots[m.month()];
	            } else {
	                return monthsShortWithDots[m.month()];
	            }
	        },
	        monthsParseExact: true,
	        weekdays: 'snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon'.split('_'),
	        weekdaysShort: 'si._mo._ti._wo._to._fr._so.'.split('_'),
	        weekdaysMin: 'Si_Mo_Ti_Wo_To_Fr_So'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD-MM-YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[hjoed om] LT',
	            nextDay: '[moarn om] LT',
	            nextWeek: 'dddd [om] LT',
	            lastDay: '[juster om] LT',
	            lastWeek: '[ôfrûne] dddd [om] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'oer %s',
	            past: '%s lyn',
	            s: 'in pear sekonden',
	            ss: '%d sekonden',
	            m: 'ien minút',
	            mm: '%d minuten',
	            h: 'ien oere',
	            hh: '%d oeren',
	            d: 'ien dei',
	            dd: '%d dagen',
	            M: 'ien moanne',
	            MM: '%d moannen',
	            y: 'ien jier',
	            yy: '%d jierren'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
	        ordinal: function ordinal(number) {
	            return number + (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de');
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return fy;
	});

/***/ },
/* 383 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Scottish Gaelic [gd]
	//! author : Jon Ashdown : https://github.com/jonashdown
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var months = ['Am Faoilleach', 'An Gearran', 'Am Màrt', 'An Giblean', 'An Cèitean', 'An t-Ògmhios', 'An t-Iuchar', 'An Lùnastal', 'An t-Sultain', 'An Dàmhair', 'An t-Samhain', 'An Dùbhlachd'];
	
	    var monthsShort = ['Faoi', 'Gear', 'Màrt', 'Gibl', 'Cèit', 'Ògmh', 'Iuch', 'Lùn', 'Sult', 'Dàmh', 'Samh', 'Dùbh'];
	
	    var weekdays = ['Didòmhnaich', 'Diluain', 'Dimàirt', 'Diciadain', 'Diardaoin', 'Dihaoine', 'Disathairne'];
	
	    var weekdaysShort = ['Did', 'Dil', 'Dim', 'Dic', 'Dia', 'Dih', 'Dis'];
	
	    var weekdaysMin = ['Dò', 'Lu', 'Mà', 'Ci', 'Ar', 'Ha', 'Sa'];
	
	    var gd = moment.defineLocale('gd', {
	        months: months,
	        monthsShort: monthsShort,
	        monthsParseExact: true,
	        weekdays: weekdays,
	        weekdaysShort: weekdaysShort,
	        weekdaysMin: weekdaysMin,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[An-diugh aig] LT',
	            nextDay: '[A-màireach aig] LT',
	            nextWeek: 'dddd [aig] LT',
	            lastDay: '[An-dè aig] LT',
	            lastWeek: 'dddd [seo chaidh] [aig] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'ann an %s',
	            past: 'bho chionn %s',
	            s: 'beagan diogan',
	            ss: '%d diogan',
	            m: 'mionaid',
	            mm: '%d mionaidean',
	            h: 'uair',
	            hh: '%d uairean',
	            d: 'latha',
	            dd: '%d latha',
	            M: 'mìos',
	            MM: '%d mìosan',
	            y: 'bliadhna',
	            yy: '%d bliadhna'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(d|na|mh)/,
	        ordinal: function ordinal(number) {
	            var output = number === 1 ? 'd' : number % 10 === 2 ? 'na' : 'mh';
	            return number + output;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return gd;
	});

/***/ },
/* 384 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Galician [gl]
	//! author : Juan G. Hurtado : https://github.com/juanghurtado
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var gl = moment.defineLocale('gl', {
	        months: 'xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro'.split('_'),
	        monthsShort: 'xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'domingo_luns_martes_mércores_xoves_venres_sábado'.split('_'),
	        weekdaysShort: 'dom._lun._mar._mér._xov._ven._sáb.'.split('_'),
	        weekdaysMin: 'do_lu_ma_mé_xo_ve_sá'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D [de] MMMM [de] YYYY',
	            LLL: 'D [de] MMMM [de] YYYY H:mm',
	            LLLL: 'dddd, D [de] MMMM [de] YYYY H:mm'
	        },
	        calendar: {
	            sameDay: function sameDay() {
	                return '[hoxe ' + (this.hours() !== 1 ? 'ás' : 'á') + '] LT';
	            },
	            nextDay: function nextDay() {
	                return '[mañá ' + (this.hours() !== 1 ? 'ás' : 'á') + '] LT';
	            },
	            nextWeek: function nextWeek() {
	                return 'dddd [' + (this.hours() !== 1 ? 'ás' : 'a') + '] LT';
	            },
	            lastDay: function lastDay() {
	                return '[onte ' + (this.hours() !== 1 ? 'á' : 'a') + '] LT';
	            },
	            lastWeek: function lastWeek() {
	                return '[o] dddd [pasado ' + (this.hours() !== 1 ? 'ás' : 'a') + '] LT';
	            },
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: function future(str) {
	                if (str.indexOf('un') === 0) {
	                    return 'n' + str;
	                }
	                return 'en ' + str;
	            },
	            past: 'hai %s',
	            s: 'uns segundos',
	            ss: '%d segundos',
	            m: 'un minuto',
	            mm: '%d minutos',
	            h: 'unha hora',
	            hh: '%d horas',
	            d: 'un día',
	            dd: '%d días',
	            M: 'un mes',
	            MM: '%d meses',
	            y: 'un ano',
	            yy: '%d anos'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}º/,
	        ordinal: '%dº',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return gl;
	});

/***/ },
/* 385 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Konkani Latin script [gom-latn]
	//! author : The Discoverer : https://github.com/WikiDiscoverer
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            's': ['thodde secondanim', 'thodde second'],
	            'ss': [number + ' secondanim', number + ' second'],
	            'm': ['eka mintan', 'ek minute'],
	            'mm': [number + ' mintanim', number + ' mintam'],
	            'h': ['eka horan', 'ek hor'],
	            'hh': [number + ' horanim', number + ' hor'],
	            'd': ['eka disan', 'ek dis'],
	            'dd': [number + ' disanim', number + ' dis'],
	            'M': ['eka mhoinean', 'ek mhoino'],
	            'MM': [number + ' mhoineanim', number + ' mhoine'],
	            'y': ['eka vorsan', 'ek voros'],
	            'yy': [number + ' vorsanim', number + ' vorsam']
	        };
	        return withoutSuffix ? format[key][0] : format[key][1];
	    }
	
	    var gomLatn = moment.defineLocale('gom-latn', {
	        months: 'Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr'.split('_'),
	        monthsShort: 'Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'Aitar_Somar_Mongllar_Budvar_Brestar_Sukrar_Son\'var'.split('_'),
	        weekdaysShort: 'Ait._Som._Mon._Bud._Bre._Suk._Son.'.split('_'),
	        weekdaysMin: 'Ai_Sm_Mo_Bu_Br_Su_Sn'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'A h:mm [vazta]',
	            LTS: 'A h:mm:ss [vazta]',
	            L: 'DD-MM-YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY A h:mm [vazta]',
	            LLLL: 'dddd, MMMM[achea] Do, YYYY, A h:mm [vazta]',
	            llll: 'ddd, D MMM YYYY, A h:mm [vazta]'
	        },
	        calendar: {
	            sameDay: '[Aiz] LT',
	            nextDay: '[Faleam] LT',
	            nextWeek: '[Ieta to] dddd[,] LT',
	            lastDay: '[Kal] LT',
	            lastWeek: '[Fatlo] dddd[,] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: '%s',
	            past: '%s adim',
	            s: processRelativeTime,
	            ss: processRelativeTime,
	            m: processRelativeTime,
	            mm: processRelativeTime,
	            h: processRelativeTime,
	            hh: processRelativeTime,
	            d: processRelativeTime,
	            dd: processRelativeTime,
	            M: processRelativeTime,
	            MM: processRelativeTime,
	            y: processRelativeTime,
	            yy: processRelativeTime
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(er)/,
	        ordinal: function ordinal(number, period) {
	            switch (period) {
	                // the ordinal 'er' only applies to day of the month
	                case 'D':
	                    return number + 'er';
	                default:
	                case 'M':
	                case 'Q':
	                case 'DDD':
	                case 'd':
	                case 'w':
	                case 'W':
	                    return number;
	            }
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        },
	        meridiemParse: /rati|sokalli|donparam|sanje/,
	        meridiemHour: function meridiemHour(hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'rati') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'sokalli') {
	                return hour;
	            } else if (meridiem === 'donparam') {
	                return hour > 12 ? hour : hour + 12;
	            } else if (meridiem === 'sanje') {
	                return hour + 12;
	            }
	        },
	        meridiem: function meridiem(hour, minute, isLower) {
	            if (hour < 4) {
	                return 'rati';
	            } else if (hour < 12) {
	                return 'sokalli';
	            } else if (hour < 16) {
	                return 'donparam';
	            } else if (hour < 20) {
	                return 'sanje';
	            } else {
	                return 'rati';
	            }
	        }
	    });
	
	    return gomLatn;
	});

/***/ },
/* 386 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Gujarati [gu]
	//! author : Kaushik Thanki : https://github.com/Kaushik1987
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var symbolMap = {
	        '1': '૧',
	        '2': '૨',
	        '3': '૩',
	        '4': '૪',
	        '5': '૫',
	        '6': '૬',
	        '7': '૭',
	        '8': '૮',
	        '9': '૯',
	        '0': '૦'
	    };
	    var numberMap = {
	        '૧': '1',
	        '૨': '2',
	        '૩': '3',
	        '૪': '4',
	        '૫': '5',
	        '૬': '6',
	        '૭': '7',
	        '૮': '8',
	        '૯': '9',
	        '૦': '0'
	    };
	
	    var gu = moment.defineLocale('gu', {
	        months: 'જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર'.split('_'),
	        monthsShort: 'જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર'.split('_'),
	        weekdaysShort: 'રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ'.split('_'),
	        weekdaysMin: 'ર_સો_મં_બુ_ગુ_શુ_શ'.split('_'),
	        longDateFormat: {
	            LT: 'A h:mm વાગ્યે',
	            LTS: 'A h:mm:ss વાગ્યે',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY, A h:mm વાગ્યે',
	            LLLL: 'dddd, D MMMM YYYY, A h:mm વાગ્યે'
	        },
	        calendar: {
	            sameDay: '[આજ] LT',
	            nextDay: '[કાલે] LT',
	            nextWeek: 'dddd, LT',
	            lastDay: '[ગઇકાલે] LT',
	            lastWeek: '[પાછલા] dddd, LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: '%s મા',
	            past: '%s પેહલા',
	            s: 'અમુક પળો',
	            ss: '%d સેકંડ',
	            m: 'એક મિનિટ',
	            mm: '%d મિનિટ',
	            h: 'એક કલાક',
	            hh: '%d કલાક',
	            d: 'એક દિવસ',
	            dd: '%d દિવસ',
	            M: 'એક મહિનો',
	            MM: '%d મહિનો',
	            y: 'એક વર્ષ',
	            yy: '%d વર્ષ'
	        },
	        preparse: function preparse(string) {
	            return string.replace(/[૧૨૩૪૫૬૭૮૯૦]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function postformat(string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        // Gujarati notation for meridiems are quite fuzzy in practice. While there exists
	        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Gujarati.
	        meridiemParse: /રાત|બપોર|સવાર|સાંજ/,
	        meridiemHour: function meridiemHour(hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'રાત') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'સવાર') {
	                return hour;
	            } else if (meridiem === 'બપોર') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'સાંજ') {
	                return hour + 12;
	            }
	        },
	        meridiem: function meridiem(hour, minute, isLower) {
	            if (hour < 4) {
	                return 'રાત';
	            } else if (hour < 10) {
	                return 'સવાર';
	            } else if (hour < 17) {
	                return 'બપોર';
	            } else if (hour < 20) {
	                return 'સાંજ';
	            } else {
	                return 'રાત';
	            }
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 6 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return gu;
	});

/***/ },
/* 387 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Hebrew [he]
	//! author : Tomer Cohen : https://github.com/tomer
	//! author : Moshe Simantov : https://github.com/DevelopmentIL
	//! author : Tal Ater : https://github.com/TalAter
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var he = moment.defineLocale('he', {
	        months: 'ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר'.split('_'),
	        monthsShort: 'ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳'.split('_'),
	        weekdays: 'ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת'.split('_'),
	        weekdaysShort: 'א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳'.split('_'),
	        weekdaysMin: 'א_ב_ג_ד_ה_ו_ש'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D [ב]MMMM YYYY',
	            LLL: 'D [ב]MMMM YYYY HH:mm',
	            LLLL: 'dddd, D [ב]MMMM YYYY HH:mm',
	            l: 'D/M/YYYY',
	            ll: 'D MMM YYYY',
	            lll: 'D MMM YYYY HH:mm',
	            llll: 'ddd, D MMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[היום ב־]LT',
	            nextDay: '[מחר ב־]LT',
	            nextWeek: 'dddd [בשעה] LT',
	            lastDay: '[אתמול ב־]LT',
	            lastWeek: '[ביום] dddd [האחרון בשעה] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'בעוד %s',
	            past: 'לפני %s',
	            s: 'מספר שניות',
	            ss: '%d שניות',
	            m: 'דקה',
	            mm: '%d דקות',
	            h: 'שעה',
	            hh: function hh(number) {
	                if (number === 2) {
	                    return 'שעתיים';
	                }
	                return number + ' שעות';
	            },
	            d: 'יום',
	            dd: function dd(number) {
	                if (number === 2) {
	                    return 'יומיים';
	                }
	                return number + ' ימים';
	            },
	            M: 'חודש',
	            MM: function MM(number) {
	                if (number === 2) {
	                    return 'חודשיים';
	                }
	                return number + ' חודשים';
	            },
	            y: 'שנה',
	            yy: function yy(number) {
	                if (number === 2) {
	                    return 'שנתיים';
	                } else if (number % 10 === 0 && number !== 10) {
	                    return number + ' שנה';
	                }
	                return number + ' שנים';
	            }
	        },
	        meridiemParse: /אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,
	        isPM: function isPM(input) {
	            return (/^(אחה"צ|אחרי הצהריים|בערב)$/.test(input)
	            );
	        },
	        meridiem: function meridiem(hour, minute, isLower) {
	            if (hour < 5) {
	                return 'לפנות בוקר';
	            } else if (hour < 10) {
	                return 'בבוקר';
	            } else if (hour < 12) {
	                return isLower ? 'לפנה"צ' : 'לפני הצהריים';
	            } else if (hour < 18) {
	                return isLower ? 'אחה"צ' : 'אחרי הצהריים';
	            } else {
	                return 'בערב';
	            }
	        }
	    });
	
	    return he;
	});

/***/ },
/* 388 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Hindi [hi]
	//! author : Mayank Singhal : https://github.com/mayanksinghal
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var symbolMap = {
	        '1': '१',
	        '2': '२',
	        '3': '३',
	        '4': '४',
	        '5': '५',
	        '6': '६',
	        '7': '७',
	        '8': '८',
	        '9': '९',
	        '0': '०'
	    };
	    var numberMap = {
	        '१': '1',
	        '२': '2',
	        '३': '3',
	        '४': '4',
	        '५': '5',
	        '६': '6',
	        '७': '7',
	        '८': '8',
	        '९': '9',
	        '०': '0'
	    };
	
	    var hi = moment.defineLocale('hi', {
	        months: 'जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर'.split('_'),
	        monthsShort: 'जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
	        weekdaysShort: 'रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि'.split('_'),
	        weekdaysMin: 'र_सो_मं_बु_गु_शु_श'.split('_'),
	        longDateFormat: {
	            LT: 'A h:mm बजे',
	            LTS: 'A h:mm:ss बजे',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY, A h:mm बजे',
	            LLLL: 'dddd, D MMMM YYYY, A h:mm बजे'
	        },
	        calendar: {
	            sameDay: '[आज] LT',
	            nextDay: '[कल] LT',
	            nextWeek: 'dddd, LT',
	            lastDay: '[कल] LT',
	            lastWeek: '[पिछले] dddd, LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: '%s में',
	            past: '%s पहले',
	            s: 'कुछ ही क्षण',
	            ss: '%d सेकंड',
	            m: 'एक मिनट',
	            mm: '%d मिनट',
	            h: 'एक घंटा',
	            hh: '%d घंटे',
	            d: 'एक दिन',
	            dd: '%d दिन',
	            M: 'एक महीने',
	            MM: '%d महीने',
	            y: 'एक वर्ष',
	            yy: '%d वर्ष'
	        },
	        preparse: function preparse(string) {
	            return string.replace(/[१२३४५६७८९०]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function postformat(string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        // Hindi notation for meridiems are quite fuzzy in practice. While there exists
	        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
	        meridiemParse: /रात|सुबह|दोपहर|शाम/,
	        meridiemHour: function meridiemHour(hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'रात') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'सुबह') {
	                return hour;
	            } else if (meridiem === 'दोपहर') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'शाम') {
	                return hour + 12;
	            }
	        },
	        meridiem: function meridiem(hour, minute, isLower) {
	            if (hour < 4) {
	                return 'रात';
	            } else if (hour < 10) {
	                return 'सुबह';
	            } else if (hour < 17) {
	                return 'दोपहर';
	            } else if (hour < 20) {
	                return 'शाम';
	            } else {
	                return 'रात';
	            }
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 6 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return hi;
	});

/***/ },
/* 389 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Croatian [hr]
	//! author : Bojan Marković : https://github.com/bmarkovic
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    function translate(number, withoutSuffix, key) {
	        var result = number + ' ';
	        switch (key) {
	            case 'ss':
	                if (number === 1) {
	                    result += 'sekunda';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'sekunde';
	                } else {
	                    result += 'sekundi';
	                }
	                return result;
	            case 'm':
	                return withoutSuffix ? 'jedna minuta' : 'jedne minute';
	            case 'mm':
	                if (number === 1) {
	                    result += 'minuta';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'minute';
	                } else {
	                    result += 'minuta';
	                }
	                return result;
	            case 'h':
	                return withoutSuffix ? 'jedan sat' : 'jednog sata';
	            case 'hh':
	                if (number === 1) {
	                    result += 'sat';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'sata';
	                } else {
	                    result += 'sati';
	                }
	                return result;
	            case 'dd':
	                if (number === 1) {
	                    result += 'dan';
	                } else {
	                    result += 'dana';
	                }
	                return result;
	            case 'MM':
	                if (number === 1) {
	                    result += 'mjesec';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'mjeseca';
	                } else {
	                    result += 'mjeseci';
	                }
	                return result;
	            case 'yy':
	                if (number === 1) {
	                    result += 'godina';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'godine';
	                } else {
	                    result += 'godina';
	                }
	                return result;
	        }
	    }
	
	    var hr = moment.defineLocale('hr', {
	        months: {
	            format: 'siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca'.split('_'),
	            standalone: 'siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac'.split('_')
	        },
	        monthsShort: 'sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
	        weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
	        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm',
	            LLLL: 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar: {
	            sameDay: '[danas u] LT',
	            nextDay: '[sutra u] LT',
	            nextWeek: function nextWeek() {
	                switch (this.day()) {
	                    case 0:
	                        return '[u] [nedjelju] [u] LT';
	                    case 3:
	                        return '[u] [srijedu] [u] LT';
	                    case 6:
	                        return '[u] [subotu] [u] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[u] dddd [u] LT';
	                }
	            },
	            lastDay: '[jučer u] LT',
	            lastWeek: function lastWeek() {
	                switch (this.day()) {
	                    case 0:
	                    case 3:
	                        return '[prošlu] dddd [u] LT';
	                    case 6:
	                        return '[prošle] [subote] [u] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[prošli] dddd [u] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'za %s',
	            past: 'prije %s',
	            s: 'par sekundi',
	            ss: translate,
	            m: translate,
	            mm: translate,
	            h: translate,
	            hh: translate,
	            d: 'dan',
	            dd: translate,
	            M: 'mjesec',
	            MM: translate,
	            y: 'godinu',
	            yy: translate
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return hr;
	});

/***/ },
/* 390 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Hungarian [hu]
	//! author : Adam Brunner : https://github.com/adambrunner
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var weekEndings = 'vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton'.split(' ');
	    function translate(number, withoutSuffix, key, isFuture) {
	        var num = number;
	        switch (key) {
	            case 's':
	                return isFuture || withoutSuffix ? 'néhány másodperc' : 'néhány másodperce';
	            case 'ss':
	                return num + (isFuture || withoutSuffix) ? ' másodperc' : ' másodperce';
	            case 'm':
	                return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');
	            case 'mm':
	                return num + (isFuture || withoutSuffix ? ' perc' : ' perce');
	            case 'h':
	                return 'egy' + (isFuture || withoutSuffix ? ' óra' : ' órája');
	            case 'hh':
	                return num + (isFuture || withoutSuffix ? ' óra' : ' órája');
	            case 'd':
	                return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');
	            case 'dd':
	                return num + (isFuture || withoutSuffix ? ' nap' : ' napja');
	            case 'M':
	                return 'egy' + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
	            case 'MM':
	                return num + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
	            case 'y':
	                return 'egy' + (isFuture || withoutSuffix ? ' év' : ' éve');
	            case 'yy':
	                return num + (isFuture || withoutSuffix ? ' év' : ' éve');
	        }
	        return '';
	    }
	    function week(isFuture) {
	        return (isFuture ? '' : '[múlt] ') + '[' + weekEndings[this.day()] + '] LT[-kor]';
	    }
	
	    var hu = moment.defineLocale('hu', {
	        months: 'január_február_március_április_május_június_július_augusztus_szeptember_október_november_december'.split('_'),
	        monthsShort: 'jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec'.split('_'),
	        weekdays: 'vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat'.split('_'),
	        weekdaysShort: 'vas_hét_kedd_sze_csüt_pén_szo'.split('_'),
	        weekdaysMin: 'v_h_k_sze_cs_p_szo'.split('_'),
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'YYYY.MM.DD.',
	            LL: 'YYYY. MMMM D.',
	            LLL: 'YYYY. MMMM D. H:mm',
	            LLLL: 'YYYY. MMMM D., dddd H:mm'
	        },
	        meridiemParse: /de|du/i,
	        isPM: function isPM(input) {
	            return input.charAt(1).toLowerCase() === 'u';
	        },
	        meridiem: function meridiem(hours, minutes, isLower) {
	            if (hours < 12) {
	                return isLower === true ? 'de' : 'DE';
	            } else {
	                return isLower === true ? 'du' : 'DU';
	            }
	        },
	        calendar: {
	            sameDay: '[ma] LT[-kor]',
	            nextDay: '[holnap] LT[-kor]',
	            nextWeek: function nextWeek() {
	                return week.call(this, true);
	            },
	            lastDay: '[tegnap] LT[-kor]',
	            lastWeek: function lastWeek() {
	                return week.call(this, false);
	            },
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: '%s múlva',
	            past: '%s',
	            s: translate,
	            ss: translate,
	            m: translate,
	            mm: translate,
	            h: translate,
	            hh: translate,
	            d: translate,
	            dd: translate,
	            M: translate,
	            MM: translate,
	            y: translate,
	            yy: translate
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return hu;
	});

/***/ },
/* 391 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Armenian [hy-am]
	//! author : Armendarabyan : https://github.com/armendarabyan
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var hyAm = moment.defineLocale('hy-am', {
	        months: {
	            format: 'հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի'.split('_'),
	            standalone: 'հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր'.split('_')
	        },
	        monthsShort: 'հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ'.split('_'),
	        weekdays: 'կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ'.split('_'),
	        weekdaysShort: 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
	        weekdaysMin: 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY թ.',
	            LLL: 'D MMMM YYYY թ., HH:mm',
	            LLLL: 'dddd, D MMMM YYYY թ., HH:mm'
	        },
	        calendar: {
	            sameDay: '[այսօր] LT',
	            nextDay: '[վաղը] LT',
	            lastDay: '[երեկ] LT',
	            nextWeek: function nextWeek() {
	                return 'dddd [օրը ժամը] LT';
	            },
	            lastWeek: function lastWeek() {
	                return '[անցած] dddd [օրը ժամը] LT';
	            },
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: '%s հետո',
	            past: '%s առաջ',
	            s: 'մի քանի վայրկյան',
	            ss: '%d վայրկյան',
	            m: 'րոպե',
	            mm: '%d րոպե',
	            h: 'ժամ',
	            hh: '%d ժամ',
	            d: 'օր',
	            dd: '%d օր',
	            M: 'ամիս',
	            MM: '%d ամիս',
	            y: 'տարի',
	            yy: '%d տարի'
	        },
	        meridiemParse: /գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,
	        isPM: function isPM(input) {
	            return (/^(ցերեկվա|երեկոյան)$/.test(input)
	            );
	        },
	        meridiem: function meridiem(hour) {
	            if (hour < 4) {
	                return 'գիշերվա';
	            } else if (hour < 12) {
	                return 'առավոտվա';
	            } else if (hour < 17) {
	                return 'ցերեկվա';
	            } else {
	                return 'երեկոյան';
	            }
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}|\d{1,2}-(ին|րդ)/,
	        ordinal: function ordinal(number, period) {
	            switch (period) {
	                case 'DDD':
	                case 'w':
	                case 'W':
	                case 'DDDo':
	                    if (number === 1) {
	                        return number + '-ին';
	                    }
	                    return number + '-րդ';
	                default:
	                    return number;
	            }
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return hyAm;
	});

/***/ },
/* 392 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Indonesian [id]
	//! author : Mohammad Satrio Utomo : https://github.com/tyok
	//! reference: http://id.wikisource.org/wiki/Pedoman_Umum_Ejaan_Bahasa_Indonesia_yang_Disempurnakan
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var id = moment.defineLocale('id', {
	        months: 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember'.split('_'),
	        monthsShort: 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des'.split('_'),
	        weekdays: 'Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu'.split('_'),
	        weekdaysShort: 'Min_Sen_Sel_Rab_Kam_Jum_Sab'.split('_'),
	        weekdaysMin: 'Mg_Sn_Sl_Rb_Km_Jm_Sb'.split('_'),
	        longDateFormat: {
	            LT: 'HH.mm',
	            LTS: 'HH.mm.ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY [pukul] HH.mm',
	            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm'
	        },
	        meridiemParse: /pagi|siang|sore|malam/,
	        meridiemHour: function meridiemHour(hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'pagi') {
	                return hour;
	            } else if (meridiem === 'siang') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'sore' || meridiem === 'malam') {
	                return hour + 12;
	            }
	        },
	        meridiem: function meridiem(hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'pagi';
	            } else if (hours < 15) {
	                return 'siang';
	            } else if (hours < 19) {
	                return 'sore';
	            } else {
	                return 'malam';
	            }
	        },
	        calendar: {
	            sameDay: '[Hari ini pukul] LT',
	            nextDay: '[Besok pukul] LT',
	            nextWeek: 'dddd [pukul] LT',
	            lastDay: '[Kemarin pukul] LT',
	            lastWeek: 'dddd [lalu pukul] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'dalam %s',
	            past: '%s yang lalu',
	            s: 'beberapa detik',
	            ss: '%d detik',
	            m: 'semenit',
	            mm: '%d menit',
	            h: 'sejam',
	            hh: '%d jam',
	            d: 'sehari',
	            dd: '%d hari',
	            M: 'sebulan',
	            MM: '%d bulan',
	            y: 'setahun',
	            yy: '%d tahun'
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return id;
	});

/***/ },
/* 393 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Icelandic [is]
	//! author : Hinrik Örn Sigurðsson : https://github.com/hinrik
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    function plural(n) {
	        if (n % 100 === 11) {
	            return true;
	        } else if (n % 10 === 1) {
	            return false;
	        }
	        return true;
	    }
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        switch (key) {
	            case 's':
	                return withoutSuffix || isFuture ? 'nokkrar sekúndur' : 'nokkrum sekúndum';
	            case 'ss':
	                if (plural(number)) {
	                    return result + (withoutSuffix || isFuture ? 'sekúndur' : 'sekúndum');
	                }
	                return result + 'sekúnda';
	            case 'm':
	                return withoutSuffix ? 'mínúta' : 'mínútu';
	            case 'mm':
	                if (plural(number)) {
	                    return result + (withoutSuffix || isFuture ? 'mínútur' : 'mínútum');
	                } else if (withoutSuffix) {
	                    return result + 'mínúta';
	                }
	                return result + 'mínútu';
	            case 'hh':
	                if (plural(number)) {
	                    return result + (withoutSuffix || isFuture ? 'klukkustundir' : 'klukkustundum');
	                }
	                return result + 'klukkustund';
	            case 'd':
	                if (withoutSuffix) {
	                    return 'dagur';
	                }
	                return isFuture ? 'dag' : 'degi';
	            case 'dd':
	                if (plural(number)) {
	                    if (withoutSuffix) {
	                        return result + 'dagar';
	                    }
	                    return result + (isFuture ? 'daga' : 'dögum');
	                } else if (withoutSuffix) {
	                    return result + 'dagur';
	                }
	                return result + (isFuture ? 'dag' : 'degi');
	            case 'M':
	                if (withoutSuffix) {
	                    return 'mánuður';
	                }
	                return isFuture ? 'mánuð' : 'mánuði';
	            case 'MM':
	                if (plural(number)) {
	                    if (withoutSuffix) {
	                        return result + 'mánuðir';
	                    }
	                    return result + (isFuture ? 'mánuði' : 'mánuðum');
	                } else if (withoutSuffix) {
	                    return result + 'mánuður';
	                }
	                return result + (isFuture ? 'mánuð' : 'mánuði');
	            case 'y':
	                return withoutSuffix || isFuture ? 'ár' : 'ári';
	            case 'yy':
	                if (plural(number)) {
	                    return result + (withoutSuffix || isFuture ? 'ár' : 'árum');
	                }
	                return result + (withoutSuffix || isFuture ? 'ár' : 'ári');
	        }
	    }
	
	    var is = moment.defineLocale('is', {
	        months: 'janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember'.split('_'),
	        monthsShort: 'jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des'.split('_'),
	        weekdays: 'sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur'.split('_'),
	        weekdaysShort: 'sun_mán_þri_mið_fim_fös_lau'.split('_'),
	        weekdaysMin: 'Su_Má_Þr_Mi_Fi_Fö_La'.split('_'),
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY [kl.] H:mm',
	            LLLL: 'dddd, D. MMMM YYYY [kl.] H:mm'
	        },
	        calendar: {
	            sameDay: '[í dag kl.] LT',
	            nextDay: '[á morgun kl.] LT',
	            nextWeek: 'dddd [kl.] LT',
	            lastDay: '[í gær kl.] LT',
	            lastWeek: '[síðasta] dddd [kl.] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'eftir %s',
	            past: 'fyrir %s síðan',
	            s: translate,
	            ss: translate,
	            m: translate,
	            mm: translate,
	            h: 'klukkustund',
	            hh: translate,
	            d: translate,
	            dd: translate,
	            M: translate,
	            MM: translate,
	            y: translate,
	            yy: translate
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return is;
	});

/***/ },
/* 394 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Italian [it]
	//! author : Lorenzo : https://github.com/aliem
	//! author: Mattia Larentis: https://github.com/nostalgiaz
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var it = moment.defineLocale('it', {
	        months: 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split('_'),
	        monthsShort: 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
	        weekdays: 'domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato'.split('_'),
	        weekdaysShort: 'dom_lun_mar_mer_gio_ven_sab'.split('_'),
	        weekdaysMin: 'do_lu_ma_me_gi_ve_sa'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[Oggi alle] LT',
	            nextDay: '[Domani alle] LT',
	            nextWeek: 'dddd [alle] LT',
	            lastDay: '[Ieri alle] LT',
	            lastWeek: function lastWeek() {
	                switch (this.day()) {
	                    case 0:
	                        return '[la scorsa] dddd [alle] LT';
	                    default:
	                        return '[lo scorso] dddd [alle] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: function future(s) {
	                return (/^[0-9].+$/.test(s) ? 'tra' : 'in') + ' ' + s;
	            },
	            past: '%s fa',
	            s: 'alcuni secondi',
	            ss: '%d secondi',
	            m: 'un minuto',
	            mm: '%d minuti',
	            h: 'un\'ora',
	            hh: '%d ore',
	            d: 'un giorno',
	            dd: '%d giorni',
	            M: 'un mese',
	            MM: '%d mesi',
	            y: 'un anno',
	            yy: '%d anni'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}º/,
	        ordinal: '%dº',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return it;
	});

/***/ },
/* 395 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Japanese [ja]
	//! author : LI Long : https://github.com/baryon
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var ja = moment.defineLocale('ja', {
	        months: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	        weekdays: '日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日'.split('_'),
	        weekdaysShort: '日_月_火_水_木_金_土'.split('_'),
	        weekdaysMin: '日_月_火_水_木_金_土'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'YYYY/MM/DD',
	            LL: 'YYYY年M月D日',
	            LLL: 'YYYY年M月D日 HH:mm',
	            LLLL: 'YYYY年M月D日 HH:mm dddd',
	            l: 'YYYY/MM/DD',
	            ll: 'YYYY年M月D日',
	            lll: 'YYYY年M月D日 HH:mm',
	            llll: 'YYYY年M月D日 HH:mm dddd'
	        },
	        meridiemParse: /午前|午後/i,
	        isPM: function isPM(input) {
	            return input === '午後';
	        },
	        meridiem: function meridiem(hour, minute, isLower) {
	            if (hour < 12) {
	                return '午前';
	            } else {
	                return '午後';
	            }
	        },
	        calendar: {
	            sameDay: '[今日] LT',
	            nextDay: '[明日] LT',
	            nextWeek: '[来週]dddd LT',
	            lastDay: '[昨日] LT',
	            lastWeek: '[前週]dddd LT',
	            sameElse: 'L'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}日/,
	        ordinal: function ordinal(number, period) {
	            switch (period) {
	                case 'd':
	                case 'D':
	                case 'DDD':
	                    return number + '日';
	                default:
	                    return number;
	            }
	        },
	        relativeTime: {
	            future: '%s後',
	            past: '%s前',
	            s: '数秒',
	            ss: '%d秒',
	            m: '1分',
	            mm: '%d分',
	            h: '1時間',
	            hh: '%d時間',
	            d: '1日',
	            dd: '%d日',
	            M: '1ヶ月',
	            MM: '%dヶ月',
	            y: '1年',
	            yy: '%d年'
	        }
	    });
	
	    return ja;
	});

/***/ },
/* 396 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Javanese [jv]
	//! author : Rony Lantip : https://github.com/lantip
	//! reference: http://jv.wikipedia.org/wiki/Basa_Jawa
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var jv = moment.defineLocale('jv', {
	        months: 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember'.split('_'),
	        monthsShort: 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des'.split('_'),
	        weekdays: 'Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu'.split('_'),
	        weekdaysShort: 'Min_Sen_Sel_Reb_Kem_Jem_Sep'.split('_'),
	        weekdaysMin: 'Mg_Sn_Sl_Rb_Km_Jm_Sp'.split('_'),
	        longDateFormat: {
	            LT: 'HH.mm',
	            LTS: 'HH.mm.ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY [pukul] HH.mm',
	            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm'
	        },
	        meridiemParse: /enjing|siyang|sonten|ndalu/,
	        meridiemHour: function meridiemHour(hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'enjing') {
	                return hour;
	            } else if (meridiem === 'siyang') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'sonten' || meridiem === 'ndalu') {
	                return hour + 12;
	            }
	        },
	        meridiem: function meridiem(hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'enjing';
	            } else if (hours < 15) {
	                return 'siyang';
	            } else if (hours < 19) {
	                return 'sonten';
	            } else {
	                return 'ndalu';
	            }
	        },
	        calendar: {
	            sameDay: '[Dinten puniko pukul] LT',
	            nextDay: '[Mbenjang pukul] LT',
	            nextWeek: 'dddd [pukul] LT',
	            lastDay: '[Kala wingi pukul] LT',
	            lastWeek: 'dddd [kepengker pukul] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'wonten ing %s',
	            past: '%s ingkang kepengker',
	            s: 'sawetawis detik',
	            ss: '%d detik',
	            m: 'setunggal menit',
	            mm: '%d menit',
	            h: 'setunggal jam',
	            hh: '%d jam',
	            d: 'sedinten',
	            dd: '%d dinten',
	            M: 'sewulan',
	            MM: '%d wulan',
	            y: 'setaun',
	            yy: '%d taun'
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return jv;
	});

/***/ },
/* 397 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Georgian [ka]
	//! author : Irakli Janiashvili : https://github.com/irakli-janiashvili
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var ka = moment.defineLocale('ka', {
	        months: {
	            standalone: 'იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი'.split('_'),
	            format: 'იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს'.split('_')
	        },
	        monthsShort: 'იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ'.split('_'),
	        weekdays: {
	            standalone: 'კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი'.split('_'),
	            format: 'კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს'.split('_'),
	            isFormat: /(წინა|შემდეგ)/
	        },
	        weekdaysShort: 'კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ'.split('_'),
	        weekdaysMin: 'კვ_ორ_სა_ოთ_ხუ_პა_შა'.split('_'),
	        longDateFormat: {
	            LT: 'h:mm A',
	            LTS: 'h:mm:ss A',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY h:mm A',
	            LLLL: 'dddd, D MMMM YYYY h:mm A'
	        },
	        calendar: {
	            sameDay: '[დღეს] LT[-ზე]',
	            nextDay: '[ხვალ] LT[-ზე]',
	            lastDay: '[გუშინ] LT[-ზე]',
	            nextWeek: '[შემდეგ] dddd LT[-ზე]',
	            lastWeek: '[წინა] dddd LT-ზე',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: function future(s) {
	                return (/(წამი|წუთი|საათი|წელი)/.test(s) ? s.replace(/ი$/, 'ში') : s + 'ში'
	                );
	            },
	            past: function past(s) {
	                if (/(წამი|წუთი|საათი|დღე|თვე)/.test(s)) {
	                    return s.replace(/(ი|ე)$/, 'ის უკან');
	                }
	                if (/წელი/.test(s)) {
	                    return s.replace(/წელი$/, 'წლის უკან');
	                }
	            },
	            s: 'რამდენიმე წამი',
	            ss: '%d წამი',
	            m: 'წუთი',
	            mm: '%d წუთი',
	            h: 'საათი',
	            hh: '%d საათი',
	            d: 'დღე',
	            dd: '%d დღე',
	            M: 'თვე',
	            MM: '%d თვე',
	            y: 'წელი',
	            yy: '%d წელი'
	        },
	        dayOfMonthOrdinalParse: /0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,
	        ordinal: function ordinal(number) {
	            if (number === 0) {
	                return number;
	            }
	            if (number === 1) {
	                return number + '-ლი';
	            }
	            if (number < 20 || number <= 100 && number % 20 === 0 || number % 100 === 0) {
	                return 'მე-' + number;
	            }
	            return number + '-ე';
	        },
	        week: {
	            dow: 1,
	            doy: 7
	        }
	    });
	
	    return ka;
	});

/***/ },
/* 398 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Kazakh [kk]
	//! authors : Nurlan Rakhimzhanov : https://github.com/nurlan
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var suffixes = {
	        0: '-ші',
	        1: '-ші',
	        2: '-ші',
	        3: '-ші',
	        4: '-ші',
	        5: '-ші',
	        6: '-шы',
	        7: '-ші',
	        8: '-ші',
	        9: '-шы',
	        10: '-шы',
	        20: '-шы',
	        30: '-шы',
	        40: '-шы',
	        50: '-ші',
	        60: '-шы',
	        70: '-ші',
	        80: '-ші',
	        90: '-шы',
	        100: '-ші'
	    };
	
	    var kk = moment.defineLocale('kk', {
	        months: 'қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан'.split('_'),
	        monthsShort: 'қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел'.split('_'),
	        weekdays: 'жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі'.split('_'),
	        weekdaysShort: 'жек_дүй_сей_сәр_бей_жұм_сен'.split('_'),
	        weekdaysMin: 'жк_дй_сй_ср_бй_жм_сн'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[Бүгін сағат] LT',
	            nextDay: '[Ертең сағат] LT',
	            nextWeek: 'dddd [сағат] LT',
	            lastDay: '[Кеше сағат] LT',
	            lastWeek: '[Өткен аптаның] dddd [сағат] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: '%s ішінде',
	            past: '%s бұрын',
	            s: 'бірнеше секунд',
	            ss: '%d секунд',
	            m: 'бір минут',
	            mm: '%d минут',
	            h: 'бір сағат',
	            hh: '%d сағат',
	            d: 'бір күн',
	            dd: '%d күн',
	            M: 'бір ай',
	            MM: '%d ай',
	            y: 'бір жыл',
	            yy: '%d жыл'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}-(ші|шы)/,
	        ordinal: function ordinal(number) {
	            var a = number % 10,
	                b = number >= 100 ? 100 : null;
	            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return kk;
	});

/***/ },
/* 399 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Cambodian [km]
	//! author : Kruy Vanna : https://github.com/kruyvanna
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var km = moment.defineLocale('km', {
	        months: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
	        monthsShort: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
	        weekdays: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
	        weekdaysShort: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
	        weekdaysMin: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[ថ្ងៃនេះ ម៉ោង] LT',
	            nextDay: '[ស្អែក ម៉ោង] LT',
	            nextWeek: 'dddd [ម៉ោង] LT',
	            lastDay: '[ម្សិលមិញ ម៉ោង] LT',
	            lastWeek: 'dddd [សប្តាហ៍មុន] [ម៉ោង] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: '%sទៀត',
	            past: '%sមុន',
	            s: 'ប៉ុន្មានវិនាទី',
	            ss: '%d វិនាទី',
	            m: 'មួយនាទី',
	            mm: '%d នាទី',
	            h: 'មួយម៉ោង',
	            hh: '%d ម៉ោង',
	            d: 'មួយថ្ងៃ',
	            dd: '%d ថ្ងៃ',
	            M: 'មួយខែ',
	            MM: '%d ខែ',
	            y: 'មួយឆ្នាំ',
	            yy: '%d ឆ្នាំ'
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return km;
	});

/***/ },
/* 400 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Kannada [kn]
	//! author : Rajeev Naik : https://github.com/rajeevnaikte
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var symbolMap = {
	        '1': '೧',
	        '2': '೨',
	        '3': '೩',
	        '4': '೪',
	        '5': '೫',
	        '6': '೬',
	        '7': '೭',
	        '8': '೮',
	        '9': '೯',
	        '0': '೦'
	    };
	    var numberMap = {
	        '೧': '1',
	        '೨': '2',
	        '೩': '3',
	        '೪': '4',
	        '೫': '5',
	        '೬': '6',
	        '೭': '7',
	        '೮': '8',
	        '೯': '9',
	        '೦': '0'
	    };
	
	    var kn = moment.defineLocale('kn', {
	        months: 'ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್'.split('_'),
	        monthsShort: 'ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬ_ಅಕ್ಟೋಬ_ನವೆಂಬ_ಡಿಸೆಂಬ'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ'.split('_'),
	        weekdaysShort: 'ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ'.split('_'),
	        weekdaysMin: 'ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ'.split('_'),
	        longDateFormat: {
	            LT: 'A h:mm',
	            LTS: 'A h:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY, A h:mm',
	            LLLL: 'dddd, D MMMM YYYY, A h:mm'
	        },
	        calendar: {
	            sameDay: '[ಇಂದು] LT',
	            nextDay: '[ನಾಳೆ] LT',
	            nextWeek: 'dddd, LT',
	            lastDay: '[ನಿನ್ನೆ] LT',
	            lastWeek: '[ಕೊನೆಯ] dddd, LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: '%s ನಂತರ',
	            past: '%s ಹಿಂದೆ',
	            s: 'ಕೆಲವು ಕ್ಷಣಗಳು',
	            ss: '%d ಸೆಕೆಂಡುಗಳು',
	            m: 'ಒಂದು ನಿಮಿಷ',
	            mm: '%d ನಿಮಿಷ',
	            h: 'ಒಂದು ಗಂಟೆ',
	            hh: '%d ಗಂಟೆ',
	            d: 'ಒಂದು ದಿನ',
	            dd: '%d ದಿನ',
	            M: 'ಒಂದು ತಿಂಗಳು',
	            MM: '%d ತಿಂಗಳು',
	            y: 'ಒಂದು ವರ್ಷ',
	            yy: '%d ವರ್ಷ'
	        },
	        preparse: function preparse(string) {
	            return string.replace(/[೧೨೩೪೫೬೭೮೯೦]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function postformat(string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiemParse: /ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,
	        meridiemHour: function meridiemHour(hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'ರಾತ್ರಿ') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'ಬೆಳಿಗ್ಗೆ') {
	                return hour;
	            } else if (meridiem === 'ಮಧ್ಯಾಹ್ನ') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'ಸಂಜೆ') {
	                return hour + 12;
	            }
	        },
	        meridiem: function meridiem(hour, minute, isLower) {
	            if (hour < 4) {
	                return 'ರಾತ್ರಿ';
	            } else if (hour < 10) {
	                return 'ಬೆಳಿಗ್ಗೆ';
	            } else if (hour < 17) {
	                return 'ಮಧ್ಯಾಹ್ನ';
	            } else if (hour < 20) {
	                return 'ಸಂಜೆ';
	            } else {
	                return 'ರಾತ್ರಿ';
	            }
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(ನೇ)/,
	        ordinal: function ordinal(number) {
	            return number + 'ನೇ';
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 6 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return kn;
	});

/***/ },
/* 401 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Korean [ko]
	//! author : Kyungwook, Park : https://github.com/kyungw00k
	//! author : Jeeeyul Lee <jeeeyul@gmail.com>
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var ko = moment.defineLocale('ko', {
	        months: '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
	        monthsShort: '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
	        weekdays: '일요일_월요일_화요일_수요일_목요일_금요일_토요일'.split('_'),
	        weekdaysShort: '일_월_화_수_목_금_토'.split('_'),
	        weekdaysMin: '일_월_화_수_목_금_토'.split('_'),
	        longDateFormat: {
	            LT: 'A h:mm',
	            LTS: 'A h:mm:ss',
	            L: 'YYYY.MM.DD',
	            LL: 'YYYY년 MMMM D일',
	            LLL: 'YYYY년 MMMM D일 A h:mm',
	            LLLL: 'YYYY년 MMMM D일 dddd A h:mm',
	            l: 'YYYY.MM.DD',
	            ll: 'YYYY년 MMMM D일',
	            lll: 'YYYY년 MMMM D일 A h:mm',
	            llll: 'YYYY년 MMMM D일 dddd A h:mm'
	        },
	        calendar: {
	            sameDay: '오늘 LT',
	            nextDay: '내일 LT',
	            nextWeek: 'dddd LT',
	            lastDay: '어제 LT',
	            lastWeek: '지난주 dddd LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: '%s 후',
	            past: '%s 전',
	            s: '몇 초',
	            ss: '%d초',
	            m: '1분',
	            mm: '%d분',
	            h: '한 시간',
	            hh: '%d시간',
	            d: '하루',
	            dd: '%d일',
	            M: '한 달',
	            MM: '%d달',
	            y: '일 년',
	            yy: '%d년'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(일|월|주)/,
	        ordinal: function ordinal(number, period) {
	            switch (period) {
	                case 'd':
	                case 'D':
	                case 'DDD':
	                    return number + '일';
	                case 'M':
	                    return number + '월';
	                case 'w':
	                case 'W':
	                    return number + '주';
	                default:
	                    return number;
	            }
	        },
	        meridiemParse: /오전|오후/,
	        isPM: function isPM(token) {
	            return token === '오후';
	        },
	        meridiem: function meridiem(hour, minute, isUpper) {
	            return hour < 12 ? '오전' : '오후';
	        }
	    });
	
	    return ko;
	});

/***/ },
/* 402 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Kyrgyz [ky]
	//! author : Chyngyz Arystan uulu : https://github.com/chyngyz
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var suffixes = {
	        0: '-чү',
	        1: '-чи',
	        2: '-чи',
	        3: '-чү',
	        4: '-чү',
	        5: '-чи',
	        6: '-чы',
	        7: '-чи',
	        8: '-чи',
	        9: '-чу',
	        10: '-чу',
	        20: '-чы',
	        30: '-чу',
	        40: '-чы',
	        50: '-чү',
	        60: '-чы',
	        70: '-чи',
	        80: '-чи',
	        90: '-чу',
	        100: '-чү'
	    };
	
	    var ky = moment.defineLocale('ky', {
	        months: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_'),
	        monthsShort: 'янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек'.split('_'),
	        weekdays: 'Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби'.split('_'),
	        weekdaysShort: 'Жек_Дүй_Шей_Шар_Бей_Жум_Ише'.split('_'),
	        weekdaysMin: 'Жк_Дй_Шй_Шр_Бй_Жм_Иш'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[Бүгүн саат] LT',
	            nextDay: '[Эртең саат] LT',
	            nextWeek: 'dddd [саат] LT',
	            lastDay: '[Кече саат] LT',
	            lastWeek: '[Өткен аптанын] dddd [күнү] [саат] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: '%s ичинде',
	            past: '%s мурун',
	            s: 'бирнече секунд',
	            ss: '%d секунд',
	            m: 'бир мүнөт',
	            mm: '%d мүнөт',
	            h: 'бир саат',
	            hh: '%d саат',
	            d: 'бир күн',
	            dd: '%d күн',
	            M: 'бир ай',
	            MM: '%d ай',
	            y: 'бир жыл',
	            yy: '%d жыл'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}-(чи|чы|чү|чу)/,
	        ordinal: function ordinal(number) {
	            var a = number % 10,
	                b = number >= 100 ? 100 : null;
	            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return ky;
	});

/***/ },
/* 403 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Luxembourgish [lb]
	//! author : mweimerskirch : https://github.com/mweimerskirch
	//! author : David Raison : https://github.com/kwisatz
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            'm': ['eng Minutt', 'enger Minutt'],
	            'h': ['eng Stonn', 'enger Stonn'],
	            'd': ['een Dag', 'engem Dag'],
	            'M': ['ee Mount', 'engem Mount'],
	            'y': ['ee Joer', 'engem Joer']
	        };
	        return withoutSuffix ? format[key][0] : format[key][1];
	    }
	    function processFutureTime(string) {
	        var number = string.substr(0, string.indexOf(' '));
	        if (eifelerRegelAppliesToNumber(number)) {
	            return 'a ' + string;
	        }
	        return 'an ' + string;
	    }
	    function processPastTime(string) {
	        var number = string.substr(0, string.indexOf(' '));
	        if (eifelerRegelAppliesToNumber(number)) {
	            return 'viru ' + string;
	        }
	        return 'virun ' + string;
	    }
	    /**
	     * Returns true if the word before the given number loses the '-n' ending.
	     * e.g. 'an 10 Deeg' but 'a 5 Deeg'
	     *
	     * @param number {integer}
	     * @returns {boolean}
	     */
	    function eifelerRegelAppliesToNumber(number) {
	        number = parseInt(number, 10);
	        if (isNaN(number)) {
	            return false;
	        }
	        if (number < 0) {
	            // Negative Number --> always true
	            return true;
	        } else if (number < 10) {
	            // Only 1 digit
	            if (4 <= number && number <= 7) {
	                return true;
	            }
	            return false;
	        } else if (number < 100) {
	            // 2 digits
	            var lastDigit = number % 10,
	                firstDigit = number / 10;
	            if (lastDigit === 0) {
	                return eifelerRegelAppliesToNumber(firstDigit);
	            }
	            return eifelerRegelAppliesToNumber(lastDigit);
	        } else if (number < 10000) {
	            // 3 or 4 digits --> recursively check first digit
	            while (number >= 10) {
	                number = number / 10;
	            }
	            return eifelerRegelAppliesToNumber(number);
	        } else {
	            // Anything larger than 4 digits: recursively check first n-3 digits
	            number = number / 1000;
	            return eifelerRegelAppliesToNumber(number);
	        }
	    }
	
	    var lb = moment.defineLocale('lb', {
	        months: 'Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
	        monthsShort: 'Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg'.split('_'),
	        weekdaysShort: 'So._Mé._Dë._Më._Do._Fr._Sa.'.split('_'),
	        weekdaysMin: 'So_Mé_Dë_Më_Do_Fr_Sa'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'H:mm [Auer]',
	            LTS: 'H:mm:ss [Auer]',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm [Auer]',
	            LLLL: 'dddd, D. MMMM YYYY H:mm [Auer]'
	        },
	        calendar: {
	            sameDay: '[Haut um] LT',
	            sameElse: 'L',
	            nextDay: '[Muer um] LT',
	            nextWeek: 'dddd [um] LT',
	            lastDay: '[Gëschter um] LT',
	            lastWeek: function lastWeek() {
	                // Different date string for 'Dënschdeg' (Tuesday) and 'Donneschdeg' (Thursday) due to phonological rule
	                switch (this.day()) {
	                    case 2:
	                    case 4:
	                        return '[Leschten] dddd [um] LT';
	                    default:
	                        return '[Leschte] dddd [um] LT';
	                }
	            }
	        },
	        relativeTime: {
	            future: processFutureTime,
	            past: processPastTime,
	            s: 'e puer Sekonnen',
	            ss: '%d Sekonnen',
	            m: processRelativeTime,
	            mm: '%d Minutten',
	            h: processRelativeTime,
	            hh: '%d Stonnen',
	            d: processRelativeTime,
	            dd: '%d Deeg',
	            M: processRelativeTime,
	            MM: '%d Méint',
	            y: processRelativeTime,
	            yy: '%d Joer'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return lb;
	});

/***/ },
/* 404 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Lao [lo]
	//! author : Ryan Hart : https://github.com/ryanhart2
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var lo = moment.defineLocale('lo', {
	        months: 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),
	        monthsShort: 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),
	        weekdays: 'ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
	        weekdaysShort: 'ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
	        weekdaysMin: 'ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'ວັນdddd D MMMM YYYY HH:mm'
	        },
	        meridiemParse: /ຕອນເຊົ້າ|ຕອນແລງ/,
	        isPM: function isPM(input) {
	            return input === 'ຕອນແລງ';
	        },
	        meridiem: function meridiem(hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ຕອນເຊົ້າ';
	            } else {
	                return 'ຕອນແລງ';
	            }
	        },
	        calendar: {
	            sameDay: '[ມື້ນີ້ເວລາ] LT',
	            nextDay: '[ມື້ອື່ນເວລາ] LT',
	            nextWeek: '[ວັນ]dddd[ໜ້າເວລາ] LT',
	            lastDay: '[ມື້ວານນີ້ເວລາ] LT',
	            lastWeek: '[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'ອີກ %s',
	            past: '%sຜ່ານມາ',
	            s: 'ບໍ່ເທົ່າໃດວິນາທີ',
	            ss: '%d ວິນາທີ',
	            m: '1 ນາທີ',
	            mm: '%d ນາທີ',
	            h: '1 ຊົ່ວໂມງ',
	            hh: '%d ຊົ່ວໂມງ',
	            d: '1 ມື້',
	            dd: '%d ມື້',
	            M: '1 ເດືອນ',
	            MM: '%d ເດືອນ',
	            y: '1 ປີ',
	            yy: '%d ປີ'
	        },
	        dayOfMonthOrdinalParse: /(ທີ່)\d{1,2}/,
	        ordinal: function ordinal(number) {
	            return 'ທີ່' + number;
	        }
	    });
	
	    return lo;
	});

/***/ },
/* 405 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Lithuanian [lt]
	//! author : Mindaugas Mozūras : https://github.com/mmozuras
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var units = {
	        'ss': 'sekundė_sekundžių_sekundes',
	        'm': 'minutė_minutės_minutę',
	        'mm': 'minutės_minučių_minutes',
	        'h': 'valanda_valandos_valandą',
	        'hh': 'valandos_valandų_valandas',
	        'd': 'diena_dienos_dieną',
	        'dd': 'dienos_dienų_dienas',
	        'M': 'mėnuo_mėnesio_mėnesį',
	        'MM': 'mėnesiai_mėnesių_mėnesius',
	        'y': 'metai_metų_metus',
	        'yy': 'metai_metų_metus'
	    };
	    function translateSeconds(number, withoutSuffix, key, isFuture) {
	        if (withoutSuffix) {
	            return 'kelios sekundės';
	        } else {
	            return isFuture ? 'kelių sekundžių' : 'kelias sekundes';
	        }
	    }
	    function translateSingular(number, withoutSuffix, key, isFuture) {
	        return withoutSuffix ? forms(key)[0] : isFuture ? forms(key)[1] : forms(key)[2];
	    }
	    function special(number) {
	        return number % 10 === 0 || number > 10 && number < 20;
	    }
	    function forms(key) {
	        return units[key].split('_');
	    }
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        if (number === 1) {
	            return result + translateSingular(number, withoutSuffix, key[0], isFuture);
	        } else if (withoutSuffix) {
	            return result + (special(number) ? forms(key)[1] : forms(key)[0]);
	        } else {
	            if (isFuture) {
	                return result + forms(key)[1];
	            } else {
	                return result + (special(number) ? forms(key)[1] : forms(key)[2]);
	            }
	        }
	    }
	    var lt = moment.defineLocale('lt', {
	        months: {
	            format: 'sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio'.split('_'),
	            standalone: 'sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis'.split('_'),
	            isFormat: /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/
	        },
	        monthsShort: 'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split('_'),
	        weekdays: {
	            format: 'sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį'.split('_'),
	            standalone: 'sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis'.split('_'),
	            isFormat: /dddd HH:mm/
	        },
	        weekdaysShort: 'Sek_Pir_Ant_Tre_Ket_Pen_Šeš'.split('_'),
	        weekdaysMin: 'S_P_A_T_K_Pn_Š'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'YYYY-MM-DD',
	            LL: 'YYYY [m.] MMMM D [d.]',
	            LLL: 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
	            LLLL: 'YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]',
	            l: 'YYYY-MM-DD',
	            ll: 'YYYY [m.] MMMM D [d.]',
	            lll: 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
	            llll: 'YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]'
	        },
	        calendar: {
	            sameDay: '[Šiandien] LT',
	            nextDay: '[Rytoj] LT',
	            nextWeek: 'dddd LT',
	            lastDay: '[Vakar] LT',
	            lastWeek: '[Praėjusį] dddd LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'po %s',
	            past: 'prieš %s',
	            s: translateSeconds,
	            ss: translate,
	            m: translateSingular,
	            mm: translate,
	            h: translateSingular,
	            hh: translate,
	            d: translateSingular,
	            dd: translate,
	            M: translateSingular,
	            MM: translate,
	            y: translateSingular,
	            yy: translate
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}-oji/,
	        ordinal: function ordinal(number) {
	            return number + '-oji';
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return lt;
	});

/***/ },
/* 406 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Latvian [lv]
	//! author : Kristaps Karlsons : https://github.com/skakri
	//! author : Jānis Elmeris : https://github.com/JanisE
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var units = {
	        'ss': 'sekundes_sekundēm_sekunde_sekundes'.split('_'),
	        'm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
	        'mm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
	        'h': 'stundas_stundām_stunda_stundas'.split('_'),
	        'hh': 'stundas_stundām_stunda_stundas'.split('_'),
	        'd': 'dienas_dienām_diena_dienas'.split('_'),
	        'dd': 'dienas_dienām_diena_dienas'.split('_'),
	        'M': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
	        'MM': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
	        'y': 'gada_gadiem_gads_gadi'.split('_'),
	        'yy': 'gada_gadiem_gads_gadi'.split('_')
	    };
	    /**
	     * @param withoutSuffix boolean true = a length of time; false = before/after a period of time.
	     */
	    function format(forms, number, withoutSuffix) {
	        if (withoutSuffix) {
	            // E.g. "21 minūte", "3 minūtes".
	            return number % 10 === 1 && number % 100 !== 11 ? forms[2] : forms[3];
	        } else {
	            // E.g. "21 minūtes" as in "pēc 21 minūtes".
	            // E.g. "3 minūtēm" as in "pēc 3 minūtēm".
	            return number % 10 === 1 && number % 100 !== 11 ? forms[0] : forms[1];
	        }
	    }
	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        return number + ' ' + format(units[key], number, withoutSuffix);
	    }
	    function relativeTimeWithSingular(number, withoutSuffix, key) {
	        return format(units[key], number, withoutSuffix);
	    }
	    function relativeSeconds(number, withoutSuffix) {
	        return withoutSuffix ? 'dažas sekundes' : 'dažām sekundēm';
	    }
	
	    var lv = moment.defineLocale('lv', {
	        months: 'janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris'.split('_'),
	        monthsShort: 'jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec'.split('_'),
	        weekdays: 'svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena'.split('_'),
	        weekdaysShort: 'Sv_P_O_T_C_Pk_S'.split('_'),
	        weekdaysMin: 'Sv_P_O_T_C_Pk_S'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY.',
	            LL: 'YYYY. [gada] D. MMMM',
	            LLL: 'YYYY. [gada] D. MMMM, HH:mm',
	            LLLL: 'YYYY. [gada] D. MMMM, dddd, HH:mm'
	        },
	        calendar: {
	            sameDay: '[Šodien pulksten] LT',
	            nextDay: '[Rīt pulksten] LT',
	            nextWeek: 'dddd [pulksten] LT',
	            lastDay: '[Vakar pulksten] LT',
	            lastWeek: '[Pagājušā] dddd [pulksten] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'pēc %s',
	            past: 'pirms %s',
	            s: relativeSeconds,
	            ss: relativeTimeWithPlural,
	            m: relativeTimeWithSingular,
	            mm: relativeTimeWithPlural,
	            h: relativeTimeWithSingular,
	            hh: relativeTimeWithPlural,
	            d: relativeTimeWithSingular,
	            dd: relativeTimeWithPlural,
	            M: relativeTimeWithSingular,
	            MM: relativeTimeWithPlural,
	            y: relativeTimeWithSingular,
	            yy: relativeTimeWithPlural
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return lv;
	});

/***/ },
/* 407 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Montenegrin [me]
	//! author : Miodrag Nikač <miodrag@restartit.me> : https://github.com/miodragnikac
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var translator = {
	        words: { //Different grammatical cases
	            ss: ['sekund', 'sekunda', 'sekundi'],
	            m: ['jedan minut', 'jednog minuta'],
	            mm: ['minut', 'minuta', 'minuta'],
	            h: ['jedan sat', 'jednog sata'],
	            hh: ['sat', 'sata', 'sati'],
	            dd: ['dan', 'dana', 'dana'],
	            MM: ['mjesec', 'mjeseca', 'mjeseci'],
	            yy: ['godina', 'godine', 'godina']
	        },
	        correctGrammaticalCase: function correctGrammaticalCase(number, wordKey) {
	            return number === 1 ? wordKey[0] : number >= 2 && number <= 4 ? wordKey[1] : wordKey[2];
	        },
	        translate: function translate(number, withoutSuffix, key) {
	            var wordKey = translator.words[key];
	            if (key.length === 1) {
	                return withoutSuffix ? wordKey[0] : wordKey[1];
	            } else {
	                return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
	            }
	        }
	    };
	
	    var me = moment.defineLocale('me', {
	        months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),
	        monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
	        weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
	        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm',
	            LLLL: 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar: {
	            sameDay: '[danas u] LT',
	            nextDay: '[sjutra u] LT',
	
	            nextWeek: function nextWeek() {
	                switch (this.day()) {
	                    case 0:
	                        return '[u] [nedjelju] [u] LT';
	                    case 3:
	                        return '[u] [srijedu] [u] LT';
	                    case 6:
	                        return '[u] [subotu] [u] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[u] dddd [u] LT';
	                }
	            },
	            lastDay: '[juče u] LT',
	            lastWeek: function lastWeek() {
	                var lastWeekDays = ['[prošle] [nedjelje] [u] LT', '[prošlog] [ponedjeljka] [u] LT', '[prošlog] [utorka] [u] LT', '[prošle] [srijede] [u] LT', '[prošlog] [četvrtka] [u] LT', '[prošlog] [petka] [u] LT', '[prošle] [subote] [u] LT'];
	                return lastWeekDays[this.day()];
	            },
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'za %s',
	            past: 'prije %s',
	            s: 'nekoliko sekundi',
	            ss: translator.translate,
	            m: translator.translate,
	            mm: translator.translate,
	            h: translator.translate,
	            hh: translator.translate,
	            d: 'dan',
	            dd: translator.translate,
	            M: 'mjesec',
	            MM: translator.translate,
	            y: 'godinu',
	            yy: translator.translate
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return me;
	});

/***/ },
/* 408 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Maori [mi]
	//! author : John Corrigan <robbiecloset@gmail.com> : https://github.com/johnideal
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var mi = moment.defineLocale('mi', {
	        months: 'Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea'.split('_'),
	        monthsShort: 'Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki'.split('_'),
	        monthsRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
	        monthsStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
	        monthsShortRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
	        monthsShortStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,
	        weekdays: 'Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei'.split('_'),
	        weekdaysShort: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
	        weekdaysMin: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY [i] HH:mm',
	            LLLL: 'dddd, D MMMM YYYY [i] HH:mm'
	        },
	        calendar: {
	            sameDay: '[i teie mahana, i] LT',
	            nextDay: '[apopo i] LT',
	            nextWeek: 'dddd [i] LT',
	            lastDay: '[inanahi i] LT',
	            lastWeek: 'dddd [whakamutunga i] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'i roto i %s',
	            past: '%s i mua',
	            s: 'te hēkona ruarua',
	            ss: '%d hēkona',
	            m: 'he meneti',
	            mm: '%d meneti',
	            h: 'te haora',
	            hh: '%d haora',
	            d: 'he ra',
	            dd: '%d ra',
	            M: 'he marama',
	            MM: '%d marama',
	            y: 'he tau',
	            yy: '%d tau'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}º/,
	        ordinal: '%dº',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return mi;
	});

/***/ },
/* 409 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Macedonian [mk]
	//! author : Borislav Mickov : https://github.com/B0k0
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var mk = moment.defineLocale('mk', {
	        months: 'јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември'.split('_'),
	        monthsShort: 'јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек'.split('_'),
	        weekdays: 'недела_понеделник_вторник_среда_четврток_петок_сабота'.split('_'),
	        weekdaysShort: 'нед_пон_вто_сре_чет_пет_саб'.split('_'),
	        weekdaysMin: 'нe_пo_вт_ср_че_пе_сa'.split('_'),
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'D.MM.YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY H:mm',
	            LLLL: 'dddd, D MMMM YYYY H:mm'
	        },
	        calendar: {
	            sameDay: '[Денес во] LT',
	            nextDay: '[Утре во] LT',
	            nextWeek: '[Во] dddd [во] LT',
	            lastDay: '[Вчера во] LT',
	            lastWeek: function lastWeek() {
	                switch (this.day()) {
	                    case 0:
	                    case 3:
	                    case 6:
	                        return '[Изминатата] dddd [во] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[Изминатиот] dddd [во] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'после %s',
	            past: 'пред %s',
	            s: 'неколку секунди',
	            ss: '%d секунди',
	            m: 'минута',
	            mm: '%d минути',
	            h: 'час',
	            hh: '%d часа',
	            d: 'ден',
	            dd: '%d дена',
	            M: 'месец',
	            MM: '%d месеци',
	            y: 'година',
	            yy: '%d години'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
	        ordinal: function ordinal(number) {
	            var lastDigit = number % 10,
	                last2Digits = number % 100;
	            if (number === 0) {
	                return number + '-ев';
	            } else if (last2Digits === 0) {
	                return number + '-ен';
	            } else if (last2Digits > 10 && last2Digits < 20) {
	                return number + '-ти';
	            } else if (lastDigit === 1) {
	                return number + '-ви';
	            } else if (lastDigit === 2) {
	                return number + '-ри';
	            } else if (lastDigit === 7 || lastDigit === 8) {
	                return number + '-ми';
	            } else {
	                return number + '-ти';
	            }
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return mk;
	});

/***/ },
/* 410 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Malayalam [ml]
	//! author : Floyd Pink : https://github.com/floydpink
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var ml = moment.defineLocale('ml', {
	        months: 'ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ'.split('_'),
	        monthsShort: 'ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച'.split('_'),
	        weekdaysShort: 'ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി'.split('_'),
	        weekdaysMin: 'ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ'.split('_'),
	        longDateFormat: {
	            LT: 'A h:mm -നു',
	            LTS: 'A h:mm:ss -നു',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY, A h:mm -നു',
	            LLLL: 'dddd, D MMMM YYYY, A h:mm -നു'
	        },
	        calendar: {
	            sameDay: '[ഇന്ന്] LT',
	            nextDay: '[നാളെ] LT',
	            nextWeek: 'dddd, LT',
	            lastDay: '[ഇന്നലെ] LT',
	            lastWeek: '[കഴിഞ്ഞ] dddd, LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: '%s കഴിഞ്ഞ്',
	            past: '%s മുൻപ്',
	            s: 'അൽപ നിമിഷങ്ങൾ',
	            ss: '%d സെക്കൻഡ്',
	            m: 'ഒരു മിനിറ്റ്',
	            mm: '%d മിനിറ്റ്',
	            h: 'ഒരു മണിക്കൂർ',
	            hh: '%d മണിക്കൂർ',
	            d: 'ഒരു ദിവസം',
	            dd: '%d ദിവസം',
	            M: 'ഒരു മാസം',
	            MM: '%d മാസം',
	            y: 'ഒരു വർഷം',
	            yy: '%d വർഷം'
	        },
	        meridiemParse: /രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,
	        meridiemHour: function meridiemHour(hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'രാത്രി' && hour >= 4 || meridiem === 'ഉച്ച കഴിഞ്ഞ്' || meridiem === 'വൈകുന്നേരം') {
	                return hour + 12;
	            } else {
	                return hour;
	            }
	        },
	        meridiem: function meridiem(hour, minute, isLower) {
	            if (hour < 4) {
	                return 'രാത്രി';
	            } else if (hour < 12) {
	                return 'രാവിലെ';
	            } else if (hour < 17) {
	                return 'ഉച്ച കഴിഞ്ഞ്';
	            } else if (hour < 20) {
	                return 'വൈകുന്നേരം';
	            } else {
	                return 'രാത്രി';
	            }
	        }
	    });
	
	    return ml;
	});

/***/ },
/* 411 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Marathi [mr]
	//! author : Harshad Kale : https://github.com/kalehv
	//! author : Vivek Athalye : https://github.com/vnathalye
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var symbolMap = {
	        '1': '१',
	        '2': '२',
	        '3': '३',
	        '4': '४',
	        '5': '५',
	        '6': '६',
	        '7': '७',
	        '8': '८',
	        '9': '९',
	        '0': '०'
	    };
	    var numberMap = {
	        '१': '1',
	        '२': '2',
	        '३': '3',
	        '४': '4',
	        '५': '5',
	        '६': '6',
	        '७': '7',
	        '८': '8',
	        '९': '9',
	        '०': '0'
	    };
	
	    function relativeTimeMr(number, withoutSuffix, string, isFuture) {
	        var output = '';
	        if (withoutSuffix) {
	            switch (string) {
	                case 's':
	                    output = 'काही सेकंद';break;
	                case 'ss':
	                    output = '%d सेकंद';break;
	                case 'm':
	                    output = 'एक मिनिट';break;
	                case 'mm':
	                    output = '%d मिनिटे';break;
	                case 'h':
	                    output = 'एक तास';break;
	                case 'hh':
	                    output = '%d तास';break;
	                case 'd':
	                    output = 'एक दिवस';break;
	                case 'dd':
	                    output = '%d दिवस';break;
	                case 'M':
	                    output = 'एक महिना';break;
	                case 'MM':
	                    output = '%d महिने';break;
	                case 'y':
	                    output = 'एक वर्ष';break;
	                case 'yy':
	                    output = '%d वर्षे';break;
	            }
	        } else {
	            switch (string) {
	                case 's':
	                    output = 'काही सेकंदां';break;
	                case 'ss':
	                    output = '%d सेकंदां';break;
	                case 'm':
	                    output = 'एका मिनिटा';break;
	                case 'mm':
	                    output = '%d मिनिटां';break;
	                case 'h':
	                    output = 'एका तासा';break;
	                case 'hh':
	                    output = '%d तासां';break;
	                case 'd':
	                    output = 'एका दिवसा';break;
	                case 'dd':
	                    output = '%d दिवसां';break;
	                case 'M':
	                    output = 'एका महिन्या';break;
	                case 'MM':
	                    output = '%d महिन्यां';break;
	                case 'y':
	                    output = 'एका वर्षा';break;
	                case 'yy':
	                    output = '%d वर्षां';break;
	            }
	        }
	        return output.replace(/%d/i, number);
	    }
	
	    var mr = moment.defineLocale('mr', {
	        months: 'जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split('_'),
	        monthsShort: 'जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
	        weekdaysShort: 'रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि'.split('_'),
	        weekdaysMin: 'र_सो_मं_बु_गु_शु_श'.split('_'),
	        longDateFormat: {
	            LT: 'A h:mm वाजता',
	            LTS: 'A h:mm:ss वाजता',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY, A h:mm वाजता',
	            LLLL: 'dddd, D MMMM YYYY, A h:mm वाजता'
	        },
	        calendar: {
	            sameDay: '[आज] LT',
	            nextDay: '[उद्या] LT',
	            nextWeek: 'dddd, LT',
	            lastDay: '[काल] LT',
	            lastWeek: '[मागील] dddd, LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: '%sमध्ये',
	            past: '%sपूर्वी',
	            s: relativeTimeMr,
	            ss: relativeTimeMr,
	            m: relativeTimeMr,
	            mm: relativeTimeMr,
	            h: relativeTimeMr,
	            hh: relativeTimeMr,
	            d: relativeTimeMr,
	            dd: relativeTimeMr,
	            M: relativeTimeMr,
	            MM: relativeTimeMr,
	            y: relativeTimeMr,
	            yy: relativeTimeMr
	        },
	        preparse: function preparse(string) {
	            return string.replace(/[१२३४५६७८९०]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function postformat(string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiemParse: /रात्री|सकाळी|दुपारी|सायंकाळी/,
	        meridiemHour: function meridiemHour(hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'रात्री') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'सकाळी') {
	                return hour;
	            } else if (meridiem === 'दुपारी') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'सायंकाळी') {
	                return hour + 12;
	            }
	        },
	        meridiem: function meridiem(hour, minute, isLower) {
	            if (hour < 4) {
	                return 'रात्री';
	            } else if (hour < 10) {
	                return 'सकाळी';
	            } else if (hour < 17) {
	                return 'दुपारी';
	            } else if (hour < 20) {
	                return 'सायंकाळी';
	            } else {
	                return 'रात्री';
	            }
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 6 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return mr;
	});

/***/ },
/* 412 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Malay [ms]
	//! author : Weldan Jamili : https://github.com/weldan
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var ms = moment.defineLocale('ms', {
	        months: 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
	        monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
	        weekdays: 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
	        weekdaysShort: 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
	        weekdaysMin: 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
	        longDateFormat: {
	            LT: 'HH.mm',
	            LTS: 'HH.mm.ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY [pukul] HH.mm',
	            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm'
	        },
	        meridiemParse: /pagi|tengahari|petang|malam/,
	        meridiemHour: function meridiemHour(hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'pagi') {
	                return hour;
	            } else if (meridiem === 'tengahari') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'petang' || meridiem === 'malam') {
	                return hour + 12;
	            }
	        },
	        meridiem: function meridiem(hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'pagi';
	            } else if (hours < 15) {
	                return 'tengahari';
	            } else if (hours < 19) {
	                return 'petang';
	            } else {
	                return 'malam';
	            }
	        },
	        calendar: {
	            sameDay: '[Hari ini pukul] LT',
	            nextDay: '[Esok pukul] LT',
	            nextWeek: 'dddd [pukul] LT',
	            lastDay: '[Kelmarin pukul] LT',
	            lastWeek: 'dddd [lepas pukul] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'dalam %s',
	            past: '%s yang lepas',
	            s: 'beberapa saat',
	            ss: '%d saat',
	            m: 'seminit',
	            mm: '%d minit',
	            h: 'sejam',
	            hh: '%d jam',
	            d: 'sehari',
	            dd: '%d hari',
	            M: 'sebulan',
	            MM: '%d bulan',
	            y: 'setahun',
	            yy: '%d tahun'
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return ms;
	});

/***/ },
/* 413 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Malay [ms-my]
	//! note : DEPRECATED, the correct one is [ms]
	//! author : Weldan Jamili : https://github.com/weldan
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var msMy = moment.defineLocale('ms-my', {
	        months: 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
	        monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
	        weekdays: 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
	        weekdaysShort: 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
	        weekdaysMin: 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
	        longDateFormat: {
	            LT: 'HH.mm',
	            LTS: 'HH.mm.ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY [pukul] HH.mm',
	            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm'
	        },
	        meridiemParse: /pagi|tengahari|petang|malam/,
	        meridiemHour: function meridiemHour(hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'pagi') {
	                return hour;
	            } else if (meridiem === 'tengahari') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'petang' || meridiem === 'malam') {
	                return hour + 12;
	            }
	        },
	        meridiem: function meridiem(hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'pagi';
	            } else if (hours < 15) {
	                return 'tengahari';
	            } else if (hours < 19) {
	                return 'petang';
	            } else {
	                return 'malam';
	            }
	        },
	        calendar: {
	            sameDay: '[Hari ini pukul] LT',
	            nextDay: '[Esok pukul] LT',
	            nextWeek: 'dddd [pukul] LT',
	            lastDay: '[Kelmarin pukul] LT',
	            lastWeek: 'dddd [lepas pukul] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'dalam %s',
	            past: '%s yang lepas',
	            s: 'beberapa saat',
	            ss: '%d saat',
	            m: 'seminit',
	            mm: '%d minit',
	            h: 'sejam',
	            hh: '%d jam',
	            d: 'sehari',
	            dd: '%d hari',
	            M: 'sebulan',
	            MM: '%d bulan',
	            y: 'setahun',
	            yy: '%d tahun'
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return msMy;
	});

/***/ },
/* 414 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Maltese (Malta) [mt]
	//! author : Alessandro Maruccia : https://github.com/alesma
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var mt = moment.defineLocale('mt', {
	        months: 'Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru'.split('_'),
	        monthsShort: 'Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ'.split('_'),
	        weekdays: 'Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt'.split('_'),
	        weekdaysShort: 'Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib'.split('_'),
	        weekdaysMin: 'Ħa_Tn_Tl_Er_Ħa_Ġi_Si'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[Illum fil-]LT',
	            nextDay: '[Għada fil-]LT',
	            nextWeek: 'dddd [fil-]LT',
	            lastDay: '[Il-bieraħ fil-]LT',
	            lastWeek: 'dddd [li għadda] [fil-]LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'f’ %s',
	            past: '%s ilu',
	            s: 'ftit sekondi',
	            ss: '%d sekondi',
	            m: 'minuta',
	            mm: '%d minuti',
	            h: 'siegħa',
	            hh: '%d siegħat',
	            d: 'ġurnata',
	            dd: '%d ġranet',
	            M: 'xahar',
	            MM: '%d xhur',
	            y: 'sena',
	            yy: '%d sni'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}º/,
	        ordinal: '%dº',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return mt;
	});

/***/ },
/* 415 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Burmese [my]
	//! author : Squar team, mysquar.com
	//! author : David Rossellat : https://github.com/gholadr
	//! author : Tin Aung Lin : https://github.com/thanyawzinmin
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var symbolMap = {
	        '1': '၁',
	        '2': '၂',
	        '3': '၃',
	        '4': '၄',
	        '5': '၅',
	        '6': '၆',
	        '7': '၇',
	        '8': '၈',
	        '9': '၉',
	        '0': '၀'
	    };
	    var numberMap = {
	        '၁': '1',
	        '၂': '2',
	        '၃': '3',
	        '၄': '4',
	        '၅': '5',
	        '၆': '6',
	        '၇': '7',
	        '၈': '8',
	        '၉': '9',
	        '၀': '0'
	    };
	
	    var my = moment.defineLocale('my', {
	        months: 'ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ'.split('_'),
	        monthsShort: 'ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ'.split('_'),
	        weekdays: 'တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ'.split('_'),
	        weekdaysShort: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),
	        weekdaysMin: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),
	
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[ယနေ.] LT [မှာ]',
	            nextDay: '[မနက်ဖြန်] LT [မှာ]',
	            nextWeek: 'dddd LT [မှာ]',
	            lastDay: '[မနေ.က] LT [မှာ]',
	            lastWeek: '[ပြီးခဲ့သော] dddd LT [မှာ]',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'လာမည့် %s မှာ',
	            past: 'လွန်ခဲ့သော %s က',
	            s: 'စက္ကန်.အနည်းငယ်',
	            ss: '%d စက္ကန့်',
	            m: 'တစ်မိနစ်',
	            mm: '%d မိနစ်',
	            h: 'တစ်နာရီ',
	            hh: '%d နာရီ',
	            d: 'တစ်ရက်',
	            dd: '%d ရက်',
	            M: 'တစ်လ',
	            MM: '%d လ',
	            y: 'တစ်နှစ်',
	            yy: '%d နှစ်'
	        },
	        preparse: function preparse(string) {
	            return string.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function postformat(string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return my;
	});

/***/ },
/* 416 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Norwegian Bokmål [nb]
	//! authors : Espen Hovlandsdal : https://github.com/rexxars
	//!           Sigurd Gartmann : https://github.com/sigurdga
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var nb = moment.defineLocale('nb', {
	        months: 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
	        monthsShort: 'jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
	        weekdaysShort: 'sø._ma._ti._on._to._fr._lø.'.split('_'),
	        weekdaysMin: 'sø_ma_ti_on_to_fr_lø'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY [kl.] HH:mm',
	            LLLL: 'dddd D. MMMM YYYY [kl.] HH:mm'
	        },
	        calendar: {
	            sameDay: '[i dag kl.] LT',
	            nextDay: '[i morgen kl.] LT',
	            nextWeek: 'dddd [kl.] LT',
	            lastDay: '[i går kl.] LT',
	            lastWeek: '[forrige] dddd [kl.] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'om %s',
	            past: '%s siden',
	            s: 'noen sekunder',
	            ss: '%d sekunder',
	            m: 'ett minutt',
	            mm: '%d minutter',
	            h: 'en time',
	            hh: '%d timer',
	            d: 'en dag',
	            dd: '%d dager',
	            M: 'en måned',
	            MM: '%d måneder',
	            y: 'ett år',
	            yy: '%d år'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return nb;
	});

/***/ },
/* 417 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Nepalese [ne]
	//! author : suvash : https://github.com/suvash
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var symbolMap = {
	        '1': '१',
	        '2': '२',
	        '3': '३',
	        '4': '४',
	        '5': '५',
	        '6': '६',
	        '7': '७',
	        '8': '८',
	        '9': '९',
	        '0': '०'
	    };
	    var numberMap = {
	        '१': '1',
	        '२': '2',
	        '३': '3',
	        '४': '4',
	        '५': '5',
	        '६': '6',
	        '७': '7',
	        '८': '8',
	        '९': '9',
	        '०': '0'
	    };
	
	    var ne = moment.defineLocale('ne', {
	        months: 'जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर'.split('_'),
	        monthsShort: 'जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार'.split('_'),
	        weekdaysShort: 'आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.'.split('_'),
	        weekdaysMin: 'आ._सो._मं._बु._बि._शु._श.'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'Aको h:mm बजे',
	            LTS: 'Aको h:mm:ss बजे',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY, Aको h:mm बजे',
	            LLLL: 'dddd, D MMMM YYYY, Aको h:mm बजे'
	        },
	        preparse: function preparse(string) {
	            return string.replace(/[१२३४५६७८९०]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function postformat(string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiemParse: /राति|बिहान|दिउँसो|साँझ/,
	        meridiemHour: function meridiemHour(hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'राति') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'बिहान') {
	                return hour;
	            } else if (meridiem === 'दिउँसो') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'साँझ') {
	                return hour + 12;
	            }
	        },
	        meridiem: function meridiem(hour, minute, isLower) {
	            if (hour < 3) {
	                return 'राति';
	            } else if (hour < 12) {
	                return 'बिहान';
	            } else if (hour < 16) {
	                return 'दिउँसो';
	            } else if (hour < 20) {
	                return 'साँझ';
	            } else {
	                return 'राति';
	            }
	        },
	        calendar: {
	            sameDay: '[आज] LT',
	            nextDay: '[भोलि] LT',
	            nextWeek: '[आउँदो] dddd[,] LT',
	            lastDay: '[हिजो] LT',
	            lastWeek: '[गएको] dddd[,] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: '%sमा',
	            past: '%s अगाडि',
	            s: 'केही क्षण',
	            ss: '%d सेकेण्ड',
	            m: 'एक मिनेट',
	            mm: '%d मिनेट',
	            h: 'एक घण्टा',
	            hh: '%d घण्टा',
	            d: 'एक दिन',
	            dd: '%d दिन',
	            M: 'एक महिना',
	            MM: '%d महिना',
	            y: 'एक बर्ष',
	            yy: '%d बर्ष'
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 6 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return ne;
	});

/***/ },
/* 418 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Dutch [nl]
	//! author : Joris Röling : https://github.com/jorisroling
	//! author : Jacob Middag : https://github.com/middagj
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_');
	    var monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');
	
	    var monthsParse = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i];
	    var monthsRegex = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;
	
	    var nl = moment.defineLocale('nl', {
	        months: 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
	        monthsShort: function monthsShort(m, format) {
	            if (!m) {
	                return monthsShortWithDots;
	            } else if (/-MMM-/.test(format)) {
	                return monthsShortWithoutDots[m.month()];
	            } else {
	                return monthsShortWithDots[m.month()];
	            }
	        },
	
	        monthsRegex: monthsRegex,
	        monthsShortRegex: monthsRegex,
	        monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,
	        monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,
	
	        monthsParse: monthsParse,
	        longMonthsParse: monthsParse,
	        shortMonthsParse: monthsParse,
	
	        weekdays: 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
	        weekdaysShort: 'zo._ma._di._wo._do._vr._za.'.split('_'),
	        weekdaysMin: 'zo_ma_di_wo_do_vr_za'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD-MM-YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[vandaag om] LT',
	            nextDay: '[morgen om] LT',
	            nextWeek: 'dddd [om] LT',
	            lastDay: '[gisteren om] LT',
	            lastWeek: '[afgelopen] dddd [om] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'over %s',
	            past: '%s geleden',
	            s: 'een paar seconden',
	            ss: '%d seconden',
	            m: 'één minuut',
	            mm: '%d minuten',
	            h: 'één uur',
	            hh: '%d uur',
	            d: 'één dag',
	            dd: '%d dagen',
	            M: 'één maand',
	            MM: '%d maanden',
	            y: 'één jaar',
	            yy: '%d jaar'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
	        ordinal: function ordinal(number) {
	            return number + (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de');
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return nl;
	});

/***/ },
/* 419 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Dutch (Belgium) [nl-be]
	//! author : Joris Röling : https://github.com/jorisroling
	//! author : Jacob Middag : https://github.com/middagj
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_');
	    var monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');
	
	    var monthsParse = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i];
	    var monthsRegex = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;
	
	    var nlBe = moment.defineLocale('nl-be', {
	        months: 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
	        monthsShort: function monthsShort(m, format) {
	            if (!m) {
	                return monthsShortWithDots;
	            } else if (/-MMM-/.test(format)) {
	                return monthsShortWithoutDots[m.month()];
	            } else {
	                return monthsShortWithDots[m.month()];
	            }
	        },
	
	        monthsRegex: monthsRegex,
	        monthsShortRegex: monthsRegex,
	        monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,
	        monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,
	
	        monthsParse: monthsParse,
	        longMonthsParse: monthsParse,
	        shortMonthsParse: monthsParse,
	
	        weekdays: 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
	        weekdaysShort: 'zo._ma._di._wo._do._vr._za.'.split('_'),
	        weekdaysMin: 'zo_ma_di_wo_do_vr_za'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[vandaag om] LT',
	            nextDay: '[morgen om] LT',
	            nextWeek: 'dddd [om] LT',
	            lastDay: '[gisteren om] LT',
	            lastWeek: '[afgelopen] dddd [om] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'over %s',
	            past: '%s geleden',
	            s: 'een paar seconden',
	            ss: '%d seconden',
	            m: 'één minuut',
	            mm: '%d minuten',
	            h: 'één uur',
	            hh: '%d uur',
	            d: 'één dag',
	            dd: '%d dagen',
	            M: 'één maand',
	            MM: '%d maanden',
	            y: 'één jaar',
	            yy: '%d jaar'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
	        ordinal: function ordinal(number) {
	            return number + (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de');
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return nlBe;
	});

/***/ },
/* 420 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Nynorsk [nn]
	//! author : https://github.com/mechuwind
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var nn = moment.defineLocale('nn', {
	        months: 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
	        monthsShort: 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
	        weekdays: 'sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag'.split('_'),
	        weekdaysShort: 'sun_mån_tys_ons_tor_fre_lau'.split('_'),
	        weekdaysMin: 'su_må_ty_on_to_fr_lø'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY [kl.] H:mm',
	            LLLL: 'dddd D. MMMM YYYY [kl.] HH:mm'
	        },
	        calendar: {
	            sameDay: '[I dag klokka] LT',
	            nextDay: '[I morgon klokka] LT',
	            nextWeek: 'dddd [klokka] LT',
	            lastDay: '[I går klokka] LT',
	            lastWeek: '[Føregåande] dddd [klokka] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'om %s',
	            past: '%s sidan',
	            s: 'nokre sekund',
	            ss: '%d sekund',
	            m: 'eit minutt',
	            mm: '%d minutt',
	            h: 'ein time',
	            hh: '%d timar',
	            d: 'ein dag',
	            dd: '%d dagar',
	            M: 'ein månad',
	            MM: '%d månader',
	            y: 'eit år',
	            yy: '%d år'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return nn;
	});

/***/ },
/* 421 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Punjabi (India) [pa-in]
	//! author : Harpreet Singh : https://github.com/harpreetkhalsagtbit
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var symbolMap = {
	        '1': '੧',
	        '2': '੨',
	        '3': '੩',
	        '4': '੪',
	        '5': '੫',
	        '6': '੬',
	        '7': '੭',
	        '8': '੮',
	        '9': '੯',
	        '0': '੦'
	    };
	    var numberMap = {
	        '੧': '1',
	        '੨': '2',
	        '੩': '3',
	        '੪': '4',
	        '੫': '5',
	        '੬': '6',
	        '੭': '7',
	        '੮': '8',
	        '੯': '9',
	        '੦': '0'
	    };
	
	    var paIn = moment.defineLocale('pa-in', {
	        // There are months name as per Nanakshahi Calender but they are not used as rigidly in modern Punjabi.
	        months: 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),
	        monthsShort: 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),
	        weekdays: 'ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ'.split('_'),
	        weekdaysShort: 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
	        weekdaysMin: 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
	        longDateFormat: {
	            LT: 'A h:mm ਵਜੇ',
	            LTS: 'A h:mm:ss ਵਜੇ',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY, A h:mm ਵਜੇ',
	            LLLL: 'dddd, D MMMM YYYY, A h:mm ਵਜੇ'
	        },
	        calendar: {
	            sameDay: '[ਅਜ] LT',
	            nextDay: '[ਕਲ] LT',
	            nextWeek: 'dddd, LT',
	            lastDay: '[ਕਲ] LT',
	            lastWeek: '[ਪਿਛਲੇ] dddd, LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: '%s ਵਿੱਚ',
	            past: '%s ਪਿਛਲੇ',
	            s: 'ਕੁਝ ਸਕਿੰਟ',
	            ss: '%d ਸਕਿੰਟ',
	            m: 'ਇਕ ਮਿੰਟ',
	            mm: '%d ਮਿੰਟ',
	            h: 'ਇੱਕ ਘੰਟਾ',
	            hh: '%d ਘੰਟੇ',
	            d: 'ਇੱਕ ਦਿਨ',
	            dd: '%d ਦਿਨ',
	            M: 'ਇੱਕ ਮਹੀਨਾ',
	            MM: '%d ਮਹੀਨੇ',
	            y: 'ਇੱਕ ਸਾਲ',
	            yy: '%d ਸਾਲ'
	        },
	        preparse: function preparse(string) {
	            return string.replace(/[੧੨੩੪੫੬੭੮੯੦]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function postformat(string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        // Punjabi notation for meridiems are quite fuzzy in practice. While there exists
	        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Punjabi.
	        meridiemParse: /ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,
	        meridiemHour: function meridiemHour(hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'ਰਾਤ') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'ਸਵੇਰ') {
	                return hour;
	            } else if (meridiem === 'ਦੁਪਹਿਰ') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'ਸ਼ਾਮ') {
	                return hour + 12;
	            }
	        },
	        meridiem: function meridiem(hour, minute, isLower) {
	            if (hour < 4) {
	                return 'ਰਾਤ';
	            } else if (hour < 10) {
	                return 'ਸਵੇਰ';
	            } else if (hour < 17) {
	                return 'ਦੁਪਹਿਰ';
	            } else if (hour < 20) {
	                return 'ਸ਼ਾਮ';
	            } else {
	                return 'ਰਾਤ';
	            }
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 6 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return paIn;
	});

/***/ },
/* 422 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Polish [pl]
	//! author : Rafal Hirsz : https://github.com/evoL
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var monthsNominative = 'styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień'.split('_');
	    var monthsSubjective = 'stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia'.split('_');
	    function plural(n) {
	        return n % 10 < 5 && n % 10 > 1 && ~~(n / 10) % 10 !== 1;
	    }
	    function translate(number, withoutSuffix, key) {
	        var result = number + ' ';
	        switch (key) {
	            case 'ss':
	                return result + (plural(number) ? 'sekundy' : 'sekund');
	            case 'm':
	                return withoutSuffix ? 'minuta' : 'minutę';
	            case 'mm':
	                return result + (plural(number) ? 'minuty' : 'minut');
	            case 'h':
	                return withoutSuffix ? 'godzina' : 'godzinę';
	            case 'hh':
	                return result + (plural(number) ? 'godziny' : 'godzin');
	            case 'MM':
	                return result + (plural(number) ? 'miesiące' : 'miesięcy');
	            case 'yy':
	                return result + (plural(number) ? 'lata' : 'lat');
	        }
	    }
	
	    var pl = moment.defineLocale('pl', {
	        months: function months(momentToFormat, format) {
	            if (!momentToFormat) {
	                return monthsNominative;
	            } else if (format === '') {
	                // Hack: if format empty we know this is used to generate
	                // RegExp by moment. Give then back both valid forms of months
	                // in RegExp ready format.
	                return '(' + monthsSubjective[momentToFormat.month()] + '|' + monthsNominative[momentToFormat.month()] + ')';
	            } else if (/D MMMM/.test(format)) {
	                return monthsSubjective[momentToFormat.month()];
	            } else {
	                return monthsNominative[momentToFormat.month()];
	            }
	        },
	        monthsShort: 'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru'.split('_'),
	        weekdays: 'niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota'.split('_'),
	        weekdaysShort: 'ndz_pon_wt_śr_czw_pt_sob'.split('_'),
	        weekdaysMin: 'Nd_Pn_Wt_Śr_Cz_Pt_So'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[Dziś o] LT',
	            nextDay: '[Jutro o] LT',
	            nextWeek: function nextWeek() {
	                switch (this.day()) {
	                    case 0:
	                        return '[W niedzielę o] LT';
	
	                    case 2:
	                        return '[We wtorek o] LT';
	
	                    case 3:
	                        return '[W środę o] LT';
	
	                    case 6:
	                        return '[W sobotę o] LT';
	
	                    default:
	                        return '[W] dddd [o] LT';
	                }
	            },
	            lastDay: '[Wczoraj o] LT',
	            lastWeek: function lastWeek() {
	                switch (this.day()) {
	                    case 0:
	                        return '[W zeszłą niedzielę o] LT';
	                    case 3:
	                        return '[W zeszłą środę o] LT';
	                    case 6:
	                        return '[W zeszłą sobotę o] LT';
	                    default:
	                        return '[W zeszły] dddd [o] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'za %s',
	            past: '%s temu',
	            s: 'kilka sekund',
	            ss: translate,
	            m: translate,
	            mm: translate,
	            h: translate,
	            hh: translate,
	            d: '1 dzień',
	            dd: '%d dni',
	            M: 'miesiąc',
	            MM: translate,
	            y: 'rok',
	            yy: translate
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return pl;
	});

/***/ },
/* 423 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Portuguese [pt]
	//! author : Jefferson : https://github.com/jalex79
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var pt = moment.defineLocale('pt', {
	        months: 'janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro'.split('_'),
	        monthsShort: 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split('_'),
	        weekdays: 'Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado'.split('_'),
	        weekdaysShort: 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
	        weekdaysMin: 'Do_2ª_3ª_4ª_5ª_6ª_Sá'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D [de] MMMM [de] YYYY',
	            LLL: 'D [de] MMMM [de] YYYY HH:mm',
	            LLLL: 'dddd, D [de] MMMM [de] YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[Hoje às] LT',
	            nextDay: '[Amanhã às] LT',
	            nextWeek: 'dddd [às] LT',
	            lastDay: '[Ontem às] LT',
	            lastWeek: function lastWeek() {
	                return this.day() === 0 || this.day() === 6 ? '[Último] dddd [às] LT' : // Saturday + Sunday
	                '[Última] dddd [às] LT'; // Monday - Friday
	            },
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'em %s',
	            past: 'há %s',
	            s: 'segundos',
	            ss: '%d segundos',
	            m: 'um minuto',
	            mm: '%d minutos',
	            h: 'uma hora',
	            hh: '%d horas',
	            d: 'um dia',
	            dd: '%d dias',
	            M: 'um mês',
	            MM: '%d meses',
	            y: 'um ano',
	            yy: '%d anos'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}º/,
	        ordinal: '%dº',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return pt;
	});

/***/ },
/* 424 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Portuguese (Brazil) [pt-br]
	//! author : Caio Ribeiro Pereira : https://github.com/caio-ribeiro-pereira
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var ptBr = moment.defineLocale('pt-br', {
	        months: 'janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro'.split('_'),
	        monthsShort: 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split('_'),
	        weekdays: 'Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado'.split('_'),
	        weekdaysShort: 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
	        weekdaysMin: 'Do_2ª_3ª_4ª_5ª_6ª_Sá'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D [de] MMMM [de] YYYY',
	            LLL: 'D [de] MMMM [de] YYYY [às] HH:mm',
	            LLLL: 'dddd, D [de] MMMM [de] YYYY [às] HH:mm'
	        },
	        calendar: {
	            sameDay: '[Hoje às] LT',
	            nextDay: '[Amanhã às] LT',
	            nextWeek: 'dddd [às] LT',
	            lastDay: '[Ontem às] LT',
	            lastWeek: function lastWeek() {
	                return this.day() === 0 || this.day() === 6 ? '[Último] dddd [às] LT' : // Saturday + Sunday
	                '[Última] dddd [às] LT'; // Monday - Friday
	            },
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'em %s',
	            past: '%s atrás',
	            s: 'poucos segundos',
	            ss: '%d segundos',
	            m: 'um minuto',
	            mm: '%d minutos',
	            h: 'uma hora',
	            hh: '%d horas',
	            d: 'um dia',
	            dd: '%d dias',
	            M: 'um mês',
	            MM: '%d meses',
	            y: 'um ano',
	            yy: '%d anos'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}º/,
	        ordinal: '%dº'
	    });
	
	    return ptBr;
	});

/***/ },
/* 425 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Romanian [ro]
	//! author : Vlad Gurdiga : https://github.com/gurdiga
	//! author : Valentin Agachi : https://github.com/avaly
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        var format = {
	            'ss': 'secunde',
	            'mm': 'minute',
	            'hh': 'ore',
	            'dd': 'zile',
	            'MM': 'luni',
	            'yy': 'ani'
	        },
	            separator = ' ';
	        if (number % 100 >= 20 || number >= 100 && number % 100 === 0) {
	            separator = ' de ';
	        }
	        return number + separator + format[key];
	    }
	
	    var ro = moment.defineLocale('ro', {
	        months: 'ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie'.split('_'),
	        monthsShort: 'ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'duminică_luni_marți_miercuri_joi_vineri_sâmbătă'.split('_'),
	        weekdaysShort: 'Dum_Lun_Mar_Mie_Joi_Vin_Sâm'.split('_'),
	        weekdaysMin: 'Du_Lu_Ma_Mi_Jo_Vi_Sâ'.split('_'),
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY H:mm',
	            LLLL: 'dddd, D MMMM YYYY H:mm'
	        },
	        calendar: {
	            sameDay: '[azi la] LT',
	            nextDay: '[mâine la] LT',
	            nextWeek: 'dddd [la] LT',
	            lastDay: '[ieri la] LT',
	            lastWeek: '[fosta] dddd [la] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'peste %s',
	            past: '%s în urmă',
	            s: 'câteva secunde',
	            ss: relativeTimeWithPlural,
	            m: 'un minut',
	            mm: relativeTimeWithPlural,
	            h: 'o oră',
	            hh: relativeTimeWithPlural,
	            d: 'o zi',
	            dd: relativeTimeWithPlural,
	            M: 'o lună',
	            MM: relativeTimeWithPlural,
	            y: 'un an',
	            yy: relativeTimeWithPlural
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return ro;
	});

/***/ },
/* 426 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Russian [ru]
	//! author : Viktorminator : https://github.com/Viktorminator
	//! Author : Menelion Elensúle : https://github.com/Oire
	//! author : Коренберг Марк : https://github.com/socketpair
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    function plural(word, num) {
	        var forms = word.split('_');
	        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2];
	    }
	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        var format = {
	            'ss': withoutSuffix ? 'секунда_секунды_секунд' : 'секунду_секунды_секунд',
	            'mm': withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',
	            'hh': 'час_часа_часов',
	            'dd': 'день_дня_дней',
	            'MM': 'месяц_месяца_месяцев',
	            'yy': 'год_года_лет'
	        };
	        if (key === 'm') {
	            return withoutSuffix ? 'минута' : 'минуту';
	        } else {
	            return number + ' ' + plural(format[key], +number);
	        }
	    }
	    var monthsParse = [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[йя]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i];
	
	    // http://new.gramota.ru/spravka/rules/139-prop : § 103
	    // Сокращения месяцев: http://new.gramota.ru/spravka/buro/search-answer?s=242637
	    // CLDR data:          http://www.unicode.org/cldr/charts/28/summary/ru.html#1753
	    var ru = moment.defineLocale('ru', {
	        months: {
	            format: 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split('_'),
	            standalone: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_')
	        },
	        monthsShort: {
	            // по CLDR именно "июл." и "июн.", но какой смысл менять букву на точку ?
	            format: 'янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.'.split('_'),
	            standalone: 'янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.'.split('_')
	        },
	        weekdays: {
	            standalone: 'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split('_'),
	            format: 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split('_'),
	            isFormat: /\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/
	        },
	        weekdaysShort: 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
	        weekdaysMin: 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
	        monthsParse: monthsParse,
	        longMonthsParse: monthsParse,
	        shortMonthsParse: monthsParse,
	
	        // полные названия с падежами, по три буквы, для некоторых, по 4 буквы, сокращения с точкой и без точки
	        monthsRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,
	
	        // копия предыдущего
	        monthsShortRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,
	
	        // полные названия с падежами
	        monthsStrictRegex: /^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,
	
	        // Выражение, которое соотвествует только сокращённым формам
	        monthsShortStrictRegex: /^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY г.',
	            LLL: 'D MMMM YYYY г., H:mm',
	            LLLL: 'dddd, D MMMM YYYY г., H:mm'
	        },
	        calendar: {
	            sameDay: '[Сегодня в] LT',
	            nextDay: '[Завтра в] LT',
	            lastDay: '[Вчера в] LT',
	            nextWeek: function nextWeek(now) {
	                if (now.week() !== this.week()) {
	                    switch (this.day()) {
	                        case 0:
	                            return '[В следующее] dddd [в] LT';
	                        case 1:
	                        case 2:
	                        case 4:
	                            return '[В следующий] dddd [в] LT';
	                        case 3:
	                        case 5:
	                        case 6:
	                            return '[В следующую] dddd [в] LT';
	                    }
	                } else {
	                    if (this.day() === 2) {
	                        return '[Во] dddd [в] LT';
	                    } else {
	                        return '[В] dddd [в] LT';
	                    }
	                }
	            },
	            lastWeek: function lastWeek(now) {
	                if (now.week() !== this.week()) {
	                    switch (this.day()) {
	                        case 0:
	                            return '[В прошлое] dddd [в] LT';
	                        case 1:
	                        case 2:
	                        case 4:
	                            return '[В прошлый] dddd [в] LT';
	                        case 3:
	                        case 5:
	                        case 6:
	                            return '[В прошлую] dddd [в] LT';
	                    }
	                } else {
	                    if (this.day() === 2) {
	                        return '[Во] dddd [в] LT';
	                    } else {
	                        return '[В] dddd [в] LT';
	                    }
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'через %s',
	            past: '%s назад',
	            s: 'несколько секунд',
	            ss: relativeTimeWithPlural,
	            m: relativeTimeWithPlural,
	            mm: relativeTimeWithPlural,
	            h: 'час',
	            hh: relativeTimeWithPlural,
	            d: 'день',
	            dd: relativeTimeWithPlural,
	            M: 'месяц',
	            MM: relativeTimeWithPlural,
	            y: 'год',
	            yy: relativeTimeWithPlural
	        },
	        meridiemParse: /ночи|утра|дня|вечера/i,
	        isPM: function isPM(input) {
	            return (/^(дня|вечера)$/.test(input)
	            );
	        },
	        meridiem: function meridiem(hour, minute, isLower) {
	            if (hour < 4) {
	                return 'ночи';
	            } else if (hour < 12) {
	                return 'утра';
	            } else if (hour < 17) {
	                return 'дня';
	            } else {
	                return 'вечера';
	            }
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}-(й|го|я)/,
	        ordinal: function ordinal(number, period) {
	            switch (period) {
	                case 'M':
	                case 'd':
	                case 'DDD':
	                    return number + '-й';
	                case 'D':
	                    return number + '-го';
	                case 'w':
	                case 'W':
	                    return number + '-я';
	                default:
	                    return number;
	            }
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return ru;
	});

/***/ },
/* 427 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Sindhi [sd]
	//! author : Narain Sagar : https://github.com/narainsagar
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var months = ['جنوري', 'فيبروري', 'مارچ', 'اپريل', 'مئي', 'جون', 'جولاءِ', 'آگسٽ', 'سيپٽمبر', 'آڪٽوبر', 'نومبر', 'ڊسمبر'];
	    var days = ['آچر', 'سومر', 'اڱارو', 'اربع', 'خميس', 'جمع', 'ڇنڇر'];
	
	    var sd = moment.defineLocale('sd', {
	        months: months,
	        monthsShort: months,
	        weekdays: days,
	        weekdaysShort: days,
	        weekdaysMin: days,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd، D MMMM YYYY HH:mm'
	        },
	        meridiemParse: /صبح|شام/,
	        isPM: function isPM(input) {
	            return 'شام' === input;
	        },
	        meridiem: function meridiem(hour, minute, isLower) {
	            if (hour < 12) {
	                return 'صبح';
	            }
	            return 'شام';
	        },
	        calendar: {
	            sameDay: '[اڄ] LT',
	            nextDay: '[سڀاڻي] LT',
	            nextWeek: 'dddd [اڳين هفتي تي] LT',
	            lastDay: '[ڪالهه] LT',
	            lastWeek: '[گزريل هفتي] dddd [تي] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: '%s پوء',
	            past: '%s اڳ',
	            s: 'چند سيڪنڊ',
	            ss: '%d سيڪنڊ',
	            m: 'هڪ منٽ',
	            mm: '%d منٽ',
	            h: 'هڪ ڪلاڪ',
	            hh: '%d ڪلاڪ',
	            d: 'هڪ ڏينهن',
	            dd: '%d ڏينهن',
	            M: 'هڪ مهينو',
	            MM: '%d مهينا',
	            y: 'هڪ سال',
	            yy: '%d سال'
	        },
	        preparse: function preparse(string) {
	            return string.replace(/،/g, ',');
	        },
	        postformat: function postformat(string) {
	            return string.replace(/,/g, '،');
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return sd;
	});

/***/ },
/* 428 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Northern Sami [se]
	//! authors : Bård Rolstad Henriksen : https://github.com/karamell
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var se = moment.defineLocale('se', {
	        months: 'ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu'.split('_'),
	        monthsShort: 'ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov'.split('_'),
	        weekdays: 'sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat'.split('_'),
	        weekdaysShort: 'sotn_vuos_maŋ_gask_duor_bear_láv'.split('_'),
	        weekdaysMin: 's_v_m_g_d_b_L'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'MMMM D. [b.] YYYY',
	            LLL: 'MMMM D. [b.] YYYY [ti.] HH:mm',
	            LLLL: 'dddd, MMMM D. [b.] YYYY [ti.] HH:mm'
	        },
	        calendar: {
	            sameDay: '[otne ti] LT',
	            nextDay: '[ihttin ti] LT',
	            nextWeek: 'dddd [ti] LT',
	            lastDay: '[ikte ti] LT',
	            lastWeek: '[ovddit] dddd [ti] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: '%s geažes',
	            past: 'maŋit %s',
	            s: 'moadde sekunddat',
	            ss: '%d sekunddat',
	            m: 'okta minuhta',
	            mm: '%d minuhtat',
	            h: 'okta diimmu',
	            hh: '%d diimmut',
	            d: 'okta beaivi',
	            dd: '%d beaivvit',
	            M: 'okta mánnu',
	            MM: '%d mánut',
	            y: 'okta jahki',
	            yy: '%d jagit'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return se;
	});

/***/ },
/* 429 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Sinhalese [si]
	//! author : Sampath Sitinamaluwa : https://github.com/sampathsris
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    /*jshint -W100*/
	
	    var si = moment.defineLocale('si', {
	        months: 'ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්'.split('_'),
	        monthsShort: 'ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ'.split('_'),
	        weekdays: 'ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා'.split('_'),
	        weekdaysShort: 'ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන'.split('_'),
	        weekdaysMin: 'ඉ_ස_අ_බ_බ්‍ර_සි_සෙ'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'a h:mm',
	            LTS: 'a h:mm:ss',
	            L: 'YYYY/MM/DD',
	            LL: 'YYYY MMMM D',
	            LLL: 'YYYY MMMM D, a h:mm',
	            LLLL: 'YYYY MMMM D [වැනි] dddd, a h:mm:ss'
	        },
	        calendar: {
	            sameDay: '[අද] LT[ට]',
	            nextDay: '[හෙට] LT[ට]',
	            nextWeek: 'dddd LT[ට]',
	            lastDay: '[ඊයේ] LT[ට]',
	            lastWeek: '[පසුගිය] dddd LT[ට]',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: '%sකින්',
	            past: '%sකට පෙර',
	            s: 'තත්පර කිහිපය',
	            ss: 'තත්පර %d',
	            m: 'මිනිත්තුව',
	            mm: 'මිනිත්තු %d',
	            h: 'පැය',
	            hh: 'පැය %d',
	            d: 'දිනය',
	            dd: 'දින %d',
	            M: 'මාසය',
	            MM: 'මාස %d',
	            y: 'වසර',
	            yy: 'වසර %d'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2} වැනි/,
	        ordinal: function ordinal(number) {
	            return number + ' වැනි';
	        },
	        meridiemParse: /පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,
	        isPM: function isPM(input) {
	            return input === 'ප.ව.' || input === 'පස් වරු';
	        },
	        meridiem: function meridiem(hours, minutes, isLower) {
	            if (hours > 11) {
	                return isLower ? 'ප.ව.' : 'පස් වරු';
	            } else {
	                return isLower ? 'පෙ.ව.' : 'පෙර වරු';
	            }
	        }
	    });
	
	    return si;
	});

/***/ },
/* 430 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Slovak [sk]
	//! author : Martin Minka : https://github.com/k2s
	//! based on work of petrbela : https://github.com/petrbela
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var months = 'január_február_marec_apríl_máj_jún_júl_august_september_október_november_december'.split('_');
	    var monthsShort = 'jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec'.split('_');
	    function plural(n) {
	        return n > 1 && n < 5;
	    }
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        switch (key) {
	            case 's':
	                // a few seconds / in a few seconds / a few seconds ago
	                return withoutSuffix || isFuture ? 'pár sekúnd' : 'pár sekundami';
	            case 'ss':
	                // 9 seconds / in 9 seconds / 9 seconds ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'sekundy' : 'sekúnd');
	                } else {
	                    return result + 'sekundami';
	                }
	                break;
	            case 'm':
	                // a minute / in a minute / a minute ago
	                return withoutSuffix ? 'minúta' : isFuture ? 'minútu' : 'minútou';
	            case 'mm':
	                // 9 minutes / in 9 minutes / 9 minutes ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'minúty' : 'minút');
	                } else {
	                    return result + 'minútami';
	                }
	                break;
	            case 'h':
	                // an hour / in an hour / an hour ago
	                return withoutSuffix ? 'hodina' : isFuture ? 'hodinu' : 'hodinou';
	            case 'hh':
	                // 9 hours / in 9 hours / 9 hours ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'hodiny' : 'hodín');
	                } else {
	                    return result + 'hodinami';
	                }
	                break;
	            case 'd':
	                // a day / in a day / a day ago
	                return withoutSuffix || isFuture ? 'deň' : 'dňom';
	            case 'dd':
	                // 9 days / in 9 days / 9 days ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'dni' : 'dní');
	                } else {
	                    return result + 'dňami';
	                }
	                break;
	            case 'M':
	                // a month / in a month / a month ago
	                return withoutSuffix || isFuture ? 'mesiac' : 'mesiacom';
	            case 'MM':
	                // 9 months / in 9 months / 9 months ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'mesiace' : 'mesiacov');
	                } else {
	                    return result + 'mesiacmi';
	                }
	                break;
	            case 'y':
	                // a year / in a year / a year ago
	                return withoutSuffix || isFuture ? 'rok' : 'rokom';
	            case 'yy':
	                // 9 years / in 9 years / 9 years ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'roky' : 'rokov');
	                } else {
	                    return result + 'rokmi';
	                }
	                break;
	        }
	    }
	
	    var sk = moment.defineLocale('sk', {
	        months: months,
	        monthsShort: monthsShort,
	        weekdays: 'nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota'.split('_'),
	        weekdaysShort: 'ne_po_ut_st_št_pi_so'.split('_'),
	        weekdaysMin: 'ne_po_ut_st_št_pi_so'.split('_'),
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm',
	            LLLL: 'dddd D. MMMM YYYY H:mm'
	        },
	        calendar: {
	            sameDay: '[dnes o] LT',
	            nextDay: '[zajtra o] LT',
	            nextWeek: function nextWeek() {
	                switch (this.day()) {
	                    case 0:
	                        return '[v nedeľu o] LT';
	                    case 1:
	                    case 2:
	                        return '[v] dddd [o] LT';
	                    case 3:
	                        return '[v stredu o] LT';
	                    case 4:
	                        return '[vo štvrtok o] LT';
	                    case 5:
	                        return '[v piatok o] LT';
	                    case 6:
	                        return '[v sobotu o] LT';
	                }
	            },
	            lastDay: '[včera o] LT',
	            lastWeek: function lastWeek() {
	                switch (this.day()) {
	                    case 0:
	                        return '[minulú nedeľu o] LT';
	                    case 1:
	                    case 2:
	                        return '[minulý] dddd [o] LT';
	                    case 3:
	                        return '[minulú stredu o] LT';
	                    case 4:
	                    case 5:
	                        return '[minulý] dddd [o] LT';
	                    case 6:
	                        return '[minulú sobotu o] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'za %s',
	            past: 'pred %s',
	            s: translate,
	            ss: translate,
	            m: translate,
	            mm: translate,
	            h: translate,
	            hh: translate,
	            d: translate,
	            dd: translate,
	            M: translate,
	            MM: translate,
	            y: translate,
	            yy: translate
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return sk;
	});

/***/ },
/* 431 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Slovenian [sl]
	//! author : Robert Sedovšek : https://github.com/sedovsek
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        switch (key) {
	            case 's':
	                return withoutSuffix || isFuture ? 'nekaj sekund' : 'nekaj sekundami';
	            case 'ss':
	                if (number === 1) {
	                    result += withoutSuffix ? 'sekundo' : 'sekundi';
	                } else if (number === 2) {
	                    result += withoutSuffix || isFuture ? 'sekundi' : 'sekundah';
	                } else if (number < 5) {
	                    result += withoutSuffix || isFuture ? 'sekunde' : 'sekundah';
	                } else {
	                    result += withoutSuffix || isFuture ? 'sekund' : 'sekund';
	                }
	                return result;
	            case 'm':
	                return withoutSuffix ? 'ena minuta' : 'eno minuto';
	            case 'mm':
	                if (number === 1) {
	                    result += withoutSuffix ? 'minuta' : 'minuto';
	                } else if (number === 2) {
	                    result += withoutSuffix || isFuture ? 'minuti' : 'minutama';
	                } else if (number < 5) {
	                    result += withoutSuffix || isFuture ? 'minute' : 'minutami';
	                } else {
	                    result += withoutSuffix || isFuture ? 'minut' : 'minutami';
	                }
	                return result;
	            case 'h':
	                return withoutSuffix ? 'ena ura' : 'eno uro';
	            case 'hh':
	                if (number === 1) {
	                    result += withoutSuffix ? 'ura' : 'uro';
	                } else if (number === 2) {
	                    result += withoutSuffix || isFuture ? 'uri' : 'urama';
	                } else if (number < 5) {
	                    result += withoutSuffix || isFuture ? 'ure' : 'urami';
	                } else {
	                    result += withoutSuffix || isFuture ? 'ur' : 'urami';
	                }
	                return result;
	            case 'd':
	                return withoutSuffix || isFuture ? 'en dan' : 'enim dnem';
	            case 'dd':
	                if (number === 1) {
	                    result += withoutSuffix || isFuture ? 'dan' : 'dnem';
	                } else if (number === 2) {
	                    result += withoutSuffix || isFuture ? 'dni' : 'dnevoma';
	                } else {
	                    result += withoutSuffix || isFuture ? 'dni' : 'dnevi';
	                }
	                return result;
	            case 'M':
	                return withoutSuffix || isFuture ? 'en mesec' : 'enim mesecem';
	            case 'MM':
	                if (number === 1) {
	                    result += withoutSuffix || isFuture ? 'mesec' : 'mesecem';
	                } else if (number === 2) {
	                    result += withoutSuffix || isFuture ? 'meseca' : 'mesecema';
	                } else if (number < 5) {
	                    result += withoutSuffix || isFuture ? 'mesece' : 'meseci';
	                } else {
	                    result += withoutSuffix || isFuture ? 'mesecev' : 'meseci';
	                }
	                return result;
	            case 'y':
	                return withoutSuffix || isFuture ? 'eno leto' : 'enim letom';
	            case 'yy':
	                if (number === 1) {
	                    result += withoutSuffix || isFuture ? 'leto' : 'letom';
	                } else if (number === 2) {
	                    result += withoutSuffix || isFuture ? 'leti' : 'letoma';
	                } else if (number < 5) {
	                    result += withoutSuffix || isFuture ? 'leta' : 'leti';
	                } else {
	                    result += withoutSuffix || isFuture ? 'let' : 'leti';
	                }
	                return result;
	        }
	    }
	
	    var sl = moment.defineLocale('sl', {
	        months: 'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split('_'),
	        monthsShort: 'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota'.split('_'),
	        weekdaysShort: 'ned._pon._tor._sre._čet._pet._sob.'.split('_'),
	        weekdaysMin: 'ne_po_to_sr_če_pe_so'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm',
	            LLLL: 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar: {
	            sameDay: '[danes ob] LT',
	            nextDay: '[jutri ob] LT',
	
	            nextWeek: function nextWeek() {
	                switch (this.day()) {
	                    case 0:
	                        return '[v] [nedeljo] [ob] LT';
	                    case 3:
	                        return '[v] [sredo] [ob] LT';
	                    case 6:
	                        return '[v] [soboto] [ob] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[v] dddd [ob] LT';
	                }
	            },
	            lastDay: '[včeraj ob] LT',
	            lastWeek: function lastWeek() {
	                switch (this.day()) {
	                    case 0:
	                        return '[prejšnjo] [nedeljo] [ob] LT';
	                    case 3:
	                        return '[prejšnjo] [sredo] [ob] LT';
	                    case 6:
	                        return '[prejšnjo] [soboto] [ob] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[prejšnji] dddd [ob] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'čez %s',
	            past: 'pred %s',
	            s: processRelativeTime,
	            ss: processRelativeTime,
	            m: processRelativeTime,
	            mm: processRelativeTime,
	            h: processRelativeTime,
	            hh: processRelativeTime,
	            d: processRelativeTime,
	            dd: processRelativeTime,
	            M: processRelativeTime,
	            MM: processRelativeTime,
	            y: processRelativeTime,
	            yy: processRelativeTime
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return sl;
	});

/***/ },
/* 432 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Albanian [sq]
	//! author : Flakërim Ismani : https://github.com/flakerimi
	//! author : Menelion Elensúle : https://github.com/Oire
	//! author : Oerd Cukalla : https://github.com/oerd
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var sq = moment.defineLocale('sq', {
	        months: 'Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor'.split('_'),
	        monthsShort: 'Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj'.split('_'),
	        weekdays: 'E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë'.split('_'),
	        weekdaysShort: 'Die_Hën_Mar_Mër_Enj_Pre_Sht'.split('_'),
	        weekdaysMin: 'D_H_Ma_Më_E_P_Sh'.split('_'),
	        weekdaysParseExact: true,
	        meridiemParse: /PD|MD/,
	        isPM: function isPM(input) {
	            return input.charAt(0) === 'M';
	        },
	        meridiem: function meridiem(hours, minutes, isLower) {
	            return hours < 12 ? 'PD' : 'MD';
	        },
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[Sot në] LT',
	            nextDay: '[Nesër në] LT',
	            nextWeek: 'dddd [në] LT',
	            lastDay: '[Dje në] LT',
	            lastWeek: 'dddd [e kaluar në] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'në %s',
	            past: '%s më parë',
	            s: 'disa sekonda',
	            ss: '%d sekonda',
	            m: 'një minutë',
	            mm: '%d minuta',
	            h: 'një orë',
	            hh: '%d orë',
	            d: 'një ditë',
	            dd: '%d ditë',
	            M: 'një muaj',
	            MM: '%d muaj',
	            y: 'një vit',
	            yy: '%d vite'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return sq;
	});

/***/ },
/* 433 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Serbian [sr]
	//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var translator = {
	        words: { //Different grammatical cases
	            ss: ['sekunda', 'sekunde', 'sekundi'],
	            m: ['jedan minut', 'jedne minute'],
	            mm: ['minut', 'minute', 'minuta'],
	            h: ['jedan sat', 'jednog sata'],
	            hh: ['sat', 'sata', 'sati'],
	            dd: ['dan', 'dana', 'dana'],
	            MM: ['mesec', 'meseca', 'meseci'],
	            yy: ['godina', 'godine', 'godina']
	        },
	        correctGrammaticalCase: function correctGrammaticalCase(number, wordKey) {
	            return number === 1 ? wordKey[0] : number >= 2 && number <= 4 ? wordKey[1] : wordKey[2];
	        },
	        translate: function translate(number, withoutSuffix, key) {
	            var wordKey = translator.words[key];
	            if (key.length === 1) {
	                return withoutSuffix ? wordKey[0] : wordKey[1];
	            } else {
	                return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
	            }
	        }
	    };
	
	    var sr = moment.defineLocale('sr', {
	        months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),
	        monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota'.split('_'),
	        weekdaysShort: 'ned._pon._uto._sre._čet._pet._sub.'.split('_'),
	        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm',
	            LLLL: 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar: {
	            sameDay: '[danas u] LT',
	            nextDay: '[sutra u] LT',
	            nextWeek: function nextWeek() {
	                switch (this.day()) {
	                    case 0:
	                        return '[u] [nedelju] [u] LT';
	                    case 3:
	                        return '[u] [sredu] [u] LT';
	                    case 6:
	                        return '[u] [subotu] [u] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[u] dddd [u] LT';
	                }
	            },
	            lastDay: '[juče u] LT',
	            lastWeek: function lastWeek() {
	                var lastWeekDays = ['[prošle] [nedelje] [u] LT', '[prošlog] [ponedeljka] [u] LT', '[prošlog] [utorka] [u] LT', '[prošle] [srede] [u] LT', '[prošlog] [četvrtka] [u] LT', '[prošlog] [petka] [u] LT', '[prošle] [subote] [u] LT'];
	                return lastWeekDays[this.day()];
	            },
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'za %s',
	            past: 'pre %s',
	            s: 'nekoliko sekundi',
	            ss: translator.translate,
	            m: translator.translate,
	            mm: translator.translate,
	            h: translator.translate,
	            hh: translator.translate,
	            d: 'dan',
	            dd: translator.translate,
	            M: 'mesec',
	            MM: translator.translate,
	            y: 'godinu',
	            yy: translator.translate
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return sr;
	});

/***/ },
/* 434 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Serbian Cyrillic [sr-cyrl]
	//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var translator = {
	        words: { //Different grammatical cases
	            ss: ['секунда', 'секунде', 'секунди'],
	            m: ['један минут', 'једне минуте'],
	            mm: ['минут', 'минуте', 'минута'],
	            h: ['један сат', 'једног сата'],
	            hh: ['сат', 'сата', 'сати'],
	            dd: ['дан', 'дана', 'дана'],
	            MM: ['месец', 'месеца', 'месеци'],
	            yy: ['година', 'године', 'година']
	        },
	        correctGrammaticalCase: function correctGrammaticalCase(number, wordKey) {
	            return number === 1 ? wordKey[0] : number >= 2 && number <= 4 ? wordKey[1] : wordKey[2];
	        },
	        translate: function translate(number, withoutSuffix, key) {
	            var wordKey = translator.words[key];
	            if (key.length === 1) {
	                return withoutSuffix ? wordKey[0] : wordKey[1];
	            } else {
	                return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
	            }
	        }
	    };
	
	    var srCyrl = moment.defineLocale('sr-cyrl', {
	        months: 'јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар'.split('_'),
	        monthsShort: 'јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'недеља_понедељак_уторак_среда_четвртак_петак_субота'.split('_'),
	        weekdaysShort: 'нед._пон._уто._сре._чет._пет._суб.'.split('_'),
	        weekdaysMin: 'не_по_ут_ср_че_пе_су'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm',
	            LLLL: 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar: {
	            sameDay: '[данас у] LT',
	            nextDay: '[сутра у] LT',
	            nextWeek: function nextWeek() {
	                switch (this.day()) {
	                    case 0:
	                        return '[у] [недељу] [у] LT';
	                    case 3:
	                        return '[у] [среду] [у] LT';
	                    case 6:
	                        return '[у] [суботу] [у] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[у] dddd [у] LT';
	                }
	            },
	            lastDay: '[јуче у] LT',
	            lastWeek: function lastWeek() {
	                var lastWeekDays = ['[прошле] [недеље] [у] LT', '[прошлог] [понедељка] [у] LT', '[прошлог] [уторка] [у] LT', '[прошле] [среде] [у] LT', '[прошлог] [четвртка] [у] LT', '[прошлог] [петка] [у] LT', '[прошле] [суботе] [у] LT'];
	                return lastWeekDays[this.day()];
	            },
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'за %s',
	            past: 'пре %s',
	            s: 'неколико секунди',
	            ss: translator.translate,
	            m: translator.translate,
	            mm: translator.translate,
	            h: translator.translate,
	            hh: translator.translate,
	            d: 'дан',
	            dd: translator.translate,
	            M: 'месец',
	            MM: translator.translate,
	            y: 'годину',
	            yy: translator.translate
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return srCyrl;
	});

/***/ },
/* 435 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : siSwati [ss]
	//! author : Nicolai Davies<mail@nicolai.io> : https://github.com/nicolaidavies
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var ss = moment.defineLocale('ss', {
	        months: "Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split('_'),
	        monthsShort: 'Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo'.split('_'),
	        weekdays: 'Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo'.split('_'),
	        weekdaysShort: 'Lis_Umb_Lsb_Les_Lsi_Lsh_Umg'.split('_'),
	        weekdaysMin: 'Li_Us_Lb_Lt_Ls_Lh_Ug'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'h:mm A',
	            LTS: 'h:mm:ss A',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY h:mm A',
	            LLLL: 'dddd, D MMMM YYYY h:mm A'
	        },
	        calendar: {
	            sameDay: '[Namuhla nga] LT',
	            nextDay: '[Kusasa nga] LT',
	            nextWeek: 'dddd [nga] LT',
	            lastDay: '[Itolo nga] LT',
	            lastWeek: 'dddd [leliphelile] [nga] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'nga %s',
	            past: 'wenteka nga %s',
	            s: 'emizuzwana lomcane',
	            ss: '%d mzuzwana',
	            m: 'umzuzu',
	            mm: '%d emizuzu',
	            h: 'lihora',
	            hh: '%d emahora',
	            d: 'lilanga',
	            dd: '%d emalanga',
	            M: 'inyanga',
	            MM: '%d tinyanga',
	            y: 'umnyaka',
	            yy: '%d iminyaka'
	        },
	        meridiemParse: /ekuseni|emini|entsambama|ebusuku/,
	        meridiem: function meridiem(hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'ekuseni';
	            } else if (hours < 15) {
	                return 'emini';
	            } else if (hours < 19) {
	                return 'entsambama';
	            } else {
	                return 'ebusuku';
	            }
	        },
	        meridiemHour: function meridiemHour(hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'ekuseni') {
	                return hour;
	            } else if (meridiem === 'emini') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'entsambama' || meridiem === 'ebusuku') {
	                if (hour === 0) {
	                    return 0;
	                }
	                return hour + 12;
	            }
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}/,
	        ordinal: '%d',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return ss;
	});

/***/ },
/* 436 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Swedish [sv]
	//! author : Jens Alm : https://github.com/ulmus
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var sv = moment.defineLocale('sv', {
	        months: 'januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december'.split('_'),
	        monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
	        weekdays: 'söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag'.split('_'),
	        weekdaysShort: 'sön_mån_tis_ons_tor_fre_lör'.split('_'),
	        weekdaysMin: 'sö_må_ti_on_to_fr_lö'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'YYYY-MM-DD',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY [kl.] HH:mm',
	            LLLL: 'dddd D MMMM YYYY [kl.] HH:mm',
	            lll: 'D MMM YYYY HH:mm',
	            llll: 'ddd D MMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[Idag] LT',
	            nextDay: '[Imorgon] LT',
	            lastDay: '[Igår] LT',
	            nextWeek: '[På] dddd LT',
	            lastWeek: '[I] dddd[s] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'om %s',
	            past: 'för %s sedan',
	            s: 'några sekunder',
	            ss: '%d sekunder',
	            m: 'en minut',
	            mm: '%d minuter',
	            h: 'en timme',
	            hh: '%d timmar',
	            d: 'en dag',
	            dd: '%d dagar',
	            M: 'en månad',
	            MM: '%d månader',
	            y: 'ett år',
	            yy: '%d år'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(e|a)/,
	        ordinal: function ordinal(number) {
	            var b = number % 10,
	                output = ~~(number % 100 / 10) === 1 ? 'e' : b === 1 ? 'a' : b === 2 ? 'a' : b === 3 ? 'e' : 'e';
	            return number + output;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return sv;
	});

/***/ },
/* 437 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Swahili [sw]
	//! author : Fahad Kassim : https://github.com/fadsel
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var sw = moment.defineLocale('sw', {
	        months: 'Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba'.split('_'),
	        monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des'.split('_'),
	        weekdays: 'Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi'.split('_'),
	        weekdaysShort: 'Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos'.split('_'),
	        weekdaysMin: 'J2_J3_J4_J5_Al_Ij_J1'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[leo saa] LT',
	            nextDay: '[kesho saa] LT',
	            nextWeek: '[wiki ijayo] dddd [saat] LT',
	            lastDay: '[jana] LT',
	            lastWeek: '[wiki iliyopita] dddd [saat] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: '%s baadaye',
	            past: 'tokea %s',
	            s: 'hivi punde',
	            ss: 'sekunde %d',
	            m: 'dakika moja',
	            mm: 'dakika %d',
	            h: 'saa limoja',
	            hh: 'masaa %d',
	            d: 'siku moja',
	            dd: 'masiku %d',
	            M: 'mwezi mmoja',
	            MM: 'miezi %d',
	            y: 'mwaka mmoja',
	            yy: 'miaka %d'
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return sw;
	});

/***/ },
/* 438 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Tamil [ta]
	//! author : Arjunkumar Krishnamoorthy : https://github.com/tk120404
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var symbolMap = {
	        '1': '௧',
	        '2': '௨',
	        '3': '௩',
	        '4': '௪',
	        '5': '௫',
	        '6': '௬',
	        '7': '௭',
	        '8': '௮',
	        '9': '௯',
	        '0': '௦'
	    };
	    var numberMap = {
	        '௧': '1',
	        '௨': '2',
	        '௩': '3',
	        '௪': '4',
	        '௫': '5',
	        '௬': '6',
	        '௭': '7',
	        '௮': '8',
	        '௯': '9',
	        '௦': '0'
	    };
	
	    var ta = moment.defineLocale('ta', {
	        months: 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
	        monthsShort: 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
	        weekdays: 'ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை'.split('_'),
	        weekdaysShort: 'ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி'.split('_'),
	        weekdaysMin: 'ஞா_தி_செ_பு_வி_வெ_ச'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY, HH:mm',
	            LLLL: 'dddd, D MMMM YYYY, HH:mm'
	        },
	        calendar: {
	            sameDay: '[இன்று] LT',
	            nextDay: '[நாளை] LT',
	            nextWeek: 'dddd, LT',
	            lastDay: '[நேற்று] LT',
	            lastWeek: '[கடந்த வாரம்] dddd, LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: '%s இல்',
	            past: '%s முன்',
	            s: 'ஒரு சில விநாடிகள்',
	            ss: '%d விநாடிகள்',
	            m: 'ஒரு நிமிடம்',
	            mm: '%d நிமிடங்கள்',
	            h: 'ஒரு மணி நேரம்',
	            hh: '%d மணி நேரம்',
	            d: 'ஒரு நாள்',
	            dd: '%d நாட்கள்',
	            M: 'ஒரு மாதம்',
	            MM: '%d மாதங்கள்',
	            y: 'ஒரு வருடம்',
	            yy: '%d ஆண்டுகள்'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}வது/,
	        ordinal: function ordinal(number) {
	            return number + 'வது';
	        },
	        preparse: function preparse(string) {
	            return string.replace(/[௧௨௩௪௫௬௭௮௯௦]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function postformat(string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        // refer http://ta.wikipedia.org/s/1er1
	        meridiemParse: /யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,
	        meridiem: function meridiem(hour, minute, isLower) {
	            if (hour < 2) {
	                return ' யாமம்';
	            } else if (hour < 6) {
	                return ' வைகறை'; // வைகறை
	            } else if (hour < 10) {
	                return ' காலை'; // காலை
	            } else if (hour < 14) {
	                return ' நண்பகல்'; // நண்பகல்
	            } else if (hour < 18) {
	                return ' எற்பாடு'; // எற்பாடு
	            } else if (hour < 22) {
	                return ' மாலை'; // மாலை
	            } else {
	                return ' யாமம்';
	            }
	        },
	        meridiemHour: function meridiemHour(hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'யாமம்') {
	                return hour < 2 ? hour : hour + 12;
	            } else if (meridiem === 'வைகறை' || meridiem === 'காலை') {
	                return hour;
	            } else if (meridiem === 'நண்பகல்') {
	                return hour >= 10 ? hour : hour + 12;
	            } else {
	                return hour + 12;
	            }
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 6 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return ta;
	});

/***/ },
/* 439 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Telugu [te]
	//! author : Krishna Chaitanya Thota : https://github.com/kcthota
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var te = moment.defineLocale('te', {
	        months: 'జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జూలై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్'.split('_'),
	        monthsShort: 'జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జూలై_ఆగ._సెప్._అక్టో._నవ._డిసె.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం'.split('_'),
	        weekdaysShort: 'ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని'.split('_'),
	        weekdaysMin: 'ఆ_సో_మం_బు_గు_శు_శ'.split('_'),
	        longDateFormat: {
	            LT: 'A h:mm',
	            LTS: 'A h:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY, A h:mm',
	            LLLL: 'dddd, D MMMM YYYY, A h:mm'
	        },
	        calendar: {
	            sameDay: '[నేడు] LT',
	            nextDay: '[రేపు] LT',
	            nextWeek: 'dddd, LT',
	            lastDay: '[నిన్న] LT',
	            lastWeek: '[గత] dddd, LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: '%s లో',
	            past: '%s క్రితం',
	            s: 'కొన్ని క్షణాలు',
	            ss: '%d సెకన్లు',
	            m: 'ఒక నిమిషం',
	            mm: '%d నిమిషాలు',
	            h: 'ఒక గంట',
	            hh: '%d గంటలు',
	            d: 'ఒక రోజు',
	            dd: '%d రోజులు',
	            M: 'ఒక నెల',
	            MM: '%d నెలలు',
	            y: 'ఒక సంవత్సరం',
	            yy: '%d సంవత్సరాలు'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}వ/,
	        ordinal: '%dవ',
	        meridiemParse: /రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,
	        meridiemHour: function meridiemHour(hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'రాత్రి') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'ఉదయం') {
	                return hour;
	            } else if (meridiem === 'మధ్యాహ్నం') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'సాయంత్రం') {
	                return hour + 12;
	            }
	        },
	        meridiem: function meridiem(hour, minute, isLower) {
	            if (hour < 4) {
	                return 'రాత్రి';
	            } else if (hour < 10) {
	                return 'ఉదయం';
	            } else if (hour < 17) {
	                return 'మధ్యాహ్నం';
	            } else if (hour < 20) {
	                return 'సాయంత్రం';
	            } else {
	                return 'రాత్రి';
	            }
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 6 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return te;
	});

/***/ },
/* 440 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Tetun Dili (East Timor) [tet]
	//! author : Joshua Brooks : https://github.com/joshbrooks
	//! author : Onorio De J. Afonso : https://github.com/marobo
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var tet = moment.defineLocale('tet', {
	        months: 'Janeiru_Fevereiru_Marsu_Abril_Maiu_Juniu_Juliu_Augustu_Setembru_Outubru_Novembru_Dezembru'.split('_'),
	        monthsShort: 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Aug_Set_Out_Nov_Dez'.split('_'),
	        weekdays: 'Domingu_Segunda_Tersa_Kuarta_Kinta_Sexta_Sabadu'.split('_'),
	        weekdaysShort: 'Dom_Seg_Ters_Kua_Kint_Sext_Sab'.split('_'),
	        weekdaysMin: 'Do_Seg_Te_Ku_Ki_Sex_Sa'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[Ohin iha] LT',
	            nextDay: '[Aban iha] LT',
	            nextWeek: 'dddd [iha] LT',
	            lastDay: '[Horiseik iha] LT',
	            lastWeek: 'dddd [semana kotuk] [iha] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'iha %s',
	            past: '%s liuba',
	            s: 'minutu balun',
	            ss: 'minutu %d',
	            m: 'minutu ida',
	            mm: 'minutus %d',
	            h: 'horas ida',
	            hh: 'horas %d',
	            d: 'loron ida',
	            dd: 'loron %d',
	            M: 'fulan ida',
	            MM: 'fulan %d',
	            y: 'tinan ida',
	            yy: 'tinan %d'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal: function ordinal(number) {
	            var b = number % 10,
	                output = ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
	            return number + output;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return tet;
	});

/***/ },
/* 441 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Thai [th]
	//! author : Kridsada Thanabulpong : https://github.com/sirn
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var th = moment.defineLocale('th', {
	        months: 'มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม'.split('_'),
	        monthsShort: 'ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์'.split('_'),
	        weekdaysShort: 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์'.split('_'), // yes, three characters difference
	        weekdaysMin: 'อา._จ._อ._พ._พฤ._ศ._ส.'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY เวลา H:mm',
	            LLLL: 'วันddddที่ D MMMM YYYY เวลา H:mm'
	        },
	        meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/,
	        isPM: function isPM(input) {
	            return input === 'หลังเที่ยง';
	        },
	        meridiem: function meridiem(hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ก่อนเที่ยง';
	            } else {
	                return 'หลังเที่ยง';
	            }
	        },
	        calendar: {
	            sameDay: '[วันนี้ เวลา] LT',
	            nextDay: '[พรุ่งนี้ เวลา] LT',
	            nextWeek: 'dddd[หน้า เวลา] LT',
	            lastDay: '[เมื่อวานนี้ เวลา] LT',
	            lastWeek: '[วัน]dddd[ที่แล้ว เวลา] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'อีก %s',
	            past: '%sที่แล้ว',
	            s: 'ไม่กี่วินาที',
	            ss: '%d วินาที',
	            m: '1 นาที',
	            mm: '%d นาที',
	            h: '1 ชั่วโมง',
	            hh: '%d ชั่วโมง',
	            d: '1 วัน',
	            dd: '%d วัน',
	            M: '1 เดือน',
	            MM: '%d เดือน',
	            y: '1 ปี',
	            yy: '%d ปี'
	        }
	    });
	
	    return th;
	});

/***/ },
/* 442 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Tagalog (Philippines) [tl-ph]
	//! author : Dan Hagman : https://github.com/hagmandan
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var tlPh = moment.defineLocale('tl-ph', {
	        months: 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split('_'),
	        monthsShort: 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
	        weekdays: 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split('_'),
	        weekdaysShort: 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
	        weekdaysMin: 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'MM/D/YYYY',
	            LL: 'MMMM D, YYYY',
	            LLL: 'MMMM D, YYYY HH:mm',
	            LLLL: 'dddd, MMMM DD, YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: 'LT [ngayong araw]',
	            nextDay: '[Bukas ng] LT',
	            nextWeek: 'LT [sa susunod na] dddd',
	            lastDay: 'LT [kahapon]',
	            lastWeek: 'LT [noong nakaraang] dddd',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'sa loob ng %s',
	            past: '%s ang nakalipas',
	            s: 'ilang segundo',
	            ss: '%d segundo',
	            m: 'isang minuto',
	            mm: '%d minuto',
	            h: 'isang oras',
	            hh: '%d oras',
	            d: 'isang araw',
	            dd: '%d araw',
	            M: 'isang buwan',
	            MM: '%d buwan',
	            y: 'isang taon',
	            yy: '%d taon'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}/,
	        ordinal: function ordinal(number) {
	            return number;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return tlPh;
	});

/***/ },
/* 443 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Klingon [tlh]
	//! author : Dominika Kruk : https://github.com/amaranthrose
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var numbersNouns = 'pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut'.split('_');
	
	    function translateFuture(output) {
	        var time = output;
	        time = output.indexOf('jaj') !== -1 ? time.slice(0, -3) + 'leS' : output.indexOf('jar') !== -1 ? time.slice(0, -3) + 'waQ' : output.indexOf('DIS') !== -1 ? time.slice(0, -3) + 'nem' : time + ' pIq';
	        return time;
	    }
	
	    function translatePast(output) {
	        var time = output;
	        time = output.indexOf('jaj') !== -1 ? time.slice(0, -3) + 'Hu’' : output.indexOf('jar') !== -1 ? time.slice(0, -3) + 'wen' : output.indexOf('DIS') !== -1 ? time.slice(0, -3) + 'ben' : time + ' ret';
	        return time;
	    }
	
	    function translate(number, withoutSuffix, string, isFuture) {
	        var numberNoun = numberAsNoun(number);
	        switch (string) {
	            case 'ss':
	                return numberNoun + ' lup';
	            case 'mm':
	                return numberNoun + ' tup';
	            case 'hh':
	                return numberNoun + ' rep';
	            case 'dd':
	                return numberNoun + ' jaj';
	            case 'MM':
	                return numberNoun + ' jar';
	            case 'yy':
	                return numberNoun + ' DIS';
	        }
	    }
	
	    function numberAsNoun(number) {
	        var hundred = Math.floor(number % 1000 / 100),
	            ten = Math.floor(number % 100 / 10),
	            one = number % 10,
	            word = '';
	        if (hundred > 0) {
	            word += numbersNouns[hundred] + 'vatlh';
	        }
	        if (ten > 0) {
	            word += (word !== '' ? ' ' : '') + numbersNouns[ten] + 'maH';
	        }
	        if (one > 0) {
	            word += (word !== '' ? ' ' : '') + numbersNouns[one];
	        }
	        return word === '' ? 'pagh' : word;
	    }
	
	    var tlh = moment.defineLocale('tlh', {
	        months: 'tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’'.split('_'),
	        monthsShort: 'jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
	        weekdaysShort: 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
	        weekdaysMin: 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[DaHjaj] LT',
	            nextDay: '[wa’leS] LT',
	            nextWeek: 'LLL',
	            lastDay: '[wa’Hu’] LT',
	            lastWeek: 'LLL',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: translateFuture,
	            past: translatePast,
	            s: 'puS lup',
	            ss: translate,
	            m: 'wa’ tup',
	            mm: translate,
	            h: 'wa’ rep',
	            hh: translate,
	            d: 'wa’ jaj',
	            dd: translate,
	            M: 'wa’ jar',
	            MM: translate,
	            y: 'wa’ DIS',
	            yy: translate
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return tlh;
	});

/***/ },
/* 444 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Turkish [tr]
	//! authors : Erhan Gundogan : https://github.com/erhangundogan,
	//!           Burak Yiğit Kaya: https://github.com/BYK
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var suffixes = {
	        1: '\'inci',
	        5: '\'inci',
	        8: '\'inci',
	        70: '\'inci',
	        80: '\'inci',
	        2: '\'nci',
	        7: '\'nci',
	        20: '\'nci',
	        50: '\'nci',
	        3: '\'üncü',
	        4: '\'üncü',
	        100: '\'üncü',
	        6: '\'ncı',
	        9: '\'uncu',
	        10: '\'uncu',
	        30: '\'uncu',
	        60: '\'ıncı',
	        90: '\'ıncı'
	    };
	
	    var tr = moment.defineLocale('tr', {
	        months: 'Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık'.split('_'),
	        monthsShort: 'Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara'.split('_'),
	        weekdays: 'Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi'.split('_'),
	        weekdaysShort: 'Paz_Pts_Sal_Çar_Per_Cum_Cts'.split('_'),
	        weekdaysMin: 'Pz_Pt_Sa_Ça_Pe_Cu_Ct'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[bugün saat] LT',
	            nextDay: '[yarın saat] LT',
	            nextWeek: '[gelecek] dddd [saat] LT',
	            lastDay: '[dün] LT',
	            lastWeek: '[geçen] dddd [saat] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: '%s sonra',
	            past: '%s önce',
	            s: 'birkaç saniye',
	            ss: '%d saniye',
	            m: 'bir dakika',
	            mm: '%d dakika',
	            h: 'bir saat',
	            hh: '%d saat',
	            d: 'bir gün',
	            dd: '%d gün',
	            M: 'bir ay',
	            MM: '%d ay',
	            y: 'bir yıl',
	            yy: '%d yıl'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/,
	        ordinal: function ordinal(number) {
	            if (number === 0) {
	                // special case for zero
	                return number + '\'ıncı';
	            }
	            var a = number % 10,
	                b = number % 100 - a,
	                c = number >= 100 ? 100 : null;
	            return number + (suffixes[a] || suffixes[b] || suffixes[c]);
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return tr;
	});

/***/ },
/* 445 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Talossan [tzl]
	//! author : Robin van der Vliet : https://github.com/robin0van0der0v
	//! author : Iustì Canun
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    // After the year there should be a slash and the amount of years since December 26, 1979 in Roman numerals.
	    // This is currently too difficult (maybe even impossible) to add.
	
	    var tzl = moment.defineLocale('tzl', {
	        months: 'Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar'.split('_'),
	        monthsShort: 'Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec'.split('_'),
	        weekdays: 'Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi'.split('_'),
	        weekdaysShort: 'Súl_Lún_Mai_Már_Xhú_Vié_Sát'.split('_'),
	        weekdaysMin: 'Sú_Lú_Ma_Má_Xh_Vi_Sá'.split('_'),
	        longDateFormat: {
	            LT: 'HH.mm',
	            LTS: 'HH.mm.ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM [dallas] YYYY',
	            LLL: 'D. MMMM [dallas] YYYY HH.mm',
	            LLLL: 'dddd, [li] D. MMMM [dallas] YYYY HH.mm'
	        },
	        meridiemParse: /d\'o|d\'a/i,
	        isPM: function isPM(input) {
	            return 'd\'o' === input.toLowerCase();
	        },
	        meridiem: function meridiem(hours, minutes, isLower) {
	            if (hours > 11) {
	                return isLower ? 'd\'o' : 'D\'O';
	            } else {
	                return isLower ? 'd\'a' : 'D\'A';
	            }
	        },
	        calendar: {
	            sameDay: '[oxhi à] LT',
	            nextDay: '[demà à] LT',
	            nextWeek: 'dddd [à] LT',
	            lastDay: '[ieiri à] LT',
	            lastWeek: '[sür el] dddd [lasteu à] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'osprei %s',
	            past: 'ja%s',
	            s: processRelativeTime,
	            ss: processRelativeTime,
	            m: processRelativeTime,
	            mm: processRelativeTime,
	            h: processRelativeTime,
	            hh: processRelativeTime,
	            d: processRelativeTime,
	            dd: processRelativeTime,
	            M: processRelativeTime,
	            MM: processRelativeTime,
	            y: processRelativeTime,
	            yy: processRelativeTime
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            's': ['viensas secunds', '\'iensas secunds'],
	            'ss': [number + ' secunds', '' + number + ' secunds'],
	            'm': ['\'n míut', '\'iens míut'],
	            'mm': [number + ' míuts', '' + number + ' míuts'],
	            'h': ['\'n þora', '\'iensa þora'],
	            'hh': [number + ' þoras', '' + number + ' þoras'],
	            'd': ['\'n ziua', '\'iensa ziua'],
	            'dd': [number + ' ziuas', '' + number + ' ziuas'],
	            'M': ['\'n mes', '\'iens mes'],
	            'MM': [number + ' mesen', '' + number + ' mesen'],
	            'y': ['\'n ar', '\'iens ar'],
	            'yy': [number + ' ars', '' + number + ' ars']
	        };
	        return isFuture ? format[key][0] : withoutSuffix ? format[key][0] : format[key][1];
	    }
	
	    return tzl;
	});

/***/ },
/* 446 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Central Atlas Tamazight [tzm]
	//! author : Abdel Said : https://github.com/abdelsaid
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var tzm = moment.defineLocale('tzm', {
	        months: 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
	        monthsShort: 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
	        weekdays: 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	        weekdaysShort: 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	        weekdaysMin: 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[ⴰⵙⴷⵅ ⴴ] LT',
	            nextDay: '[ⴰⵙⴽⴰ ⴴ] LT',
	            nextWeek: 'dddd [ⴴ] LT',
	            lastDay: '[ⴰⵚⴰⵏⵜ ⴴ] LT',
	            lastWeek: 'dddd [ⴴ] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s',
	            past: 'ⵢⴰⵏ %s',
	            s: 'ⵉⵎⵉⴽ',
	            ss: '%d ⵉⵎⵉⴽ',
	            m: 'ⵎⵉⵏⵓⴺ',
	            mm: '%d ⵎⵉⵏⵓⴺ',
	            h: 'ⵙⴰⵄⴰ',
	            hh: '%d ⵜⴰⵙⵙⴰⵄⵉⵏ',
	            d: 'ⴰⵙⵙ',
	            dd: '%d oⵙⵙⴰⵏ',
	            M: 'ⴰⵢoⵓⵔ',
	            MM: '%d ⵉⵢⵢⵉⵔⵏ',
	            y: 'ⴰⵙⴳⴰⵙ',
	            yy: '%d ⵉⵙⴳⴰⵙⵏ'
	        },
	        week: {
	            dow: 6, // Saturday is the first day of the week.
	            doy: 12 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return tzm;
	});

/***/ },
/* 447 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Central Atlas Tamazight Latin [tzm-latn]
	//! author : Abdel Said : https://github.com/abdelsaid
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var tzmLatn = moment.defineLocale('tzm-latn', {
	        months: 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
	        monthsShort: 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
	        weekdays: 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	        weekdaysShort: 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	        weekdaysMin: 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[asdkh g] LT',
	            nextDay: '[aska g] LT',
	            nextWeek: 'dddd [g] LT',
	            lastDay: '[assant g] LT',
	            lastWeek: 'dddd [g] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'dadkh s yan %s',
	            past: 'yan %s',
	            s: 'imik',
	            ss: '%d imik',
	            m: 'minuḍ',
	            mm: '%d minuḍ',
	            h: 'saɛa',
	            hh: '%d tassaɛin',
	            d: 'ass',
	            dd: '%d ossan',
	            M: 'ayowr',
	            MM: '%d iyyirn',
	            y: 'asgas',
	            yy: '%d isgasn'
	        },
	        week: {
	            dow: 6, // Saturday is the first day of the week.
	            doy: 12 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return tzmLatn;
	});

/***/ },
/* 448 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Ukrainian [uk]
	//! author : zemlanin : https://github.com/zemlanin
	//! Author : Menelion Elensúle : https://github.com/Oire
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    function plural(word, num) {
	        var forms = word.split('_');
	        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2];
	    }
	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        var format = {
	            'ss': withoutSuffix ? 'секунда_секунди_секунд' : 'секунду_секунди_секунд',
	            'mm': withoutSuffix ? 'хвилина_хвилини_хвилин' : 'хвилину_хвилини_хвилин',
	            'hh': withoutSuffix ? 'година_години_годин' : 'годину_години_годин',
	            'dd': 'день_дні_днів',
	            'MM': 'місяць_місяці_місяців',
	            'yy': 'рік_роки_років'
	        };
	        if (key === 'm') {
	            return withoutSuffix ? 'хвилина' : 'хвилину';
	        } else if (key === 'h') {
	            return withoutSuffix ? 'година' : 'годину';
	        } else {
	            return number + ' ' + plural(format[key], +number);
	        }
	    }
	    function weekdaysCaseReplace(m, format) {
	        var weekdays = {
	            'nominative': 'неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота'.split('_'),
	            'accusative': 'неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу'.split('_'),
	            'genitive': 'неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи'.split('_')
	        };
	
	        if (!m) {
	            return weekdays['nominative'];
	        }
	
	        var nounCase = /(\[[ВвУу]\]) ?dddd/.test(format) ? 'accusative' : /\[?(?:минулої|наступної)? ?\] ?dddd/.test(format) ? 'genitive' : 'nominative';
	        return weekdays[nounCase][m.day()];
	    }
	    function processHoursFunction(str) {
	        return function () {
	            return str + 'о' + (this.hours() === 11 ? 'б' : '') + '] LT';
	        };
	    }
	
	    var uk = moment.defineLocale('uk', {
	        months: {
	            'format': 'січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня'.split('_'),
	            'standalone': 'січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень'.split('_')
	        },
	        monthsShort: 'січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд'.split('_'),
	        weekdays: weekdaysCaseReplace,
	        weekdaysShort: 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	        weekdaysMin: 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY р.',
	            LLL: 'D MMMM YYYY р., HH:mm',
	            LLLL: 'dddd, D MMMM YYYY р., HH:mm'
	        },
	        calendar: {
	            sameDay: processHoursFunction('[Сьогодні '),
	            nextDay: processHoursFunction('[Завтра '),
	            lastDay: processHoursFunction('[Вчора '),
	            nextWeek: processHoursFunction('[У] dddd ['),
	            lastWeek: function lastWeek() {
	                switch (this.day()) {
	                    case 0:
	                    case 3:
	                    case 5:
	                    case 6:
	                        return processHoursFunction('[Минулої] dddd [').call(this);
	                    case 1:
	                    case 2:
	                    case 4:
	                        return processHoursFunction('[Минулого] dddd [').call(this);
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'за %s',
	            past: '%s тому',
	            s: 'декілька секунд',
	            ss: relativeTimeWithPlural,
	            m: relativeTimeWithPlural,
	            mm: relativeTimeWithPlural,
	            h: 'годину',
	            hh: relativeTimeWithPlural,
	            d: 'день',
	            dd: relativeTimeWithPlural,
	            M: 'місяць',
	            MM: relativeTimeWithPlural,
	            y: 'рік',
	            yy: relativeTimeWithPlural
	        },
	        // M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason
	        meridiemParse: /ночі|ранку|дня|вечора/,
	        isPM: function isPM(input) {
	            return (/^(дня|вечора)$/.test(input)
	            );
	        },
	        meridiem: function meridiem(hour, minute, isLower) {
	            if (hour < 4) {
	                return 'ночі';
	            } else if (hour < 12) {
	                return 'ранку';
	            } else if (hour < 17) {
	                return 'дня';
	            } else {
	                return 'вечора';
	            }
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}-(й|го)/,
	        ordinal: function ordinal(number, period) {
	            switch (period) {
	                case 'M':
	                case 'd':
	                case 'DDD':
	                case 'w':
	                case 'W':
	                    return number + '-й';
	                case 'D':
	                    return number + '-го';
	                default:
	                    return number;
	            }
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return uk;
	});

/***/ },
/* 449 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Urdu [ur]
	//! author : Sawood Alam : https://github.com/ibnesayeed
	//! author : Zack : https://github.com/ZackVision
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var months = ['جنوری', 'فروری', 'مارچ', 'اپریل', 'مئی', 'جون', 'جولائی', 'اگست', 'ستمبر', 'اکتوبر', 'نومبر', 'دسمبر'];
	    var days = ['اتوار', 'پیر', 'منگل', 'بدھ', 'جمعرات', 'جمعہ', 'ہفتہ'];
	
	    var ur = moment.defineLocale('ur', {
	        months: months,
	        monthsShort: months,
	        weekdays: days,
	        weekdaysShort: days,
	        weekdaysMin: days,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd، D MMMM YYYY HH:mm'
	        },
	        meridiemParse: /صبح|شام/,
	        isPM: function isPM(input) {
	            return 'شام' === input;
	        },
	        meridiem: function meridiem(hour, minute, isLower) {
	            if (hour < 12) {
	                return 'صبح';
	            }
	            return 'شام';
	        },
	        calendar: {
	            sameDay: '[آج بوقت] LT',
	            nextDay: '[کل بوقت] LT',
	            nextWeek: 'dddd [بوقت] LT',
	            lastDay: '[گذشتہ روز بوقت] LT',
	            lastWeek: '[گذشتہ] dddd [بوقت] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: '%s بعد',
	            past: '%s قبل',
	            s: 'چند سیکنڈ',
	            ss: '%d سیکنڈ',
	            m: 'ایک منٹ',
	            mm: '%d منٹ',
	            h: 'ایک گھنٹہ',
	            hh: '%d گھنٹے',
	            d: 'ایک دن',
	            dd: '%d دن',
	            M: 'ایک ماہ',
	            MM: '%d ماہ',
	            y: 'ایک سال',
	            yy: '%d سال'
	        },
	        preparse: function preparse(string) {
	            return string.replace(/،/g, ',');
	        },
	        postformat: function postformat(string) {
	            return string.replace(/,/g, '،');
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return ur;
	});

/***/ },
/* 450 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Uzbek [uz]
	//! author : Sardor Muminov : https://github.com/muminoff
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var uz = moment.defineLocale('uz', {
	        months: 'январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр'.split('_'),
	        monthsShort: 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
	        weekdays: 'Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба'.split('_'),
	        weekdaysShort: 'Якш_Душ_Сеш_Чор_Пай_Жум_Шан'.split('_'),
	        weekdaysMin: 'Як_Ду_Се_Чо_Па_Жу_Ша'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'D MMMM YYYY, dddd HH:mm'
	        },
	        calendar: {
	            sameDay: '[Бугун соат] LT [да]',
	            nextDay: '[Эртага] LT [да]',
	            nextWeek: 'dddd [куни соат] LT [да]',
	            lastDay: '[Кеча соат] LT [да]',
	            lastWeek: '[Утган] dddd [куни соат] LT [да]',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'Якин %s ичида',
	            past: 'Бир неча %s олдин',
	            s: 'фурсат',
	            ss: '%d фурсат',
	            m: 'бир дакика',
	            mm: '%d дакика',
	            h: 'бир соат',
	            hh: '%d соат',
	            d: 'бир кун',
	            dd: '%d кун',
	            M: 'бир ой',
	            MM: '%d ой',
	            y: 'бир йил',
	            yy: '%d йил'
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return uz;
	});

/***/ },
/* 451 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Uzbek Latin [uz-latn]
	//! author : Rasulbek Mirzayev : github.com/Rasulbeeek
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var uzLatn = moment.defineLocale('uz-latn', {
	        months: 'Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr'.split('_'),
	        monthsShort: 'Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek'.split('_'),
	        weekdays: 'Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba'.split('_'),
	        weekdaysShort: 'Yak_Dush_Sesh_Chor_Pay_Jum_Shan'.split('_'),
	        weekdaysMin: 'Ya_Du_Se_Cho_Pa_Ju_Sha'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'D MMMM YYYY, dddd HH:mm'
	        },
	        calendar: {
	            sameDay: '[Bugun soat] LT [da]',
	            nextDay: '[Ertaga] LT [da]',
	            nextWeek: 'dddd [kuni soat] LT [da]',
	            lastDay: '[Kecha soat] LT [da]',
	            lastWeek: '[O\'tgan] dddd [kuni soat] LT [da]',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'Yaqin %s ichida',
	            past: 'Bir necha %s oldin',
	            s: 'soniya',
	            ss: '%d soniya',
	            m: 'bir daqiqa',
	            mm: '%d daqiqa',
	            h: 'bir soat',
	            hh: '%d soat',
	            d: 'bir kun',
	            dd: '%d kun',
	            M: 'bir oy',
	            MM: '%d oy',
	            y: 'bir yil',
	            yy: '%d yil'
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return uzLatn;
	});

/***/ },
/* 452 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Vietnamese [vi]
	//! author : Bang Nguyen : https://github.com/bangnk
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var vi = moment.defineLocale('vi', {
	        months: 'tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12'.split('_'),
	        monthsShort: 'Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy'.split('_'),
	        weekdaysShort: 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
	        weekdaysMin: 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
	        weekdaysParseExact: true,
	        meridiemParse: /sa|ch/i,
	        isPM: function isPM(input) {
	            return (/^ch$/i.test(input)
	            );
	        },
	        meridiem: function meridiem(hours, minutes, isLower) {
	            if (hours < 12) {
	                return isLower ? 'sa' : 'SA';
	            } else {
	                return isLower ? 'ch' : 'CH';
	            }
	        },
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM [năm] YYYY',
	            LLL: 'D MMMM [năm] YYYY HH:mm',
	            LLLL: 'dddd, D MMMM [năm] YYYY HH:mm',
	            l: 'DD/M/YYYY',
	            ll: 'D MMM YYYY',
	            lll: 'D MMM YYYY HH:mm',
	            llll: 'ddd, D MMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[Hôm nay lúc] LT',
	            nextDay: '[Ngày mai lúc] LT',
	            nextWeek: 'dddd [tuần tới lúc] LT',
	            lastDay: '[Hôm qua lúc] LT',
	            lastWeek: 'dddd [tuần rồi lúc] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: '%s tới',
	            past: '%s trước',
	            s: 'vài giây',
	            ss: '%d giây',
	            m: 'một phút',
	            mm: '%d phút',
	            h: 'một giờ',
	            hh: '%d giờ',
	            d: 'một ngày',
	            dd: '%d ngày',
	            M: 'một tháng',
	            MM: '%d tháng',
	            y: 'một năm',
	            yy: '%d năm'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}/,
	        ordinal: function ordinal(number) {
	            return number;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return vi;
	});

/***/ },
/* 453 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Pseudo [x-pseudo]
	//! author : Andrew Hood : https://github.com/andrewhood125
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var xPseudo = moment.defineLocale('x-pseudo', {
	        months: 'J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér'.split('_'),
	        monthsShort: 'J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý'.split('_'),
	        weekdaysShort: 'S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát'.split('_'),
	        weekdaysMin: 'S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[T~ódá~ý át] LT',
	            nextDay: '[T~ómó~rró~w át] LT',
	            nextWeek: 'dddd [át] LT',
	            lastDay: '[Ý~ést~érdá~ý át] LT',
	            lastWeek: '[L~ást] dddd [át] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'í~ñ %s',
	            past: '%s á~gó',
	            s: 'á ~féw ~sécó~ñds',
	            ss: '%d s~écóñ~ds',
	            m: 'á ~míñ~úté',
	            mm: '%d m~íñú~tés',
	            h: 'á~ñ hó~úr',
	            hh: '%d h~óúrs',
	            d: 'á ~dáý',
	            dd: '%d d~áýs',
	            M: 'á ~móñ~th',
	            MM: '%d m~óñt~hs',
	            y: 'á ~ýéár',
	            yy: '%d ý~éárs'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
	        ordinal: function ordinal(number) {
	            var b = number % 10,
	                output = ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
	            return number + output;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return xPseudo;
	});

/***/ },
/* 454 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Yoruba Nigeria [yo]
	//! author : Atolagbe Abisoye : https://github.com/andela-batolagbe
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var yo = moment.defineLocale('yo', {
	        months: 'Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀'.split('_'),
	        monthsShort: 'Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀'.split('_'),
	        weekdays: 'Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta'.split('_'),
	        weekdaysShort: 'Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá'.split('_'),
	        weekdaysMin: 'Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb'.split('_'),
	        longDateFormat: {
	            LT: 'h:mm A',
	            LTS: 'h:mm:ss A',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY h:mm A',
	            LLLL: 'dddd, D MMMM YYYY h:mm A'
	        },
	        calendar: {
	            sameDay: '[Ònì ni] LT',
	            nextDay: '[Ọ̀la ni] LT',
	            nextWeek: 'dddd [Ọsẹ̀ tón\'bọ] [ni] LT',
	            lastDay: '[Àna ni] LT',
	            lastWeek: 'dddd [Ọsẹ̀ tólọ́] [ni] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'ní %s',
	            past: '%s kọjá',
	            s: 'ìsẹjú aayá die',
	            ss: 'aayá %d',
	            m: 'ìsẹjú kan',
	            mm: 'ìsẹjú %d',
	            h: 'wákati kan',
	            hh: 'wákati %d',
	            d: 'ọjọ́ kan',
	            dd: 'ọjọ́ %d',
	            M: 'osù kan',
	            MM: 'osù %d',
	            y: 'ọdún kan',
	            yy: 'ọdún %d'
	        },
	        dayOfMonthOrdinalParse: /ọjọ́\s\d{1,2}/,
	        ordinal: 'ọjọ́ %d',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return yo;
	});

/***/ },
/* 455 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Chinese (China) [zh-cn]
	//! author : suupic : https://github.com/suupic
	//! author : Zeno Zeng : https://github.com/zenozeng
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var zhCn = moment.defineLocale('zh-cn', {
	        months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
	        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	        weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
	        weekdaysShort: '周日_周一_周二_周三_周四_周五_周六'.split('_'),
	        weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'YYYY/MM/DD',
	            LL: 'YYYY年M月D日',
	            LLL: 'YYYY年M月D日Ah点mm分',
	            LLLL: 'YYYY年M月D日ddddAh点mm分',
	            l: 'YYYY/M/D',
	            ll: 'YYYY年M月D日',
	            lll: 'YYYY年M月D日 HH:mm',
	            llll: 'YYYY年M月D日dddd HH:mm'
	        },
	        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
	        meridiemHour: function meridiemHour(hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
	                return hour;
	            } else if (meridiem === '下午' || meridiem === '晚上') {
	                return hour + 12;
	            } else {
	                // '中午'
	                return hour >= 11 ? hour : hour + 12;
	            }
	        },
	        meridiem: function meridiem(hour, minute, isLower) {
	            var hm = hour * 100 + minute;
	            if (hm < 600) {
	                return '凌晨';
	            } else if (hm < 900) {
	                return '早上';
	            } else if (hm < 1130) {
	                return '上午';
	            } else if (hm < 1230) {
	                return '中午';
	            } else if (hm < 1800) {
	                return '下午';
	            } else {
	                return '晚上';
	            }
	        },
	        calendar: {
	            sameDay: '[今天]LT',
	            nextDay: '[明天]LT',
	            nextWeek: '[下]ddddLT',
	            lastDay: '[昨天]LT',
	            lastWeek: '[上]ddddLT',
	            sameElse: 'L'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(日|月|周)/,
	        ordinal: function ordinal(number, period) {
	            switch (period) {
	                case 'd':
	                case 'D':
	                case 'DDD':
	                    return number + '日';
	                case 'M':
	                    return number + '月';
	                case 'w':
	                case 'W':
	                    return number + '周';
	                default:
	                    return number;
	            }
	        },
	        relativeTime: {
	            future: '%s内',
	            past: '%s前',
	            s: '几秒',
	            ss: '%d 秒',
	            m: '1 分钟',
	            mm: '%d 分钟',
	            h: '1 小时',
	            hh: '%d 小时',
	            d: '1 天',
	            dd: '%d 天',
	            M: '1 个月',
	            MM: '%d 个月',
	            y: '1 年',
	            yy: '%d 年'
	        },
	        week: {
	            // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return zhCn;
	});

/***/ },
/* 456 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Chinese (Hong Kong) [zh-hk]
	//! author : Ben : https://github.com/ben-lin
	//! author : Chris Lam : https://github.com/hehachris
	//! author : Konstantin : https://github.com/skfd
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var zhHk = moment.defineLocale('zh-hk', {
	        months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
	        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	        weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
	        weekdaysShort: '週日_週一_週二_週三_週四_週五_週六'.split('_'),
	        weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'YYYY/MM/DD',
	            LL: 'YYYY年M月D日',
	            LLL: 'YYYY年M月D日 HH:mm',
	            LLLL: 'YYYY年M月D日dddd HH:mm',
	            l: 'YYYY/M/D',
	            ll: 'YYYY年M月D日',
	            lll: 'YYYY年M月D日 HH:mm',
	            llll: 'YYYY年M月D日dddd HH:mm'
	        },
	        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
	        meridiemHour: function meridiemHour(hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
	                return hour;
	            } else if (meridiem === '中午') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === '下午' || meridiem === '晚上') {
	                return hour + 12;
	            }
	        },
	        meridiem: function meridiem(hour, minute, isLower) {
	            var hm = hour * 100 + minute;
	            if (hm < 600) {
	                return '凌晨';
	            } else if (hm < 900) {
	                return '早上';
	            } else if (hm < 1130) {
	                return '上午';
	            } else if (hm < 1230) {
	                return '中午';
	            } else if (hm < 1800) {
	                return '下午';
	            } else {
	                return '晚上';
	            }
	        },
	        calendar: {
	            sameDay: '[今天]LT',
	            nextDay: '[明天]LT',
	            nextWeek: '[下]ddddLT',
	            lastDay: '[昨天]LT',
	            lastWeek: '[上]ddddLT',
	            sameElse: 'L'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
	        ordinal: function ordinal(number, period) {
	            switch (period) {
	                case 'd':
	                case 'D':
	                case 'DDD':
	                    return number + '日';
	                case 'M':
	                    return number + '月';
	                case 'w':
	                case 'W':
	                    return number + '週';
	                default:
	                    return number;
	            }
	        },
	        relativeTime: {
	            future: '%s內',
	            past: '%s前',
	            s: '幾秒',
	            ss: '%d 秒',
	            m: '1 分鐘',
	            mm: '%d 分鐘',
	            h: '1 小時',
	            hh: '%d 小時',
	            d: '1 天',
	            dd: '%d 天',
	            M: '1 個月',
	            MM: '%d 個月',
	            y: '1 年',
	            yy: '%d 年'
	        }
	    });
	
	    return zhHk;
	});

/***/ },
/* 457 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//! moment.js locale configuration
	//! locale : Chinese (Taiwan) [zh-tw]
	//! author : Ben : https://github.com/ben-lin
	//! author : Chris Lam : https://github.com/hehachris
	
	;(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(337)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(337)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.moment);
	})(undefined, function (moment) {
	    'use strict';
	
	    var zhTw = moment.defineLocale('zh-tw', {
	        months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
	        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	        weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
	        weekdaysShort: '週日_週一_週二_週三_週四_週五_週六'.split('_'),
	        weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'YYYY/MM/DD',
	            LL: 'YYYY年M月D日',
	            LLL: 'YYYY年M月D日 HH:mm',
	            LLLL: 'YYYY年M月D日dddd HH:mm',
	            l: 'YYYY/M/D',
	            ll: 'YYYY年M月D日',
	            lll: 'YYYY年M月D日 HH:mm',
	            llll: 'YYYY年M月D日dddd HH:mm'
	        },
	        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
	        meridiemHour: function meridiemHour(hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
	                return hour;
	            } else if (meridiem === '中午') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === '下午' || meridiem === '晚上') {
	                return hour + 12;
	            }
	        },
	        meridiem: function meridiem(hour, minute, isLower) {
	            var hm = hour * 100 + minute;
	            if (hm < 600) {
	                return '凌晨';
	            } else if (hm < 900) {
	                return '早上';
	            } else if (hm < 1130) {
	                return '上午';
	            } else if (hm < 1230) {
	                return '中午';
	            } else if (hm < 1800) {
	                return '下午';
	            } else {
	                return '晚上';
	            }
	        },
	        calendar: {
	            sameDay: '[今天]LT',
	            nextDay: '[明天]LT',
	            nextWeek: '[下]ddddLT',
	            lastDay: '[昨天]LT',
	            lastWeek: '[上]ddddLT',
	            sameElse: 'L'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
	        ordinal: function ordinal(number, period) {
	            switch (period) {
	                case 'd':
	                case 'D':
	                case 'DDD':
	                    return number + '日';
	                case 'M':
	                    return number + '月';
	                case 'w':
	                case 'W':
	                    return number + '週';
	                default:
	                    return number;
	            }
	        },
	        relativeTime: {
	            future: '%s內',
	            past: '%s前',
	            s: '幾秒',
	            ss: '%d 秒',
	            m: '1 分鐘',
	            mm: '%d 分鐘',
	            h: '1 小時',
	            hh: '%d 小時',
	            d: '1 天',
	            dd: '%d 天',
	            M: '1 個月',
	            MM: '%d 個月',
	            y: '1 年',
	            yy: '%d 年'
	        }
	    });
	
	    return zhTw;
	});

/***/ },
/* 458 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _dateSelectorComponent = __webpack_require__(459);
	
	var _dateSelectorComponent2 = _interopRequireDefault(_dateSelectorComponent);
	
	var _dateSelector = __webpack_require__(460);
	
	var _dateSelector2 = _interopRequireDefault(_dateSelector);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var DateSelectorComponent = {
	  bindings: {
	    date: '='
	  },
	  template: _dateSelectorComponent2.default,
	  controller: _dateSelector2.default
	};
	
	exports.default = DateSelectorComponent;

/***/ },
/* 459 */
/***/ function(module, exports) {

	module.exports = "<input class=\"input is-medium\" type=\"date\" ng-model=\"$ctrl.date\">\n"

/***/ },
/* 460 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = DateSelectorController;
	function DateSelectorController() {}

/***/ },
/* 461 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _airportComponent = __webpack_require__(462);
	
	var _airportComponent2 = _interopRequireDefault(_airportComponent);
	
	var _airport = __webpack_require__(463);
	
	var _airport2 = _interopRequireDefault(_airport);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var AirportComponent = {
	  bindings: {
	    search: '<',
	    findAiports: '&'
	  },
	  template: _airportComponent2.default,
	  controller: _airport2.default
	};
	
	exports.default = AirportComponent;

/***/ },
/* 462 */
/***/ function(module, exports) {

	module.exports = "<div class=\"container airport-content\">\n  <label class=\"label\">AirportSelector</label>\n  <div class=\"left-box\">\n    <input-autocomplete\n      name=\"departure\"\n      ng-model=\"$ctrl.search.departure\"\n      input-change=\"$ctrl.inputChange(prop, value)\"\n      call-data-list=\"$ctrl.callDataList()\"\n      placeholder=\"Departure Airport\"\n    >\n    </input-autocomplete>\n  </div>\n  <!-- <div class=\"right-box\">\n    <input-autocomplete\n      name=\"destination\"\n      input-change=\"$ctrl.inputChange(prop, value)\"\n      ng-model=\"$ctrl.search.destination\"\n      placeholder=\"Destination Airport\"\n    >\n    </input-autocomplete> -->\n</div>"

/***/ },
/* 463 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _airport = __webpack_require__(464);
	
	var _airport2 = _interopRequireDefault(_airport);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var AirportController = function () {
	  function AirportController() {
	    'ngInject';
	
	    _classCallCheck(this, AirportController);
	
	    this.search = {
	      departure: '',
	      destination: ''
	    };
	
	    // I think most interessant it keep without DI
	    this.airportService = new _airport2.default(this.search);
	  }
	
	  AirportController.prototype.inputChange = function inputChange(prop, value) {
	    var search = angular.copy(this.search);
	    if (prop === _airport2.default.DEPARTURE) {
	      search.departure = value;
	    } else {
	      search.destination = value;
	    }
	    this.search = search;
	  };
	
	  AirportController.prototype.callDataList = function callDataList() {
	    return this.findAiports();
	  };
	
	  return AirportController;
	}();
	
	exports.default = AirportController;

/***/ },
/* 464 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var AirportService = function () {
	  _createClass(AirportService, null, [{
	    key: 'DEPARTURE',
	    get: function get() {
	      return 'departure';
	    }
	  }, {
	    key: 'DESTINATION',
	    get: function get() {
	      return 'destination';
	    }
	  }]);
	
	  function AirportService(search) {
	    _classCallCheck(this, AirportService);
	
	    this.search = search;
	  }
	
	  AirportService.prototype.isDeparture = function isDeparture() {
	    return this.search.departure !== '';
	  };
	
	  AirportService.prototype.searchByProps = function searchByProps(prop, value) {
	    var search = angular.copy(this.search);
	    if (prop === AirportService.DEPARTURE) {
	      search.departure = value;
	    } else {
	      search.destination = value;
	    }
	    this.search = search;
	    return this.search;
	  };
	
	  return AirportService;
	}();
	
	exports.default = AirportService;

/***/ },
/* 465 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _inputAutocompleteComponent = __webpack_require__(466);
	
	var _inputAutocompleteComponent2 = _interopRequireDefault(_inputAutocompleteComponent);
	
	var _inputAutocomplete = __webpack_require__(467);
	
	var _inputAutocomplete2 = _interopRequireDefault(_inputAutocomplete);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var InputAutocompleteComponent = {
	  require: {
	    ngModel: '^ngModel'
	  },
	  bindings: {
	    ngModel: '<',
	    placeholder: '@',
	    name: '@',
	    inputChange: '&',
	    callDataList: '&'
	  },
	  template: _inputAutocompleteComponent2.default,
	  controller: _inputAutocomplete2.default
	};
	
	exports.default = InputAutocompleteComponent;

/***/ },
/* 466 */
/***/ function(module, exports) {

	module.exports = "<input\n  class=\"input is-medium\"\n  type=\"text\"\n  ng-model=\"$ctrl.model\"\n  ng-change=\"$ctrl.valueChange($ctrl.name, $ctrl.model)\"\n  placeholder=\"{{ $ctrl.placeholder }}\"\n>\n<pop-content>\n  <ul ng-repeat=\"item in $ctrl.list\">\n    <li>{{item}}</li>\n  </ul>\n</pop-content>"

/***/ },
/* 467 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var InputAutocompleteController = function () {
	  function InputAutocompleteController() {
	    'ngInject';
	
	    _classCallCheck(this, InputAutocompleteController);
	
	    this.ngModel = '';
	    this.list = [];
	  }
	
	  InputAutocompleteController.prototype.$onInit = function () {
	    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
	      return regeneratorRuntime.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              _context.next = 2;
	              return this.callDataList();
	
	            case 2:
	              this.list = _context.sent;
	
	            case 3:
	            case 'end':
	              return _context.stop();
	          }
	        }
	      }, _callee, this);
	    }));
	
	    function $onInit() {
	      return _ref.apply(this, arguments);
	    }
	
	    return $onInit;
	  }();
	
	  InputAutocompleteController.prototype.$onChanges = function $onChanges(changes) {
	    this.ngModel = changes.ngModel;
	  };
	
	  InputAutocompleteController.prototype.valueChange = function valueChange(prop, value) {
	    this.inputChange({ prop: prop, value: value });
	  };
	
	  return InputAutocompleteController;
	}();
	
	exports.default = InputAutocompleteController;

/***/ },
/* 468 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _footerComponent = __webpack_require__(469);
	
	var _footerComponent2 = _interopRequireDefault(_footerComponent);
	
	var _footer = __webpack_require__(470);
	
	var _footer2 = _interopRequireDefault(_footer);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var LunesFooterComponent = {
	  template: _footerComponent2.default,
	  controller: _footer2.default
	};
	
	exports.default = LunesFooterComponent;

/***/ },
/* 469 */
/***/ function(module, exports) {

	module.exports = "<footer class=\"container\" style=\"margin-bottom: 20px;\">\n  <div class=\"row\">\n    <div class=\"col-12 container-social\">\n      <ul class=\"social\" style=\"padding: 0;margin: 0;\">\n        <li>\n          <a href=\"https://www.facebook.com/lunesplatform/\" target=\"_blank\" class=\"round-menu\">\n            <img src=\"https://res.cloudinary.com/luneswallet/image/upload/v1519442467/facebook_jzfprk.svg\" alt=\"facebook\" />\n          </a>\n        </li>\n        <li>\n          <a href=\"https://t.me/LunesPlatformEN\" target=\"_blank\" class=\"round-menu\">\n            <img src=\"https://res.cloudinary.com/luneswallet/image/upload/v1519442471/telegram_tuakde.svg\" alt=\"telegram\" />\n          </a>\n        </li>\n        <li>\n          <a href=\"https://twitter.com/lunesplatform\" target=\"_blank\" class=\"round-menu\">\n            <img src=\"https://res.cloudinary.com/luneswallet/image/upload/v1519442472/twitter_qkqnva.svg\" alt=\"twitter\" />\n          </a>\n        </li>\n        <li>\n          <a href=\"https://medium.com/@lunes.platform\" target=\"_blank\" class=\"round-menu\">\n            <img src=\"https://res.cloudinary.com/luneswallet/image/upload/v1519442467/medium_sufimk.svg\" alt=\"medium\" />\n          </a>\n        </li>\n      </ul>\n    </div>\n  </div>\n  <div class=\"container-footer\">\n    <div class=\"row\">\n\n      <div class=\"col-xs-12 text-right\" style=\"letter-spacing: -2px;\">\n        <span style=\"font-size:22px;font-family:'Offside',cursive;\">L</span>\n        <span style=\"font-size:22px;font-family:'Offside',cursive;\">u</span>\n        <span style=\"font-size:22px;font-family:'Offside',cursive;\">n</span>\n        <span style=\"font-size:22px;font-family:'Offside',cursive;color: #4cd466;\">e</span>\n        <span style=\"font-size:22px;font-family:'Offside',cursive;\">s</span>\n      </div>\n\n      <div class=\"col-xs-12 text-right\">\n        <a href=\"#!/faq\">{{'FAQ' | translate}}</a>\n      </div>\n\n    </div>\n  </div>\n</footer>"

/***/ },
/* 470 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var FooterController = function FooterController() {
	  'ngInject';
	
	  _classCallCheck(this, FooterController);
	};
	
	exports.default = FooterController;

/***/ },
/* 471 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _loadingComponent = __webpack_require__(472);
	
	var _loadingComponent2 = _interopRequireDefault(_loadingComponent);
	
	var _loading = __webpack_require__(473);
	
	var _loading2 = _interopRequireDefault(_loading);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var LoadingComponent = {
	  bindings: {
	    show: '='
	  },
	  template: _loadingComponent2.default,
	  controller: _loading2.default
	};
	
	exports.default = LoadingComponent;

/***/ },
/* 472 */
/***/ function(module, exports) {

	module.exports = "<div style=\"position: absolute; top: 0; left: 0; z-index: 999; width: 100%; height: 100%; background-color:rgba(rgb(84, 11, 126), rgb(85, 12, 114), rgb(61, 9, 104), 0.9)\">\n  loading...\n</div>"

/***/ },
/* 473 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var LoadingController = function () {
	  LoadingController.$inject = ["$scope"];
	  function LoadingController($scope) {
	    'ngInject';
	
	    _classCallCheck(this, LoadingController);
	
	    this.showLoading($scope);
	  }
	
	  LoadingController.prototype.showLoading = function showLoading($scope) {
	    $scope.$watch('$ctrl.show', function (isShow) {
	      console.log("");
	      if (isShow) {
	        $('<div class="modal-backdrop"></div>').appendTo(document.body);
	      } else {
	        $(".modal-backdrop").remove();
	      }
	    });
	  };
	
	  return LoadingController;
	}();
	
	exports.default = LoadingController;

/***/ },
/* 474 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _headerComponent = __webpack_require__(475);
	
	var _headerComponent2 = _interopRequireDefault(_headerComponent);
	
	var _header = __webpack_require__(476);
	
	var _header2 = _interopRequireDefault(_header);
	
	__webpack_require__(686);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var LunesHeaderComponent = {
	  bindings: {
	    showlinks: '=',
	    balanceuser: '='
	  },
	  template: _headerComponent2.default,
	  controller: _header2.default
	};
	
	exports.default = LunesHeaderComponent;

/***/ },
/* 475 */
/***/ function(module, exports) {

	module.exports = "<div class=\"row container-logo-header\" style=\"padding: 10px 0;\">\n  <!-- LOGO -->\n  <div class=\"col-sm-12 col-md-4 col-lg-4 logo\" ng-click=\"$ctrl.goToHome()\">\n    <span>L</span>\n    <span>u</span>\n    <span>n</span>\n    <span class=\"txt-green\">e</span>\n    <span>s</span>\n  </div>\n\n  <!-- PRICE CURRENT COIN and LOGOUT -->\n  <div class=\"col-sm-12 col-md-8 col-lg-8 container-data\" ng-show=\"$ctrl.showlinks\">\n    <div class=\"col-xs-12 col-md-6 col-lg-6 coupom\">\n      {{'OWN_COUPON' | translate}}\n      <span style=\"font-weight: bold;color: #3bbe6e;\">{{$ctrl.currentUser.ownCoupon}}</span>\n    </div>\n    <div class=\"col-xs-12 col-md-6 col-lg-6 container-balance\">\n      <span>{{'MY_BALANCE' | translate}}</span>\n      <img src=\"https://res.cloudinary.com/luneswallet/image/upload/v1519442468/icon-lunes_qhumiw.png\" alt=\"Icon Lunes\"> {{$ctrl.totalLns}}\n    </div>\n  </div>\n</div>\n\n<!-- QUOTATION COINS -  btc, eth, ltc -->\n<div class=\"quotation-coins\" ng-show=\"$ctrl.showlinks\">\n  <small style=\"padding: 0 10px;color: #FFC107;\">\n    <img src=\"https://res.cloudinary.com/luneswallet/image/upload/v1519442467/icon_btc.svg\" alt=\"bitcoin\" style=\"width: 13px;\">&nbsp;$ {{$ctrl.balanceCoins.BTC.balance.PRICE}}</small> |\n\n  <small style=\"padding: 0 10px;color: #507f94;\">\n    <img src=\"https://res.cloudinary.com/luneswallet/image/upload/v1519442468/icon_ltc.svg\" alt=\"litecoin\" style=\"width: 13px;\">&nbsp;$ {{$ctrl.balanceCoins.LTC.balance.PRICE}}</small> |\n\n  <small style=\"padding: 0 10px;color: #778084;\">\n    <img src=\"https://res.cloudinary.com/luneswallet/image/upload/v1519442467/icon_eth.svg\" alt=\"ethereum\" style=\"width: 10px;\">&nbsp;$ {{$ctrl.balanceCoins.ETH.balance.PRICE}}</small>\n</div>\n\n<!-- MENU and SOCIAL MEDIA links -->\n<nav class=\"header\" ng-show=\"$ctrl.showlinks\">\n  <div class=\"col-12 nav-menu\">\n    <ul class=\"menu menu-top\" style=\"padding: 0;margin: 0;\">\n      <li ng-class=\"{active: $ctrl.location === 'buy'}\">\n        <a href=\"#!/buy\">{{'BUY' | translate}}</a>\n      </li>\n      <li ng-class=\"{active: $ctrl.location === 'historic'}\">\n        <a href=\"#!/historic\">{{'PURCHASE_HISTORY' | translate}}</a>\n      </li>\n    </ul>\n  </div>\n</nav>"

/***/ },
/* 476 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _lunesLib = __webpack_require__(477);
	
	var _lunesLib2 = _interopRequireDefault(_lunesLib);
	
	var _index = __webpack_require__(685);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var HeaderController = function () {
	  HeaderController.$inject = ["$state", "$timeout", "$location", "HttpService"];
	  function HeaderController($state, $timeout, $location, HttpService) {
	    'ngInject';
	
	    _classCallCheck(this, HeaderController);
	
	    this.$state = $state;
	    this.$timeout = $timeout;
	    this.HttpService = HttpService;
	    this.showlinks = true;
	    this.showlogout = true;
	    this.location = $location.path().replace(/\W/, '');
	    this.history = [];
	    this.balanceCoins = {};
	    this.currentUser = JSON.parse(localStorage.getItem(_index.STORAGE_KEY));
	    this.getHistory().catch(function (err) {
	      console.log(err);
	    });
	    this.getBalanceCoin('BTC').catch(function (error) {
	      console.log(error);
	    });
	    this.getBalanceCoin('LTC').catch(function (error) {
	      console.log(error);
	    });
	    this.getBalanceCoin('ETH').catch(function (error) {
	      console.log(error);
	    });
	  }
	
	  HeaderController.prototype.getBalanceCoin = function () {
	    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(coin) {
	      var balance;
	      return regeneratorRuntime.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              _context.next = 2;
	              return this.HttpService.getBitcoinBalance(coin);
	
	            case 2:
	              balance = _context.sent;
	
	              this.balanceCoins[coin] = { balance: balance };
	
	            case 4:
	            case 'end':
	              return _context.stop();
	          }
	        }
	      }, _callee, this);
	    }));
	
	    function getBalanceCoin(_x) {
	      return _ref.apply(this, arguments);
	    }
	
	    return getBalanceCoin;
	  }();
	
	  HeaderController.prototype.getBalanceCoinETH = function () {
	    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(coin) {
	      var balance;
	      return regeneratorRuntime.wrap(function _callee2$(_context2) {
	        while (1) {
	          switch (_context2.prev = _context2.next) {
	            case 0:
	              _context2.next = 2;
	              return this.HttpService.getBalanceCoinETH(coin);
	
	            case 2:
	              balance = _context2.sent;
	
	              this.balanceCoins[coin] = { balance: balance };
	
	            case 4:
	            case 'end':
	              return _context2.stop();
	          }
	        }
	      }, _callee2, this);
	    }));
	
	    function getBalanceCoinETH(_x2) {
	      return _ref2.apply(this, arguments);
	    }
	
	    return getBalanceCoinETH;
	  }();
	
	  HeaderController.prototype.getBalanceLunes = function () {
	    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(coin, currentUser) {
	      var balance;
	      return regeneratorRuntime.wrap(function _callee3$(_context3) {
	        while (1) {
	          switch (_context3.prev = _context3.next) {
	            case 0:
	              _context3.next = 2;
	              return this.HttpService.getBalanceLunes(coin, currentUser);
	
	            case 2:
	              balance = _context3.sent;
	
	              this.balanceCoins[coin] = { balance: balance };
	
	            case 4:
	            case 'end':
	              return _context3.stop();
	          }
	        }
	      }, _callee3, this);
	    }));
	
	    function getBalanceLunes(_x3, _x4) {
	      return _ref3.apply(this, arguments);
	    }
	
	    return getBalanceLunes;
	  }();
	
	  HeaderController.prototype.getHistory = function () {
	    var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
	      var _this = this;
	
	      var history;
	      return regeneratorRuntime.wrap(function _callee4$(_context4) {
	        while (1) {
	          switch (_context4.prev = _context4.next) {
	            case 0:
	              if (this.currentUser) {
	                _context4.next = 2;
	                break;
	              }
	
	              return _context4.abrupt('return');
	
	            case 2:
	              _context4.next = 4;
	              return _lunesLib2.default.ico.buyHistory(this.currentUser.email, this.currentUser.accessToken, 1).catch(function (err) {
	                return console.log(err);
	              });
	
	            case 4:
	              history = _context4.sent;
	
	              this.$timeout(function () {
	                _this.history = history.map(function (item) {
	                  var total = parseFloat(item.credit_value) + parseFloat(item.bonus_value);
	
	                  return {
	                    total: total,
	                    deposit_value: parseFloat(item.deposit_value),
	                    deposit_coin: item.deposit_coin,
	                    credit_value: parseFloat(item.credit_value),
	                    bonus_value: parseFloat(item.bonus_value)
	                  };
	                });
	
	                _this.getTotalLns();
	              }, 100);
	
	            case 6:
	            case 'end':
	              return _context4.stop();
	          }
	        }
	      }, _callee4, this);
	    }));
	
	    function getHistory() {
	      return _ref4.apply(this, arguments);
	    }
	
	    return getHistory;
	  }();
	
	  HeaderController.prototype.getTotalLns = function () {
	    var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
	      var totalLns;
	      return regeneratorRuntime.wrap(function _callee5$(_context5) {
	        while (1) {
	          switch (_context5.prev = _context5.next) {
	            case 0:
	              totalLns = this.history.reduce(function (total, item) {
	                return total + parseFloat(item.credit_value) + parseFloat(item.bonus_value);
	              }, 0);
	
	
	              this.totalLns = totalLns.toFixed(8);
	
	            case 2:
	            case 'end':
	              return _context5.stop();
	          }
	        }
	      }, _callee5, this);
	    }));
	
	    function getTotalLns() {
	      return _ref5.apply(this, arguments);
	    }
	
	    return getTotalLns;
	  }();
	
	  HeaderController.prototype.logout = function logout() {
	    localStorage.removeItem(_index.STORAGE_KEY);
	  };
	
	  HeaderController.prototype.goToHome = function goToHome() {
	    this.$state.go('buy');
	  };
	
	  return HeaderController;
	}();
	
	HeaderController.$inject = ['$state', '$timeout', '$location', 'HttpService'];
	
	exports.default = HeaderController;

/***/ },
/* 477 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(478);

/***/ },
/* 478 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var users = __webpack_require__(479);
	var coins = __webpack_require__(590);
	var ico = __webpack_require__(677);
	module.exports = {
	  users: users,
	  coins: coins,
	  ico: ico
	};

/***/ },
/* 479 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var create = __webpack_require__(480);
	var login = __webpack_require__(582);
	var resetPassword = __webpack_require__(583);
	var obtain = __webpack_require__(584);
	var createPin = __webpack_require__(585);
	var confirmPin = __webpack_require__(586);
	var confirmPhone = __webpack_require__(587);
	var logout = __webpack_require__(588);
	var update = __webpack_require__(589);
	
	module.exports = {
	  create: create,
	  login: login,
	  resetPassword: resetPassword,
	  obtain: obtain,
	  createPin: createPin,
	  confirmPin: confirmPin,
	  confirmPhone: confirmPhone,
	  logout: logout,
	  update: update
	};

/***/ },
/* 480 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
	
	var validator = __webpack_require__(481);
	
	var axios = __webpack_require__(554);
	
	var BASE_URL = __webpack_require__(581);
	
	var endpoint = BASE_URL + '/users/create';
	
	module.exports = function () {
	  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(userData) {
	    var email, password, fullname, coupon, testnet, res;
	    return regeneratorRuntime.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            email = userData.email, password = userData.password, fullname = userData.fullname, coupon = userData.coupon, testnet = userData.testnet;
	
	            if (validator.areNotEmpty([email, password, fullname])) {
	              _context.next = 3;
	              break;
	            }
	
	            throw new Error('Email, password and fullname are required fields.');
	
	          case 3:
	            if (validator.isEmail(email)) {
	              _context.next = 5;
	              break;
	            }
	
	            throw new Error(email + ' is not a valid email.');
	
	          case 5:
	            if (validator.isValidPassword(password)) {
	              _context.next = 7;
	              break;
	            }
	
	            throw new Error('Password must contain only letters and numbers, at least 8 chars.');
	
	          case 7:
	            _context.prev = 7;
	            _context.next = 10;
	            return axios.post(endpoint, {
	              email: email,
	              password: password,
	              fullname: fullname,
	              coupon: coupon,
	              testnet: testnet
	            });
	
	          case 10:
	            res = _context.sent;
	            return _context.abrupt('return', res.data);
	
	          case 14:
	            _context.prev = 14;
	            _context.t0 = _context['catch'](7);
	            throw _context.t0.response ? _context.t0.response.data : new Error(_context.t0);
	
	          case 17:
	          case 'end':
	            return _context.stop();
	        }
	      }
	    }, _callee, undefined, [[7, 14]]);
	  }));
	
	  return function (_x) {
	    return _ref.apply(this, arguments);
	  };
	}();

/***/ },
/* 481 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var Validator = __webpack_require__(482);
	
	var _require = __webpack_require__(553),
	    PASSWORD_LENGTH = _require.PASSWORD_LENGTH,
	    MAX_PIN_VALUE = _require.MAX_PIN_VALUE;
	
	var isTestnet = function isTestnet(testnetParam) {
	  if ((typeof testnetParam === 'undefined' ? 'undefined' : _typeof(testnetParam)) === _typeof(true)) {
	    return testnetParam;
	  }
	  var testnet = false;
	  if (testnetParam) {
	    testnet = String(testnetParam.toLowerCase()) === 'true';
	  }
	  return testnet;
	};
	
	module.exports = {
	  isEmail: Validator.isEmail,
	  areNotEmpty: function areNotEmpty(fields) {
	    return fields.filter(Validator.isEmpty).length !== fields.length;
	  },
	  isValidPassword: function isValidPassword(password) {
	    return password.length >= PASSWORD_LENGTH;
	  },
	  isPIN: function isPIN(pin) {
	    return Validator.isInt(pin, { min: 0, max: MAX_PIN_VALUE });
	  },
	  isEmpty: Validator.isEmpty,
	  isTestnet: isTestnet
	};

/***/ },
/* 482 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _toDate = __webpack_require__(483);
	
	var _toDate2 = _interopRequireDefault(_toDate);
	
	var _toFloat = __webpack_require__(485);
	
	var _toFloat2 = _interopRequireDefault(_toFloat);
	
	var _toInt = __webpack_require__(486);
	
	var _toInt2 = _interopRequireDefault(_toInt);
	
	var _toBoolean = __webpack_require__(487);
	
	var _toBoolean2 = _interopRequireDefault(_toBoolean);
	
	var _equals = __webpack_require__(488);
	
	var _equals2 = _interopRequireDefault(_equals);
	
	var _contains = __webpack_require__(489);
	
	var _contains2 = _interopRequireDefault(_contains);
	
	var _matches = __webpack_require__(491);
	
	var _matches2 = _interopRequireDefault(_matches);
	
	var _isEmail = __webpack_require__(492);
	
	var _isEmail2 = _interopRequireDefault(_isEmail);
	
	var _isURL = __webpack_require__(496);
	
	var _isURL2 = _interopRequireDefault(_isURL);
	
	var _isMACAddress = __webpack_require__(498);
	
	var _isMACAddress2 = _interopRequireDefault(_isMACAddress);
	
	var _isIP = __webpack_require__(497);
	
	var _isIP2 = _interopRequireDefault(_isIP);
	
	var _isFQDN = __webpack_require__(495);
	
	var _isFQDN2 = _interopRequireDefault(_isFQDN);
	
	var _isBoolean = __webpack_require__(499);
	
	var _isBoolean2 = _interopRequireDefault(_isBoolean);
	
	var _isAlpha = __webpack_require__(500);
	
	var _isAlpha2 = _interopRequireDefault(_isAlpha);
	
	var _isAlphanumeric = __webpack_require__(502);
	
	var _isAlphanumeric2 = _interopRequireDefault(_isAlphanumeric);
	
	var _isNumeric = __webpack_require__(503);
	
	var _isNumeric2 = _interopRequireDefault(_isNumeric);
	
	var _isPort = __webpack_require__(504);
	
	var _isPort2 = _interopRequireDefault(_isPort);
	
	var _isLowercase = __webpack_require__(506);
	
	var _isLowercase2 = _interopRequireDefault(_isLowercase);
	
	var _isUppercase = __webpack_require__(507);
	
	var _isUppercase2 = _interopRequireDefault(_isUppercase);
	
	var _isAscii = __webpack_require__(508);
	
	var _isAscii2 = _interopRequireDefault(_isAscii);
	
	var _isFullWidth = __webpack_require__(509);
	
	var _isFullWidth2 = _interopRequireDefault(_isFullWidth);
	
	var _isHalfWidth = __webpack_require__(510);
	
	var _isHalfWidth2 = _interopRequireDefault(_isHalfWidth);
	
	var _isVariableWidth = __webpack_require__(511);
	
	var _isVariableWidth2 = _interopRequireDefault(_isVariableWidth);
	
	var _isMultibyte = __webpack_require__(512);
	
	var _isMultibyte2 = _interopRequireDefault(_isMultibyte);
	
	var _isSurrogatePair = __webpack_require__(513);
	
	var _isSurrogatePair2 = _interopRequireDefault(_isSurrogatePair);
	
	var _isInt = __webpack_require__(505);
	
	var _isInt2 = _interopRequireDefault(_isInt);
	
	var _isFloat = __webpack_require__(514);
	
	var _isFloat2 = _interopRequireDefault(_isFloat);
	
	var _isDecimal = __webpack_require__(515);
	
	var _isDecimal2 = _interopRequireDefault(_isDecimal);
	
	var _isHexadecimal = __webpack_require__(516);
	
	var _isHexadecimal2 = _interopRequireDefault(_isHexadecimal);
	
	var _isDivisibleBy = __webpack_require__(517);
	
	var _isDivisibleBy2 = _interopRequireDefault(_isDivisibleBy);
	
	var _isHexColor = __webpack_require__(518);
	
	var _isHexColor2 = _interopRequireDefault(_isHexColor);
	
	var _isISRC = __webpack_require__(519);
	
	var _isISRC2 = _interopRequireDefault(_isISRC);
	
	var _isMD = __webpack_require__(520);
	
	var _isMD2 = _interopRequireDefault(_isMD);
	
	var _isHash = __webpack_require__(521);
	
	var _isHash2 = _interopRequireDefault(_isHash);
	
	var _isJSON = __webpack_require__(522);
	
	var _isJSON2 = _interopRequireDefault(_isJSON);
	
	var _isEmpty = __webpack_require__(523);
	
	var _isEmpty2 = _interopRequireDefault(_isEmpty);
	
	var _isLength = __webpack_require__(524);
	
	var _isLength2 = _interopRequireDefault(_isLength);
	
	var _isByteLength = __webpack_require__(494);
	
	var _isByteLength2 = _interopRequireDefault(_isByteLength);
	
	var _isUUID = __webpack_require__(525);
	
	var _isUUID2 = _interopRequireDefault(_isUUID);
	
	var _isMongoId = __webpack_require__(526);
	
	var _isMongoId2 = _interopRequireDefault(_isMongoId);
	
	var _isAfter = __webpack_require__(527);
	
	var _isAfter2 = _interopRequireDefault(_isAfter);
	
	var _isBefore = __webpack_require__(528);
	
	var _isBefore2 = _interopRequireDefault(_isBefore);
	
	var _isIn = __webpack_require__(529);
	
	var _isIn2 = _interopRequireDefault(_isIn);
	
	var _isCreditCard = __webpack_require__(530);
	
	var _isCreditCard2 = _interopRequireDefault(_isCreditCard);
	
	var _isISIN = __webpack_require__(531);
	
	var _isISIN2 = _interopRequireDefault(_isISIN);
	
	var _isISBN = __webpack_require__(532);
	
	var _isISBN2 = _interopRequireDefault(_isISBN);
	
	var _isISSN = __webpack_require__(533);
	
	var _isISSN2 = _interopRequireDefault(_isISSN);
	
	var _isMobilePhone = __webpack_require__(534);
	
	var _isMobilePhone2 = _interopRequireDefault(_isMobilePhone);
	
	var _isCurrency = __webpack_require__(535);
	
	var _isCurrency2 = _interopRequireDefault(_isCurrency);
	
	var _isISO = __webpack_require__(536);
	
	var _isISO2 = _interopRequireDefault(_isISO);
	
	var _isISO31661Alpha = __webpack_require__(537);
	
	var _isISO31661Alpha2 = _interopRequireDefault(_isISO31661Alpha);
	
	var _isBase = __webpack_require__(538);
	
	var _isBase2 = _interopRequireDefault(_isBase);
	
	var _isDataURI = __webpack_require__(539);
	
	var _isDataURI2 = _interopRequireDefault(_isDataURI);
	
	var _isMimeType = __webpack_require__(540);
	
	var _isMimeType2 = _interopRequireDefault(_isMimeType);
	
	var _isLatLong = __webpack_require__(541);
	
	var _isLatLong2 = _interopRequireDefault(_isLatLong);
	
	var _isPostalCode = __webpack_require__(542);
	
	var _isPostalCode2 = _interopRequireDefault(_isPostalCode);
	
	var _ltrim = __webpack_require__(543);
	
	var _ltrim2 = _interopRequireDefault(_ltrim);
	
	var _rtrim = __webpack_require__(544);
	
	var _rtrim2 = _interopRequireDefault(_rtrim);
	
	var _trim = __webpack_require__(545);
	
	var _trim2 = _interopRequireDefault(_trim);
	
	var _escape = __webpack_require__(546);
	
	var _escape2 = _interopRequireDefault(_escape);
	
	var _unescape = __webpack_require__(547);
	
	var _unescape2 = _interopRequireDefault(_unescape);
	
	var _stripLow = __webpack_require__(548);
	
	var _stripLow2 = _interopRequireDefault(_stripLow);
	
	var _whitelist = __webpack_require__(550);
	
	var _whitelist2 = _interopRequireDefault(_whitelist);
	
	var _blacklist = __webpack_require__(549);
	
	var _blacklist2 = _interopRequireDefault(_blacklist);
	
	var _isWhitelisted = __webpack_require__(551);
	
	var _isWhitelisted2 = _interopRequireDefault(_isWhitelisted);
	
	var _normalizeEmail = __webpack_require__(552);
	
	var _normalizeEmail2 = _interopRequireDefault(_normalizeEmail);
	
	var _toString = __webpack_require__(490);
	
	var _toString2 = _interopRequireDefault(_toString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	var version = '9.4.1';
	
	var validator = {
	  version: version,
	  toDate: _toDate2.default,
	  toFloat: _toFloat2.default,
	  toInt: _toInt2.default,
	  toBoolean: _toBoolean2.default,
	  equals: _equals2.default,
	  contains: _contains2.default,
	  matches: _matches2.default,
	  isEmail: _isEmail2.default,
	  isURL: _isURL2.default,
	  isMACAddress: _isMACAddress2.default,
	  isIP: _isIP2.default,
	  isFQDN: _isFQDN2.default,
	  isBoolean: _isBoolean2.default,
	  isAlpha: _isAlpha2.default,
	  isAlphanumeric: _isAlphanumeric2.default,
	  isNumeric: _isNumeric2.default,
	  isPort: _isPort2.default,
	  isLowercase: _isLowercase2.default,
	  isUppercase: _isUppercase2.default,
	  isAscii: _isAscii2.default,
	  isFullWidth: _isFullWidth2.default,
	  isHalfWidth: _isHalfWidth2.default,
	  isVariableWidth: _isVariableWidth2.default,
	  isMultibyte: _isMultibyte2.default,
	  isSurrogatePair: _isSurrogatePair2.default,
	  isInt: _isInt2.default,
	  isFloat: _isFloat2.default,
	  isDecimal: _isDecimal2.default,
	  isHexadecimal: _isHexadecimal2.default,
	  isDivisibleBy: _isDivisibleBy2.default,
	  isHexColor: _isHexColor2.default,
	  isISRC: _isISRC2.default,
	  isMD5: _isMD2.default,
	  isHash: _isHash2.default,
	  isJSON: _isJSON2.default,
	  isEmpty: _isEmpty2.default,
	  isLength: _isLength2.default,
	  isByteLength: _isByteLength2.default,
	  isUUID: _isUUID2.default,
	  isMongoId: _isMongoId2.default,
	  isAfter: _isAfter2.default,
	  isBefore: _isBefore2.default,
	  isIn: _isIn2.default,
	  isCreditCard: _isCreditCard2.default,
	  isISIN: _isISIN2.default,
	  isISBN: _isISBN2.default,
	  isISSN: _isISSN2.default,
	  isMobilePhone: _isMobilePhone2.default,
	  isPostalCode: _isPostalCode2.default,
	  isCurrency: _isCurrency2.default,
	  isISO8601: _isISO2.default,
	  isISO31661Alpha2: _isISO31661Alpha2.default,
	  isBase64: _isBase2.default,
	  isDataURI: _isDataURI2.default,
	  isMimeType: _isMimeType2.default,
	  isLatLong: _isLatLong2.default,
	  ltrim: _ltrim2.default,
	  rtrim: _rtrim2.default,
	  trim: _trim2.default,
	  escape: _escape2.default,
	  unescape: _unescape2.default,
	  stripLow: _stripLow2.default,
	  whitelist: _whitelist2.default,
	  blacklist: _blacklist2.default,
	  isWhitelisted: _isWhitelisted2.default,
	  normalizeEmail: _normalizeEmail2.default,
	  toString: _toString2.default
	};
	
	exports.default = validator;
	module.exports = exports['default'];

/***/ },
/* 483 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = toDate;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function toDate(date) {
	  (0, _assertString2.default)(date);
	  date = Date.parse(date);
	  return !isNaN(date) ? new Date(date) : null;
	}
	module.exports = exports['default'];

/***/ },
/* 484 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = assertString;
	function assertString(input) {
	  var isString = typeof input === 'string' || input instanceof String;
	
	  if (!isString) {
	    throw new TypeError('This library (validator.js) validates strings only');
	  }
	}
	module.exports = exports['default'];

/***/ },
/* 485 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = toFloat;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function toFloat(str) {
	  (0, _assertString2.default)(str);
	  return parseFloat(str);
	}
	module.exports = exports['default'];

/***/ },
/* 486 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = toInt;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function toInt(str, radix) {
	  (0, _assertString2.default)(str);
	  return parseInt(str, radix || 10);
	}
	module.exports = exports['default'];

/***/ },
/* 487 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = toBoolean;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function toBoolean(str, strict) {
	  (0, _assertString2.default)(str);
	  if (strict) {
	    return str === '1' || str === 'true';
	  }
	  return str !== '0' && str !== 'false' && str !== '';
	}
	module.exports = exports['default'];

/***/ },
/* 488 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = equals;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function equals(str, comparison) {
	  (0, _assertString2.default)(str);
	  return str === comparison;
	}
	module.exports = exports['default'];

/***/ },
/* 489 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = contains;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	var _toString = __webpack_require__(490);
	
	var _toString2 = _interopRequireDefault(_toString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function contains(str, elem) {
	  (0, _assertString2.default)(str);
	  return str.indexOf((0, _toString2.default)(elem)) >= 0;
	}
	module.exports = exports['default'];

/***/ },
/* 490 */
/***/ function(module, exports) {

	'use strict';
	
	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};
	
	exports.default = toString;
	function toString(input) {
	  if ((typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' && input !== null) {
	    if (typeof input.toString === 'function') {
	      input = input.toString();
	    } else {
	      input = '[object Object]';
	    }
	  } else if (input === null || typeof input === 'undefined' || isNaN(input) && !input.length) {
	    input = '';
	  }
	  return String(input);
	}
	module.exports = exports['default'];

/***/ },
/* 491 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = matches;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function matches(str, pattern, modifiers) {
	  (0, _assertString2.default)(str);
	  if (Object.prototype.toString.call(pattern) !== '[object RegExp]') {
	    pattern = new RegExp(pattern, modifiers);
	  }
	  return pattern.test(str);
	}
	module.exports = exports['default'];

/***/ },
/* 492 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isEmail;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	var _merge = __webpack_require__(493);
	
	var _merge2 = _interopRequireDefault(_merge);
	
	var _isByteLength = __webpack_require__(494);
	
	var _isByteLength2 = _interopRequireDefault(_isByteLength);
	
	var _isFQDN = __webpack_require__(495);
	
	var _isFQDN2 = _interopRequireDefault(_isFQDN);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	var default_email_options = {
	  allow_display_name: false,
	  require_display_name: false,
	  allow_utf8_local_part: true,
	  require_tld: true
	};
	
	/* eslint-disable max-len */
	/* eslint-disable no-control-regex */
	var displayName = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~\.\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~\,\.\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF\s]*<(.+)>$/i;
	var emailUserPart = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~]+$/i;
	var quotedEmailUser = /^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f]))*$/i;
	var emailUserUtf8Part = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+$/i;
	var quotedEmailUserUtf8 = /^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))*$/i;
	/* eslint-enable max-len */
	/* eslint-enable no-control-regex */
	
	function isEmail(str, options) {
	  (0, _assertString2.default)(str);
	  options = (0, _merge2.default)(options, default_email_options);
	
	  if (options.require_display_name || options.allow_display_name) {
	    var display_email = str.match(displayName);
	    if (display_email) {
	      str = display_email[1];
	    } else if (options.require_display_name) {
	      return false;
	    }
	  }
	
	  var parts = str.split('@');
	  var domain = parts.pop();
	  var user = parts.join('@');
	
	  var lower_domain = domain.toLowerCase();
	  if (lower_domain === 'gmail.com' || lower_domain === 'googlemail.com') {
	    user = user.replace(/\./g, '').toLowerCase();
	  }
	
	  if (!(0, _isByteLength2.default)(user, { max: 64 }) || !(0, _isByteLength2.default)(domain, { max: 254 })) {
	    return false;
	  }
	
	  if (!(0, _isFQDN2.default)(domain, { require_tld: options.require_tld })) {
	    return false;
	  }
	
	  if (user[0] === '"') {
	    user = user.slice(1, user.length - 1);
	    return options.allow_utf8_local_part ? quotedEmailUserUtf8.test(user) : quotedEmailUser.test(user);
	  }
	
	  var pattern = options.allow_utf8_local_part ? emailUserUtf8Part : emailUserPart;
	
	  var user_parts = user.split('.');
	  for (var i = 0; i < user_parts.length; i++) {
	    if (!pattern.test(user_parts[i])) {
	      return false;
	    }
	  }
	
	  return true;
	}
	module.exports = exports['default'];

/***/ },
/* 493 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = merge;
	function merge() {
	  var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  var defaults = arguments[1];
	
	  for (var key in defaults) {
	    if (typeof obj[key] === 'undefined') {
	      obj[key] = defaults[key];
	    }
	  }
	  return obj;
	}
	module.exports = exports['default'];

/***/ },
/* 494 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};
	
	exports.default = isByteLength;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	/* eslint-disable prefer-rest-params */
	function isByteLength(str, options) {
	  (0, _assertString2.default)(str);
	  var min = void 0;
	  var max = void 0;
	  if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {
	    min = options.min || 0;
	    max = options.max;
	  } else {
	    // backwards compatibility: isByteLength(str, min [, max])
	    min = arguments[1];
	    max = arguments[2];
	  }
	  var len = encodeURI(str).split(/%..|./).length - 1;
	  return len >= min && (typeof max === 'undefined' || len <= max);
	}
	module.exports = exports['default'];

/***/ },
/* 495 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isFQDN;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	var _merge = __webpack_require__(493);
	
	var _merge2 = _interopRequireDefault(_merge);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	var default_fqdn_options = {
	  require_tld: true,
	  allow_underscores: false,
	  allow_trailing_dot: false
	};
	
	function isFQDN(str, options) {
	  (0, _assertString2.default)(str);
	  options = (0, _merge2.default)(options, default_fqdn_options);
	
	  /* Remove the optional trailing dot before checking validity */
	  if (options.allow_trailing_dot && str[str.length - 1] === '.') {
	    str = str.substring(0, str.length - 1);
	  }
	  var parts = str.split('.');
	  if (options.require_tld) {
	    var tld = parts.pop();
	    if (!parts.length || !/^([a-z\u00a1-\uffff]{2,}|xn[a-z0-9-]{2,})$/i.test(tld)) {
	      return false;
	    }
	    // disallow spaces
	    if (/[\s\u2002-\u200B\u202F\u205F\u3000\uFEFF\uDB40\uDC20]/.test(tld)) {
	      return false;
	    }
	  }
	  for (var part, i = 0; i < parts.length; i++) {
	    part = parts[i];
	    if (options.allow_underscores) {
	      part = part.replace(/_/g, '');
	    }
	    if (!/^[a-z\u00a1-\uffff0-9-]+$/i.test(part)) {
	      return false;
	    }
	    // disallow full-width chars
	    if (/[\uff01-\uff5e]/.test(part)) {
	      return false;
	    }
	    if (part[0] === '-' || part[part.length - 1] === '-') {
	      return false;
	    }
	  }
	  return true;
	}
	module.exports = exports['default'];

/***/ },
/* 496 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isURL;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	var _isFQDN = __webpack_require__(495);
	
	var _isFQDN2 = _interopRequireDefault(_isFQDN);
	
	var _isIP = __webpack_require__(497);
	
	var _isIP2 = _interopRequireDefault(_isIP);
	
	var _merge = __webpack_require__(493);
	
	var _merge2 = _interopRequireDefault(_merge);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	var default_url_options = {
	  protocols: ['http', 'https', 'ftp'],
	  require_tld: true,
	  require_protocol: false,
	  require_host: true,
	  require_valid_protocol: true,
	  allow_underscores: false,
	  allow_trailing_dot: false,
	  allow_protocol_relative_urls: false
	};
	
	var wrapped_ipv6 = /^\[([^\]]+)\](?::([0-9]+))?$/;
	
	function isRegExp(obj) {
	  return Object.prototype.toString.call(obj) === '[object RegExp]';
	}
	
	function checkHost(host, matches) {
	  for (var i = 0; i < matches.length; i++) {
	    var match = matches[i];
	    if (host === match || isRegExp(match) && match.test(host)) {
	      return true;
	    }
	  }
	  return false;
	}
	
	function isURL(url, options) {
	  (0, _assertString2.default)(url);
	  if (!url || url.length >= 2083 || /[\s<>]/.test(url)) {
	    return false;
	  }
	  if (url.indexOf('mailto:') === 0) {
	    return false;
	  }
	  options = (0, _merge2.default)(options, default_url_options);
	  var protocol = void 0,
	      auth = void 0,
	      host = void 0,
	      hostname = void 0,
	      port = void 0,
	      port_str = void 0,
	      split = void 0,
	      ipv6 = void 0;
	
	  split = url.split('#');
	  url = split.shift();
	
	  split = url.split('?');
	  url = split.shift();
	
	  split = url.split('://');
	  if (split.length > 1) {
	    protocol = split.shift();
	    if (options.require_valid_protocol && options.protocols.indexOf(protocol) === -1) {
	      return false;
	    }
	  } else if (options.require_protocol) {
	    return false;
	  } else if (options.allow_protocol_relative_urls && url.substr(0, 2) === '//') {
	    split[0] = url.substr(2);
	  }
	  url = split.join('://');
	
	  if (url === '') {
	    return false;
	  }
	
	  split = url.split('/');
	  url = split.shift();
	
	  if (url === '' && !options.require_host) {
	    return true;
	  }
	
	  split = url.split('@');
	  if (split.length > 1) {
	    auth = split.shift();
	    if (auth.indexOf(':') >= 0 && auth.split(':').length > 2) {
	      return false;
	    }
	  }
	  hostname = split.join('@');
	
	  port_str = null;
	  ipv6 = null;
	  var ipv6_match = hostname.match(wrapped_ipv6);
	  if (ipv6_match) {
	    host = '';
	    ipv6 = ipv6_match[1];
	    port_str = ipv6_match[2] || null;
	  } else {
	    split = hostname.split(':');
	    host = split.shift();
	    if (split.length) {
	      port_str = split.join(':');
	    }
	  }
	
	  if (port_str !== null) {
	    port = parseInt(port_str, 10);
	    if (!/^[0-9]+$/.test(port_str) || port <= 0 || port > 65535) {
	      return false;
	    }
	  }
	
	  if (!(0, _isIP2.default)(host) && !(0, _isFQDN2.default)(host, options) && (!ipv6 || !(0, _isIP2.default)(ipv6, 6))) {
	    return false;
	  }
	
	  host = host || ipv6;
	
	  if (options.host_whitelist && !checkHost(host, options.host_whitelist)) {
	    return false;
	  }
	  if (options.host_blacklist && checkHost(host, options.host_blacklist)) {
	    return false;
	  }
	
	  return true;
	}
	module.exports = exports['default'];

/***/ },
/* 497 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isIP;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	var ipv4Maybe = /^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$/;
	var ipv6Block = /^[0-9A-F]{1,4}$/i;
	
	function isIP(str) {
	  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
	
	  (0, _assertString2.default)(str);
	  version = String(version);
	  if (!version) {
	    return isIP(str, 4) || isIP(str, 6);
	  } else if (version === '4') {
	    if (!ipv4Maybe.test(str)) {
	      return false;
	    }
	    var parts = str.split('.').sort(function (a, b) {
	      return a - b;
	    });
	    return parts[3] <= 255;
	  } else if (version === '6') {
	    var blocks = str.split(':');
	    var foundOmissionBlock = false; // marker to indicate ::
	
	    // At least some OS accept the last 32 bits of an IPv6 address
	    // (i.e. 2 of the blocks) in IPv4 notation, and RFC 3493 says
	    // that '::ffff:a.b.c.d' is valid for IPv4-mapped IPv6 addresses,
	    // and '::a.b.c.d' is deprecated, but also valid.
	    var foundIPv4TransitionBlock = isIP(blocks[blocks.length - 1], 4);
	    var expectedNumberOfBlocks = foundIPv4TransitionBlock ? 7 : 8;
	
	    if (blocks.length > expectedNumberOfBlocks) {
	      return false;
	    }
	    // initial or final ::
	    if (str === '::') {
	      return true;
	    } else if (str.substr(0, 2) === '::') {
	      blocks.shift();
	      blocks.shift();
	      foundOmissionBlock = true;
	    } else if (str.substr(str.length - 2) === '::') {
	      blocks.pop();
	      blocks.pop();
	      foundOmissionBlock = true;
	    }
	
	    for (var i = 0; i < blocks.length; ++i) {
	      // test for a :: which can not be at the string start/end
	      // since those cases have been handled above
	      if (blocks[i] === '' && i > 0 && i < blocks.length - 1) {
	        if (foundOmissionBlock) {
	          return false; // multiple :: in address
	        }
	        foundOmissionBlock = true;
	      } else if (foundIPv4TransitionBlock && i === blocks.length - 1) {
	        // it has been checked before that the last
	        // block is a valid IPv4 address
	      } else if (!ipv6Block.test(blocks[i])) {
	        return false;
	      }
	    }
	    if (foundOmissionBlock) {
	      return blocks.length >= 1;
	    }
	    return blocks.length === expectedNumberOfBlocks;
	  }
	  return false;
	}
	module.exports = exports['default'];

/***/ },
/* 498 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isMACAddress;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	var macAddress = /^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$/;
	
	function isMACAddress(str) {
	  (0, _assertString2.default)(str);
	  return macAddress.test(str);
	}
	module.exports = exports['default'];

/***/ },
/* 499 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isBoolean;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function isBoolean(str) {
	  (0, _assertString2.default)(str);
	  return ['true', 'false', '1', '0'].indexOf(str) >= 0;
	}
	module.exports = exports['default'];

/***/ },
/* 500 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isAlpha;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	var _alpha = __webpack_require__(501);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function isAlpha(str) {
	  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en-US';
	
	  (0, _assertString2.default)(str);
	  if (locale in _alpha.alpha) {
	    return _alpha.alpha[locale].test(str);
	  }
	  throw new Error('Invalid locale \'' + locale + '\'');
	}
	module.exports = exports['default'];

/***/ },
/* 501 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var alpha = exports.alpha = {
	  'en-US': /^[A-Z]+$/i,
	  'bg-BG': /^[А-Я]+$/i,
	  'cs-CZ': /^[A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]+$/i,
	  'da-DK': /^[A-ZÆØÅ]+$/i,
	  'de-DE': /^[A-ZÄÖÜß]+$/i,
	  'el-GR': /^[Α-ω]+$/i,
	  'es-ES': /^[A-ZÁÉÍÑÓÚÜ]+$/i,
	  'fr-FR': /^[A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]+$/i,
	  'it-IT': /^[A-ZÀÉÈÌÎÓÒÙ]+$/i,
	  'nb-NO': /^[A-ZÆØÅ]+$/i,
	  'nl-NL': /^[A-ZÁÉËÏÓÖÜÚ]+$/i,
	  'nn-NO': /^[A-ZÆØÅ]+$/i,
	  'hu-HU': /^[A-ZÁÉÍÓÖŐÚÜŰ]+$/i,
	  'pl-PL': /^[A-ZĄĆĘŚŁŃÓŻŹ]+$/i,
	  'pt-PT': /^[A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ]+$/i,
	  'ru-RU': /^[А-ЯЁ]+$/i,
	  'sk-SK': /^[A-ZÁČĎÉÍŇÓŠŤÚÝŽĹŔĽÄÔ]+$/i,
	  'sr-RS@latin': /^[A-ZČĆŽŠĐ]+$/i,
	  'sr-RS': /^[А-ЯЂЈЉЊЋЏ]+$/i,
	  'sv-SE': /^[A-ZÅÄÖ]+$/i,
	  'tr-TR': /^[A-ZÇĞİıÖŞÜ]+$/i,
	  'uk-UA': /^[А-ЩЬЮЯЄIЇҐі]+$/i,
	  ar: /^[ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]+$/
	};
	
	var alphanumeric = exports.alphanumeric = {
	  'en-US': /^[0-9A-Z]+$/i,
	  'bg-BG': /^[0-9А-Я]+$/i,
	  'cs-CZ': /^[0-9A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]+$/i,
	  'da-DK': /^[0-9A-ZÆØÅ]+$/i,
	  'de-DE': /^[0-9A-ZÄÖÜß]+$/i,
	  'el-GR': /^[0-9Α-ω]+$/i,
	  'es-ES': /^[0-9A-ZÁÉÍÑÓÚÜ]+$/i,
	  'fr-FR': /^[0-9A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]+$/i,
	  'it-IT': /^[0-9A-ZÀÉÈÌÎÓÒÙ]+$/i,
	  'hu-HU': /^[0-9A-ZÁÉÍÓÖŐÚÜŰ]+$/i,
	  'nb-NO': /^[0-9A-ZÆØÅ]+$/i,
	  'nl-NL': /^[0-9A-ZÁÉËÏÓÖÜÚ]+$/i,
	  'nn-NO': /^[0-9A-ZÆØÅ]+$/i,
	  'pl-PL': /^[0-9A-ZĄĆĘŚŁŃÓŻŹ]+$/i,
	  'pt-PT': /^[0-9A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ]+$/i,
	  'ru-RU': /^[0-9А-ЯЁ]+$/i,
	  'sk-SK': /^[0-9A-ZÁČĎÉÍŇÓŠŤÚÝŽĹŔĽÄÔ]+$/i,
	  'sr-RS@latin': /^[0-9A-ZČĆŽŠĐ]+$/i,
	  'sr-RS': /^[0-9А-ЯЂЈЉЊЋЏ]+$/i,
	  'sv-SE': /^[0-9A-ZÅÄÖ]+$/i,
	  'tr-TR': /^[0-9A-ZÇĞİıÖŞÜ]+$/i,
	  'uk-UA': /^[0-9А-ЩЬЮЯЄIЇҐі]+$/i,
	  ar: /^[٠١٢٣٤٥٦٧٨٩0-9ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]+$/
	};
	
	var decimal = exports.decimal = {
	  'en-US': '.',
	  ar: '٫'
	};
	
	var englishLocales = exports.englishLocales = ['AU', 'GB', 'HK', 'IN', 'NZ', 'ZA', 'ZM'];
	
	for (var locale, i = 0; i < englishLocales.length; i++) {
	  locale = 'en-' + englishLocales[i];
	  alpha[locale] = alpha['en-US'];
	  alphanumeric[locale] = alphanumeric['en-US'];
	  decimal[locale] = decimal['en-US'];
	}
	
	// Source: http://www.localeplanet.com/java/
	var arabicLocales = exports.arabicLocales = ['AE', 'BH', 'DZ', 'EG', 'IQ', 'JO', 'KW', 'LB', 'LY', 'MA', 'QM', 'QA', 'SA', 'SD', 'SY', 'TN', 'YE'];
	
	for (var _locale, _i = 0; _i < arabicLocales.length; _i++) {
	  _locale = 'ar-' + arabicLocales[_i];
	  alpha[_locale] = alpha.ar;
	  alphanumeric[_locale] = alphanumeric.ar;
	  decimal[_locale] = decimal.ar;
	}
	
	// Source: https://en.wikipedia.org/wiki/Decimal_mark
	var dotDecimal = exports.dotDecimal = [];
	var commaDecimal = exports.commaDecimal = ['bg-BG', 'cs-CZ', 'da-DK', 'de-DE', 'el-GR', 'es-ES', 'fr-FR', 'it-IT', 'hu-HU', 'nb-NO', 'nn-NO', 'nl-NL', 'pl-Pl', 'pt-PT', 'ru-RU', 'sr-RS@latin', 'sr-RS', 'sv-SE', 'tr-TR', 'uk-UA'];
	
	for (var _i2 = 0; _i2 < dotDecimal.length; _i2++) {
	  decimal[dotDecimal[_i2]] = decimal['en-US'];
	}
	
	for (var _i3 = 0; _i3 < commaDecimal.length; _i3++) {
	  decimal[commaDecimal[_i3]] = ',';
	}
	
	alpha['pt-BR'] = alpha['pt-PT'];
	alphanumeric['pt-BR'] = alphanumeric['pt-PT'];
	decimal['pt-BR'] = decimal['pt-PT'];

/***/ },
/* 502 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isAlphanumeric;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	var _alpha = __webpack_require__(501);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function isAlphanumeric(str) {
	  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en-US';
	
	  (0, _assertString2.default)(str);
	  if (locale in _alpha.alphanumeric) {
	    return _alpha.alphanumeric[locale].test(str);
	  }
	  throw new Error('Invalid locale \'' + locale + '\'');
	}
	module.exports = exports['default'];

/***/ },
/* 503 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isNumeric;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	var numeric = /^[-+]?[0-9]+$/;
	
	function isNumeric(str) {
	  (0, _assertString2.default)(str);
	  return numeric.test(str);
	}
	module.exports = exports['default'];

/***/ },
/* 504 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isPort;
	
	var _isInt = __webpack_require__(505);
	
	var _isInt2 = _interopRequireDefault(_isInt);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function isPort(str) {
	  return (0, _isInt2.default)(str, { min: 0, max: 65535 });
	}
	module.exports = exports['default'];

/***/ },
/* 505 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isInt;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	var int = /^(?:[-+]?(?:0|[1-9][0-9]*))$/;
	var intLeadingZeroes = /^[-+]?[0-9]+$/;
	
	function isInt(str, options) {
	  (0, _assertString2.default)(str);
	  options = options || {};
	
	  // Get the regex to use for testing, based on whether
	  // leading zeroes are allowed or not.
	  var regex = options.hasOwnProperty('allow_leading_zeroes') && !options.allow_leading_zeroes ? int : intLeadingZeroes;
	
	  // Check min/max/lt/gt
	  var minCheckPassed = !options.hasOwnProperty('min') || str >= options.min;
	  var maxCheckPassed = !options.hasOwnProperty('max') || str <= options.max;
	  var ltCheckPassed = !options.hasOwnProperty('lt') || str < options.lt;
	  var gtCheckPassed = !options.hasOwnProperty('gt') || str > options.gt;
	
	  return regex.test(str) && minCheckPassed && maxCheckPassed && ltCheckPassed && gtCheckPassed;
	}
	module.exports = exports['default'];

/***/ },
/* 506 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isLowercase;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function isLowercase(str) {
	  (0, _assertString2.default)(str);
	  return str === str.toLowerCase();
	}
	module.exports = exports['default'];

/***/ },
/* 507 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isUppercase;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function isUppercase(str) {
	  (0, _assertString2.default)(str);
	  return str === str.toUpperCase();
	}
	module.exports = exports['default'];

/***/ },
/* 508 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isAscii;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	/* eslint-disable no-control-regex */
	var ascii = /^[\x00-\x7F]+$/;
	/* eslint-enable no-control-regex */
	
	function isAscii(str) {
	  (0, _assertString2.default)(str);
	  return ascii.test(str);
	}
	module.exports = exports['default'];

/***/ },
/* 509 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.fullWidth = undefined;
	exports.default = isFullWidth;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	var fullWidth = exports.fullWidth = /[^\u0020-\u007E\uFF61-\uFF9F\uFFA0-\uFFDC\uFFE8-\uFFEE0-9a-zA-Z]/;
	
	function isFullWidth(str) {
	  (0, _assertString2.default)(str);
	  return fullWidth.test(str);
	}

/***/ },
/* 510 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.halfWidth = undefined;
	exports.default = isHalfWidth;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	var halfWidth = exports.halfWidth = /[\u0020-\u007E\uFF61-\uFF9F\uFFA0-\uFFDC\uFFE8-\uFFEE0-9a-zA-Z]/;
	
	function isHalfWidth(str) {
	  (0, _assertString2.default)(str);
	  return halfWidth.test(str);
	}

/***/ },
/* 511 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isVariableWidth;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	var _isFullWidth = __webpack_require__(509);
	
	var _isHalfWidth = __webpack_require__(510);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function isVariableWidth(str) {
	  (0, _assertString2.default)(str);
	  return _isFullWidth.fullWidth.test(str) && _isHalfWidth.halfWidth.test(str);
	}
	module.exports = exports['default'];

/***/ },
/* 512 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isMultibyte;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	/* eslint-disable no-control-regex */
	var multibyte = /[^\x00-\x7F]/;
	/* eslint-enable no-control-regex */
	
	function isMultibyte(str) {
	  (0, _assertString2.default)(str);
	  return multibyte.test(str);
	}
	module.exports = exports['default'];

/***/ },
/* 513 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isSurrogatePair;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	var surrogatePair = /[\uD800-\uDBFF][\uDC00-\uDFFF]/;
	
	function isSurrogatePair(str) {
	  (0, _assertString2.default)(str);
	  return surrogatePair.test(str);
	}
	module.exports = exports['default'];

/***/ },
/* 514 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isFloat;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	var _alpha = __webpack_require__(501);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function isFloat(str, options) {
	  (0, _assertString2.default)(str);
	  options = options || {};
	  var float = new RegExp('^(?:[-+])?(?:[0-9]+)?(?:\\' + (options.locale ? _alpha.decimal[options.locale] : '.') + '[0-9]*)?(?:[eE][\\+\\-]?(?:[0-9]+))?$');
	  if (str === '' || str === '.' || str === '-' || str === '+') {
	    return false;
	  }
	  return float.test(str) && (!options.hasOwnProperty('min') || str >= options.min) && (!options.hasOwnProperty('max') || str <= options.max) && (!options.hasOwnProperty('lt') || str < options.lt) && (!options.hasOwnProperty('gt') || str > options.gt);
	}
	module.exports = exports['default'];

/***/ },
/* 515 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isDecimal;
	
	var _merge = __webpack_require__(493);
	
	var _merge2 = _interopRequireDefault(_merge);
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	var _alpha = __webpack_require__(501);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function decimalRegExp(options) {
	  var regExp = new RegExp('^[-+]?([0-9]+)?(\\' + _alpha.decimal[options.locale] + '[0-9]{' + options.decimal_digits + '})' + (options.force_decimal ? '' : '?') + '$');
	  return regExp;
	}
	
	var default_decimal_options = {
	  force_decimal: false,
	  decimal_digits: '1,',
	  locale: 'en-US'
	};
	
	var blacklist = ['', '-', '+'];
	
	function isDecimal(str, options) {
	  (0, _assertString2.default)(str);
	  options = (0, _merge2.default)(options, default_decimal_options);
	  if (options.locale in _alpha.decimal) {
	    return !blacklist.includes(str.replace(/ /g, '')) && decimalRegExp(options).test(str);
	  }
	  throw new Error('Invalid locale \'' + options.locale + '\'');
	}
	module.exports = exports['default'];

/***/ },
/* 516 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isHexadecimal;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	var hexadecimal = /^[0-9A-F]+$/i;
	
	function isHexadecimal(str) {
	  (0, _assertString2.default)(str);
	  return hexadecimal.test(str);
	}
	module.exports = exports['default'];

/***/ },
/* 517 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isDivisibleBy;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	var _toFloat = __webpack_require__(485);
	
	var _toFloat2 = _interopRequireDefault(_toFloat);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function isDivisibleBy(str, num) {
	  (0, _assertString2.default)(str);
	  return (0, _toFloat2.default)(str) % parseInt(num, 10) === 0;
	}
	module.exports = exports['default'];

/***/ },
/* 518 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isHexColor;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	var hexcolor = /^#?([0-9A-F]{3}|[0-9A-F]{6})$/i;
	
	function isHexColor(str) {
	  (0, _assertString2.default)(str);
	  return hexcolor.test(str);
	}
	module.exports = exports['default'];

/***/ },
/* 519 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isISRC;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	// see http://isrc.ifpi.org/en/isrc-standard/code-syntax
	var isrc = /^[A-Z]{2}[0-9A-Z]{3}\d{2}\d{5}$/;
	
	function isISRC(str) {
	  (0, _assertString2.default)(str);
	  return isrc.test(str);
	}
	module.exports = exports['default'];

/***/ },
/* 520 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isMD5;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	var md5 = /^[a-f0-9]{32}$/;
	
	function isMD5(str) {
	  (0, _assertString2.default)(str);
	  return md5.test(str);
	}
	module.exports = exports['default'];

/***/ },
/* 521 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isHash;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	var lengths = {
	  md5: 32,
	  md4: 32,
	  sha1: 40,
	  sha256: 64,
	  sha384: 96,
	  sha512: 128,
	  ripemd128: 32,
	  ripemd160: 40,
	  tiger128: 32,
	  tiger160: 40,
	  tiger192: 48,
	  crc32: 8,
	  crc32b: 8
	};
	
	function isHash(str, algorithm) {
	  (0, _assertString2.default)(str);
	  var hash = new RegExp('^[a-f0-9]{' + lengths[algorithm] + '}$');
	  return hash.test(str);
	}
	module.exports = exports['default'];

/***/ },
/* 522 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};
	
	exports.default = isJSON;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function isJSON(str) {
	  (0, _assertString2.default)(str);
	  try {
	    var obj = JSON.parse(str);
	    return !!obj && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object';
	  } catch (e) {/* ignore */}
	  return false;
	}
	module.exports = exports['default'];

/***/ },
/* 523 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isEmpty;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function isEmpty(str) {
	  (0, _assertString2.default)(str);
	  return str.length === 0;
	}
	module.exports = exports['default'];

/***/ },
/* 524 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};
	
	exports.default = isLength;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	/* eslint-disable prefer-rest-params */
	function isLength(str, options) {
	  (0, _assertString2.default)(str);
	  var min = void 0;
	  var max = void 0;
	  if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {
	    min = options.min || 0;
	    max = options.max;
	  } else {
	    // backwards compatibility: isLength(str, min [, max])
	    min = arguments[1];
	    max = arguments[2];
	  }
	  var surrogatePairs = str.match(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g) || [];
	  var len = str.length - surrogatePairs.length;
	  return len >= min && (typeof max === 'undefined' || len <= max);
	}
	module.exports = exports['default'];

/***/ },
/* 525 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isUUID;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	var uuid = {
	  3: /^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,
	  4: /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,
	  5: /^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,
	  all: /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i
	};
	
	function isUUID(str) {
	  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'all';
	
	  (0, _assertString2.default)(str);
	  var pattern = uuid[version];
	  return pattern && pattern.test(str);
	}
	module.exports = exports['default'];

/***/ },
/* 526 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isMongoId;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	var _isHexadecimal = __webpack_require__(516);
	
	var _isHexadecimal2 = _interopRequireDefault(_isHexadecimal);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function isMongoId(str) {
	  (0, _assertString2.default)(str);
	  return (0, _isHexadecimal2.default)(str) && str.length === 24;
	}
	module.exports = exports['default'];

/***/ },
/* 527 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isAfter;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	var _toDate = __webpack_require__(483);
	
	var _toDate2 = _interopRequireDefault(_toDate);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function isAfter(str) {
	  var date = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : String(new Date());
	
	  (0, _assertString2.default)(str);
	  var comparison = (0, _toDate2.default)(date);
	  var original = (0, _toDate2.default)(str);
	  return !!(original && comparison && original > comparison);
	}
	module.exports = exports['default'];

/***/ },
/* 528 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isBefore;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	var _toDate = __webpack_require__(483);
	
	var _toDate2 = _interopRequireDefault(_toDate);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function isBefore(str) {
	  var date = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : String(new Date());
	
	  (0, _assertString2.default)(str);
	  var comparison = (0, _toDate2.default)(date);
	  var original = (0, _toDate2.default)(str);
	  return !!(original && comparison && original < comparison);
	}
	module.exports = exports['default'];

/***/ },
/* 529 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};
	
	exports.default = isIn;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	var _toString = __webpack_require__(490);
	
	var _toString2 = _interopRequireDefault(_toString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function isIn(str, options) {
	  (0, _assertString2.default)(str);
	  var i = void 0;
	  if (Object.prototype.toString.call(options) === '[object Array]') {
	    var array = [];
	    for (i in options) {
	      if ({}.hasOwnProperty.call(options, i)) {
	        array[i] = (0, _toString2.default)(options[i]);
	      }
	    }
	    return array.indexOf(str) >= 0;
	  } else if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {
	    return options.hasOwnProperty(str);
	  } else if (options && typeof options.indexOf === 'function') {
	    return options.indexOf(str) >= 0;
	  }
	  return false;
	}
	module.exports = exports['default'];

/***/ },
/* 530 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isCreditCard;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	/* eslint-disable max-len */
	var creditCard = /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|(222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11}|62[0-9]{14})$/;
	/* eslint-enable max-len */
	
	function isCreditCard(str) {
	  (0, _assertString2.default)(str);
	  var sanitized = str.replace(/[- ]+/g, '');
	  if (!creditCard.test(sanitized)) {
	    return false;
	  }
	  var sum = 0;
	  var digit = void 0;
	  var tmpNum = void 0;
	  var shouldDouble = void 0;
	  for (var i = sanitized.length - 1; i >= 0; i--) {
	    digit = sanitized.substring(i, i + 1);
	    tmpNum = parseInt(digit, 10);
	    if (shouldDouble) {
	      tmpNum *= 2;
	      if (tmpNum >= 10) {
	        sum += tmpNum % 10 + 1;
	      } else {
	        sum += tmpNum;
	      }
	    } else {
	      sum += tmpNum;
	    }
	    shouldDouble = !shouldDouble;
	  }
	  return !!(sum % 10 === 0 ? sanitized : false);
	}
	module.exports = exports['default'];

/***/ },
/* 531 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isISIN;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	var isin = /^[A-Z]{2}[0-9A-Z]{9}[0-9]$/;
	
	function isISIN(str) {
	  (0, _assertString2.default)(str);
	  if (!isin.test(str)) {
	    return false;
	  }
	
	  var checksumStr = str.replace(/[A-Z]/g, function (character) {
	    return parseInt(character, 36);
	  });
	
	  var sum = 0;
	  var digit = void 0;
	  var tmpNum = void 0;
	  var shouldDouble = true;
	  for (var i = checksumStr.length - 2; i >= 0; i--) {
	    digit = checksumStr.substring(i, i + 1);
	    tmpNum = parseInt(digit, 10);
	    if (shouldDouble) {
	      tmpNum *= 2;
	      if (tmpNum >= 10) {
	        sum += tmpNum + 1;
	      } else {
	        sum += tmpNum;
	      }
	    } else {
	      sum += tmpNum;
	    }
	    shouldDouble = !shouldDouble;
	  }
	
	  return parseInt(str.substr(str.length - 1), 10) === (10000 - sum) % 10;
	}
	module.exports = exports['default'];

/***/ },
/* 532 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isISBN;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	var isbn10Maybe = /^(?:[0-9]{9}X|[0-9]{10})$/;
	var isbn13Maybe = /^(?:[0-9]{13})$/;
	var factor = [1, 3];
	
	function isISBN(str) {
	  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
	
	  (0, _assertString2.default)(str);
	  version = String(version);
	  if (!version) {
	    return isISBN(str, 10) || isISBN(str, 13);
	  }
	  var sanitized = str.replace(/[\s-]+/g, '');
	  var checksum = 0;
	  var i = void 0;
	  if (version === '10') {
	    if (!isbn10Maybe.test(sanitized)) {
	      return false;
	    }
	    for (i = 0; i < 9; i++) {
	      checksum += (i + 1) * sanitized.charAt(i);
	    }
	    if (sanitized.charAt(9) === 'X') {
	      checksum += 10 * 10;
	    } else {
	      checksum += 10 * sanitized.charAt(9);
	    }
	    if (checksum % 11 === 0) {
	      return !!sanitized;
	    }
	  } else if (version === '13') {
	    if (!isbn13Maybe.test(sanitized)) {
	      return false;
	    }
	    for (i = 0; i < 12; i++) {
	      checksum += factor[i % 2] * sanitized.charAt(i);
	    }
	    if (sanitized.charAt(12) - (10 - checksum % 10) % 10 === 0) {
	      return !!sanitized;
	    }
	  }
	  return false;
	}
	module.exports = exports['default'];

/***/ },
/* 533 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isISSN;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	var issn = '^\\d{4}-?\\d{3}[\\dX]$';
	
	function isISSN(str) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	
	  (0, _assertString2.default)(str);
	  var testIssn = issn;
	  testIssn = options.require_hyphen ? testIssn.replace('?', '') : testIssn;
	  testIssn = options.case_sensitive ? new RegExp(testIssn) : new RegExp(testIssn, 'i');
	  if (!testIssn.test(str)) {
	    return false;
	  }
	  var issnDigits = str.replace('-', '');
	  var position = 8;
	  var checksum = 0;
	  var _iteratorNormalCompletion = true;
	  var _didIteratorError = false;
	  var _iteratorError = undefined;
	
	  try {
	    for (var _iterator = issnDigits[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	      var digit = _step.value;
	
	      var digitValue = digit.toUpperCase() === 'X' ? 10 : +digit;
	      checksum += digitValue * position;
	      --position;
	    }
	  } catch (err) {
	    _didIteratorError = true;
	    _iteratorError = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion && _iterator.return) {
	        _iterator.return();
	      }
	    } finally {
	      if (_didIteratorError) {
	        throw _iteratorError;
	      }
	    }
	  }
	
	  return checksum % 11 === 0;
	}
	module.exports = exports['default'];

/***/ },
/* 534 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isMobilePhone;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	/* eslint-disable max-len */
	var phones = {
	  'ar-AE': /^((\+?971)|0)?5[024568]\d{7}$/,
	  'ar-DZ': /^(\+?213|0)(5|6|7)\d{8}$/,
	  'ar-EG': /^((\+?20)|0)?1[012]\d{8}$/,
	  'ar-JO': /^(\+?962|0)?7[789]\d{7}$/,
	  'ar-SA': /^(!?(\+?966)|0)?5\d{8}$/,
	  'ar-SY': /^(!?(\+?963)|0)?9\d{8}$/,
	  'be-BY': /^(\+?375)?(24|25|29|33|44)\d{7}$/,
	  'bg-BG': /^(\+?359|0)?8[789]\d{7}$/,
	  'cs-CZ': /^(\+?420)? ?[1-9][0-9]{2} ?[0-9]{3} ?[0-9]{3}$/,
	  'da-DK': /^(\+?45)?\s?\d{2}\s?\d{2}\s?\d{2}\s?\d{2}$/,
	  'de-DE': /^(\+?49[ \.\-])?([\(]{1}[0-9]{1,6}[\)])?([0-9 \.\-\/]{3,20})((x|ext|extension)[ ]?[0-9]{1,4})?$/,
	  'el-GR': /^(\+?30|0)?(69\d{8})$/,
	  'en-AU': /^(\+?61|0)4\d{8}$/,
	  'en-GB': /^(\+?44|0)7\d{9}$/,
	  'en-HK': /^(\+?852\-?)?[456789]\d{3}\-?\d{4}$/,
	  'en-IN': /^(\+?91|0)?[6789]\d{9}$/,
	  'en-KE': /^(\+?254|0)?[7]\d{8}$/,
	  'en-NG': /^(\+?234|0)?[789]\d{9}$/,
	  'en-NZ': /^(\+?64|0)2\d{7,9}$/,
	  'en-PK': /^((\+92)|(0092))-{0,1}\d{3}-{0,1}\d{7}$|^\d{11}$|^\d{4}-\d{7}$/,
	  'en-RW': /^(\+?250|0)?[7]\d{8}$/,
	  'en-SG': /^(\+65)?[89]\d{7}$/,
	  'en-TZ': /^(\+?255|0)?[67]\d{8}$/,
	  'en-UG': /^(\+?256|0)?[7]\d{8}$/,
	  'en-US': /^(\+?1)?[2-9]\d{2}[2-9](?!11)\d{6}$/,
	  'en-ZA': /^(\+?27|0)\d{9}$/,
	  'en-ZM': /^(\+?26)?09[567]\d{7}$/,
	  'es-ES': /^(\+?34)?(6\d{1}|7[1234])\d{7}$/,
	  'et-EE': /^(\+?372)?\s?(5|8[1-4])\s?([0-9]\s?){6,7}$/,
	  'fa-IR': /^(\+?98[\-\s]?|0)9[0-39]\d[\-\s]?\d{3}[\-\s]?\d{4}$/,
	  'fi-FI': /^(\+?358|0)\s?(4(0|1|2|4|5|6)?|50)\s?(\d\s?){4,8}\d$/,
	  'fo-FO': /^(\+?298)?\s?\d{2}\s?\d{2}\s?\d{2}$/,
	  'fr-FR': /^(\+?33|0)[67]\d{8}$/,
	  'he-IL': /^(\+972|0)([23489]|5[012345689]|77)[1-9]\d{6}/,
	  'hu-HU': /^(\+?36)(20|30|70)\d{7}$/,
	  'id-ID': /^(\+?62|0[1-9])[\s|\d]+$/,
	  'it-IT': /^(\+?39)?\s?3\d{2} ?\d{6,7}$/,
	  'ja-JP': /^(\+?81|0)[789]0[ \-]?[1-9]\d{2}[ \-]?\d{5}$/,
	  'kk-KZ': /^(\+?7|8)?7\d{9}$/,
	  'kl-GL': /^(\+?299)?\s?\d{2}\s?\d{2}\s?\d{2}$/,
	  'ko-KR': /^((\+?82)[ \-]?)?0?1([0|1|6|7|8|9]{1})[ \-]?\d{3,4}[ \-]?\d{4}$/,
	  'lt-LT': /^(\+370|8)\d{8}$/,
	  'ms-MY': /^(\+?6?01){1}(([145]{1}(\-|\s)?\d{7,8})|([236789]{1}(\s|\-)?\d{7}))$/,
	  'nb-NO': /^(\+?47)?[49]\d{7}$/,
	  'nl-BE': /^(\+?32|0)4?\d{8}$/,
	  'nn-NO': /^(\+?47)?[49]\d{7}$/,
	  'pl-PL': /^(\+?48)? ?[5-8]\d ?\d{3} ?\d{2} ?\d{2}$/,
	  'pt-BR': /^(\+?55|0)\-?[1-9]{2}\-?[2-9]{1}\d{3,4}\-?\d{4}$/,
	  'pt-PT': /^(\+?351)?9[1236]\d{7}$/,
	  'ro-RO': /^(\+?4?0)\s?7\d{2}(\/|\s|\.|\-)?\d{3}(\s|\.|\-)?\d{3}$/,
	  'ru-RU': /^(\+?7|8)?9\d{9}$/,
	  'sk-SK': /^(\+?421)? ?[1-9][0-9]{2} ?[0-9]{3} ?[0-9]{3}$/,
	  'sr-RS': /^(\+3816|06)[- \d]{5,9}$/,
	  'th-TH': /^(\+66|66|0)\d{9}$/,
	  'tr-TR': /^(\+?90|0)?5\d{9}$/,
	  'uk-UA': /^(\+?38|8)?0\d{9}$/,
	  'vi-VN': /^(\+?84|0)?((1(2([0-9])|6([2-9])|88|99))|(9((?!5)[0-9])))([0-9]{7})$/,
	  'zh-CN': /^(\+?0?86\-?)?1[3456789]\d{9}$/,
	  'zh-TW': /^(\+?886\-?|0)?9\d{8}$/
	};
	/* eslint-enable max-len */
	
	// aliases
	phones['en-CA'] = phones['en-US'];
	phones['fr-BE'] = phones['nl-BE'];
	phones['zh-HK'] = phones['en-HK'];
	
	function isMobilePhone(str, locale, options) {
	  (0, _assertString2.default)(str);
	  if (options && options.strictMode && !str.startsWith('+')) {
	    return false;
	  }
	  if (locale in phones) {
	    return phones[locale].test(str);
	  } else if (locale === 'any') {
	    for (var key in phones) {
	      if (phones.hasOwnProperty(key)) {
	        var phone = phones[key];
	        if (phone.test(str)) {
	          return true;
	        }
	      }
	    }
	    return false;
	  }
	  throw new Error('Invalid locale \'' + locale + '\'');
	}
	module.exports = exports['default'];

/***/ },
/* 535 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isCurrency;
	
	var _merge = __webpack_require__(493);
	
	var _merge2 = _interopRequireDefault(_merge);
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function currencyRegex(options) {
	  var decimal_digits = '\\d{' + options.digits_after_decimal[0] + '}';
	  options.digits_after_decimal.forEach(function (digit, index) {
	    if (index !== 0) decimal_digits = decimal_digits + '|\\d{' + digit + '}';
	  });
	  var symbol = '(\\' + options.symbol.replace(/\./g, '\\.') + ')' + (options.require_symbol ? '' : '?'),
	      negative = '-?',
	      whole_dollar_amount_without_sep = '[1-9]\\d*',
	      whole_dollar_amount_with_sep = '[1-9]\\d{0,2}(\\' + options.thousands_separator + '\\d{3})*',
	      valid_whole_dollar_amounts = ['0', whole_dollar_amount_without_sep, whole_dollar_amount_with_sep],
	      whole_dollar_amount = '(' + valid_whole_dollar_amounts.join('|') + ')?',
	      decimal_amount = '(\\' + options.decimal_separator + '(' + decimal_digits + '))' + (options.require_decimal ? '' : '?');
	  var pattern = whole_dollar_amount + (options.allow_decimal || options.require_decimal ? decimal_amount : '');
	
	  // default is negative sign before symbol, but there are two other options (besides parens)
	  if (options.allow_negatives && !options.parens_for_negatives) {
	    if (options.negative_sign_after_digits) {
	      pattern += negative;
	    } else if (options.negative_sign_before_digits) {
	      pattern = negative + pattern;
	    }
	  }
	
	  // South African Rand, for example, uses R 123 (space) and R-123 (no space)
	  if (options.allow_negative_sign_placeholder) {
	    pattern = '( (?!\\-))?' + pattern;
	  } else if (options.allow_space_after_symbol) {
	    pattern = ' ?' + pattern;
	  } else if (options.allow_space_after_digits) {
	    pattern += '( (?!$))?';
	  }
	
	  if (options.symbol_after_digits) {
	    pattern += symbol;
	  } else {
	    pattern = symbol + pattern;
	  }
	
	  if (options.allow_negatives) {
	    if (options.parens_for_negatives) {
	      pattern = '(\\(' + pattern + '\\)|' + pattern + ')';
	    } else if (!(options.negative_sign_before_digits || options.negative_sign_after_digits)) {
	      pattern = negative + pattern;
	    }
	  }
	
	  // ensure there's a dollar and/or decimal amount, and that
	  // it doesn't start with a space or a negative sign followed by a space
	  return new RegExp('^(?!-? )(?=.*\\d)' + pattern + '$');
	}
	
	var default_currency_options = {
	  symbol: '$',
	  require_symbol: false,
	  allow_space_after_symbol: false,
	  symbol_after_digits: false,
	  allow_negatives: true,
	  parens_for_negatives: false,
	  negative_sign_before_digits: false,
	  negative_sign_after_digits: false,
	  allow_negative_sign_placeholder: false,
	  thousands_separator: ',',
	  decimal_separator: '.',
	  allow_decimal: true,
	  require_decimal: false,
	  digits_after_decimal: [2],
	  allow_space_after_digits: false
	};
	
	function isCurrency(str, options) {
	  (0, _assertString2.default)(str);
	  options = (0, _merge2.default)(options, default_currency_options);
	  return currencyRegex(options).test(str);
	}
	module.exports = exports['default'];

/***/ },
/* 536 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isISO8601;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	/* eslint-disable max-len */
	// from http://goo.gl/0ejHHW
	var iso8601 = /^([\+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T\s]((([01]\d|2[0-3])((:?)[0-5]\d)?|24:?00)([\.,]\d+(?!:))?)?(\17[0-5]\d([\.,]\d+)?)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$/;
	/* eslint-enable max-len */
	
	function isISO8601(str) {
	  (0, _assertString2.default)(str);
	  return iso8601.test(str);
	}
	module.exports = exports['default'];

/***/ },
/* 537 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isISO31661Alpha2;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	// from https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
	var validISO31661Alpha2CountriesCodes = ['AD', 'AE', 'AF', 'AG', 'AI', 'AL', 'AM', 'AO', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AW', 'AX', 'AZ', 'BA', 'BB', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BL', 'BM', 'BN', 'BO', 'BQ', 'BR', 'BS', 'BT', 'BV', 'BW', 'BY', 'BZ', 'CA', 'CC', 'CD', 'CF', 'CG', 'CH', 'CI', 'CK', 'CL', 'CM', 'CN', 'CO', 'CR', 'CU', 'CV', 'CW', 'CX', 'CY', 'CZ', 'DE', 'DJ', 'DK', 'DM', 'DO', 'DZ', 'EC', 'EE', 'EG', 'EH', 'ER', 'ES', 'ET', 'FI', 'FJ', 'FK', 'FM', 'FO', 'FR', 'GA', 'GB', 'GD', 'GE', 'GF', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GP', 'GQ', 'GR', 'GS', 'GT', 'GU', 'GW', 'GY', 'HK', 'HM', 'HN', 'HR', 'HT', 'HU', 'ID', 'IE', 'IL', 'IM', 'IN', 'IO', 'IQ', 'IR', 'IS', 'IT', 'JE', 'JM', 'JO', 'JP', 'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ', 'LA', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY', 'MA', 'MC', 'MD', 'ME', 'MF', 'MG', 'MH', 'MK', 'ML', 'MM', 'MN', 'MO', 'MP', 'MQ', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ', 'NA', 'NC', 'NE', 'NF', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NU', 'NZ', 'OM', 'PA', 'PE', 'PF', 'PG', 'PH', 'PK', 'PL', 'PM', 'PN', 'PR', 'PS', 'PT', 'PW', 'PY', 'QA', 'RE', 'RO', 'RS', 'RU', 'RW', 'SA', 'SB', 'SC', 'SD', 'SE', 'SG', 'SH', 'SI', 'SJ', 'SK', 'SL', 'SM', 'SN', 'SO', 'SR', 'SS', 'ST', 'SV', 'SX', 'SY', 'SZ', 'TC', 'TD', 'TF', 'TG', 'TH', 'TJ', 'TK', 'TL', 'TM', 'TN', 'TO', 'TR', 'TT', 'TV', 'TW', 'TZ', 'UA', 'UG', 'UM', 'US', 'UY', 'UZ', 'VA', 'VC', 'VE', 'VG', 'VI', 'VN', 'VU', 'WF', 'WS', 'YE', 'YT', 'ZA', 'ZM', 'ZW'];
	
	function isISO31661Alpha2(str) {
	  (0, _assertString2.default)(str);
	  return validISO31661Alpha2CountriesCodes.includes(str.toUpperCase());
	}
	module.exports = exports['default'];

/***/ },
/* 538 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isBase64;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	var notBase64 = /[^A-Z0-9+\/=]/i;
	
	function isBase64(str) {
	  (0, _assertString2.default)(str);
	  var len = str.length;
	  if (!len || len % 4 !== 0 || notBase64.test(str)) {
	    return false;
	  }
	  var firstPaddingChar = str.indexOf('=');
	  return firstPaddingChar === -1 || firstPaddingChar === len - 1 || firstPaddingChar === len - 2 && str[len - 1] === '=';
	}
	module.exports = exports['default'];

/***/ },
/* 539 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isDataURI;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	var validMediaType = /^[a-z]+\/[a-z0-9\-\+]+$/i;
	
	var validAttribute = /^[a-z\-]+=[a-z0-9\-]+$/i;
	
	var validData = /^[a-z0-9!\$&'\(\)\*\+,;=\-\._~:@\/\?%\s]*$/i;
	
	function isDataURI(str) {
	  (0, _assertString2.default)(str);
	  var data = str.split(',');
	  if (data.length < 2) {
	    return false;
	  }
	  var attributes = data.shift().trim().split(';');
	  var schemeAndMediaType = attributes.shift();
	  if (schemeAndMediaType.substr(0, 5) !== 'data:') {
	    return false;
	  }
	  var mediaType = schemeAndMediaType.substr(5);
	  if (mediaType !== '' && !validMediaType.test(mediaType)) {
	    return false;
	  }
	  for (var i = 0; i < attributes.length; i++) {
	    if (i === attributes.length - 1 && attributes[i].toLowerCase() === 'base64') {
	      // ok
	    } else if (!validAttribute.test(attributes[i])) {
	      return false;
	    }
	  }
	  for (var _i = 0; _i < data.length; _i++) {
	    if (!validData.test(data[_i])) {
	      return false;
	    }
	  }
	  return true;
	}
	module.exports = exports['default'];

/***/ },
/* 540 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isMimeType;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	/*
	  Checks if the provided string matches to a correct Media type format (MIME type)
	
	  This function only checks is the string format follows the
	  etablished rules by the according RFC specifications.
	  This function supports 'charset' in textual media types
	  (https://tools.ietf.org/html/rfc6657).
	
	  This function does not check against all the media types listed
	  by the IANA (https://www.iana.org/assignments/media-types/media-types.xhtml)
	  because of lightness purposes : it would require to include
	  all these MIME types in this librairy, which would weigh it
	  significantly. This kind of effort maybe is not worth for the use that
	  this function has in this entire librairy.
	
	  More informations in the RFC specifications :
	  - https://tools.ietf.org/html/rfc2045
	  - https://tools.ietf.org/html/rfc2046
	  - https://tools.ietf.org/html/rfc7231#section-3.1.1.1
	  - https://tools.ietf.org/html/rfc7231#section-3.1.1.5
	*/
	
	// Match simple MIME types
	// NB :
	//   Subtype length must not exceed 100 characters.
	//   This rule does not comply to the RFC specs (what is the max length ?).
	var mimeTypeSimple = /^(application|audio|font|image|message|model|multipart|text|video)\/[a-zA-Z0-9\.\-\+]{1,100}$/i; // eslint-disable-line max-len
	
	// Handle "charset" in "text/*"
	var mimeTypeText = /^text\/[a-zA-Z0-9\.\-\+]{1,100};\s?charset=("[a-zA-Z0-9\.\-\+\s]{0,70}"|[a-zA-Z0-9\.\-\+]{0,70})(\s?\([a-zA-Z0-9\.\-\+\s]{1,20}\))?$/i; // eslint-disable-line max-len
	
	// Handle "boundary" in "multipart/*"
	var mimeTypeMultipart = /^multipart\/[a-zA-Z0-9\.\-\+]{1,100}(;\s?(boundary|charset)=("[a-zA-Z0-9\.\-\+\s]{0,70}"|[a-zA-Z0-9\.\-\+]{0,70})(\s?\([a-zA-Z0-9\.\-\+\s]{1,20}\))?){0,2}$/i; // eslint-disable-line max-len
	
	function isMimeType(str) {
	  (0, _assertString2.default)(str);
	  return mimeTypeSimple.test(str) || mimeTypeText.test(str) || mimeTypeMultipart.test(str);
	}
	module.exports = exports['default'];

/***/ },
/* 541 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	exports.default = function (str) {
	  (0, _assertString2.default)(str);
	  if (!str.includes(',')) return false;
	  var pair = str.split(',');
	  return lat.test(pair[0]) && long.test(pair[1]);
	};
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	var lat = /^\(?[+-]?(90(\.0+)?|[1-8]?\d(\.\d+)?)$/;
	var long = /^\s?[+-]?(180(\.0+)?|1[0-7]\d(\.\d+)?|\d{1,2}(\.\d+)?)\)?$/;
	
	module.exports = exports['default'];

/***/ },
/* 542 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.locales = undefined;
	
	exports.default = function (str, locale) {
	  (0, _assertString2.default)(str);
	  if (locale in patterns) {
	    return patterns[locale].test(str);
	  } else if (locale === 'any') {
	    for (var key in patterns) {
	      if (patterns.hasOwnProperty(key)) {
	        var pattern = patterns[key];
	        if (pattern.test(str)) {
	          return true;
	        }
	      }
	    }
	    return false;
	  }
	  throw new Error('Invalid locale \'' + locale + '\'');
	};
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	// common patterns
	var threeDigit = /^\d{3}$/;
	var fourDigit = /^\d{4}$/;
	var fiveDigit = /^\d{5}$/;
	var sixDigit = /^\d{6}$/;
	
	var patterns = {
	  AT: fourDigit,
	  AU: fourDigit,
	  BE: fourDigit,
	  BG: fourDigit,
	  CA: /^[ABCEGHJKLMNPRSTVXY]\d[ABCEGHJ-NPRSTV-Z][\s\-]?\d[ABCEGHJ-NPRSTV-Z]\d$/i,
	  CH: fourDigit,
	  CZ: /^\d{3}\s?\d{2}$/,
	  DE: fiveDigit,
	  DK: fourDigit,
	  DZ: fiveDigit,
	  ES: fiveDigit,
	  FI: fiveDigit,
	  FR: /^\d{2}\s?\d{3}$/,
	  GB: /^(gir\s?0aa|[a-z]{1,2}\d[\da-z]?\s?(\d[a-z]{2})?)$/i,
	  GR: /^\d{3}\s?\d{2}$/,
	  IL: fiveDigit,
	  IN: sixDigit,
	  IS: threeDigit,
	  IT: fiveDigit,
	  JP: /^\d{3}\-\d{4}$/,
	  KE: fiveDigit,
	  LI: /^(948[5-9]|949[0-7])$/,
	  MX: fiveDigit,
	  NL: /^\d{4}\s?[a-z]{2}$/i,
	  NO: fourDigit,
	  PL: /^\d{2}\-\d{3}$/,
	  PT: /^\d{4}\-\d{3}?$/,
	  RO: sixDigit,
	  RU: sixDigit,
	  SA: fiveDigit,
	  SE: /^\d{3}\s?\d{2}$/,
	  TW: /^\d{3}(\d{2})?$/,
	  US: /^\d{5}(-\d{4})?$/,
	  ZA: fourDigit,
	  ZM: fiveDigit
	};
	
	var locales = exports.locales = Object.keys(patterns);

/***/ },
/* 543 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = ltrim;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function ltrim(str, chars) {
	  (0, _assertString2.default)(str);
	  var pattern = chars ? new RegExp('^[' + chars + ']+', 'g') : /^\s+/g;
	  return str.replace(pattern, '');
	}
	module.exports = exports['default'];

/***/ },
/* 544 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = rtrim;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function rtrim(str, chars) {
	  (0, _assertString2.default)(str);
	  var pattern = chars ? new RegExp('[' + chars + ']') : /\s/;
	
	  var idx = str.length - 1;
	  while (idx >= 0 && pattern.test(str[idx])) {
	    idx--;
	  }
	
	  return idx < str.length ? str.substr(0, idx + 1) : str;
	}
	module.exports = exports['default'];

/***/ },
/* 545 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = trim;
	
	var _rtrim = __webpack_require__(544);
	
	var _rtrim2 = _interopRequireDefault(_rtrim);
	
	var _ltrim = __webpack_require__(543);
	
	var _ltrim2 = _interopRequireDefault(_ltrim);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function trim(str, chars) {
	  return (0, _rtrim2.default)((0, _ltrim2.default)(str, chars), chars);
	}
	module.exports = exports['default'];

/***/ },
/* 546 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = escape;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function escape(str) {
	  (0, _assertString2.default)(str);
	  return str.replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&#x27;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\//g, '&#x2F;').replace(/\\/g, '&#x5C;').replace(/`/g, '&#96;');
	}
	module.exports = exports['default'];

/***/ },
/* 547 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = unescape;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function unescape(str) {
	  (0, _assertString2.default)(str);
	  return str.replace(/&amp;/g, '&').replace(/&quot;/g, '"').replace(/&#x27;/g, "'").replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&#x2F;/g, '/').replace(/&#x5C;/g, '\\').replace(/&#96;/g, '`');
	}
	module.exports = exports['default'];

/***/ },
/* 548 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = stripLow;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	var _blacklist = __webpack_require__(549);
	
	var _blacklist2 = _interopRequireDefault(_blacklist);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function stripLow(str, keep_new_lines) {
	  (0, _assertString2.default)(str);
	  var chars = keep_new_lines ? '\\x00-\\x09\\x0B\\x0C\\x0E-\\x1F\\x7F' : '\\x00-\\x1F\\x7F';
	  return (0, _blacklist2.default)(str, chars);
	}
	module.exports = exports['default'];

/***/ },
/* 549 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = blacklist;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function blacklist(str, chars) {
	  (0, _assertString2.default)(str);
	  return str.replace(new RegExp('[' + chars + ']+', 'g'), '');
	}
	module.exports = exports['default'];

/***/ },
/* 550 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = whitelist;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function whitelist(str, chars) {
	  (0, _assertString2.default)(str);
	  return str.replace(new RegExp('[^' + chars + ']+', 'g'), '');
	}
	module.exports = exports['default'];

/***/ },
/* 551 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isWhitelisted;
	
	var _assertString = __webpack_require__(484);
	
	var _assertString2 = _interopRequireDefault(_assertString);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function isWhitelisted(str, chars) {
	  (0, _assertString2.default)(str);
	  for (var i = str.length - 1; i >= 0; i--) {
	    if (chars.indexOf(str[i]) === -1) {
	      return false;
	    }
	  }
	  return true;
	}
	module.exports = exports['default'];

/***/ },
/* 552 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = normalizeEmail;
	
	var _merge = __webpack_require__(493);
	
	var _merge2 = _interopRequireDefault(_merge);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	var default_normalize_email_options = {
	  // The following options apply to all email addresses
	  // Lowercases the local part of the email address.
	  // Please note this may violate RFC 5321 as per http://stackoverflow.com/a/9808332/192024).
	  // The domain is always lowercased, as per RFC 1035
	  all_lowercase: true,
	
	  // The following conversions are specific to GMail
	  // Lowercases the local part of the GMail address (known to be case-insensitive)
	  gmail_lowercase: true,
	  // Removes dots from the local part of the email address, as that's ignored by GMail
	  gmail_remove_dots: true,
	  // Removes the subaddress (e.g. "+foo") from the email address
	  gmail_remove_subaddress: true,
	  // Conversts the googlemail.com domain to gmail.com
	  gmail_convert_googlemaildotcom: true,
	
	  // The following conversions are specific to Outlook.com / Windows Live / Hotmail
	  // Lowercases the local part of the Outlook.com address (known to be case-insensitive)
	  outlookdotcom_lowercase: true,
	  // Removes the subaddress (e.g. "+foo") from the email address
	  outlookdotcom_remove_subaddress: true,
	
	  // The following conversions are specific to Yahoo
	  // Lowercases the local part of the Yahoo address (known to be case-insensitive)
	  yahoo_lowercase: true,
	  // Removes the subaddress (e.g. "-foo") from the email address
	  yahoo_remove_subaddress: true,
	
	  // The following conversions are specific to iCloud
	  // Lowercases the local part of the iCloud address (known to be case-insensitive)
	  icloud_lowercase: true,
	  // Removes the subaddress (e.g. "+foo") from the email address
	  icloud_remove_subaddress: true
	};
	
	// List of domains used by iCloud
	var icloud_domains = ['icloud.com', 'me.com'];
	
	// List of domains used by Outlook.com and its predecessors
	// This list is likely incomplete.
	// Partial reference:
	// https://blogs.office.com/2013/04/17/outlook-com-gets-two-step-verification-sign-in-by-alias-and-new-international-domains/
	var outlookdotcom_domains = ['hotmail.at', 'hotmail.be', 'hotmail.ca', 'hotmail.cl', 'hotmail.co.il', 'hotmail.co.nz', 'hotmail.co.th', 'hotmail.co.uk', 'hotmail.com', 'hotmail.com.ar', 'hotmail.com.au', 'hotmail.com.br', 'hotmail.com.gr', 'hotmail.com.mx', 'hotmail.com.pe', 'hotmail.com.tr', 'hotmail.com.vn', 'hotmail.cz', 'hotmail.de', 'hotmail.dk', 'hotmail.es', 'hotmail.fr', 'hotmail.hu', 'hotmail.id', 'hotmail.ie', 'hotmail.in', 'hotmail.it', 'hotmail.jp', 'hotmail.kr', 'hotmail.lv', 'hotmail.my', 'hotmail.ph', 'hotmail.pt', 'hotmail.sa', 'hotmail.sg', 'hotmail.sk', 'live.be', 'live.co.uk', 'live.com', 'live.com.ar', 'live.com.mx', 'live.de', 'live.es', 'live.eu', 'live.fr', 'live.it', 'live.nl', 'msn.com', 'outlook.at', 'outlook.be', 'outlook.cl', 'outlook.co.il', 'outlook.co.nz', 'outlook.co.th', 'outlook.com', 'outlook.com.ar', 'outlook.com.au', 'outlook.com.br', 'outlook.com.gr', 'outlook.com.pe', 'outlook.com.tr', 'outlook.com.vn', 'outlook.cz', 'outlook.de', 'outlook.dk', 'outlook.es', 'outlook.fr', 'outlook.hu', 'outlook.id', 'outlook.ie', 'outlook.in', 'outlook.it', 'outlook.jp', 'outlook.kr', 'outlook.lv', 'outlook.my', 'outlook.ph', 'outlook.pt', 'outlook.sa', 'outlook.sg', 'outlook.sk', 'passport.com'];
	
	// List of domains used by Yahoo Mail
	// This list is likely incomplete
	var yahoo_domains = ['rocketmail.com', 'yahoo.ca', 'yahoo.co.uk', 'yahoo.com', 'yahoo.de', 'yahoo.fr', 'yahoo.in', 'yahoo.it', 'ymail.com'];
	
	function normalizeEmail(email, options) {
	  options = (0, _merge2.default)(options, default_normalize_email_options);
	
	  var raw_parts = email.split('@');
	  var domain = raw_parts.pop();
	  var user = raw_parts.join('@');
	  var parts = [user, domain];
	
	  // The domain is always lowercased, as it's case-insensitive per RFC 1035
	  parts[1] = parts[1].toLowerCase();
	
	  if (parts[1] === 'gmail.com' || parts[1] === 'googlemail.com') {
	    // Address is GMail
	    if (options.gmail_remove_subaddress) {
	      parts[0] = parts[0].split('+')[0];
	    }
	    if (options.gmail_remove_dots) {
	      parts[0] = parts[0].replace(/\./g, '');
	    }
	    if (!parts[0].length) {
	      return false;
	    }
	    if (options.all_lowercase || options.gmail_lowercase) {
	      parts[0] = parts[0].toLowerCase();
	    }
	    parts[1] = options.gmail_convert_googlemaildotcom ? 'gmail.com' : parts[1];
	  } else if (~icloud_domains.indexOf(parts[1])) {
	    // Address is iCloud
	    if (options.icloud_remove_subaddress) {
	      parts[0] = parts[0].split('+')[0];
	    }
	    if (!parts[0].length) {
	      return false;
	    }
	    if (options.all_lowercase || options.icloud_lowercase) {
	      parts[0] = parts[0].toLowerCase();
	    }
	  } else if (~outlookdotcom_domains.indexOf(parts[1])) {
	    // Address is Outlook.com
	    if (options.outlookdotcom_remove_subaddress) {
	      parts[0] = parts[0].split('+')[0];
	    }
	    if (!parts[0].length) {
	      return false;
	    }
	    if (options.all_lowercase || options.outlookdotcom_lowercase) {
	      parts[0] = parts[0].toLowerCase();
	    }
	  } else if (~yahoo_domains.indexOf(parts[1])) {
	    // Address is Yahoo
	    if (options.yahoo_remove_subaddress) {
	      var components = parts[0].split('-');
	      parts[0] = components.length > 1 ? components.slice(0, -1).join('-') : components[0];
	    }
	    if (!parts[0].length) {
	      return false;
	    }
	    if (options.all_lowercase || options.yahoo_lowercase) {
	      parts[0] = parts[0].toLowerCase();
	    }
	  } else if (options.all_lowercase) {
	    // Any other address
	    parts[0] = parts[0].toLowerCase();
	  }
	  return parts.join('@');
	}
	module.exports = exports['default'];

/***/ },
/* 553 */
/***/ function(module, exports) {

	"use strict";
	
	var MAX_PIN_VALUE = 9999;
	var PASSWORD_LENGTH = 8;
	module.exports = {
	  MAX_PIN_VALUE: MAX_PIN_VALUE, PASSWORD_LENGTH: PASSWORD_LENGTH
	};

/***/ },
/* 554 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(555);

/***/ },
/* 555 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(556);
	var bind = __webpack_require__(557);
	var Axios = __webpack_require__(559);
	var defaults = __webpack_require__(560);
	
	/**
	 * Create an instance of Axios
	 *
	 * @param {Object} defaultConfig The default config for the instance
	 * @return {Axios} A new instance of Axios
	 */
	function createInstance(defaultConfig) {
	  var context = new Axios(defaultConfig);
	  var instance = bind(Axios.prototype.request, context);
	
	  // Copy axios.prototype to instance
	  utils.extend(instance, Axios.prototype, context);
	
	  // Copy context to instance
	  utils.extend(instance, context);
	
	  return instance;
	}
	
	// Create the default instance to be exported
	var axios = createInstance(defaults);
	
	// Expose Axios class to allow class inheritance
	axios.Axios = Axios;
	
	// Factory for creating new instances
	axios.create = function create(instanceConfig) {
	  return createInstance(utils.merge(defaults, instanceConfig));
	};
	
	// Expose Cancel & CancelToken
	axios.Cancel = __webpack_require__(578);
	axios.CancelToken = __webpack_require__(579);
	axios.isCancel = __webpack_require__(575);
	
	// Expose all/spread
	axios.all = function all(promises) {
	  return Promise.all(promises);
	};
	axios.spread = __webpack_require__(580);
	
	module.exports = axios;
	
	// Allow use of default import syntax in TypeScript
	module.exports.default = axios;

/***/ },
/* 556 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var bind = __webpack_require__(557);
	var isBuffer = __webpack_require__(558);
	
	/*global toString:true*/
	
	// utils is a library of generic helper functions non-specific to axios
	
	var toString = Object.prototype.toString;
	
	/**
	 * Determine if a value is an Array
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an Array, otherwise false
	 */
	function isArray(val) {
	  return toString.call(val) === '[object Array]';
	}
	
	/**
	 * Determine if a value is an ArrayBuffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
	 */
	function isArrayBuffer(val) {
	  return toString.call(val) === '[object ArrayBuffer]';
	}
	
	/**
	 * Determine if a value is a FormData
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an FormData, otherwise false
	 */
	function isFormData(val) {
	  return typeof FormData !== 'undefined' && val instanceof FormData;
	}
	
	/**
	 * Determine if a value is a view on an ArrayBuffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
	 */
	function isArrayBufferView(val) {
	  var result;
	  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
	    result = ArrayBuffer.isView(val);
	  } else {
	    result = val && val.buffer && val.buffer instanceof ArrayBuffer;
	  }
	  return result;
	}
	
	/**
	 * Determine if a value is a String
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a String, otherwise false
	 */
	function isString(val) {
	  return typeof val === 'string';
	}
	
	/**
	 * Determine if a value is a Number
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Number, otherwise false
	 */
	function isNumber(val) {
	  return typeof val === 'number';
	}
	
	/**
	 * Determine if a value is undefined
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if the value is undefined, otherwise false
	 */
	function isUndefined(val) {
	  return typeof val === 'undefined';
	}
	
	/**
	 * Determine if a value is an Object
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an Object, otherwise false
	 */
	function isObject(val) {
	  return val !== null && (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object';
	}
	
	/**
	 * Determine if a value is a Date
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Date, otherwise false
	 */
	function isDate(val) {
	  return toString.call(val) === '[object Date]';
	}
	
	/**
	 * Determine if a value is a File
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a File, otherwise false
	 */
	function isFile(val) {
	  return toString.call(val) === '[object File]';
	}
	
	/**
	 * Determine if a value is a Blob
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Blob, otherwise false
	 */
	function isBlob(val) {
	  return toString.call(val) === '[object Blob]';
	}
	
	/**
	 * Determine if a value is a Function
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Function, otherwise false
	 */
	function isFunction(val) {
	  return toString.call(val) === '[object Function]';
	}
	
	/**
	 * Determine if a value is a Stream
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Stream, otherwise false
	 */
	function isStream(val) {
	  return isObject(val) && isFunction(val.pipe);
	}
	
	/**
	 * Determine if a value is a URLSearchParams object
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
	 */
	function isURLSearchParams(val) {
	  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
	}
	
	/**
	 * Trim excess whitespace off the beginning and end of a string
	 *
	 * @param {String} str The String to trim
	 * @returns {String} The String freed of excess whitespace
	 */
	function trim(str) {
	  return str.replace(/^\s*/, '').replace(/\s*$/, '');
	}
	
	/**
	 * Determine if we're running in a standard browser environment
	 *
	 * This allows axios to run in a web worker, and react-native.
	 * Both environments support XMLHttpRequest, but not fully standard globals.
	 *
	 * web workers:
	 *  typeof window -> undefined
	 *  typeof document -> undefined
	 *
	 * react-native:
	 *  navigator.product -> 'ReactNative'
	 */
	function isStandardBrowserEnv() {
	  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {
	    return false;
	  }
	  return typeof window !== 'undefined' && typeof document !== 'undefined';
	}
	
	/**
	 * Iterate over an Array or an Object invoking a function for each item.
	 *
	 * If `obj` is an Array callback will be called passing
	 * the value, index, and complete array for each item.
	 *
	 * If 'obj' is an Object callback will be called passing
	 * the value, key, and complete object for each property.
	 *
	 * @param {Object|Array} obj The object to iterate
	 * @param {Function} fn The callback to invoke for each item
	 */
	function forEach(obj, fn) {
	  // Don't bother if no value provided
	  if (obj === null || typeof obj === 'undefined') {
	    return;
	  }
	
	  // Force an array if not already something iterable
	  if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object') {
	    /*eslint no-param-reassign:0*/
	    obj = [obj];
	  }
	
	  if (isArray(obj)) {
	    // Iterate over array values
	    for (var i = 0, l = obj.length; i < l; i++) {
	      fn.call(null, obj[i], i, obj);
	    }
	  } else {
	    // Iterate over object keys
	    for (var key in obj) {
	      if (Object.prototype.hasOwnProperty.call(obj, key)) {
	        fn.call(null, obj[key], key, obj);
	      }
	    }
	  }
	}
	
	/**
	 * Accepts varargs expecting each argument to be an object, then
	 * immutably merges the properties of each object and returns result.
	 *
	 * When multiple objects contain the same key the later object in
	 * the arguments list will take precedence.
	 *
	 * Example:
	 *
	 * ```js
	 * var result = merge({foo: 123}, {foo: 456});
	 * console.log(result.foo); // outputs 456
	 * ```
	 *
	 * @param {Object} obj1 Object to merge
	 * @returns {Object} Result of all merge properties
	 */
	function merge() /* obj1, obj2, obj3, ... */{
	  var result = {};
	  function assignValue(val, key) {
	    if (_typeof(result[key]) === 'object' && (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object') {
	      result[key] = merge(result[key], val);
	    } else {
	      result[key] = val;
	    }
	  }
	
	  for (var i = 0, l = arguments.length; i < l; i++) {
	    forEach(arguments[i], assignValue);
	  }
	  return result;
	}
	
	/**
	 * Extends object a by mutably adding to it the properties of object b.
	 *
	 * @param {Object} a The object to be extended
	 * @param {Object} b The object to copy properties from
	 * @param {Object} thisArg The object to bind function to
	 * @return {Object} The resulting value of object a
	 */
	function extend(a, b, thisArg) {
	  forEach(b, function assignValue(val, key) {
	    if (thisArg && typeof val === 'function') {
	      a[key] = bind(val, thisArg);
	    } else {
	      a[key] = val;
	    }
	  });
	  return a;
	}
	
	module.exports = {
	  isArray: isArray,
	  isArrayBuffer: isArrayBuffer,
	  isBuffer: isBuffer,
	  isFormData: isFormData,
	  isArrayBufferView: isArrayBufferView,
	  isString: isString,
	  isNumber: isNumber,
	  isObject: isObject,
	  isUndefined: isUndefined,
	  isDate: isDate,
	  isFile: isFile,
	  isBlob: isBlob,
	  isFunction: isFunction,
	  isStream: isStream,
	  isURLSearchParams: isURLSearchParams,
	  isStandardBrowserEnv: isStandardBrowserEnv,
	  forEach: forEach,
	  merge: merge,
	  extend: extend,
	  trim: trim
	};

/***/ },
/* 557 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function bind(fn, thisArg) {
	  return function wrap() {
	    var args = new Array(arguments.length);
	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i];
	    }
	    return fn.apply(thisArg, args);
	  };
	};

/***/ },
/* 558 */
/***/ function(module, exports) {

	'use strict';
	
	/*!
	 * Determine if an object is a Buffer
	 *
	 * @author   Feross Aboukhadijeh <https://feross.org>
	 * @license  MIT
	 */
	
	// The _isBuffer check is for Safari 5-7 support, because it's missing
	// Object.prototype.constructor. Remove this eventually
	module.exports = function (obj) {
	  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer);
	};
	
	function isBuffer(obj) {
	  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
	}
	
	// For Node v0.10 support. Remove this eventually.
	function isSlowBuffer(obj) {
	  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0));
	}

/***/ },
/* 559 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var defaults = __webpack_require__(560);
	var utils = __webpack_require__(556);
	var InterceptorManager = __webpack_require__(572);
	var dispatchRequest = __webpack_require__(573);
	
	/**
	 * Create a new instance of Axios
	 *
	 * @param {Object} instanceConfig The default config for the instance
	 */
	function Axios(instanceConfig) {
	  this.defaults = instanceConfig;
	  this.interceptors = {
	    request: new InterceptorManager(),
	    response: new InterceptorManager()
	  };
	}
	
	/**
	 * Dispatch a request
	 *
	 * @param {Object} config The config specific for this request (merged with this.defaults)
	 */
	Axios.prototype.request = function request(config) {
	  /*eslint no-param-reassign:0*/
	  // Allow for axios('example/url'[, config]) a la fetch API
	  if (typeof config === 'string') {
	    config = utils.merge({
	      url: arguments[0]
	    }, arguments[1]);
	  }
	
	  config = utils.merge(defaults, this.defaults, { method: 'get' }, config);
	  config.method = config.method.toLowerCase();
	
	  // Hook up interceptors middleware
	  var chain = [dispatchRequest, undefined];
	  var promise = Promise.resolve(config);
	
	  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
	    chain.unshift(interceptor.fulfilled, interceptor.rejected);
	  });
	
	  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
	    chain.push(interceptor.fulfilled, interceptor.rejected);
	  });
	
	  while (chain.length) {
	    promise = promise.then(chain.shift(), chain.shift());
	  }
	
	  return promise;
	};
	
	// Provide aliases for supported request methods
	utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
	  /*eslint func-names:0*/
	  Axios.prototype[method] = function (url, config) {
	    return this.request(utils.merge(config || {}, {
	      method: method,
	      url: url
	    }));
	  };
	});
	
	utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
	  /*eslint func-names:0*/
	  Axios.prototype[method] = function (url, data, config) {
	    return this.request(utils.merge(config || {}, {
	      method: method,
	      url: url,
	      data: data
	    }));
	  };
	});
	
	module.exports = Axios;

/***/ },
/* 560 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var utils = __webpack_require__(556);
	var normalizeHeaderName = __webpack_require__(562);
	
	var DEFAULT_CONTENT_TYPE = {
	  'Content-Type': 'application/x-www-form-urlencoded'
	};
	
	function setContentTypeIfUnset(headers, value) {
	  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
	    headers['Content-Type'] = value;
	  }
	}
	
	function getDefaultAdapter() {
	  var adapter;
	  if (typeof XMLHttpRequest !== 'undefined') {
	    // For browsers use XHR adapter
	    adapter = __webpack_require__(563);
	  } else if (typeof process !== 'undefined') {
	    // For node use HTTP adapter
	    adapter = __webpack_require__(563);
	  }
	  return adapter;
	}
	
	var defaults = {
	  adapter: getDefaultAdapter(),
	
	  transformRequest: [function transformRequest(data, headers) {
	    normalizeHeaderName(headers, 'Content-Type');
	    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
	      return data;
	    }
	    if (utils.isArrayBufferView(data)) {
	      return data.buffer;
	    }
	    if (utils.isURLSearchParams(data)) {
	      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
	      return data.toString();
	    }
	    if (utils.isObject(data)) {
	      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
	      return JSON.stringify(data);
	    }
	    return data;
	  }],
	
	  transformResponse: [function transformResponse(data) {
	    /*eslint no-param-reassign:0*/
	    if (typeof data === 'string') {
	      try {
	        data = JSON.parse(data);
	      } catch (e) {/* Ignore */}
	    }
	    return data;
	  }],
	
	  timeout: 0,
	
	  xsrfCookieName: 'XSRF-TOKEN',
	  xsrfHeaderName: 'X-XSRF-TOKEN',
	
	  maxContentLength: -1,
	
	  validateStatus: function validateStatus(status) {
	    return status >= 200 && status < 300;
	  }
	};
	
	defaults.headers = {
	  common: {
	    'Accept': 'application/json, text/plain, */*'
	  }
	};
	
	utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
	  defaults.headers[method] = {};
	});
	
	utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
	  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
	});
	
	module.exports = defaults;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(561)))

/***/ },
/* 561 */
/***/ function(module, exports) {

	'use strict';
	
	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout() {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	})();
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch (e) {
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch (e) {
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e) {
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e) {
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while (len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;
	
	process.listeners = function (name) {
	    return [];
	};
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () {
	    return '/';
	};
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function () {
	    return 0;
	};

/***/ },
/* 562 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(556);
	
	module.exports = function normalizeHeaderName(headers, normalizedName) {
	  utils.forEach(headers, function processHeader(value, name) {
	    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
	      headers[normalizedName] = value;
	      delete headers[name];
	    }
	  });
	};

/***/ },
/* 563 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var utils = __webpack_require__(556);
	var settle = __webpack_require__(564);
	var buildURL = __webpack_require__(567);
	var parseHeaders = __webpack_require__(568);
	var isURLSameOrigin = __webpack_require__(569);
	var createError = __webpack_require__(565);
	var btoa = typeof window !== 'undefined' && window.btoa && window.btoa.bind(window) || __webpack_require__(570);
	
	module.exports = function xhrAdapter(config) {
	  return new Promise(function dispatchXhrRequest(resolve, reject) {
	    var requestData = config.data;
	    var requestHeaders = config.headers;
	
	    if (utils.isFormData(requestData)) {
	      delete requestHeaders['Content-Type']; // Let the browser set it
	    }
	
	    var request = new XMLHttpRequest();
	    var loadEvent = 'onreadystatechange';
	    var xDomain = false;
	
	    // For IE 8/9 CORS support
	    // Only supports POST and GET calls and doesn't returns the response headers.
	    // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.
	    if (process.env.NODE_ENV !== 'test' && typeof window !== 'undefined' && window.XDomainRequest && !('withCredentials' in request) && !isURLSameOrigin(config.url)) {
	      request = new window.XDomainRequest();
	      loadEvent = 'onload';
	      xDomain = true;
	      request.onprogress = function handleProgress() {};
	      request.ontimeout = function handleTimeout() {};
	    }
	
	    // HTTP basic authentication
	    if (config.auth) {
	      var username = config.auth.username || '';
	      var password = config.auth.password || '';
	      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
	    }
	
	    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);
	
	    // Set the request timeout in MS
	    request.timeout = config.timeout;
	
	    // Listen for ready state
	    request[loadEvent] = function handleLoad() {
	      if (!request || request.readyState !== 4 && !xDomain) {
	        return;
	      }
	
	      // The request errored out and we didn't get a response, this will be
	      // handled by onerror instead
	      // With one exception: request that using file: protocol, most browsers
	      // will return status as 0 even though it's a successful request
	      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
	        return;
	      }
	
	      // Prepare the response
	      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
	      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
	      var response = {
	        data: responseData,
	        // IE sends 1223 instead of 204 (https://github.com/axios/axios/issues/201)
	        status: request.status === 1223 ? 204 : request.status,
	        statusText: request.status === 1223 ? 'No Content' : request.statusText,
	        headers: responseHeaders,
	        config: config,
	        request: request
	      };
	
	      settle(resolve, reject, response);
	
	      // Clean up request
	      request = null;
	    };
	
	    // Handle low level network errors
	    request.onerror = function handleError() {
	      // Real errors are hidden from us by the browser
	      // onerror should only fire if it's a network error
	      reject(createError('Network Error', config, null, request));
	
	      // Clean up request
	      request = null;
	    };
	
	    // Handle timeout
	    request.ontimeout = function handleTimeout() {
	      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED', request));
	
	      // Clean up request
	      request = null;
	    };
	
	    // Add xsrf header
	    // This is only done if running in a standard browser environment.
	    // Specifically not if we're in a web worker, or react-native.
	    if (utils.isStandardBrowserEnv()) {
	      var cookies = __webpack_require__(571);
	
	      // Add xsrf header
	      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : undefined;
	
	      if (xsrfValue) {
	        requestHeaders[config.xsrfHeaderName] = xsrfValue;
	      }
	    }
	
	    // Add headers to the request
	    if ('setRequestHeader' in request) {
	      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
	        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
	          // Remove Content-Type if data is undefined
	          delete requestHeaders[key];
	        } else {
	          // Otherwise add header to the request
	          request.setRequestHeader(key, val);
	        }
	      });
	    }
	
	    // Add withCredentials to request if needed
	    if (config.withCredentials) {
	      request.withCredentials = true;
	    }
	
	    // Add responseType to request if needed
	    if (config.responseType) {
	      try {
	        request.responseType = config.responseType;
	      } catch (e) {
	        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
	        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
	        if (config.responseType !== 'json') {
	          throw e;
	        }
	      }
	    }
	
	    // Handle progress if needed
	    if (typeof config.onDownloadProgress === 'function') {
	      request.addEventListener('progress', config.onDownloadProgress);
	    }
	
	    // Not all browsers support upload events
	    if (typeof config.onUploadProgress === 'function' && request.upload) {
	      request.upload.addEventListener('progress', config.onUploadProgress);
	    }
	
	    if (config.cancelToken) {
	      // Handle cancellation
	      config.cancelToken.promise.then(function onCanceled(cancel) {
	        if (!request) {
	          return;
	        }
	
	        request.abort();
	        reject(cancel);
	        // Clean up request
	        request = null;
	      });
	    }
	
	    if (requestData === undefined) {
	      requestData = null;
	    }
	
	    // Send the request
	    request.send(requestData);
	  });
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(561)))

/***/ },
/* 564 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var createError = __webpack_require__(565);
	
	/**
	 * Resolve or reject a Promise based on response status.
	 *
	 * @param {Function} resolve A function that resolves the promise.
	 * @param {Function} reject A function that rejects the promise.
	 * @param {object} response The response.
	 */
	module.exports = function settle(resolve, reject, response) {
	  var validateStatus = response.config.validateStatus;
	  // Note: status is not exposed by XDomainRequest
	  if (!response.status || !validateStatus || validateStatus(response.status)) {
	    resolve(response);
	  } else {
	    reject(createError('Request failed with status code ' + response.status, response.config, null, response.request, response));
	  }
	};

/***/ },
/* 565 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var enhanceError = __webpack_require__(566);
	
	/**
	 * Create an Error with the specified message, config, error code, request and response.
	 *
	 * @param {string} message The error message.
	 * @param {Object} config The config.
	 * @param {string} [code] The error code (for example, 'ECONNABORTED').
	 * @param {Object} [request] The request.
	 * @param {Object} [response] The response.
	 * @returns {Error} The created error.
	 */
	module.exports = function createError(message, config, code, request, response) {
	  var error = new Error(message);
	  return enhanceError(error, config, code, request, response);
	};

/***/ },
/* 566 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * Update an Error with the specified config, error code, and response.
	 *
	 * @param {Error} error The error to update.
	 * @param {Object} config The config.
	 * @param {string} [code] The error code (for example, 'ECONNABORTED').
	 * @param {Object} [request] The request.
	 * @param {Object} [response] The response.
	 * @returns {Error} The error.
	 */
	
	module.exports = function enhanceError(error, config, code, request, response) {
	  error.config = config;
	  if (code) {
	    error.code = code;
	  }
	  error.request = request;
	  error.response = response;
	  return error;
	};

/***/ },
/* 567 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(556);
	
	function encode(val) {
	  return encodeURIComponent(val).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, '+').replace(/%5B/gi, '[').replace(/%5D/gi, ']');
	}
	
	/**
	 * Build a URL by appending params to the end
	 *
	 * @param {string} url The base of the url (e.g., http://www.google.com)
	 * @param {object} [params] The params to be appended
	 * @returns {string} The formatted url
	 */
	module.exports = function buildURL(url, params, paramsSerializer) {
	  /*eslint no-param-reassign:0*/
	  if (!params) {
	    return url;
	  }
	
	  var serializedParams;
	  if (paramsSerializer) {
	    serializedParams = paramsSerializer(params);
	  } else if (utils.isURLSearchParams(params)) {
	    serializedParams = params.toString();
	  } else {
	    var parts = [];
	
	    utils.forEach(params, function serialize(val, key) {
	      if (val === null || typeof val === 'undefined') {
	        return;
	      }
	
	      if (utils.isArray(val)) {
	        key = key + '[]';
	      }
	
	      if (!utils.isArray(val)) {
	        val = [val];
	      }
	
	      utils.forEach(val, function parseValue(v) {
	        if (utils.isDate(v)) {
	          v = v.toISOString();
	        } else if (utils.isObject(v)) {
	          v = JSON.stringify(v);
	        }
	        parts.push(encode(key) + '=' + encode(v));
	      });
	    });
	
	    serializedParams = parts.join('&');
	  }
	
	  if (serializedParams) {
	    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
	  }
	
	  return url;
	};

/***/ },
/* 568 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(556);
	
	// Headers whose duplicates are ignored by node
	// c.f. https://nodejs.org/api/http.html#http_message_headers
	var ignoreDuplicateOf = ['age', 'authorization', 'content-length', 'content-type', 'etag', 'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since', 'last-modified', 'location', 'max-forwards', 'proxy-authorization', 'referer', 'retry-after', 'user-agent'];
	
	/**
	 * Parse headers into an object
	 *
	 * ```
	 * Date: Wed, 27 Aug 2014 08:58:49 GMT
	 * Content-Type: application/json
	 * Connection: keep-alive
	 * Transfer-Encoding: chunked
	 * ```
	 *
	 * @param {String} headers Headers needing to be parsed
	 * @returns {Object} Headers parsed into an object
	 */
	module.exports = function parseHeaders(headers) {
	  var parsed = {};
	  var key;
	  var val;
	  var i;
	
	  if (!headers) {
	    return parsed;
	  }
	
	  utils.forEach(headers.split('\n'), function parser(line) {
	    i = line.indexOf(':');
	    key = utils.trim(line.substr(0, i)).toLowerCase();
	    val = utils.trim(line.substr(i + 1));
	
	    if (key) {
	      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
	        return;
	      }
	      if (key === 'set-cookie') {
	        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
	      } else {
	        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
	      }
	    }
	  });
	
	  return parsed;
	};

/***/ },
/* 569 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(556);
	
	module.exports = utils.isStandardBrowserEnv() ?
	
	// Standard browser envs have full support of the APIs needed to test
	// whether the request URL is of the same origin as current location.
	function standardBrowserEnv() {
	  var msie = /(msie|trident)/i.test(navigator.userAgent);
	  var urlParsingNode = document.createElement('a');
	  var originURL;
	
	  /**
	  * Parse a URL to discover it's components
	  *
	  * @param {String} url The URL to be parsed
	  * @returns {Object}
	  */
	  function resolveURL(url) {
	    var href = url;
	
	    if (msie) {
	      // IE needs attribute set twice to normalize properties
	      urlParsingNode.setAttribute('href', href);
	      href = urlParsingNode.href;
	    }
	
	    urlParsingNode.setAttribute('href', href);
	
	    // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
	    return {
	      href: urlParsingNode.href,
	      protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
	      host: urlParsingNode.host,
	      search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
	      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
	      hostname: urlParsingNode.hostname,
	      port: urlParsingNode.port,
	      pathname: urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname
	    };
	  }
	
	  originURL = resolveURL(window.location.href);
	
	  /**
	  * Determine if a URL shares the same origin as the current location
	  *
	  * @param {String} requestURL The URL to test
	  * @returns {boolean} True if URL shares the same origin, otherwise false
	  */
	  return function isURLSameOrigin(requestURL) {
	    var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
	    return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
	  };
	}() :
	
	// Non standard browser envs (web workers, react-native) lack needed support.
	function nonStandardBrowserEnv() {
	  return function isURLSameOrigin() {
	    return true;
	  };
	}();

/***/ },
/* 570 */
/***/ function(module, exports) {

	'use strict';
	
	// btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js
	
	var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
	
	function E() {
	  this.message = 'String contains an invalid character';
	}
	E.prototype = new Error();
	E.prototype.code = 5;
	E.prototype.name = 'InvalidCharacterError';
	
	function btoa(input) {
	  var str = String(input);
	  var output = '';
	  for (
	  // initialize result and counter
	  var block, charCode, idx = 0, map = chars;
	  // if the next str index does not exist:
	  //   change the mapping table to "="
	  //   check if d has no fractional digits
	  str.charAt(idx | 0) || (map = '=', idx % 1);
	  // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
	  output += map.charAt(63 & block >> 8 - idx % 1 * 8)) {
	    charCode = str.charCodeAt(idx += 3 / 4);
	    if (charCode > 0xFF) {
	      throw new E();
	    }
	    block = block << 8 | charCode;
	  }
	  return output;
	}
	
	module.exports = btoa;

/***/ },
/* 571 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(556);
	
	module.exports = utils.isStandardBrowserEnv() ?
	
	// Standard browser envs support document.cookie
	function standardBrowserEnv() {
	  return {
	    write: function write(name, value, expires, path, domain, secure) {
	      var cookie = [];
	      cookie.push(name + '=' + encodeURIComponent(value));
	
	      if (utils.isNumber(expires)) {
	        cookie.push('expires=' + new Date(expires).toGMTString());
	      }
	
	      if (utils.isString(path)) {
	        cookie.push('path=' + path);
	      }
	
	      if (utils.isString(domain)) {
	        cookie.push('domain=' + domain);
	      }
	
	      if (secure === true) {
	        cookie.push('secure');
	      }
	
	      document.cookie = cookie.join('; ');
	    },
	
	    read: function read(name) {
	      var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
	      return match ? decodeURIComponent(match[3]) : null;
	    },
	
	    remove: function remove(name) {
	      this.write(name, '', Date.now() - 86400000);
	    }
	  };
	}() :
	
	// Non standard browser env (web workers, react-native) lack needed support.
	function nonStandardBrowserEnv() {
	  return {
	    write: function write() {},
	    read: function read() {
	      return null;
	    },
	    remove: function remove() {}
	  };
	}();

/***/ },
/* 572 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(556);
	
	function InterceptorManager() {
	  this.handlers = [];
	}
	
	/**
	 * Add a new interceptor to the stack
	 *
	 * @param {Function} fulfilled The function to handle `then` for a `Promise`
	 * @param {Function} rejected The function to handle `reject` for a `Promise`
	 *
	 * @return {Number} An ID used to remove interceptor later
	 */
	InterceptorManager.prototype.use = function use(fulfilled, rejected) {
	  this.handlers.push({
	    fulfilled: fulfilled,
	    rejected: rejected
	  });
	  return this.handlers.length - 1;
	};
	
	/**
	 * Remove an interceptor from the stack
	 *
	 * @param {Number} id The ID that was returned by `use`
	 */
	InterceptorManager.prototype.eject = function eject(id) {
	  if (this.handlers[id]) {
	    this.handlers[id] = null;
	  }
	};
	
	/**
	 * Iterate over all the registered interceptors
	 *
	 * This method is particularly useful for skipping over any
	 * interceptors that may have become `null` calling `eject`.
	 *
	 * @param {Function} fn The function to call for each interceptor
	 */
	InterceptorManager.prototype.forEach = function forEach(fn) {
	  utils.forEach(this.handlers, function forEachHandler(h) {
	    if (h !== null) {
	      fn(h);
	    }
	  });
	};
	
	module.exports = InterceptorManager;

/***/ },
/* 573 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(556);
	var transformData = __webpack_require__(574);
	var isCancel = __webpack_require__(575);
	var defaults = __webpack_require__(560);
	var isAbsoluteURL = __webpack_require__(576);
	var combineURLs = __webpack_require__(577);
	
	/**
	 * Throws a `Cancel` if cancellation has been requested.
	 */
	function throwIfCancellationRequested(config) {
	  if (config.cancelToken) {
	    config.cancelToken.throwIfRequested();
	  }
	}
	
	/**
	 * Dispatch a request to the server using the configured adapter.
	 *
	 * @param {object} config The config that is to be used for the request
	 * @returns {Promise} The Promise to be fulfilled
	 */
	module.exports = function dispatchRequest(config) {
	  throwIfCancellationRequested(config);
	
	  // Support baseURL config
	  if (config.baseURL && !isAbsoluteURL(config.url)) {
	    config.url = combineURLs(config.baseURL, config.url);
	  }
	
	  // Ensure headers exist
	  config.headers = config.headers || {};
	
	  // Transform request data
	  config.data = transformData(config.data, config.headers, config.transformRequest);
	
	  // Flatten headers
	  config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers || {});
	
	  utils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch', 'common'], function cleanHeaderConfig(method) {
	    delete config.headers[method];
	  });
	
	  var adapter = config.adapter || defaults.adapter;
	
	  return adapter(config).then(function onAdapterResolution(response) {
	    throwIfCancellationRequested(config);
	
	    // Transform response data
	    response.data = transformData(response.data, response.headers, config.transformResponse);
	
	    return response;
	  }, function onAdapterRejection(reason) {
	    if (!isCancel(reason)) {
	      throwIfCancellationRequested(config);
	
	      // Transform response data
	      if (reason && reason.response) {
	        reason.response.data = transformData(reason.response.data, reason.response.headers, config.transformResponse);
	      }
	    }
	
	    return Promise.reject(reason);
	  });
	};

/***/ },
/* 574 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(556);
	
	/**
	 * Transform the data for a request or a response
	 *
	 * @param {Object|String} data The data to be transformed
	 * @param {Array} headers The headers for the request or response
	 * @param {Array|Function} fns A single function or Array of functions
	 * @returns {*} The resulting transformed data
	 */
	module.exports = function transformData(data, headers, fns) {
	  /*eslint no-param-reassign:0*/
	  utils.forEach(fns, function transform(fn) {
	    data = fn(data, headers);
	  });
	
	  return data;
	};

/***/ },
/* 575 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function isCancel(value) {
	  return !!(value && value.__CANCEL__);
	};

/***/ },
/* 576 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * Determines whether the specified URL is absolute
	 *
	 * @param {string} url The URL to test
	 * @returns {boolean} True if the specified URL is absolute, otherwise false
	 */
	
	module.exports = function isAbsoluteURL(url) {
	  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
	  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
	  // by any combination of letters, digits, plus, period, or hyphen.
	  return (/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url)
	  );
	};

/***/ },
/* 577 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * Creates a new URL by combining the specified URLs
	 *
	 * @param {string} baseURL The base URL
	 * @param {string} relativeURL The relative URL
	 * @returns {string} The combined URL
	 */
	
	module.exports = function combineURLs(baseURL, relativeURL) {
	  return relativeURL ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '') : baseURL;
	};

/***/ },
/* 578 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * A `Cancel` is an object that is thrown when an operation is canceled.
	 *
	 * @class
	 * @param {string=} message The message.
	 */
	
	function Cancel(message) {
	  this.message = message;
	}
	
	Cancel.prototype.toString = function toString() {
	  return 'Cancel' + (this.message ? ': ' + this.message : '');
	};
	
	Cancel.prototype.__CANCEL__ = true;
	
	module.exports = Cancel;

/***/ },
/* 579 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Cancel = __webpack_require__(578);
	
	/**
	 * A `CancelToken` is an object that can be used to request cancellation of an operation.
	 *
	 * @class
	 * @param {Function} executor The executor function.
	 */
	function CancelToken(executor) {
	  if (typeof executor !== 'function') {
	    throw new TypeError('executor must be a function.');
	  }
	
	  var resolvePromise;
	  this.promise = new Promise(function promiseExecutor(resolve) {
	    resolvePromise = resolve;
	  });
	
	  var token = this;
	  executor(function cancel(message) {
	    if (token.reason) {
	      // Cancellation has already been requested
	      return;
	    }
	
	    token.reason = new Cancel(message);
	    resolvePromise(token.reason);
	  });
	}
	
	/**
	 * Throws a `Cancel` if cancellation has been requested.
	 */
	CancelToken.prototype.throwIfRequested = function throwIfRequested() {
	  if (this.reason) {
	    throw this.reason;
	  }
	};
	
	/**
	 * Returns an object that contains a new `CancelToken` and a function that, when called,
	 * cancels the `CancelToken`.
	 */
	CancelToken.source = function source() {
	  var cancel;
	  var token = new CancelToken(function executor(c) {
	    cancel = c;
	  });
	  return {
	    token: token,
	    cancel: cancel
	  };
	};
	
	module.exports = CancelToken;

/***/ },
/* 580 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * Syntactic sugar for invoking a function and expanding an array for arguments.
	 *
	 * Common use case would be to use `Function.prototype.apply`.
	 *
	 *  ```js
	 *  function f(x, y, z) {}
	 *  var args = [1, 2, 3];
	 *  f.apply(null, args);
	 *  ```
	 *
	 * With `spread` this example can be re-written.
	 *
	 *  ```js
	 *  spread(function(x, y, z) {})([1, 2, 3]);
	 *  ```
	 *
	 * @param {Function} callback
	 * @returns {Function}
	 */
	
	module.exports = function spread(callback) {
	  return function wrap(arr) {
	    return callback.apply(null, arr);
	  };
	};

/***/ },
/* 581 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = 'https://apiw.lunes.io/api';

/***/ },
/* 582 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
	
	var validator = __webpack_require__(481);
	
	var axios = __webpack_require__(554);
	
	var BASE_URL = __webpack_require__(581);
	
	var endpoint = BASE_URL + '/users/login';
	
	module.exports = function () {
	  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(userData) {
	    var email, password, res;
	    return regeneratorRuntime.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            email = userData.email, password = userData.password;
	
	            if (validator.isEmail(email)) {
	              _context.next = 3;
	              break;
	            }
	
	            throw new Error(email + ' is not a valid email.');
	
	          case 3:
	            _context.prev = 3;
	            _context.next = 6;
	            return axios.post(endpoint, { email: email, password: password });
	
	          case 6:
	            res = _context.sent;
	            return _context.abrupt('return', res.data);
	
	          case 10:
	            _context.prev = 10;
	            _context.t0 = _context['catch'](3);
	            throw _context.t0.response ? _context.t0.response.data : new Error(_context.t0);
	
	          case 13:
	          case 'end':
	            return _context.stop();
	        }
	      }
	    }, _callee, undefined, [[3, 10]]);
	  }));
	
	  return function (_x) {
	    return _ref.apply(this, arguments);
	  };
	}();

/***/ },
/* 583 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
	
	var validator = __webpack_require__(481);
	
	var axios = __webpack_require__(554);
	
	var BASE_URL = __webpack_require__(581);
	
	var endpoint = BASE_URL + '/users/reset-password';
	
	module.exports = function () {
	  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(userData) {
	    var email, res;
	    return regeneratorRuntime.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            email = userData.email;
	
	            if (validator.isEmail(email)) {
	              _context.next = 3;
	              break;
	            }
	
	            throw new Error(email + ' is not a valid email.');
	
	          case 3:
	            _context.prev = 3;
	            _context.next = 6;
	            return axios.post(endpoint, { email: email });
	
	          case 6:
	            res = _context.sent;
	            return _context.abrupt('return', res.data);
	
	          case 10:
	            _context.prev = 10;
	            _context.t0 = _context['catch'](3);
	            throw _context.t0.response ? _context.t0.response.data : new Error(_context.t0);
	
	          case 13:
	          case 'end':
	            return _context.stop();
	        }
	      }
	    }, _callee, undefined, [[3, 10]]);
	  }));
	
	  return function (_x) {
	    return _ref.apply(this, arguments);
	  };
	}();

/***/ },
/* 584 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
	
	var axios = __webpack_require__(554);
	
	var BASE_URL = __webpack_require__(581);
	
	var endpoint = BASE_URL + '/users/obtain/';
	
	module.exports = function () {
	  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(id, accessToken) {
	    var headers, url, res;
	    return regeneratorRuntime.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            headers = { 'Authorization': 'Bearer ' + accessToken };
	            url = '' + endpoint + id;
	            _context.prev = 2;
	            _context.next = 5;
	            return axios.get(url, { headers: headers });
	
	          case 5:
	            res = _context.sent;
	            return _context.abrupt('return', res.data);
	
	          case 9:
	            _context.prev = 9;
	            _context.t0 = _context['catch'](2);
	            throw _context.t0.response ? _context.t0.response.data : new Error(_context.t0);
	
	          case 12:
	          case 'end':
	            return _context.stop();
	        }
	      }
	    }, _callee, undefined, [[2, 9]]);
	  }));
	
	  return function (_x, _x2) {
	    return _ref.apply(this, arguments);
	  };
	}();

/***/ },
/* 585 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
	
	var axios = __webpack_require__(554);
	
	var validator = __webpack_require__(481);
	
	var BASE_URL = __webpack_require__(581);
	
	var endpoint = BASE_URL + '/users/security-check/create-pin';
	
	module.exports = function () {
	  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(data, accessToken) {
	    var headers, pin, res;
	    return regeneratorRuntime.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            headers = { 'Authorization': 'Bearer ' + accessToken };
	            pin = data.pin;
	
	            if (validator.isPIN(pin)) {
	              _context.next = 4;
	              break;
	            }
	
	            throw new Error('Insira um PIN válido (4 números).');
	
	          case 4:
	            _context.prev = 4;
	            _context.next = 7;
	            return axios.post(endpoint, { pin: pin }, { headers: headers });
	
	          case 7:
	            res = _context.sent;
	            return _context.abrupt('return', res.data);
	
	          case 11:
	            _context.prev = 11;
	            _context.t0 = _context['catch'](4);
	            throw _context.t0.response ? _context.t0.response.data : new Error(_context.t0);
	
	          case 14:
	          case 'end':
	            return _context.stop();
	        }
	      }
	    }, _callee, undefined, [[4, 11]]);
	  }));
	
	  return function (_x, _x2) {
	    return _ref.apply(this, arguments);
	  };
	}();

/***/ },
/* 586 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
	
	var validator = __webpack_require__(481);
	
	var axios = __webpack_require__(554);
	
	var BASE_URL = __webpack_require__(581);
	
	var endpoint = BASE_URL + '/users/confirm-pin';
	
	module.exports = function () {
	  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(data, accessToken) {
	    var pin, headers, res;
	    return regeneratorRuntime.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            pin = data.pin;
	            headers = { Authorization: 'Bearer ' + accessToken };
	
	            if (!(!pin || !validator.isPIN(pin))) {
	              _context.next = 4;
	              break;
	            }
	
	            throw new Error('The PIN code is invalid.');
	
	          case 4:
	            _context.prev = 4;
	            _context.next = 7;
	            return axios.post(endpoint, { pin: pin }, { headers: headers });
	
	          case 7:
	            res = _context.sent;
	            return _context.abrupt('return', res.data);
	
	          case 11:
	            _context.prev = 11;
	            _context.t0 = _context['catch'](4);
	            throw _context.t0.response ? _context.t0.response.data : new Error(_context.t0);
	
	          case 14:
	          case 'end':
	            return _context.stop();
	        }
	      }
	    }, _callee, undefined, [[4, 11]]);
	  }));
	
	  return function (_x, _x2) {
	    return _ref.apply(this, arguments);
	  };
	}();

/***/ },
/* 587 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
	
	var axios = __webpack_require__(554);
	
	var BASE_URL = __webpack_require__(581);
	
	var endpoint = BASE_URL + '/users/security-check/confirm-phone';
	
	module.exports = function () {
	  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(data, accessToken) {
	    var phoneNumber, headers, res;
	    return regeneratorRuntime.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            phoneNumber = data.phoneNumber;
	            headers = { Authorization: 'Bearer ' + accessToken };
	
	            if (phoneNumber) {
	              _context.next = 4;
	              break;
	            }
	
	            throw new Error('The Phone number is empty.');
	
	          case 4:
	            _context.prev = 4;
	            _context.next = 7;
	            return axios.put(endpoint, { phoneNumber: phoneNumber }, { headers: headers });
	
	          case 7:
	            res = _context.sent;
	            return _context.abrupt('return', res.data);
	
	          case 11:
	            _context.prev = 11;
	            _context.t0 = _context['catch'](4);
	            throw _context.t0.response ? _context.t0.response.data : new Error(_context.t0);
	
	          case 14:
	          case 'end':
	            return _context.stop();
	        }
	      }
	    }, _callee, undefined, [[4, 11]]);
	  }));
	
	  return function (_x, _x2) {
	    return _ref.apply(this, arguments);
	  };
	}();

/***/ },
/* 588 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
	
	var axios = __webpack_require__(554);
	
	var BASE_URL = __webpack_require__(581);
	
	var endpoint = BASE_URL + '/users/logout';
	
	module.exports = function () {
	  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(accessToken) {
	    var headers, res;
	    return regeneratorRuntime.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            headers = { 'Authorization': 'Bearer ' + accessToken };
	            _context.prev = 1;
	            _context.next = 4;
	            return axios.get(endpoint, { headers: headers });
	
	          case 4:
	            res = _context.sent;
	            return _context.abrupt('return', res.data);
	
	          case 8:
	            _context.prev = 8;
	            _context.t0 = _context['catch'](1);
	            throw _context.t0.response ? _context.t0.response.data : new Error(_context.t0);
	
	          case 11:
	          case 'end':
	            return _context.stop();
	        }
	      }
	    }, _callee, undefined, [[1, 8]]);
	  }));
	
	  return function (_x) {
	    return _ref.apply(this, arguments);
	  };
	}();

/***/ },
/* 589 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
	
	var axios = __webpack_require__(554);
	
	var BASE_URL = __webpack_require__(581);
	
	var endpoint = BASE_URL + '/users/update/';
	
	module.exports = function () {
	  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(id, data, accessToken) {
	    var headers, url, res;
	    return regeneratorRuntime.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            headers = { 'Authorization': 'Bearer ' + accessToken };
	            url = '' + endpoint + id;
	            _context.prev = 2;
	            _context.next = 5;
	            return axios.patch(url, data, { headers: headers });
	
	          case 5:
	            res = _context.sent;
	            return _context.abrupt('return', res.data);
	
	          case 9:
	            _context.prev = 9;
	            _context.t0 = _context['catch'](2);
	            throw _context.t0.response ? _context.t0.response.data : new Error(_context.t0);
	
	          case 12:
	          case 'end':
	            return _context.stop();
	        }
	      }
	    }, _callee, undefined, [[2, 9]]);
	  }));
	
	  return function (_x, _x2, _x3) {
	    return _ref.apply(this, arguments);
	  };
	}();

/***/ },
/* 590 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var bitcoin = __webpack_require__(591);
	var getPrice = __webpack_require__(595);
	var getHistory = __webpack_require__(597);
	var obtainWallet = __webpack_require__(636);
	var getFees = __webpack_require__(672);
	var createDepositWallet = __webpack_require__(675);
	var getBalance = __webpack_require__(676);
	
	module.exports = {
	  bitcoin: bitcoin,
	  obtainWallet: obtainWallet,
	  getPrice: getPrice,
	  getHistory: getHistory,
	  getFees: getFees,
	  createDepositWallet: createDepositWallet,
	  getBalance: getBalance
	};

/***/ },
/* 591 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var getBalance = __webpack_require__(592);
	var getHistory = __webpack_require__(593);
	var createTransaction = __webpack_require__(594);
	
	module.exports = {
	  getBalance: getBalance,
	  getHistory: getHistory,
	  createTransaction: createTransaction
	};

/***/ },
/* 592 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
	
	var axios = __webpack_require__(554);
	
	var endpoint = __webpack_require__(581) + '/coins/balance';
	
	module.exports = function () {
	  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(params, accessToken) {
	    var headers, url, res;
	    return regeneratorRuntime.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            headers = { Authorization: 'Bearer ' + accessToken };
	            url = endpoint + '/btc/' + params.address + '?testnet=' + params.testnet;
	            _context.prev = 2;
	            _context.next = 5;
	            return axios.get(url, { headers: headers });
	
	          case 5:
	            res = _context.sent;
	
	            if (!res) {
	              _context.next = 8;
	              break;
	            }
	
	            return _context.abrupt('return', res.data);
	
	          case 8:
	            return _context.abrupt('return', 0);
	
	          case 11:
	            _context.prev = 11;
	            _context.t0 = _context['catch'](2);
	            throw _context.t0.response ? _context.t0.response.data : new Error(_context.t0);
	
	          case 14:
	          case 'end':
	            return _context.stop();
	        }
	      }
	    }, _callee, undefined, [[2, 11]]);
	  }));
	
	  return function (_x, _x2) {
	    return _ref.apply(this, arguments);
	  };
	}();

/***/ },
/* 593 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
	
	var axios = __webpack_require__(554);
	
	var endpoint = __webpack_require__(581) + '/coins/history';
	
	module.exports = function () {
	  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(params, accessToken) {
	    var headers, url, res;
	    return regeneratorRuntime.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            headers = { Authorization: 'Bearer ' + accessToken };
	            url = endpoint + '/btc/' + params.address + '?testnet=' + params.testnet;
	            _context.prev = 2;
	            _context.next = 5;
	            return axios.get(url, { headers: headers });
	
	          case 5:
	            res = _context.sent;
	            return _context.abrupt('return', res.data);
	
	          case 9:
	            _context.prev = 9;
	            _context.t0 = _context['catch'](2);
	            throw _context.t0.response ? _context.t0.response.data : new Error(_context.t0);
	
	          case 12:
	          case 'end':
	            return _context.stop();
	        }
	      }
	    }, _callee, undefined, [[2, 9]]);
	  }));
	
	  return function (_x, _x2) {
	    return _ref.apply(this, arguments);
	  };
	}();

/***/ },
/* 594 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
	
	var axios = __webpack_require__(554);
	
	var createEndpoint = __webpack_require__(581) + '/coins/tx/create/btc';
	
	/**
	 *
	 * @param {*} transactionData - email, pin, receivingAddress, amount, fee, testnet
	 * @param {*} accessToken .
	 */
	module.exports = function () {
	  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(transactionData, accessToken) {
	    var headers, transactionResponse;
	    return regeneratorRuntime.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            headers = { Authorization: 'Bearer ' + accessToken };
	            _context.prev = 1;
	            _context.next = 4;
	            return create(headers, transactionData);
	
	          case 4:
	            transactionResponse = _context.sent;
	            return _context.abrupt('return', transactionResponse);
	
	          case 8:
	            _context.prev = 8;
	            _context.t0 = _context['catch'](1);
	            throw _context.t0;
	
	          case 11:
	          case 'end':
	            return _context.stop();
	        }
	      }
	    }, _callee, undefined, [[1, 8]]);
	  }));
	
	  return function (_x, _x2) {
	    return _ref.apply(this, arguments);
	  };
	}();
	
	var create = function () {
	  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(headers, transactionData) {
	    var res;
	    return regeneratorRuntime.wrap(function _callee2$(_context2) {
	      while (1) {
	        switch (_context2.prev = _context2.next) {
	          case 0:
	            _context2.prev = 0;
	            _context2.next = 3;
	            return axios.post(createEndpoint, transactionData, { headers: headers });
	
	          case 3:
	            res = _context2.sent;
	            return _context2.abrupt('return', res.data);
	
	          case 7:
	            _context2.prev = 7;
	            _context2.t0 = _context2['catch'](0);
	            throw _context2.t0.response ? _context2.t0.response.data : new Error(_context2.t0);
	
	          case 10:
	          case 'end':
	            return _context2.stop();
	        }
	      }
	    }, _callee2, undefined, [[0, 7]]);
	  }));
	
	  return function create(_x3, _x4) {
	    return _ref2.apply(this, arguments);
	  };
	}();

/***/ },
/* 595 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
	
	var axios = __webpack_require__(554);
	var validator = __webpack_require__(481);
	
	var endpoint = __webpack_require__(596) + '/price';
	
	module.exports = function () {
	  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(params) {
	    var fromSymbol, toSymbol, exchange, query, queryString, res;
	    return regeneratorRuntime.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            fromSymbol = params.fromSymbol, toSymbol = params.toSymbol, exchange = params.exchange;
	            query = [fromSymbol && !validator.isEmpty(fromSymbol) ? 'fsym=' + fromSymbol : '', toSymbol && !validator.isEmpty(toSymbol) ? 'tsyms=' + toSymbol : '', exchange && !validator.isEmpty(exchange) ? 'e=' + exchange : ''];
	            queryString = query.reduce(function (q1, q2) {
	              return query.length > 0 ? q1 + '&' + q2 : q1;
	            });
	            _context.prev = 3;
	            _context.next = 6;
	            return axios.get('' + endpoint + (queryString.length > 0 ? '?' + queryString : ''));
	
	          case 6:
	            res = _context.sent;
	            return _context.abrupt('return', res.data);
	
	          case 10:
	            _context.prev = 10;
	            _context.t0 = _context['catch'](3);
	            throw _context.t0.response ? _context.t0.response.data : new Error(_context.t0);
	
	          case 13:
	          case 'end':
	            return _context.stop();
	        }
	      }
	    }, _callee, undefined, [[3, 10]]);
	  }));
	
	  return function (_x) {
	    return _ref.apply(this, arguments);
	  };
	}();

/***/ },
/* 596 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = 'https://min-api.cryptocompare.com/data';

/***/ },
/* 597 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
	
	var axios = __webpack_require__(554);
	var Promise = __webpack_require__(598);
	
	var apiUrl = '' + __webpack_require__(596);
	
	module.exports = function () {
	  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(params) {
	    var fromSymbol, toSymbol, range, url, result, data;
	    return regeneratorRuntime.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            fromSymbol = params.fromSymbol, toSymbol = params.toSymbol, range = params.range;
	            _context.prev = 1;
	            url = buildAPIQuery(fromSymbol, toSymbol, range);
	            _context.next = 5;
	            return axios.get(url).catch(function (error) {
	              return error;
	            });
	
	          case 5:
	            result = _context.sent;
	            _context.next = 8;
	            return Promise.map(result.data.Data, function (d) {
	              delete d.open;
	              delete d.high;
	              delete d.low;
	              delete d.volumefrom;
	              delete d.volumeto;
	              return d;
	            });
	
	          case 8:
	            data = _context.sent;
	            return _context.abrupt('return', {
	              success: result.data.Response === 'Success',
	              status: result.status,
	              message: 'Historical chart - ' + (fromSymbol || 'BTC') + ' to ' + (toSymbol || 'USD'),
	              range: range,
	              data: data
	            });
	
	          case 12:
	            _context.prev = 12;
	            _context.t0 = _context['catch'](1);
	            throw _context.t0.response ? _context.t0.response.data : new Error(_context.t0);
	
	          case 15:
	          case 'end':
	            return _context.stop();
	        }
	      }
	    }, _callee, undefined, [[1, 12]]);
	  }));
	
	  return function (_x) {
	    return _ref.apply(this, arguments);
	  };
	}();
	
	var buildAPIQuery = function buildAPIQuery(fromSymbol, toSymbol, range) {
	  var endpoint = 'histohour';
	  var aggregate = 1;
	  var limit = 24;
	
	  switch (range) {
	    case 'RANGE_1D':
	      endpoint = 'histohour';
	      aggregate = 1;
	      limit = 24;
	      break;
	    case 'RANGE_1W':
	      endpoint = 'histoday';
	      aggregate = 1;
	      limit = 7;
	      break;
	    case 'RANGE_1M':
	      endpoint = 'histoday';
	      aggregate = 1;
	      limit = 30;
	      break;
	    case 'RANGE_3M':
	      endpoint = 'histoday';
	      aggregate = 3;
	      limit = 30;
	      break;
	    case 'RANGE_6M':
	      endpoint = 'histoday';
	      aggregate = 6;
	      limit = 30;
	      break;
	    case 'RANGE_1Y':
	      endpoint = 'histoday';
	      aggregate = 12;
	      limit = 30;
	      break;
	    case 'RANGE_MAX':
	      endpoint = 'histoday';
	      aggregate = 200;
	      limit = 2000; // maximum allowed limit
	      break;
	  }
	
	  return apiUrl + '/' + endpoint + '?fsym=' + fromSymbol + '&tsym=' + toSymbol + '&aggregate=' + aggregate + '&limit=' + limit;
	};

/***/ },
/* 598 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var old;
	if (typeof Promise !== "undefined") old = Promise;
	function noConflict() {
	    try {
	        if (Promise === bluebird) Promise = old;
	    } catch (e) {}
	    return bluebird;
	}
	var bluebird = __webpack_require__(599)();
	bluebird.noConflict = noConflict;
	module.exports = bluebird;

/***/ },
/* 599 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	module.exports = function () {
	    var makeSelfResolutionError = function makeSelfResolutionError() {
	        return new TypeError("circular promise resolution chain\n\n    See http://goo.gl/MqrFmX\n");
	    };
	    var reflectHandler = function reflectHandler() {
	        return new Promise.PromiseInspection(this._target());
	    };
	    var apiRejection = function apiRejection(msg) {
	        return Promise.reject(new TypeError(msg));
	    };
	    function Proxyable() {}
	    var UNDEFINED_BINDING = {};
	    var util = __webpack_require__(600);
	
	    var getDomain;
	    if (util.isNode) {
	        getDomain = function getDomain() {
	            var ret = process.domain;
	            if (ret === undefined) ret = null;
	            return ret;
	        };
	    } else {
	        getDomain = function getDomain() {
	            return null;
	        };
	    }
	    util.notEnumerableProp(Promise, "_getDomain", getDomain);
	
	    var es5 = __webpack_require__(601);
	    var Async = __webpack_require__(602);
	    var async = new Async();
	    es5.defineProperty(Promise, "_async", { value: async });
	    var errors = __webpack_require__(607);
	    var TypeError = Promise.TypeError = errors.TypeError;
	    Promise.RangeError = errors.RangeError;
	    var CancellationError = Promise.CancellationError = errors.CancellationError;
	    Promise.TimeoutError = errors.TimeoutError;
	    Promise.OperationalError = errors.OperationalError;
	    Promise.RejectionError = errors.OperationalError;
	    Promise.AggregateError = errors.AggregateError;
	    var INTERNAL = function INTERNAL() {};
	    var APPLY = {};
	    var NEXT_FILTER = {};
	    var tryConvertToPromise = __webpack_require__(608)(Promise, INTERNAL);
	    var PromiseArray = __webpack_require__(609)(Promise, INTERNAL, tryConvertToPromise, apiRejection, Proxyable);
	    var Context = __webpack_require__(610)(Promise);
	    /*jshint unused:false*/
	    var createContext = Context.create;
	    var debug = __webpack_require__(611)(Promise, Context);
	    var CapturedTrace = debug.CapturedTrace;
	    var PassThroughHandlerContext = __webpack_require__(612)(Promise, tryConvertToPromise, NEXT_FILTER);
	    var catchFilter = __webpack_require__(613)(NEXT_FILTER);
	    var nodebackForPromise = __webpack_require__(614);
	    var errorObj = util.errorObj;
	    var tryCatch = util.tryCatch;
	    function check(self, executor) {
	        if (self == null || self.constructor !== Promise) {
	            throw new TypeError("the promise constructor cannot be invoked directly\n\n    See http://goo.gl/MqrFmX\n");
	        }
	        if (typeof executor !== "function") {
	            throw new TypeError("expecting a function but got " + util.classString(executor));
	        }
	    }
	
	    function Promise(executor) {
	        if (executor !== INTERNAL) {
	            check(this, executor);
	        }
	        this._bitField = 0;
	        this._fulfillmentHandler0 = undefined;
	        this._rejectionHandler0 = undefined;
	        this._promise0 = undefined;
	        this._receiver0 = undefined;
	        this._resolveFromExecutor(executor);
	        this._promiseCreated();
	        this._fireEvent("promiseCreated", this);
	    }
	
	    Promise.prototype.toString = function () {
	        return "[object Promise]";
	    };
	
	    Promise.prototype.caught = Promise.prototype["catch"] = function (fn) {
	        var len = arguments.length;
	        if (len > 1) {
	            var catchInstances = new Array(len - 1),
	                j = 0,
	                i;
	            for (i = 0; i < len - 1; ++i) {
	                var item = arguments[i];
	                if (util.isObject(item)) {
	                    catchInstances[j++] = item;
	                } else {
	                    return apiRejection("Catch statement predicate: " + "expecting an object but got " + util.classString(item));
	                }
	            }
	            catchInstances.length = j;
	            fn = arguments[i];
	            return this.then(undefined, catchFilter(catchInstances, fn, this));
	        }
	        return this.then(undefined, fn);
	    };
	
	    Promise.prototype.reflect = function () {
	        return this._then(reflectHandler, reflectHandler, undefined, this, undefined);
	    };
	
	    Promise.prototype.then = function (didFulfill, didReject) {
	        if (debug.warnings() && arguments.length > 0 && typeof didFulfill !== "function" && typeof didReject !== "function") {
	            var msg = ".then() only accepts functions but was passed: " + util.classString(didFulfill);
	            if (arguments.length > 1) {
	                msg += ", " + util.classString(didReject);
	            }
	            this._warn(msg);
	        }
	        return this._then(didFulfill, didReject, undefined, undefined, undefined);
	    };
	
	    Promise.prototype.done = function (didFulfill, didReject) {
	        var promise = this._then(didFulfill, didReject, undefined, undefined, undefined);
	        promise._setIsFinal();
	    };
	
	    Promise.prototype.spread = function (fn) {
	        if (typeof fn !== "function") {
	            return apiRejection("expecting a function but got " + util.classString(fn));
	        }
	        return this.all()._then(fn, undefined, undefined, APPLY, undefined);
	    };
	
	    Promise.prototype.toJSON = function () {
	        var ret = {
	            isFulfilled: false,
	            isRejected: false,
	            fulfillmentValue: undefined,
	            rejectionReason: undefined
	        };
	        if (this.isFulfilled()) {
	            ret.fulfillmentValue = this.value();
	            ret.isFulfilled = true;
	        } else if (this.isRejected()) {
	            ret.rejectionReason = this.reason();
	            ret.isRejected = true;
	        }
	        return ret;
	    };
	
	    Promise.prototype.all = function () {
	        if (arguments.length > 0) {
	            this._warn(".all() was passed arguments but it does not take any");
	        }
	        return new PromiseArray(this).promise();
	    };
	
	    Promise.prototype.error = function (fn) {
	        return this.caught(util.originatesFromRejection, fn);
	    };
	
	    Promise.getNewLibraryCopy = module.exports;
	
	    Promise.is = function (val) {
	        return val instanceof Promise;
	    };
	
	    Promise.fromNode = Promise.fromCallback = function (fn) {
	        var ret = new Promise(INTERNAL);
	        ret._captureStackTrace();
	        var multiArgs = arguments.length > 1 ? !!Object(arguments[1]).multiArgs : false;
	        var result = tryCatch(fn)(nodebackForPromise(ret, multiArgs));
	        if (result === errorObj) {
	            ret._rejectCallback(result.e, true);
	        }
	        if (!ret._isFateSealed()) ret._setAsyncGuaranteed();
	        return ret;
	    };
	
	    Promise.all = function (promises) {
	        return new PromiseArray(promises).promise();
	    };
	
	    Promise.cast = function (obj) {
	        var ret = tryConvertToPromise(obj);
	        if (!(ret instanceof Promise)) {
	            ret = new Promise(INTERNAL);
	            ret._captureStackTrace();
	            ret._setFulfilled();
	            ret._rejectionHandler0 = obj;
	        }
	        return ret;
	    };
	
	    Promise.resolve = Promise.fulfilled = Promise.cast;
	
	    Promise.reject = Promise.rejected = function (reason) {
	        var ret = new Promise(INTERNAL);
	        ret._captureStackTrace();
	        ret._rejectCallback(reason, true);
	        return ret;
	    };
	
	    Promise.setScheduler = function (fn) {
	        if (typeof fn !== "function") {
	            throw new TypeError("expecting a function but got " + util.classString(fn));
	        }
	        return async.setScheduler(fn);
	    };
	
	    Promise.prototype._then = function (didFulfill, didReject, _, receiver, internalData) {
	        var haveInternalData = internalData !== undefined;
	        var promise = haveInternalData ? internalData : new Promise(INTERNAL);
	        var target = this._target();
	        var bitField = target._bitField;
	
	        if (!haveInternalData) {
	            promise._propagateFrom(this, 3);
	            promise._captureStackTrace();
	            if (receiver === undefined && (this._bitField & 2097152) !== 0) {
	                if (!((bitField & 50397184) === 0)) {
	                    receiver = this._boundValue();
	                } else {
	                    receiver = target === this ? undefined : this._boundTo;
	                }
	            }
	            this._fireEvent("promiseChained", this, promise);
	        }
	
	        var domain = getDomain();
	        if (!((bitField & 50397184) === 0)) {
	            var handler,
	                value,
	                settler = target._settlePromiseCtx;
	            if ((bitField & 33554432) !== 0) {
	                value = target._rejectionHandler0;
	                handler = didFulfill;
	            } else if ((bitField & 16777216) !== 0) {
	                value = target._fulfillmentHandler0;
	                handler = didReject;
	                target._unsetRejectionIsUnhandled();
	            } else {
	                settler = target._settlePromiseLateCancellationObserver;
	                value = new CancellationError("late cancellation observer");
	                target._attachExtraTrace(value);
	                handler = didReject;
	            }
	
	            async.invoke(settler, target, {
	                handler: domain === null ? handler : typeof handler === "function" && util.domainBind(domain, handler),
	                promise: promise,
	                receiver: receiver,
	                value: value
	            });
	        } else {
	            target._addCallbacks(didFulfill, didReject, promise, receiver, domain);
	        }
	
	        return promise;
	    };
	
	    Promise.prototype._length = function () {
	        return this._bitField & 65535;
	    };
	
	    Promise.prototype._isFateSealed = function () {
	        return (this._bitField & 117506048) !== 0;
	    };
	
	    Promise.prototype._isFollowing = function () {
	        return (this._bitField & 67108864) === 67108864;
	    };
	
	    Promise.prototype._setLength = function (len) {
	        this._bitField = this._bitField & -65536 | len & 65535;
	    };
	
	    Promise.prototype._setFulfilled = function () {
	        this._bitField = this._bitField | 33554432;
	        this._fireEvent("promiseFulfilled", this);
	    };
	
	    Promise.prototype._setRejected = function () {
	        this._bitField = this._bitField | 16777216;
	        this._fireEvent("promiseRejected", this);
	    };
	
	    Promise.prototype._setFollowing = function () {
	        this._bitField = this._bitField | 67108864;
	        this._fireEvent("promiseResolved", this);
	    };
	
	    Promise.prototype._setIsFinal = function () {
	        this._bitField = this._bitField | 4194304;
	    };
	
	    Promise.prototype._isFinal = function () {
	        return (this._bitField & 4194304) > 0;
	    };
	
	    Promise.prototype._unsetCancelled = function () {
	        this._bitField = this._bitField & ~65536;
	    };
	
	    Promise.prototype._setCancelled = function () {
	        this._bitField = this._bitField | 65536;
	        this._fireEvent("promiseCancelled", this);
	    };
	
	    Promise.prototype._setWillBeCancelled = function () {
	        this._bitField = this._bitField | 8388608;
	    };
	
	    Promise.prototype._setAsyncGuaranteed = function () {
	        if (async.hasCustomScheduler()) return;
	        this._bitField = this._bitField | 134217728;
	    };
	
	    Promise.prototype._receiverAt = function (index) {
	        var ret = index === 0 ? this._receiver0 : this[index * 4 - 4 + 3];
	        if (ret === UNDEFINED_BINDING) {
	            return undefined;
	        } else if (ret === undefined && this._isBound()) {
	            return this._boundValue();
	        }
	        return ret;
	    };
	
	    Promise.prototype._promiseAt = function (index) {
	        return this[index * 4 - 4 + 2];
	    };
	
	    Promise.prototype._fulfillmentHandlerAt = function (index) {
	        return this[index * 4 - 4 + 0];
	    };
	
	    Promise.prototype._rejectionHandlerAt = function (index) {
	        return this[index * 4 - 4 + 1];
	    };
	
	    Promise.prototype._boundValue = function () {};
	
	    Promise.prototype._migrateCallback0 = function (follower) {
	        var bitField = follower._bitField;
	        var fulfill = follower._fulfillmentHandler0;
	        var reject = follower._rejectionHandler0;
	        var promise = follower._promise0;
	        var receiver = follower._receiverAt(0);
	        if (receiver === undefined) receiver = UNDEFINED_BINDING;
	        this._addCallbacks(fulfill, reject, promise, receiver, null);
	    };
	
	    Promise.prototype._migrateCallbackAt = function (follower, index) {
	        var fulfill = follower._fulfillmentHandlerAt(index);
	        var reject = follower._rejectionHandlerAt(index);
	        var promise = follower._promiseAt(index);
	        var receiver = follower._receiverAt(index);
	        if (receiver === undefined) receiver = UNDEFINED_BINDING;
	        this._addCallbacks(fulfill, reject, promise, receiver, null);
	    };
	
	    Promise.prototype._addCallbacks = function (fulfill, reject, promise, receiver, domain) {
	        var index = this._length();
	
	        if (index >= 65535 - 4) {
	            index = 0;
	            this._setLength(0);
	        }
	
	        if (index === 0) {
	            this._promise0 = promise;
	            this._receiver0 = receiver;
	            if (typeof fulfill === "function") {
	                this._fulfillmentHandler0 = domain === null ? fulfill : util.domainBind(domain, fulfill);
	            }
	            if (typeof reject === "function") {
	                this._rejectionHandler0 = domain === null ? reject : util.domainBind(domain, reject);
	            }
	        } else {
	            var base = index * 4 - 4;
	            this[base + 2] = promise;
	            this[base + 3] = receiver;
	            if (typeof fulfill === "function") {
	                this[base + 0] = domain === null ? fulfill : util.domainBind(domain, fulfill);
	            }
	            if (typeof reject === "function") {
	                this[base + 1] = domain === null ? reject : util.domainBind(domain, reject);
	            }
	        }
	        this._setLength(index + 1);
	        return index;
	    };
	
	    Promise.prototype._proxy = function (proxyable, arg) {
	        this._addCallbacks(undefined, undefined, arg, proxyable, null);
	    };
	
	    Promise.prototype._resolveCallback = function (value, shouldBind) {
	        if ((this._bitField & 117506048) !== 0) return;
	        if (value === this) return this._rejectCallback(makeSelfResolutionError(), false);
	        var maybePromise = tryConvertToPromise(value, this);
	        if (!(maybePromise instanceof Promise)) return this._fulfill(value);
	
	        if (shouldBind) this._propagateFrom(maybePromise, 2);
	
	        var promise = maybePromise._target();
	
	        if (promise === this) {
	            this._reject(makeSelfResolutionError());
	            return;
	        }
	
	        var bitField = promise._bitField;
	        if ((bitField & 50397184) === 0) {
	            var len = this._length();
	            if (len > 0) promise._migrateCallback0(this);
	            for (var i = 1; i < len; ++i) {
	                promise._migrateCallbackAt(this, i);
	            }
	            this._setFollowing();
	            this._setLength(0);
	            this._setFollowee(promise);
	        } else if ((bitField & 33554432) !== 0) {
	            this._fulfill(promise._value());
	        } else if ((bitField & 16777216) !== 0) {
	            this._reject(promise._reason());
	        } else {
	            var reason = new CancellationError("late cancellation observer");
	            promise._attachExtraTrace(reason);
	            this._reject(reason);
	        }
	    };
	
	    Promise.prototype._rejectCallback = function (reason, synchronous, ignoreNonErrorWarnings) {
	        var trace = util.ensureErrorObject(reason);
	        var hasStack = trace === reason;
	        if (!hasStack && !ignoreNonErrorWarnings && debug.warnings()) {
	            var message = "a promise was rejected with a non-error: " + util.classString(reason);
	            this._warn(message, true);
	        }
	        this._attachExtraTrace(trace, synchronous ? hasStack : false);
	        this._reject(reason);
	    };
	
	    Promise.prototype._resolveFromExecutor = function (executor) {
	        if (executor === INTERNAL) return;
	        var promise = this;
	        this._captureStackTrace();
	        this._pushContext();
	        var synchronous = true;
	        var r = this._execute(executor, function (value) {
	            promise._resolveCallback(value);
	        }, function (reason) {
	            promise._rejectCallback(reason, synchronous);
	        });
	        synchronous = false;
	        this._popContext();
	
	        if (r !== undefined) {
	            promise._rejectCallback(r, true);
	        }
	    };
	
	    Promise.prototype._settlePromiseFromHandler = function (handler, receiver, value, promise) {
	        var bitField = promise._bitField;
	        if ((bitField & 65536) !== 0) return;
	        promise._pushContext();
	        var x;
	        if (receiver === APPLY) {
	            if (!value || typeof value.length !== "number") {
	                x = errorObj;
	                x.e = new TypeError("cannot .spread() a non-array: " + util.classString(value));
	            } else {
	                x = tryCatch(handler).apply(this._boundValue(), value);
	            }
	        } else {
	            x = tryCatch(handler).call(receiver, value);
	        }
	        var promiseCreated = promise._popContext();
	        bitField = promise._bitField;
	        if ((bitField & 65536) !== 0) return;
	
	        if (x === NEXT_FILTER) {
	            promise._reject(value);
	        } else if (x === errorObj) {
	            promise._rejectCallback(x.e, false);
	        } else {
	            debug.checkForgottenReturns(x, promiseCreated, "", promise, this);
	            promise._resolveCallback(x);
	        }
	    };
	
	    Promise.prototype._target = function () {
	        var ret = this;
	        while (ret._isFollowing()) {
	            ret = ret._followee();
	        }return ret;
	    };
	
	    Promise.prototype._followee = function () {
	        return this._rejectionHandler0;
	    };
	
	    Promise.prototype._setFollowee = function (promise) {
	        this._rejectionHandler0 = promise;
	    };
	
	    Promise.prototype._settlePromise = function (promise, handler, receiver, value) {
	        var isPromise = promise instanceof Promise;
	        var bitField = this._bitField;
	        var asyncGuaranteed = (bitField & 134217728) !== 0;
	        if ((bitField & 65536) !== 0) {
	            if (isPromise) promise._invokeInternalOnCancel();
	
	            if (receiver instanceof PassThroughHandlerContext && receiver.isFinallyHandler()) {
	                receiver.cancelPromise = promise;
	                if (tryCatch(handler).call(receiver, value) === errorObj) {
	                    promise._reject(errorObj.e);
	                }
	            } else if (handler === reflectHandler) {
	                promise._fulfill(reflectHandler.call(receiver));
	            } else if (receiver instanceof Proxyable) {
	                receiver._promiseCancelled(promise);
	            } else if (isPromise || promise instanceof PromiseArray) {
	                promise._cancel();
	            } else {
	                receiver.cancel();
	            }
	        } else if (typeof handler === "function") {
	            if (!isPromise) {
	                handler.call(receiver, value, promise);
	            } else {
	                if (asyncGuaranteed) promise._setAsyncGuaranteed();
	                this._settlePromiseFromHandler(handler, receiver, value, promise);
	            }
	        } else if (receiver instanceof Proxyable) {
	            if (!receiver._isResolved()) {
	                if ((bitField & 33554432) !== 0) {
	                    receiver._promiseFulfilled(value, promise);
	                } else {
	                    receiver._promiseRejected(value, promise);
	                }
	            }
	        } else if (isPromise) {
	            if (asyncGuaranteed) promise._setAsyncGuaranteed();
	            if ((bitField & 33554432) !== 0) {
	                promise._fulfill(value);
	            } else {
	                promise._reject(value);
	            }
	        }
	    };
	
	    Promise.prototype._settlePromiseLateCancellationObserver = function (ctx) {
	        var handler = ctx.handler;
	        var promise = ctx.promise;
	        var receiver = ctx.receiver;
	        var value = ctx.value;
	        if (typeof handler === "function") {
	            if (!(promise instanceof Promise)) {
	                handler.call(receiver, value, promise);
	            } else {
	                this._settlePromiseFromHandler(handler, receiver, value, promise);
	            }
	        } else if (promise instanceof Promise) {
	            promise._reject(value);
	        }
	    };
	
	    Promise.prototype._settlePromiseCtx = function (ctx) {
	        this._settlePromise(ctx.promise, ctx.handler, ctx.receiver, ctx.value);
	    };
	
	    Promise.prototype._settlePromise0 = function (handler, value, bitField) {
	        var promise = this._promise0;
	        var receiver = this._receiverAt(0);
	        this._promise0 = undefined;
	        this._receiver0 = undefined;
	        this._settlePromise(promise, handler, receiver, value);
	    };
	
	    Promise.prototype._clearCallbackDataAtIndex = function (index) {
	        var base = index * 4 - 4;
	        this[base + 2] = this[base + 3] = this[base + 0] = this[base + 1] = undefined;
	    };
	
	    Promise.prototype._fulfill = function (value) {
	        var bitField = this._bitField;
	        if ((bitField & 117506048) >>> 16) return;
	        if (value === this) {
	            var err = makeSelfResolutionError();
	            this._attachExtraTrace(err);
	            return this._reject(err);
	        }
	        this._setFulfilled();
	        this._rejectionHandler0 = value;
	
	        if ((bitField & 65535) > 0) {
	            if ((bitField & 134217728) !== 0) {
	                this._settlePromises();
	            } else {
	                async.settlePromises(this);
	            }
	        }
	    };
	
	    Promise.prototype._reject = function (reason) {
	        var bitField = this._bitField;
	        if ((bitField & 117506048) >>> 16) return;
	        this._setRejected();
	        this._fulfillmentHandler0 = reason;
	
	        if (this._isFinal()) {
	            return async.fatalError(reason, util.isNode);
	        }
	
	        if ((bitField & 65535) > 0) {
	            async.settlePromises(this);
	        } else {
	            this._ensurePossibleRejectionHandled();
	        }
	    };
	
	    Promise.prototype._fulfillPromises = function (len, value) {
	        for (var i = 1; i < len; i++) {
	            var handler = this._fulfillmentHandlerAt(i);
	            var promise = this._promiseAt(i);
	            var receiver = this._receiverAt(i);
	            this._clearCallbackDataAtIndex(i);
	            this._settlePromise(promise, handler, receiver, value);
	        }
	    };
	
	    Promise.prototype._rejectPromises = function (len, reason) {
	        for (var i = 1; i < len; i++) {
	            var handler = this._rejectionHandlerAt(i);
	            var promise = this._promiseAt(i);
	            var receiver = this._receiverAt(i);
	            this._clearCallbackDataAtIndex(i);
	            this._settlePromise(promise, handler, receiver, reason);
	        }
	    };
	
	    Promise.prototype._settlePromises = function () {
	        var bitField = this._bitField;
	        var len = bitField & 65535;
	
	        if (len > 0) {
	            if ((bitField & 16842752) !== 0) {
	                var reason = this._fulfillmentHandler0;
	                this._settlePromise0(this._rejectionHandler0, reason, bitField);
	                this._rejectPromises(len, reason);
	            } else {
	                var value = this._rejectionHandler0;
	                this._settlePromise0(this._fulfillmentHandler0, value, bitField);
	                this._fulfillPromises(len, value);
	            }
	            this._setLength(0);
	        }
	        this._clearCancellationData();
	    };
	
	    Promise.prototype._settledValue = function () {
	        var bitField = this._bitField;
	        if ((bitField & 33554432) !== 0) {
	            return this._rejectionHandler0;
	        } else if ((bitField & 16777216) !== 0) {
	            return this._fulfillmentHandler0;
	        }
	    };
	
	    function deferResolve(v) {
	        this.promise._resolveCallback(v);
	    }
	    function deferReject(v) {
	        this.promise._rejectCallback(v, false);
	    }
	
	    Promise.defer = Promise.pending = function () {
	        debug.deprecated("Promise.defer", "new Promise");
	        var promise = new Promise(INTERNAL);
	        return {
	            promise: promise,
	            resolve: deferResolve,
	            reject: deferReject
	        };
	    };
	
	    util.notEnumerableProp(Promise, "_makeSelfResolutionError", makeSelfResolutionError);
	
	    __webpack_require__(615)(Promise, INTERNAL, tryConvertToPromise, apiRejection, debug);
	    __webpack_require__(616)(Promise, INTERNAL, tryConvertToPromise, debug);
	    __webpack_require__(617)(Promise, PromiseArray, apiRejection, debug);
	    __webpack_require__(618)(Promise);
	    __webpack_require__(619)(Promise);
	    __webpack_require__(620)(Promise, PromiseArray, tryConvertToPromise, INTERNAL, async, getDomain);
	    Promise.Promise = Promise;
	    Promise.version = "3.5.1";
	    __webpack_require__(621)(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug);
	    __webpack_require__(622)(Promise);
	    __webpack_require__(623)(Promise, apiRejection, tryConvertToPromise, createContext, INTERNAL, debug);
	    __webpack_require__(624)(Promise, INTERNAL, debug);
	    __webpack_require__(625)(Promise, apiRejection, INTERNAL, tryConvertToPromise, Proxyable, debug);
	    __webpack_require__(626)(Promise);
	    __webpack_require__(627)(Promise, INTERNAL);
	    __webpack_require__(628)(Promise, PromiseArray, tryConvertToPromise, apiRejection);
	    __webpack_require__(629)(Promise, INTERNAL, tryConvertToPromise, apiRejection);
	    __webpack_require__(630)(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug);
	    __webpack_require__(631)(Promise, PromiseArray, debug);
	    __webpack_require__(632)(Promise, PromiseArray, apiRejection);
	    __webpack_require__(633)(Promise, INTERNAL);
	    __webpack_require__(634)(Promise, INTERNAL);
	    __webpack_require__(635)(Promise);
	
	    util.toFastProperties(Promise);
	    util.toFastProperties(Promise.prototype);
	    function fillTypes(value) {
	        var p = new Promise(INTERNAL);
	        p._fulfillmentHandler0 = value;
	        p._rejectionHandler0 = value;
	        p._promise0 = value;
	        p._receiver0 = value;
	    }
	    // Complete slack tracking, opt out of field-type tracking and           
	    // stabilize map                                                         
	    fillTypes({ a: 1 });
	    fillTypes({ b: 2 });
	    fillTypes({ c: 3 });
	    fillTypes(1);
	    fillTypes(function () {});
	    fillTypes(undefined);
	    fillTypes(false);
	    fillTypes(new Promise(INTERNAL));
	    debug.setBounds(Async.firstLineError, util.lastLineError);
	    return Promise;
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(561)))

/***/ },
/* 600 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var es5 = __webpack_require__(601);
	var canEvaluate = typeof navigator == "undefined";
	
	var errorObj = { e: {} };
	var tryCatchTarget;
	var globalObject = typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : undefined !== undefined ? undefined : null;
	
	function tryCatcher() {
	    try {
	        var target = tryCatchTarget;
	        tryCatchTarget = null;
	        return target.apply(this, arguments);
	    } catch (e) {
	        errorObj.e = e;
	        return errorObj;
	    }
	}
	function tryCatch(fn) {
	    tryCatchTarget = fn;
	    return tryCatcher;
	}
	
	var inherits = function inherits(Child, Parent) {
	    var hasProp = {}.hasOwnProperty;
	
	    function T() {
	        this.constructor = Child;
	        this.constructor$ = Parent;
	        for (var propertyName in Parent.prototype) {
	            if (hasProp.call(Parent.prototype, propertyName) && propertyName.charAt(propertyName.length - 1) !== "$") {
	                this[propertyName + "$"] = Parent.prototype[propertyName];
	            }
	        }
	    }
	    T.prototype = Parent.prototype;
	    Child.prototype = new T();
	    return Child.prototype;
	};
	
	function isPrimitive(val) {
	    return val == null || val === true || val === false || typeof val === "string" || typeof val === "number";
	}
	
	function isObject(value) {
	    return typeof value === "function" || (typeof value === "undefined" ? "undefined" : _typeof(value)) === "object" && value !== null;
	}
	
	function maybeWrapAsError(maybeError) {
	    if (!isPrimitive(maybeError)) return maybeError;
	
	    return new Error(safeToString(maybeError));
	}
	
	function withAppended(target, appendee) {
	    var len = target.length;
	    var ret = new Array(len + 1);
	    var i;
	    for (i = 0; i < len; ++i) {
	        ret[i] = target[i];
	    }
	    ret[i] = appendee;
	    return ret;
	}
	
	function getDataPropertyOrDefault(obj, key, defaultValue) {
	    if (es5.isES5) {
	        var desc = Object.getOwnPropertyDescriptor(obj, key);
	
	        if (desc != null) {
	            return desc.get == null && desc.set == null ? desc.value : defaultValue;
	        }
	    } else {
	        return {}.hasOwnProperty.call(obj, key) ? obj[key] : undefined;
	    }
	}
	
	function notEnumerableProp(obj, name, value) {
	    if (isPrimitive(obj)) return obj;
	    var descriptor = {
	        value: value,
	        configurable: true,
	        enumerable: false,
	        writable: true
	    };
	    es5.defineProperty(obj, name, descriptor);
	    return obj;
	}
	
	function thrower(r) {
	    throw r;
	}
	
	var inheritedDataKeys = function () {
	    var excludedPrototypes = [Array.prototype, Object.prototype, Function.prototype];
	
	    var isExcludedProto = function isExcludedProto(val) {
	        for (var i = 0; i < excludedPrototypes.length; ++i) {
	            if (excludedPrototypes[i] === val) {
	                return true;
	            }
	        }
	        return false;
	    };
	
	    if (es5.isES5) {
	        var getKeys = Object.getOwnPropertyNames;
	        return function (obj) {
	            var ret = [];
	            var visitedKeys = Object.create(null);
	            while (obj != null && !isExcludedProto(obj)) {
	                var keys;
	                try {
	                    keys = getKeys(obj);
	                } catch (e) {
	                    return ret;
	                }
	                for (var i = 0; i < keys.length; ++i) {
	                    var key = keys[i];
	                    if (visitedKeys[key]) continue;
	                    visitedKeys[key] = true;
	                    var desc = Object.getOwnPropertyDescriptor(obj, key);
	                    if (desc != null && desc.get == null && desc.set == null) {
	                        ret.push(key);
	                    }
	                }
	                obj = es5.getPrototypeOf(obj);
	            }
	            return ret;
	        };
	    } else {
	        var hasProp = {}.hasOwnProperty;
	        return function (obj) {
	            if (isExcludedProto(obj)) return [];
	            var ret = [];
	
	            /*jshint forin:false */
	            enumeration: for (var key in obj) {
	                if (hasProp.call(obj, key)) {
	                    ret.push(key);
	                } else {
	                    for (var i = 0; i < excludedPrototypes.length; ++i) {
	                        if (hasProp.call(excludedPrototypes[i], key)) {
	                            continue enumeration;
	                        }
	                    }
	                    ret.push(key);
	                }
	            }
	            return ret;
	        };
	    }
	}();
	
	var thisAssignmentPattern = /this\s*\.\s*\S+\s*=/;
	function isClass(fn) {
	    try {
	        if (typeof fn === "function") {
	            var keys = es5.names(fn.prototype);
	
	            var hasMethods = es5.isES5 && keys.length > 1;
	            var hasMethodsOtherThanConstructor = keys.length > 0 && !(keys.length === 1 && keys[0] === "constructor");
	            var hasThisAssignmentAndStaticMethods = thisAssignmentPattern.test(fn + "") && es5.names(fn).length > 0;
	
	            if (hasMethods || hasMethodsOtherThanConstructor || hasThisAssignmentAndStaticMethods) {
	                return true;
	            }
	        }
	        return false;
	    } catch (e) {
	        return false;
	    }
	}
	
	function toFastProperties(obj) {
	    /*jshint -W027,-W055,-W031*/
	    function FakeConstructor() {}
	    FakeConstructor.prototype = obj;
	    var l = 8;
	    while (l--) {
	        new FakeConstructor();
	    }return obj;
	    eval(obj);
	}
	
	var rident = /^[a-z$_][a-z$_0-9]*$/i;
	function isIdentifier(str) {
	    return rident.test(str);
	}
	
	function filledRange(count, prefix, suffix) {
	    var ret = new Array(count);
	    for (var i = 0; i < count; ++i) {
	        ret[i] = prefix + i + suffix;
	    }
	    return ret;
	}
	
	function safeToString(obj) {
	    try {
	        return obj + "";
	    } catch (e) {
	        return "[no string representation]";
	    }
	}
	
	function isError(obj) {
	    return obj instanceof Error || obj !== null && (typeof obj === "undefined" ? "undefined" : _typeof(obj)) === "object" && typeof obj.message === "string" && typeof obj.name === "string";
	}
	
	function markAsOriginatingFromRejection(e) {
	    try {
	        notEnumerableProp(e, "isOperational", true);
	    } catch (ignore) {}
	}
	
	function originatesFromRejection(e) {
	    if (e == null) return false;
	    return e instanceof Error["__BluebirdErrorTypes__"].OperationalError || e["isOperational"] === true;
	}
	
	function canAttachTrace(obj) {
	    return isError(obj) && es5.propertyIsWritable(obj, "stack");
	}
	
	var ensureErrorObject = function () {
	    if (!("stack" in new Error())) {
	        return function (value) {
	            if (canAttachTrace(value)) return value;
	            try {
	                throw new Error(safeToString(value));
	            } catch (err) {
	                return err;
	            }
	        };
	    } else {
	        return function (value) {
	            if (canAttachTrace(value)) return value;
	            return new Error(safeToString(value));
	        };
	    }
	}();
	
	function classString(obj) {
	    return {}.toString.call(obj);
	}
	
	function copyDescriptors(from, to, filter) {
	    var keys = es5.names(from);
	    for (var i = 0; i < keys.length; ++i) {
	        var key = keys[i];
	        if (filter(key)) {
	            try {
	                es5.defineProperty(to, key, es5.getDescriptor(from, key));
	            } catch (ignore) {}
	        }
	    }
	}
	
	var asArray = function asArray(v) {
	    if (es5.isArray(v)) {
	        return v;
	    }
	    return null;
	};
	
	if (typeof Symbol !== "undefined" && Symbol.iterator) {
	    var ArrayFrom = typeof Array.from === "function" ? function (v) {
	        return Array.from(v);
	    } : function (v) {
	        var ret = [];
	        var it = v[Symbol.iterator]();
	        var itResult;
	        while (!(itResult = it.next()).done) {
	            ret.push(itResult.value);
	        }
	        return ret;
	    };
	
	    asArray = function asArray(v) {
	        if (es5.isArray(v)) {
	            return v;
	        } else if (v != null && typeof v[Symbol.iterator] === "function") {
	            return ArrayFrom(v);
	        }
	        return null;
	    };
	}
	
	var isNode = typeof process !== "undefined" && classString(process).toLowerCase() === "[object process]";
	
	var hasEnvVariables = typeof process !== "undefined" && typeof process.env !== "undefined";
	
	function env(key) {
	    return hasEnvVariables ? process.env[key] : undefined;
	}
	
	function getNativePromise() {
	    if (typeof Promise === "function") {
	        try {
	            var promise = new Promise(function () {});
	            if ({}.toString.call(promise) === "[object Promise]") {
	                return Promise;
	            }
	        } catch (e) {}
	    }
	}
	
	function domainBind(self, cb) {
	    return self.bind(cb);
	}
	
	var ret = {
	    isClass: isClass,
	    isIdentifier: isIdentifier,
	    inheritedDataKeys: inheritedDataKeys,
	    getDataPropertyOrDefault: getDataPropertyOrDefault,
	    thrower: thrower,
	    isArray: es5.isArray,
	    asArray: asArray,
	    notEnumerableProp: notEnumerableProp,
	    isPrimitive: isPrimitive,
	    isObject: isObject,
	    isError: isError,
	    canEvaluate: canEvaluate,
	    errorObj: errorObj,
	    tryCatch: tryCatch,
	    inherits: inherits,
	    withAppended: withAppended,
	    maybeWrapAsError: maybeWrapAsError,
	    toFastProperties: toFastProperties,
	    filledRange: filledRange,
	    toString: safeToString,
	    canAttachTrace: canAttachTrace,
	    ensureErrorObject: ensureErrorObject,
	    originatesFromRejection: originatesFromRejection,
	    markAsOriginatingFromRejection: markAsOriginatingFromRejection,
	    classString: classString,
	    copyDescriptors: copyDescriptors,
	    hasDevTools: typeof chrome !== "undefined" && chrome && typeof chrome.loadTimes === "function",
	    isNode: isNode,
	    hasEnvVariables: hasEnvVariables,
	    env: env,
	    global: globalObject,
	    getNativePromise: getNativePromise,
	    domainBind: domainBind
	};
	ret.isRecentNode = ret.isNode && function () {
	    var version = process.versions.node.split(".").map(Number);
	    return version[0] === 0 && version[1] > 10 || version[0] > 0;
	}();
	
	if (ret.isNode) ret.toFastProperties(process);
	
	try {
	    throw new Error();
	} catch (e) {
	    ret.lastLineError = e;
	}
	module.exports = ret;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(561)))

/***/ },
/* 601 */
/***/ function(module, exports) {

	"use strict";
	
	var isES5 = function () {
	    "use strict";
	
	    return this === undefined;
	}();
	
	if (isES5) {
	    module.exports = {
	        freeze: Object.freeze,
	        defineProperty: Object.defineProperty,
	        getDescriptor: Object.getOwnPropertyDescriptor,
	        keys: Object.keys,
	        names: Object.getOwnPropertyNames,
	        getPrototypeOf: Object.getPrototypeOf,
	        isArray: Array.isArray,
	        isES5: isES5,
	        propertyIsWritable: function propertyIsWritable(obj, prop) {
	            var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
	            return !!(!descriptor || descriptor.writable || descriptor.set);
	        }
	    };
	} else {
	    var has = {}.hasOwnProperty;
	    var str = {}.toString;
	    var proto = {}.constructor.prototype;
	
	    var ObjectKeys = function ObjectKeys(o) {
	        var ret = [];
	        for (var key in o) {
	            if (has.call(o, key)) {
	                ret.push(key);
	            }
	        }
	        return ret;
	    };
	
	    var ObjectGetDescriptor = function ObjectGetDescriptor(o, key) {
	        return { value: o[key] };
	    };
	
	    var ObjectDefineProperty = function ObjectDefineProperty(o, key, desc) {
	        o[key] = desc.value;
	        return o;
	    };
	
	    var ObjectFreeze = function ObjectFreeze(obj) {
	        return obj;
	    };
	
	    var ObjectGetPrototypeOf = function ObjectGetPrototypeOf(obj) {
	        try {
	            return Object(obj).constructor.prototype;
	        } catch (e) {
	            return proto;
	        }
	    };
	
	    var ArrayIsArray = function ArrayIsArray(obj) {
	        try {
	            return str.call(obj) === "[object Array]";
	        } catch (e) {
	            return false;
	        }
	    };
	
	    module.exports = {
	        isArray: ArrayIsArray,
	        keys: ObjectKeys,
	        names: ObjectKeys,
	        defineProperty: ObjectDefineProperty,
	        getDescriptor: ObjectGetDescriptor,
	        freeze: ObjectFreeze,
	        getPrototypeOf: ObjectGetPrototypeOf,
	        isES5: isES5,
	        propertyIsWritable: function propertyIsWritable() {
	            return true;
	        }
	    };
	}

/***/ },
/* 602 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	var firstLineError;
	try {
	    throw new Error();
	} catch (e) {
	    firstLineError = e;
	}
	var schedule = __webpack_require__(603);
	var Queue = __webpack_require__(606);
	var util = __webpack_require__(600);
	
	function Async() {
	    this._customScheduler = false;
	    this._isTickUsed = false;
	    this._lateQueue = new Queue(16);
	    this._normalQueue = new Queue(16);
	    this._haveDrainedQueues = false;
	    this._trampolineEnabled = true;
	    var self = this;
	    this.drainQueues = function () {
	        self._drainQueues();
	    };
	    this._schedule = schedule;
	}
	
	Async.prototype.setScheduler = function (fn) {
	    var prev = this._schedule;
	    this._schedule = fn;
	    this._customScheduler = true;
	    return prev;
	};
	
	Async.prototype.hasCustomScheduler = function () {
	    return this._customScheduler;
	};
	
	Async.prototype.enableTrampoline = function () {
	    this._trampolineEnabled = true;
	};
	
	Async.prototype.disableTrampolineIfNecessary = function () {
	    if (util.hasDevTools) {
	        this._trampolineEnabled = false;
	    }
	};
	
	Async.prototype.haveItemsQueued = function () {
	    return this._isTickUsed || this._haveDrainedQueues;
	};
	
	Async.prototype.fatalError = function (e, isNode) {
	    if (isNode) {
	        process.stderr.write("Fatal " + (e instanceof Error ? e.stack : e) + "\n");
	        process.exit(2);
	    } else {
	        this.throwLater(e);
	    }
	};
	
	Async.prototype.throwLater = function (fn, arg) {
	    if (arguments.length === 1) {
	        arg = fn;
	        fn = function fn() {
	            throw arg;
	        };
	    }
	    if (typeof setTimeout !== "undefined") {
	        setTimeout(function () {
	            fn(arg);
	        }, 0);
	    } else try {
	        this._schedule(function () {
	            fn(arg);
	        });
	    } catch (e) {
	        throw new Error("No async scheduler available\n\n    See http://goo.gl/MqrFmX\n");
	    }
	};
	
	function AsyncInvokeLater(fn, receiver, arg) {
	    this._lateQueue.push(fn, receiver, arg);
	    this._queueTick();
	}
	
	function AsyncInvoke(fn, receiver, arg) {
	    this._normalQueue.push(fn, receiver, arg);
	    this._queueTick();
	}
	
	function AsyncSettlePromises(promise) {
	    this._normalQueue._pushOne(promise);
	    this._queueTick();
	}
	
	if (!util.hasDevTools) {
	    Async.prototype.invokeLater = AsyncInvokeLater;
	    Async.prototype.invoke = AsyncInvoke;
	    Async.prototype.settlePromises = AsyncSettlePromises;
	} else {
	    Async.prototype.invokeLater = function (fn, receiver, arg) {
	        if (this._trampolineEnabled) {
	            AsyncInvokeLater.call(this, fn, receiver, arg);
	        } else {
	            this._schedule(function () {
	                setTimeout(function () {
	                    fn.call(receiver, arg);
	                }, 100);
	            });
	        }
	    };
	
	    Async.prototype.invoke = function (fn, receiver, arg) {
	        if (this._trampolineEnabled) {
	            AsyncInvoke.call(this, fn, receiver, arg);
	        } else {
	            this._schedule(function () {
	                fn.call(receiver, arg);
	            });
	        }
	    };
	
	    Async.prototype.settlePromises = function (promise) {
	        if (this._trampolineEnabled) {
	            AsyncSettlePromises.call(this, promise);
	        } else {
	            this._schedule(function () {
	                promise._settlePromises();
	            });
	        }
	    };
	}
	
	Async.prototype._drainQueue = function (queue) {
	    while (queue.length() > 0) {
	        var fn = queue.shift();
	        if (typeof fn !== "function") {
	            fn._settlePromises();
	            continue;
	        }
	        var receiver = queue.shift();
	        var arg = queue.shift();
	        fn.call(receiver, arg);
	    }
	};
	
	Async.prototype._drainQueues = function () {
	    this._drainQueue(this._normalQueue);
	    this._reset();
	    this._haveDrainedQueues = true;
	    this._drainQueue(this._lateQueue);
	};
	
	Async.prototype._queueTick = function () {
	    if (!this._isTickUsed) {
	        this._isTickUsed = true;
	        this._schedule(this.drainQueues);
	    }
	};
	
	Async.prototype._reset = function () {
	    this._isTickUsed = false;
	};
	
	module.exports = Async;
	module.exports.firstLineError = firstLineError;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(561)))

/***/ },
/* 603 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process, setImmediate) {"use strict";
	
	var util = __webpack_require__(600);
	var schedule;
	var noAsyncScheduler = function noAsyncScheduler() {
	    throw new Error("No async scheduler available\n\n    See http://goo.gl/MqrFmX\n");
	};
	var NativePromise = util.getNativePromise();
	if (util.isNode && typeof MutationObserver === "undefined") {
	    var GlobalSetImmediate = global.setImmediate;
	    var ProcessNextTick = process.nextTick;
	    schedule = util.isRecentNode ? function (fn) {
	        GlobalSetImmediate.call(global, fn);
	    } : function (fn) {
	        ProcessNextTick.call(process, fn);
	    };
	} else if (typeof NativePromise === "function" && typeof NativePromise.resolve === "function") {
	    var nativePromise = NativePromise.resolve();
	    schedule = function schedule(fn) {
	        nativePromise.then(fn);
	    };
	} else if (typeof MutationObserver !== "undefined" && !(typeof window !== "undefined" && window.navigator && (window.navigator.standalone || window.cordova))) {
	    schedule = function () {
	        var div = document.createElement("div");
	        var opts = { attributes: true };
	        var toggleScheduled = false;
	        var div2 = document.createElement("div");
	        var o2 = new MutationObserver(function () {
	            div.classList.toggle("foo");
	            toggleScheduled = false;
	        });
	        o2.observe(div2, opts);
	
	        var scheduleToggle = function scheduleToggle() {
	            if (toggleScheduled) return;
	            toggleScheduled = true;
	            div2.classList.toggle("foo");
	        };
	
	        return function schedule(fn) {
	            var o = new MutationObserver(function () {
	                o.disconnect();
	                fn();
	            });
	            o.observe(div, opts);
	            scheduleToggle();
	        };
	    }();
	} else if (typeof setImmediate !== "undefined") {
	    schedule = function schedule(fn) {
	        setImmediate(fn);
	    };
	} else if (typeof setTimeout !== "undefined") {
	    schedule = function schedule(fn) {
	        setTimeout(fn, 0);
	    };
	} else {
	    schedule = noAsyncScheduler;
	}
	module.exports = schedule;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(561), __webpack_require__(604).setImmediate))

/***/ },
/* 604 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";
	
	var apply = Function.prototype.apply;
	
	// DOM APIs, for completeness
	
	exports.setTimeout = function () {
	  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
	};
	exports.setInterval = function () {
	  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
	};
	exports.clearTimeout = exports.clearInterval = function (timeout) {
	  if (timeout) {
	    timeout.close();
	  }
	};
	
	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function () {};
	Timeout.prototype.close = function () {
	  this._clearFn.call(window, this._id);
	};
	
	// Does not start the time, just sets up the members needed.
	exports.enroll = function (item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};
	
	exports.unenroll = function (item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};
	
	exports._unrefActive = exports.active = function (item) {
	  clearTimeout(item._idleTimeoutId);
	
	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout) item._onTimeout();
	    }, msecs);
	  }
	};
	
	// setimmediate attaches itself to the global object
	__webpack_require__(605);
	// On some exotic environments, it's not clear which object `setimmeidate` was
	// able to install onto.  Search each possibility in the same order as the
	// `setimmediate` library.
	exports.setImmediate = typeof self !== "undefined" && self.setImmediate || typeof global !== "undefined" && global.setImmediate || undefined && undefined.setImmediate;
	exports.clearImmediate = typeof self !== "undefined" && self.clearImmediate || typeof global !== "undefined" && global.clearImmediate || undefined && undefined.clearImmediate;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 605 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {"use strict";
	
	(function (global, undefined) {
	    "use strict";
	
	    if (global.setImmediate) {
	        return;
	    }
	
	    var nextHandle = 1; // Spec says greater than zero
	    var tasksByHandle = {};
	    var currentlyRunningATask = false;
	    var doc = global.document;
	    var registerImmediate;
	
	    function setImmediate(callback) {
	        // Callback can either be a function or a string
	        if (typeof callback !== "function") {
	            callback = new Function("" + callback);
	        }
	        // Copy function arguments
	        var args = new Array(arguments.length - 1);
	        for (var i = 0; i < args.length; i++) {
	            args[i] = arguments[i + 1];
	        }
	        // Store and register the task
	        var task = { callback: callback, args: args };
	        tasksByHandle[nextHandle] = task;
	        registerImmediate(nextHandle);
	        return nextHandle++;
	    }
	
	    function clearImmediate(handle) {
	        delete tasksByHandle[handle];
	    }
	
	    function run(task) {
	        var callback = task.callback;
	        var args = task.args;
	        switch (args.length) {
	            case 0:
	                callback();
	                break;
	            case 1:
	                callback(args[0]);
	                break;
	            case 2:
	                callback(args[0], args[1]);
	                break;
	            case 3:
	                callback(args[0], args[1], args[2]);
	                break;
	            default:
	                callback.apply(undefined, args);
	                break;
	        }
	    }
	
	    function runIfPresent(handle) {
	        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
	        // So if we're currently running a task, we'll need to delay this invocation.
	        if (currentlyRunningATask) {
	            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
	            // "too much recursion" error.
	            setTimeout(runIfPresent, 0, handle);
	        } else {
	            var task = tasksByHandle[handle];
	            if (task) {
	                currentlyRunningATask = true;
	                try {
	                    run(task);
	                } finally {
	                    clearImmediate(handle);
	                    currentlyRunningATask = false;
	                }
	            }
	        }
	    }
	
	    function installNextTickImplementation() {
	        registerImmediate = function registerImmediate(handle) {
	            process.nextTick(function () {
	                runIfPresent(handle);
	            });
	        };
	    }
	
	    function canUsePostMessage() {
	        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
	        // where `global.postMessage` means something completely different and can't be used for this purpose.
	        if (global.postMessage && !global.importScripts) {
	            var postMessageIsAsynchronous = true;
	            var oldOnMessage = global.onmessage;
	            global.onmessage = function () {
	                postMessageIsAsynchronous = false;
	            };
	            global.postMessage("", "*");
	            global.onmessage = oldOnMessage;
	            return postMessageIsAsynchronous;
	        }
	    }
	
	    function installPostMessageImplementation() {
	        // Installs an event handler on `global` for the `message` event: see
	        // * https://developer.mozilla.org/en/DOM/window.postMessage
	        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages
	
	        var messagePrefix = "setImmediate$" + Math.random() + "$";
	        var onGlobalMessage = function onGlobalMessage(event) {
	            if (event.source === global && typeof event.data === "string" && event.data.indexOf(messagePrefix) === 0) {
	                runIfPresent(+event.data.slice(messagePrefix.length));
	            }
	        };
	
	        if (global.addEventListener) {
	            global.addEventListener("message", onGlobalMessage, false);
	        } else {
	            global.attachEvent("onmessage", onGlobalMessage);
	        }
	
	        registerImmediate = function registerImmediate(handle) {
	            global.postMessage(messagePrefix + handle, "*");
	        };
	    }
	
	    function installMessageChannelImplementation() {
	        var channel = new MessageChannel();
	        channel.port1.onmessage = function (event) {
	            var handle = event.data;
	            runIfPresent(handle);
	        };
	
	        registerImmediate = function registerImmediate(handle) {
	            channel.port2.postMessage(handle);
	        };
	    }
	
	    function installReadyStateChangeImplementation() {
	        var html = doc.documentElement;
	        registerImmediate = function registerImmediate(handle) {
	            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
	            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
	            var script = doc.createElement("script");
	            script.onreadystatechange = function () {
	                runIfPresent(handle);
	                script.onreadystatechange = null;
	                html.removeChild(script);
	                script = null;
	            };
	            html.appendChild(script);
	        };
	    }
	
	    function installSetTimeoutImplementation() {
	        registerImmediate = function registerImmediate(handle) {
	            setTimeout(runIfPresent, 0, handle);
	        };
	    }
	
	    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
	    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
	    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;
	
	    // Don't get fooled by e.g. browserify environments.
	    if ({}.toString.call(global.process) === "[object process]") {
	        // For Node.js before 0.9
	        installNextTickImplementation();
	    } else if (canUsePostMessage()) {
	        // For non-IE10 modern browsers
	        installPostMessageImplementation();
	    } else if (global.MessageChannel) {
	        // For web workers, where supported
	        installMessageChannelImplementation();
	    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
	        // For IE 6–8
	        installReadyStateChangeImplementation();
	    } else {
	        // For older browsers
	        installSetTimeoutImplementation();
	    }
	
	    attachTo.setImmediate = setImmediate;
	    attachTo.clearImmediate = clearImmediate;
	})(typeof self === "undefined" ? typeof global === "undefined" ? undefined : global : self);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(561)))

/***/ },
/* 606 */
/***/ function(module, exports) {

	"use strict";
	
	function arrayMove(src, srcIndex, dst, dstIndex, len) {
	    for (var j = 0; j < len; ++j) {
	        dst[j + dstIndex] = src[j + srcIndex];
	        src[j + srcIndex] = void 0;
	    }
	}
	
	function Queue(capacity) {
	    this._capacity = capacity;
	    this._length = 0;
	    this._front = 0;
	}
	
	Queue.prototype._willBeOverCapacity = function (size) {
	    return this._capacity < size;
	};
	
	Queue.prototype._pushOne = function (arg) {
	    var length = this.length();
	    this._checkCapacity(length + 1);
	    var i = this._front + length & this._capacity - 1;
	    this[i] = arg;
	    this._length = length + 1;
	};
	
	Queue.prototype.push = function (fn, receiver, arg) {
	    var length = this.length() + 3;
	    if (this._willBeOverCapacity(length)) {
	        this._pushOne(fn);
	        this._pushOne(receiver);
	        this._pushOne(arg);
	        return;
	    }
	    var j = this._front + length - 3;
	    this._checkCapacity(length);
	    var wrapMask = this._capacity - 1;
	    this[j + 0 & wrapMask] = fn;
	    this[j + 1 & wrapMask] = receiver;
	    this[j + 2 & wrapMask] = arg;
	    this._length = length;
	};
	
	Queue.prototype.shift = function () {
	    var front = this._front,
	        ret = this[front];
	
	    this[front] = undefined;
	    this._front = front + 1 & this._capacity - 1;
	    this._length--;
	    return ret;
	};
	
	Queue.prototype.length = function () {
	    return this._length;
	};
	
	Queue.prototype._checkCapacity = function (size) {
	    if (this._capacity < size) {
	        this._resizeTo(this._capacity << 1);
	    }
	};
	
	Queue.prototype._resizeTo = function (capacity) {
	    var oldCapacity = this._capacity;
	    this._capacity = capacity;
	    var front = this._front;
	    var length = this._length;
	    var moveItemsCount = front + length & oldCapacity - 1;
	    arrayMove(this, 0, this, oldCapacity, moveItemsCount);
	};
	
	module.exports = Queue;

/***/ },
/* 607 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var es5 = __webpack_require__(601);
	var Objectfreeze = es5.freeze;
	var util = __webpack_require__(600);
	var inherits = util.inherits;
	var notEnumerableProp = util.notEnumerableProp;
	
	function subError(nameProperty, defaultMessage) {
	    function SubError(message) {
	        if (!(this instanceof SubError)) return new SubError(message);
	        notEnumerableProp(this, "message", typeof message === "string" ? message : defaultMessage);
	        notEnumerableProp(this, "name", nameProperty);
	        if (Error.captureStackTrace) {
	            Error.captureStackTrace(this, this.constructor);
	        } else {
	            Error.call(this);
	        }
	    }
	    inherits(SubError, Error);
	    return SubError;
	}
	
	var _TypeError, _RangeError;
	var Warning = subError("Warning", "warning");
	var CancellationError = subError("CancellationError", "cancellation error");
	var TimeoutError = subError("TimeoutError", "timeout error");
	var AggregateError = subError("AggregateError", "aggregate error");
	try {
	    _TypeError = TypeError;
	    _RangeError = RangeError;
	} catch (e) {
	    _TypeError = subError("TypeError", "type error");
	    _RangeError = subError("RangeError", "range error");
	}
	
	var methods = ("join pop push shift unshift slice filter forEach some " + "every map indexOf lastIndexOf reduce reduceRight sort reverse").split(" ");
	
	for (var i = 0; i < methods.length; ++i) {
	    if (typeof Array.prototype[methods[i]] === "function") {
	        AggregateError.prototype[methods[i]] = Array.prototype[methods[i]];
	    }
	}
	
	es5.defineProperty(AggregateError.prototype, "length", {
	    value: 0,
	    configurable: false,
	    writable: true,
	    enumerable: true
	});
	AggregateError.prototype["isOperational"] = true;
	var level = 0;
	AggregateError.prototype.toString = function () {
	    var indent = Array(level * 4 + 1).join(" ");
	    var ret = "\n" + indent + "AggregateError of:" + "\n";
	    level++;
	    indent = Array(level * 4 + 1).join(" ");
	    for (var i = 0; i < this.length; ++i) {
	        var str = this[i] === this ? "[Circular AggregateError]" : this[i] + "";
	        var lines = str.split("\n");
	        for (var j = 0; j < lines.length; ++j) {
	            lines[j] = indent + lines[j];
	        }
	        str = lines.join("\n");
	        ret += str + "\n";
	    }
	    level--;
	    return ret;
	};
	
	function OperationalError(message) {
	    if (!(this instanceof OperationalError)) return new OperationalError(message);
	    notEnumerableProp(this, "name", "OperationalError");
	    notEnumerableProp(this, "message", message);
	    this.cause = message;
	    this["isOperational"] = true;
	
	    if (message instanceof Error) {
	        notEnumerableProp(this, "message", message.message);
	        notEnumerableProp(this, "stack", message.stack);
	    } else if (Error.captureStackTrace) {
	        Error.captureStackTrace(this, this.constructor);
	    }
	}
	inherits(OperationalError, Error);
	
	var errorTypes = Error["__BluebirdErrorTypes__"];
	if (!errorTypes) {
	    errorTypes = Objectfreeze({
	        CancellationError: CancellationError,
	        TimeoutError: TimeoutError,
	        OperationalError: OperationalError,
	        RejectionError: OperationalError,
	        AggregateError: AggregateError
	    });
	    es5.defineProperty(Error, "__BluebirdErrorTypes__", {
	        value: errorTypes,
	        writable: false,
	        enumerable: false,
	        configurable: false
	    });
	}
	
	module.exports = {
	    Error: Error,
	    TypeError: _TypeError,
	    RangeError: _RangeError,
	    CancellationError: errorTypes.CancellationError,
	    OperationalError: errorTypes.OperationalError,
	    TimeoutError: errorTypes.TimeoutError,
	    AggregateError: errorTypes.AggregateError,
	    Warning: Warning
	};

/***/ },
/* 608 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = function (Promise, INTERNAL) {
	    var util = __webpack_require__(600);
	    var errorObj = util.errorObj;
	    var isObject = util.isObject;
	
	    function tryConvertToPromise(obj, context) {
	        if (isObject(obj)) {
	            if (obj instanceof Promise) return obj;
	            var then = getThen(obj);
	            if (then === errorObj) {
	                if (context) context._pushContext();
	                var ret = Promise.reject(then.e);
	                if (context) context._popContext();
	                return ret;
	            } else if (typeof then === "function") {
	                if (isAnyBluebirdPromise(obj)) {
	                    var ret = new Promise(INTERNAL);
	                    obj._then(ret._fulfill, ret._reject, undefined, ret, null);
	                    return ret;
	                }
	                return doThenable(obj, then, context);
	            }
	        }
	        return obj;
	    }
	
	    function doGetThen(obj) {
	        return obj.then;
	    }
	
	    function getThen(obj) {
	        try {
	            return doGetThen(obj);
	        } catch (e) {
	            errorObj.e = e;
	            return errorObj;
	        }
	    }
	
	    var hasProp = {}.hasOwnProperty;
	    function isAnyBluebirdPromise(obj) {
	        try {
	            return hasProp.call(obj, "_promise0");
	        } catch (e) {
	            return false;
	        }
	    }
	
	    function doThenable(x, then, context) {
	        var promise = new Promise(INTERNAL);
	        var ret = promise;
	        if (context) context._pushContext();
	        promise._captureStackTrace();
	        if (context) context._popContext();
	        var synchronous = true;
	        var result = util.tryCatch(then).call(x, resolve, reject);
	        synchronous = false;
	
	        if (promise && result === errorObj) {
	            promise._rejectCallback(result.e, true, true);
	            promise = null;
	        }
	
	        function resolve(value) {
	            if (!promise) return;
	            promise._resolveCallback(value);
	            promise = null;
	        }
	
	        function reject(reason) {
	            if (!promise) return;
	            promise._rejectCallback(reason, synchronous, true);
	            promise = null;
	        }
	        return ret;
	    }
	
	    return tryConvertToPromise;
	};

/***/ },
/* 609 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = function (Promise, INTERNAL, tryConvertToPromise, apiRejection, Proxyable) {
	    var util = __webpack_require__(600);
	    var isArray = util.isArray;
	
	    function toResolutionValue(val) {
	        switch (val) {
	            case -2:
	                return [];
	            case -3:
	                return {};
	            case -6:
	                return new Map();
	        }
	    }
	
	    function PromiseArray(values) {
	        var promise = this._promise = new Promise(INTERNAL);
	        if (values instanceof Promise) {
	            promise._propagateFrom(values, 3);
	        }
	        promise._setOnCancel(this);
	        this._values = values;
	        this._length = 0;
	        this._totalResolved = 0;
	        this._init(undefined, -2);
	    }
	    util.inherits(PromiseArray, Proxyable);
	
	    PromiseArray.prototype.length = function () {
	        return this._length;
	    };
	
	    PromiseArray.prototype.promise = function () {
	        return this._promise;
	    };
	
	    PromiseArray.prototype._init = function init(_, resolveValueIfEmpty) {
	        var values = tryConvertToPromise(this._values, this._promise);
	        if (values instanceof Promise) {
	            values = values._target();
	            var bitField = values._bitField;
	            ;
	            this._values = values;
	
	            if ((bitField & 50397184) === 0) {
	                this._promise._setAsyncGuaranteed();
	                return values._then(init, this._reject, undefined, this, resolveValueIfEmpty);
	            } else if ((bitField & 33554432) !== 0) {
	                values = values._value();
	            } else if ((bitField & 16777216) !== 0) {
	                return this._reject(values._reason());
	            } else {
	                return this._cancel();
	            }
	        }
	        values = util.asArray(values);
	        if (values === null) {
	            var err = apiRejection("expecting an array or an iterable object but got " + util.classString(values)).reason();
	            this._promise._rejectCallback(err, false);
	            return;
	        }
	
	        if (values.length === 0) {
	            if (resolveValueIfEmpty === -5) {
	                this._resolveEmptyArray();
	            } else {
	                this._resolve(toResolutionValue(resolveValueIfEmpty));
	            }
	            return;
	        }
	        this._iterate(values);
	    };
	
	    PromiseArray.prototype._iterate = function (values) {
	        var len = this.getActualLength(values.length);
	        this._length = len;
	        this._values = this.shouldCopyValues() ? new Array(len) : this._values;
	        var result = this._promise;
	        var isResolved = false;
	        var bitField = null;
	        for (var i = 0; i < len; ++i) {
	            var maybePromise = tryConvertToPromise(values[i], result);
	
	            if (maybePromise instanceof Promise) {
	                maybePromise = maybePromise._target();
	                bitField = maybePromise._bitField;
	            } else {
	                bitField = null;
	            }
	
	            if (isResolved) {
	                if (bitField !== null) {
	                    maybePromise.suppressUnhandledRejections();
	                }
	            } else if (bitField !== null) {
	                if ((bitField & 50397184) === 0) {
	                    maybePromise._proxy(this, i);
	                    this._values[i] = maybePromise;
	                } else if ((bitField & 33554432) !== 0) {
	                    isResolved = this._promiseFulfilled(maybePromise._value(), i);
	                } else if ((bitField & 16777216) !== 0) {
	                    isResolved = this._promiseRejected(maybePromise._reason(), i);
	                } else {
	                    isResolved = this._promiseCancelled(i);
	                }
	            } else {
	                isResolved = this._promiseFulfilled(maybePromise, i);
	            }
	        }
	        if (!isResolved) result._setAsyncGuaranteed();
	    };
	
	    PromiseArray.prototype._isResolved = function () {
	        return this._values === null;
	    };
	
	    PromiseArray.prototype._resolve = function (value) {
	        this._values = null;
	        this._promise._fulfill(value);
	    };
	
	    PromiseArray.prototype._cancel = function () {
	        if (this._isResolved() || !this._promise._isCancellable()) return;
	        this._values = null;
	        this._promise._cancel();
	    };
	
	    PromiseArray.prototype._reject = function (reason) {
	        this._values = null;
	        this._promise._rejectCallback(reason, false);
	    };
	
	    PromiseArray.prototype._promiseFulfilled = function (value, index) {
	        this._values[index] = value;
	        var totalResolved = ++this._totalResolved;
	        if (totalResolved >= this._length) {
	            this._resolve(this._values);
	            return true;
	        }
	        return false;
	    };
	
	    PromiseArray.prototype._promiseCancelled = function () {
	        this._cancel();
	        return true;
	    };
	
	    PromiseArray.prototype._promiseRejected = function (reason) {
	        this._totalResolved++;
	        this._reject(reason);
	        return true;
	    };
	
	    PromiseArray.prototype._resultCancelled = function () {
	        if (this._isResolved()) return;
	        var values = this._values;
	        this._cancel();
	        if (values instanceof Promise) {
	            values.cancel();
	        } else {
	            for (var i = 0; i < values.length; ++i) {
	                if (values[i] instanceof Promise) {
	                    values[i].cancel();
	                }
	            }
	        }
	    };
	
	    PromiseArray.prototype.shouldCopyValues = function () {
	        return true;
	    };
	
	    PromiseArray.prototype.getActualLength = function (len) {
	        return len;
	    };
	
	    return PromiseArray;
	};

/***/ },
/* 610 */
/***/ function(module, exports) {

	"use strict";
	
	module.exports = function (Promise) {
	    var longStackTraces = false;
	    var contextStack = [];
	
	    Promise.prototype._promiseCreated = function () {};
	    Promise.prototype._pushContext = function () {};
	    Promise.prototype._popContext = function () {
	        return null;
	    };
	    Promise._peekContext = Promise.prototype._peekContext = function () {};
	
	    function Context() {
	        this._trace = new Context.CapturedTrace(peekContext());
	    }
	    Context.prototype._pushContext = function () {
	        if (this._trace !== undefined) {
	            this._trace._promiseCreated = null;
	            contextStack.push(this._trace);
	        }
	    };
	
	    Context.prototype._popContext = function () {
	        if (this._trace !== undefined) {
	            var trace = contextStack.pop();
	            var ret = trace._promiseCreated;
	            trace._promiseCreated = null;
	            return ret;
	        }
	        return null;
	    };
	
	    function createContext() {
	        if (longStackTraces) return new Context();
	    }
	
	    function peekContext() {
	        var lastIndex = contextStack.length - 1;
	        if (lastIndex >= 0) {
	            return contextStack[lastIndex];
	        }
	        return undefined;
	    }
	    Context.CapturedTrace = null;
	    Context.create = createContext;
	    Context.deactivateLongStackTraces = function () {};
	    Context.activateLongStackTraces = function () {
	        var Promise_pushContext = Promise.prototype._pushContext;
	        var Promise_popContext = Promise.prototype._popContext;
	        var Promise_PeekContext = Promise._peekContext;
	        var Promise_peekContext = Promise.prototype._peekContext;
	        var Promise_promiseCreated = Promise.prototype._promiseCreated;
	        Context.deactivateLongStackTraces = function () {
	            Promise.prototype._pushContext = Promise_pushContext;
	            Promise.prototype._popContext = Promise_popContext;
	            Promise._peekContext = Promise_PeekContext;
	            Promise.prototype._peekContext = Promise_peekContext;
	            Promise.prototype._promiseCreated = Promise_promiseCreated;
	            longStackTraces = false;
	        };
	        longStackTraces = true;
	        Promise.prototype._pushContext = Context.prototype._pushContext;
	        Promise.prototype._popContext = Context.prototype._popContext;
	        Promise._peekContext = Promise.prototype._peekContext = peekContext;
	        Promise.prototype._promiseCreated = function () {
	            var ctx = this._peekContext();
	            if (ctx && ctx._promiseCreated == null) ctx._promiseCreated = this;
	        };
	    };
	    return Context;
	};

/***/ },
/* 611 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	module.exports = function (Promise, Context) {
	    var getDomain = Promise._getDomain;
	    var async = Promise._async;
	    var Warning = __webpack_require__(607).Warning;
	    var util = __webpack_require__(600);
	    var canAttachTrace = util.canAttachTrace;
	    var unhandledRejectionHandled;
	    var possiblyUnhandledRejection;
	    var bluebirdFramePattern = /[\\\/]bluebird[\\\/]js[\\\/](release|debug|instrumented)/;
	    var nodeFramePattern = /\((?:timers\.js):\d+:\d+\)/;
	    var parseLinePattern = /[\/<\(](.+?):(\d+):(\d+)\)?\s*$/;
	    var stackFramePattern = null;
	    var formatStack = null;
	    var indentStackFrames = false;
	    var printWarning;
	    var debugging = !!(util.env("BLUEBIRD_DEBUG") != 0 && (false || util.env("BLUEBIRD_DEBUG") || util.env("NODE_ENV") === "development"));
	
	    var warnings = !!(util.env("BLUEBIRD_WARNINGS") != 0 && (debugging || util.env("BLUEBIRD_WARNINGS")));
	
	    var longStackTraces = !!(util.env("BLUEBIRD_LONG_STACK_TRACES") != 0 && (debugging || util.env("BLUEBIRD_LONG_STACK_TRACES")));
	
	    var wForgottenReturn = util.env("BLUEBIRD_W_FORGOTTEN_RETURN") != 0 && (warnings || !!util.env("BLUEBIRD_W_FORGOTTEN_RETURN"));
	
	    Promise.prototype.suppressUnhandledRejections = function () {
	        var target = this._target();
	        target._bitField = target._bitField & ~1048576 | 524288;
	    };
	
	    Promise.prototype._ensurePossibleRejectionHandled = function () {
	        if ((this._bitField & 524288) !== 0) return;
	        this._setRejectionIsUnhandled();
	        var self = this;
	        setTimeout(function () {
	            self._notifyUnhandledRejection();
	        }, 1);
	    };
	
	    Promise.prototype._notifyUnhandledRejectionIsHandled = function () {
	        fireRejectionEvent("rejectionHandled", unhandledRejectionHandled, undefined, this);
	    };
	
	    Promise.prototype._setReturnedNonUndefined = function () {
	        this._bitField = this._bitField | 268435456;
	    };
	
	    Promise.prototype._returnedNonUndefined = function () {
	        return (this._bitField & 268435456) !== 0;
	    };
	
	    Promise.prototype._notifyUnhandledRejection = function () {
	        if (this._isRejectionUnhandled()) {
	            var reason = this._settledValue();
	            this._setUnhandledRejectionIsNotified();
	            fireRejectionEvent("unhandledRejection", possiblyUnhandledRejection, reason, this);
	        }
	    };
	
	    Promise.prototype._setUnhandledRejectionIsNotified = function () {
	        this._bitField = this._bitField | 262144;
	    };
	
	    Promise.prototype._unsetUnhandledRejectionIsNotified = function () {
	        this._bitField = this._bitField & ~262144;
	    };
	
	    Promise.prototype._isUnhandledRejectionNotified = function () {
	        return (this._bitField & 262144) > 0;
	    };
	
	    Promise.prototype._setRejectionIsUnhandled = function () {
	        this._bitField = this._bitField | 1048576;
	    };
	
	    Promise.prototype._unsetRejectionIsUnhandled = function () {
	        this._bitField = this._bitField & ~1048576;
	        if (this._isUnhandledRejectionNotified()) {
	            this._unsetUnhandledRejectionIsNotified();
	            this._notifyUnhandledRejectionIsHandled();
	        }
	    };
	
	    Promise.prototype._isRejectionUnhandled = function () {
	        return (this._bitField & 1048576) > 0;
	    };
	
	    Promise.prototype._warn = function (message, shouldUseOwnTrace, promise) {
	        return warn(message, shouldUseOwnTrace, promise || this);
	    };
	
	    Promise.onPossiblyUnhandledRejection = function (fn) {
	        var domain = getDomain();
	        possiblyUnhandledRejection = typeof fn === "function" ? domain === null ? fn : util.domainBind(domain, fn) : undefined;
	    };
	
	    Promise.onUnhandledRejectionHandled = function (fn) {
	        var domain = getDomain();
	        unhandledRejectionHandled = typeof fn === "function" ? domain === null ? fn : util.domainBind(domain, fn) : undefined;
	    };
	
	    var disableLongStackTraces = function disableLongStackTraces() {};
	    Promise.longStackTraces = function () {
	        if (async.haveItemsQueued() && !config.longStackTraces) {
	            throw new Error("cannot enable long stack traces after promises have been created\n\n    See http://goo.gl/MqrFmX\n");
	        }
	        if (!config.longStackTraces && longStackTracesIsSupported()) {
	            var Promise_captureStackTrace = Promise.prototype._captureStackTrace;
	            var Promise_attachExtraTrace = Promise.prototype._attachExtraTrace;
	            config.longStackTraces = true;
	            disableLongStackTraces = function disableLongStackTraces() {
	                if (async.haveItemsQueued() && !config.longStackTraces) {
	                    throw new Error("cannot enable long stack traces after promises have been created\n\n    See http://goo.gl/MqrFmX\n");
	                }
	                Promise.prototype._captureStackTrace = Promise_captureStackTrace;
	                Promise.prototype._attachExtraTrace = Promise_attachExtraTrace;
	                Context.deactivateLongStackTraces();
	                async.enableTrampoline();
	                config.longStackTraces = false;
	            };
	            Promise.prototype._captureStackTrace = longStackTracesCaptureStackTrace;
	            Promise.prototype._attachExtraTrace = longStackTracesAttachExtraTrace;
	            Context.activateLongStackTraces();
	            async.disableTrampolineIfNecessary();
	        }
	    };
	
	    Promise.hasLongStackTraces = function () {
	        return config.longStackTraces && longStackTracesIsSupported();
	    };
	
	    var fireDomEvent = function () {
	        try {
	            if (typeof CustomEvent === "function") {
	                var event = new CustomEvent("CustomEvent");
	                util.global.dispatchEvent(event);
	                return function (name, event) {
	                    var domEvent = new CustomEvent(name.toLowerCase(), {
	                        detail: event,
	                        cancelable: true
	                    });
	                    return !util.global.dispatchEvent(domEvent);
	                };
	            } else if (typeof Event === "function") {
	                var event = new Event("CustomEvent");
	                util.global.dispatchEvent(event);
	                return function (name, event) {
	                    var domEvent = new Event(name.toLowerCase(), {
	                        cancelable: true
	                    });
	                    domEvent.detail = event;
	                    return !util.global.dispatchEvent(domEvent);
	                };
	            } else {
	                var event = document.createEvent("CustomEvent");
	                event.initCustomEvent("testingtheevent", false, true, {});
	                util.global.dispatchEvent(event);
	                return function (name, event) {
	                    var domEvent = document.createEvent("CustomEvent");
	                    domEvent.initCustomEvent(name.toLowerCase(), false, true, event);
	                    return !util.global.dispatchEvent(domEvent);
	                };
	            }
	        } catch (e) {}
	        return function () {
	            return false;
	        };
	    }();
	
	    var fireGlobalEvent = function () {
	        if (util.isNode) {
	            return function () {
	                return process.emit.apply(process, arguments);
	            };
	        } else {
	            if (!util.global) {
	                return function () {
	                    return false;
	                };
	            }
	            return function (name) {
	                var methodName = "on" + name.toLowerCase();
	                var method = util.global[methodName];
	                if (!method) return false;
	                method.apply(util.global, [].slice.call(arguments, 1));
	                return true;
	            };
	        }
	    }();
	
	    function generatePromiseLifecycleEventObject(name, promise) {
	        return { promise: promise };
	    }
	
	    var eventToObjectGenerator = {
	        promiseCreated: generatePromiseLifecycleEventObject,
	        promiseFulfilled: generatePromiseLifecycleEventObject,
	        promiseRejected: generatePromiseLifecycleEventObject,
	        promiseResolved: generatePromiseLifecycleEventObject,
	        promiseCancelled: generatePromiseLifecycleEventObject,
	        promiseChained: function promiseChained(name, promise, child) {
	            return { promise: promise, child: child };
	        },
	        warning: function warning(name, _warning) {
	            return { warning: _warning };
	        },
	        unhandledRejection: function unhandledRejection(name, reason, promise) {
	            return { reason: reason, promise: promise };
	        },
	        rejectionHandled: generatePromiseLifecycleEventObject
	    };
	
	    var activeFireEvent = function activeFireEvent(name) {
	        var globalEventFired = false;
	        try {
	            globalEventFired = fireGlobalEvent.apply(null, arguments);
	        } catch (e) {
	            async.throwLater(e);
	            globalEventFired = true;
	        }
	
	        var domEventFired = false;
	        try {
	            domEventFired = fireDomEvent(name, eventToObjectGenerator[name].apply(null, arguments));
	        } catch (e) {
	            async.throwLater(e);
	            domEventFired = true;
	        }
	
	        return domEventFired || globalEventFired;
	    };
	
	    Promise.config = function (opts) {
	        opts = Object(opts);
	        if ("longStackTraces" in opts) {
	            if (opts.longStackTraces) {
	                Promise.longStackTraces();
	            } else if (!opts.longStackTraces && Promise.hasLongStackTraces()) {
	                disableLongStackTraces();
	            }
	        }
	        if ("warnings" in opts) {
	            var warningsOption = opts.warnings;
	            config.warnings = !!warningsOption;
	            wForgottenReturn = config.warnings;
	
	            if (util.isObject(warningsOption)) {
	                if ("wForgottenReturn" in warningsOption) {
	                    wForgottenReturn = !!warningsOption.wForgottenReturn;
	                }
	            }
	        }
	        if ("cancellation" in opts && opts.cancellation && !config.cancellation) {
	            if (async.haveItemsQueued()) {
	                throw new Error("cannot enable cancellation after promises are in use");
	            }
	            Promise.prototype._clearCancellationData = cancellationClearCancellationData;
	            Promise.prototype._propagateFrom = cancellationPropagateFrom;
	            Promise.prototype._onCancel = cancellationOnCancel;
	            Promise.prototype._setOnCancel = cancellationSetOnCancel;
	            Promise.prototype._attachCancellationCallback = cancellationAttachCancellationCallback;
	            Promise.prototype._execute = cancellationExecute;
	            _propagateFromFunction = cancellationPropagateFrom;
	            config.cancellation = true;
	        }
	        if ("monitoring" in opts) {
	            if (opts.monitoring && !config.monitoring) {
	                config.monitoring = true;
	                Promise.prototype._fireEvent = activeFireEvent;
	            } else if (!opts.monitoring && config.monitoring) {
	                config.monitoring = false;
	                Promise.prototype._fireEvent = defaultFireEvent;
	            }
	        }
	        return Promise;
	    };
	
	    function defaultFireEvent() {
	        return false;
	    }
	
	    Promise.prototype._fireEvent = defaultFireEvent;
	    Promise.prototype._execute = function (executor, resolve, reject) {
	        try {
	            executor(resolve, reject);
	        } catch (e) {
	            return e;
	        }
	    };
	    Promise.prototype._onCancel = function () {};
	    Promise.prototype._setOnCancel = function (handler) {
	        ;
	    };
	    Promise.prototype._attachCancellationCallback = function (onCancel) {
	        ;
	    };
	    Promise.prototype._captureStackTrace = function () {};
	    Promise.prototype._attachExtraTrace = function () {};
	    Promise.prototype._clearCancellationData = function () {};
	    Promise.prototype._propagateFrom = function (parent, flags) {
	        ;
	        ;
	    };
	
	    function cancellationExecute(executor, resolve, reject) {
	        var promise = this;
	        try {
	            executor(resolve, reject, function (onCancel) {
	                if (typeof onCancel !== "function") {
	                    throw new TypeError("onCancel must be a function, got: " + util.toString(onCancel));
	                }
	                promise._attachCancellationCallback(onCancel);
	            });
	        } catch (e) {
	            return e;
	        }
	    }
	
	    function cancellationAttachCancellationCallback(onCancel) {
	        if (!this._isCancellable()) return this;
	
	        var previousOnCancel = this._onCancel();
	        if (previousOnCancel !== undefined) {
	            if (util.isArray(previousOnCancel)) {
	                previousOnCancel.push(onCancel);
	            } else {
	                this._setOnCancel([previousOnCancel, onCancel]);
	            }
	        } else {
	            this._setOnCancel(onCancel);
	        }
	    }
	
	    function cancellationOnCancel() {
	        return this._onCancelField;
	    }
	
	    function cancellationSetOnCancel(onCancel) {
	        this._onCancelField = onCancel;
	    }
	
	    function cancellationClearCancellationData() {
	        this._cancellationParent = undefined;
	        this._onCancelField = undefined;
	    }
	
	    function cancellationPropagateFrom(parent, flags) {
	        if ((flags & 1) !== 0) {
	            this._cancellationParent = parent;
	            var branchesRemainingToCancel = parent._branchesRemainingToCancel;
	            if (branchesRemainingToCancel === undefined) {
	                branchesRemainingToCancel = 0;
	            }
	            parent._branchesRemainingToCancel = branchesRemainingToCancel + 1;
	        }
	        if ((flags & 2) !== 0 && parent._isBound()) {
	            this._setBoundTo(parent._boundTo);
	        }
	    }
	
	    function bindingPropagateFrom(parent, flags) {
	        if ((flags & 2) !== 0 && parent._isBound()) {
	            this._setBoundTo(parent._boundTo);
	        }
	    }
	    var _propagateFromFunction = bindingPropagateFrom;
	
	    function _boundValueFunction() {
	        var ret = this._boundTo;
	        if (ret !== undefined) {
	            if (ret instanceof Promise) {
	                if (ret.isFulfilled()) {
	                    return ret.value();
	                } else {
	                    return undefined;
	                }
	            }
	        }
	        return ret;
	    }
	
	    function longStackTracesCaptureStackTrace() {
	        this._trace = new CapturedTrace(this._peekContext());
	    }
	
	    function longStackTracesAttachExtraTrace(error, ignoreSelf) {
	        if (canAttachTrace(error)) {
	            var trace = this._trace;
	            if (trace !== undefined) {
	                if (ignoreSelf) trace = trace._parent;
	            }
	            if (trace !== undefined) {
	                trace.attachExtraTrace(error);
	            } else if (!error.__stackCleaned__) {
	                var parsed = parseStackAndMessage(error);
	                util.notEnumerableProp(error, "stack", parsed.message + "\n" + parsed.stack.join("\n"));
	                util.notEnumerableProp(error, "__stackCleaned__", true);
	            }
	        }
	    }
	
	    function checkForgottenReturns(returnValue, promiseCreated, name, promise, parent) {
	        if (returnValue === undefined && promiseCreated !== null && wForgottenReturn) {
	            if (parent !== undefined && parent._returnedNonUndefined()) return;
	            if ((promise._bitField & 65535) === 0) return;
	
	            if (name) name = name + " ";
	            var handlerLine = "";
	            var creatorLine = "";
	            if (promiseCreated._trace) {
	                var traceLines = promiseCreated._trace.stack.split("\n");
	                var stack = cleanStack(traceLines);
	                for (var i = stack.length - 1; i >= 0; --i) {
	                    var line = stack[i];
	                    if (!nodeFramePattern.test(line)) {
	                        var lineMatches = line.match(parseLinePattern);
	                        if (lineMatches) {
	                            handlerLine = "at " + lineMatches[1] + ":" + lineMatches[2] + ":" + lineMatches[3] + " ";
	                        }
	                        break;
	                    }
	                }
	
	                if (stack.length > 0) {
	                    var firstUserLine = stack[0];
	                    for (var i = 0; i < traceLines.length; ++i) {
	
	                        if (traceLines[i] === firstUserLine) {
	                            if (i > 0) {
	                                creatorLine = "\n" + traceLines[i - 1];
	                            }
	                            break;
	                        }
	                    }
	                }
	            }
	            var msg = "a promise was created in a " + name + "handler " + handlerLine + "but was not returned from it, " + "see http://goo.gl/rRqMUw" + creatorLine;
	            promise._warn(msg, true, promiseCreated);
	        }
	    }
	
	    function deprecated(name, replacement) {
	        var message = name + " is deprecated and will be removed in a future version.";
	        if (replacement) message += " Use " + replacement + " instead.";
	        return warn(message);
	    }
	
	    function warn(message, shouldUseOwnTrace, promise) {
	        if (!config.warnings) return;
	        var warning = new Warning(message);
	        var ctx;
	        if (shouldUseOwnTrace) {
	            promise._attachExtraTrace(warning);
	        } else if (config.longStackTraces && (ctx = Promise._peekContext())) {
	            ctx.attachExtraTrace(warning);
	        } else {
	            var parsed = parseStackAndMessage(warning);
	            warning.stack = parsed.message + "\n" + parsed.stack.join("\n");
	        }
	
	        if (!activeFireEvent("warning", warning)) {
	            formatAndLogError(warning, "", true);
	        }
	    }
	
	    function reconstructStack(message, stacks) {
	        for (var i = 0; i < stacks.length - 1; ++i) {
	            stacks[i].push("From previous event:");
	            stacks[i] = stacks[i].join("\n");
	        }
	        if (i < stacks.length) {
	            stacks[i] = stacks[i].join("\n");
	        }
	        return message + "\n" + stacks.join("\n");
	    }
	
	    function removeDuplicateOrEmptyJumps(stacks) {
	        for (var i = 0; i < stacks.length; ++i) {
	            if (stacks[i].length === 0 || i + 1 < stacks.length && stacks[i][0] === stacks[i + 1][0]) {
	                stacks.splice(i, 1);
	                i--;
	            }
	        }
	    }
	
	    function removeCommonRoots(stacks) {
	        var current = stacks[0];
	        for (var i = 1; i < stacks.length; ++i) {
	            var prev = stacks[i];
	            var currentLastIndex = current.length - 1;
	            var currentLastLine = current[currentLastIndex];
	            var commonRootMeetPoint = -1;
	
	            for (var j = prev.length - 1; j >= 0; --j) {
	                if (prev[j] === currentLastLine) {
	                    commonRootMeetPoint = j;
	                    break;
	                }
	            }
	
	            for (var j = commonRootMeetPoint; j >= 0; --j) {
	                var line = prev[j];
	                if (current[currentLastIndex] === line) {
	                    current.pop();
	                    currentLastIndex--;
	                } else {
	                    break;
	                }
	            }
	            current = prev;
	        }
	    }
	
	    function cleanStack(stack) {
	        var ret = [];
	        for (var i = 0; i < stack.length; ++i) {
	            var line = stack[i];
	            var isTraceLine = "    (No stack trace)" === line || stackFramePattern.test(line);
	            var isInternalFrame = isTraceLine && shouldIgnore(line);
	            if (isTraceLine && !isInternalFrame) {
	                if (indentStackFrames && line.charAt(0) !== " ") {
	                    line = "    " + line;
	                }
	                ret.push(line);
	            }
	        }
	        return ret;
	    }
	
	    function stackFramesAsArray(error) {
	        var stack = error.stack.replace(/\s+$/g, "").split("\n");
	        for (var i = 0; i < stack.length; ++i) {
	            var line = stack[i];
	            if ("    (No stack trace)" === line || stackFramePattern.test(line)) {
	                break;
	            }
	        }
	        if (i > 0 && error.name != "SyntaxError") {
	            stack = stack.slice(i);
	        }
	        return stack;
	    }
	
	    function parseStackAndMessage(error) {
	        var stack = error.stack;
	        var message = error.toString();
	        stack = typeof stack === "string" && stack.length > 0 ? stackFramesAsArray(error) : ["    (No stack trace)"];
	        return {
	            message: message,
	            stack: error.name == "SyntaxError" ? stack : cleanStack(stack)
	        };
	    }
	
	    function formatAndLogError(error, title, isSoft) {
	        if (typeof console !== "undefined") {
	            var message;
	            if (util.isObject(error)) {
	                var stack = error.stack;
	                message = title + formatStack(stack, error);
	            } else {
	                message = title + String(error);
	            }
	            if (typeof printWarning === "function") {
	                printWarning(message, isSoft);
	            } else if (typeof console.log === "function" || _typeof(console.log) === "object") {
	                console.log(message);
	            }
	        }
	    }
	
	    function fireRejectionEvent(name, localHandler, reason, promise) {
	        var localEventFired = false;
	        try {
	            if (typeof localHandler === "function") {
	                localEventFired = true;
	                if (name === "rejectionHandled") {
	                    localHandler(promise);
	                } else {
	                    localHandler(reason, promise);
	                }
	            }
	        } catch (e) {
	            async.throwLater(e);
	        }
	
	        if (name === "unhandledRejection") {
	            if (!activeFireEvent(name, reason, promise) && !localEventFired) {
	                formatAndLogError(reason, "Unhandled rejection ");
	            }
	        } else {
	            activeFireEvent(name, promise);
	        }
	    }
	
	    function formatNonError(obj) {
	        var str;
	        if (typeof obj === "function") {
	            str = "[function " + (obj.name || "anonymous") + "]";
	        } else {
	            str = obj && typeof obj.toString === "function" ? obj.toString() : util.toString(obj);
	            var ruselessToString = /\[object [a-zA-Z0-9$_]+\]/;
	            if (ruselessToString.test(str)) {
	                try {
	                    var newStr = JSON.stringify(obj);
	                    str = newStr;
	                } catch (e) {}
	            }
	            if (str.length === 0) {
	                str = "(empty array)";
	            }
	        }
	        return "(<" + snip(str) + ">, no stack trace)";
	    }
	
	    function snip(str) {
	        var maxChars = 41;
	        if (str.length < maxChars) {
	            return str;
	        }
	        return str.substr(0, maxChars - 3) + "...";
	    }
	
	    function longStackTracesIsSupported() {
	        return typeof captureStackTrace === "function";
	    }
	
	    var shouldIgnore = function shouldIgnore() {
	        return false;
	    };
	    var parseLineInfoRegex = /[\/<\(]([^:\/]+):(\d+):(?:\d+)\)?\s*$/;
	    function parseLineInfo(line) {
	        var matches = line.match(parseLineInfoRegex);
	        if (matches) {
	            return {
	                fileName: matches[1],
	                line: parseInt(matches[2], 10)
	            };
	        }
	    }
	
	    function setBounds(firstLineError, lastLineError) {
	        if (!longStackTracesIsSupported()) return;
	        var firstStackLines = firstLineError.stack.split("\n");
	        var lastStackLines = lastLineError.stack.split("\n");
	        var firstIndex = -1;
	        var lastIndex = -1;
	        var firstFileName;
	        var lastFileName;
	        for (var i = 0; i < firstStackLines.length; ++i) {
	            var result = parseLineInfo(firstStackLines[i]);
	            if (result) {
	                firstFileName = result.fileName;
	                firstIndex = result.line;
	                break;
	            }
	        }
	        for (var i = 0; i < lastStackLines.length; ++i) {
	            var result = parseLineInfo(lastStackLines[i]);
	            if (result) {
	                lastFileName = result.fileName;
	                lastIndex = result.line;
	                break;
	            }
	        }
	        if (firstIndex < 0 || lastIndex < 0 || !firstFileName || !lastFileName || firstFileName !== lastFileName || firstIndex >= lastIndex) {
	            return;
	        }
	
	        shouldIgnore = function shouldIgnore(line) {
	            if (bluebirdFramePattern.test(line)) return true;
	            var info = parseLineInfo(line);
	            if (info) {
	                if (info.fileName === firstFileName && firstIndex <= info.line && info.line <= lastIndex) {
	                    return true;
	                }
	            }
	            return false;
	        };
	    }
	
	    function CapturedTrace(parent) {
	        this._parent = parent;
	        this._promisesCreated = 0;
	        var length = this._length = 1 + (parent === undefined ? 0 : parent._length);
	        captureStackTrace(this, CapturedTrace);
	        if (length > 32) this.uncycle();
	    }
	    util.inherits(CapturedTrace, Error);
	    Context.CapturedTrace = CapturedTrace;
	
	    CapturedTrace.prototype.uncycle = function () {
	        var length = this._length;
	        if (length < 2) return;
	        var nodes = [];
	        var stackToIndex = {};
	
	        for (var i = 0, node = this; node !== undefined; ++i) {
	            nodes.push(node);
	            node = node._parent;
	        }
	        length = this._length = i;
	        for (var i = length - 1; i >= 0; --i) {
	            var stack = nodes[i].stack;
	            if (stackToIndex[stack] === undefined) {
	                stackToIndex[stack] = i;
	            }
	        }
	        for (var i = 0; i < length; ++i) {
	            var currentStack = nodes[i].stack;
	            var index = stackToIndex[currentStack];
	            if (index !== undefined && index !== i) {
	                if (index > 0) {
	                    nodes[index - 1]._parent = undefined;
	                    nodes[index - 1]._length = 1;
	                }
	                nodes[i]._parent = undefined;
	                nodes[i]._length = 1;
	                var cycleEdgeNode = i > 0 ? nodes[i - 1] : this;
	
	                if (index < length - 1) {
	                    cycleEdgeNode._parent = nodes[index + 1];
	                    cycleEdgeNode._parent.uncycle();
	                    cycleEdgeNode._length = cycleEdgeNode._parent._length + 1;
	                } else {
	                    cycleEdgeNode._parent = undefined;
	                    cycleEdgeNode._length = 1;
	                }
	                var currentChildLength = cycleEdgeNode._length + 1;
	                for (var j = i - 2; j >= 0; --j) {
	                    nodes[j]._length = currentChildLength;
	                    currentChildLength++;
	                }
	                return;
	            }
	        }
	    };
	
	    CapturedTrace.prototype.attachExtraTrace = function (error) {
	        if (error.__stackCleaned__) return;
	        this.uncycle();
	        var parsed = parseStackAndMessage(error);
	        var message = parsed.message;
	        var stacks = [parsed.stack];
	
	        var trace = this;
	        while (trace !== undefined) {
	            stacks.push(cleanStack(trace.stack.split("\n")));
	            trace = trace._parent;
	        }
	        removeCommonRoots(stacks);
	        removeDuplicateOrEmptyJumps(stacks);
	        util.notEnumerableProp(error, "stack", reconstructStack(message, stacks));
	        util.notEnumerableProp(error, "__stackCleaned__", true);
	    };
	
	    var captureStackTrace = function stackDetection() {
	        var v8stackFramePattern = /^\s*at\s*/;
	        var v8stackFormatter = function v8stackFormatter(stack, error) {
	            if (typeof stack === "string") return stack;
	
	            if (error.name !== undefined && error.message !== undefined) {
	                return error.toString();
	            }
	            return formatNonError(error);
	        };
	
	        if (typeof Error.stackTraceLimit === "number" && typeof Error.captureStackTrace === "function") {
	            Error.stackTraceLimit += 6;
	            stackFramePattern = v8stackFramePattern;
	            formatStack = v8stackFormatter;
	            var captureStackTrace = Error.captureStackTrace;
	
	            shouldIgnore = function shouldIgnore(line) {
	                return bluebirdFramePattern.test(line);
	            };
	            return function (receiver, ignoreUntil) {
	                Error.stackTraceLimit += 6;
	                captureStackTrace(receiver, ignoreUntil);
	                Error.stackTraceLimit -= 6;
	            };
	        }
	        var err = new Error();
	
	        if (typeof err.stack === "string" && err.stack.split("\n")[0].indexOf("stackDetection@") >= 0) {
	            stackFramePattern = /@/;
	            formatStack = v8stackFormatter;
	            indentStackFrames = true;
	            return function captureStackTrace(o) {
	                o.stack = new Error().stack;
	            };
	        }
	
	        var hasStackAfterThrow;
	        try {
	            throw new Error();
	        } catch (e) {
	            hasStackAfterThrow = "stack" in e;
	        }
	        if (!("stack" in err) && hasStackAfterThrow && typeof Error.stackTraceLimit === "number") {
	            stackFramePattern = v8stackFramePattern;
	            formatStack = v8stackFormatter;
	            return function captureStackTrace(o) {
	                Error.stackTraceLimit += 6;
	                try {
	                    throw new Error();
	                } catch (e) {
	                    o.stack = e.stack;
	                }
	                Error.stackTraceLimit -= 6;
	            };
	        }
	
	        formatStack = function formatStack(stack, error) {
	            if (typeof stack === "string") return stack;
	
	            if (((typeof error === "undefined" ? "undefined" : _typeof(error)) === "object" || typeof error === "function") && error.name !== undefined && error.message !== undefined) {
	                return error.toString();
	            }
	            return formatNonError(error);
	        };
	
	        return null;
	    }([]);
	
	    if (typeof console !== "undefined" && typeof console.warn !== "undefined") {
	        printWarning = function printWarning(message) {
	            console.warn(message);
	        };
	        if (util.isNode && process.stderr.isTTY) {
	            printWarning = function printWarning(message, isSoft) {
	                var color = isSoft ? "\x1B[33m" : "\x1B[31m";
	                console.warn(color + message + "\x1B[0m\n");
	            };
	        } else if (!util.isNode && typeof new Error().stack === "string") {
	            printWarning = function printWarning(message, isSoft) {
	                console.warn("%c" + message, isSoft ? "color: darkorange" : "color: red");
	            };
	        }
	    }
	
	    var config = {
	        warnings: warnings,
	        longStackTraces: false,
	        cancellation: false,
	        monitoring: false
	    };
	
	    if (longStackTraces) Promise.longStackTraces();
	
	    return {
	        longStackTraces: function longStackTraces() {
	            return config.longStackTraces;
	        },
	        warnings: function warnings() {
	            return config.warnings;
	        },
	        cancellation: function cancellation() {
	            return config.cancellation;
	        },
	        monitoring: function monitoring() {
	            return config.monitoring;
	        },
	        propagateFromFunction: function propagateFromFunction() {
	            return _propagateFromFunction;
	        },
	        boundValueFunction: function boundValueFunction() {
	            return _boundValueFunction;
	        },
	        checkForgottenReturns: checkForgottenReturns,
	        setBounds: setBounds,
	        warn: warn,
	        deprecated: deprecated,
	        CapturedTrace: CapturedTrace,
	        fireDomEvent: fireDomEvent,
	        fireGlobalEvent: fireGlobalEvent
	    };
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(561)))

/***/ },
/* 612 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = function (Promise, tryConvertToPromise, NEXT_FILTER) {
	    var util = __webpack_require__(600);
	    var CancellationError = Promise.CancellationError;
	    var errorObj = util.errorObj;
	    var catchFilter = __webpack_require__(613)(NEXT_FILTER);
	
	    function PassThroughHandlerContext(promise, type, handler) {
	        this.promise = promise;
	        this.type = type;
	        this.handler = handler;
	        this.called = false;
	        this.cancelPromise = null;
	    }
	
	    PassThroughHandlerContext.prototype.isFinallyHandler = function () {
	        return this.type === 0;
	    };
	
	    function FinallyHandlerCancelReaction(finallyHandler) {
	        this.finallyHandler = finallyHandler;
	    }
	
	    FinallyHandlerCancelReaction.prototype._resultCancelled = function () {
	        checkCancel(this.finallyHandler);
	    };
	
	    function checkCancel(ctx, reason) {
	        if (ctx.cancelPromise != null) {
	            if (arguments.length > 1) {
	                ctx.cancelPromise._reject(reason);
	            } else {
	                ctx.cancelPromise._cancel();
	            }
	            ctx.cancelPromise = null;
	            return true;
	        }
	        return false;
	    }
	
	    function succeed() {
	        return finallyHandler.call(this, this.promise._target()._settledValue());
	    }
	    function fail(reason) {
	        if (checkCancel(this, reason)) return;
	        errorObj.e = reason;
	        return errorObj;
	    }
	    function finallyHandler(reasonOrValue) {
	        var promise = this.promise;
	        var handler = this.handler;
	
	        if (!this.called) {
	            this.called = true;
	            var ret = this.isFinallyHandler() ? handler.call(promise._boundValue()) : handler.call(promise._boundValue(), reasonOrValue);
	            if (ret === NEXT_FILTER) {
	                return ret;
	            } else if (ret !== undefined) {
	                promise._setReturnedNonUndefined();
	                var maybePromise = tryConvertToPromise(ret, promise);
	                if (maybePromise instanceof Promise) {
	                    if (this.cancelPromise != null) {
	                        if (maybePromise._isCancelled()) {
	                            var reason = new CancellationError("late cancellation observer");
	                            promise._attachExtraTrace(reason);
	                            errorObj.e = reason;
	                            return errorObj;
	                        } else if (maybePromise.isPending()) {
	                            maybePromise._attachCancellationCallback(new FinallyHandlerCancelReaction(this));
	                        }
	                    }
	                    return maybePromise._then(succeed, fail, undefined, this, undefined);
	                }
	            }
	        }
	
	        if (promise.isRejected()) {
	            checkCancel(this);
	            errorObj.e = reasonOrValue;
	            return errorObj;
	        } else {
	            checkCancel(this);
	            return reasonOrValue;
	        }
	    }
	
	    Promise.prototype._passThrough = function (handler, type, success, fail) {
	        if (typeof handler !== "function") return this.then();
	        return this._then(success, fail, undefined, new PassThroughHandlerContext(this, type, handler), undefined);
	    };
	
	    Promise.prototype.lastly = Promise.prototype["finally"] = function (handler) {
	        return this._passThrough(handler, 0, finallyHandler, finallyHandler);
	    };
	
	    Promise.prototype.tap = function (handler) {
	        return this._passThrough(handler, 1, finallyHandler);
	    };
	
	    Promise.prototype.tapCatch = function (handlerOrPredicate) {
	        var len = arguments.length;
	        if (len === 1) {
	            return this._passThrough(handlerOrPredicate, 1, undefined, finallyHandler);
	        } else {
	            var catchInstances = new Array(len - 1),
	                j = 0,
	                i;
	            for (i = 0; i < len - 1; ++i) {
	                var item = arguments[i];
	                if (util.isObject(item)) {
	                    catchInstances[j++] = item;
	                } else {
	                    return Promise.reject(new TypeError("tapCatch statement predicate: " + "expecting an object but got " + util.classString(item)));
	                }
	            }
	            catchInstances.length = j;
	            var handler = arguments[i];
	            return this._passThrough(catchFilter(catchInstances, handler, this), 1, undefined, finallyHandler);
	        }
	    };
	
	    return PassThroughHandlerContext;
	};

/***/ },
/* 613 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = function (NEXT_FILTER) {
	    var util = __webpack_require__(600);
	    var getKeys = __webpack_require__(601).keys;
	    var tryCatch = util.tryCatch;
	    var errorObj = util.errorObj;
	
	    function catchFilter(instances, cb, promise) {
	        return function (e) {
	            var boundTo = promise._boundValue();
	            predicateLoop: for (var i = 0; i < instances.length; ++i) {
	                var item = instances[i];
	
	                if (item === Error || item != null && item.prototype instanceof Error) {
	                    if (e instanceof item) {
	                        return tryCatch(cb).call(boundTo, e);
	                    }
	                } else if (typeof item === "function") {
	                    var matchesPredicate = tryCatch(item).call(boundTo, e);
	                    if (matchesPredicate === errorObj) {
	                        return matchesPredicate;
	                    } else if (matchesPredicate) {
	                        return tryCatch(cb).call(boundTo, e);
	                    }
	                } else if (util.isObject(e)) {
	                    var keys = getKeys(item);
	                    for (var j = 0; j < keys.length; ++j) {
	                        var key = keys[j];
	                        if (item[key] != e[key]) {
	                            continue predicateLoop;
	                        }
	                    }
	                    return tryCatch(cb).call(boundTo, e);
	                }
	            }
	            return NEXT_FILTER;
	        };
	    }
	
	    return catchFilter;
	};

/***/ },
/* 614 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var util = __webpack_require__(600);
	var maybeWrapAsError = util.maybeWrapAsError;
	var errors = __webpack_require__(607);
	var OperationalError = errors.OperationalError;
	var es5 = __webpack_require__(601);
	
	function isUntypedError(obj) {
	    return obj instanceof Error && es5.getPrototypeOf(obj) === Error.prototype;
	}
	
	var rErrorKey = /^(?:name|message|stack|cause)$/;
	function wrapAsOperationalError(obj) {
	    var ret;
	    if (isUntypedError(obj)) {
	        ret = new OperationalError(obj);
	        ret.name = obj.name;
	        ret.message = obj.message;
	        ret.stack = obj.stack;
	        var keys = es5.keys(obj);
	        for (var i = 0; i < keys.length; ++i) {
	            var key = keys[i];
	            if (!rErrorKey.test(key)) {
	                ret[key] = obj[key];
	            }
	        }
	        return ret;
	    }
	    util.markAsOriginatingFromRejection(obj);
	    return obj;
	}
	
	function nodebackForPromise(promise, multiArgs) {
	    return function (err, value) {
	        if (promise === null) return;
	        if (err) {
	            var wrapped = wrapAsOperationalError(maybeWrapAsError(err));
	            promise._attachExtraTrace(wrapped);
	            promise._reject(wrapped);
	        } else if (!multiArgs) {
	            promise._fulfill(value);
	        } else {
	            var $_len = arguments.length;var args = new Array(Math.max($_len - 1, 0));for (var $_i = 1; $_i < $_len; ++$_i) {
	                args[$_i - 1] = arguments[$_i];
	            };
	            promise._fulfill(args);
	        }
	        promise = null;
	    };
	}
	
	module.exports = nodebackForPromise;

/***/ },
/* 615 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = function (Promise, INTERNAL, tryConvertToPromise, apiRejection, debug) {
	    var util = __webpack_require__(600);
	    var tryCatch = util.tryCatch;
	
	    Promise.method = function (fn) {
	        if (typeof fn !== "function") {
	            throw new Promise.TypeError("expecting a function but got " + util.classString(fn));
	        }
	        return function () {
	            var ret = new Promise(INTERNAL);
	            ret._captureStackTrace();
	            ret._pushContext();
	            var value = tryCatch(fn).apply(this, arguments);
	            var promiseCreated = ret._popContext();
	            debug.checkForgottenReturns(value, promiseCreated, "Promise.method", ret);
	            ret._resolveFromSyncValue(value);
	            return ret;
	        };
	    };
	
	    Promise.attempt = Promise["try"] = function (fn) {
	        if (typeof fn !== "function") {
	            return apiRejection("expecting a function but got " + util.classString(fn));
	        }
	        var ret = new Promise(INTERNAL);
	        ret._captureStackTrace();
	        ret._pushContext();
	        var value;
	        if (arguments.length > 1) {
	            debug.deprecated("calling Promise.try with more than 1 argument");
	            var arg = arguments[1];
	            var ctx = arguments[2];
	            value = util.isArray(arg) ? tryCatch(fn).apply(ctx, arg) : tryCatch(fn).call(ctx, arg);
	        } else {
	            value = tryCatch(fn)();
	        }
	        var promiseCreated = ret._popContext();
	        debug.checkForgottenReturns(value, promiseCreated, "Promise.try", ret);
	        ret._resolveFromSyncValue(value);
	        return ret;
	    };
	
	    Promise.prototype._resolveFromSyncValue = function (value) {
	        if (value === util.errorObj) {
	            this._rejectCallback(value.e, false);
	        } else {
	            this._resolveCallback(value, true);
	        }
	    };
	};

/***/ },
/* 616 */
/***/ function(module, exports) {

	"use strict";
	
	module.exports = function (Promise, INTERNAL, tryConvertToPromise, debug) {
	    var calledBind = false;
	    var rejectThis = function rejectThis(_, e) {
	        this._reject(e);
	    };
	
	    var targetRejected = function targetRejected(e, context) {
	        context.promiseRejectionQueued = true;
	        context.bindingPromise._then(rejectThis, rejectThis, null, this, e);
	    };
	
	    var bindingResolved = function bindingResolved(thisArg, context) {
	        if ((this._bitField & 50397184) === 0) {
	            this._resolveCallback(context.target);
	        }
	    };
	
	    var bindingRejected = function bindingRejected(e, context) {
	        if (!context.promiseRejectionQueued) this._reject(e);
	    };
	
	    Promise.prototype.bind = function (thisArg) {
	        if (!calledBind) {
	            calledBind = true;
	            Promise.prototype._propagateFrom = debug.propagateFromFunction();
	            Promise.prototype._boundValue = debug.boundValueFunction();
	        }
	        var maybePromise = tryConvertToPromise(thisArg);
	        var ret = new Promise(INTERNAL);
	        ret._propagateFrom(this, 1);
	        var target = this._target();
	        ret._setBoundTo(maybePromise);
	        if (maybePromise instanceof Promise) {
	            var context = {
	                promiseRejectionQueued: false,
	                promise: ret,
	                target: target,
	                bindingPromise: maybePromise
	            };
	            target._then(INTERNAL, targetRejected, undefined, ret, context);
	            maybePromise._then(bindingResolved, bindingRejected, undefined, ret, context);
	            ret._setOnCancel(maybePromise);
	        } else {
	            ret._resolveCallback(target);
	        }
	        return ret;
	    };
	
	    Promise.prototype._setBoundTo = function (obj) {
	        if (obj !== undefined) {
	            this._bitField = this._bitField | 2097152;
	            this._boundTo = obj;
	        } else {
	            this._bitField = this._bitField & ~2097152;
	        }
	    };
	
	    Promise.prototype._isBound = function () {
	        return (this._bitField & 2097152) === 2097152;
	    };
	
	    Promise.bind = function (thisArg, value) {
	        return Promise.resolve(value).bind(thisArg);
	    };
	};

/***/ },
/* 617 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = function (Promise, PromiseArray, apiRejection, debug) {
	    var util = __webpack_require__(600);
	    var tryCatch = util.tryCatch;
	    var errorObj = util.errorObj;
	    var async = Promise._async;
	
	    Promise.prototype["break"] = Promise.prototype.cancel = function () {
	        if (!debug.cancellation()) return this._warn("cancellation is disabled");
	
	        var promise = this;
	        var child = promise;
	        while (promise._isCancellable()) {
	            if (!promise._cancelBy(child)) {
	                if (child._isFollowing()) {
	                    child._followee().cancel();
	                } else {
	                    child._cancelBranched();
	                }
	                break;
	            }
	
	            var parent = promise._cancellationParent;
	            if (parent == null || !parent._isCancellable()) {
	                if (promise._isFollowing()) {
	                    promise._followee().cancel();
	                } else {
	                    promise._cancelBranched();
	                }
	                break;
	            } else {
	                if (promise._isFollowing()) promise._followee().cancel();
	                promise._setWillBeCancelled();
	                child = promise;
	                promise = parent;
	            }
	        }
	    };
	
	    Promise.prototype._branchHasCancelled = function () {
	        this._branchesRemainingToCancel--;
	    };
	
	    Promise.prototype._enoughBranchesHaveCancelled = function () {
	        return this._branchesRemainingToCancel === undefined || this._branchesRemainingToCancel <= 0;
	    };
	
	    Promise.prototype._cancelBy = function (canceller) {
	        if (canceller === this) {
	            this._branchesRemainingToCancel = 0;
	            this._invokeOnCancel();
	            return true;
	        } else {
	            this._branchHasCancelled();
	            if (this._enoughBranchesHaveCancelled()) {
	                this._invokeOnCancel();
	                return true;
	            }
	        }
	        return false;
	    };
	
	    Promise.prototype._cancelBranched = function () {
	        if (this._enoughBranchesHaveCancelled()) {
	            this._cancel();
	        }
	    };
	
	    Promise.prototype._cancel = function () {
	        if (!this._isCancellable()) return;
	        this._setCancelled();
	        async.invoke(this._cancelPromises, this, undefined);
	    };
	
	    Promise.prototype._cancelPromises = function () {
	        if (this._length() > 0) this._settlePromises();
	    };
	
	    Promise.prototype._unsetOnCancel = function () {
	        this._onCancelField = undefined;
	    };
	
	    Promise.prototype._isCancellable = function () {
	        return this.isPending() && !this._isCancelled();
	    };
	
	    Promise.prototype.isCancellable = function () {
	        return this.isPending() && !this.isCancelled();
	    };
	
	    Promise.prototype._doInvokeOnCancel = function (onCancelCallback, internalOnly) {
	        if (util.isArray(onCancelCallback)) {
	            for (var i = 0; i < onCancelCallback.length; ++i) {
	                this._doInvokeOnCancel(onCancelCallback[i], internalOnly);
	            }
	        } else if (onCancelCallback !== undefined) {
	            if (typeof onCancelCallback === "function") {
	                if (!internalOnly) {
	                    var e = tryCatch(onCancelCallback).call(this._boundValue());
	                    if (e === errorObj) {
	                        this._attachExtraTrace(e.e);
	                        async.throwLater(e.e);
	                    }
	                }
	            } else {
	                onCancelCallback._resultCancelled(this);
	            }
	        }
	    };
	
	    Promise.prototype._invokeOnCancel = function () {
	        var onCancelCallback = this._onCancel();
	        this._unsetOnCancel();
	        async.invoke(this._doInvokeOnCancel, this, onCancelCallback);
	    };
	
	    Promise.prototype._invokeInternalOnCancel = function () {
	        if (this._isCancellable()) {
	            this._doInvokeOnCancel(this._onCancel(), true);
	            this._unsetOnCancel();
	        }
	    };
	
	    Promise.prototype._resultCancelled = function () {
	        this.cancel();
	    };
	};

/***/ },
/* 618 */
/***/ function(module, exports) {

	"use strict";
	
	module.exports = function (Promise) {
	    function returner() {
	        return this.value;
	    }
	    function thrower() {
	        throw this.reason;
	    }
	
	    Promise.prototype["return"] = Promise.prototype.thenReturn = function (value) {
	        if (value instanceof Promise) value.suppressUnhandledRejections();
	        return this._then(returner, undefined, undefined, { value: value }, undefined);
	    };
	
	    Promise.prototype["throw"] = Promise.prototype.thenThrow = function (reason) {
	        return this._then(thrower, undefined, undefined, { reason: reason }, undefined);
	    };
	
	    Promise.prototype.catchThrow = function (reason) {
	        if (arguments.length <= 1) {
	            return this._then(undefined, thrower, undefined, { reason: reason }, undefined);
	        } else {
	            var _reason = arguments[1];
	            var handler = function handler() {
	                throw _reason;
	            };
	            return this.caught(reason, handler);
	        }
	    };
	
	    Promise.prototype.catchReturn = function (value) {
	        if (arguments.length <= 1) {
	            if (value instanceof Promise) value.suppressUnhandledRejections();
	            return this._then(undefined, returner, undefined, { value: value }, undefined);
	        } else {
	            var _value = arguments[1];
	            if (_value instanceof Promise) _value.suppressUnhandledRejections();
	            var handler = function handler() {
	                return _value;
	            };
	            return this.caught(value, handler);
	        }
	    };
	};

/***/ },
/* 619 */
/***/ function(module, exports) {

	"use strict";
	
	module.exports = function (Promise) {
	    function PromiseInspection(promise) {
	        if (promise !== undefined) {
	            promise = promise._target();
	            this._bitField = promise._bitField;
	            this._settledValueField = promise._isFateSealed() ? promise._settledValue() : undefined;
	        } else {
	            this._bitField = 0;
	            this._settledValueField = undefined;
	        }
	    }
	
	    PromiseInspection.prototype._settledValue = function () {
	        return this._settledValueField;
	    };
	
	    var value = PromiseInspection.prototype.value = function () {
	        if (!this.isFulfilled()) {
	            throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\n\n    See http://goo.gl/MqrFmX\n");
	        }
	        return this._settledValue();
	    };
	
	    var reason = PromiseInspection.prototype.error = PromiseInspection.prototype.reason = function () {
	        if (!this.isRejected()) {
	            throw new TypeError("cannot get rejection reason of a non-rejected promise\n\n    See http://goo.gl/MqrFmX\n");
	        }
	        return this._settledValue();
	    };
	
	    var isFulfilled = PromiseInspection.prototype.isFulfilled = function () {
	        return (this._bitField & 33554432) !== 0;
	    };
	
	    var isRejected = PromiseInspection.prototype.isRejected = function () {
	        return (this._bitField & 16777216) !== 0;
	    };
	
	    var isPending = PromiseInspection.prototype.isPending = function () {
	        return (this._bitField & 50397184) === 0;
	    };
	
	    var isResolved = PromiseInspection.prototype.isResolved = function () {
	        return (this._bitField & 50331648) !== 0;
	    };
	
	    PromiseInspection.prototype.isCancelled = function () {
	        return (this._bitField & 8454144) !== 0;
	    };
	
	    Promise.prototype.__isCancelled = function () {
	        return (this._bitField & 65536) === 65536;
	    };
	
	    Promise.prototype._isCancelled = function () {
	        return this._target().__isCancelled();
	    };
	
	    Promise.prototype.isCancelled = function () {
	        return (this._target()._bitField & 8454144) !== 0;
	    };
	
	    Promise.prototype.isPending = function () {
	        return isPending.call(this._target());
	    };
	
	    Promise.prototype.isRejected = function () {
	        return isRejected.call(this._target());
	    };
	
	    Promise.prototype.isFulfilled = function () {
	        return isFulfilled.call(this._target());
	    };
	
	    Promise.prototype.isResolved = function () {
	        return isResolved.call(this._target());
	    };
	
	    Promise.prototype.value = function () {
	        return value.call(this._target());
	    };
	
	    Promise.prototype.reason = function () {
	        var target = this._target();
	        target._unsetRejectionIsUnhandled();
	        return reason.call(target);
	    };
	
	    Promise.prototype._value = function () {
	        return this._settledValue();
	    };
	
	    Promise.prototype._reason = function () {
	        this._unsetRejectionIsUnhandled();
	        return this._settledValue();
	    };
	
	    Promise.PromiseInspection = PromiseInspection;
	};

/***/ },
/* 620 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = function (Promise, PromiseArray, tryConvertToPromise, INTERNAL, async, getDomain) {
	    var util = __webpack_require__(600);
	    var canEvaluate = util.canEvaluate;
	    var tryCatch = util.tryCatch;
	    var errorObj = util.errorObj;
	    var reject;
	
	    if (true) {
	        if (canEvaluate) {
	            var thenCallback = function thenCallback(i) {
	                return new Function("value", "holder", "                             \n\
	            'use strict';                                                    \n\
	            holder.pIndex = value;                                           \n\
	            holder.checkFulfillment(this);                                   \n\
	            ".replace(/Index/g, i));
	            };
	
	            var promiseSetter = function promiseSetter(i) {
	                return new Function("promise", "holder", "                           \n\
	            'use strict';                                                    \n\
	            holder.pIndex = promise;                                         \n\
	            ".replace(/Index/g, i));
	            };
	
	            var generateHolderClass = function generateHolderClass(total) {
	                var props = new Array(total);
	                for (var i = 0; i < props.length; ++i) {
	                    props[i] = "this.p" + (i + 1);
	                }
	                var assignment = props.join(" = ") + " = null;";
	                var cancellationCode = "var promise;\n" + props.map(function (prop) {
	                    return "                                                         \n\
	                promise = " + prop + ";                                      \n\
	                if (promise instanceof Promise) {                            \n\
	                    promise.cancel();                                        \n\
	                }                                                            \n\
	            ";
	                }).join("\n");
	                var passedArguments = props.join(", ");
	                var name = "Holder$" + total;
	
	                var code = "return function(tryCatch, errorObj, Promise, async) {    \n\
	            'use strict';                                                    \n\
	            function [TheName](fn) {                                         \n\
	                [TheProperties]                                              \n\
	                this.fn = fn;                                                \n\
	                this.asyncNeeded = true;                                     \n\
	                this.now = 0;                                                \n\
	            }                                                                \n\
	                                                                             \n\
	            [TheName].prototype._callFunction = function(promise) {          \n\
	                promise._pushContext();                                      \n\
	                var ret = tryCatch(this.fn)([ThePassedArguments]);           \n\
	                promise._popContext();                                       \n\
	                if (ret === errorObj) {                                      \n\
	                    promise._rejectCallback(ret.e, false);                   \n\
	                } else {                                                     \n\
	                    promise._resolveCallback(ret);                           \n\
	                }                                                            \n\
	            };                                                               \n\
	                                                                             \n\
	            [TheName].prototype.checkFulfillment = function(promise) {       \n\
	                var now = ++this.now;                                        \n\
	                if (now === [TheTotal]) {                                    \n\
	                    if (this.asyncNeeded) {                                  \n\
	                        async.invoke(this._callFunction, this, promise);     \n\
	                    } else {                                                 \n\
	                        this._callFunction(promise);                         \n\
	                    }                                                        \n\
	                                                                             \n\
	                }                                                            \n\
	            };                                                               \n\
	                                                                             \n\
	            [TheName].prototype._resultCancelled = function() {              \n\
	                [CancellationCode]                                           \n\
	            };                                                               \n\
	                                                                             \n\
	            return [TheName];                                                \n\
	        }(tryCatch, errorObj, Promise, async);                               \n\
	        ";
	
	                code = code.replace(/\[TheName\]/g, name).replace(/\[TheTotal\]/g, total).replace(/\[ThePassedArguments\]/g, passedArguments).replace(/\[TheProperties\]/g, assignment).replace(/\[CancellationCode\]/g, cancellationCode);
	
	                return new Function("tryCatch", "errorObj", "Promise", "async", code)(tryCatch, errorObj, Promise, async);
	            };
	
	            var holderClasses = [];
	            var thenCallbacks = [];
	            var promiseSetters = [];
	
	            for (var i = 0; i < 8; ++i) {
	                holderClasses.push(generateHolderClass(i + 1));
	                thenCallbacks.push(thenCallback(i + 1));
	                promiseSetters.push(promiseSetter(i + 1));
	            }
	
	            reject = function reject(reason) {
	                this._reject(reason);
	            };
	        }
	    }
	
	    Promise.join = function () {
	        var last = arguments.length - 1;
	        var fn;
	        if (last > 0 && typeof arguments[last] === "function") {
	            fn = arguments[last];
	            if (true) {
	                if (last <= 8 && canEvaluate) {
	                    var ret = new Promise(INTERNAL);
	                    ret._captureStackTrace();
	                    var HolderClass = holderClasses[last - 1];
	                    var holder = new HolderClass(fn);
	                    var callbacks = thenCallbacks;
	
	                    for (var i = 0; i < last; ++i) {
	                        var maybePromise = tryConvertToPromise(arguments[i], ret);
	                        if (maybePromise instanceof Promise) {
	                            maybePromise = maybePromise._target();
	                            var bitField = maybePromise._bitField;
	                            ;
	                            if ((bitField & 50397184) === 0) {
	                                maybePromise._then(callbacks[i], reject, undefined, ret, holder);
	                                promiseSetters[i](maybePromise, holder);
	                                holder.asyncNeeded = false;
	                            } else if ((bitField & 33554432) !== 0) {
	                                callbacks[i].call(ret, maybePromise._value(), holder);
	                            } else if ((bitField & 16777216) !== 0) {
	                                ret._reject(maybePromise._reason());
	                            } else {
	                                ret._cancel();
	                            }
	                        } else {
	                            callbacks[i].call(ret, maybePromise, holder);
	                        }
	                    }
	
	                    if (!ret._isFateSealed()) {
	                        if (holder.asyncNeeded) {
	                            var domain = getDomain();
	                            if (domain !== null) {
	                                holder.fn = util.domainBind(domain, holder.fn);
	                            }
	                        }
	                        ret._setAsyncGuaranteed();
	                        ret._setOnCancel(holder);
	                    }
	                    return ret;
	                }
	            }
	        }
	        var $_len = arguments.length;var args = new Array($_len);for (var $_i = 0; $_i < $_len; ++$_i) {
	            args[$_i] = arguments[$_i];
	        };
	        if (fn) args.pop();
	        var ret = new PromiseArray(args).promise();
	        return fn !== undefined ? ret.spread(fn) : ret;
	    };
	};

/***/ },
/* 621 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	module.exports = function (Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug) {
	    var getDomain = Promise._getDomain;
	    var util = __webpack_require__(600);
	    var tryCatch = util.tryCatch;
	    var errorObj = util.errorObj;
	    var async = Promise._async;
	
	    function MappingPromiseArray(promises, fn, limit, _filter) {
	        this.constructor$(promises);
	        this._promise._captureStackTrace();
	        var domain = getDomain();
	        this._callback = domain === null ? fn : util.domainBind(domain, fn);
	        this._preservedValues = _filter === INTERNAL ? new Array(this.length()) : null;
	        this._limit = limit;
	        this._inFlight = 0;
	        this._queue = [];
	        async.invoke(this._asyncInit, this, undefined);
	    }
	    util.inherits(MappingPromiseArray, PromiseArray);
	
	    MappingPromiseArray.prototype._asyncInit = function () {
	        this._init$(undefined, -2);
	    };
	
	    MappingPromiseArray.prototype._init = function () {};
	
	    MappingPromiseArray.prototype._promiseFulfilled = function (value, index) {
	        var values = this._values;
	        var length = this.length();
	        var preservedValues = this._preservedValues;
	        var limit = this._limit;
	
	        if (index < 0) {
	            index = index * -1 - 1;
	            values[index] = value;
	            if (limit >= 1) {
	                this._inFlight--;
	                this._drainQueue();
	                if (this._isResolved()) return true;
	            }
	        } else {
	            if (limit >= 1 && this._inFlight >= limit) {
	                values[index] = value;
	                this._queue.push(index);
	                return false;
	            }
	            if (preservedValues !== null) preservedValues[index] = value;
	
	            var promise = this._promise;
	            var callback = this._callback;
	            var receiver = promise._boundValue();
	            promise._pushContext();
	            var ret = tryCatch(callback).call(receiver, value, index, length);
	            var promiseCreated = promise._popContext();
	            debug.checkForgottenReturns(ret, promiseCreated, preservedValues !== null ? "Promise.filter" : "Promise.map", promise);
	            if (ret === errorObj) {
	                this._reject(ret.e);
	                return true;
	            }
	
	            var maybePromise = tryConvertToPromise(ret, this._promise);
	            if (maybePromise instanceof Promise) {
	                maybePromise = maybePromise._target();
	                var bitField = maybePromise._bitField;
	                ;
	                if ((bitField & 50397184) === 0) {
	                    if (limit >= 1) this._inFlight++;
	                    values[index] = maybePromise;
	                    maybePromise._proxy(this, (index + 1) * -1);
	                    return false;
	                } else if ((bitField & 33554432) !== 0) {
	                    ret = maybePromise._value();
	                } else if ((bitField & 16777216) !== 0) {
	                    this._reject(maybePromise._reason());
	                    return true;
	                } else {
	                    this._cancel();
	                    return true;
	                }
	            }
	            values[index] = ret;
	        }
	        var totalResolved = ++this._totalResolved;
	        if (totalResolved >= length) {
	            if (preservedValues !== null) {
	                this._filter(values, preservedValues);
	            } else {
	                this._resolve(values);
	            }
	            return true;
	        }
	        return false;
	    };
	
	    MappingPromiseArray.prototype._drainQueue = function () {
	        var queue = this._queue;
	        var limit = this._limit;
	        var values = this._values;
	        while (queue.length > 0 && this._inFlight < limit) {
	            if (this._isResolved()) return;
	            var index = queue.pop();
	            this._promiseFulfilled(values[index], index);
	        }
	    };
	
	    MappingPromiseArray.prototype._filter = function (booleans, values) {
	        var len = values.length;
	        var ret = new Array(len);
	        var j = 0;
	        for (var i = 0; i < len; ++i) {
	            if (booleans[i]) ret[j++] = values[i];
	        }
	        ret.length = j;
	        this._resolve(ret);
	    };
	
	    MappingPromiseArray.prototype.preservedValues = function () {
	        return this._preservedValues;
	    };
	
	    function map(promises, fn, options, _filter) {
	        if (typeof fn !== "function") {
	            return apiRejection("expecting a function but got " + util.classString(fn));
	        }
	
	        var limit = 0;
	        if (options !== undefined) {
	            if ((typeof options === "undefined" ? "undefined" : _typeof(options)) === "object" && options !== null) {
	                if (typeof options.concurrency !== "number") {
	                    return Promise.reject(new TypeError("'concurrency' must be a number but it is " + util.classString(options.concurrency)));
	                }
	                limit = options.concurrency;
	            } else {
	                return Promise.reject(new TypeError("options argument must be an object but it is " + util.classString(options)));
	            }
	        }
	        limit = typeof limit === "number" && isFinite(limit) && limit >= 1 ? limit : 0;
	        return new MappingPromiseArray(promises, fn, limit, _filter).promise();
	    }
	
	    Promise.prototype.map = function (fn, options) {
	        return map(this, fn, options, null);
	    };
	
	    Promise.map = function (promises, fn, options, _filter) {
	        return map(promises, fn, options, _filter);
	    };
	};

/***/ },
/* 622 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var cr = Object.create;
	if (cr) {
	    var callerCache = cr(null);
	    var getterCache = cr(null);
	    callerCache[" size"] = getterCache[" size"] = 0;
	}
	
	module.exports = function (Promise) {
	    var util = __webpack_require__(600);
	    var canEvaluate = util.canEvaluate;
	    var isIdentifier = util.isIdentifier;
	
	    var getMethodCaller;
	    var getGetter;
	    if (true) {
	        var makeMethodCaller = function makeMethodCaller(methodName) {
	            return new Function("ensureMethod", "                                    \n\
	        return function(obj) {                                               \n\
	            'use strict'                                                     \n\
	            var len = this.length;                                           \n\
	            ensureMethod(obj, 'methodName');                                 \n\
	            switch(len) {                                                    \n\
	                case 1: return obj.methodName(this[0]);                      \n\
	                case 2: return obj.methodName(this[0], this[1]);             \n\
	                case 3: return obj.methodName(this[0], this[1], this[2]);    \n\
	                case 0: return obj.methodName();                             \n\
	                default:                                                     \n\
	                    return obj.methodName.apply(obj, this);                  \n\
	            }                                                                \n\
	        };                                                                   \n\
	        ".replace(/methodName/g, methodName))(ensureMethod);
	        };
	
	        var makeGetter = function makeGetter(propertyName) {
	            return new Function("obj", "                                             \n\
	        'use strict';                                                        \n\
	        return obj.propertyName;                                             \n\
	        ".replace("propertyName", propertyName));
	        };
	
	        var getCompiled = function getCompiled(name, compiler, cache) {
	            var ret = cache[name];
	            if (typeof ret !== "function") {
	                if (!isIdentifier(name)) {
	                    return null;
	                }
	                ret = compiler(name);
	                cache[name] = ret;
	                cache[" size"]++;
	                if (cache[" size"] > 512) {
	                    var keys = Object.keys(cache);
	                    for (var i = 0; i < 256; ++i) {
	                        delete cache[keys[i]];
	                    }cache[" size"] = keys.length - 256;
	                }
	            }
	            return ret;
	        };
	
	        getMethodCaller = function getMethodCaller(name) {
	            return getCompiled(name, makeMethodCaller, callerCache);
	        };
	
	        getGetter = function getGetter(name) {
	            return getCompiled(name, makeGetter, getterCache);
	        };
	    }
	
	    function ensureMethod(obj, methodName) {
	        var fn;
	        if (obj != null) fn = obj[methodName];
	        if (typeof fn !== "function") {
	            var message = "Object " + util.classString(obj) + " has no method '" + util.toString(methodName) + "'";
	            throw new Promise.TypeError(message);
	        }
	        return fn;
	    }
	
	    function caller(obj) {
	        var methodName = this.pop();
	        var fn = ensureMethod(obj, methodName);
	        return fn.apply(obj, this);
	    }
	    Promise.prototype.call = function (methodName) {
	        var $_len = arguments.length;var args = new Array(Math.max($_len - 1, 0));for (var $_i = 1; $_i < $_len; ++$_i) {
	            args[$_i - 1] = arguments[$_i];
	        };
	        if (true) {
	            if (canEvaluate) {
	                var maybeCaller = getMethodCaller(methodName);
	                if (maybeCaller !== null) {
	                    return this._then(maybeCaller, undefined, undefined, args, undefined);
	                }
	            }
	        }
	        args.push(methodName);
	        return this._then(caller, undefined, undefined, args, undefined);
	    };
	
	    function namedGetter(obj) {
	        return obj[this];
	    }
	    function indexedGetter(obj) {
	        var index = +this;
	        if (index < 0) index = Math.max(0, index + obj.length);
	        return obj[index];
	    }
	    Promise.prototype.get = function (propertyName) {
	        var isIndex = typeof propertyName === "number";
	        var getter;
	        if (!isIndex) {
	            if (canEvaluate) {
	                var maybeGetter = getGetter(propertyName);
	                getter = maybeGetter !== null ? maybeGetter : namedGetter;
	            } else {
	                getter = namedGetter;
	            }
	        } else {
	            getter = indexedGetter;
	        }
	        return this._then(getter, undefined, undefined, propertyName, undefined);
	    };
	};

/***/ },
/* 623 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = function (Promise, apiRejection, tryConvertToPromise, createContext, INTERNAL, debug) {
	    var util = __webpack_require__(600);
	    var TypeError = __webpack_require__(607).TypeError;
	    var inherits = __webpack_require__(600).inherits;
	    var errorObj = util.errorObj;
	    var tryCatch = util.tryCatch;
	    var NULL = {};
	
	    function thrower(e) {
	        setTimeout(function () {
	            throw e;
	        }, 0);
	    }
	
	    function castPreservingDisposable(thenable) {
	        var maybePromise = tryConvertToPromise(thenable);
	        if (maybePromise !== thenable && typeof thenable._isDisposable === "function" && typeof thenable._getDisposer === "function" && thenable._isDisposable()) {
	            maybePromise._setDisposable(thenable._getDisposer());
	        }
	        return maybePromise;
	    }
	    function dispose(resources, inspection) {
	        var i = 0;
	        var len = resources.length;
	        var ret = new Promise(INTERNAL);
	        function iterator() {
	            if (i >= len) return ret._fulfill();
	            var maybePromise = castPreservingDisposable(resources[i++]);
	            if (maybePromise instanceof Promise && maybePromise._isDisposable()) {
	                try {
	                    maybePromise = tryConvertToPromise(maybePromise._getDisposer().tryDispose(inspection), resources.promise);
	                } catch (e) {
	                    return thrower(e);
	                }
	                if (maybePromise instanceof Promise) {
	                    return maybePromise._then(iterator, thrower, null, null, null);
	                }
	            }
	            iterator();
	        }
	        iterator();
	        return ret;
	    }
	
	    function Disposer(data, promise, context) {
	        this._data = data;
	        this._promise = promise;
	        this._context = context;
	    }
	
	    Disposer.prototype.data = function () {
	        return this._data;
	    };
	
	    Disposer.prototype.promise = function () {
	        return this._promise;
	    };
	
	    Disposer.prototype.resource = function () {
	        if (this.promise().isFulfilled()) {
	            return this.promise().value();
	        }
	        return NULL;
	    };
	
	    Disposer.prototype.tryDispose = function (inspection) {
	        var resource = this.resource();
	        var context = this._context;
	        if (context !== undefined) context._pushContext();
	        var ret = resource !== NULL ? this.doDispose(resource, inspection) : null;
	        if (context !== undefined) context._popContext();
	        this._promise._unsetDisposable();
	        this._data = null;
	        return ret;
	    };
	
	    Disposer.isDisposer = function (d) {
	        return d != null && typeof d.resource === "function" && typeof d.tryDispose === "function";
	    };
	
	    function FunctionDisposer(fn, promise, context) {
	        this.constructor$(fn, promise, context);
	    }
	    inherits(FunctionDisposer, Disposer);
	
	    FunctionDisposer.prototype.doDispose = function (resource, inspection) {
	        var fn = this.data();
	        return fn.call(resource, resource, inspection);
	    };
	
	    function maybeUnwrapDisposer(value) {
	        if (Disposer.isDisposer(value)) {
	            this.resources[this.index]._setDisposable(value);
	            return value.promise();
	        }
	        return value;
	    }
	
	    function ResourceList(length) {
	        this.length = length;
	        this.promise = null;
	        this[length - 1] = null;
	    }
	
	    ResourceList.prototype._resultCancelled = function () {
	        var len = this.length;
	        for (var i = 0; i < len; ++i) {
	            var item = this[i];
	            if (item instanceof Promise) {
	                item.cancel();
	            }
	        }
	    };
	
	    Promise.using = function () {
	        var len = arguments.length;
	        if (len < 2) return apiRejection("you must pass at least 2 arguments to Promise.using");
	        var fn = arguments[len - 1];
	        if (typeof fn !== "function") {
	            return apiRejection("expecting a function but got " + util.classString(fn));
	        }
	        var input;
	        var spreadArgs = true;
	        if (len === 2 && Array.isArray(arguments[0])) {
	            input = arguments[0];
	            len = input.length;
	            spreadArgs = false;
	        } else {
	            input = arguments;
	            len--;
	        }
	        var resources = new ResourceList(len);
	        for (var i = 0; i < len; ++i) {
	            var resource = input[i];
	            if (Disposer.isDisposer(resource)) {
	                var disposer = resource;
	                resource = resource.promise();
	                resource._setDisposable(disposer);
	            } else {
	                var maybePromise = tryConvertToPromise(resource);
	                if (maybePromise instanceof Promise) {
	                    resource = maybePromise._then(maybeUnwrapDisposer, null, null, {
	                        resources: resources,
	                        index: i
	                    }, undefined);
	                }
	            }
	            resources[i] = resource;
	        }
	
	        var reflectedResources = new Array(resources.length);
	        for (var i = 0; i < reflectedResources.length; ++i) {
	            reflectedResources[i] = Promise.resolve(resources[i]).reflect();
	        }
	
	        var resultPromise = Promise.all(reflectedResources).then(function (inspections) {
	            for (var i = 0; i < inspections.length; ++i) {
	                var inspection = inspections[i];
	                if (inspection.isRejected()) {
	                    errorObj.e = inspection.error();
	                    return errorObj;
	                } else if (!inspection.isFulfilled()) {
	                    resultPromise.cancel();
	                    return;
	                }
	                inspections[i] = inspection.value();
	            }
	            promise._pushContext();
	
	            fn = tryCatch(fn);
	            var ret = spreadArgs ? fn.apply(undefined, inspections) : fn(inspections);
	            var promiseCreated = promise._popContext();
	            debug.checkForgottenReturns(ret, promiseCreated, "Promise.using", promise);
	            return ret;
	        });
	
	        var promise = resultPromise.lastly(function () {
	            var inspection = new Promise.PromiseInspection(resultPromise);
	            return dispose(resources, inspection);
	        });
	        resources.promise = promise;
	        promise._setOnCancel(resources);
	        return promise;
	    };
	
	    Promise.prototype._setDisposable = function (disposer) {
	        this._bitField = this._bitField | 131072;
	        this._disposer = disposer;
	    };
	
	    Promise.prototype._isDisposable = function () {
	        return (this._bitField & 131072) > 0;
	    };
	
	    Promise.prototype._getDisposer = function () {
	        return this._disposer;
	    };
	
	    Promise.prototype._unsetDisposable = function () {
	        this._bitField = this._bitField & ~131072;
	        this._disposer = undefined;
	    };
	
	    Promise.prototype.disposer = function (fn) {
	        if (typeof fn === "function") {
	            return new FunctionDisposer(fn, this, createContext());
	        }
	        throw new TypeError();
	    };
	};

/***/ },
/* 624 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = function (Promise, INTERNAL, debug) {
	    var util = __webpack_require__(600);
	    var TimeoutError = Promise.TimeoutError;
	
	    function HandleWrapper(handle) {
	        this.handle = handle;
	    }
	
	    HandleWrapper.prototype._resultCancelled = function () {
	        clearTimeout(this.handle);
	    };
	
	    var afterValue = function afterValue(value) {
	        return delay(+this).thenReturn(value);
	    };
	    var delay = Promise.delay = function (ms, value) {
	        var ret;
	        var handle;
	        if (value !== undefined) {
	            ret = Promise.resolve(value)._then(afterValue, null, null, ms, undefined);
	            if (debug.cancellation() && value instanceof Promise) {
	                ret._setOnCancel(value);
	            }
	        } else {
	            ret = new Promise(INTERNAL);
	            handle = setTimeout(function () {
	                ret._fulfill();
	            }, +ms);
	            if (debug.cancellation()) {
	                ret._setOnCancel(new HandleWrapper(handle));
	            }
	            ret._captureStackTrace();
	        }
	        ret._setAsyncGuaranteed();
	        return ret;
	    };
	
	    Promise.prototype.delay = function (ms) {
	        return delay(ms, this);
	    };
	
	    var afterTimeout = function afterTimeout(promise, message, parent) {
	        var err;
	        if (typeof message !== "string") {
	            if (message instanceof Error) {
	                err = message;
	            } else {
	                err = new TimeoutError("operation timed out");
	            }
	        } else {
	            err = new TimeoutError(message);
	        }
	        util.markAsOriginatingFromRejection(err);
	        promise._attachExtraTrace(err);
	        promise._reject(err);
	
	        if (parent != null) {
	            parent.cancel();
	        }
	    };
	
	    function successClear(value) {
	        clearTimeout(this.handle);
	        return value;
	    }
	
	    function failureClear(reason) {
	        clearTimeout(this.handle);
	        throw reason;
	    }
	
	    Promise.prototype.timeout = function (ms, message) {
	        ms = +ms;
	        var ret, parent;
	
	        var handleWrapper = new HandleWrapper(setTimeout(function timeoutTimeout() {
	            if (ret.isPending()) {
	                afterTimeout(ret, message, parent);
	            }
	        }, ms));
	
	        if (debug.cancellation()) {
	            parent = this.then();
	            ret = parent._then(successClear, failureClear, undefined, handleWrapper, undefined);
	            ret._setOnCancel(handleWrapper);
	        } else {
	            ret = this._then(successClear, failureClear, undefined, handleWrapper, undefined);
	        }
	
	        return ret;
	    };
	};

/***/ },
/* 625 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = function (Promise, apiRejection, INTERNAL, tryConvertToPromise, Proxyable, debug) {
	    var errors = __webpack_require__(607);
	    var TypeError = errors.TypeError;
	    var util = __webpack_require__(600);
	    var errorObj = util.errorObj;
	    var tryCatch = util.tryCatch;
	    var yieldHandlers = [];
	
	    function promiseFromYieldHandler(value, yieldHandlers, traceParent) {
	        for (var i = 0; i < yieldHandlers.length; ++i) {
	            traceParent._pushContext();
	            var result = tryCatch(yieldHandlers[i])(value);
	            traceParent._popContext();
	            if (result === errorObj) {
	                traceParent._pushContext();
	                var ret = Promise.reject(errorObj.e);
	                traceParent._popContext();
	                return ret;
	            }
	            var maybePromise = tryConvertToPromise(result, traceParent);
	            if (maybePromise instanceof Promise) return maybePromise;
	        }
	        return null;
	    }
	
	    function PromiseSpawn(generatorFunction, receiver, yieldHandler, stack) {
	        if (debug.cancellation()) {
	            var internal = new Promise(INTERNAL);
	            var _finallyPromise = this._finallyPromise = new Promise(INTERNAL);
	            this._promise = internal.lastly(function () {
	                return _finallyPromise;
	            });
	            internal._captureStackTrace();
	            internal._setOnCancel(this);
	        } else {
	            var promise = this._promise = new Promise(INTERNAL);
	            promise._captureStackTrace();
	        }
	        this._stack = stack;
	        this._generatorFunction = generatorFunction;
	        this._receiver = receiver;
	        this._generator = undefined;
	        this._yieldHandlers = typeof yieldHandler === "function" ? [yieldHandler].concat(yieldHandlers) : yieldHandlers;
	        this._yieldedPromise = null;
	        this._cancellationPhase = false;
	    }
	    util.inherits(PromiseSpawn, Proxyable);
	
	    PromiseSpawn.prototype._isResolved = function () {
	        return this._promise === null;
	    };
	
	    PromiseSpawn.prototype._cleanup = function () {
	        this._promise = this._generator = null;
	        if (debug.cancellation() && this._finallyPromise !== null) {
	            this._finallyPromise._fulfill();
	            this._finallyPromise = null;
	        }
	    };
	
	    PromiseSpawn.prototype._promiseCancelled = function () {
	        if (this._isResolved()) return;
	        var implementsReturn = typeof this._generator["return"] !== "undefined";
	
	        var result;
	        if (!implementsReturn) {
	            var reason = new Promise.CancellationError("generator .return() sentinel");
	            Promise.coroutine.returnSentinel = reason;
	            this._promise._attachExtraTrace(reason);
	            this._promise._pushContext();
	            result = tryCatch(this._generator["throw"]).call(this._generator, reason);
	            this._promise._popContext();
	        } else {
	            this._promise._pushContext();
	            result = tryCatch(this._generator["return"]).call(this._generator, undefined);
	            this._promise._popContext();
	        }
	        this._cancellationPhase = true;
	        this._yieldedPromise = null;
	        this._continue(result);
	    };
	
	    PromiseSpawn.prototype._promiseFulfilled = function (value) {
	        this._yieldedPromise = null;
	        this._promise._pushContext();
	        var result = tryCatch(this._generator.next).call(this._generator, value);
	        this._promise._popContext();
	        this._continue(result);
	    };
	
	    PromiseSpawn.prototype._promiseRejected = function (reason) {
	        this._yieldedPromise = null;
	        this._promise._attachExtraTrace(reason);
	        this._promise._pushContext();
	        var result = tryCatch(this._generator["throw"]).call(this._generator, reason);
	        this._promise._popContext();
	        this._continue(result);
	    };
	
	    PromiseSpawn.prototype._resultCancelled = function () {
	        if (this._yieldedPromise instanceof Promise) {
	            var promise = this._yieldedPromise;
	            this._yieldedPromise = null;
	            promise.cancel();
	        }
	    };
	
	    PromiseSpawn.prototype.promise = function () {
	        return this._promise;
	    };
	
	    PromiseSpawn.prototype._run = function () {
	        this._generator = this._generatorFunction.call(this._receiver);
	        this._receiver = this._generatorFunction = undefined;
	        this._promiseFulfilled(undefined);
	    };
	
	    PromiseSpawn.prototype._continue = function (result) {
	        var promise = this._promise;
	        if (result === errorObj) {
	            this._cleanup();
	            if (this._cancellationPhase) {
	                return promise.cancel();
	            } else {
	                return promise._rejectCallback(result.e, false);
	            }
	        }
	
	        var value = result.value;
	        if (result.done === true) {
	            this._cleanup();
	            if (this._cancellationPhase) {
	                return promise.cancel();
	            } else {
	                return promise._resolveCallback(value);
	            }
	        } else {
	            var maybePromise = tryConvertToPromise(value, this._promise);
	            if (!(maybePromise instanceof Promise)) {
	                maybePromise = promiseFromYieldHandler(maybePromise, this._yieldHandlers, this._promise);
	                if (maybePromise === null) {
	                    this._promiseRejected(new TypeError("A value %s was yielded that could not be treated as a promise\n\n    See http://goo.gl/MqrFmX\n\n".replace("%s", String(value)) + "From coroutine:\n" + this._stack.split("\n").slice(1, -7).join("\n")));
	                    return;
	                }
	            }
	            maybePromise = maybePromise._target();
	            var bitField = maybePromise._bitField;
	            ;
	            if ((bitField & 50397184) === 0) {
	                this._yieldedPromise = maybePromise;
	                maybePromise._proxy(this, null);
	            } else if ((bitField & 33554432) !== 0) {
	                Promise._async.invoke(this._promiseFulfilled, this, maybePromise._value());
	            } else if ((bitField & 16777216) !== 0) {
	                Promise._async.invoke(this._promiseRejected, this, maybePromise._reason());
	            } else {
	                this._promiseCancelled();
	            }
	        }
	    };
	
	    Promise.coroutine = function (generatorFunction, options) {
	        if (typeof generatorFunction !== "function") {
	            throw new TypeError("generatorFunction must be a function\n\n    See http://goo.gl/MqrFmX\n");
	        }
	        var yieldHandler = Object(options).yieldHandler;
	        var PromiseSpawn$ = PromiseSpawn;
	        var stack = new Error().stack;
	        return function () {
	            var generator = generatorFunction.apply(this, arguments);
	            var spawn = new PromiseSpawn$(undefined, undefined, yieldHandler, stack);
	            var ret = spawn.promise();
	            spawn._generator = generator;
	            spawn._promiseFulfilled(undefined);
	            return ret;
	        };
	    };
	
	    Promise.coroutine.addYieldHandler = function (fn) {
	        if (typeof fn !== "function") {
	            throw new TypeError("expecting a function but got " + util.classString(fn));
	        }
	        yieldHandlers.push(fn);
	    };
	
	    Promise.spawn = function (generatorFunction) {
	        debug.deprecated("Promise.spawn()", "Promise.coroutine()");
	        if (typeof generatorFunction !== "function") {
	            return apiRejection("generatorFunction must be a function\n\n    See http://goo.gl/MqrFmX\n");
	        }
	        var spawn = new PromiseSpawn(generatorFunction, this);
	        var ret = spawn.promise();
	        spawn._run(Promise.spawn);
	        return ret;
	    };
	};

/***/ },
/* 626 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = function (Promise) {
	    var util = __webpack_require__(600);
	    var async = Promise._async;
	    var tryCatch = util.tryCatch;
	    var errorObj = util.errorObj;
	
	    function spreadAdapter(val, nodeback) {
	        var promise = this;
	        if (!util.isArray(val)) return successAdapter.call(promise, val, nodeback);
	        var ret = tryCatch(nodeback).apply(promise._boundValue(), [null].concat(val));
	        if (ret === errorObj) {
	            async.throwLater(ret.e);
	        }
	    }
	
	    function successAdapter(val, nodeback) {
	        var promise = this;
	        var receiver = promise._boundValue();
	        var ret = val === undefined ? tryCatch(nodeback).call(receiver, null) : tryCatch(nodeback).call(receiver, null, val);
	        if (ret === errorObj) {
	            async.throwLater(ret.e);
	        }
	    }
	    function errorAdapter(reason, nodeback) {
	        var promise = this;
	        if (!reason) {
	            var newReason = new Error(reason + "");
	            newReason.cause = reason;
	            reason = newReason;
	        }
	        var ret = tryCatch(nodeback).call(promise._boundValue(), reason);
	        if (ret === errorObj) {
	            async.throwLater(ret.e);
	        }
	    }
	
	    Promise.prototype.asCallback = Promise.prototype.nodeify = function (nodeback, options) {
	        if (typeof nodeback == "function") {
	            var adapter = successAdapter;
	            if (options !== undefined && Object(options).spread) {
	                adapter = spreadAdapter;
	            }
	            this._then(adapter, errorAdapter, undefined, this, nodeback);
	        }
	        return this;
	    };
	};

/***/ },
/* 627 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	module.exports = function (Promise, INTERNAL) {
	    var THIS = {};
	    var util = __webpack_require__(600);
	    var nodebackForPromise = __webpack_require__(614);
	    var withAppended = util.withAppended;
	    var maybeWrapAsError = util.maybeWrapAsError;
	    var canEvaluate = util.canEvaluate;
	    var TypeError = __webpack_require__(607).TypeError;
	    var defaultSuffix = "Async";
	    var defaultPromisified = { __isPromisified__: true };
	    var noCopyProps = ["arity", "length", "name", "arguments", "caller", "callee", "prototype", "__isPromisified__"];
	    var noCopyPropsPattern = new RegExp("^(?:" + noCopyProps.join("|") + ")$");
	
	    var defaultFilter = function defaultFilter(name) {
	        return util.isIdentifier(name) && name.charAt(0) !== "_" && name !== "constructor";
	    };
	
	    function propsFilter(key) {
	        return !noCopyPropsPattern.test(key);
	    }
	
	    function isPromisified(fn) {
	        try {
	            return fn.__isPromisified__ === true;
	        } catch (e) {
	            return false;
	        }
	    }
	
	    function hasPromisified(obj, key, suffix) {
	        var val = util.getDataPropertyOrDefault(obj, key + suffix, defaultPromisified);
	        return val ? isPromisified(val) : false;
	    }
	    function checkValid(ret, suffix, suffixRegexp) {
	        for (var i = 0; i < ret.length; i += 2) {
	            var key = ret[i];
	            if (suffixRegexp.test(key)) {
	                var keyWithoutAsyncSuffix = key.replace(suffixRegexp, "");
	                for (var j = 0; j < ret.length; j += 2) {
	                    if (ret[j] === keyWithoutAsyncSuffix) {
	                        throw new TypeError("Cannot promisify an API that has normal methods with '%s'-suffix\n\n    See http://goo.gl/MqrFmX\n".replace("%s", suffix));
	                    }
	                }
	            }
	        }
	    }
	
	    function promisifiableMethods(obj, suffix, suffixRegexp, filter) {
	        var keys = util.inheritedDataKeys(obj);
	        var ret = [];
	        for (var i = 0; i < keys.length; ++i) {
	            var key = keys[i];
	            var value = obj[key];
	            var passesDefaultFilter = filter === defaultFilter ? true : defaultFilter(key, value, obj);
	            if (typeof value === "function" && !isPromisified(value) && !hasPromisified(obj, key, suffix) && filter(key, value, obj, passesDefaultFilter)) {
	                ret.push(key, value);
	            }
	        }
	        checkValid(ret, suffix, suffixRegexp);
	        return ret;
	    }
	
	    var escapeIdentRegex = function escapeIdentRegex(str) {
	        return str.replace(/([$])/, "\\$");
	    };
	
	    var makeNodePromisifiedEval;
	    if (true) {
	        var switchCaseArgumentOrder = function switchCaseArgumentOrder(likelyArgumentCount) {
	            var ret = [likelyArgumentCount];
	            var min = Math.max(0, likelyArgumentCount - 1 - 3);
	            for (var i = likelyArgumentCount - 1; i >= min; --i) {
	                ret.push(i);
	            }
	            for (var i = likelyArgumentCount + 1; i <= 3; ++i) {
	                ret.push(i);
	            }
	            return ret;
	        };
	
	        var argumentSequence = function argumentSequence(argumentCount) {
	            return util.filledRange(argumentCount, "_arg", "");
	        };
	
	        var parameterDeclaration = function parameterDeclaration(parameterCount) {
	            return util.filledRange(Math.max(parameterCount, 3), "_arg", "");
	        };
	
	        var parameterCount = function parameterCount(fn) {
	            if (typeof fn.length === "number") {
	                return Math.max(Math.min(fn.length, 1023 + 1), 0);
	            }
	            return 0;
	        };
	
	        makeNodePromisifiedEval = function makeNodePromisifiedEval(callback, receiver, originalName, fn, _, multiArgs) {
	            var newParameterCount = Math.max(0, parameterCount(fn) - 1);
	            var argumentOrder = switchCaseArgumentOrder(newParameterCount);
	            var shouldProxyThis = typeof callback === "string" || receiver === THIS;
	
	            function generateCallForArgumentCount(count) {
	                var args = argumentSequence(count).join(", ");
	                var comma = count > 0 ? ", " : "";
	                var ret;
	                if (shouldProxyThis) {
	                    ret = "ret = callback.call(this, {{args}}, nodeback); break;\n";
	                } else {
	                    ret = receiver === undefined ? "ret = callback({{args}}, nodeback); break;\n" : "ret = callback.call(receiver, {{args}}, nodeback); break;\n";
	                }
	                return ret.replace("{{args}}", args).replace(", ", comma);
	            }
	
	            function generateArgumentSwitchCase() {
	                var ret = "";
	                for (var i = 0; i < argumentOrder.length; ++i) {
	                    ret += "case " + argumentOrder[i] + ":" + generateCallForArgumentCount(argumentOrder[i]);
	                }
	
	                ret += "                                                             \n\
	        default:                                                             \n\
	            var args = new Array(len + 1);                                   \n\
	            var i = 0;                                                       \n\
	            for (var i = 0; i < len; ++i) {                                  \n\
	               args[i] = arguments[i];                                       \n\
	            }                                                                \n\
	            args[i] = nodeback;                                              \n\
	            [CodeForCall]                                                    \n\
	            break;                                                           \n\
	        ".replace("[CodeForCall]", shouldProxyThis ? "ret = callback.apply(this, args);\n" : "ret = callback.apply(receiver, args);\n");
	                return ret;
	            }
	
	            var getFunctionCode = typeof callback === "string" ? "this != null ? this['" + callback + "'] : fn" : "fn";
	            var body = "'use strict';                                                \n\
	        var ret = function (Parameters) {                                    \n\
	            'use strict';                                                    \n\
	            var len = arguments.length;                                      \n\
	            var promise = new Promise(INTERNAL);                             \n\
	            promise._captureStackTrace();                                    \n\
	            var nodeback = nodebackForPromise(promise, " + multiArgs + ");   \n\
	            var ret;                                                         \n\
	            var callback = tryCatch([GetFunctionCode]);                      \n\
	            switch(len) {                                                    \n\
	                [CodeForSwitchCase]                                          \n\
	            }                                                                \n\
	            if (ret === errorObj) {                                          \n\
	                promise._rejectCallback(maybeWrapAsError(ret.e), true, true);\n\
	            }                                                                \n\
	            if (!promise._isFateSealed()) promise._setAsyncGuaranteed();     \n\
	            return promise;                                                  \n\
	        };                                                                   \n\
	        notEnumerableProp(ret, '__isPromisified__', true);                   \n\
	        return ret;                                                          \n\
	    ".replace("[CodeForSwitchCase]", generateArgumentSwitchCase()).replace("[GetFunctionCode]", getFunctionCode);
	            body = body.replace("Parameters", parameterDeclaration(newParameterCount));
	            return new Function("Promise", "fn", "receiver", "withAppended", "maybeWrapAsError", "nodebackForPromise", "tryCatch", "errorObj", "notEnumerableProp", "INTERNAL", body)(Promise, fn, receiver, withAppended, maybeWrapAsError, nodebackForPromise, util.tryCatch, util.errorObj, util.notEnumerableProp, INTERNAL);
	        };
	    }
	
	    function makeNodePromisifiedClosure(callback, receiver, _, fn, __, multiArgs) {
	        var defaultThis = function () {
	            return this;
	        }();
	        var method = callback;
	        if (typeof method === "string") {
	            callback = fn;
	        }
	        function promisified() {
	            var _receiver = receiver;
	            if (receiver === THIS) _receiver = this;
	            var promise = new Promise(INTERNAL);
	            promise._captureStackTrace();
	            var cb = typeof method === "string" && this !== defaultThis ? this[method] : callback;
	            var fn = nodebackForPromise(promise, multiArgs);
	            try {
	                cb.apply(_receiver, withAppended(arguments, fn));
	            } catch (e) {
	                promise._rejectCallback(maybeWrapAsError(e), true, true);
	            }
	            if (!promise._isFateSealed()) promise._setAsyncGuaranteed();
	            return promise;
	        }
	        util.notEnumerableProp(promisified, "__isPromisified__", true);
	        return promisified;
	    }
	
	    var makeNodePromisified = canEvaluate ? makeNodePromisifiedEval : makeNodePromisifiedClosure;
	
	    function promisifyAll(obj, suffix, filter, promisifier, multiArgs) {
	        var suffixRegexp = new RegExp(escapeIdentRegex(suffix) + "$");
	        var methods = promisifiableMethods(obj, suffix, suffixRegexp, filter);
	
	        for (var i = 0, len = methods.length; i < len; i += 2) {
	            var key = methods[i];
	            var fn = methods[i + 1];
	            var promisifiedKey = key + suffix;
	            if (promisifier === makeNodePromisified) {
	                obj[promisifiedKey] = makeNodePromisified(key, THIS, key, fn, suffix, multiArgs);
	            } else {
	                var promisified = promisifier(fn, function () {
	                    return makeNodePromisified(key, THIS, key, fn, suffix, multiArgs);
	                });
	                util.notEnumerableProp(promisified, "__isPromisified__", true);
	                obj[promisifiedKey] = promisified;
	            }
	        }
	        util.toFastProperties(obj);
	        return obj;
	    }
	
	    function promisify(callback, receiver, multiArgs) {
	        return makeNodePromisified(callback, receiver, undefined, callback, null, multiArgs);
	    }
	
	    Promise.promisify = function (fn, options) {
	        if (typeof fn !== "function") {
	            throw new TypeError("expecting a function but got " + util.classString(fn));
	        }
	        if (isPromisified(fn)) {
	            return fn;
	        }
	        options = Object(options);
	        var receiver = options.context === undefined ? THIS : options.context;
	        var multiArgs = !!options.multiArgs;
	        var ret = promisify(fn, receiver, multiArgs);
	        util.copyDescriptors(fn, ret, propsFilter);
	        return ret;
	    };
	
	    Promise.promisifyAll = function (target, options) {
	        if (typeof target !== "function" && (typeof target === "undefined" ? "undefined" : _typeof(target)) !== "object") {
	            throw new TypeError("the target of promisifyAll must be an object or a function\n\n    See http://goo.gl/MqrFmX\n");
	        }
	        options = Object(options);
	        var multiArgs = !!options.multiArgs;
	        var suffix = options.suffix;
	        if (typeof suffix !== "string") suffix = defaultSuffix;
	        var filter = options.filter;
	        if (typeof filter !== "function") filter = defaultFilter;
	        var promisifier = options.promisifier;
	        if (typeof promisifier !== "function") promisifier = makeNodePromisified;
	
	        if (!util.isIdentifier(suffix)) {
	            throw new RangeError("suffix must be a valid identifier\n\n    See http://goo.gl/MqrFmX\n");
	        }
	
	        var keys = util.inheritedDataKeys(target);
	        for (var i = 0; i < keys.length; ++i) {
	            var value = target[keys[i]];
	            if (keys[i] !== "constructor" && util.isClass(value)) {
	                promisifyAll(value.prototype, suffix, filter, promisifier, multiArgs);
	                promisifyAll(value, suffix, filter, promisifier, multiArgs);
	            }
	        }
	
	        return promisifyAll(target, suffix, filter, promisifier, multiArgs);
	    };
	};

/***/ },
/* 628 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = function (Promise, PromiseArray, tryConvertToPromise, apiRejection) {
	    var util = __webpack_require__(600);
	    var isObject = util.isObject;
	    var es5 = __webpack_require__(601);
	    var Es6Map;
	    if (typeof Map === "function") Es6Map = Map;
	
	    var mapToEntries = function () {
	        var index = 0;
	        var size = 0;
	
	        function extractEntry(value, key) {
	            this[index] = value;
	            this[index + size] = key;
	            index++;
	        }
	
	        return function mapToEntries(map) {
	            size = map.size;
	            index = 0;
	            var ret = new Array(map.size * 2);
	            map.forEach(extractEntry, ret);
	            return ret;
	        };
	    }();
	
	    var entriesToMap = function entriesToMap(entries) {
	        var ret = new Es6Map();
	        var length = entries.length / 2 | 0;
	        for (var i = 0; i < length; ++i) {
	            var key = entries[length + i];
	            var value = entries[i];
	            ret.set(key, value);
	        }
	        return ret;
	    };
	
	    function PropertiesPromiseArray(obj) {
	        var isMap = false;
	        var entries;
	        if (Es6Map !== undefined && obj instanceof Es6Map) {
	            entries = mapToEntries(obj);
	            isMap = true;
	        } else {
	            var keys = es5.keys(obj);
	            var len = keys.length;
	            entries = new Array(len * 2);
	            for (var i = 0; i < len; ++i) {
	                var key = keys[i];
	                entries[i] = obj[key];
	                entries[i + len] = key;
	            }
	        }
	        this.constructor$(entries);
	        this._isMap = isMap;
	        this._init$(undefined, isMap ? -6 : -3);
	    }
	    util.inherits(PropertiesPromiseArray, PromiseArray);
	
	    PropertiesPromiseArray.prototype._init = function () {};
	
	    PropertiesPromiseArray.prototype._promiseFulfilled = function (value, index) {
	        this._values[index] = value;
	        var totalResolved = ++this._totalResolved;
	        if (totalResolved >= this._length) {
	            var val;
	            if (this._isMap) {
	                val = entriesToMap(this._values);
	            } else {
	                val = {};
	                var keyOffset = this.length();
	                for (var i = 0, len = this.length(); i < len; ++i) {
	                    val[this._values[i + keyOffset]] = this._values[i];
	                }
	            }
	            this._resolve(val);
	            return true;
	        }
	        return false;
	    };
	
	    PropertiesPromiseArray.prototype.shouldCopyValues = function () {
	        return false;
	    };
	
	    PropertiesPromiseArray.prototype.getActualLength = function (len) {
	        return len >> 1;
	    };
	
	    function props(promises) {
	        var ret;
	        var castValue = tryConvertToPromise(promises);
	
	        if (!isObject(castValue)) {
	            return apiRejection("cannot await properties of a non-object\n\n    See http://goo.gl/MqrFmX\n");
	        } else if (castValue instanceof Promise) {
	            ret = castValue._then(Promise.props, undefined, undefined, undefined, undefined);
	        } else {
	            ret = new PropertiesPromiseArray(castValue).promise();
	        }
	
	        if (castValue instanceof Promise) {
	            ret._propagateFrom(castValue, 2);
	        }
	        return ret;
	    }
	
	    Promise.prototype.props = function () {
	        return props(this);
	    };
	
	    Promise.props = function (promises) {
	        return props(promises);
	    };
	};

/***/ },
/* 629 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = function (Promise, INTERNAL, tryConvertToPromise, apiRejection) {
	    var util = __webpack_require__(600);
	
	    var raceLater = function raceLater(promise) {
	        return promise.then(function (array) {
	            return race(array, promise);
	        });
	    };
	
	    function race(promises, parent) {
	        var maybePromise = tryConvertToPromise(promises);
	
	        if (maybePromise instanceof Promise) {
	            return raceLater(maybePromise);
	        } else {
	            promises = util.asArray(promises);
	            if (promises === null) return apiRejection("expecting an array or an iterable object but got " + util.classString(promises));
	        }
	
	        var ret = new Promise(INTERNAL);
	        if (parent !== undefined) {
	            ret._propagateFrom(parent, 3);
	        }
	        var fulfill = ret._fulfill;
	        var reject = ret._reject;
	        for (var i = 0, len = promises.length; i < len; ++i) {
	            var val = promises[i];
	
	            if (val === undefined && !(i in promises)) {
	                continue;
	            }
	
	            Promise.cast(val)._then(fulfill, reject, undefined, ret, null);
	        }
	        return ret;
	    }
	
	    Promise.race = function (promises) {
	        return race(promises, undefined);
	    };
	
	    Promise.prototype.race = function () {
	        return race(this, undefined);
	    };
	};

/***/ },
/* 630 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = function (Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug) {
	    var getDomain = Promise._getDomain;
	    var util = __webpack_require__(600);
	    var tryCatch = util.tryCatch;
	
	    function ReductionPromiseArray(promises, fn, initialValue, _each) {
	        this.constructor$(promises);
	        var domain = getDomain();
	        this._fn = domain === null ? fn : util.domainBind(domain, fn);
	        if (initialValue !== undefined) {
	            initialValue = Promise.resolve(initialValue);
	            initialValue._attachCancellationCallback(this);
	        }
	        this._initialValue = initialValue;
	        this._currentCancellable = null;
	        if (_each === INTERNAL) {
	            this._eachValues = Array(this._length);
	        } else if (_each === 0) {
	            this._eachValues = null;
	        } else {
	            this._eachValues = undefined;
	        }
	        this._promise._captureStackTrace();
	        this._init$(undefined, -5);
	    }
	    util.inherits(ReductionPromiseArray, PromiseArray);
	
	    ReductionPromiseArray.prototype._gotAccum = function (accum) {
	        if (this._eachValues !== undefined && this._eachValues !== null && accum !== INTERNAL) {
	            this._eachValues.push(accum);
	        }
	    };
	
	    ReductionPromiseArray.prototype._eachComplete = function (value) {
	        if (this._eachValues !== null) {
	            this._eachValues.push(value);
	        }
	        return this._eachValues;
	    };
	
	    ReductionPromiseArray.prototype._init = function () {};
	
	    ReductionPromiseArray.prototype._resolveEmptyArray = function () {
	        this._resolve(this._eachValues !== undefined ? this._eachValues : this._initialValue);
	    };
	
	    ReductionPromiseArray.prototype.shouldCopyValues = function () {
	        return false;
	    };
	
	    ReductionPromiseArray.prototype._resolve = function (value) {
	        this._promise._resolveCallback(value);
	        this._values = null;
	    };
	
	    ReductionPromiseArray.prototype._resultCancelled = function (sender) {
	        if (sender === this._initialValue) return this._cancel();
	        if (this._isResolved()) return;
	        this._resultCancelled$();
	        if (this._currentCancellable instanceof Promise) {
	            this._currentCancellable.cancel();
	        }
	        if (this._initialValue instanceof Promise) {
	            this._initialValue.cancel();
	        }
	    };
	
	    ReductionPromiseArray.prototype._iterate = function (values) {
	        this._values = values;
	        var value;
	        var i;
	        var length = values.length;
	        if (this._initialValue !== undefined) {
	            value = this._initialValue;
	            i = 0;
	        } else {
	            value = Promise.resolve(values[0]);
	            i = 1;
	        }
	
	        this._currentCancellable = value;
	
	        if (!value.isRejected()) {
	            for (; i < length; ++i) {
	                var ctx = {
	                    accum: null,
	                    value: values[i],
	                    index: i,
	                    length: length,
	                    array: this
	                };
	                value = value._then(gotAccum, undefined, undefined, ctx, undefined);
	            }
	        }
	
	        if (this._eachValues !== undefined) {
	            value = value._then(this._eachComplete, undefined, undefined, this, undefined);
	        }
	        value._then(completed, completed, undefined, value, this);
	    };
	
	    Promise.prototype.reduce = function (fn, initialValue) {
	        return reduce(this, fn, initialValue, null);
	    };
	
	    Promise.reduce = function (promises, fn, initialValue, _each) {
	        return reduce(promises, fn, initialValue, _each);
	    };
	
	    function completed(valueOrReason, array) {
	        if (this.isFulfilled()) {
	            array._resolve(valueOrReason);
	        } else {
	            array._reject(valueOrReason);
	        }
	    }
	
	    function reduce(promises, fn, initialValue, _each) {
	        if (typeof fn !== "function") {
	            return apiRejection("expecting a function but got " + util.classString(fn));
	        }
	        var array = new ReductionPromiseArray(promises, fn, initialValue, _each);
	        return array.promise();
	    }
	
	    function gotAccum(accum) {
	        this.accum = accum;
	        this.array._gotAccum(accum);
	        var value = tryConvertToPromise(this.value, this.array._promise);
	        if (value instanceof Promise) {
	            this.array._currentCancellable = value;
	            return value._then(gotValue, undefined, undefined, this, undefined);
	        } else {
	            return gotValue.call(this, value);
	        }
	    }
	
	    function gotValue(value) {
	        var array = this.array;
	        var promise = array._promise;
	        var fn = tryCatch(array._fn);
	        promise._pushContext();
	        var ret;
	        if (array._eachValues !== undefined) {
	            ret = fn.call(promise._boundValue(), value, this.index, this.length);
	        } else {
	            ret = fn.call(promise._boundValue(), this.accum, value, this.index, this.length);
	        }
	        if (ret instanceof Promise) {
	            array._currentCancellable = ret;
	        }
	        var promiseCreated = promise._popContext();
	        debug.checkForgottenReturns(ret, promiseCreated, array._eachValues !== undefined ? "Promise.each" : "Promise.reduce", promise);
	        return ret;
	    }
	};

/***/ },
/* 631 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = function (Promise, PromiseArray, debug) {
	    var PromiseInspection = Promise.PromiseInspection;
	    var util = __webpack_require__(600);
	
	    function SettledPromiseArray(values) {
	        this.constructor$(values);
	    }
	    util.inherits(SettledPromiseArray, PromiseArray);
	
	    SettledPromiseArray.prototype._promiseResolved = function (index, inspection) {
	        this._values[index] = inspection;
	        var totalResolved = ++this._totalResolved;
	        if (totalResolved >= this._length) {
	            this._resolve(this._values);
	            return true;
	        }
	        return false;
	    };
	
	    SettledPromiseArray.prototype._promiseFulfilled = function (value, index) {
	        var ret = new PromiseInspection();
	        ret._bitField = 33554432;
	        ret._settledValueField = value;
	        return this._promiseResolved(index, ret);
	    };
	    SettledPromiseArray.prototype._promiseRejected = function (reason, index) {
	        var ret = new PromiseInspection();
	        ret._bitField = 16777216;
	        ret._settledValueField = reason;
	        return this._promiseResolved(index, ret);
	    };
	
	    Promise.settle = function (promises) {
	        debug.deprecated(".settle()", ".reflect()");
	        return new SettledPromiseArray(promises).promise();
	    };
	
	    Promise.prototype.settle = function () {
	        return Promise.settle(this);
	    };
	};

/***/ },
/* 632 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = function (Promise, PromiseArray, apiRejection) {
	    var util = __webpack_require__(600);
	    var RangeError = __webpack_require__(607).RangeError;
	    var AggregateError = __webpack_require__(607).AggregateError;
	    var isArray = util.isArray;
	    var CANCELLATION = {};
	
	    function SomePromiseArray(values) {
	        this.constructor$(values);
	        this._howMany = 0;
	        this._unwrap = false;
	        this._initialized = false;
	    }
	    util.inherits(SomePromiseArray, PromiseArray);
	
	    SomePromiseArray.prototype._init = function () {
	        if (!this._initialized) {
	            return;
	        }
	        if (this._howMany === 0) {
	            this._resolve([]);
	            return;
	        }
	        this._init$(undefined, -5);
	        var isArrayResolved = isArray(this._values);
	        if (!this._isResolved() && isArrayResolved && this._howMany > this._canPossiblyFulfill()) {
	            this._reject(this._getRangeError(this.length()));
	        }
	    };
	
	    SomePromiseArray.prototype.init = function () {
	        this._initialized = true;
	        this._init();
	    };
	
	    SomePromiseArray.prototype.setUnwrap = function () {
	        this._unwrap = true;
	    };
	
	    SomePromiseArray.prototype.howMany = function () {
	        return this._howMany;
	    };
	
	    SomePromiseArray.prototype.setHowMany = function (count) {
	        this._howMany = count;
	    };
	
	    SomePromiseArray.prototype._promiseFulfilled = function (value) {
	        this._addFulfilled(value);
	        if (this._fulfilled() === this.howMany()) {
	            this._values.length = this.howMany();
	            if (this.howMany() === 1 && this._unwrap) {
	                this._resolve(this._values[0]);
	            } else {
	                this._resolve(this._values);
	            }
	            return true;
	        }
	        return false;
	    };
	    SomePromiseArray.prototype._promiseRejected = function (reason) {
	        this._addRejected(reason);
	        return this._checkOutcome();
	    };
	
	    SomePromiseArray.prototype._promiseCancelled = function () {
	        if (this._values instanceof Promise || this._values == null) {
	            return this._cancel();
	        }
	        this._addRejected(CANCELLATION);
	        return this._checkOutcome();
	    };
	
	    SomePromiseArray.prototype._checkOutcome = function () {
	        if (this.howMany() > this._canPossiblyFulfill()) {
	            var e = new AggregateError();
	            for (var i = this.length(); i < this._values.length; ++i) {
	                if (this._values[i] !== CANCELLATION) {
	                    e.push(this._values[i]);
	                }
	            }
	            if (e.length > 0) {
	                this._reject(e);
	            } else {
	                this._cancel();
	            }
	            return true;
	        }
	        return false;
	    };
	
	    SomePromiseArray.prototype._fulfilled = function () {
	        return this._totalResolved;
	    };
	
	    SomePromiseArray.prototype._rejected = function () {
	        return this._values.length - this.length();
	    };
	
	    SomePromiseArray.prototype._addRejected = function (reason) {
	        this._values.push(reason);
	    };
	
	    SomePromiseArray.prototype._addFulfilled = function (value) {
	        this._values[this._totalResolved++] = value;
	    };
	
	    SomePromiseArray.prototype._canPossiblyFulfill = function () {
	        return this.length() - this._rejected();
	    };
	
	    SomePromiseArray.prototype._getRangeError = function (count) {
	        var message = "Input array must contain at least " + this._howMany + " items but contains only " + count + " items";
	        return new RangeError(message);
	    };
	
	    SomePromiseArray.prototype._resolveEmptyArray = function () {
	        this._reject(this._getRangeError(0));
	    };
	
	    function some(promises, howMany) {
	        if ((howMany | 0) !== howMany || howMany < 0) {
	            return apiRejection("expecting a positive integer\n\n    See http://goo.gl/MqrFmX\n");
	        }
	        var ret = new SomePromiseArray(promises);
	        var promise = ret.promise();
	        ret.setHowMany(howMany);
	        ret.init();
	        return promise;
	    }
	
	    Promise.some = function (promises, howMany) {
	        return some(promises, howMany);
	    };
	
	    Promise.prototype.some = function (howMany) {
	        return some(this, howMany);
	    };
	
	    Promise._SomePromiseArray = SomePromiseArray;
	};

/***/ },
/* 633 */
/***/ function(module, exports) {

	"use strict";
	
	module.exports = function (Promise, INTERNAL) {
	    var PromiseMap = Promise.map;
	
	    Promise.prototype.filter = function (fn, options) {
	        return PromiseMap(this, fn, options, INTERNAL);
	    };
	
	    Promise.filter = function (promises, fn, options) {
	        return PromiseMap(promises, fn, options, INTERNAL);
	    };
	};

/***/ },
/* 634 */
/***/ function(module, exports) {

	"use strict";
	
	module.exports = function (Promise, INTERNAL) {
	    var PromiseReduce = Promise.reduce;
	    var PromiseAll = Promise.all;
	
	    function promiseAllThis() {
	        return PromiseAll(this);
	    }
	
	    function PromiseMapSeries(promises, fn) {
	        return PromiseReduce(promises, fn, INTERNAL, INTERNAL);
	    }
	
	    Promise.prototype.each = function (fn) {
	        return PromiseReduce(this, fn, INTERNAL, 0)._then(promiseAllThis, undefined, undefined, this, undefined);
	    };
	
	    Promise.prototype.mapSeries = function (fn) {
	        return PromiseReduce(this, fn, INTERNAL, INTERNAL);
	    };
	
	    Promise.each = function (promises, fn) {
	        return PromiseReduce(promises, fn, INTERNAL, 0)._then(promiseAllThis, undefined, undefined, promises, undefined);
	    };
	
	    Promise.mapSeries = PromiseMapSeries;
	};

/***/ },
/* 635 */
/***/ function(module, exports) {

	"use strict";
	
	module.exports = function (Promise) {
	    var SomePromiseArray = Promise._SomePromiseArray;
	    function any(promises) {
	        var ret = new SomePromiseArray(promises);
	        var promise = ret.promise();
	        ret.setHowMany(1);
	        ret.setUnwrap();
	        ret.init();
	        return promise;
	    }
	
	    Promise.any = function (promises) {
	        return any(promises);
	    };
	
	    Promise.prototype.any = function () {
	        return any(this);
	    };
	};

/***/ },
/* 636 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Mnemonic = __webpack_require__(637);
	
	module.exports = function (encryptedWallet, password) {
	  try {
	    var decryptedWallet = Mnemonic.decryptMnemonic(encryptedWallet, password);
	    if (!Mnemonic.validateMnemonic(decryptedWallet)) {
	      throw new Error('Error validating generated mnemonic words.');
	    }
	    return decryptedWallet;
	  } catch (err) {
	    throw err.response ? err.response.data : new Error(err);
	  }
	};

/***/ },
/* 637 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var CryptoJS = __webpack_require__(638);
	
	var encryptMnemonic = function encryptMnemonic(mnemonic, passphrase) {
	  var ciphertext = CryptoJS.AES.encrypt(mnemonic, passphrase);
	  return ciphertext.toString();
	};
	
	var decryptMnemonic = function decryptMnemonic(cipherText, passphrase) {
	  var bytes = CryptoJS.AES.decrypt(cipherText, passphrase);
	  var decipherText = bytes.toString(CryptoJS.enc.Utf8);
	  return decipherText;
	};
	
	module.exports = {
	  encryptMnemonic: encryptMnemonic,
	  decryptMnemonic: decryptMnemonic
	};

/***/ },
/* 638 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	;(function (root, factory, undef) {
		if (( false ? "undefined" : _typeof(exports)) === "object") {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(639), __webpack_require__(640), __webpack_require__(641), __webpack_require__(642), __webpack_require__(643), __webpack_require__(644), __webpack_require__(645), __webpack_require__(646), __webpack_require__(647), __webpack_require__(648), __webpack_require__(649), __webpack_require__(650), __webpack_require__(651), __webpack_require__(652), __webpack_require__(653), __webpack_require__(654), __webpack_require__(655), __webpack_require__(656), __webpack_require__(657), __webpack_require__(658), __webpack_require__(659), __webpack_require__(660), __webpack_require__(661), __webpack_require__(662), __webpack_require__(663), __webpack_require__(664), __webpack_require__(665), __webpack_require__(666), __webpack_require__(667), __webpack_require__(668), __webpack_require__(669), __webpack_require__(670), __webpack_require__(671));
		} else if (true) {
			// AMD
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(639), __webpack_require__(640), __webpack_require__(641), __webpack_require__(642), __webpack_require__(643), __webpack_require__(644), __webpack_require__(645), __webpack_require__(646), __webpack_require__(647), __webpack_require__(648), __webpack_require__(649), __webpack_require__(650), __webpack_require__(651), __webpack_require__(652), __webpack_require__(653), __webpack_require__(654), __webpack_require__(655), __webpack_require__(656), __webpack_require__(657), __webpack_require__(658), __webpack_require__(659), __webpack_require__(660), __webpack_require__(661), __webpack_require__(662), __webpack_require__(663), __webpack_require__(664), __webpack_require__(665), __webpack_require__(666), __webpack_require__(667), __webpack_require__(668), __webpack_require__(669), __webpack_require__(670), __webpack_require__(671)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			// Global (browser)
			root.CryptoJS = factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		return CryptoJS;
	});

/***/ },
/* 639 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	;(function (root, factory) {
		if (( false ? "undefined" : _typeof(exports)) === "object") {
			// CommonJS
			module.exports = exports = factory();
		} else if (true) {
			// AMD
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			// Global (browser)
			root.CryptoJS = factory();
		}
	})(undefined, function () {
	
		/**
	  * CryptoJS core components.
	  */
		var CryptoJS = CryptoJS || function (Math, undefined) {
			/*
	   * Local polyfil of Object.create
	   */
			var create = Object.create || function () {
				function F() {};
	
				return function (obj) {
					var subtype;
	
					F.prototype = obj;
	
					subtype = new F();
	
					F.prototype = null;
	
					return subtype;
				};
			}();
	
			/**
	   * CryptoJS namespace.
	   */
			var C = {};
	
			/**
	   * Library namespace.
	   */
			var C_lib = C.lib = {};
	
			/**
	   * Base object for prototypal inheritance.
	   */
			var Base = C_lib.Base = function () {
	
				return {
					/**
	     * Creates a new object that inherits from this object.
	     *
	     * @param {Object} overrides Properties to copy into the new object.
	     *
	     * @return {Object} The new object.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var MyType = CryptoJS.lib.Base.extend({
	     *         field: 'value',
	     *
	     *         method: function () {
	     *         }
	     *     });
	     */
					extend: function extend(overrides) {
						// Spawn
						var subtype = create(this);
	
						// Augment
						if (overrides) {
							subtype.mixIn(overrides);
						}
	
						// Create default initializer
						if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
							subtype.init = function () {
								subtype.$super.init.apply(this, arguments);
							};
						}
	
						// Initializer's prototype is the subtype object
						subtype.init.prototype = subtype;
	
						// Reference supertype
						subtype.$super = this;
	
						return subtype;
					},
	
					/**
	     * Extends this object and runs the init method.
	     * Arguments to create() will be passed to init().
	     *
	     * @return {Object} The new object.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var instance = MyType.create();
	     */
					create: function create() {
						var instance = this.extend();
						instance.init.apply(instance, arguments);
	
						return instance;
					},
	
					/**
	     * Initializes a newly created object.
	     * Override this method to add some logic when your objects are created.
	     *
	     * @example
	     *
	     *     var MyType = CryptoJS.lib.Base.extend({
	     *         init: function () {
	     *             // ...
	     *         }
	     *     });
	     */
					init: function init() {},
	
					/**
	     * Copies properties into this object.
	     *
	     * @param {Object} properties The properties to mix in.
	     *
	     * @example
	     *
	     *     MyType.mixIn({
	     *         field: 'value'
	     *     });
	     */
					mixIn: function mixIn(properties) {
						for (var propertyName in properties) {
							if (properties.hasOwnProperty(propertyName)) {
								this[propertyName] = properties[propertyName];
							}
						}
	
						// IE won't copy toString using the loop above
						if (properties.hasOwnProperty('toString')) {
							this.toString = properties.toString;
						}
					},
	
					/**
	     * Creates a copy of this object.
	     *
	     * @return {Object} The clone.
	     *
	     * @example
	     *
	     *     var clone = instance.clone();
	     */
					clone: function clone() {
						return this.init.prototype.extend(this);
					}
				};
			}();
	
			/**
	   * An array of 32-bit words.
	   *
	   * @property {Array} words The array of 32-bit words.
	   * @property {number} sigBytes The number of significant bytes in this word array.
	   */
			var WordArray = C_lib.WordArray = Base.extend({
				/**
	    * Initializes a newly created word array.
	    *
	    * @param {Array} words (Optional) An array of 32-bit words.
	    * @param {number} sigBytes (Optional) The number of significant bytes in the words.
	    *
	    * @example
	    *
	    *     var wordArray = CryptoJS.lib.WordArray.create();
	    *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
	    *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
	    */
				init: function init(words, sigBytes) {
					words = this.words = words || [];
	
					if (sigBytes != undefined) {
						this.sigBytes = sigBytes;
					} else {
						this.sigBytes = words.length * 4;
					}
				},
	
				/**
	    * Converts this word array to a string.
	    *
	    * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
	    *
	    * @return {string} The stringified word array.
	    *
	    * @example
	    *
	    *     var string = wordArray + '';
	    *     var string = wordArray.toString();
	    *     var string = wordArray.toString(CryptoJS.enc.Utf8);
	    */
				toString: function toString(encoder) {
					return (encoder || Hex).stringify(this);
				},
	
				/**
	    * Concatenates a word array to this word array.
	    *
	    * @param {WordArray} wordArray The word array to append.
	    *
	    * @return {WordArray} This word array.
	    *
	    * @example
	    *
	    *     wordArray1.concat(wordArray2);
	    */
				concat: function concat(wordArray) {
					// Shortcuts
					var thisWords = this.words;
					var thatWords = wordArray.words;
					var thisSigBytes = this.sigBytes;
					var thatSigBytes = wordArray.sigBytes;
	
					// Clamp excess bits
					this.clamp();
	
					// Concat
					if (thisSigBytes % 4) {
						// Copy one byte at a time
						for (var i = 0; i < thatSigBytes; i++) {
							var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
							thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;
						}
					} else {
						// Copy one word at a time
						for (var i = 0; i < thatSigBytes; i += 4) {
							thisWords[thisSigBytes + i >>> 2] = thatWords[i >>> 2];
						}
					}
					this.sigBytes += thatSigBytes;
	
					// Chainable
					return this;
				},
	
				/**
	    * Removes insignificant bits.
	    *
	    * @example
	    *
	    *     wordArray.clamp();
	    */
				clamp: function clamp() {
					// Shortcuts
					var words = this.words;
					var sigBytes = this.sigBytes;
	
					// Clamp
					words[sigBytes >>> 2] &= 0xffffffff << 32 - sigBytes % 4 * 8;
					words.length = Math.ceil(sigBytes / 4);
				},
	
				/**
	    * Creates a copy of this word array.
	    *
	    * @return {WordArray} The clone.
	    *
	    * @example
	    *
	    *     var clone = wordArray.clone();
	    */
				clone: function clone() {
					var clone = Base.clone.call(this);
					clone.words = this.words.slice(0);
	
					return clone;
				},
	
				/**
	    * Creates a word array filled with random bytes.
	    *
	    * @param {number} nBytes The number of random bytes to generate.
	    *
	    * @return {WordArray} The random word array.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var wordArray = CryptoJS.lib.WordArray.random(16);
	    */
				random: function random(nBytes) {
					var words = [];
	
					var r = function r(m_w) {
						var m_w = m_w;
						var m_z = 0x3ade68b1;
						var mask = 0xffffffff;
	
						return function () {
							m_z = 0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10) & mask;
							m_w = 0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10) & mask;
							var result = (m_z << 0x10) + m_w & mask;
							result /= 0x100000000;
							result += 0.5;
							return result * (Math.random() > .5 ? 1 : -1);
						};
					};
	
					for (var i = 0, rcache; i < nBytes; i += 4) {
						var _r = r((rcache || Math.random()) * 0x100000000);
	
						rcache = _r() * 0x3ade67b7;
						words.push(_r() * 0x100000000 | 0);
					}
	
					return new WordArray.init(words, nBytes);
				}
			});
	
			/**
	   * Encoder namespace.
	   */
			var C_enc = C.enc = {};
	
			/**
	   * Hex encoding strategy.
	   */
			var Hex = C_enc.Hex = {
				/**
	    * Converts a word array to a hex string.
	    *
	    * @param {WordArray} wordArray The word array.
	    *
	    * @return {string} The hex string.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
	    */
				stringify: function stringify(wordArray) {
					// Shortcuts
					var words = wordArray.words;
					var sigBytes = wordArray.sigBytes;
	
					// Convert
					var hexChars = [];
					for (var i = 0; i < sigBytes; i++) {
						var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
						hexChars.push((bite >>> 4).toString(16));
						hexChars.push((bite & 0x0f).toString(16));
					}
	
					return hexChars.join('');
				},
	
				/**
	    * Converts a hex string to a word array.
	    *
	    * @param {string} hexStr The hex string.
	    *
	    * @return {WordArray} The word array.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
	    */
				parse: function parse(hexStr) {
					// Shortcut
					var hexStrLength = hexStr.length;
	
					// Convert
					var words = [];
					for (var i = 0; i < hexStrLength; i += 2) {
						words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;
					}
	
					return new WordArray.init(words, hexStrLength / 2);
				}
			};
	
			/**
	   * Latin1 encoding strategy.
	   */
			var Latin1 = C_enc.Latin1 = {
				/**
	    * Converts a word array to a Latin1 string.
	    *
	    * @param {WordArray} wordArray The word array.
	    *
	    * @return {string} The Latin1 string.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
	    */
				stringify: function stringify(wordArray) {
					// Shortcuts
					var words = wordArray.words;
					var sigBytes = wordArray.sigBytes;
	
					// Convert
					var latin1Chars = [];
					for (var i = 0; i < sigBytes; i++) {
						var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
						latin1Chars.push(String.fromCharCode(bite));
					}
	
					return latin1Chars.join('');
				},
	
				/**
	    * Converts a Latin1 string to a word array.
	    *
	    * @param {string} latin1Str The Latin1 string.
	    *
	    * @return {WordArray} The word array.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
	    */
				parse: function parse(latin1Str) {
					// Shortcut
					var latin1StrLength = latin1Str.length;
	
					// Convert
					var words = [];
					for (var i = 0; i < latin1StrLength; i++) {
						words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << 24 - i % 4 * 8;
					}
	
					return new WordArray.init(words, latin1StrLength);
				}
			};
	
			/**
	   * UTF-8 encoding strategy.
	   */
			var Utf8 = C_enc.Utf8 = {
				/**
	    * Converts a word array to a UTF-8 string.
	    *
	    * @param {WordArray} wordArray The word array.
	    *
	    * @return {string} The UTF-8 string.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
	    */
				stringify: function stringify(wordArray) {
					try {
						return decodeURIComponent(escape(Latin1.stringify(wordArray)));
					} catch (e) {
						throw new Error('Malformed UTF-8 data');
					}
				},
	
				/**
	    * Converts a UTF-8 string to a word array.
	    *
	    * @param {string} utf8Str The UTF-8 string.
	    *
	    * @return {WordArray} The word array.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
	    */
				parse: function parse(utf8Str) {
					return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
				}
			};
	
			/**
	   * Abstract buffered block algorithm template.
	   *
	   * The property blockSize must be implemented in a concrete subtype.
	   *
	   * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
	   */
			var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
				/**
	    * Resets this block algorithm's data buffer to its initial state.
	    *
	    * @example
	    *
	    *     bufferedBlockAlgorithm.reset();
	    */
				reset: function reset() {
					// Initial values
					this._data = new WordArray.init();
					this._nDataBytes = 0;
				},
	
				/**
	    * Adds new data to this block algorithm's buffer.
	    *
	    * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
	    *
	    * @example
	    *
	    *     bufferedBlockAlgorithm._append('data');
	    *     bufferedBlockAlgorithm._append(wordArray);
	    */
				_append: function _append(data) {
					// Convert string to WordArray, else assume WordArray already
					if (typeof data == 'string') {
						data = Utf8.parse(data);
					}
	
					// Append
					this._data.concat(data);
					this._nDataBytes += data.sigBytes;
				},
	
				/**
	    * Processes available data blocks.
	    *
	    * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
	    *
	    * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
	    *
	    * @return {WordArray} The processed data.
	    *
	    * @example
	    *
	    *     var processedData = bufferedBlockAlgorithm._process();
	    *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
	    */
				_process: function _process(doFlush) {
					// Shortcuts
					var data = this._data;
					var dataWords = data.words;
					var dataSigBytes = data.sigBytes;
					var blockSize = this.blockSize;
					var blockSizeBytes = blockSize * 4;
	
					// Count blocks ready
					var nBlocksReady = dataSigBytes / blockSizeBytes;
					if (doFlush) {
						// Round up to include partial blocks
						nBlocksReady = Math.ceil(nBlocksReady);
					} else {
						// Round down to include only full blocks,
						// less the number of blocks that must remain in the buffer
						nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
					}
	
					// Count words ready
					var nWordsReady = nBlocksReady * blockSize;
	
					// Count bytes ready
					var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);
	
					// Process blocks
					if (nWordsReady) {
						for (var offset = 0; offset < nWordsReady; offset += blockSize) {
							// Perform concrete-algorithm logic
							this._doProcessBlock(dataWords, offset);
						}
	
						// Remove processed words
						var processedWords = dataWords.splice(0, nWordsReady);
						data.sigBytes -= nBytesReady;
					}
	
					// Return processed words
					return new WordArray.init(processedWords, nBytesReady);
				},
	
				/**
	    * Creates a copy of this object.
	    *
	    * @return {Object} The clone.
	    *
	    * @example
	    *
	    *     var clone = bufferedBlockAlgorithm.clone();
	    */
				clone: function clone() {
					var clone = Base.clone.call(this);
					clone._data = this._data.clone();
	
					return clone;
				},
	
				_minBufferSize: 0
			});
	
			/**
	   * Abstract hasher template.
	   *
	   * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
	   */
			var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
				/**
	    * Configuration options.
	    */
				cfg: Base.extend(),
	
				/**
	    * Initializes a newly created hasher.
	    *
	    * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
	    *
	    * @example
	    *
	    *     var hasher = CryptoJS.algo.SHA256.create();
	    */
				init: function init(cfg) {
					// Apply config defaults
					this.cfg = this.cfg.extend(cfg);
	
					// Set initial values
					this.reset();
				},
	
				/**
	    * Resets this hasher to its initial state.
	    *
	    * @example
	    *
	    *     hasher.reset();
	    */
				reset: function reset() {
					// Reset data buffer
					BufferedBlockAlgorithm.reset.call(this);
	
					// Perform concrete-hasher logic
					this._doReset();
				},
	
				/**
	    * Updates this hasher with a message.
	    *
	    * @param {WordArray|string} messageUpdate The message to append.
	    *
	    * @return {Hasher} This hasher.
	    *
	    * @example
	    *
	    *     hasher.update('message');
	    *     hasher.update(wordArray);
	    */
				update: function update(messageUpdate) {
					// Append
					this._append(messageUpdate);
	
					// Update the hash
					this._process();
	
					// Chainable
					return this;
				},
	
				/**
	    * Finalizes the hash computation.
	    * Note that the finalize operation is effectively a destructive, read-once operation.
	    *
	    * @param {WordArray|string} messageUpdate (Optional) A final message update.
	    *
	    * @return {WordArray} The hash.
	    *
	    * @example
	    *
	    *     var hash = hasher.finalize();
	    *     var hash = hasher.finalize('message');
	    *     var hash = hasher.finalize(wordArray);
	    */
				finalize: function finalize(messageUpdate) {
					// Final message update
					if (messageUpdate) {
						this._append(messageUpdate);
					}
	
					// Perform concrete-hasher logic
					var hash = this._doFinalize();
	
					return hash;
				},
	
				blockSize: 512 / 32,
	
				/**
	    * Creates a shortcut function to a hasher's object interface.
	    *
	    * @param {Hasher} hasher The hasher to create a helper for.
	    *
	    * @return {Function} The shortcut function.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
	    */
				_createHelper: function _createHelper(hasher) {
					return function (message, cfg) {
						return new hasher.init(cfg).finalize(message);
					};
				},
	
				/**
	    * Creates a shortcut function to the HMAC's object interface.
	    *
	    * @param {Hasher} hasher The hasher to use in this HMAC helper.
	    *
	    * @return {Function} The shortcut function.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
	    */
				_createHmacHelper: function _createHmacHelper(hasher) {
					return function (message, key) {
						return new C_algo.HMAC.init(hasher, key).finalize(message);
					};
				}
			});
	
			/**
	   * Algorithm namespace.
	   */
			var C_algo = C.algo = {};
	
			return C;
		}(Math);
	
		return CryptoJS;
	});

/***/ },
/* 640 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	;(function (root, factory) {
		if (( false ? "undefined" : _typeof(exports)) === "object") {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(639));
		} else if (true) {
			// AMD
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(639)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		(function (undefined) {
			// Shortcuts
			var C = CryptoJS;
			var C_lib = C.lib;
			var Base = C_lib.Base;
			var X32WordArray = C_lib.WordArray;
	
			/**
	   * x64 namespace.
	   */
			var C_x64 = C.x64 = {};
	
			/**
	   * A 64-bit word.
	   */
			var X64Word = C_x64.Word = Base.extend({
				/**
	    * Initializes a newly created 64-bit word.
	    *
	    * @param {number} high The high 32 bits.
	    * @param {number} low The low 32 bits.
	    *
	    * @example
	    *
	    *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
	    */
				init: function init(high, low) {
					this.high = high;
					this.low = low;
				}
	
				/**
	    * Bitwise NOTs this word.
	    *
	    * @return {X64Word} A new x64-Word object after negating.
	    *
	    * @example
	    *
	    *     var negated = x64Word.not();
	    */
				// not: function () {
				// var high = ~this.high;
				// var low = ~this.low;
	
				// return X64Word.create(high, low);
				// },
	
				/**
	    * Bitwise ANDs this word with the passed word.
	    *
	    * @param {X64Word} word The x64-Word to AND with this word.
	    *
	    * @return {X64Word} A new x64-Word object after ANDing.
	    *
	    * @example
	    *
	    *     var anded = x64Word.and(anotherX64Word);
	    */
				// and: function (word) {
				// var high = this.high & word.high;
				// var low = this.low & word.low;
	
				// return X64Word.create(high, low);
				// },
	
				/**
	    * Bitwise ORs this word with the passed word.
	    *
	    * @param {X64Word} word The x64-Word to OR with this word.
	    *
	    * @return {X64Word} A new x64-Word object after ORing.
	    *
	    * @example
	    *
	    *     var ored = x64Word.or(anotherX64Word);
	    */
				// or: function (word) {
				// var high = this.high | word.high;
				// var low = this.low | word.low;
	
				// return X64Word.create(high, low);
				// },
	
				/**
	    * Bitwise XORs this word with the passed word.
	    *
	    * @param {X64Word} word The x64-Word to XOR with this word.
	    *
	    * @return {X64Word} A new x64-Word object after XORing.
	    *
	    * @example
	    *
	    *     var xored = x64Word.xor(anotherX64Word);
	    */
				// xor: function (word) {
				// var high = this.high ^ word.high;
				// var low = this.low ^ word.low;
	
				// return X64Word.create(high, low);
				// },
	
				/**
	    * Shifts this word n bits to the left.
	    *
	    * @param {number} n The number of bits to shift.
	    *
	    * @return {X64Word} A new x64-Word object after shifting.
	    *
	    * @example
	    *
	    *     var shifted = x64Word.shiftL(25);
	    */
				// shiftL: function (n) {
				// if (n < 32) {
				// var high = (this.high << n) | (this.low >>> (32 - n));
				// var low = this.low << n;
				// } else {
				// var high = this.low << (n - 32);
				// var low = 0;
				// }
	
				// return X64Word.create(high, low);
				// },
	
				/**
	    * Shifts this word n bits to the right.
	    *
	    * @param {number} n The number of bits to shift.
	    *
	    * @return {X64Word} A new x64-Word object after shifting.
	    *
	    * @example
	    *
	    *     var shifted = x64Word.shiftR(7);
	    */
				// shiftR: function (n) {
				// if (n < 32) {
				// var low = (this.low >>> n) | (this.high << (32 - n));
				// var high = this.high >>> n;
				// } else {
				// var low = this.high >>> (n - 32);
				// var high = 0;
				// }
	
				// return X64Word.create(high, low);
				// },
	
				/**
	    * Rotates this word n bits to the left.
	    *
	    * @param {number} n The number of bits to rotate.
	    *
	    * @return {X64Word} A new x64-Word object after rotating.
	    *
	    * @example
	    *
	    *     var rotated = x64Word.rotL(25);
	    */
				// rotL: function (n) {
				// return this.shiftL(n).or(this.shiftR(64 - n));
				// },
	
				/**
	    * Rotates this word n bits to the right.
	    *
	    * @param {number} n The number of bits to rotate.
	    *
	    * @return {X64Word} A new x64-Word object after rotating.
	    *
	    * @example
	    *
	    *     var rotated = x64Word.rotR(7);
	    */
				// rotR: function (n) {
				// return this.shiftR(n).or(this.shiftL(64 - n));
				// },
	
				/**
	    * Adds this word with the passed word.
	    *
	    * @param {X64Word} word The x64-Word to add with this word.
	    *
	    * @return {X64Word} A new x64-Word object after adding.
	    *
	    * @example
	    *
	    *     var added = x64Word.add(anotherX64Word);
	    */
				// add: function (word) {
				// var low = (this.low + word.low) | 0;
				// var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
				// var high = (this.high + word.high + carry) | 0;
	
				// return X64Word.create(high, low);
				// }
			});
	
			/**
	   * An array of 64-bit words.
	   *
	   * @property {Array} words The array of CryptoJS.x64.Word objects.
	   * @property {number} sigBytes The number of significant bytes in this word array.
	   */
			var X64WordArray = C_x64.WordArray = Base.extend({
				/**
	    * Initializes a newly created word array.
	    *
	    * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
	    * @param {number} sigBytes (Optional) The number of significant bytes in the words.
	    *
	    * @example
	    *
	    *     var wordArray = CryptoJS.x64.WordArray.create();
	    *
	    *     var wordArray = CryptoJS.x64.WordArray.create([
	    *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
	    *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
	    *     ]);
	    *
	    *     var wordArray = CryptoJS.x64.WordArray.create([
	    *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
	    *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
	    *     ], 10);
	    */
				init: function init(words, sigBytes) {
					words = this.words = words || [];
	
					if (sigBytes != undefined) {
						this.sigBytes = sigBytes;
					} else {
						this.sigBytes = words.length * 8;
					}
				},
	
				/**
	    * Converts this 64-bit word array to a 32-bit word array.
	    *
	    * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
	    *
	    * @example
	    *
	    *     var x32WordArray = x64WordArray.toX32();
	    */
				toX32: function toX32() {
					// Shortcuts
					var x64Words = this.words;
					var x64WordsLength = x64Words.length;
	
					// Convert
					var x32Words = [];
					for (var i = 0; i < x64WordsLength; i++) {
						var x64Word = x64Words[i];
						x32Words.push(x64Word.high);
						x32Words.push(x64Word.low);
					}
	
					return X32WordArray.create(x32Words, this.sigBytes);
				},
	
				/**
	    * Creates a copy of this word array.
	    *
	    * @return {X64WordArray} The clone.
	    *
	    * @example
	    *
	    *     var clone = x64WordArray.clone();
	    */
				clone: function clone() {
					var clone = Base.clone.call(this);
	
					// Clone "words" array
					var words = clone.words = this.words.slice(0);
	
					// Clone each X64Word object
					var wordsLength = words.length;
					for (var i = 0; i < wordsLength; i++) {
						words[i] = words[i].clone();
					}
	
					return clone;
				}
			});
		})();
	
		return CryptoJS;
	});

/***/ },
/* 641 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	;(function (root, factory) {
		if (( false ? "undefined" : _typeof(exports)) === "object") {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(639));
		} else if (true) {
			// AMD
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(639)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		(function () {
			// Check if typed arrays are supported
			if (typeof ArrayBuffer != 'function') {
				return;
			}
	
			// Shortcuts
			var C = CryptoJS;
			var C_lib = C.lib;
			var WordArray = C_lib.WordArray;
	
			// Reference original init
			var superInit = WordArray.init;
	
			// Augment WordArray.init to handle typed arrays
			var subInit = WordArray.init = function (typedArray) {
				// Convert buffers to uint8
				if (typedArray instanceof ArrayBuffer) {
					typedArray = new Uint8Array(typedArray);
				}
	
				// Convert other array views to uint8
				if (typedArray instanceof Int8Array || typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray || typedArray instanceof Int16Array || typedArray instanceof Uint16Array || typedArray instanceof Int32Array || typedArray instanceof Uint32Array || typedArray instanceof Float32Array || typedArray instanceof Float64Array) {
					typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
				}
	
				// Handle Uint8Array
				if (typedArray instanceof Uint8Array) {
					// Shortcut
					var typedArrayByteLength = typedArray.byteLength;
	
					// Extract bytes
					var words = [];
					for (var i = 0; i < typedArrayByteLength; i++) {
						words[i >>> 2] |= typedArray[i] << 24 - i % 4 * 8;
					}
	
					// Initialize this word array
					superInit.call(this, words, typedArrayByteLength);
				} else {
					// Else call normal init
					superInit.apply(this, arguments);
				}
			};
	
			subInit.prototype = WordArray;
		})();
	
		return CryptoJS.lib.WordArray;
	});

/***/ },
/* 642 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	;(function (root, factory) {
		if (( false ? "undefined" : _typeof(exports)) === "object") {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(639));
		} else if (true) {
			// AMD
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(639)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		(function () {
			// Shortcuts
			var C = CryptoJS;
			var C_lib = C.lib;
			var WordArray = C_lib.WordArray;
			var C_enc = C.enc;
	
			/**
	   * UTF-16 BE encoding strategy.
	   */
			var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {
				/**
	    * Converts a word array to a UTF-16 BE string.
	    *
	    * @param {WordArray} wordArray The word array.
	    *
	    * @return {string} The UTF-16 BE string.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);
	    */
				stringify: function stringify(wordArray) {
					// Shortcuts
					var words = wordArray.words;
					var sigBytes = wordArray.sigBytes;
	
					// Convert
					var utf16Chars = [];
					for (var i = 0; i < sigBytes; i += 2) {
						var codePoint = words[i >>> 2] >>> 16 - i % 4 * 8 & 0xffff;
						utf16Chars.push(String.fromCharCode(codePoint));
					}
	
					return utf16Chars.join('');
				},
	
				/**
	    * Converts a UTF-16 BE string to a word array.
	    *
	    * @param {string} utf16Str The UTF-16 BE string.
	    *
	    * @return {WordArray} The word array.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);
	    */
				parse: function parse(utf16Str) {
					// Shortcut
					var utf16StrLength = utf16Str.length;
	
					// Convert
					var words = [];
					for (var i = 0; i < utf16StrLength; i++) {
						words[i >>> 1] |= utf16Str.charCodeAt(i) << 16 - i % 2 * 16;
					}
	
					return WordArray.create(words, utf16StrLength * 2);
				}
			};
	
			/**
	   * UTF-16 LE encoding strategy.
	   */
			C_enc.Utf16LE = {
				/**
	    * Converts a word array to a UTF-16 LE string.
	    *
	    * @param {WordArray} wordArray The word array.
	    *
	    * @return {string} The UTF-16 LE string.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);
	    */
				stringify: function stringify(wordArray) {
					// Shortcuts
					var words = wordArray.words;
					var sigBytes = wordArray.sigBytes;
	
					// Convert
					var utf16Chars = [];
					for (var i = 0; i < sigBytes; i += 2) {
						var codePoint = swapEndian(words[i >>> 2] >>> 16 - i % 4 * 8 & 0xffff);
						utf16Chars.push(String.fromCharCode(codePoint));
					}
	
					return utf16Chars.join('');
				},
	
				/**
	    * Converts a UTF-16 LE string to a word array.
	    *
	    * @param {string} utf16Str The UTF-16 LE string.
	    *
	    * @return {WordArray} The word array.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);
	    */
				parse: function parse(utf16Str) {
					// Shortcut
					var utf16StrLength = utf16Str.length;
	
					// Convert
					var words = [];
					for (var i = 0; i < utf16StrLength; i++) {
						words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << 16 - i % 2 * 16);
					}
	
					return WordArray.create(words, utf16StrLength * 2);
				}
			};
	
			function swapEndian(word) {
				return word << 8 & 0xff00ff00 | word >>> 8 & 0x00ff00ff;
			}
		})();
	
		return CryptoJS.enc.Utf16;
	});

/***/ },
/* 643 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	;(function (root, factory) {
		if (( false ? "undefined" : _typeof(exports)) === "object") {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(639));
		} else if (true) {
			// AMD
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(639)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		(function () {
			// Shortcuts
			var C = CryptoJS;
			var C_lib = C.lib;
			var WordArray = C_lib.WordArray;
			var C_enc = C.enc;
	
			/**
	   * Base64 encoding strategy.
	   */
			var Base64 = C_enc.Base64 = {
				/**
	    * Converts a word array to a Base64 string.
	    *
	    * @param {WordArray} wordArray The word array.
	    *
	    * @return {string} The Base64 string.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
	    */
				stringify: function stringify(wordArray) {
					// Shortcuts
					var words = wordArray.words;
					var sigBytes = wordArray.sigBytes;
					var map = this._map;
	
					// Clamp excess bits
					wordArray.clamp();
	
					// Convert
					var base64Chars = [];
					for (var i = 0; i < sigBytes; i += 3) {
						var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
						var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 0xff;
						var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 0xff;
	
						var triplet = byte1 << 16 | byte2 << 8 | byte3;
	
						for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {
							base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 0x3f));
						}
					}
	
					// Add padding
					var paddingChar = map.charAt(64);
					if (paddingChar) {
						while (base64Chars.length % 4) {
							base64Chars.push(paddingChar);
						}
					}
	
					return base64Chars.join('');
				},
	
				/**
	    * Converts a Base64 string to a word array.
	    *
	    * @param {string} base64Str The Base64 string.
	    *
	    * @return {WordArray} The word array.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
	    */
				parse: function parse(base64Str) {
					// Shortcuts
					var base64StrLength = base64Str.length;
					var map = this._map;
					var reverseMap = this._reverseMap;
	
					if (!reverseMap) {
						reverseMap = this._reverseMap = [];
						for (var j = 0; j < map.length; j++) {
							reverseMap[map.charCodeAt(j)] = j;
						}
					}
	
					// Ignore padding
					var paddingChar = map.charAt(64);
					if (paddingChar) {
						var paddingIndex = base64Str.indexOf(paddingChar);
						if (paddingIndex !== -1) {
							base64StrLength = paddingIndex;
						}
					}
	
					// Convert
					return parseLoop(base64Str, base64StrLength, reverseMap);
				},
	
				_map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
			};
	
			function parseLoop(base64Str, base64StrLength, reverseMap) {
				var words = [];
				var nBytes = 0;
				for (var i = 0; i < base64StrLength; i++) {
					if (i % 4) {
						var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;
						var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;
						words[nBytes >>> 2] |= (bits1 | bits2) << 24 - nBytes % 4 * 8;
						nBytes++;
					}
				}
				return WordArray.create(words, nBytes);
			}
		})();
	
		return CryptoJS.enc.Base64;
	});

/***/ },
/* 644 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	;(function (root, factory) {
		if (( false ? "undefined" : _typeof(exports)) === "object") {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(639));
		} else if (true) {
			// AMD
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(639)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		(function (Math) {
			// Shortcuts
			var C = CryptoJS;
			var C_lib = C.lib;
			var WordArray = C_lib.WordArray;
			var Hasher = C_lib.Hasher;
			var C_algo = C.algo;
	
			// Constants table
			var T = [];
	
			// Compute constants
			(function () {
				for (var i = 0; i < 64; i++) {
					T[i] = Math.abs(Math.sin(i + 1)) * 0x100000000 | 0;
				}
			})();
	
			/**
	   * MD5 hash algorithm.
	   */
			var MD5 = C_algo.MD5 = Hasher.extend({
				_doReset: function _doReset() {
					this._hash = new WordArray.init([0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476]);
				},
	
				_doProcessBlock: function _doProcessBlock(M, offset) {
					// Swap endian
					for (var i = 0; i < 16; i++) {
						// Shortcuts
						var offset_i = offset + i;
						var M_offset_i = M[offset_i];
	
						M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 0x00ff00ff | (M_offset_i << 24 | M_offset_i >>> 8) & 0xff00ff00;
					}
	
					// Shortcuts
					var H = this._hash.words;
	
					var M_offset_0 = M[offset + 0];
					var M_offset_1 = M[offset + 1];
					var M_offset_2 = M[offset + 2];
					var M_offset_3 = M[offset + 3];
					var M_offset_4 = M[offset + 4];
					var M_offset_5 = M[offset + 5];
					var M_offset_6 = M[offset + 6];
					var M_offset_7 = M[offset + 7];
					var M_offset_8 = M[offset + 8];
					var M_offset_9 = M[offset + 9];
					var M_offset_10 = M[offset + 10];
					var M_offset_11 = M[offset + 11];
					var M_offset_12 = M[offset + 12];
					var M_offset_13 = M[offset + 13];
					var M_offset_14 = M[offset + 14];
					var M_offset_15 = M[offset + 15];
	
					// Working varialbes
					var a = H[0];
					var b = H[1];
					var c = H[2];
					var d = H[3];
	
					// Computation
					a = FF(a, b, c, d, M_offset_0, 7, T[0]);
					d = FF(d, a, b, c, M_offset_1, 12, T[1]);
					c = FF(c, d, a, b, M_offset_2, 17, T[2]);
					b = FF(b, c, d, a, M_offset_3, 22, T[3]);
					a = FF(a, b, c, d, M_offset_4, 7, T[4]);
					d = FF(d, a, b, c, M_offset_5, 12, T[5]);
					c = FF(c, d, a, b, M_offset_6, 17, T[6]);
					b = FF(b, c, d, a, M_offset_7, 22, T[7]);
					a = FF(a, b, c, d, M_offset_8, 7, T[8]);
					d = FF(d, a, b, c, M_offset_9, 12, T[9]);
					c = FF(c, d, a, b, M_offset_10, 17, T[10]);
					b = FF(b, c, d, a, M_offset_11, 22, T[11]);
					a = FF(a, b, c, d, M_offset_12, 7, T[12]);
					d = FF(d, a, b, c, M_offset_13, 12, T[13]);
					c = FF(c, d, a, b, M_offset_14, 17, T[14]);
					b = FF(b, c, d, a, M_offset_15, 22, T[15]);
	
					a = GG(a, b, c, d, M_offset_1, 5, T[16]);
					d = GG(d, a, b, c, M_offset_6, 9, T[17]);
					c = GG(c, d, a, b, M_offset_11, 14, T[18]);
					b = GG(b, c, d, a, M_offset_0, 20, T[19]);
					a = GG(a, b, c, d, M_offset_5, 5, T[20]);
					d = GG(d, a, b, c, M_offset_10, 9, T[21]);
					c = GG(c, d, a, b, M_offset_15, 14, T[22]);
					b = GG(b, c, d, a, M_offset_4, 20, T[23]);
					a = GG(a, b, c, d, M_offset_9, 5, T[24]);
					d = GG(d, a, b, c, M_offset_14, 9, T[25]);
					c = GG(c, d, a, b, M_offset_3, 14, T[26]);
					b = GG(b, c, d, a, M_offset_8, 20, T[27]);
					a = GG(a, b, c, d, M_offset_13, 5, T[28]);
					d = GG(d, a, b, c, M_offset_2, 9, T[29]);
					c = GG(c, d, a, b, M_offset_7, 14, T[30]);
					b = GG(b, c, d, a, M_offset_12, 20, T[31]);
	
					a = HH(a, b, c, d, M_offset_5, 4, T[32]);
					d = HH(d, a, b, c, M_offset_8, 11, T[33]);
					c = HH(c, d, a, b, M_offset_11, 16, T[34]);
					b = HH(b, c, d, a, M_offset_14, 23, T[35]);
					a = HH(a, b, c, d, M_offset_1, 4, T[36]);
					d = HH(d, a, b, c, M_offset_4, 11, T[37]);
					c = HH(c, d, a, b, M_offset_7, 16, T[38]);
					b = HH(b, c, d, a, M_offset_10, 23, T[39]);
					a = HH(a, b, c, d, M_offset_13, 4, T[40]);
					d = HH(d, a, b, c, M_offset_0, 11, T[41]);
					c = HH(c, d, a, b, M_offset_3, 16, T[42]);
					b = HH(b, c, d, a, M_offset_6, 23, T[43]);
					a = HH(a, b, c, d, M_offset_9, 4, T[44]);
					d = HH(d, a, b, c, M_offset_12, 11, T[45]);
					c = HH(c, d, a, b, M_offset_15, 16, T[46]);
					b = HH(b, c, d, a, M_offset_2, 23, T[47]);
	
					a = II(a, b, c, d, M_offset_0, 6, T[48]);
					d = II(d, a, b, c, M_offset_7, 10, T[49]);
					c = II(c, d, a, b, M_offset_14, 15, T[50]);
					b = II(b, c, d, a, M_offset_5, 21, T[51]);
					a = II(a, b, c, d, M_offset_12, 6, T[52]);
					d = II(d, a, b, c, M_offset_3, 10, T[53]);
					c = II(c, d, a, b, M_offset_10, 15, T[54]);
					b = II(b, c, d, a, M_offset_1, 21, T[55]);
					a = II(a, b, c, d, M_offset_8, 6, T[56]);
					d = II(d, a, b, c, M_offset_15, 10, T[57]);
					c = II(c, d, a, b, M_offset_6, 15, T[58]);
					b = II(b, c, d, a, M_offset_13, 21, T[59]);
					a = II(a, b, c, d, M_offset_4, 6, T[60]);
					d = II(d, a, b, c, M_offset_11, 10, T[61]);
					c = II(c, d, a, b, M_offset_2, 15, T[62]);
					b = II(b, c, d, a, M_offset_9, 21, T[63]);
	
					// Intermediate hash value
					H[0] = H[0] + a | 0;
					H[1] = H[1] + b | 0;
					H[2] = H[2] + c | 0;
					H[3] = H[3] + d | 0;
				},
	
				_doFinalize: function _doFinalize() {
					// Shortcuts
					var data = this._data;
					var dataWords = data.words;
	
					var nBitsTotal = this._nDataBytes * 8;
					var nBitsLeft = data.sigBytes * 8;
	
					// Add padding
					dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
	
					var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
					var nBitsTotalL = nBitsTotal;
					dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 0x00ff00ff | (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 0xff00ff00;
					dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 0x00ff00ff | (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 0xff00ff00;
	
					data.sigBytes = (dataWords.length + 1) * 4;
	
					// Hash final blocks
					this._process();
	
					// Shortcuts
					var hash = this._hash;
					var H = hash.words;
	
					// Swap endian
					for (var i = 0; i < 4; i++) {
						// Shortcut
						var H_i = H[i];
	
						H[i] = (H_i << 8 | H_i >>> 24) & 0x00ff00ff | (H_i << 24 | H_i >>> 8) & 0xff00ff00;
					}
	
					// Return final computed hash
					return hash;
				},
	
				clone: function clone() {
					var clone = Hasher.clone.call(this);
					clone._hash = this._hash.clone();
	
					return clone;
				}
			});
	
			function FF(a, b, c, d, x, s, t) {
				var n = a + (b & c | ~b & d) + x + t;
				return (n << s | n >>> 32 - s) + b;
			}
	
			function GG(a, b, c, d, x, s, t) {
				var n = a + (b & d | c & ~d) + x + t;
				return (n << s | n >>> 32 - s) + b;
			}
	
			function HH(a, b, c, d, x, s, t) {
				var n = a + (b ^ c ^ d) + x + t;
				return (n << s | n >>> 32 - s) + b;
			}
	
			function II(a, b, c, d, x, s, t) {
				var n = a + (c ^ (b | ~d)) + x + t;
				return (n << s | n >>> 32 - s) + b;
			}
	
			/**
	   * Shortcut function to the hasher's object interface.
	   *
	   * @param {WordArray|string} message The message to hash.
	   *
	   * @return {WordArray} The hash.
	   *
	   * @static
	   *
	   * @example
	   *
	   *     var hash = CryptoJS.MD5('message');
	   *     var hash = CryptoJS.MD5(wordArray);
	   */
			C.MD5 = Hasher._createHelper(MD5);
	
			/**
	   * Shortcut function to the HMAC's object interface.
	   *
	   * @param {WordArray|string} message The message to hash.
	   * @param {WordArray|string} key The secret key.
	   *
	   * @return {WordArray} The HMAC.
	   *
	   * @static
	   *
	   * @example
	   *
	   *     var hmac = CryptoJS.HmacMD5(message, key);
	   */
			C.HmacMD5 = Hasher._createHmacHelper(MD5);
		})(Math);
	
		return CryptoJS.MD5;
	});

/***/ },
/* 645 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	;(function (root, factory) {
		if (( false ? "undefined" : _typeof(exports)) === "object") {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(639));
		} else if (true) {
			// AMD
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(639)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		(function () {
			// Shortcuts
			var C = CryptoJS;
			var C_lib = C.lib;
			var WordArray = C_lib.WordArray;
			var Hasher = C_lib.Hasher;
			var C_algo = C.algo;
	
			// Reusable object
			var W = [];
	
			/**
	   * SHA-1 hash algorithm.
	   */
			var SHA1 = C_algo.SHA1 = Hasher.extend({
				_doReset: function _doReset() {
					this._hash = new WordArray.init([0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0]);
				},
	
				_doProcessBlock: function _doProcessBlock(M, offset) {
					// Shortcut
					var H = this._hash.words;
	
					// Working variables
					var a = H[0];
					var b = H[1];
					var c = H[2];
					var d = H[3];
					var e = H[4];
	
					// Computation
					for (var i = 0; i < 80; i++) {
						if (i < 16) {
							W[i] = M[offset + i] | 0;
						} else {
							var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
							W[i] = n << 1 | n >>> 31;
						}
	
						var t = (a << 5 | a >>> 27) + e + W[i];
						if (i < 20) {
							t += (b & c | ~b & d) + 0x5a827999;
						} else if (i < 40) {
							t += (b ^ c ^ d) + 0x6ed9eba1;
						} else if (i < 60) {
							t += (b & c | b & d | c & d) - 0x70e44324;
						} else /* if (i < 80) */{
								t += (b ^ c ^ d) - 0x359d3e2a;
							}
	
						e = d;
						d = c;
						c = b << 30 | b >>> 2;
						b = a;
						a = t;
					}
	
					// Intermediate hash value
					H[0] = H[0] + a | 0;
					H[1] = H[1] + b | 0;
					H[2] = H[2] + c | 0;
					H[3] = H[3] + d | 0;
					H[4] = H[4] + e | 0;
				},
	
				_doFinalize: function _doFinalize() {
					// Shortcuts
					var data = this._data;
					var dataWords = data.words;
	
					var nBitsTotal = this._nDataBytes * 8;
					var nBitsLeft = data.sigBytes * 8;
	
					// Add padding
					dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
					dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
					dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
					data.sigBytes = dataWords.length * 4;
	
					// Hash final blocks
					this._process();
	
					// Return final computed hash
					return this._hash;
				},
	
				clone: function clone() {
					var clone = Hasher.clone.call(this);
					clone._hash = this._hash.clone();
	
					return clone;
				}
			});
	
			/**
	   * Shortcut function to the hasher's object interface.
	   *
	   * @param {WordArray|string} message The message to hash.
	   *
	   * @return {WordArray} The hash.
	   *
	   * @static
	   *
	   * @example
	   *
	   *     var hash = CryptoJS.SHA1('message');
	   *     var hash = CryptoJS.SHA1(wordArray);
	   */
			C.SHA1 = Hasher._createHelper(SHA1);
	
			/**
	   * Shortcut function to the HMAC's object interface.
	   *
	   * @param {WordArray|string} message The message to hash.
	   * @param {WordArray|string} key The secret key.
	   *
	   * @return {WordArray} The HMAC.
	   *
	   * @static
	   *
	   * @example
	   *
	   *     var hmac = CryptoJS.HmacSHA1(message, key);
	   */
			C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
		})();
	
		return CryptoJS.SHA1;
	});

/***/ },
/* 646 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	;(function (root, factory) {
		if (( false ? "undefined" : _typeof(exports)) === "object") {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(639));
		} else if (true) {
			// AMD
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(639)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		(function (Math) {
			// Shortcuts
			var C = CryptoJS;
			var C_lib = C.lib;
			var WordArray = C_lib.WordArray;
			var Hasher = C_lib.Hasher;
			var C_algo = C.algo;
	
			// Initialization and round constants tables
			var H = [];
			var K = [];
	
			// Compute constants
			(function () {
				function isPrime(n) {
					var sqrtN = Math.sqrt(n);
					for (var factor = 2; factor <= sqrtN; factor++) {
						if (!(n % factor)) {
							return false;
						}
					}
	
					return true;
				}
	
				function getFractionalBits(n) {
					return (n - (n | 0)) * 0x100000000 | 0;
				}
	
				var n = 2;
				var nPrime = 0;
				while (nPrime < 64) {
					if (isPrime(n)) {
						if (nPrime < 8) {
							H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));
						}
						K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));
	
						nPrime++;
					}
	
					n++;
				}
			})();
	
			// Reusable object
			var W = [];
	
			/**
	   * SHA-256 hash algorithm.
	   */
			var SHA256 = C_algo.SHA256 = Hasher.extend({
				_doReset: function _doReset() {
					this._hash = new WordArray.init(H.slice(0));
				},
	
				_doProcessBlock: function _doProcessBlock(M, offset) {
					// Shortcut
					var H = this._hash.words;
	
					// Working variables
					var a = H[0];
					var b = H[1];
					var c = H[2];
					var d = H[3];
					var e = H[4];
					var f = H[5];
					var g = H[6];
					var h = H[7];
	
					// Computation
					for (var i = 0; i < 64; i++) {
						if (i < 16) {
							W[i] = M[offset + i] | 0;
						} else {
							var gamma0x = W[i - 15];
							var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;
	
							var gamma1x = W[i - 2];
							var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
	
							W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
						}
	
						var ch = e & f ^ ~e & g;
						var maj = a & b ^ a & c ^ b & c;
	
						var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);
						var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);
	
						var t1 = h + sigma1 + ch + K[i] + W[i];
						var t2 = sigma0 + maj;
	
						h = g;
						g = f;
						f = e;
						e = d + t1 | 0;
						d = c;
						c = b;
						b = a;
						a = t1 + t2 | 0;
					}
	
					// Intermediate hash value
					H[0] = H[0] + a | 0;
					H[1] = H[1] + b | 0;
					H[2] = H[2] + c | 0;
					H[3] = H[3] + d | 0;
					H[4] = H[4] + e | 0;
					H[5] = H[5] + f | 0;
					H[6] = H[6] + g | 0;
					H[7] = H[7] + h | 0;
				},
	
				_doFinalize: function _doFinalize() {
					// Shortcuts
					var data = this._data;
					var dataWords = data.words;
	
					var nBitsTotal = this._nDataBytes * 8;
					var nBitsLeft = data.sigBytes * 8;
	
					// Add padding
					dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
					dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
					dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
					data.sigBytes = dataWords.length * 4;
	
					// Hash final blocks
					this._process();
	
					// Return final computed hash
					return this._hash;
				},
	
				clone: function clone() {
					var clone = Hasher.clone.call(this);
					clone._hash = this._hash.clone();
	
					return clone;
				}
			});
	
			/**
	   * Shortcut function to the hasher's object interface.
	   *
	   * @param {WordArray|string} message The message to hash.
	   *
	   * @return {WordArray} The hash.
	   *
	   * @static
	   *
	   * @example
	   *
	   *     var hash = CryptoJS.SHA256('message');
	   *     var hash = CryptoJS.SHA256(wordArray);
	   */
			C.SHA256 = Hasher._createHelper(SHA256);
	
			/**
	   * Shortcut function to the HMAC's object interface.
	   *
	   * @param {WordArray|string} message The message to hash.
	   * @param {WordArray|string} key The secret key.
	   *
	   * @return {WordArray} The HMAC.
	   *
	   * @static
	   *
	   * @example
	   *
	   *     var hmac = CryptoJS.HmacSHA256(message, key);
	   */
			C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
		})(Math);
	
		return CryptoJS.SHA256;
	});

/***/ },
/* 647 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	;(function (root, factory, undef) {
		if (( false ? "undefined" : _typeof(exports)) === "object") {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(639), __webpack_require__(646));
		} else if (true) {
			// AMD
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(639), __webpack_require__(646)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		(function () {
			// Shortcuts
			var C = CryptoJS;
			var C_lib = C.lib;
			var WordArray = C_lib.WordArray;
			var C_algo = C.algo;
			var SHA256 = C_algo.SHA256;
	
			/**
	   * SHA-224 hash algorithm.
	   */
			var SHA224 = C_algo.SHA224 = SHA256.extend({
				_doReset: function _doReset() {
					this._hash = new WordArray.init([0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4]);
				},
	
				_doFinalize: function _doFinalize() {
					var hash = SHA256._doFinalize.call(this);
	
					hash.sigBytes -= 4;
	
					return hash;
				}
			});
	
			/**
	   * Shortcut function to the hasher's object interface.
	   *
	   * @param {WordArray|string} message The message to hash.
	   *
	   * @return {WordArray} The hash.
	   *
	   * @static
	   *
	   * @example
	   *
	   *     var hash = CryptoJS.SHA224('message');
	   *     var hash = CryptoJS.SHA224(wordArray);
	   */
			C.SHA224 = SHA256._createHelper(SHA224);
	
			/**
	   * Shortcut function to the HMAC's object interface.
	   *
	   * @param {WordArray|string} message The message to hash.
	   * @param {WordArray|string} key The secret key.
	   *
	   * @return {WordArray} The HMAC.
	   *
	   * @static
	   *
	   * @example
	   *
	   *     var hmac = CryptoJS.HmacSHA224(message, key);
	   */
			C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
		})();
	
		return CryptoJS.SHA224;
	});

/***/ },
/* 648 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	;(function (root, factory, undef) {
		if (( false ? "undefined" : _typeof(exports)) === "object") {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(639), __webpack_require__(640));
		} else if (true) {
			// AMD
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(639), __webpack_require__(640)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		(function () {
			// Shortcuts
			var C = CryptoJS;
			var C_lib = C.lib;
			var Hasher = C_lib.Hasher;
			var C_x64 = C.x64;
			var X64Word = C_x64.Word;
			var X64WordArray = C_x64.WordArray;
			var C_algo = C.algo;
	
			function X64Word_create() {
				return X64Word.create.apply(X64Word, arguments);
			}
	
			// Constants
			var K = [X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd), X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc), X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019), X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118), X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe), X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2), X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1), X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694), X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3), X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65), X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483), X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5), X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210), X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4), X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725), X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70), X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926), X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df), X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8), X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b), X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001), X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30), X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910), X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8), X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53), X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8), X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb), X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3), X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60), X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec), X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9), X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b), X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207), X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178), X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6), X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b), X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493), X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c), X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a), X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)];
	
			// Reusable objects
			var W = [];
			(function () {
				for (var i = 0; i < 80; i++) {
					W[i] = X64Word_create();
				}
			})();
	
			/**
	   * SHA-512 hash algorithm.
	   */
			var SHA512 = C_algo.SHA512 = Hasher.extend({
				_doReset: function _doReset() {
					this._hash = new X64WordArray.init([new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b), new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1), new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f), new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)]);
				},
	
				_doProcessBlock: function _doProcessBlock(M, offset) {
					// Shortcuts
					var H = this._hash.words;
	
					var H0 = H[0];
					var H1 = H[1];
					var H2 = H[2];
					var H3 = H[3];
					var H4 = H[4];
					var H5 = H[5];
					var H6 = H[6];
					var H7 = H[7];
	
					var H0h = H0.high;
					var H0l = H0.low;
					var H1h = H1.high;
					var H1l = H1.low;
					var H2h = H2.high;
					var H2l = H2.low;
					var H3h = H3.high;
					var H3l = H3.low;
					var H4h = H4.high;
					var H4l = H4.low;
					var H5h = H5.high;
					var H5l = H5.low;
					var H6h = H6.high;
					var H6l = H6.low;
					var H7h = H7.high;
					var H7l = H7.low;
	
					// Working variables
					var ah = H0h;
					var al = H0l;
					var bh = H1h;
					var bl = H1l;
					var ch = H2h;
					var cl = H2l;
					var dh = H3h;
					var dl = H3l;
					var eh = H4h;
					var el = H4l;
					var fh = H5h;
					var fl = H5l;
					var gh = H6h;
					var gl = H6l;
					var hh = H7h;
					var hl = H7l;
	
					// Rounds
					for (var i = 0; i < 80; i++) {
						// Shortcut
						var Wi = W[i];
	
						// Extend message
						if (i < 16) {
							var Wih = Wi.high = M[offset + i * 2] | 0;
							var Wil = Wi.low = M[offset + i * 2 + 1] | 0;
						} else {
							// Gamma0
							var gamma0x = W[i - 15];
							var gamma0xh = gamma0x.high;
							var gamma0xl = gamma0x.low;
							var gamma0h = (gamma0xh >>> 1 | gamma0xl << 31) ^ (gamma0xh >>> 8 | gamma0xl << 24) ^ gamma0xh >>> 7;
							var gamma0l = (gamma0xl >>> 1 | gamma0xh << 31) ^ (gamma0xl >>> 8 | gamma0xh << 24) ^ (gamma0xl >>> 7 | gamma0xh << 25);
	
							// Gamma1
							var gamma1x = W[i - 2];
							var gamma1xh = gamma1x.high;
							var gamma1xl = gamma1x.low;
							var gamma1h = (gamma1xh >>> 19 | gamma1xl << 13) ^ (gamma1xh << 3 | gamma1xl >>> 29) ^ gamma1xh >>> 6;
							var gamma1l = (gamma1xl >>> 19 | gamma1xh << 13) ^ (gamma1xl << 3 | gamma1xh >>> 29) ^ (gamma1xl >>> 6 | gamma1xh << 26);
	
							// W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
							var Wi7 = W[i - 7];
							var Wi7h = Wi7.high;
							var Wi7l = Wi7.low;
	
							var Wi16 = W[i - 16];
							var Wi16h = Wi16.high;
							var Wi16l = Wi16.low;
	
							var Wil = gamma0l + Wi7l;
							var Wih = gamma0h + Wi7h + (Wil >>> 0 < gamma0l >>> 0 ? 1 : 0);
							var Wil = Wil + gamma1l;
							var Wih = Wih + gamma1h + (Wil >>> 0 < gamma1l >>> 0 ? 1 : 0);
							var Wil = Wil + Wi16l;
							var Wih = Wih + Wi16h + (Wil >>> 0 < Wi16l >>> 0 ? 1 : 0);
	
							Wi.high = Wih;
							Wi.low = Wil;
						}
	
						var chh = eh & fh ^ ~eh & gh;
						var chl = el & fl ^ ~el & gl;
						var majh = ah & bh ^ ah & ch ^ bh & ch;
						var majl = al & bl ^ al & cl ^ bl & cl;
	
						var sigma0h = (ah >>> 28 | al << 4) ^ (ah << 30 | al >>> 2) ^ (ah << 25 | al >>> 7);
						var sigma0l = (al >>> 28 | ah << 4) ^ (al << 30 | ah >>> 2) ^ (al << 25 | ah >>> 7);
						var sigma1h = (eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9);
						var sigma1l = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9);
	
						// t1 = h + sigma1 + ch + K[i] + W[i]
						var Ki = K[i];
						var Kih = Ki.high;
						var Kil = Ki.low;
	
						var t1l = hl + sigma1l;
						var t1h = hh + sigma1h + (t1l >>> 0 < hl >>> 0 ? 1 : 0);
						var t1l = t1l + chl;
						var t1h = t1h + chh + (t1l >>> 0 < chl >>> 0 ? 1 : 0);
						var t1l = t1l + Kil;
						var t1h = t1h + Kih + (t1l >>> 0 < Kil >>> 0 ? 1 : 0);
						var t1l = t1l + Wil;
						var t1h = t1h + Wih + (t1l >>> 0 < Wil >>> 0 ? 1 : 0);
	
						// t2 = sigma0 + maj
						var t2l = sigma0l + majl;
						var t2h = sigma0h + majh + (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0);
	
						// Update working variables
						hh = gh;
						hl = gl;
						gh = fh;
						gl = fl;
						fh = eh;
						fl = el;
						el = dl + t1l | 0;
						eh = dh + t1h + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
						dh = ch;
						dl = cl;
						ch = bh;
						cl = bl;
						bh = ah;
						bl = al;
						al = t1l + t2l | 0;
						ah = t1h + t2h + (al >>> 0 < t1l >>> 0 ? 1 : 0) | 0;
					}
	
					// Intermediate hash value
					H0l = H0.low = H0l + al;
					H0.high = H0h + ah + (H0l >>> 0 < al >>> 0 ? 1 : 0);
					H1l = H1.low = H1l + bl;
					H1.high = H1h + bh + (H1l >>> 0 < bl >>> 0 ? 1 : 0);
					H2l = H2.low = H2l + cl;
					H2.high = H2h + ch + (H2l >>> 0 < cl >>> 0 ? 1 : 0);
					H3l = H3.low = H3l + dl;
					H3.high = H3h + dh + (H3l >>> 0 < dl >>> 0 ? 1 : 0);
					H4l = H4.low = H4l + el;
					H4.high = H4h + eh + (H4l >>> 0 < el >>> 0 ? 1 : 0);
					H5l = H5.low = H5l + fl;
					H5.high = H5h + fh + (H5l >>> 0 < fl >>> 0 ? 1 : 0);
					H6l = H6.low = H6l + gl;
					H6.high = H6h + gh + (H6l >>> 0 < gl >>> 0 ? 1 : 0);
					H7l = H7.low = H7l + hl;
					H7.high = H7h + hh + (H7l >>> 0 < hl >>> 0 ? 1 : 0);
				},
	
				_doFinalize: function _doFinalize() {
					// Shortcuts
					var data = this._data;
					var dataWords = data.words;
	
					var nBitsTotal = this._nDataBytes * 8;
					var nBitsLeft = data.sigBytes * 8;
	
					// Add padding
					dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
					dataWords[(nBitsLeft + 128 >>> 10 << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);
					dataWords[(nBitsLeft + 128 >>> 10 << 5) + 31] = nBitsTotal;
					data.sigBytes = dataWords.length * 4;
	
					// Hash final blocks
					this._process();
	
					// Convert hash to 32-bit word array before returning
					var hash = this._hash.toX32();
	
					// Return final computed hash
					return hash;
				},
	
				clone: function clone() {
					var clone = Hasher.clone.call(this);
					clone._hash = this._hash.clone();
	
					return clone;
				},
	
				blockSize: 1024 / 32
			});
	
			/**
	   * Shortcut function to the hasher's object interface.
	   *
	   * @param {WordArray|string} message The message to hash.
	   *
	   * @return {WordArray} The hash.
	   *
	   * @static
	   *
	   * @example
	   *
	   *     var hash = CryptoJS.SHA512('message');
	   *     var hash = CryptoJS.SHA512(wordArray);
	   */
			C.SHA512 = Hasher._createHelper(SHA512);
	
			/**
	   * Shortcut function to the HMAC's object interface.
	   *
	   * @param {WordArray|string} message The message to hash.
	   * @param {WordArray|string} key The secret key.
	   *
	   * @return {WordArray} The HMAC.
	   *
	   * @static
	   *
	   * @example
	   *
	   *     var hmac = CryptoJS.HmacSHA512(message, key);
	   */
			C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
		})();
	
		return CryptoJS.SHA512;
	});

/***/ },
/* 649 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	;(function (root, factory, undef) {
		if (( false ? "undefined" : _typeof(exports)) === "object") {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(639), __webpack_require__(640), __webpack_require__(648));
		} else if (true) {
			// AMD
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(639), __webpack_require__(640), __webpack_require__(648)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		(function () {
			// Shortcuts
			var C = CryptoJS;
			var C_x64 = C.x64;
			var X64Word = C_x64.Word;
			var X64WordArray = C_x64.WordArray;
			var C_algo = C.algo;
			var SHA512 = C_algo.SHA512;
	
			/**
	   * SHA-384 hash algorithm.
	   */
			var SHA384 = C_algo.SHA384 = SHA512.extend({
				_doReset: function _doReset() {
					this._hash = new X64WordArray.init([new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507), new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939), new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511), new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)]);
				},
	
				_doFinalize: function _doFinalize() {
					var hash = SHA512._doFinalize.call(this);
	
					hash.sigBytes -= 16;
	
					return hash;
				}
			});
	
			/**
	   * Shortcut function to the hasher's object interface.
	   *
	   * @param {WordArray|string} message The message to hash.
	   *
	   * @return {WordArray} The hash.
	   *
	   * @static
	   *
	   * @example
	   *
	   *     var hash = CryptoJS.SHA384('message');
	   *     var hash = CryptoJS.SHA384(wordArray);
	   */
			C.SHA384 = SHA512._createHelper(SHA384);
	
			/**
	   * Shortcut function to the HMAC's object interface.
	   *
	   * @param {WordArray|string} message The message to hash.
	   * @param {WordArray|string} key The secret key.
	   *
	   * @return {WordArray} The HMAC.
	   *
	   * @static
	   *
	   * @example
	   *
	   *     var hmac = CryptoJS.HmacSHA384(message, key);
	   */
			C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
		})();
	
		return CryptoJS.SHA384;
	});

/***/ },
/* 650 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	;(function (root, factory, undef) {
		if (( false ? "undefined" : _typeof(exports)) === "object") {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(639), __webpack_require__(640));
		} else if (true) {
			// AMD
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(639), __webpack_require__(640)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		(function (Math) {
			// Shortcuts
			var C = CryptoJS;
			var C_lib = C.lib;
			var WordArray = C_lib.WordArray;
			var Hasher = C_lib.Hasher;
			var C_x64 = C.x64;
			var X64Word = C_x64.Word;
			var C_algo = C.algo;
	
			// Constants tables
			var RHO_OFFSETS = [];
			var PI_INDEXES = [];
			var ROUND_CONSTANTS = [];
	
			// Compute Constants
			(function () {
				// Compute rho offset constants
				var x = 1,
				    y = 0;
				for (var t = 0; t < 24; t++) {
					RHO_OFFSETS[x + 5 * y] = (t + 1) * (t + 2) / 2 % 64;
	
					var newX = y % 5;
					var newY = (2 * x + 3 * y) % 5;
					x = newX;
					y = newY;
				}
	
				// Compute pi index constants
				for (var x = 0; x < 5; x++) {
					for (var y = 0; y < 5; y++) {
						PI_INDEXES[x + 5 * y] = y + (2 * x + 3 * y) % 5 * 5;
					}
				}
	
				// Compute round constants
				var LFSR = 0x01;
				for (var i = 0; i < 24; i++) {
					var roundConstantMsw = 0;
					var roundConstantLsw = 0;
	
					for (var j = 0; j < 7; j++) {
						if (LFSR & 0x01) {
							var bitPosition = (1 << j) - 1;
							if (bitPosition < 32) {
								roundConstantLsw ^= 1 << bitPosition;
							} else /* if (bitPosition >= 32) */{
									roundConstantMsw ^= 1 << bitPosition - 32;
								}
						}
	
						// Compute next LFSR
						if (LFSR & 0x80) {
							// Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1
							LFSR = LFSR << 1 ^ 0x71;
						} else {
							LFSR <<= 1;
						}
					}
	
					ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
				}
			})();
	
			// Reusable objects for temporary values
			var T = [];
			(function () {
				for (var i = 0; i < 25; i++) {
					T[i] = X64Word.create();
				}
			})();
	
			/**
	   * SHA-3 hash algorithm.
	   */
			var SHA3 = C_algo.SHA3 = Hasher.extend({
				/**
	    * Configuration options.
	    *
	    * @property {number} outputLength
	    *   The desired number of bits in the output hash.
	    *   Only values permitted are: 224, 256, 384, 512.
	    *   Default: 512
	    */
				cfg: Hasher.cfg.extend({
					outputLength: 512
				}),
	
				_doReset: function _doReset() {
					var state = this._state = [];
					for (var i = 0; i < 25; i++) {
						state[i] = new X64Word.init();
					}
	
					this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
				},
	
				_doProcessBlock: function _doProcessBlock(M, offset) {
					// Shortcuts
					var state = this._state;
					var nBlockSizeLanes = this.blockSize / 2;
	
					// Absorb
					for (var i = 0; i < nBlockSizeLanes; i++) {
						// Shortcuts
						var M2i = M[offset + 2 * i];
						var M2i1 = M[offset + 2 * i + 1];
	
						// Swap endian
						M2i = (M2i << 8 | M2i >>> 24) & 0x00ff00ff | (M2i << 24 | M2i >>> 8) & 0xff00ff00;
						M2i1 = (M2i1 << 8 | M2i1 >>> 24) & 0x00ff00ff | (M2i1 << 24 | M2i1 >>> 8) & 0xff00ff00;
	
						// Absorb message into state
						var lane = state[i];
						lane.high ^= M2i1;
						lane.low ^= M2i;
					}
	
					// Rounds
					for (var round = 0; round < 24; round++) {
						// Theta
						for (var x = 0; x < 5; x++) {
							// Mix column lanes
							var tMsw = 0,
							    tLsw = 0;
							for (var y = 0; y < 5; y++) {
								var lane = state[x + 5 * y];
								tMsw ^= lane.high;
								tLsw ^= lane.low;
							}
	
							// Temporary values
							var Tx = T[x];
							Tx.high = tMsw;
							Tx.low = tLsw;
						}
						for (var x = 0; x < 5; x++) {
							// Shortcuts
							var Tx4 = T[(x + 4) % 5];
							var Tx1 = T[(x + 1) % 5];
							var Tx1Msw = Tx1.high;
							var Tx1Lsw = Tx1.low;
	
							// Mix surrounding columns
							var tMsw = Tx4.high ^ (Tx1Msw << 1 | Tx1Lsw >>> 31);
							var tLsw = Tx4.low ^ (Tx1Lsw << 1 | Tx1Msw >>> 31);
							for (var y = 0; y < 5; y++) {
								var lane = state[x + 5 * y];
								lane.high ^= tMsw;
								lane.low ^= tLsw;
							}
						}
	
						// Rho Pi
						for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
							// Shortcuts
							var lane = state[laneIndex];
							var laneMsw = lane.high;
							var laneLsw = lane.low;
							var rhoOffset = RHO_OFFSETS[laneIndex];
	
							// Rotate lanes
							if (rhoOffset < 32) {
								var tMsw = laneMsw << rhoOffset | laneLsw >>> 32 - rhoOffset;
								var tLsw = laneLsw << rhoOffset | laneMsw >>> 32 - rhoOffset;
							} else /* if (rhoOffset >= 32) */{
									var tMsw = laneLsw << rhoOffset - 32 | laneMsw >>> 64 - rhoOffset;
									var tLsw = laneMsw << rhoOffset - 32 | laneLsw >>> 64 - rhoOffset;
								}
	
							// Transpose lanes
							var TPiLane = T[PI_INDEXES[laneIndex]];
							TPiLane.high = tMsw;
							TPiLane.low = tLsw;
						}
	
						// Rho pi at x = y = 0
						var T0 = T[0];
						var state0 = state[0];
						T0.high = state0.high;
						T0.low = state0.low;
	
						// Chi
						for (var x = 0; x < 5; x++) {
							for (var y = 0; y < 5; y++) {
								// Shortcuts
								var laneIndex = x + 5 * y;
								var lane = state[laneIndex];
								var TLane = T[laneIndex];
								var Tx1Lane = T[(x + 1) % 5 + 5 * y];
								var Tx2Lane = T[(x + 2) % 5 + 5 * y];
	
								// Mix rows
								lane.high = TLane.high ^ ~Tx1Lane.high & Tx2Lane.high;
								lane.low = TLane.low ^ ~Tx1Lane.low & Tx2Lane.low;
							}
						}
	
						// Iota
						var lane = state[0];
						var roundConstant = ROUND_CONSTANTS[round];
						lane.high ^= roundConstant.high;
						lane.low ^= roundConstant.low;;
					}
				},
	
				_doFinalize: function _doFinalize() {
					// Shortcuts
					var data = this._data;
					var dataWords = data.words;
					var nBitsTotal = this._nDataBytes * 8;
					var nBitsLeft = data.sigBytes * 8;
					var blockSizeBits = this.blockSize * 32;
	
					// Add padding
					dataWords[nBitsLeft >>> 5] |= 0x1 << 24 - nBitsLeft % 32;
					dataWords[(Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits >>> 5) - 1] |= 0x80;
					data.sigBytes = dataWords.length * 4;
	
					// Hash final blocks
					this._process();
	
					// Shortcuts
					var state = this._state;
					var outputLengthBytes = this.cfg.outputLength / 8;
					var outputLengthLanes = outputLengthBytes / 8;
	
					// Squeeze
					var hashWords = [];
					for (var i = 0; i < outputLengthLanes; i++) {
						// Shortcuts
						var lane = state[i];
						var laneMsw = lane.high;
						var laneLsw = lane.low;
	
						// Swap endian
						laneMsw = (laneMsw << 8 | laneMsw >>> 24) & 0x00ff00ff | (laneMsw << 24 | laneMsw >>> 8) & 0xff00ff00;
						laneLsw = (laneLsw << 8 | laneLsw >>> 24) & 0x00ff00ff | (laneLsw << 24 | laneLsw >>> 8) & 0xff00ff00;
	
						// Squeeze state to retrieve hash
						hashWords.push(laneLsw);
						hashWords.push(laneMsw);
					}
	
					// Return final computed hash
					return new WordArray.init(hashWords, outputLengthBytes);
				},
	
				clone: function clone() {
					var clone = Hasher.clone.call(this);
	
					var state = clone._state = this._state.slice(0);
					for (var i = 0; i < 25; i++) {
						state[i] = state[i].clone();
					}
	
					return clone;
				}
			});
	
			/**
	   * Shortcut function to the hasher's object interface.
	   *
	   * @param {WordArray|string} message The message to hash.
	   *
	   * @return {WordArray} The hash.
	   *
	   * @static
	   *
	   * @example
	   *
	   *     var hash = CryptoJS.SHA3('message');
	   *     var hash = CryptoJS.SHA3(wordArray);
	   */
			C.SHA3 = Hasher._createHelper(SHA3);
	
			/**
	   * Shortcut function to the HMAC's object interface.
	   *
	   * @param {WordArray|string} message The message to hash.
	   * @param {WordArray|string} key The secret key.
	   *
	   * @return {WordArray} The HMAC.
	   *
	   * @static
	   *
	   * @example
	   *
	   *     var hmac = CryptoJS.HmacSHA3(message, key);
	   */
			C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
		})(Math);
	
		return CryptoJS.SHA3;
	});

/***/ },
/* 651 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	;(function (root, factory) {
		if (( false ? "undefined" : _typeof(exports)) === "object") {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(639));
		} else if (true) {
			// AMD
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(639)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		/** @preserve
	 (c) 2012 by Cédric Mesnil. All rights reserved.
	 	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
	 	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	     - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
	 	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
		(function (Math) {
			// Shortcuts
			var C = CryptoJS;
			var C_lib = C.lib;
			var WordArray = C_lib.WordArray;
			var Hasher = C_lib.Hasher;
			var C_algo = C.algo;
	
			// Constants table
			var _zl = WordArray.create([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13]);
			var _zr = WordArray.create([5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11]);
			var _sl = WordArray.create([11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6]);
			var _sr = WordArray.create([8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11]);
	
			var _hl = WordArray.create([0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);
			var _hr = WordArray.create([0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);
	
			/**
	   * RIPEMD160 hash algorithm.
	   */
			var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
				_doReset: function _doReset() {
					this._hash = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);
				},
	
				_doProcessBlock: function _doProcessBlock(M, offset) {
	
					// Swap endian
					for (var i = 0; i < 16; i++) {
						// Shortcuts
						var offset_i = offset + i;
						var M_offset_i = M[offset_i];
	
						// Swap
						M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 0x00ff00ff | (M_offset_i << 24 | M_offset_i >>> 8) & 0xff00ff00;
					}
					// Shortcut
					var H = this._hash.words;
					var hl = _hl.words;
					var hr = _hr.words;
					var zl = _zl.words;
					var zr = _zr.words;
					var sl = _sl.words;
					var sr = _sr.words;
	
					// Working variables
					var al, bl, cl, dl, el;
					var ar, br, cr, dr, er;
	
					ar = al = H[0];
					br = bl = H[1];
					cr = cl = H[2];
					dr = dl = H[3];
					er = el = H[4];
					// Computation
					var t;
					for (var i = 0; i < 80; i += 1) {
						t = al + M[offset + zl[i]] | 0;
						if (i < 16) {
							t += f1(bl, cl, dl) + hl[0];
						} else if (i < 32) {
							t += f2(bl, cl, dl) + hl[1];
						} else if (i < 48) {
							t += f3(bl, cl, dl) + hl[2];
						} else if (i < 64) {
							t += f4(bl, cl, dl) + hl[3];
						} else {
							// if (i<80) {
							t += f5(bl, cl, dl) + hl[4];
						}
						t = t | 0;
						t = rotl(t, sl[i]);
						t = t + el | 0;
						al = el;
						el = dl;
						dl = rotl(cl, 10);
						cl = bl;
						bl = t;
	
						t = ar + M[offset + zr[i]] | 0;
						if (i < 16) {
							t += f5(br, cr, dr) + hr[0];
						} else if (i < 32) {
							t += f4(br, cr, dr) + hr[1];
						} else if (i < 48) {
							t += f3(br, cr, dr) + hr[2];
						} else if (i < 64) {
							t += f2(br, cr, dr) + hr[3];
						} else {
							// if (i<80) {
							t += f1(br, cr, dr) + hr[4];
						}
						t = t | 0;
						t = rotl(t, sr[i]);
						t = t + er | 0;
						ar = er;
						er = dr;
						dr = rotl(cr, 10);
						cr = br;
						br = t;
					}
					// Intermediate hash value
					t = H[1] + cl + dr | 0;
					H[1] = H[2] + dl + er | 0;
					H[2] = H[3] + el + ar | 0;
					H[3] = H[4] + al + br | 0;
					H[4] = H[0] + bl + cr | 0;
					H[0] = t;
				},
	
				_doFinalize: function _doFinalize() {
					// Shortcuts
					var data = this._data;
					var dataWords = data.words;
	
					var nBitsTotal = this._nDataBytes * 8;
					var nBitsLeft = data.sigBytes * 8;
	
					// Add padding
					dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
					dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotal << 8 | nBitsTotal >>> 24) & 0x00ff00ff | (nBitsTotal << 24 | nBitsTotal >>> 8) & 0xff00ff00;
					data.sigBytes = (dataWords.length + 1) * 4;
	
					// Hash final blocks
					this._process();
	
					// Shortcuts
					var hash = this._hash;
					var H = hash.words;
	
					// Swap endian
					for (var i = 0; i < 5; i++) {
						// Shortcut
						var H_i = H[i];
	
						// Swap
						H[i] = (H_i << 8 | H_i >>> 24) & 0x00ff00ff | (H_i << 24 | H_i >>> 8) & 0xff00ff00;
					}
	
					// Return final computed hash
					return hash;
				},
	
				clone: function clone() {
					var clone = Hasher.clone.call(this);
					clone._hash = this._hash.clone();
	
					return clone;
				}
			});
	
			function f1(x, y, z) {
				return x ^ y ^ z;
			}
	
			function f2(x, y, z) {
				return x & y | ~x & z;
			}
	
			function f3(x, y, z) {
				return (x | ~y) ^ z;
			}
	
			function f4(x, y, z) {
				return x & z | y & ~z;
			}
	
			function f5(x, y, z) {
				return x ^ (y | ~z);
			}
	
			function rotl(x, n) {
				return x << n | x >>> 32 - n;
			}
	
			/**
	   * Shortcut function to the hasher's object interface.
	   *
	   * @param {WordArray|string} message The message to hash.
	   *
	   * @return {WordArray} The hash.
	   *
	   * @static
	   *
	   * @example
	   *
	   *     var hash = CryptoJS.RIPEMD160('message');
	   *     var hash = CryptoJS.RIPEMD160(wordArray);
	   */
			C.RIPEMD160 = Hasher._createHelper(RIPEMD160);
	
			/**
	   * Shortcut function to the HMAC's object interface.
	   *
	   * @param {WordArray|string} message The message to hash.
	   * @param {WordArray|string} key The secret key.
	   *
	   * @return {WordArray} The HMAC.
	   *
	   * @static
	   *
	   * @example
	   *
	   *     var hmac = CryptoJS.HmacRIPEMD160(message, key);
	   */
			C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
		})(Math);
	
		return CryptoJS.RIPEMD160;
	});

/***/ },
/* 652 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	;(function (root, factory) {
		if (( false ? "undefined" : _typeof(exports)) === "object") {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(639));
		} else if (true) {
			// AMD
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(639)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		(function () {
			// Shortcuts
			var C = CryptoJS;
			var C_lib = C.lib;
			var Base = C_lib.Base;
			var C_enc = C.enc;
			var Utf8 = C_enc.Utf8;
			var C_algo = C.algo;
	
			/**
	   * HMAC algorithm.
	   */
			var HMAC = C_algo.HMAC = Base.extend({
				/**
	    * Initializes a newly created HMAC.
	    *
	    * @param {Hasher} hasher The hash algorithm to use.
	    * @param {WordArray|string} key The secret key.
	    *
	    * @example
	    *
	    *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
	    */
				init: function init(hasher, key) {
					// Init hasher
					hasher = this._hasher = new hasher.init();
	
					// Convert string to WordArray, else assume WordArray already
					if (typeof key == 'string') {
						key = Utf8.parse(key);
					}
	
					// Shortcuts
					var hasherBlockSize = hasher.blockSize;
					var hasherBlockSizeBytes = hasherBlockSize * 4;
	
					// Allow arbitrary length keys
					if (key.sigBytes > hasherBlockSizeBytes) {
						key = hasher.finalize(key);
					}
	
					// Clamp excess bits
					key.clamp();
	
					// Clone key for inner and outer pads
					var oKey = this._oKey = key.clone();
					var iKey = this._iKey = key.clone();
	
					// Shortcuts
					var oKeyWords = oKey.words;
					var iKeyWords = iKey.words;
	
					// XOR keys with pad constants
					for (var i = 0; i < hasherBlockSize; i++) {
						oKeyWords[i] ^= 0x5c5c5c5c;
						iKeyWords[i] ^= 0x36363636;
					}
					oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;
	
					// Set initial values
					this.reset();
				},
	
				/**
	    * Resets this HMAC to its initial state.
	    *
	    * @example
	    *
	    *     hmacHasher.reset();
	    */
				reset: function reset() {
					// Shortcut
					var hasher = this._hasher;
	
					// Reset
					hasher.reset();
					hasher.update(this._iKey);
				},
	
				/**
	    * Updates this HMAC with a message.
	    *
	    * @param {WordArray|string} messageUpdate The message to append.
	    *
	    * @return {HMAC} This HMAC instance.
	    *
	    * @example
	    *
	    *     hmacHasher.update('message');
	    *     hmacHasher.update(wordArray);
	    */
				update: function update(messageUpdate) {
					this._hasher.update(messageUpdate);
	
					// Chainable
					return this;
				},
	
				/**
	    * Finalizes the HMAC computation.
	    * Note that the finalize operation is effectively a destructive, read-once operation.
	    *
	    * @param {WordArray|string} messageUpdate (Optional) A final message update.
	    *
	    * @return {WordArray} The HMAC.
	    *
	    * @example
	    *
	    *     var hmac = hmacHasher.finalize();
	    *     var hmac = hmacHasher.finalize('message');
	    *     var hmac = hmacHasher.finalize(wordArray);
	    */
				finalize: function finalize(messageUpdate) {
					// Shortcut
					var hasher = this._hasher;
	
					// Compute HMAC
					var innerHash = hasher.finalize(messageUpdate);
					hasher.reset();
					var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));
	
					return hmac;
				}
			});
		})();
	});

/***/ },
/* 653 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	;(function (root, factory, undef) {
		if (( false ? "undefined" : _typeof(exports)) === "object") {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(639), __webpack_require__(645), __webpack_require__(652));
		} else if (true) {
			// AMD
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(639), __webpack_require__(645), __webpack_require__(652)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		(function () {
			// Shortcuts
			var C = CryptoJS;
			var C_lib = C.lib;
			var Base = C_lib.Base;
			var WordArray = C_lib.WordArray;
			var C_algo = C.algo;
			var SHA1 = C_algo.SHA1;
			var HMAC = C_algo.HMAC;
	
			/**
	   * Password-Based Key Derivation Function 2 algorithm.
	   */
			var PBKDF2 = C_algo.PBKDF2 = Base.extend({
				/**
	    * Configuration options.
	    *
	    * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
	    * @property {Hasher} hasher The hasher to use. Default: SHA1
	    * @property {number} iterations The number of iterations to perform. Default: 1
	    */
				cfg: Base.extend({
					keySize: 128 / 32,
					hasher: SHA1,
					iterations: 1
				}),
	
				/**
	    * Initializes a newly created key derivation function.
	    *
	    * @param {Object} cfg (Optional) The configuration options to use for the derivation.
	    *
	    * @example
	    *
	    *     var kdf = CryptoJS.algo.PBKDF2.create();
	    *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });
	    *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });
	    */
				init: function init(cfg) {
					this.cfg = this.cfg.extend(cfg);
				},
	
				/**
	    * Computes the Password-Based Key Derivation Function 2.
	    *
	    * @param {WordArray|string} password The password.
	    * @param {WordArray|string} salt A salt.
	    *
	    * @return {WordArray} The derived key.
	    *
	    * @example
	    *
	    *     var key = kdf.compute(password, salt);
	    */
				compute: function compute(password, salt) {
					// Shortcut
					var cfg = this.cfg;
	
					// Init HMAC
					var hmac = HMAC.create(cfg.hasher, password);
	
					// Initial values
					var derivedKey = WordArray.create();
					var blockIndex = WordArray.create([0x00000001]);
	
					// Shortcuts
					var derivedKeyWords = derivedKey.words;
					var blockIndexWords = blockIndex.words;
					var keySize = cfg.keySize;
					var iterations = cfg.iterations;
	
					// Generate key
					while (derivedKeyWords.length < keySize) {
						var block = hmac.update(salt).finalize(blockIndex);
						hmac.reset();
	
						// Shortcuts
						var blockWords = block.words;
						var blockWordsLength = blockWords.length;
	
						// Iterations
						var intermediate = block;
						for (var i = 1; i < iterations; i++) {
							intermediate = hmac.finalize(intermediate);
							hmac.reset();
	
							// Shortcut
							var intermediateWords = intermediate.words;
	
							// XOR intermediate with block
							for (var j = 0; j < blockWordsLength; j++) {
								blockWords[j] ^= intermediateWords[j];
							}
						}
	
						derivedKey.concat(block);
						blockIndexWords[0]++;
					}
					derivedKey.sigBytes = keySize * 4;
	
					return derivedKey;
				}
			});
	
			/**
	   * Computes the Password-Based Key Derivation Function 2.
	   *
	   * @param {WordArray|string} password The password.
	   * @param {WordArray|string} salt A salt.
	   * @param {Object} cfg (Optional) The configuration options to use for this computation.
	   *
	   * @return {WordArray} The derived key.
	   *
	   * @static
	   *
	   * @example
	   *
	   *     var key = CryptoJS.PBKDF2(password, salt);
	   *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });
	   *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });
	   */
			C.PBKDF2 = function (password, salt, cfg) {
				return PBKDF2.create(cfg).compute(password, salt);
			};
		})();
	
		return CryptoJS.PBKDF2;
	});

/***/ },
/* 654 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	;(function (root, factory, undef) {
		if (( false ? "undefined" : _typeof(exports)) === "object") {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(639), __webpack_require__(645), __webpack_require__(652));
		} else if (true) {
			// AMD
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(639), __webpack_require__(645), __webpack_require__(652)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		(function () {
			// Shortcuts
			var C = CryptoJS;
			var C_lib = C.lib;
			var Base = C_lib.Base;
			var WordArray = C_lib.WordArray;
			var C_algo = C.algo;
			var MD5 = C_algo.MD5;
	
			/**
	   * This key derivation function is meant to conform with EVP_BytesToKey.
	   * www.openssl.org/docs/crypto/EVP_BytesToKey.html
	   */
			var EvpKDF = C_algo.EvpKDF = Base.extend({
				/**
	    * Configuration options.
	    *
	    * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
	    * @property {Hasher} hasher The hash algorithm to use. Default: MD5
	    * @property {number} iterations The number of iterations to perform. Default: 1
	    */
				cfg: Base.extend({
					keySize: 128 / 32,
					hasher: MD5,
					iterations: 1
				}),
	
				/**
	    * Initializes a newly created key derivation function.
	    *
	    * @param {Object} cfg (Optional) The configuration options to use for the derivation.
	    *
	    * @example
	    *
	    *     var kdf = CryptoJS.algo.EvpKDF.create();
	    *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
	    *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
	    */
				init: function init(cfg) {
					this.cfg = this.cfg.extend(cfg);
				},
	
				/**
	    * Derives a key from a password.
	    *
	    * @param {WordArray|string} password The password.
	    * @param {WordArray|string} salt A salt.
	    *
	    * @return {WordArray} The derived key.
	    *
	    * @example
	    *
	    *     var key = kdf.compute(password, salt);
	    */
				compute: function compute(password, salt) {
					// Shortcut
					var cfg = this.cfg;
	
					// Init hasher
					var hasher = cfg.hasher.create();
	
					// Initial values
					var derivedKey = WordArray.create();
	
					// Shortcuts
					var derivedKeyWords = derivedKey.words;
					var keySize = cfg.keySize;
					var iterations = cfg.iterations;
	
					// Generate key
					while (derivedKeyWords.length < keySize) {
						if (block) {
							hasher.update(block);
						}
						var block = hasher.update(password).finalize(salt);
						hasher.reset();
	
						// Iterations
						for (var i = 1; i < iterations; i++) {
							block = hasher.finalize(block);
							hasher.reset();
						}
	
						derivedKey.concat(block);
					}
					derivedKey.sigBytes = keySize * 4;
	
					return derivedKey;
				}
			});
	
			/**
	   * Derives a key from a password.
	   *
	   * @param {WordArray|string} password The password.
	   * @param {WordArray|string} salt A salt.
	   * @param {Object} cfg (Optional) The configuration options to use for this computation.
	   *
	   * @return {WordArray} The derived key.
	   *
	   * @static
	   *
	   * @example
	   *
	   *     var key = CryptoJS.EvpKDF(password, salt);
	   *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });
	   *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });
	   */
			C.EvpKDF = function (password, salt, cfg) {
				return EvpKDF.create(cfg).compute(password, salt);
			};
		})();
	
		return CryptoJS.EvpKDF;
	});

/***/ },
/* 655 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	;(function (root, factory, undef) {
		if (( false ? "undefined" : _typeof(exports)) === "object") {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(639), __webpack_require__(654));
		} else if (true) {
			// AMD
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(639), __webpack_require__(654)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		/**
	  * Cipher core components.
	  */
		CryptoJS.lib.Cipher || function (undefined) {
			// Shortcuts
			var C = CryptoJS;
			var C_lib = C.lib;
			var Base = C_lib.Base;
			var WordArray = C_lib.WordArray;
			var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
			var C_enc = C.enc;
			var Utf8 = C_enc.Utf8;
			var Base64 = C_enc.Base64;
			var C_algo = C.algo;
			var EvpKDF = C_algo.EvpKDF;
	
			/**
	   * Abstract base cipher template.
	   *
	   * @property {number} keySize This cipher's key size. Default: 4 (128 bits)
	   * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)
	   * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.
	   * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.
	   */
			var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
				/**
	    * Configuration options.
	    *
	    * @property {WordArray} iv The IV to use for this operation.
	    */
				cfg: Base.extend(),
	
				/**
	    * Creates this cipher in encryption mode.
	    *
	    * @param {WordArray} key The key.
	    * @param {Object} cfg (Optional) The configuration options to use for this operation.
	    *
	    * @return {Cipher} A cipher instance.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
	    */
				createEncryptor: function createEncryptor(key, cfg) {
					return this.create(this._ENC_XFORM_MODE, key, cfg);
				},
	
				/**
	    * Creates this cipher in decryption mode.
	    *
	    * @param {WordArray} key The key.
	    * @param {Object} cfg (Optional) The configuration options to use for this operation.
	    *
	    * @return {Cipher} A cipher instance.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
	    */
				createDecryptor: function createDecryptor(key, cfg) {
					return this.create(this._DEC_XFORM_MODE, key, cfg);
				},
	
				/**
	    * Initializes a newly created cipher.
	    *
	    * @param {number} xformMode Either the encryption or decryption transormation mode constant.
	    * @param {WordArray} key The key.
	    * @param {Object} cfg (Optional) The configuration options to use for this operation.
	    *
	    * @example
	    *
	    *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
	    */
				init: function init(xformMode, key, cfg) {
					// Apply config defaults
					this.cfg = this.cfg.extend(cfg);
	
					// Store transform mode and key
					this._xformMode = xformMode;
					this._key = key;
	
					// Set initial values
					this.reset();
				},
	
				/**
	    * Resets this cipher to its initial state.
	    *
	    * @example
	    *
	    *     cipher.reset();
	    */
				reset: function reset() {
					// Reset data buffer
					BufferedBlockAlgorithm.reset.call(this);
	
					// Perform concrete-cipher logic
					this._doReset();
				},
	
				/**
	    * Adds data to be encrypted or decrypted.
	    *
	    * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
	    *
	    * @return {WordArray} The data after processing.
	    *
	    * @example
	    *
	    *     var encrypted = cipher.process('data');
	    *     var encrypted = cipher.process(wordArray);
	    */
				process: function process(dataUpdate) {
					// Append
					this._append(dataUpdate);
	
					// Process available blocks
					return this._process();
				},
	
				/**
	    * Finalizes the encryption or decryption process.
	    * Note that the finalize operation is effectively a destructive, read-once operation.
	    *
	    * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
	    *
	    * @return {WordArray} The data after final processing.
	    *
	    * @example
	    *
	    *     var encrypted = cipher.finalize();
	    *     var encrypted = cipher.finalize('data');
	    *     var encrypted = cipher.finalize(wordArray);
	    */
				finalize: function finalize(dataUpdate) {
					// Final data update
					if (dataUpdate) {
						this._append(dataUpdate);
					}
	
					// Perform concrete-cipher logic
					var finalProcessedData = this._doFinalize();
	
					return finalProcessedData;
				},
	
				keySize: 128 / 32,
	
				ivSize: 128 / 32,
	
				_ENC_XFORM_MODE: 1,
	
				_DEC_XFORM_MODE: 2,
	
				/**
	    * Creates shortcut functions to a cipher's object interface.
	    *
	    * @param {Cipher} cipher The cipher to create a helper for.
	    *
	    * @return {Object} An object with encrypt and decrypt shortcut functions.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
	    */
				_createHelper: function () {
					function selectCipherStrategy(key) {
						if (typeof key == 'string') {
							return PasswordBasedCipher;
						} else {
							return SerializableCipher;
						}
					}
	
					return function (cipher) {
						return {
							encrypt: function encrypt(message, key, cfg) {
								return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
							},
	
							decrypt: function decrypt(ciphertext, key, cfg) {
								return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
							}
						};
					};
				}()
			});
	
			/**
	   * Abstract base stream cipher template.
	   *
	   * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)
	   */
			var StreamCipher = C_lib.StreamCipher = Cipher.extend({
				_doFinalize: function _doFinalize() {
					// Process partial blocks
					var finalProcessedBlocks = this._process(!!'flush');
	
					return finalProcessedBlocks;
				},
	
				blockSize: 1
			});
	
			/**
	   * Mode namespace.
	   */
			var C_mode = C.mode = {};
	
			/**
	   * Abstract base block cipher mode template.
	   */
			var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
				/**
	    * Creates this mode for encryption.
	    *
	    * @param {Cipher} cipher A block cipher instance.
	    * @param {Array} iv The IV words.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
	    */
				createEncryptor: function createEncryptor(cipher, iv) {
					return this.Encryptor.create(cipher, iv);
				},
	
				/**
	    * Creates this mode for decryption.
	    *
	    * @param {Cipher} cipher A block cipher instance.
	    * @param {Array} iv The IV words.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
	    */
				createDecryptor: function createDecryptor(cipher, iv) {
					return this.Decryptor.create(cipher, iv);
				},
	
				/**
	    * Initializes a newly created mode.
	    *
	    * @param {Cipher} cipher A block cipher instance.
	    * @param {Array} iv The IV words.
	    *
	    * @example
	    *
	    *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
	    */
				init: function init(cipher, iv) {
					this._cipher = cipher;
					this._iv = iv;
				}
			});
	
			/**
	   * Cipher Block Chaining mode.
	   */
			var CBC = C_mode.CBC = function () {
				/**
	    * Abstract base CBC mode.
	    */
				var CBC = BlockCipherMode.extend();
	
				/**
	    * CBC encryptor.
	    */
				CBC.Encryptor = CBC.extend({
					/**
	     * Processes the data block at offset.
	     *
	     * @param {Array} words The data words to operate on.
	     * @param {number} offset The offset where the block starts.
	     *
	     * @example
	     *
	     *     mode.processBlock(data.words, offset);
	     */
					processBlock: function processBlock(words, offset) {
						// Shortcuts
						var cipher = this._cipher;
						var blockSize = cipher.blockSize;
	
						// XOR and encrypt
						xorBlock.call(this, words, offset, blockSize);
						cipher.encryptBlock(words, offset);
	
						// Remember this block to use with next block
						this._prevBlock = words.slice(offset, offset + blockSize);
					}
				});
	
				/**
	    * CBC decryptor.
	    */
				CBC.Decryptor = CBC.extend({
					/**
	     * Processes the data block at offset.
	     *
	     * @param {Array} words The data words to operate on.
	     * @param {number} offset The offset where the block starts.
	     *
	     * @example
	     *
	     *     mode.processBlock(data.words, offset);
	     */
					processBlock: function processBlock(words, offset) {
						// Shortcuts
						var cipher = this._cipher;
						var blockSize = cipher.blockSize;
	
						// Remember this block to use with next block
						var thisBlock = words.slice(offset, offset + blockSize);
	
						// Decrypt and XOR
						cipher.decryptBlock(words, offset);
						xorBlock.call(this, words, offset, blockSize);
	
						// This block becomes the previous block
						this._prevBlock = thisBlock;
					}
				});
	
				function xorBlock(words, offset, blockSize) {
					// Shortcut
					var iv = this._iv;
	
					// Choose mixing block
					if (iv) {
						var block = iv;
	
						// Remove IV for subsequent blocks
						this._iv = undefined;
					} else {
						var block = this._prevBlock;
					}
	
					// XOR blocks
					for (var i = 0; i < blockSize; i++) {
						words[offset + i] ^= block[i];
					}
				}
	
				return CBC;
			}();
	
			/**
	   * Padding namespace.
	   */
			var C_pad = C.pad = {};
	
			/**
	   * PKCS #5/7 padding strategy.
	   */
			var Pkcs7 = C_pad.Pkcs7 = {
				/**
	    * Pads data using the algorithm defined in PKCS #5/7.
	    *
	    * @param {WordArray} data The data to pad.
	    * @param {number} blockSize The multiple that the data should be padded to.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
	    */
				pad: function pad(data, blockSize) {
					// Shortcut
					var blockSizeBytes = blockSize * 4;
	
					// Count padding bytes
					var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
	
					// Create padding word
					var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes;
	
					// Create padding
					var paddingWords = [];
					for (var i = 0; i < nPaddingBytes; i += 4) {
						paddingWords.push(paddingWord);
					}
					var padding = WordArray.create(paddingWords, nPaddingBytes);
	
					// Add padding
					data.concat(padding);
				},
	
				/**
	    * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
	    *
	    * @param {WordArray} data The data to unpad.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     CryptoJS.pad.Pkcs7.unpad(wordArray);
	    */
				unpad: function unpad(data) {
					// Get number of padding bytes from last byte
					var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff;
	
					// Remove padding
					data.sigBytes -= nPaddingBytes;
				}
			};
	
			/**
	   * Abstract base block cipher template.
	   *
	   * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)
	   */
			var BlockCipher = C_lib.BlockCipher = Cipher.extend({
				/**
	    * Configuration options.
	    *
	    * @property {Mode} mode The block mode to use. Default: CBC
	    * @property {Padding} padding The padding strategy to use. Default: Pkcs7
	    */
				cfg: Cipher.cfg.extend({
					mode: CBC,
					padding: Pkcs7
				}),
	
				reset: function reset() {
					// Reset cipher
					Cipher.reset.call(this);
	
					// Shortcuts
					var cfg = this.cfg;
					var iv = cfg.iv;
					var mode = cfg.mode;
	
					// Reset block mode
					if (this._xformMode == this._ENC_XFORM_MODE) {
						var modeCreator = mode.createEncryptor;
					} else /* if (this._xformMode == this._DEC_XFORM_MODE) */{
							var modeCreator = mode.createDecryptor;
							// Keep at least one block in the buffer for unpadding
							this._minBufferSize = 1;
						}
	
					if (this._mode && this._mode.__creator == modeCreator) {
						this._mode.init(this, iv && iv.words);
					} else {
						this._mode = modeCreator.call(mode, this, iv && iv.words);
						this._mode.__creator = modeCreator;
					}
				},
	
				_doProcessBlock: function _doProcessBlock(words, offset) {
					this._mode.processBlock(words, offset);
				},
	
				_doFinalize: function _doFinalize() {
					// Shortcut
					var padding = this.cfg.padding;
	
					// Finalize
					if (this._xformMode == this._ENC_XFORM_MODE) {
						// Pad data
						padding.pad(this._data, this.blockSize);
	
						// Process final blocks
						var finalProcessedBlocks = this._process(!!'flush');
					} else /* if (this._xformMode == this._DEC_XFORM_MODE) */{
							// Process final blocks
							var finalProcessedBlocks = this._process(!!'flush');
	
							// Unpad data
							padding.unpad(finalProcessedBlocks);
						}
	
					return finalProcessedBlocks;
				},
	
				blockSize: 128 / 32
			});
	
			/**
	   * A collection of cipher parameters.
	   *
	   * @property {WordArray} ciphertext The raw ciphertext.
	   * @property {WordArray} key The key to this ciphertext.
	   * @property {WordArray} iv The IV used in the ciphering operation.
	   * @property {WordArray} salt The salt used with a key derivation function.
	   * @property {Cipher} algorithm The cipher algorithm.
	   * @property {Mode} mode The block mode used in the ciphering operation.
	   * @property {Padding} padding The padding scheme used in the ciphering operation.
	   * @property {number} blockSize The block size of the cipher.
	   * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
	   */
			var CipherParams = C_lib.CipherParams = Base.extend({
				/**
	    * Initializes a newly created cipher params object.
	    *
	    * @param {Object} cipherParams An object with any of the possible cipher parameters.
	    *
	    * @example
	    *
	    *     var cipherParams = CryptoJS.lib.CipherParams.create({
	    *         ciphertext: ciphertextWordArray,
	    *         key: keyWordArray,
	    *         iv: ivWordArray,
	    *         salt: saltWordArray,
	    *         algorithm: CryptoJS.algo.AES,
	    *         mode: CryptoJS.mode.CBC,
	    *         padding: CryptoJS.pad.PKCS7,
	    *         blockSize: 4,
	    *         formatter: CryptoJS.format.OpenSSL
	    *     });
	    */
				init: function init(cipherParams) {
					this.mixIn(cipherParams);
				},
	
				/**
	    * Converts this cipher params object to a string.
	    *
	    * @param {Format} formatter (Optional) The formatting strategy to use.
	    *
	    * @return {string} The stringified cipher params.
	    *
	    * @throws Error If neither the formatter nor the default formatter is set.
	    *
	    * @example
	    *
	    *     var string = cipherParams + '';
	    *     var string = cipherParams.toString();
	    *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
	    */
				toString: function toString(formatter) {
					return (formatter || this.formatter).stringify(this);
				}
			});
	
			/**
	   * Format namespace.
	   */
			var C_format = C.format = {};
	
			/**
	   * OpenSSL formatting strategy.
	   */
			var OpenSSLFormatter = C_format.OpenSSL = {
				/**
	    * Converts a cipher params object to an OpenSSL-compatible string.
	    *
	    * @param {CipherParams} cipherParams The cipher params object.
	    *
	    * @return {string} The OpenSSL-compatible string.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
	    */
				stringify: function stringify(cipherParams) {
					// Shortcuts
					var ciphertext = cipherParams.ciphertext;
					var salt = cipherParams.salt;
	
					// Format
					if (salt) {
						var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);
					} else {
						var wordArray = ciphertext;
					}
	
					return wordArray.toString(Base64);
				},
	
				/**
	    * Converts an OpenSSL-compatible string to a cipher params object.
	    *
	    * @param {string} openSSLStr The OpenSSL-compatible string.
	    *
	    * @return {CipherParams} The cipher params object.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
	    */
				parse: function parse(openSSLStr) {
					// Parse base64
					var ciphertext = Base64.parse(openSSLStr);
	
					// Shortcut
					var ciphertextWords = ciphertext.words;
	
					// Test for salt
					if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {
						// Extract salt
						var salt = WordArray.create(ciphertextWords.slice(2, 4));
	
						// Remove salt from ciphertext
						ciphertextWords.splice(0, 4);
						ciphertext.sigBytes -= 16;
					}
	
					return CipherParams.create({ ciphertext: ciphertext, salt: salt });
				}
			};
	
			/**
	   * A cipher wrapper that returns ciphertext as a serializable cipher params object.
	   */
			var SerializableCipher = C_lib.SerializableCipher = Base.extend({
				/**
	    * Configuration options.
	    *
	    * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
	    */
				cfg: Base.extend({
					format: OpenSSLFormatter
				}),
	
				/**
	    * Encrypts a message.
	    *
	    * @param {Cipher} cipher The cipher algorithm to use.
	    * @param {WordArray|string} message The message to encrypt.
	    * @param {WordArray} key The key.
	    * @param {Object} cfg (Optional) The configuration options to use for this operation.
	    *
	    * @return {CipherParams} A cipher params object.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
	    *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
	    *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	    */
				encrypt: function encrypt(cipher, message, key, cfg) {
					// Apply config defaults
					cfg = this.cfg.extend(cfg);
	
					// Encrypt
					var encryptor = cipher.createEncryptor(key, cfg);
					var ciphertext = encryptor.finalize(message);
	
					// Shortcut
					var cipherCfg = encryptor.cfg;
	
					// Create and return serializable cipher params
					return CipherParams.create({
						ciphertext: ciphertext,
						key: key,
						iv: cipherCfg.iv,
						algorithm: cipher,
						mode: cipherCfg.mode,
						padding: cipherCfg.padding,
						blockSize: cipher.blockSize,
						formatter: cfg.format
					});
				},
	
				/**
	    * Decrypts serialized ciphertext.
	    *
	    * @param {Cipher} cipher The cipher algorithm to use.
	    * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
	    * @param {WordArray} key The key.
	    * @param {Object} cfg (Optional) The configuration options to use for this operation.
	    *
	    * @return {WordArray} The plaintext.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	    *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	    */
				decrypt: function decrypt(cipher, ciphertext, key, cfg) {
					// Apply config defaults
					cfg = this.cfg.extend(cfg);
	
					// Convert string to CipherParams
					ciphertext = this._parse(ciphertext, cfg.format);
	
					// Decrypt
					var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);
	
					return plaintext;
				},
	
				/**
	    * Converts serialized ciphertext to CipherParams,
	    * else assumed CipherParams already and returns ciphertext unchanged.
	    *
	    * @param {CipherParams|string} ciphertext The ciphertext.
	    * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
	    *
	    * @return {CipherParams} The unserialized ciphertext.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
	    */
				_parse: function _parse(ciphertext, format) {
					if (typeof ciphertext == 'string') {
						return format.parse(ciphertext, this);
					} else {
						return ciphertext;
					}
				}
			});
	
			/**
	   * Key derivation function namespace.
	   */
			var C_kdf = C.kdf = {};
	
			/**
	   * OpenSSL key derivation function.
	   */
			var OpenSSLKdf = C_kdf.OpenSSL = {
				/**
	    * Derives a key and IV from a password.
	    *
	    * @param {string} password The password to derive from.
	    * @param {number} keySize The size in words of the key to generate.
	    * @param {number} ivSize The size in words of the IV to generate.
	    * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
	    *
	    * @return {CipherParams} A cipher params object with the key, IV, and salt.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
	    *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
	    */
				execute: function execute(password, keySize, ivSize, salt) {
					// Generate random salt
					if (!salt) {
						salt = WordArray.random(64 / 8);
					}
	
					// Derive key and IV
					var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);
	
					// Separate key and IV
					var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
					key.sigBytes = keySize * 4;
	
					// Return params
					return CipherParams.create({ key: key, iv: iv, salt: salt });
				}
			};
	
			/**
	   * A serializable cipher wrapper that derives the key from a password,
	   * and returns ciphertext as a serializable cipher params object.
	   */
			var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
				/**
	    * Configuration options.
	    *
	    * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
	    */
				cfg: SerializableCipher.cfg.extend({
					kdf: OpenSSLKdf
				}),
	
				/**
	    * Encrypts a message using a password.
	    *
	    * @param {Cipher} cipher The cipher algorithm to use.
	    * @param {WordArray|string} message The message to encrypt.
	    * @param {string} password The password.
	    * @param {Object} cfg (Optional) The configuration options to use for this operation.
	    *
	    * @return {CipherParams} A cipher params object.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
	    *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
	    */
				encrypt: function encrypt(cipher, message, password, cfg) {
					// Apply config defaults
					cfg = this.cfg.extend(cfg);
	
					// Derive key and other params
					var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);
	
					// Add IV to config
					cfg.iv = derivedParams.iv;
	
					// Encrypt
					var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);
	
					// Mix in derived params
					ciphertext.mixIn(derivedParams);
	
					return ciphertext;
				},
	
				/**
	    * Decrypts serialized ciphertext using a password.
	    *
	    * @param {Cipher} cipher The cipher algorithm to use.
	    * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
	    * @param {string} password The password.
	    * @param {Object} cfg (Optional) The configuration options to use for this operation.
	    *
	    * @return {WordArray} The plaintext.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
	    *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
	    */
				decrypt: function decrypt(cipher, ciphertext, password, cfg) {
					// Apply config defaults
					cfg = this.cfg.extend(cfg);
	
					// Convert string to CipherParams
					ciphertext = this._parse(ciphertext, cfg.format);
	
					// Derive key and other params
					var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);
	
					// Add IV to config
					cfg.iv = derivedParams.iv;
	
					// Decrypt
					var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);
	
					return plaintext;
				}
			});
		}();
	});

/***/ },
/* 656 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	;(function (root, factory, undef) {
		if (( false ? "undefined" : _typeof(exports)) === "object") {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(639), __webpack_require__(655));
		} else if (true) {
			// AMD
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(639), __webpack_require__(655)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		/**
	  * Cipher Feedback block mode.
	  */
		CryptoJS.mode.CFB = function () {
			var CFB = CryptoJS.lib.BlockCipherMode.extend();
	
			CFB.Encryptor = CFB.extend({
				processBlock: function processBlock(words, offset) {
					// Shortcuts
					var cipher = this._cipher;
					var blockSize = cipher.blockSize;
	
					generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);
	
					// Remember this block to use with next block
					this._prevBlock = words.slice(offset, offset + blockSize);
				}
			});
	
			CFB.Decryptor = CFB.extend({
				processBlock: function processBlock(words, offset) {
					// Shortcuts
					var cipher = this._cipher;
					var blockSize = cipher.blockSize;
	
					// Remember this block to use with next block
					var thisBlock = words.slice(offset, offset + blockSize);
	
					generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);
	
					// This block becomes the previous block
					this._prevBlock = thisBlock;
				}
			});
	
			function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
				// Shortcut
				var iv = this._iv;
	
				// Generate keystream
				if (iv) {
					var keystream = iv.slice(0);
	
					// Remove IV for subsequent blocks
					this._iv = undefined;
				} else {
					var keystream = this._prevBlock;
				}
				cipher.encryptBlock(keystream, 0);
	
				// Encrypt
				for (var i = 0; i < blockSize; i++) {
					words[offset + i] ^= keystream[i];
				}
			}
	
			return CFB;
		}();
	
		return CryptoJS.mode.CFB;
	});

/***/ },
/* 657 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	;(function (root, factory, undef) {
		if (( false ? "undefined" : _typeof(exports)) === "object") {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(639), __webpack_require__(655));
		} else if (true) {
			// AMD
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(639), __webpack_require__(655)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		/**
	  * Counter block mode.
	  */
		CryptoJS.mode.CTR = function () {
			var CTR = CryptoJS.lib.BlockCipherMode.extend();
	
			var Encryptor = CTR.Encryptor = CTR.extend({
				processBlock: function processBlock(words, offset) {
					// Shortcuts
					var cipher = this._cipher;
					var blockSize = cipher.blockSize;
					var iv = this._iv;
					var counter = this._counter;
	
					// Generate keystream
					if (iv) {
						counter = this._counter = iv.slice(0);
	
						// Remove IV for subsequent blocks
						this._iv = undefined;
					}
					var keystream = counter.slice(0);
					cipher.encryptBlock(keystream, 0);
	
					// Increment counter
					counter[blockSize - 1] = counter[blockSize - 1] + 1 | 0;
	
					// Encrypt
					for (var i = 0; i < blockSize; i++) {
						words[offset + i] ^= keystream[i];
					}
				}
			});
	
			CTR.Decryptor = Encryptor;
	
			return CTR;
		}();
	
		return CryptoJS.mode.CTR;
	});

/***/ },
/* 658 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	;(function (root, factory, undef) {
		if (( false ? "undefined" : _typeof(exports)) === "object") {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(639), __webpack_require__(655));
		} else if (true) {
			// AMD
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(639), __webpack_require__(655)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		/** @preserve
	  * Counter block mode compatible with  Dr Brian Gladman fileenc.c
	  * derived from CryptoJS.mode.CTR
	  * Jan Hruby jhruby.web@gmail.com
	  */
		CryptoJS.mode.CTRGladman = function () {
			var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();
	
			function incWord(word) {
				if ((word >> 24 & 0xff) === 0xff) {
					//overflow
					var b1 = word >> 16 & 0xff;
					var b2 = word >> 8 & 0xff;
					var b3 = word & 0xff;
	
					if (b1 === 0xff) // overflow b1
						{
							b1 = 0;
							if (b2 === 0xff) {
								b2 = 0;
								if (b3 === 0xff) {
									b3 = 0;
								} else {
									++b3;
								}
							} else {
								++b2;
							}
						} else {
						++b1;
					}
	
					word = 0;
					word += b1 << 16;
					word += b2 << 8;
					word += b3;
				} else {
					word += 0x01 << 24;
				}
				return word;
			}
	
			function incCounter(counter) {
				if ((counter[0] = incWord(counter[0])) === 0) {
					// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8
					counter[1] = incWord(counter[1]);
				}
				return counter;
			}
	
			var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
				processBlock: function processBlock(words, offset) {
					// Shortcuts
					var cipher = this._cipher;
					var blockSize = cipher.blockSize;
					var iv = this._iv;
					var counter = this._counter;
	
					// Generate keystream
					if (iv) {
						counter = this._counter = iv.slice(0);
	
						// Remove IV for subsequent blocks
						this._iv = undefined;
					}
	
					incCounter(counter);
	
					var keystream = counter.slice(0);
					cipher.encryptBlock(keystream, 0);
	
					// Encrypt
					for (var i = 0; i < blockSize; i++) {
						words[offset + i] ^= keystream[i];
					}
				}
			});
	
			CTRGladman.Decryptor = Encryptor;
	
			return CTRGladman;
		}();
	
		return CryptoJS.mode.CTRGladman;
	});

/***/ },
/* 659 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	;(function (root, factory, undef) {
		if (( false ? "undefined" : _typeof(exports)) === "object") {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(639), __webpack_require__(655));
		} else if (true) {
			// AMD
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(639), __webpack_require__(655)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		/**
	  * Output Feedback block mode.
	  */
		CryptoJS.mode.OFB = function () {
			var OFB = CryptoJS.lib.BlockCipherMode.extend();
	
			var Encryptor = OFB.Encryptor = OFB.extend({
				processBlock: function processBlock(words, offset) {
					// Shortcuts
					var cipher = this._cipher;
					var blockSize = cipher.blockSize;
					var iv = this._iv;
					var keystream = this._keystream;
	
					// Generate keystream
					if (iv) {
						keystream = this._keystream = iv.slice(0);
	
						// Remove IV for subsequent blocks
						this._iv = undefined;
					}
					cipher.encryptBlock(keystream, 0);
	
					// Encrypt
					for (var i = 0; i < blockSize; i++) {
						words[offset + i] ^= keystream[i];
					}
				}
			});
	
			OFB.Decryptor = Encryptor;
	
			return OFB;
		}();
	
		return CryptoJS.mode.OFB;
	});

/***/ },
/* 660 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	;(function (root, factory, undef) {
		if (( false ? "undefined" : _typeof(exports)) === "object") {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(639), __webpack_require__(655));
		} else if (true) {
			// AMD
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(639), __webpack_require__(655)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		/**
	  * Electronic Codebook block mode.
	  */
		CryptoJS.mode.ECB = function () {
			var ECB = CryptoJS.lib.BlockCipherMode.extend();
	
			ECB.Encryptor = ECB.extend({
				processBlock: function processBlock(words, offset) {
					this._cipher.encryptBlock(words, offset);
				}
			});
	
			ECB.Decryptor = ECB.extend({
				processBlock: function processBlock(words, offset) {
					this._cipher.decryptBlock(words, offset);
				}
			});
	
			return ECB;
		}();
	
		return CryptoJS.mode.ECB;
	});

/***/ },
/* 661 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	;(function (root, factory, undef) {
		if (( false ? "undefined" : _typeof(exports)) === "object") {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(639), __webpack_require__(655));
		} else if (true) {
			// AMD
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(639), __webpack_require__(655)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		/**
	  * ANSI X.923 padding strategy.
	  */
		CryptoJS.pad.AnsiX923 = {
			pad: function pad(data, blockSize) {
				// Shortcuts
				var dataSigBytes = data.sigBytes;
				var blockSizeBytes = blockSize * 4;
	
				// Count padding bytes
				var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;
	
				// Compute last byte position
				var lastBytePos = dataSigBytes + nPaddingBytes - 1;
	
				// Pad
				data.clamp();
				data.words[lastBytePos >>> 2] |= nPaddingBytes << 24 - lastBytePos % 4 * 8;
				data.sigBytes += nPaddingBytes;
			},
	
			unpad: function unpad(data) {
				// Get number of padding bytes from last byte
				var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff;
	
				// Remove padding
				data.sigBytes -= nPaddingBytes;
			}
		};
	
		return CryptoJS.pad.Ansix923;
	});

/***/ },
/* 662 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	;(function (root, factory, undef) {
		if (( false ? "undefined" : _typeof(exports)) === "object") {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(639), __webpack_require__(655));
		} else if (true) {
			// AMD
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(639), __webpack_require__(655)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		/**
	  * ISO 10126 padding strategy.
	  */
		CryptoJS.pad.Iso10126 = {
			pad: function pad(data, blockSize) {
				// Shortcut
				var blockSizeBytes = blockSize * 4;
	
				// Count padding bytes
				var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
	
				// Pad
				data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));
			},
	
			unpad: function unpad(data) {
				// Get number of padding bytes from last byte
				var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff;
	
				// Remove padding
				data.sigBytes -= nPaddingBytes;
			}
		};
	
		return CryptoJS.pad.Iso10126;
	});

/***/ },
/* 663 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	;(function (root, factory, undef) {
		if (( false ? "undefined" : _typeof(exports)) === "object") {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(639), __webpack_require__(655));
		} else if (true) {
			// AMD
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(639), __webpack_require__(655)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		/**
	  * ISO/IEC 9797-1 Padding Method 2.
	  */
		CryptoJS.pad.Iso97971 = {
			pad: function pad(data, blockSize) {
				// Add 0x80 byte
				data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));
	
				// Zero pad the rest
				CryptoJS.pad.ZeroPadding.pad(data, blockSize);
			},
	
			unpad: function unpad(data) {
				// Remove zero padding
				CryptoJS.pad.ZeroPadding.unpad(data);
	
				// Remove one more byte -- the 0x80 byte
				data.sigBytes--;
			}
		};
	
		return CryptoJS.pad.Iso97971;
	});

/***/ },
/* 664 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	;(function (root, factory, undef) {
		if (( false ? "undefined" : _typeof(exports)) === "object") {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(639), __webpack_require__(655));
		} else if (true) {
			// AMD
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(639), __webpack_require__(655)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		/**
	  * Zero padding strategy.
	  */
		CryptoJS.pad.ZeroPadding = {
			pad: function pad(data, blockSize) {
				// Shortcut
				var blockSizeBytes = blockSize * 4;
	
				// Pad
				data.clamp();
				data.sigBytes += blockSizeBytes - (data.sigBytes % blockSizeBytes || blockSizeBytes);
			},
	
			unpad: function unpad(data) {
				// Shortcut
				var dataWords = data.words;
	
				// Unpad
				var i = data.sigBytes - 1;
				while (!(dataWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff)) {
					i--;
				}
				data.sigBytes = i + 1;
			}
		};
	
		return CryptoJS.pad.ZeroPadding;
	});

/***/ },
/* 665 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	;(function (root, factory, undef) {
		if (( false ? "undefined" : _typeof(exports)) === "object") {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(639), __webpack_require__(655));
		} else if (true) {
			// AMD
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(639), __webpack_require__(655)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		/**
	  * A noop padding strategy.
	  */
		CryptoJS.pad.NoPadding = {
			pad: function pad() {},
	
			unpad: function unpad() {}
		};
	
		return CryptoJS.pad.NoPadding;
	});

/***/ },
/* 666 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	;(function (root, factory, undef) {
		if (( false ? "undefined" : _typeof(exports)) === "object") {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(639), __webpack_require__(655));
		} else if (true) {
			// AMD
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(639), __webpack_require__(655)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		(function (undefined) {
			// Shortcuts
			var C = CryptoJS;
			var C_lib = C.lib;
			var CipherParams = C_lib.CipherParams;
			var C_enc = C.enc;
			var Hex = C_enc.Hex;
			var C_format = C.format;
	
			var HexFormatter = C_format.Hex = {
				/**
	    * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.
	    *
	    * @param {CipherParams} cipherParams The cipher params object.
	    *
	    * @return {string} The hexadecimally encoded string.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);
	    */
				stringify: function stringify(cipherParams) {
					return cipherParams.ciphertext.toString(Hex);
				},
	
				/**
	    * Converts a hexadecimally encoded ciphertext string to a cipher params object.
	    *
	    * @param {string} input The hexadecimally encoded string.
	    *
	    * @return {CipherParams} The cipher params object.
	    *
	    * @static
	    *
	    * @example
	    *
	    *     var cipherParams = CryptoJS.format.Hex.parse(hexString);
	    */
				parse: function parse(input) {
					var ciphertext = Hex.parse(input);
					return CipherParams.create({ ciphertext: ciphertext });
				}
			};
		})();
	
		return CryptoJS.format.Hex;
	});

/***/ },
/* 667 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	;(function (root, factory, undef) {
		if (( false ? "undefined" : _typeof(exports)) === "object") {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(639), __webpack_require__(643), __webpack_require__(644), __webpack_require__(654), __webpack_require__(655));
		} else if (true) {
			// AMD
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(639), __webpack_require__(643), __webpack_require__(644), __webpack_require__(654), __webpack_require__(655)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		(function () {
			// Shortcuts
			var C = CryptoJS;
			var C_lib = C.lib;
			var BlockCipher = C_lib.BlockCipher;
			var C_algo = C.algo;
	
			// Lookup tables
			var SBOX = [];
			var INV_SBOX = [];
			var SUB_MIX_0 = [];
			var SUB_MIX_1 = [];
			var SUB_MIX_2 = [];
			var SUB_MIX_3 = [];
			var INV_SUB_MIX_0 = [];
			var INV_SUB_MIX_1 = [];
			var INV_SUB_MIX_2 = [];
			var INV_SUB_MIX_3 = [];
	
			// Compute lookup tables
			(function () {
				// Compute double table
				var d = [];
				for (var i = 0; i < 256; i++) {
					if (i < 128) {
						d[i] = i << 1;
					} else {
						d[i] = i << 1 ^ 0x11b;
					}
				}
	
				// Walk GF(2^8)
				var x = 0;
				var xi = 0;
				for (var i = 0; i < 256; i++) {
					// Compute sbox
					var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
					sx = sx >>> 8 ^ sx & 0xff ^ 0x63;
					SBOX[x] = sx;
					INV_SBOX[sx] = x;
	
					// Compute multiplication
					var x2 = d[x];
					var x4 = d[x2];
					var x8 = d[x4];
	
					// Compute sub bytes, mix columns tables
					var t = d[sx] * 0x101 ^ sx * 0x1010100;
					SUB_MIX_0[x] = t << 24 | t >>> 8;
					SUB_MIX_1[x] = t << 16 | t >>> 16;
					SUB_MIX_2[x] = t << 8 | t >>> 24;
					SUB_MIX_3[x] = t;
	
					// Compute inv sub bytes, inv mix columns tables
					var t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;
					INV_SUB_MIX_0[sx] = t << 24 | t >>> 8;
					INV_SUB_MIX_1[sx] = t << 16 | t >>> 16;
					INV_SUB_MIX_2[sx] = t << 8 | t >>> 24;
					INV_SUB_MIX_3[sx] = t;
	
					// Compute next counter
					if (!x) {
						x = xi = 1;
					} else {
						x = x2 ^ d[d[d[x8 ^ x2]]];
						xi ^= d[d[xi]];
					}
				}
			})();
	
			// Precomputed Rcon lookup
			var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];
	
			/**
	   * AES block cipher algorithm.
	   */
			var AES = C_algo.AES = BlockCipher.extend({
				_doReset: function _doReset() {
					// Skip reset of nRounds has been set before and key did not change
					if (this._nRounds && this._keyPriorReset === this._key) {
						return;
					}
	
					// Shortcuts
					var key = this._keyPriorReset = this._key;
					var keyWords = key.words;
					var keySize = key.sigBytes / 4;
	
					// Compute number of rounds
					var nRounds = this._nRounds = keySize + 6;
	
					// Compute number of key schedule rows
					var ksRows = (nRounds + 1) * 4;
	
					// Compute key schedule
					var keySchedule = this._keySchedule = [];
					for (var ksRow = 0; ksRow < ksRows; ksRow++) {
						if (ksRow < keySize) {
							keySchedule[ksRow] = keyWords[ksRow];
						} else {
							var t = keySchedule[ksRow - 1];
	
							if (!(ksRow % keySize)) {
								// Rot word
								t = t << 8 | t >>> 24;
	
								// Sub word
								t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 0xff] << 16 | SBOX[t >>> 8 & 0xff] << 8 | SBOX[t & 0xff];
	
								// Mix Rcon
								t ^= RCON[ksRow / keySize | 0] << 24;
							} else if (keySize > 6 && ksRow % keySize == 4) {
								// Sub word
								t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 0xff] << 16 | SBOX[t >>> 8 & 0xff] << 8 | SBOX[t & 0xff];
							}
	
							keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
						}
					}
	
					// Compute inv key schedule
					var invKeySchedule = this._invKeySchedule = [];
					for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
						var ksRow = ksRows - invKsRow;
	
						if (invKsRow % 4) {
							var t = keySchedule[ksRow];
						} else {
							var t = keySchedule[ksRow - 4];
						}
	
						if (invKsRow < 4 || ksRow <= 4) {
							invKeySchedule[invKsRow] = t;
						} else {
							invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[t >>> 16 & 0xff]] ^ INV_SUB_MIX_2[SBOX[t >>> 8 & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];
						}
					}
				},
	
				encryptBlock: function encryptBlock(M, offset) {
					this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
				},
	
				decryptBlock: function decryptBlock(M, offset) {
					// Swap 2nd and 4th rows
					var t = M[offset + 1];
					M[offset + 1] = M[offset + 3];
					M[offset + 3] = t;
	
					this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);
	
					// Inv swap 2nd and 4th rows
					var t = M[offset + 1];
					M[offset + 1] = M[offset + 3];
					M[offset + 3] = t;
				},
	
				_doCryptBlock: function _doCryptBlock(M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {
					// Shortcut
					var nRounds = this._nRounds;
	
					// Get input, add round key
					var s0 = M[offset] ^ keySchedule[0];
					var s1 = M[offset + 1] ^ keySchedule[1];
					var s2 = M[offset + 2] ^ keySchedule[2];
					var s3 = M[offset + 3] ^ keySchedule[3];
	
					// Key schedule row counter
					var ksRow = 4;
	
					// Rounds
					for (var round = 1; round < nRounds; round++) {
						// Shift rows, sub bytes, mix columns, add round key
						var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[s1 >>> 16 & 0xff] ^ SUB_MIX_2[s2 >>> 8 & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];
						var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[s2 >>> 16 & 0xff] ^ SUB_MIX_2[s3 >>> 8 & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];
						var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[s3 >>> 16 & 0xff] ^ SUB_MIX_2[s0 >>> 8 & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];
						var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[s0 >>> 16 & 0xff] ^ SUB_MIX_2[s1 >>> 8 & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];
	
						// Update state
						s0 = t0;
						s1 = t1;
						s2 = t2;
						s3 = t3;
					}
	
					// Shift rows, sub bytes, add round key
					var t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 0xff] << 16 | SBOX[s2 >>> 8 & 0xff] << 8 | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
					var t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 0xff] << 16 | SBOX[s3 >>> 8 & 0xff] << 8 | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
					var t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 0xff] << 16 | SBOX[s0 >>> 8 & 0xff] << 8 | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
					var t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 0xff] << 16 | SBOX[s1 >>> 8 & 0xff] << 8 | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];
	
					// Set output
					M[offset] = t0;
					M[offset + 1] = t1;
					M[offset + 2] = t2;
					M[offset + 3] = t3;
				},
	
				keySize: 256 / 32
			});
	
			/**
	   * Shortcut functions to the cipher's object interface.
	   *
	   * @example
	   *
	   *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);
	   *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);
	   */
			C.AES = BlockCipher._createHelper(AES);
		})();
	
		return CryptoJS.AES;
	});

/***/ },
/* 668 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	;(function (root, factory, undef) {
		if (( false ? "undefined" : _typeof(exports)) === "object") {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(639), __webpack_require__(643), __webpack_require__(644), __webpack_require__(654), __webpack_require__(655));
		} else if (true) {
			// AMD
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(639), __webpack_require__(643), __webpack_require__(644), __webpack_require__(654), __webpack_require__(655)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		(function () {
			// Shortcuts
			var C = CryptoJS;
			var C_lib = C.lib;
			var WordArray = C_lib.WordArray;
			var BlockCipher = C_lib.BlockCipher;
			var C_algo = C.algo;
	
			// Permuted Choice 1 constants
			var PC1 = [57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4];
	
			// Permuted Choice 2 constants
			var PC2 = [14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26, 8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32];
	
			// Cumulative bit shift constants
			var BIT_SHIFTS = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];
	
			// SBOXes and round permutation constants
			var SBOX_P = [{
				0x0: 0x808200,
				0x10000000: 0x8000,
				0x20000000: 0x808002,
				0x30000000: 0x2,
				0x40000000: 0x200,
				0x50000000: 0x808202,
				0x60000000: 0x800202,
				0x70000000: 0x800000,
				0x80000000: 0x202,
				0x90000000: 0x800200,
				0xa0000000: 0x8200,
				0xb0000000: 0x808000,
				0xc0000000: 0x8002,
				0xd0000000: 0x800002,
				0xe0000000: 0x0,
				0xf0000000: 0x8202,
				0x8000000: 0x0,
				0x18000000: 0x808202,
				0x28000000: 0x8202,
				0x38000000: 0x8000,
				0x48000000: 0x808200,
				0x58000000: 0x200,
				0x68000000: 0x808002,
				0x78000000: 0x2,
				0x88000000: 0x800200,
				0x98000000: 0x8200,
				0xa8000000: 0x808000,
				0xb8000000: 0x800202,
				0xc8000000: 0x800002,
				0xd8000000: 0x8002,
				0xe8000000: 0x202,
				0xf8000000: 0x800000,
				0x1: 0x8000,
				0x10000001: 0x2,
				0x20000001: 0x808200,
				0x30000001: 0x800000,
				0x40000001: 0x808002,
				0x50000001: 0x8200,
				0x60000001: 0x200,
				0x70000001: 0x800202,
				0x80000001: 0x808202,
				0x90000001: 0x808000,
				0xa0000001: 0x800002,
				0xb0000001: 0x8202,
				0xc0000001: 0x202,
				0xd0000001: 0x800200,
				0xe0000001: 0x8002,
				0xf0000001: 0x0,
				0x8000001: 0x808202,
				0x18000001: 0x808000,
				0x28000001: 0x800000,
				0x38000001: 0x200,
				0x48000001: 0x8000,
				0x58000001: 0x800002,
				0x68000001: 0x2,
				0x78000001: 0x8202,
				0x88000001: 0x8002,
				0x98000001: 0x800202,
				0xa8000001: 0x202,
				0xb8000001: 0x808200,
				0xc8000001: 0x800200,
				0xd8000001: 0x0,
				0xe8000001: 0x8200,
				0xf8000001: 0x808002
			}, {
				0x0: 0x40084010,
				0x1000000: 0x4000,
				0x2000000: 0x80000,
				0x3000000: 0x40080010,
				0x4000000: 0x40000010,
				0x5000000: 0x40084000,
				0x6000000: 0x40004000,
				0x7000000: 0x10,
				0x8000000: 0x84000,
				0x9000000: 0x40004010,
				0xa000000: 0x40000000,
				0xb000000: 0x84010,
				0xc000000: 0x80010,
				0xd000000: 0x0,
				0xe000000: 0x4010,
				0xf000000: 0x40080000,
				0x800000: 0x40004000,
				0x1800000: 0x84010,
				0x2800000: 0x10,
				0x3800000: 0x40004010,
				0x4800000: 0x40084010,
				0x5800000: 0x40000000,
				0x6800000: 0x80000,
				0x7800000: 0x40080010,
				0x8800000: 0x80010,
				0x9800000: 0x0,
				0xa800000: 0x4000,
				0xb800000: 0x40080000,
				0xc800000: 0x40000010,
				0xd800000: 0x84000,
				0xe800000: 0x40084000,
				0xf800000: 0x4010,
				0x10000000: 0x0,
				0x11000000: 0x40080010,
				0x12000000: 0x40004010,
				0x13000000: 0x40084000,
				0x14000000: 0x40080000,
				0x15000000: 0x10,
				0x16000000: 0x84010,
				0x17000000: 0x4000,
				0x18000000: 0x4010,
				0x19000000: 0x80000,
				0x1a000000: 0x80010,
				0x1b000000: 0x40000010,
				0x1c000000: 0x84000,
				0x1d000000: 0x40004000,
				0x1e000000: 0x40000000,
				0x1f000000: 0x40084010,
				0x10800000: 0x84010,
				0x11800000: 0x80000,
				0x12800000: 0x40080000,
				0x13800000: 0x4000,
				0x14800000: 0x40004000,
				0x15800000: 0x40084010,
				0x16800000: 0x10,
				0x17800000: 0x40000000,
				0x18800000: 0x40084000,
				0x19800000: 0x40000010,
				0x1a800000: 0x40004010,
				0x1b800000: 0x80010,
				0x1c800000: 0x0,
				0x1d800000: 0x4010,
				0x1e800000: 0x40080010,
				0x1f800000: 0x84000
			}, {
				0x0: 0x104,
				0x100000: 0x0,
				0x200000: 0x4000100,
				0x300000: 0x10104,
				0x400000: 0x10004,
				0x500000: 0x4000004,
				0x600000: 0x4010104,
				0x700000: 0x4010000,
				0x800000: 0x4000000,
				0x900000: 0x4010100,
				0xa00000: 0x10100,
				0xb00000: 0x4010004,
				0xc00000: 0x4000104,
				0xd00000: 0x10000,
				0xe00000: 0x4,
				0xf00000: 0x100,
				0x80000: 0x4010100,
				0x180000: 0x4010004,
				0x280000: 0x0,
				0x380000: 0x4000100,
				0x480000: 0x4000004,
				0x580000: 0x10000,
				0x680000: 0x10004,
				0x780000: 0x104,
				0x880000: 0x4,
				0x980000: 0x100,
				0xa80000: 0x4010000,
				0xb80000: 0x10104,
				0xc80000: 0x10100,
				0xd80000: 0x4000104,
				0xe80000: 0x4010104,
				0xf80000: 0x4000000,
				0x1000000: 0x4010100,
				0x1100000: 0x10004,
				0x1200000: 0x10000,
				0x1300000: 0x4000100,
				0x1400000: 0x100,
				0x1500000: 0x4010104,
				0x1600000: 0x4000004,
				0x1700000: 0x0,
				0x1800000: 0x4000104,
				0x1900000: 0x4000000,
				0x1a00000: 0x4,
				0x1b00000: 0x10100,
				0x1c00000: 0x4010000,
				0x1d00000: 0x104,
				0x1e00000: 0x10104,
				0x1f00000: 0x4010004,
				0x1080000: 0x4000000,
				0x1180000: 0x104,
				0x1280000: 0x4010100,
				0x1380000: 0x0,
				0x1480000: 0x10004,
				0x1580000: 0x4000100,
				0x1680000: 0x100,
				0x1780000: 0x4010004,
				0x1880000: 0x10000,
				0x1980000: 0x4010104,
				0x1a80000: 0x10104,
				0x1b80000: 0x4000004,
				0x1c80000: 0x4000104,
				0x1d80000: 0x4010000,
				0x1e80000: 0x4,
				0x1f80000: 0x10100
			}, {
				0x0: 0x80401000,
				0x10000: 0x80001040,
				0x20000: 0x401040,
				0x30000: 0x80400000,
				0x40000: 0x0,
				0x50000: 0x401000,
				0x60000: 0x80000040,
				0x70000: 0x400040,
				0x80000: 0x80000000,
				0x90000: 0x400000,
				0xa0000: 0x40,
				0xb0000: 0x80001000,
				0xc0000: 0x80400040,
				0xd0000: 0x1040,
				0xe0000: 0x1000,
				0xf0000: 0x80401040,
				0x8000: 0x80001040,
				0x18000: 0x40,
				0x28000: 0x80400040,
				0x38000: 0x80001000,
				0x48000: 0x401000,
				0x58000: 0x80401040,
				0x68000: 0x0,
				0x78000: 0x80400000,
				0x88000: 0x1000,
				0x98000: 0x80401000,
				0xa8000: 0x400000,
				0xb8000: 0x1040,
				0xc8000: 0x80000000,
				0xd8000: 0x400040,
				0xe8000: 0x401040,
				0xf8000: 0x80000040,
				0x100000: 0x400040,
				0x110000: 0x401000,
				0x120000: 0x80000040,
				0x130000: 0x0,
				0x140000: 0x1040,
				0x150000: 0x80400040,
				0x160000: 0x80401000,
				0x170000: 0x80001040,
				0x180000: 0x80401040,
				0x190000: 0x80000000,
				0x1a0000: 0x80400000,
				0x1b0000: 0x401040,
				0x1c0000: 0x80001000,
				0x1d0000: 0x400000,
				0x1e0000: 0x40,
				0x1f0000: 0x1000,
				0x108000: 0x80400000,
				0x118000: 0x80401040,
				0x128000: 0x0,
				0x138000: 0x401000,
				0x148000: 0x400040,
				0x158000: 0x80000000,
				0x168000: 0x80001040,
				0x178000: 0x40,
				0x188000: 0x80000040,
				0x198000: 0x1000,
				0x1a8000: 0x80001000,
				0x1b8000: 0x80400040,
				0x1c8000: 0x1040,
				0x1d8000: 0x80401000,
				0x1e8000: 0x400000,
				0x1f8000: 0x401040
			}, {
				0x0: 0x80,
				0x1000: 0x1040000,
				0x2000: 0x40000,
				0x3000: 0x20000000,
				0x4000: 0x20040080,
				0x5000: 0x1000080,
				0x6000: 0x21000080,
				0x7000: 0x40080,
				0x8000: 0x1000000,
				0x9000: 0x20040000,
				0xa000: 0x20000080,
				0xb000: 0x21040080,
				0xc000: 0x21040000,
				0xd000: 0x0,
				0xe000: 0x1040080,
				0xf000: 0x21000000,
				0x800: 0x1040080,
				0x1800: 0x21000080,
				0x2800: 0x80,
				0x3800: 0x1040000,
				0x4800: 0x40000,
				0x5800: 0x20040080,
				0x6800: 0x21040000,
				0x7800: 0x20000000,
				0x8800: 0x20040000,
				0x9800: 0x0,
				0xa800: 0x21040080,
				0xb800: 0x1000080,
				0xc800: 0x20000080,
				0xd800: 0x21000000,
				0xe800: 0x1000000,
				0xf800: 0x40080,
				0x10000: 0x40000,
				0x11000: 0x80,
				0x12000: 0x20000000,
				0x13000: 0x21000080,
				0x14000: 0x1000080,
				0x15000: 0x21040000,
				0x16000: 0x20040080,
				0x17000: 0x1000000,
				0x18000: 0x21040080,
				0x19000: 0x21000000,
				0x1a000: 0x1040000,
				0x1b000: 0x20040000,
				0x1c000: 0x40080,
				0x1d000: 0x20000080,
				0x1e000: 0x0,
				0x1f000: 0x1040080,
				0x10800: 0x21000080,
				0x11800: 0x1000000,
				0x12800: 0x1040000,
				0x13800: 0x20040080,
				0x14800: 0x20000000,
				0x15800: 0x1040080,
				0x16800: 0x80,
				0x17800: 0x21040000,
				0x18800: 0x40080,
				0x19800: 0x21040080,
				0x1a800: 0x0,
				0x1b800: 0x21000000,
				0x1c800: 0x1000080,
				0x1d800: 0x40000,
				0x1e800: 0x20040000,
				0x1f800: 0x20000080
			}, {
				0x0: 0x10000008,
				0x100: 0x2000,
				0x200: 0x10200000,
				0x300: 0x10202008,
				0x400: 0x10002000,
				0x500: 0x200000,
				0x600: 0x200008,
				0x700: 0x10000000,
				0x800: 0x0,
				0x900: 0x10002008,
				0xa00: 0x202000,
				0xb00: 0x8,
				0xc00: 0x10200008,
				0xd00: 0x202008,
				0xe00: 0x2008,
				0xf00: 0x10202000,
				0x80: 0x10200000,
				0x180: 0x10202008,
				0x280: 0x8,
				0x380: 0x200000,
				0x480: 0x202008,
				0x580: 0x10000008,
				0x680: 0x10002000,
				0x780: 0x2008,
				0x880: 0x200008,
				0x980: 0x2000,
				0xa80: 0x10002008,
				0xb80: 0x10200008,
				0xc80: 0x0,
				0xd80: 0x10202000,
				0xe80: 0x202000,
				0xf80: 0x10000000,
				0x1000: 0x10002000,
				0x1100: 0x10200008,
				0x1200: 0x10202008,
				0x1300: 0x2008,
				0x1400: 0x200000,
				0x1500: 0x10000000,
				0x1600: 0x10000008,
				0x1700: 0x202000,
				0x1800: 0x202008,
				0x1900: 0x0,
				0x1a00: 0x8,
				0x1b00: 0x10200000,
				0x1c00: 0x2000,
				0x1d00: 0x10002008,
				0x1e00: 0x10202000,
				0x1f00: 0x200008,
				0x1080: 0x8,
				0x1180: 0x202000,
				0x1280: 0x200000,
				0x1380: 0x10000008,
				0x1480: 0x10002000,
				0x1580: 0x2008,
				0x1680: 0x10202008,
				0x1780: 0x10200000,
				0x1880: 0x10202000,
				0x1980: 0x10200008,
				0x1a80: 0x2000,
				0x1b80: 0x202008,
				0x1c80: 0x200008,
				0x1d80: 0x0,
				0x1e80: 0x10000000,
				0x1f80: 0x10002008
			}, {
				0x0: 0x100000,
				0x10: 0x2000401,
				0x20: 0x400,
				0x30: 0x100401,
				0x40: 0x2100401,
				0x50: 0x0,
				0x60: 0x1,
				0x70: 0x2100001,
				0x80: 0x2000400,
				0x90: 0x100001,
				0xa0: 0x2000001,
				0xb0: 0x2100400,
				0xc0: 0x2100000,
				0xd0: 0x401,
				0xe0: 0x100400,
				0xf0: 0x2000000,
				0x8: 0x2100001,
				0x18: 0x0,
				0x28: 0x2000401,
				0x38: 0x2100400,
				0x48: 0x100000,
				0x58: 0x2000001,
				0x68: 0x2000000,
				0x78: 0x401,
				0x88: 0x100401,
				0x98: 0x2000400,
				0xa8: 0x2100000,
				0xb8: 0x100001,
				0xc8: 0x400,
				0xd8: 0x2100401,
				0xe8: 0x1,
				0xf8: 0x100400,
				0x100: 0x2000000,
				0x110: 0x100000,
				0x120: 0x2000401,
				0x130: 0x2100001,
				0x140: 0x100001,
				0x150: 0x2000400,
				0x160: 0x2100400,
				0x170: 0x100401,
				0x180: 0x401,
				0x190: 0x2100401,
				0x1a0: 0x100400,
				0x1b0: 0x1,
				0x1c0: 0x0,
				0x1d0: 0x2100000,
				0x1e0: 0x2000001,
				0x1f0: 0x400,
				0x108: 0x100400,
				0x118: 0x2000401,
				0x128: 0x2100001,
				0x138: 0x1,
				0x148: 0x2000000,
				0x158: 0x100000,
				0x168: 0x401,
				0x178: 0x2100400,
				0x188: 0x2000001,
				0x198: 0x2100000,
				0x1a8: 0x0,
				0x1b8: 0x2100401,
				0x1c8: 0x100401,
				0x1d8: 0x400,
				0x1e8: 0x2000400,
				0x1f8: 0x100001
			}, {
				0x0: 0x8000820,
				0x1: 0x20000,
				0x2: 0x8000000,
				0x3: 0x20,
				0x4: 0x20020,
				0x5: 0x8020820,
				0x6: 0x8020800,
				0x7: 0x800,
				0x8: 0x8020000,
				0x9: 0x8000800,
				0xa: 0x20800,
				0xb: 0x8020020,
				0xc: 0x820,
				0xd: 0x0,
				0xe: 0x8000020,
				0xf: 0x20820,
				0x80000000: 0x800,
				0x80000001: 0x8020820,
				0x80000002: 0x8000820,
				0x80000003: 0x8000000,
				0x80000004: 0x8020000,
				0x80000005: 0x20800,
				0x80000006: 0x20820,
				0x80000007: 0x20,
				0x80000008: 0x8000020,
				0x80000009: 0x820,
				0x8000000a: 0x20020,
				0x8000000b: 0x8020800,
				0x8000000c: 0x0,
				0x8000000d: 0x8020020,
				0x8000000e: 0x8000800,
				0x8000000f: 0x20000,
				0x10: 0x20820,
				0x11: 0x8020800,
				0x12: 0x20,
				0x13: 0x800,
				0x14: 0x8000800,
				0x15: 0x8000020,
				0x16: 0x8020020,
				0x17: 0x20000,
				0x18: 0x0,
				0x19: 0x20020,
				0x1a: 0x8020000,
				0x1b: 0x8000820,
				0x1c: 0x8020820,
				0x1d: 0x20800,
				0x1e: 0x820,
				0x1f: 0x8000000,
				0x80000010: 0x20000,
				0x80000011: 0x800,
				0x80000012: 0x8020020,
				0x80000013: 0x20820,
				0x80000014: 0x20,
				0x80000015: 0x8020000,
				0x80000016: 0x8000000,
				0x80000017: 0x8000820,
				0x80000018: 0x8020820,
				0x80000019: 0x8000020,
				0x8000001a: 0x8000800,
				0x8000001b: 0x0,
				0x8000001c: 0x20800,
				0x8000001d: 0x820,
				0x8000001e: 0x20020,
				0x8000001f: 0x8020800
			}];
	
			// Masks that select the SBOX input
			var SBOX_MASK = [0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000, 0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f];
	
			/**
	   * DES block cipher algorithm.
	   */
			var DES = C_algo.DES = BlockCipher.extend({
				_doReset: function _doReset() {
					// Shortcuts
					var key = this._key;
					var keyWords = key.words;
	
					// Select 56 bits according to PC1
					var keyBits = [];
					for (var i = 0; i < 56; i++) {
						var keyBitPos = PC1[i] - 1;
						keyBits[i] = keyWords[keyBitPos >>> 5] >>> 31 - keyBitPos % 32 & 1;
					}
	
					// Assemble 16 subkeys
					var subKeys = this._subKeys = [];
					for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
						// Create subkey
						var subKey = subKeys[nSubKey] = [];
	
						// Shortcut
						var bitShift = BIT_SHIFTS[nSubKey];
	
						// Select 48 bits according to PC2
						for (var i = 0; i < 24; i++) {
							// Select from the left 28 key bits
							subKey[i / 6 | 0] |= keyBits[(PC2[i] - 1 + bitShift) % 28] << 31 - i % 6;
	
							// Select from the right 28 key bits
							subKey[4 + (i / 6 | 0)] |= keyBits[28 + (PC2[i + 24] - 1 + bitShift) % 28] << 31 - i % 6;
						}
	
						// Since each subkey is applied to an expanded 32-bit input,
						// the subkey can be broken into 8 values scaled to 32-bits,
						// which allows the key to be used without expansion
						subKey[0] = subKey[0] << 1 | subKey[0] >>> 31;
						for (var i = 1; i < 7; i++) {
							subKey[i] = subKey[i] >>> (i - 1) * 4 + 3;
						}
						subKey[7] = subKey[7] << 5 | subKey[7] >>> 27;
					}
	
					// Compute inverse subkeys
					var invSubKeys = this._invSubKeys = [];
					for (var i = 0; i < 16; i++) {
						invSubKeys[i] = subKeys[15 - i];
					}
				},
	
				encryptBlock: function encryptBlock(M, offset) {
					this._doCryptBlock(M, offset, this._subKeys);
				},
	
				decryptBlock: function decryptBlock(M, offset) {
					this._doCryptBlock(M, offset, this._invSubKeys);
				},
	
				_doCryptBlock: function _doCryptBlock(M, offset, subKeys) {
					// Get input
					this._lBlock = M[offset];
					this._rBlock = M[offset + 1];
	
					// Initial permutation
					exchangeLR.call(this, 4, 0x0f0f0f0f);
					exchangeLR.call(this, 16, 0x0000ffff);
					exchangeRL.call(this, 2, 0x33333333);
					exchangeRL.call(this, 8, 0x00ff00ff);
					exchangeLR.call(this, 1, 0x55555555);
	
					// Rounds
					for (var round = 0; round < 16; round++) {
						// Shortcuts
						var subKey = subKeys[round];
						var lBlock = this._lBlock;
						var rBlock = this._rBlock;
	
						// Feistel function
						var f = 0;
						for (var i = 0; i < 8; i++) {
							f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
						}
						this._lBlock = rBlock;
						this._rBlock = lBlock ^ f;
					}
	
					// Undo swap from last round
					var t = this._lBlock;
					this._lBlock = this._rBlock;
					this._rBlock = t;
	
					// Final permutation
					exchangeLR.call(this, 1, 0x55555555);
					exchangeRL.call(this, 8, 0x00ff00ff);
					exchangeRL.call(this, 2, 0x33333333);
					exchangeLR.call(this, 16, 0x0000ffff);
					exchangeLR.call(this, 4, 0x0f0f0f0f);
	
					// Set output
					M[offset] = this._lBlock;
					M[offset + 1] = this._rBlock;
				},
	
				keySize: 64 / 32,
	
				ivSize: 64 / 32,
	
				blockSize: 64 / 32
			});
	
			// Swap bits across the left and right words
			function exchangeLR(offset, mask) {
				var t = (this._lBlock >>> offset ^ this._rBlock) & mask;
				this._rBlock ^= t;
				this._lBlock ^= t << offset;
			}
	
			function exchangeRL(offset, mask) {
				var t = (this._rBlock >>> offset ^ this._lBlock) & mask;
				this._lBlock ^= t;
				this._rBlock ^= t << offset;
			}
	
			/**
	   * Shortcut functions to the cipher's object interface.
	   *
	   * @example
	   *
	   *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);
	   *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);
	   */
			C.DES = BlockCipher._createHelper(DES);
	
			/**
	   * Triple-DES block cipher algorithm.
	   */
			var TripleDES = C_algo.TripleDES = BlockCipher.extend({
				_doReset: function _doReset() {
					// Shortcuts
					var key = this._key;
					var keyWords = key.words;
	
					// Create DES instances
					this._des1 = DES.createEncryptor(WordArray.create(keyWords.slice(0, 2)));
					this._des2 = DES.createEncryptor(WordArray.create(keyWords.slice(2, 4)));
					this._des3 = DES.createEncryptor(WordArray.create(keyWords.slice(4, 6)));
				},
	
				encryptBlock: function encryptBlock(M, offset) {
					this._des1.encryptBlock(M, offset);
					this._des2.decryptBlock(M, offset);
					this._des3.encryptBlock(M, offset);
				},
	
				decryptBlock: function decryptBlock(M, offset) {
					this._des3.decryptBlock(M, offset);
					this._des2.encryptBlock(M, offset);
					this._des1.decryptBlock(M, offset);
				},
	
				keySize: 192 / 32,
	
				ivSize: 64 / 32,
	
				blockSize: 64 / 32
			});
	
			/**
	   * Shortcut functions to the cipher's object interface.
	   *
	   * @example
	   *
	   *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);
	   *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);
	   */
			C.TripleDES = BlockCipher._createHelper(TripleDES);
		})();
	
		return CryptoJS.TripleDES;
	});

/***/ },
/* 669 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	;(function (root, factory, undef) {
		if (( false ? "undefined" : _typeof(exports)) === "object") {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(639), __webpack_require__(643), __webpack_require__(644), __webpack_require__(654), __webpack_require__(655));
		} else if (true) {
			// AMD
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(639), __webpack_require__(643), __webpack_require__(644), __webpack_require__(654), __webpack_require__(655)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		(function () {
			// Shortcuts
			var C = CryptoJS;
			var C_lib = C.lib;
			var StreamCipher = C_lib.StreamCipher;
			var C_algo = C.algo;
	
			/**
	   * RC4 stream cipher algorithm.
	   */
			var RC4 = C_algo.RC4 = StreamCipher.extend({
				_doReset: function _doReset() {
					// Shortcuts
					var key = this._key;
					var keyWords = key.words;
					var keySigBytes = key.sigBytes;
	
					// Init sbox
					var S = this._S = [];
					for (var i = 0; i < 256; i++) {
						S[i] = i;
					}
	
					// Key setup
					for (var i = 0, j = 0; i < 256; i++) {
						var keyByteIndex = i % keySigBytes;
						var keyByte = keyWords[keyByteIndex >>> 2] >>> 24 - keyByteIndex % 4 * 8 & 0xff;
	
						j = (j + S[i] + keyByte) % 256;
	
						// Swap
						var t = S[i];
						S[i] = S[j];
						S[j] = t;
					}
	
					// Counters
					this._i = this._j = 0;
				},
	
				_doProcessBlock: function _doProcessBlock(M, offset) {
					M[offset] ^= generateKeystreamWord.call(this);
				},
	
				keySize: 256 / 32,
	
				ivSize: 0
			});
	
			function generateKeystreamWord() {
				// Shortcuts
				var S = this._S;
				var i = this._i;
				var j = this._j;
	
				// Generate keystream word
				var keystreamWord = 0;
				for (var n = 0; n < 4; n++) {
					i = (i + 1) % 256;
					j = (j + S[i]) % 256;
	
					// Swap
					var t = S[i];
					S[i] = S[j];
					S[j] = t;
	
					keystreamWord |= S[(S[i] + S[j]) % 256] << 24 - n * 8;
				}
	
				// Update counters
				this._i = i;
				this._j = j;
	
				return keystreamWord;
			}
	
			/**
	   * Shortcut functions to the cipher's object interface.
	   *
	   * @example
	   *
	   *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);
	   *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);
	   */
			C.RC4 = StreamCipher._createHelper(RC4);
	
			/**
	   * Modified RC4 stream cipher algorithm.
	   */
			var RC4Drop = C_algo.RC4Drop = RC4.extend({
				/**
	    * Configuration options.
	    *
	    * @property {number} drop The number of keystream words to drop. Default 192
	    */
				cfg: RC4.cfg.extend({
					drop: 192
				}),
	
				_doReset: function _doReset() {
					RC4._doReset.call(this);
	
					// Drop
					for (var i = this.cfg.drop; i > 0; i--) {
						generateKeystreamWord.call(this);
					}
				}
			});
	
			/**
	   * Shortcut functions to the cipher's object interface.
	   *
	   * @example
	   *
	   *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);
	   *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);
	   */
			C.RC4Drop = StreamCipher._createHelper(RC4Drop);
		})();
	
		return CryptoJS.RC4;
	});

/***/ },
/* 670 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	;(function (root, factory, undef) {
		if (( false ? "undefined" : _typeof(exports)) === "object") {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(639), __webpack_require__(643), __webpack_require__(644), __webpack_require__(654), __webpack_require__(655));
		} else if (true) {
			// AMD
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(639), __webpack_require__(643), __webpack_require__(644), __webpack_require__(654), __webpack_require__(655)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		(function () {
			// Shortcuts
			var C = CryptoJS;
			var C_lib = C.lib;
			var StreamCipher = C_lib.StreamCipher;
			var C_algo = C.algo;
	
			// Reusable objects
			var S = [];
			var C_ = [];
			var G = [];
	
			/**
	   * Rabbit stream cipher algorithm
	   */
			var Rabbit = C_algo.Rabbit = StreamCipher.extend({
				_doReset: function _doReset() {
					// Shortcuts
					var K = this._key.words;
					var iv = this.cfg.iv;
	
					// Swap endian
					for (var i = 0; i < 4; i++) {
						K[i] = (K[i] << 8 | K[i] >>> 24) & 0x00ff00ff | (K[i] << 24 | K[i] >>> 8) & 0xff00ff00;
					}
	
					// Generate initial state values
					var X = this._X = [K[0], K[3] << 16 | K[2] >>> 16, K[1], K[0] << 16 | K[3] >>> 16, K[2], K[1] << 16 | K[0] >>> 16, K[3], K[2] << 16 | K[1] >>> 16];
	
					// Generate initial counter values
					var C = this._C = [K[2] << 16 | K[2] >>> 16, K[0] & 0xffff0000 | K[1] & 0x0000ffff, K[3] << 16 | K[3] >>> 16, K[1] & 0xffff0000 | K[2] & 0x0000ffff, K[0] << 16 | K[0] >>> 16, K[2] & 0xffff0000 | K[3] & 0x0000ffff, K[1] << 16 | K[1] >>> 16, K[3] & 0xffff0000 | K[0] & 0x0000ffff];
	
					// Carry bit
					this._b = 0;
	
					// Iterate the system four times
					for (var i = 0; i < 4; i++) {
						nextState.call(this);
					}
	
					// Modify the counters
					for (var i = 0; i < 8; i++) {
						C[i] ^= X[i + 4 & 7];
					}
	
					// IV setup
					if (iv) {
						// Shortcuts
						var IV = iv.words;
						var IV_0 = IV[0];
						var IV_1 = IV[1];
	
						// Generate four subvectors
						var i0 = (IV_0 << 8 | IV_0 >>> 24) & 0x00ff00ff | (IV_0 << 24 | IV_0 >>> 8) & 0xff00ff00;
						var i2 = (IV_1 << 8 | IV_1 >>> 24) & 0x00ff00ff | (IV_1 << 24 | IV_1 >>> 8) & 0xff00ff00;
						var i1 = i0 >>> 16 | i2 & 0xffff0000;
						var i3 = i2 << 16 | i0 & 0x0000ffff;
	
						// Modify counter values
						C[0] ^= i0;
						C[1] ^= i1;
						C[2] ^= i2;
						C[3] ^= i3;
						C[4] ^= i0;
						C[5] ^= i1;
						C[6] ^= i2;
						C[7] ^= i3;
	
						// Iterate the system four times
						for (var i = 0; i < 4; i++) {
							nextState.call(this);
						}
					}
				},
	
				_doProcessBlock: function _doProcessBlock(M, offset) {
					// Shortcut
					var X = this._X;
	
					// Iterate the system
					nextState.call(this);
	
					// Generate four keystream words
					S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
					S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
					S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
					S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;
	
					for (var i = 0; i < 4; i++) {
						// Swap endian
						S[i] = (S[i] << 8 | S[i] >>> 24) & 0x00ff00ff | (S[i] << 24 | S[i] >>> 8) & 0xff00ff00;
	
						// Encrypt
						M[offset + i] ^= S[i];
					}
				},
	
				blockSize: 128 / 32,
	
				ivSize: 64 / 32
			});
	
			function nextState() {
				// Shortcuts
				var X = this._X;
				var C = this._C;
	
				// Save old counter values
				for (var i = 0; i < 8; i++) {
					C_[i] = C[i];
				}
	
				// Calculate new counter values
				C[0] = C[0] + 0x4d34d34d + this._b | 0;
				C[1] = C[1] + 0xd34d34d3 + (C[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
				C[2] = C[2] + 0x34d34d34 + (C[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
				C[3] = C[3] + 0x4d34d34d + (C[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
				C[4] = C[4] + 0xd34d34d3 + (C[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
				C[5] = C[5] + 0x34d34d34 + (C[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
				C[6] = C[6] + 0x4d34d34d + (C[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
				C[7] = C[7] + 0xd34d34d3 + (C[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
				this._b = C[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
	
				// Calculate the g-values
				for (var i = 0; i < 8; i++) {
					var gx = X[i] + C[i];
	
					// Construct high and low argument for squaring
					var ga = gx & 0xffff;
					var gb = gx >>> 16;
	
					// Calculate high and low result of squaring
					var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
					var gl = ((gx & 0xffff0000) * gx | 0) + ((gx & 0x0000ffff) * gx | 0);
	
					// High XOR low
					G[i] = gh ^ gl;
				}
	
				// Calculate new state values
				X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
				X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
				X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
				X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
				X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
				X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
				X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
				X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
			}
	
			/**
	   * Shortcut functions to the cipher's object interface.
	   *
	   * @example
	   *
	   *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);
	   *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);
	   */
			C.Rabbit = StreamCipher._createHelper(Rabbit);
		})();
	
		return CryptoJS.Rabbit;
	});

/***/ },
/* 671 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	;(function (root, factory, undef) {
		if (( false ? "undefined" : _typeof(exports)) === "object") {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(639), __webpack_require__(643), __webpack_require__(644), __webpack_require__(654), __webpack_require__(655));
		} else if (true) {
			// AMD
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(639), __webpack_require__(643), __webpack_require__(644), __webpack_require__(654), __webpack_require__(655)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	})(undefined, function (CryptoJS) {
	
		(function () {
			// Shortcuts
			var C = CryptoJS;
			var C_lib = C.lib;
			var StreamCipher = C_lib.StreamCipher;
			var C_algo = C.algo;
	
			// Reusable objects
			var S = [];
			var C_ = [];
			var G = [];
	
			/**
	   * Rabbit stream cipher algorithm.
	   *
	   * This is a legacy version that neglected to convert the key to little-endian.
	   * This error doesn't affect the cipher's security,
	   * but it does affect its compatibility with other implementations.
	   */
			var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
				_doReset: function _doReset() {
					// Shortcuts
					var K = this._key.words;
					var iv = this.cfg.iv;
	
					// Generate initial state values
					var X = this._X = [K[0], K[3] << 16 | K[2] >>> 16, K[1], K[0] << 16 | K[3] >>> 16, K[2], K[1] << 16 | K[0] >>> 16, K[3], K[2] << 16 | K[1] >>> 16];
	
					// Generate initial counter values
					var C = this._C = [K[2] << 16 | K[2] >>> 16, K[0] & 0xffff0000 | K[1] & 0x0000ffff, K[3] << 16 | K[3] >>> 16, K[1] & 0xffff0000 | K[2] & 0x0000ffff, K[0] << 16 | K[0] >>> 16, K[2] & 0xffff0000 | K[3] & 0x0000ffff, K[1] << 16 | K[1] >>> 16, K[3] & 0xffff0000 | K[0] & 0x0000ffff];
	
					// Carry bit
					this._b = 0;
	
					// Iterate the system four times
					for (var i = 0; i < 4; i++) {
						nextState.call(this);
					}
	
					// Modify the counters
					for (var i = 0; i < 8; i++) {
						C[i] ^= X[i + 4 & 7];
					}
	
					// IV setup
					if (iv) {
						// Shortcuts
						var IV = iv.words;
						var IV_0 = IV[0];
						var IV_1 = IV[1];
	
						// Generate four subvectors
						var i0 = (IV_0 << 8 | IV_0 >>> 24) & 0x00ff00ff | (IV_0 << 24 | IV_0 >>> 8) & 0xff00ff00;
						var i2 = (IV_1 << 8 | IV_1 >>> 24) & 0x00ff00ff | (IV_1 << 24 | IV_1 >>> 8) & 0xff00ff00;
						var i1 = i0 >>> 16 | i2 & 0xffff0000;
						var i3 = i2 << 16 | i0 & 0x0000ffff;
	
						// Modify counter values
						C[0] ^= i0;
						C[1] ^= i1;
						C[2] ^= i2;
						C[3] ^= i3;
						C[4] ^= i0;
						C[5] ^= i1;
						C[6] ^= i2;
						C[7] ^= i3;
	
						// Iterate the system four times
						for (var i = 0; i < 4; i++) {
							nextState.call(this);
						}
					}
				},
	
				_doProcessBlock: function _doProcessBlock(M, offset) {
					// Shortcut
					var X = this._X;
	
					// Iterate the system
					nextState.call(this);
	
					// Generate four keystream words
					S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
					S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
					S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
					S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;
	
					for (var i = 0; i < 4; i++) {
						// Swap endian
						S[i] = (S[i] << 8 | S[i] >>> 24) & 0x00ff00ff | (S[i] << 24 | S[i] >>> 8) & 0xff00ff00;
	
						// Encrypt
						M[offset + i] ^= S[i];
					}
				},
	
				blockSize: 128 / 32,
	
				ivSize: 64 / 32
			});
	
			function nextState() {
				// Shortcuts
				var X = this._X;
				var C = this._C;
	
				// Save old counter values
				for (var i = 0; i < 8; i++) {
					C_[i] = C[i];
				}
	
				// Calculate new counter values
				C[0] = C[0] + 0x4d34d34d + this._b | 0;
				C[1] = C[1] + 0xd34d34d3 + (C[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
				C[2] = C[2] + 0x34d34d34 + (C[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
				C[3] = C[3] + 0x4d34d34d + (C[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
				C[4] = C[4] + 0xd34d34d3 + (C[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
				C[5] = C[5] + 0x34d34d34 + (C[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
				C[6] = C[6] + 0x4d34d34d + (C[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
				C[7] = C[7] + 0xd34d34d3 + (C[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
				this._b = C[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
	
				// Calculate the g-values
				for (var i = 0; i < 8; i++) {
					var gx = X[i] + C[i];
	
					// Construct high and low argument for squaring
					var ga = gx & 0xffff;
					var gb = gx >>> 16;
	
					// Calculate high and low result of squaring
					var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
					var gl = ((gx & 0xffff0000) * gx | 0) + ((gx & 0x0000ffff) * gx | 0);
	
					// High XOR low
					G[i] = gh ^ gl;
				}
	
				// Calculate new state values
				X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
				X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
				X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
				X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
				X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
				X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
				X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
				X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
			}
	
			/**
	   * Shortcut functions to the cipher's object interface.
	   *
	   * @example
	   *
	   *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);
	   *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);
	   */
			C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
		})();
	
		return CryptoJS.RabbitLegacy;
	});

/***/ },
/* 672 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
	
	var axios = __webpack_require__(554);
	var _ = __webpack_require__(673);
	
	var feeURL = 'https://bitaps.com/api/fee';
	
	module.exports = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
	  var result, totalFees;
	  return regeneratorRuntime.wrap(function _callee$(_context) {
	    while (1) {
	      switch (_context.prev = _context.next) {
	        case 0:
	          _context.prev = 0;
	          _context.next = 3;
	          return axios.get(feeURL).catch(function (error) {
	            return error;
	          });
	
	        case 3:
	          result = _context.sent;
	          _context.next = 6;
	          return _.mapValues(result.data, function (fee) {
	            return calculateTotalFee(fee);
	          });
	
	        case 6:
	          totalFees = _context.sent;
	          return _context.abrupt('return', totalFees);
	
	        case 10:
	          _context.prev = 10;
	          _context.t0 = _context['catch'](0);
	          throw _context.t0.response ? _context.t0.response.data : new Error(_context.t0);
	
	        case 13:
	        case 'end':
	          return _context.stop();
	      }
	    }
	  }, _callee, undefined, [[0, 10]]);
	}));
	
	var calculateTotalFee = function calculateTotalFee(feePerByte) {
	  var totalFee = feePerByte * 226;
	  totalFee = Math.ceil(totalFee);
	  return totalFee;
	};

/***/ },
/* 673 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(global, module) {'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};/**
	 * @license
	 * Lodash <https://lodash.com/>
	 * Copyright JS Foundation and other contributors <https://js.foundation/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */;(function(){/** Used as a safe reference for `undefined` in pre-ES5 environments. */var undefined;/** Used as the semantic version number. */var VERSION='4.17.5';/** Used as the size to enable large array optimizations. */var LARGE_ARRAY_SIZE=200;/** Error message constants. */var CORE_ERROR_TEXT='Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',FUNC_ERROR_TEXT='Expected a function';/** Used to stand-in for `undefined` hash values. */var HASH_UNDEFINED='__lodash_hash_undefined__';/** Used as the maximum memoize cache size. */var MAX_MEMOIZE_SIZE=500;/** Used as the internal argument placeholder. */var PLACEHOLDER='__lodash_placeholder__';/** Used to compose bitmasks for cloning. */var CLONE_DEEP_FLAG=1,CLONE_FLAT_FLAG=2,CLONE_SYMBOLS_FLAG=4;/** Used to compose bitmasks for value comparisons. */var COMPARE_PARTIAL_FLAG=1,COMPARE_UNORDERED_FLAG=2;/** Used to compose bitmasks for function metadata. */var WRAP_BIND_FLAG=1,WRAP_BIND_KEY_FLAG=2,WRAP_CURRY_BOUND_FLAG=4,WRAP_CURRY_FLAG=8,WRAP_CURRY_RIGHT_FLAG=16,WRAP_PARTIAL_FLAG=32,WRAP_PARTIAL_RIGHT_FLAG=64,WRAP_ARY_FLAG=128,WRAP_REARG_FLAG=256,WRAP_FLIP_FLAG=512;/** Used as default options for `_.truncate`. */var DEFAULT_TRUNC_LENGTH=30,DEFAULT_TRUNC_OMISSION='...';/** Used to detect hot functions by number of calls within a span of milliseconds. */var HOT_COUNT=800,HOT_SPAN=16;/** Used to indicate the type of lazy iteratees. */var LAZY_FILTER_FLAG=1,LAZY_MAP_FLAG=2,LAZY_WHILE_FLAG=3;/** Used as references for various `Number` constants. */var INFINITY=1/0,MAX_SAFE_INTEGER=9007199254740991,MAX_INTEGER=1.7976931348623157e+308,NAN=0/0;/** Used as references for the maximum length and index of an array. */var MAX_ARRAY_LENGTH=4294967295,MAX_ARRAY_INDEX=MAX_ARRAY_LENGTH-1,HALF_MAX_ARRAY_LENGTH=MAX_ARRAY_LENGTH>>>1;/** Used to associate wrap methods with their bit flags. */var wrapFlags=[['ary',WRAP_ARY_FLAG],['bind',WRAP_BIND_FLAG],['bindKey',WRAP_BIND_KEY_FLAG],['curry',WRAP_CURRY_FLAG],['curryRight',WRAP_CURRY_RIGHT_FLAG],['flip',WRAP_FLIP_FLAG],['partial',WRAP_PARTIAL_FLAG],['partialRight',WRAP_PARTIAL_RIGHT_FLAG],['rearg',WRAP_REARG_FLAG]];/** `Object#toString` result references. */var argsTag='[object Arguments]',arrayTag='[object Array]',asyncTag='[object AsyncFunction]',boolTag='[object Boolean]',dateTag='[object Date]',domExcTag='[object DOMException]',errorTag='[object Error]',funcTag='[object Function]',genTag='[object GeneratorFunction]',mapTag='[object Map]',numberTag='[object Number]',nullTag='[object Null]',objectTag='[object Object]',promiseTag='[object Promise]',proxyTag='[object Proxy]',regexpTag='[object RegExp]',setTag='[object Set]',stringTag='[object String]',symbolTag='[object Symbol]',undefinedTag='[object Undefined]',weakMapTag='[object WeakMap]',weakSetTag='[object WeakSet]';var arrayBufferTag='[object ArrayBuffer]',dataViewTag='[object DataView]',float32Tag='[object Float32Array]',float64Tag='[object Float64Array]',int8Tag='[object Int8Array]',int16Tag='[object Int16Array]',int32Tag='[object Int32Array]',uint8Tag='[object Uint8Array]',uint8ClampedTag='[object Uint8ClampedArray]',uint16Tag='[object Uint16Array]',uint32Tag='[object Uint32Array]';/** Used to match empty string literals in compiled template source. */var reEmptyStringLeading=/\b__p \+= '';/g,reEmptyStringMiddle=/\b(__p \+=) '' \+/g,reEmptyStringTrailing=/(__e\(.*?\)|\b__t\)) \+\n'';/g;/** Used to match HTML entities and HTML characters. */var reEscapedHtml=/&(?:amp|lt|gt|quot|#39);/g,reUnescapedHtml=/[&<>"']/g,reHasEscapedHtml=RegExp(reEscapedHtml.source),reHasUnescapedHtml=RegExp(reUnescapedHtml.source);/** Used to match template delimiters. */var reEscape=/<%-([\s\S]+?)%>/g,reEvaluate=/<%([\s\S]+?)%>/g,reInterpolate=/<%=([\s\S]+?)%>/g;/** Used to match property names within property paths. */var reIsDeepProp=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,reIsPlainProp=/^\w*$/,rePropName=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;/**
	   * Used to match `RegExp`
	   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	   */var reRegExpChar=/[\\^$.*+?()[\]{}|]/g,reHasRegExpChar=RegExp(reRegExpChar.source);/** Used to match leading and trailing whitespace. */var reTrim=/^\s+|\s+$/g,reTrimStart=/^\s+/,reTrimEnd=/\s+$/;/** Used to match wrap detail comments. */var reWrapComment=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,reWrapDetails=/\{\n\/\* \[wrapped with (.+)\] \*/,reSplitDetails=/,? & /;/** Used to match words composed of alphanumeric characters. */var reAsciiWord=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;/** Used to match backslashes in property paths. */var reEscapeChar=/\\(\\)?/g;/**
	   * Used to match
	   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
	   */var reEsTemplate=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;/** Used to match `RegExp` flags from their coerced string values. */var reFlags=/\w*$/;/** Used to detect bad signed hexadecimal string values. */var reIsBadHex=/^[-+]0x[0-9a-f]+$/i;/** Used to detect binary string values. */var reIsBinary=/^0b[01]+$/i;/** Used to detect host constructors (Safari). */var reIsHostCtor=/^\[object .+?Constructor\]$/;/** Used to detect octal string values. */var reIsOctal=/^0o[0-7]+$/i;/** Used to detect unsigned integer values. */var reIsUint=/^(?:0|[1-9]\d*)$/;/** Used to match Latin Unicode letters (excluding mathematical operators). */var reLatin=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;/** Used to ensure capturing order of template delimiters. */var reNoMatch=/($^)/;/** Used to match unescaped characters in compiled string literals. */var reUnescapedString=/['\n\r\u2028\u2029\\]/g;/** Used to compose unicode character classes. */var rsAstralRange='\\ud800-\\udfff',rsComboMarksRange='\\u0300-\\u036f',reComboHalfMarksRange='\\ufe20-\\ufe2f',rsComboSymbolsRange='\\u20d0-\\u20ff',rsComboRange=rsComboMarksRange+reComboHalfMarksRange+rsComboSymbolsRange,rsDingbatRange='\\u2700-\\u27bf',rsLowerRange='a-z\\xdf-\\xf6\\xf8-\\xff',rsMathOpRange='\\xac\\xb1\\xd7\\xf7',rsNonCharRange='\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',rsPunctuationRange='\\u2000-\\u206f',rsSpaceRange=' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',rsUpperRange='A-Z\\xc0-\\xd6\\xd8-\\xde',rsVarRange='\\ufe0e\\ufe0f',rsBreakRange=rsMathOpRange+rsNonCharRange+rsPunctuationRange+rsSpaceRange;/** Used to compose unicode capture groups. */var rsApos='[\'\u2019]',rsAstral='['+rsAstralRange+']',rsBreak='['+rsBreakRange+']',rsCombo='['+rsComboRange+']',rsDigits='\\d+',rsDingbat='['+rsDingbatRange+']',rsLower='['+rsLowerRange+']',rsMisc='[^'+rsAstralRange+rsBreakRange+rsDigits+rsDingbatRange+rsLowerRange+rsUpperRange+']',rsFitz='\\ud83c[\\udffb-\\udfff]',rsModifier='(?:'+rsCombo+'|'+rsFitz+')',rsNonAstral='[^'+rsAstralRange+']',rsRegional='(?:\\ud83c[\\udde6-\\uddff]){2}',rsSurrPair='[\\ud800-\\udbff][\\udc00-\\udfff]',rsUpper='['+rsUpperRange+']',rsZWJ='\\u200d';/** Used to compose unicode regexes. */var rsMiscLower='(?:'+rsLower+'|'+rsMisc+')',rsMiscUpper='(?:'+rsUpper+'|'+rsMisc+')',rsOptContrLower='(?:'+rsApos+'(?:d|ll|m|re|s|t|ve))?',rsOptContrUpper='(?:'+rsApos+'(?:D|LL|M|RE|S|T|VE))?',reOptMod=rsModifier+'?',rsOptVar='['+rsVarRange+']?',rsOptJoin='(?:'+rsZWJ+'(?:'+[rsNonAstral,rsRegional,rsSurrPair].join('|')+')'+rsOptVar+reOptMod+')*',rsOrdLower='\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',rsOrdUpper='\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',rsSeq=rsOptVar+reOptMod+rsOptJoin,rsEmoji='(?:'+[rsDingbat,rsRegional,rsSurrPair].join('|')+')'+rsSeq,rsSymbol='(?:'+[rsNonAstral+rsCombo+'?',rsCombo,rsRegional,rsSurrPair,rsAstral].join('|')+')';/** Used to match apostrophes. */var reApos=RegExp(rsApos,'g');/**
	   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
	   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
	   */var reComboMark=RegExp(rsCombo,'g');/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */var reUnicode=RegExp(rsFitz+'(?='+rsFitz+')|'+rsSymbol+rsSeq,'g');/** Used to match complex or compound words. */var reUnicodeWord=RegExp([rsUpper+'?'+rsLower+'+'+rsOptContrLower+'(?='+[rsBreak,rsUpper,'$'].join('|')+')',rsMiscUpper+'+'+rsOptContrUpper+'(?='+[rsBreak,rsUpper+rsMiscLower,'$'].join('|')+')',rsUpper+'?'+rsMiscLower+'+'+rsOptContrLower,rsUpper+'+'+rsOptContrUpper,rsOrdUpper,rsOrdLower,rsDigits,rsEmoji].join('|'),'g');/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */var reHasUnicode=RegExp('['+rsZWJ+rsAstralRange+rsComboRange+rsVarRange+']');/** Used to detect strings that need a more robust regexp to match words. */var reHasUnicodeWord=/[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;/** Used to assign default `context` object properties. */var contextProps=['Array','Buffer','DataView','Date','Error','Float32Array','Float64Array','Function','Int8Array','Int16Array','Int32Array','Map','Math','Object','Promise','RegExp','Set','String','Symbol','TypeError','Uint8Array','Uint8ClampedArray','Uint16Array','Uint32Array','WeakMap','_','clearTimeout','isFinite','parseInt','setTimeout'];/** Used to make template sourceURLs easier to identify. */var templateCounter=-1;/** Used to identify `toStringTag` values of typed arrays. */var typedArrayTags={};typedArrayTags[float32Tag]=typedArrayTags[float64Tag]=typedArrayTags[int8Tag]=typedArrayTags[int16Tag]=typedArrayTags[int32Tag]=typedArrayTags[uint8Tag]=typedArrayTags[uint8ClampedTag]=typedArrayTags[uint16Tag]=typedArrayTags[uint32Tag]=true;typedArrayTags[argsTag]=typedArrayTags[arrayTag]=typedArrayTags[arrayBufferTag]=typedArrayTags[boolTag]=typedArrayTags[dataViewTag]=typedArrayTags[dateTag]=typedArrayTags[errorTag]=typedArrayTags[funcTag]=typedArrayTags[mapTag]=typedArrayTags[numberTag]=typedArrayTags[objectTag]=typedArrayTags[regexpTag]=typedArrayTags[setTag]=typedArrayTags[stringTag]=typedArrayTags[weakMapTag]=false;/** Used to identify `toStringTag` values supported by `_.clone`. */var cloneableTags={};cloneableTags[argsTag]=cloneableTags[arrayTag]=cloneableTags[arrayBufferTag]=cloneableTags[dataViewTag]=cloneableTags[boolTag]=cloneableTags[dateTag]=cloneableTags[float32Tag]=cloneableTags[float64Tag]=cloneableTags[int8Tag]=cloneableTags[int16Tag]=cloneableTags[int32Tag]=cloneableTags[mapTag]=cloneableTags[numberTag]=cloneableTags[objectTag]=cloneableTags[regexpTag]=cloneableTags[setTag]=cloneableTags[stringTag]=cloneableTags[symbolTag]=cloneableTags[uint8Tag]=cloneableTags[uint8ClampedTag]=cloneableTags[uint16Tag]=cloneableTags[uint32Tag]=true;cloneableTags[errorTag]=cloneableTags[funcTag]=cloneableTags[weakMapTag]=false;/** Used to map Latin Unicode letters to basic Latin letters. */var deburredLetters={// Latin-1 Supplement block.
	'\xc0':'A','\xc1':'A','\xc2':'A','\xc3':'A','\xc4':'A','\xc5':'A','\xe0':'a','\xe1':'a','\xe2':'a','\xe3':'a','\xe4':'a','\xe5':'a','\xc7':'C','\xe7':'c','\xd0':'D','\xf0':'d','\xc8':'E','\xc9':'E','\xca':'E','\xcb':'E','\xe8':'e','\xe9':'e','\xea':'e','\xeb':'e','\xcc':'I','\xcd':'I','\xce':'I','\xcf':'I','\xec':'i','\xed':'i','\xee':'i','\xef':'i','\xd1':'N','\xf1':'n','\xd2':'O','\xd3':'O','\xd4':'O','\xd5':'O','\xd6':'O','\xd8':'O','\xf2':'o','\xf3':'o','\xf4':'o','\xf5':'o','\xf6':'o','\xf8':'o','\xd9':'U','\xda':'U','\xdb':'U','\xdc':'U','\xf9':'u','\xfa':'u','\xfb':'u','\xfc':'u','\xdd':'Y','\xfd':'y','\xff':'y','\xc6':'Ae','\xe6':'ae','\xde':'Th','\xfe':'th','\xdf':'ss',// Latin Extended-A block.
	'\u0100':'A','\u0102':'A','\u0104':'A','\u0101':'a','\u0103':'a','\u0105':'a','\u0106':'C','\u0108':'C','\u010A':'C','\u010C':'C','\u0107':'c','\u0109':'c','\u010B':'c','\u010D':'c','\u010E':'D','\u0110':'D','\u010F':'d','\u0111':'d','\u0112':'E','\u0114':'E','\u0116':'E','\u0118':'E','\u011A':'E','\u0113':'e','\u0115':'e','\u0117':'e','\u0119':'e','\u011B':'e','\u011C':'G','\u011E':'G','\u0120':'G','\u0122':'G','\u011D':'g','\u011F':'g','\u0121':'g','\u0123':'g','\u0124':'H','\u0126':'H','\u0125':'h','\u0127':'h','\u0128':'I','\u012A':'I','\u012C':'I','\u012E':'I','\u0130':'I','\u0129':'i','\u012B':'i','\u012D':'i','\u012F':'i','\u0131':'i','\u0134':'J','\u0135':'j','\u0136':'K','\u0137':'k','\u0138':'k','\u0139':'L','\u013B':'L','\u013D':'L','\u013F':'L','\u0141':'L','\u013A':'l','\u013C':'l','\u013E':'l','\u0140':'l','\u0142':'l','\u0143':'N','\u0145':'N','\u0147':'N','\u014A':'N','\u0144':'n','\u0146':'n','\u0148':'n','\u014B':'n','\u014C':'O','\u014E':'O','\u0150':'O','\u014D':'o','\u014F':'o','\u0151':'o','\u0154':'R','\u0156':'R','\u0158':'R','\u0155':'r','\u0157':'r','\u0159':'r','\u015A':'S','\u015C':'S','\u015E':'S','\u0160':'S','\u015B':'s','\u015D':'s','\u015F':'s','\u0161':'s','\u0162':'T','\u0164':'T','\u0166':'T','\u0163':'t','\u0165':'t','\u0167':'t','\u0168':'U','\u016A':'U','\u016C':'U','\u016E':'U','\u0170':'U','\u0172':'U','\u0169':'u','\u016B':'u','\u016D':'u','\u016F':'u','\u0171':'u','\u0173':'u','\u0174':'W','\u0175':'w','\u0176':'Y','\u0177':'y','\u0178':'Y','\u0179':'Z','\u017B':'Z','\u017D':'Z','\u017A':'z','\u017C':'z','\u017E':'z','\u0132':'IJ','\u0133':'ij','\u0152':'Oe','\u0153':'oe','\u0149':"'n",'\u017F':'s'};/** Used to map characters to HTML entities. */var htmlEscapes={'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'};/** Used to map HTML entities to characters. */var htmlUnescapes={'&amp;':'&','&lt;':'<','&gt;':'>','&quot;':'"','&#39;':"'"};/** Used to escape characters for inclusion in compiled string literals. */var stringEscapes={'\\':'\\',"'":"'",'\n':'n','\r':'r','\u2028':'u2028','\u2029':'u2029'};/** Built-in method references without a dependency on `root`. */var freeParseFloat=parseFloat,freeParseInt=parseInt;/** Detect free variable `global` from Node.js. */var freeGlobal=(typeof global==='undefined'?'undefined':_typeof(global))=='object'&&global&&global.Object===Object&&global;/** Detect free variable `self`. */var freeSelf=(typeof self==='undefined'?'undefined':_typeof(self))=='object'&&self&&self.Object===Object&&self;/** Used as a reference to the global object. */var root=freeGlobal||freeSelf||Function('return this')();/** Detect free variable `exports`. */var freeExports=( false?'undefined':_typeof(exports))=='object'&&exports&&!exports.nodeType&&exports;/** Detect free variable `module`. */var freeModule=freeExports&&( false?'undefined':_typeof(module))=='object'&&module&&!module.nodeType&&module;/** Detect the popular CommonJS extension `module.exports`. */var moduleExports=freeModule&&freeModule.exports===freeExports;/** Detect free variable `process` from Node.js. */var freeProcess=moduleExports&&freeGlobal.process;/** Used to access faster Node.js helpers. */var nodeUtil=function(){try{return freeProcess&&freeProcess.binding&&freeProcess.binding('util');}catch(e){}}();/* Node.js helper references. */var nodeIsArrayBuffer=nodeUtil&&nodeUtil.isArrayBuffer,nodeIsDate=nodeUtil&&nodeUtil.isDate,nodeIsMap=nodeUtil&&nodeUtil.isMap,nodeIsRegExp=nodeUtil&&nodeUtil.isRegExp,nodeIsSet=nodeUtil&&nodeUtil.isSet,nodeIsTypedArray=nodeUtil&&nodeUtil.isTypedArray;/*--------------------------------------------------------------------------*//**
	   * A faster alternative to `Function#apply`, this function invokes `func`
	   * with the `this` binding of `thisArg` and the arguments of `args`.
	   *
	   * @private
	   * @param {Function} func The function to invoke.
	   * @param {*} thisArg The `this` binding of `func`.
	   * @param {Array} args The arguments to invoke `func` with.
	   * @returns {*} Returns the result of `func`.
	   */function apply(func,thisArg,args){switch(args.length){case 0:return func.call(thisArg);case 1:return func.call(thisArg,args[0]);case 2:return func.call(thisArg,args[0],args[1]);case 3:return func.call(thisArg,args[0],args[1],args[2]);}return func.apply(thisArg,args);}/**
	   * A specialized version of `baseAggregator` for arrays.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} setter The function to set `accumulator` values.
	   * @param {Function} iteratee The iteratee to transform keys.
	   * @param {Object} accumulator The initial aggregated object.
	   * @returns {Function} Returns `accumulator`.
	   */function arrayAggregator(array,setter,iteratee,accumulator){var index=-1,length=array==null?0:array.length;while(++index<length){var value=array[index];setter(accumulator,value,iteratee(value),array);}return accumulator;}/**
	   * A specialized version of `_.forEach` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */function arrayEach(array,iteratee){var index=-1,length=array==null?0:array.length;while(++index<length){if(iteratee(array[index],index,array)===false){break;}}return array;}/**
	   * A specialized version of `_.forEachRight` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */function arrayEachRight(array,iteratee){var length=array==null?0:array.length;while(length--){if(iteratee(array[length],length,array)===false){break;}}return array;}/**
	   * A specialized version of `_.every` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if all elements pass the predicate check,
	   *  else `false`.
	   */function arrayEvery(array,predicate){var index=-1,length=array==null?0:array.length;while(++index<length){if(!predicate(array[index],index,array)){return false;}}return true;}/**
	   * A specialized version of `_.filter` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {Array} Returns the new filtered array.
	   */function arrayFilter(array,predicate){var index=-1,length=array==null?0:array.length,resIndex=0,result=[];while(++index<length){var value=array[index];if(predicate(value,index,array)){result[resIndex++]=value;}}return result;}/**
	   * A specialized version of `_.includes` for arrays without support for
	   * specifying an index to search from.
	   *
	   * @private
	   * @param {Array} [array] The array to inspect.
	   * @param {*} target The value to search for.
	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
	   */function arrayIncludes(array,value){var length=array==null?0:array.length;return!!length&&baseIndexOf(array,value,0)>-1;}/**
	   * This function is like `arrayIncludes` except that it accepts a comparator.
	   *
	   * @private
	   * @param {Array} [array] The array to inspect.
	   * @param {*} target The value to search for.
	   * @param {Function} comparator The comparator invoked per element.
	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
	   */function arrayIncludesWith(array,value,comparator){var index=-1,length=array==null?0:array.length;while(++index<length){if(comparator(value,array[index])){return true;}}return false;}/**
	   * A specialized version of `_.map` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the new mapped array.
	   */function arrayMap(array,iteratee){var index=-1,length=array==null?0:array.length,result=Array(length);while(++index<length){result[index]=iteratee(array[index],index,array);}return result;}/**
	   * Appends the elements of `values` to `array`.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {Array} values The values to append.
	   * @returns {Array} Returns `array`.
	   */function arrayPush(array,values){var index=-1,length=values.length,offset=array.length;while(++index<length){array[offset+index]=values[index];}return array;}/**
	   * A specialized version of `_.reduce` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} [accumulator] The initial value.
	   * @param {boolean} [initAccum] Specify using the first element of `array` as
	   *  the initial value.
	   * @returns {*} Returns the accumulated value.
	   */function arrayReduce(array,iteratee,accumulator,initAccum){var index=-1,length=array==null?0:array.length;if(initAccum&&length){accumulator=array[++index];}while(++index<length){accumulator=iteratee(accumulator,array[index],index,array);}return accumulator;}/**
	   * A specialized version of `_.reduceRight` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} [accumulator] The initial value.
	   * @param {boolean} [initAccum] Specify using the last element of `array` as
	   *  the initial value.
	   * @returns {*} Returns the accumulated value.
	   */function arrayReduceRight(array,iteratee,accumulator,initAccum){var length=array==null?0:array.length;if(initAccum&&length){accumulator=array[--length];}while(length--){accumulator=iteratee(accumulator,array[length],length,array);}return accumulator;}/**
	   * A specialized version of `_.some` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if any element passes the predicate check,
	   *  else `false`.
	   */function arraySome(array,predicate){var index=-1,length=array==null?0:array.length;while(++index<length){if(predicate(array[index],index,array)){return true;}}return false;}/**
	   * Gets the size of an ASCII `string`.
	   *
	   * @private
	   * @param {string} string The string inspect.
	   * @returns {number} Returns the string size.
	   */var asciiSize=baseProperty('length');/**
	   * Converts an ASCII `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */function asciiToArray(string){return string.split('');}/**
	   * Splits an ASCII `string` into an array of its words.
	   *
	   * @private
	   * @param {string} The string to inspect.
	   * @returns {Array} Returns the words of `string`.
	   */function asciiWords(string){return string.match(reAsciiWord)||[];}/**
	   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
	   * without support for iteratee shorthands, which iterates over `collection`
	   * using `eachFunc`.
	   *
	   * @private
	   * @param {Array|Object} collection The collection to inspect.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {Function} eachFunc The function to iterate over `collection`.
	   * @returns {*} Returns the found element or its key, else `undefined`.
	   */function baseFindKey(collection,predicate,eachFunc){var result;eachFunc(collection,function(value,key,collection){if(predicate(value,key,collection)){result=key;return false;}});return result;}/**
	   * The base implementation of `_.findIndex` and `_.findLastIndex` without
	   * support for iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {number} fromIndex The index to search from.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */function baseFindIndex(array,predicate,fromIndex,fromRight){var length=array.length,index=fromIndex+(fromRight?1:-1);while(fromRight?index--:++index<length){if(predicate(array[index],index,array)){return index;}}return-1;}/**
	   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */function baseIndexOf(array,value,fromIndex){return value===value?strictIndexOf(array,value,fromIndex):baseFindIndex(array,baseIsNaN,fromIndex);}/**
	   * This function is like `baseIndexOf` except that it accepts a comparator.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @param {Function} comparator The comparator invoked per element.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */function baseIndexOfWith(array,value,fromIndex,comparator){var index=fromIndex-1,length=array.length;while(++index<length){if(comparator(array[index],value)){return index;}}return-1;}/**
	   * The base implementation of `_.isNaN` without support for number objects.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	   */function baseIsNaN(value){return value!==value;}/**
	   * The base implementation of `_.mean` and `_.meanBy` without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {number} Returns the mean.
	   */function baseMean(array,iteratee){var length=array==null?0:array.length;return length?baseSum(array,iteratee)/length:NAN;}/**
	   * The base implementation of `_.property` without support for deep paths.
	   *
	   * @private
	   * @param {string} key The key of the property to get.
	   * @returns {Function} Returns the new accessor function.
	   */function baseProperty(key){return function(object){return object==null?undefined:object[key];};}/**
	   * The base implementation of `_.propertyOf` without support for deep paths.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @returns {Function} Returns the new accessor function.
	   */function basePropertyOf(object){return function(key){return object==null?undefined:object[key];};}/**
	   * The base implementation of `_.reduce` and `_.reduceRight`, without support
	   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
	   *
	   * @private
	   * @param {Array|Object} collection The collection to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} accumulator The initial value.
	   * @param {boolean} initAccum Specify using the first or last element of
	   *  `collection` as the initial value.
	   * @param {Function} eachFunc The function to iterate over `collection`.
	   * @returns {*} Returns the accumulated value.
	   */function baseReduce(collection,iteratee,accumulator,initAccum,eachFunc){eachFunc(collection,function(value,index,collection){accumulator=initAccum?(initAccum=false,value):iteratee(accumulator,value,index,collection);});return accumulator;}/**
	   * The base implementation of `_.sortBy` which uses `comparer` to define the
	   * sort order of `array` and replaces criteria objects with their corresponding
	   * values.
	   *
	   * @private
	   * @param {Array} array The array to sort.
	   * @param {Function} comparer The function to define sort order.
	   * @returns {Array} Returns `array`.
	   */function baseSortBy(array,comparer){var length=array.length;array.sort(comparer);while(length--){array[length]=array[length].value;}return array;}/**
	   * The base implementation of `_.sum` and `_.sumBy` without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {number} Returns the sum.
	   */function baseSum(array,iteratee){var result,index=-1,length=array.length;while(++index<length){var current=iteratee(array[index]);if(current!==undefined){result=result===undefined?current:result+current;}}return result;}/**
	   * The base implementation of `_.times` without support for iteratee shorthands
	   * or max array length checks.
	   *
	   * @private
	   * @param {number} n The number of times to invoke `iteratee`.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the array of results.
	   */function baseTimes(n,iteratee){var index=-1,result=Array(n);while(++index<n){result[index]=iteratee(index);}return result;}/**
	   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
	   * of key-value pairs for `object` corresponding to the property names of `props`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array} props The property names to get values for.
	   * @returns {Object} Returns the key-value pairs.
	   */function baseToPairs(object,props){return arrayMap(props,function(key){return[key,object[key]];});}/**
	   * The base implementation of `_.unary` without support for storing metadata.
	   *
	   * @private
	   * @param {Function} func The function to cap arguments for.
	   * @returns {Function} Returns the new capped function.
	   */function baseUnary(func){return function(value){return func(value);};}/**
	   * The base implementation of `_.values` and `_.valuesIn` which creates an
	   * array of `object` property values corresponding to the property names
	   * of `props`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array} props The property names to get values for.
	   * @returns {Object} Returns the array of property values.
	   */function baseValues(object,props){return arrayMap(props,function(key){return object[key];});}/**
	   * Checks if a `cache` value for `key` exists.
	   *
	   * @private
	   * @param {Object} cache The cache to query.
	   * @param {string} key The key of the entry to check.
	   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	   */function cacheHas(cache,key){return cache.has(key);}/**
	   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the first unmatched string symbol.
	   */function charsStartIndex(strSymbols,chrSymbols){var index=-1,length=strSymbols.length;while(++index<length&&baseIndexOf(chrSymbols,strSymbols[index],0)>-1){}return index;}/**
	   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the last unmatched string symbol.
	   */function charsEndIndex(strSymbols,chrSymbols){var index=strSymbols.length;while(index--&&baseIndexOf(chrSymbols,strSymbols[index],0)>-1){}return index;}/**
	   * Gets the number of `placeholder` occurrences in `array`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} placeholder The placeholder to search for.
	   * @returns {number} Returns the placeholder count.
	   */function countHolders(array,placeholder){var length=array.length,result=0;while(length--){if(array[length]===placeholder){++result;}}return result;}/**
	   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
	   * letters to basic Latin letters.
	   *
	   * @private
	   * @param {string} letter The matched letter to deburr.
	   * @returns {string} Returns the deburred letter.
	   */var deburrLetter=basePropertyOf(deburredLetters);/**
	   * Used by `_.escape` to convert characters to HTML entities.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */var escapeHtmlChar=basePropertyOf(htmlEscapes);/**
	   * Used by `_.template` to escape characters for inclusion in compiled string literals.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */function escapeStringChar(chr){return'\\'+stringEscapes[chr];}/**
	   * Gets the value at `key` of `object`.
	   *
	   * @private
	   * @param {Object} [object] The object to query.
	   * @param {string} key The key of the property to get.
	   * @returns {*} Returns the property value.
	   */function getValue(object,key){return object==null?undefined:object[key];}/**
	   * Checks if `string` contains Unicode symbols.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
	   */function hasUnicode(string){return reHasUnicode.test(string);}/**
	   * Checks if `string` contains a word composed of Unicode symbols.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {boolean} Returns `true` if a word is found, else `false`.
	   */function hasUnicodeWord(string){return reHasUnicodeWord.test(string);}/**
	   * Converts `iterator` to an array.
	   *
	   * @private
	   * @param {Object} iterator The iterator to convert.
	   * @returns {Array} Returns the converted array.
	   */function iteratorToArray(iterator){var data,result=[];while(!(data=iterator.next()).done){result.push(data.value);}return result;}/**
	   * Converts `map` to its key-value pairs.
	   *
	   * @private
	   * @param {Object} map The map to convert.
	   * @returns {Array} Returns the key-value pairs.
	   */function mapToArray(map){var index=-1,result=Array(map.size);map.forEach(function(value,key){result[++index]=[key,value];});return result;}/**
	   * Creates a unary function that invokes `func` with its argument transformed.
	   *
	   * @private
	   * @param {Function} func The function to wrap.
	   * @param {Function} transform The argument transform.
	   * @returns {Function} Returns the new function.
	   */function overArg(func,transform){return function(arg){return func(transform(arg));};}/**
	   * Replaces all `placeholder` elements in `array` with an internal placeholder
	   * and returns an array of their indexes.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {*} placeholder The placeholder to replace.
	   * @returns {Array} Returns the new array of placeholder indexes.
	   */function replaceHolders(array,placeholder){var index=-1,length=array.length,resIndex=0,result=[];while(++index<length){var value=array[index];if(value===placeholder||value===PLACEHOLDER){array[index]=PLACEHOLDER;result[resIndex++]=index;}}return result;}/**
	   * Gets the value at `key`, unless `key` is "__proto__".
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {string} key The key of the property to get.
	   * @returns {*} Returns the property value.
	   */function safeGet(object,key){return key=='__proto__'?undefined:object[key];}/**
	   * Converts `set` to an array of its values.
	   *
	   * @private
	   * @param {Object} set The set to convert.
	   * @returns {Array} Returns the values.
	   */function setToArray(set){var index=-1,result=Array(set.size);set.forEach(function(value){result[++index]=value;});return result;}/**
	   * Converts `set` to its value-value pairs.
	   *
	   * @private
	   * @param {Object} set The set to convert.
	   * @returns {Array} Returns the value-value pairs.
	   */function setToPairs(set){var index=-1,result=Array(set.size);set.forEach(function(value){result[++index]=[value,value];});return result;}/**
	   * A specialized version of `_.indexOf` which performs strict equality
	   * comparisons of values, i.e. `===`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */function strictIndexOf(array,value,fromIndex){var index=fromIndex-1,length=array.length;while(++index<length){if(array[index]===value){return index;}}return-1;}/**
	   * A specialized version of `_.lastIndexOf` which performs strict equality
	   * comparisons of values, i.e. `===`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */function strictLastIndexOf(array,value,fromIndex){var index=fromIndex+1;while(index--){if(array[index]===value){return index;}}return index;}/**
	   * Gets the number of symbols in `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the string size.
	   */function stringSize(string){return hasUnicode(string)?unicodeSize(string):asciiSize(string);}/**
	   * Converts `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */function stringToArray(string){return hasUnicode(string)?unicodeToArray(string):asciiToArray(string);}/**
	   * Used by `_.unescape` to convert HTML entities to characters.
	   *
	   * @private
	   * @param {string} chr The matched character to unescape.
	   * @returns {string} Returns the unescaped character.
	   */var unescapeHtmlChar=basePropertyOf(htmlUnescapes);/**
	   * Gets the size of a Unicode `string`.
	   *
	   * @private
	   * @param {string} string The string inspect.
	   * @returns {number} Returns the string size.
	   */function unicodeSize(string){var result=reUnicode.lastIndex=0;while(reUnicode.test(string)){++result;}return result;}/**
	   * Converts a Unicode `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */function unicodeToArray(string){return string.match(reUnicode)||[];}/**
	   * Splits a Unicode `string` into an array of its words.
	   *
	   * @private
	   * @param {string} The string to inspect.
	   * @returns {Array} Returns the words of `string`.
	   */function unicodeWords(string){return string.match(reUnicodeWord)||[];}/*--------------------------------------------------------------------------*//**
	   * Create a new pristine `lodash` function using the `context` object.
	   *
	   * @static
	   * @memberOf _
	   * @since 1.1.0
	   * @category Util
	   * @param {Object} [context=root] The context object.
	   * @returns {Function} Returns a new `lodash` function.
	   * @example
	   *
	   * _.mixin({ 'foo': _.constant('foo') });
	   *
	   * var lodash = _.runInContext();
	   * lodash.mixin({ 'bar': lodash.constant('bar') });
	   *
	   * _.isFunction(_.foo);
	   * // => true
	   * _.isFunction(_.bar);
	   * // => false
	   *
	   * lodash.isFunction(lodash.foo);
	   * // => false
	   * lodash.isFunction(lodash.bar);
	   * // => true
	   *
	   * // Create a suped-up `defer` in Node.js.
	   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
	   */var runInContext=function runInContext(context){context=context==null?root:_.defaults(root.Object(),context,_.pick(root,contextProps));/** Built-in constructor references. */var Array=context.Array,Date=context.Date,Error=context.Error,Function=context.Function,Math=context.Math,Object=context.Object,RegExp=context.RegExp,String=context.String,TypeError=context.TypeError;/** Used for built-in method references. */var arrayProto=Array.prototype,funcProto=Function.prototype,objectProto=Object.prototype;/** Used to detect overreaching core-js shims. */var coreJsData=context['__core-js_shared__'];/** Used to resolve the decompiled source of functions. */var funcToString=funcProto.toString;/** Used to check objects for own properties. */var hasOwnProperty=objectProto.hasOwnProperty;/** Used to generate unique IDs. */var idCounter=0;/** Used to detect methods masquerading as native. */var maskSrcKey=function(){var uid=/[^.]+$/.exec(coreJsData&&coreJsData.keys&&coreJsData.keys.IE_PROTO||'');return uid?'Symbol(src)_1.'+uid:'';}();/**
	     * Used to resolve the
	     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	     * of values.
	     */var nativeObjectToString=objectProto.toString;/** Used to infer the `Object` constructor. */var objectCtorString=funcToString.call(Object);/** Used to restore the original `_` reference in `_.noConflict`. */var oldDash=root._;/** Used to detect if a method is native. */var reIsNative=RegExp('^'+funcToString.call(hasOwnProperty).replace(reRegExpChar,'\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,'$1.*?')+'$');/** Built-in value references. */var Buffer=moduleExports?context.Buffer:undefined,_Symbol=context.Symbol,Uint8Array=context.Uint8Array,allocUnsafe=Buffer?Buffer.allocUnsafe:undefined,getPrototype=overArg(Object.getPrototypeOf,Object),objectCreate=Object.create,propertyIsEnumerable=objectProto.propertyIsEnumerable,splice=arrayProto.splice,spreadableSymbol=_Symbol?_Symbol.isConcatSpreadable:undefined,symIterator=_Symbol?_Symbol.iterator:undefined,symToStringTag=_Symbol?_Symbol.toStringTag:undefined;var defineProperty=function(){try{var func=getNative(Object,'defineProperty');func({},'',{});return func;}catch(e){}}();/** Mocked built-ins. */var ctxClearTimeout=context.clearTimeout!==root.clearTimeout&&context.clearTimeout,ctxNow=Date&&Date.now!==root.Date.now&&Date.now,ctxSetTimeout=context.setTimeout!==root.setTimeout&&context.setTimeout;/* Built-in method references for those with the same name as other `lodash` methods. */var nativeCeil=Math.ceil,nativeFloor=Math.floor,nativeGetSymbols=Object.getOwnPropertySymbols,nativeIsBuffer=Buffer?Buffer.isBuffer:undefined,nativeIsFinite=context.isFinite,nativeJoin=arrayProto.join,nativeKeys=overArg(Object.keys,Object),nativeMax=Math.max,nativeMin=Math.min,nativeNow=Date.now,nativeParseInt=context.parseInt,nativeRandom=Math.random,nativeReverse=arrayProto.reverse;/* Built-in method references that are verified to be native. */var DataView=getNative(context,'DataView'),Map=getNative(context,'Map'),Promise=getNative(context,'Promise'),Set=getNative(context,'Set'),WeakMap=getNative(context,'WeakMap'),nativeCreate=getNative(Object,'create');/** Used to store function metadata. */var metaMap=WeakMap&&new WeakMap();/** Used to lookup unminified function names. */var realNames={};/** Used to detect maps, sets, and weakmaps. */var dataViewCtorString=toSource(DataView),mapCtorString=toSource(Map),promiseCtorString=toSource(Promise),setCtorString=toSource(Set),weakMapCtorString=toSource(WeakMap);/** Used to convert symbols to primitives and strings. */var symbolProto=_Symbol?_Symbol.prototype:undefined,symbolValueOf=symbolProto?symbolProto.valueOf:undefined,symbolToString=symbolProto?symbolProto.toString:undefined;/*------------------------------------------------------------------------*//**
	     * Creates a `lodash` object which wraps `value` to enable implicit method
	     * chain sequences. Methods that operate on and return arrays, collections,
	     * and functions can be chained together. Methods that retrieve a single value
	     * or may return a primitive value will automatically end the chain sequence
	     * and return the unwrapped value. Otherwise, the value must be unwrapped
	     * with `_#value`.
	     *
	     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
	     * enabled using `_.chain`.
	     *
	     * The execution of chained methods is lazy, that is, it's deferred until
	     * `_#value` is implicitly or explicitly called.
	     *
	     * Lazy evaluation allows several methods to support shortcut fusion.
	     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
	     * the creation of intermediate arrays and can greatly reduce the number of
	     * iteratee executions. Sections of a chain sequence qualify for shortcut
	     * fusion if the section is applied to an array and iteratees accept only
	     * one argument. The heuristic for whether a section qualifies for shortcut
	     * fusion is subject to change.
	     *
	     * Chaining is supported in custom builds as long as the `_#value` method is
	     * directly or indirectly included in the build.
	     *
	     * In addition to lodash methods, wrappers have `Array` and `String` methods.
	     *
	     * The wrapper `Array` methods are:
	     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
	     *
	     * The wrapper `String` methods are:
	     * `replace` and `split`
	     *
	     * The wrapper methods that support shortcut fusion are:
	     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
	     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
	     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
	     *
	     * The chainable wrapper methods are:
	     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
	     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
	     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
	     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
	     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
	     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
	     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
	     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
	     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
	     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
	     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
	     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
	     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
	     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
	     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
	     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
	     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
	     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
	     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
	     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
	     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
	     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
	     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
	     * `zipObject`, `zipObjectDeep`, and `zipWith`
	     *
	     * The wrapper methods that are **not** chainable by default are:
	     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
	     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
	     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
	     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
	     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
	     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
	     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
	     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
	     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
	     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
	     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
	     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
	     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
	     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
	     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
	     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
	     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
	     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
	     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
	     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
	     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
	     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
	     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
	     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
	     * `upperFirst`, `value`, and `words`
	     *
	     * @name _
	     * @constructor
	     * @category Seq
	     * @param {*} value The value to wrap in a `lodash` instance.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var wrapped = _([1, 2, 3]);
	     *
	     * // Returns an unwrapped value.
	     * wrapped.reduce(_.add);
	     * // => 6
	     *
	     * // Returns a wrapped value.
	     * var squares = wrapped.map(square);
	     *
	     * _.isArray(squares);
	     * // => false
	     *
	     * _.isArray(squares.value());
	     * // => true
	     */function lodash(value){if(isObjectLike(value)&&!isArray(value)&&!(value instanceof LazyWrapper)){if(value instanceof LodashWrapper){return value;}if(hasOwnProperty.call(value,'__wrapped__')){return wrapperClone(value);}}return new LodashWrapper(value);}/**
	     * The base implementation of `_.create` without support for assigning
	     * properties to the created object.
	     *
	     * @private
	     * @param {Object} proto The object to inherit from.
	     * @returns {Object} Returns the new object.
	     */var baseCreate=function(){function object(){}return function(proto){if(!isObject(proto)){return{};}if(objectCreate){return objectCreate(proto);}object.prototype=proto;var result=new object();object.prototype=undefined;return result;};}();/**
	     * The function whose prototype chain sequence wrappers inherit from.
	     *
	     * @private
	     */function baseLodash(){}// No operation performed.
	/**
	     * The base constructor for creating `lodash` wrapper objects.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     * @param {boolean} [chainAll] Enable explicit method chain sequences.
	     */function LodashWrapper(value,chainAll){this.__wrapped__=value;this.__actions__=[];this.__chain__=!!chainAll;this.__index__=0;this.__values__=undefined;}/**
	     * By default, the template delimiters used by lodash are like those in
	     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
	     * following template settings to use alternative delimiters.
	     *
	     * @static
	     * @memberOf _
	     * @type {Object}
	     */lodash.templateSettings={/**
	       * Used to detect `data` property values to be HTML-escaped.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */'escape':reEscape,/**
	       * Used to detect code to be evaluated.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */'evaluate':reEvaluate,/**
	       * Used to detect `data` property values to inject.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */'interpolate':reInterpolate,/**
	       * Used to reference the data object in the template text.
	       *
	       * @memberOf _.templateSettings
	       * @type {string}
	       */'variable':'',/**
	       * Used to import variables into the compiled template.
	       *
	       * @memberOf _.templateSettings
	       * @type {Object}
	       */'imports':{/**
	         * A reference to the `lodash` function.
	         *
	         * @memberOf _.templateSettings.imports
	         * @type {Function}
	         */'_':lodash}};// Ensure wrappers are instances of `baseLodash`.
	lodash.prototype=baseLodash.prototype;lodash.prototype.constructor=lodash;LodashWrapper.prototype=baseCreate(baseLodash.prototype);LodashWrapper.prototype.constructor=LodashWrapper;/*------------------------------------------------------------------------*//**
	     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
	     *
	     * @private
	     * @constructor
	     * @param {*} value The value to wrap.
	     */function LazyWrapper(value){this.__wrapped__=value;this.__actions__=[];this.__dir__=1;this.__filtered__=false;this.__iteratees__=[];this.__takeCount__=MAX_ARRAY_LENGTH;this.__views__=[];}/**
	     * Creates a clone of the lazy wrapper object.
	     *
	     * @private
	     * @name clone
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the cloned `LazyWrapper` object.
	     */function lazyClone(){var result=new LazyWrapper(this.__wrapped__);result.__actions__=copyArray(this.__actions__);result.__dir__=this.__dir__;result.__filtered__=this.__filtered__;result.__iteratees__=copyArray(this.__iteratees__);result.__takeCount__=this.__takeCount__;result.__views__=copyArray(this.__views__);return result;}/**
	     * Reverses the direction of lazy iteration.
	     *
	     * @private
	     * @name reverse
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the new reversed `LazyWrapper` object.
	     */function lazyReverse(){if(this.__filtered__){var result=new LazyWrapper(this);result.__dir__=-1;result.__filtered__=true;}else{result=this.clone();result.__dir__*=-1;}return result;}/**
	     * Extracts the unwrapped value from its lazy wrapper.
	     *
	     * @private
	     * @name value
	     * @memberOf LazyWrapper
	     * @returns {*} Returns the unwrapped value.
	     */function lazyValue(){var array=this.__wrapped__.value(),dir=this.__dir__,isArr=isArray(array),isRight=dir<0,arrLength=isArr?array.length:0,view=getView(0,arrLength,this.__views__),start=view.start,end=view.end,length=end-start,index=isRight?end:start-1,iteratees=this.__iteratees__,iterLength=iteratees.length,resIndex=0,takeCount=nativeMin(length,this.__takeCount__);if(!isArr||!isRight&&arrLength==length&&takeCount==length){return baseWrapperValue(array,this.__actions__);}var result=[];outer:while(length--&&resIndex<takeCount){index+=dir;var iterIndex=-1,value=array[index];while(++iterIndex<iterLength){var data=iteratees[iterIndex],iteratee=data.iteratee,type=data.type,computed=iteratee(value);if(type==LAZY_MAP_FLAG){value=computed;}else if(!computed){if(type==LAZY_FILTER_FLAG){continue outer;}else{break outer;}}}result[resIndex++]=value;}return result;}// Ensure `LazyWrapper` is an instance of `baseLodash`.
	LazyWrapper.prototype=baseCreate(baseLodash.prototype);LazyWrapper.prototype.constructor=LazyWrapper;/*------------------------------------------------------------------------*//**
	     * Creates a hash object.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */function Hash(entries){var index=-1,length=entries==null?0:entries.length;this.clear();while(++index<length){var entry=entries[index];this.set(entry[0],entry[1]);}}/**
	     * Removes all key-value entries from the hash.
	     *
	     * @private
	     * @name clear
	     * @memberOf Hash
	     */function hashClear(){this.__data__=nativeCreate?nativeCreate(null):{};this.size=0;}/**
	     * Removes `key` and its value from the hash.
	     *
	     * @private
	     * @name delete
	     * @memberOf Hash
	     * @param {Object} hash The hash to modify.
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */function hashDelete(key){var result=this.has(key)&&delete this.__data__[key];this.size-=result?1:0;return result;}/**
	     * Gets the hash value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf Hash
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */function hashGet(key){var data=this.__data__;if(nativeCreate){var result=data[key];return result===HASH_UNDEFINED?undefined:result;}return hasOwnProperty.call(data,key)?data[key]:undefined;}/**
	     * Checks if a hash value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf Hash
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */function hashHas(key){var data=this.__data__;return nativeCreate?data[key]!==undefined:hasOwnProperty.call(data,key);}/**
	     * Sets the hash `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf Hash
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the hash instance.
	     */function hashSet(key,value){var data=this.__data__;this.size+=this.has(key)?0:1;data[key]=nativeCreate&&value===undefined?HASH_UNDEFINED:value;return this;}// Add methods to `Hash`.
	Hash.prototype.clear=hashClear;Hash.prototype['delete']=hashDelete;Hash.prototype.get=hashGet;Hash.prototype.has=hashHas;Hash.prototype.set=hashSet;/*------------------------------------------------------------------------*//**
	     * Creates an list cache object.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */function ListCache(entries){var index=-1,length=entries==null?0:entries.length;this.clear();while(++index<length){var entry=entries[index];this.set(entry[0],entry[1]);}}/**
	     * Removes all key-value entries from the list cache.
	     *
	     * @private
	     * @name clear
	     * @memberOf ListCache
	     */function listCacheClear(){this.__data__=[];this.size=0;}/**
	     * Removes `key` and its value from the list cache.
	     *
	     * @private
	     * @name delete
	     * @memberOf ListCache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */function listCacheDelete(key){var data=this.__data__,index=assocIndexOf(data,key);if(index<0){return false;}var lastIndex=data.length-1;if(index==lastIndex){data.pop();}else{splice.call(data,index,1);}--this.size;return true;}/**
	     * Gets the list cache value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf ListCache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */function listCacheGet(key){var data=this.__data__,index=assocIndexOf(data,key);return index<0?undefined:data[index][1];}/**
	     * Checks if a list cache value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf ListCache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */function listCacheHas(key){return assocIndexOf(this.__data__,key)>-1;}/**
	     * Sets the list cache `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf ListCache
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the list cache instance.
	     */function listCacheSet(key,value){var data=this.__data__,index=assocIndexOf(data,key);if(index<0){++this.size;data.push([key,value]);}else{data[index][1]=value;}return this;}// Add methods to `ListCache`.
	ListCache.prototype.clear=listCacheClear;ListCache.prototype['delete']=listCacheDelete;ListCache.prototype.get=listCacheGet;ListCache.prototype.has=listCacheHas;ListCache.prototype.set=listCacheSet;/*------------------------------------------------------------------------*//**
	     * Creates a map cache object to store key-value pairs.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */function MapCache(entries){var index=-1,length=entries==null?0:entries.length;this.clear();while(++index<length){var entry=entries[index];this.set(entry[0],entry[1]);}}/**
	     * Removes all key-value entries from the map.
	     *
	     * @private
	     * @name clear
	     * @memberOf MapCache
	     */function mapCacheClear(){this.size=0;this.__data__={'hash':new Hash(),'map':new(Map||ListCache)(),'string':new Hash()};}/**
	     * Removes `key` and its value from the map.
	     *
	     * @private
	     * @name delete
	     * @memberOf MapCache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */function mapCacheDelete(key){var result=getMapData(this,key)['delete'](key);this.size-=result?1:0;return result;}/**
	     * Gets the map value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf MapCache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */function mapCacheGet(key){return getMapData(this,key).get(key);}/**
	     * Checks if a map value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf MapCache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */function mapCacheHas(key){return getMapData(this,key).has(key);}/**
	     * Sets the map `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf MapCache
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the map cache instance.
	     */function mapCacheSet(key,value){var data=getMapData(this,key),size=data.size;data.set(key,value);this.size+=data.size==size?0:1;return this;}// Add methods to `MapCache`.
	MapCache.prototype.clear=mapCacheClear;MapCache.prototype['delete']=mapCacheDelete;MapCache.prototype.get=mapCacheGet;MapCache.prototype.has=mapCacheHas;MapCache.prototype.set=mapCacheSet;/*------------------------------------------------------------------------*//**
	     *
	     * Creates an array cache object to store unique values.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [values] The values to cache.
	     */function SetCache(values){var index=-1,length=values==null?0:values.length;this.__data__=new MapCache();while(++index<length){this.add(values[index]);}}/**
	     * Adds `value` to the array cache.
	     *
	     * @private
	     * @name add
	     * @memberOf SetCache
	     * @alias push
	     * @param {*} value The value to cache.
	     * @returns {Object} Returns the cache instance.
	     */function setCacheAdd(value){this.__data__.set(value,HASH_UNDEFINED);return this;}/**
	     * Checks if `value` is in the array cache.
	     *
	     * @private
	     * @name has
	     * @memberOf SetCache
	     * @param {*} value The value to search for.
	     * @returns {number} Returns `true` if `value` is found, else `false`.
	     */function setCacheHas(value){return this.__data__.has(value);}// Add methods to `SetCache`.
	SetCache.prototype.add=SetCache.prototype.push=setCacheAdd;SetCache.prototype.has=setCacheHas;/*------------------------------------------------------------------------*//**
	     * Creates a stack cache object to store key-value pairs.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */function Stack(entries){var data=this.__data__=new ListCache(entries);this.size=data.size;}/**
	     * Removes all key-value entries from the stack.
	     *
	     * @private
	     * @name clear
	     * @memberOf Stack
	     */function stackClear(){this.__data__=new ListCache();this.size=0;}/**
	     * Removes `key` and its value from the stack.
	     *
	     * @private
	     * @name delete
	     * @memberOf Stack
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */function stackDelete(key){var data=this.__data__,result=data['delete'](key);this.size=data.size;return result;}/**
	     * Gets the stack value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf Stack
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */function stackGet(key){return this.__data__.get(key);}/**
	     * Checks if a stack value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf Stack
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */function stackHas(key){return this.__data__.has(key);}/**
	     * Sets the stack `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf Stack
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the stack cache instance.
	     */function stackSet(key,value){var data=this.__data__;if(data instanceof ListCache){var pairs=data.__data__;if(!Map||pairs.length<LARGE_ARRAY_SIZE-1){pairs.push([key,value]);this.size=++data.size;return this;}data=this.__data__=new MapCache(pairs);}data.set(key,value);this.size=data.size;return this;}// Add methods to `Stack`.
	Stack.prototype.clear=stackClear;Stack.prototype['delete']=stackDelete;Stack.prototype.get=stackGet;Stack.prototype.has=stackHas;Stack.prototype.set=stackSet;/*------------------------------------------------------------------------*//**
	     * Creates an array of the enumerable property names of the array-like `value`.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @param {boolean} inherited Specify returning inherited property names.
	     * @returns {Array} Returns the array of property names.
	     */function arrayLikeKeys(value,inherited){var isArr=isArray(value),isArg=!isArr&&isArguments(value),isBuff=!isArr&&!isArg&&isBuffer(value),isType=!isArr&&!isArg&&!isBuff&&isTypedArray(value),skipIndexes=isArr||isArg||isBuff||isType,result=skipIndexes?baseTimes(value.length,String):[],length=result.length;for(var key in value){if((inherited||hasOwnProperty.call(value,key))&&!(skipIndexes&&(// Safari 9 has enumerable `arguments.length` in strict mode.
	key=='length'||// Node.js 0.10 has enumerable non-index properties on buffers.
	isBuff&&(key=='offset'||key=='parent')||// PhantomJS 2 has enumerable non-index properties on typed arrays.
	isType&&(key=='buffer'||key=='byteLength'||key=='byteOffset')||// Skip index properties.
	isIndex(key,length)))){result.push(key);}}return result;}/**
	     * A specialized version of `_.sample` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to sample.
	     * @returns {*} Returns the random element.
	     */function arraySample(array){var length=array.length;return length?array[baseRandom(0,length-1)]:undefined;}/**
	     * A specialized version of `_.sampleSize` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to sample.
	     * @param {number} n The number of elements to sample.
	     * @returns {Array} Returns the random elements.
	     */function arraySampleSize(array,n){return shuffleSelf(copyArray(array),baseClamp(n,0,array.length));}/**
	     * A specialized version of `_.shuffle` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     */function arrayShuffle(array){return shuffleSelf(copyArray(array));}/**
	     * This function is like `assignValue` except that it doesn't assign
	     * `undefined` values.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */function assignMergeValue(object,key,value){if(value!==undefined&&!eq(object[key],value)||value===undefined&&!(key in object)){baseAssignValue(object,key,value);}}/**
	     * Assigns `value` to `key` of `object` if the existing value is not equivalent
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */function assignValue(object,key,value){var objValue=object[key];if(!(hasOwnProperty.call(object,key)&&eq(objValue,value))||value===undefined&&!(key in object)){baseAssignValue(object,key,value);}}/**
	     * Gets the index at which the `key` is found in `array` of key-value pairs.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {*} key The key to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     */function assocIndexOf(array,key){var length=array.length;while(length--){if(eq(array[length][0],key)){return length;}}return-1;}/**
	     * Aggregates elements of `collection` on `accumulator` with keys transformed
	     * by `iteratee` and values set by `setter`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} setter The function to set `accumulator` values.
	     * @param {Function} iteratee The iteratee to transform keys.
	     * @param {Object} accumulator The initial aggregated object.
	     * @returns {Function} Returns `accumulator`.
	     */function baseAggregator(collection,setter,iteratee,accumulator){baseEach(collection,function(value,key,collection){setter(accumulator,value,iteratee(value),collection);});return accumulator;}/**
	     * The base implementation of `_.assign` without support for multiple sources
	     * or `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */function baseAssign(object,source){return object&&copyObject(source,keys(source),object);}/**
	     * The base implementation of `_.assignIn` without support for multiple sources
	     * or `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */function baseAssignIn(object,source){return object&&copyObject(source,keysIn(source),object);}/**
	     * The base implementation of `assignValue` and `assignMergeValue` without
	     * value checks.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */function baseAssignValue(object,key,value){if(key=='__proto__'&&defineProperty){defineProperty(object,key,{'configurable':true,'enumerable':true,'value':value,'writable':true});}else{object[key]=value;}}/**
	     * The base implementation of `_.at` without support for individual paths.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {string[]} paths The property paths to pick.
	     * @returns {Array} Returns the picked elements.
	     */function baseAt(object,paths){var index=-1,length=paths.length,result=Array(length),skip=object==null;while(++index<length){result[index]=skip?undefined:get(object,paths[index]);}return result;}/**
	     * The base implementation of `_.clamp` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {number} number The number to clamp.
	     * @param {number} [lower] The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the clamped number.
	     */function baseClamp(number,lower,upper){if(number===number){if(upper!==undefined){number=number<=upper?number:upper;}if(lower!==undefined){number=number>=lower?number:lower;}}return number;}/**
	     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
	     * traversed objects.
	     *
	     * @private
	     * @param {*} value The value to clone.
	     * @param {boolean} bitmask The bitmask flags.
	     *  1 - Deep clone
	     *  2 - Flatten inherited properties
	     *  4 - Clone symbols
	     * @param {Function} [customizer] The function to customize cloning.
	     * @param {string} [key] The key of `value`.
	     * @param {Object} [object] The parent object of `value`.
	     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
	     * @returns {*} Returns the cloned value.
	     */function baseClone(value,bitmask,customizer,key,object,stack){var result,isDeep=bitmask&CLONE_DEEP_FLAG,isFlat=bitmask&CLONE_FLAT_FLAG,isFull=bitmask&CLONE_SYMBOLS_FLAG;if(customizer){result=object?customizer(value,key,object,stack):customizer(value);}if(result!==undefined){return result;}if(!isObject(value)){return value;}var isArr=isArray(value);if(isArr){result=initCloneArray(value);if(!isDeep){return copyArray(value,result);}}else{var tag=getTag(value),isFunc=tag==funcTag||tag==genTag;if(isBuffer(value)){return cloneBuffer(value,isDeep);}if(tag==objectTag||tag==argsTag||isFunc&&!object){result=isFlat||isFunc?{}:initCloneObject(value);if(!isDeep){return isFlat?copySymbolsIn(value,baseAssignIn(result,value)):copySymbols(value,baseAssign(result,value));}}else{if(!cloneableTags[tag]){return object?value:{};}result=initCloneByTag(value,tag,isDeep);}}// Check for circular references and return its corresponding clone.
	stack||(stack=new Stack());var stacked=stack.get(value);if(stacked){return stacked;}stack.set(value,result);if(isSet(value)){value.forEach(function(subValue){result.add(baseClone(subValue,bitmask,customizer,subValue,value,stack));});return result;}if(isMap(value)){value.forEach(function(subValue,key){result.set(key,baseClone(subValue,bitmask,customizer,key,value,stack));});return result;}var keysFunc=isFull?isFlat?getAllKeysIn:getAllKeys:isFlat?keysIn:keys;var props=isArr?undefined:keysFunc(value);arrayEach(props||value,function(subValue,key){if(props){key=subValue;subValue=value[key];}// Recursively populate clone (susceptible to call stack limits).
	assignValue(result,key,baseClone(subValue,bitmask,customizer,key,value,stack));});return result;}/**
	     * The base implementation of `_.conforms` which doesn't clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {Function} Returns the new spec function.
	     */function baseConforms(source){var props=keys(source);return function(object){return baseConformsTo(object,source,props);};}/**
	     * The base implementation of `_.conformsTo` which accepts `props` to check.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
	     */function baseConformsTo(object,source,props){var length=props.length;if(object==null){return!length;}object=Object(object);while(length--){var key=props[length],predicate=source[key],value=object[key];if(value===undefined&&!(key in object)||!predicate(value)){return false;}}return true;}/**
	     * The base implementation of `_.delay` and `_.defer` which accepts `args`
	     * to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {Array} args The arguments to provide to `func`.
	     * @returns {number|Object} Returns the timer id or timeout object.
	     */function baseDelay(func,wait,args){if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}return setTimeout(function(){func.apply(undefined,args);},wait);}/**
	     * The base implementation of methods like `_.difference` without support
	     * for excluding multiple arrays or iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Array} values The values to exclude.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     */function baseDifference(array,values,iteratee,comparator){var index=-1,includes=arrayIncludes,isCommon=true,length=array.length,result=[],valuesLength=values.length;if(!length){return result;}if(iteratee){values=arrayMap(values,baseUnary(iteratee));}if(comparator){includes=arrayIncludesWith;isCommon=false;}else if(values.length>=LARGE_ARRAY_SIZE){includes=cacheHas;isCommon=false;values=new SetCache(values);}outer:while(++index<length){var value=array[index],computed=iteratee==null?value:iteratee(value);value=comparator||value!==0?value:0;if(isCommon&&computed===computed){var valuesIndex=valuesLength;while(valuesIndex--){if(values[valuesIndex]===computed){continue outer;}}result.push(value);}else if(!includes(values,computed,comparator)){result.push(value);}}return result;}/**
	     * The base implementation of `_.forEach` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     */var baseEach=createBaseEach(baseForOwn);/**
	     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     */var baseEachRight=createBaseEach(baseForOwnRight,true);/**
	     * The base implementation of `_.every` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`
	     */function baseEvery(collection,predicate){var result=true;baseEach(collection,function(value,index,collection){result=!!predicate(value,index,collection);return result;});return result;}/**
	     * The base implementation of methods like `_.max` and `_.min` which accepts a
	     * `comparator` to determine the extremum value.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The iteratee invoked per iteration.
	     * @param {Function} comparator The comparator used to compare values.
	     * @returns {*} Returns the extremum value.
	     */function baseExtremum(array,iteratee,comparator){var index=-1,length=array.length;while(++index<length){var value=array[index],current=iteratee(value);if(current!=null&&(computed===undefined?current===current&&!isSymbol(current):comparator(current,computed))){var computed=current,result=value;}}return result;}/**
	     * The base implementation of `_.fill` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     */function baseFill(array,value,start,end){var length=array.length;start=toInteger(start);if(start<0){start=-start>length?0:length+start;}end=end===undefined||end>length?length:toInteger(end);if(end<0){end+=length;}end=start>end?0:toLength(end);while(start<end){array[start++]=value;}return array;}/**
	     * The base implementation of `_.filter` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */function baseFilter(collection,predicate){var result=[];baseEach(collection,function(value,index,collection){if(predicate(value,index,collection)){result.push(value);}});return result;}/**
	     * The base implementation of `_.flatten` with support for restricting flattening.
	     *
	     * @private
	     * @param {Array} array The array to flatten.
	     * @param {number} depth The maximum recursion depth.
	     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
	     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
	     * @param {Array} [result=[]] The initial result value.
	     * @returns {Array} Returns the new flattened array.
	     */function baseFlatten(array,depth,predicate,isStrict,result){var index=-1,length=array.length;predicate||(predicate=isFlattenable);result||(result=[]);while(++index<length){var value=array[index];if(depth>0&&predicate(value)){if(depth>1){// Recursively flatten arrays (susceptible to call stack limits).
	baseFlatten(value,depth-1,predicate,isStrict,result);}else{arrayPush(result,value);}}else if(!isStrict){result[result.length]=value;}}return result;}/**
	     * The base implementation of `baseForOwn` which iterates over `object`
	     * properties returned by `keysFunc` and invokes `iteratee` for each property.
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */var baseFor=createBaseFor();/**
	     * This function is like `baseFor` except that it iterates over properties
	     * in the opposite order.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */var baseForRight=createBaseFor(true);/**
	     * The base implementation of `_.forOwn` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */function baseForOwn(object,iteratee){return object&&baseFor(object,iteratee,keys);}/**
	     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */function baseForOwnRight(object,iteratee){return object&&baseForRight(object,iteratee,keys);}/**
	     * The base implementation of `_.functions` which creates an array of
	     * `object` function property names filtered from `props`.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} props The property names to filter.
	     * @returns {Array} Returns the function names.
	     */function baseFunctions(object,props){return arrayFilter(props,function(key){return isFunction(object[key]);});}/**
	     * The base implementation of `_.get` without support for default values.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @returns {*} Returns the resolved value.
	     */function baseGet(object,path){path=castPath(path,object);var index=0,length=path.length;while(object!=null&&index<length){object=object[toKey(path[index++])];}return index&&index==length?object:undefined;}/**
	     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	     * symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @param {Function} symbolsFunc The function to get the symbols of `object`.
	     * @returns {Array} Returns the array of property names and symbols.
	     */function baseGetAllKeys(object,keysFunc,symbolsFunc){var result=keysFunc(object);return isArray(object)?result:arrayPush(result,symbolsFunc(object));}/**
	     * The base implementation of `getTag` without fallbacks for buggy environments.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the `toStringTag`.
	     */function baseGetTag(value){if(value==null){return value===undefined?undefinedTag:nullTag;}return symToStringTag&&symToStringTag in Object(value)?getRawTag(value):objectToString(value);}/**
	     * The base implementation of `_.gt` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
	     *  else `false`.
	     */function baseGt(value,other){return value>other;}/**
	     * The base implementation of `_.has` without support for deep paths.
	     *
	     * @private
	     * @param {Object} [object] The object to query.
	     * @param {Array|string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
	     */function baseHas(object,key){return object!=null&&hasOwnProperty.call(object,key);}/**
	     * The base implementation of `_.hasIn` without support for deep paths.
	     *
	     * @private
	     * @param {Object} [object] The object to query.
	     * @param {Array|string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
	     */function baseHasIn(object,key){return object!=null&&key in Object(object);}/**
	     * The base implementation of `_.inRange` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {number} number The number to check.
	     * @param {number} start The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	     */function baseInRange(number,start,end){return number>=nativeMin(start,end)&&number<nativeMax(start,end);}/**
	     * The base implementation of methods like `_.intersection`, without support
	     * for iteratee shorthands, that accepts an array of arrays to inspect.
	     *
	     * @private
	     * @param {Array} arrays The arrays to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of shared values.
	     */function baseIntersection(arrays,iteratee,comparator){var includes=comparator?arrayIncludesWith:arrayIncludes,length=arrays[0].length,othLength=arrays.length,othIndex=othLength,caches=Array(othLength),maxLength=Infinity,result=[];while(othIndex--){var array=arrays[othIndex];if(othIndex&&iteratee){array=arrayMap(array,baseUnary(iteratee));}maxLength=nativeMin(array.length,maxLength);caches[othIndex]=!comparator&&(iteratee||length>=120&&array.length>=120)?new SetCache(othIndex&&array):undefined;}array=arrays[0];var index=-1,seen=caches[0];outer:while(++index<length&&result.length<maxLength){var value=array[index],computed=iteratee?iteratee(value):value;value=comparator||value!==0?value:0;if(!(seen?cacheHas(seen,computed):includes(result,computed,comparator))){othIndex=othLength;while(--othIndex){var cache=caches[othIndex];if(!(cache?cacheHas(cache,computed):includes(arrays[othIndex],computed,comparator))){continue outer;}}if(seen){seen.push(computed);}result.push(value);}}return result;}/**
	     * The base implementation of `_.invert` and `_.invertBy` which inverts
	     * `object` with values transformed by `iteratee` and set by `setter`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} setter The function to set `accumulator` values.
	     * @param {Function} iteratee The iteratee to transform values.
	     * @param {Object} accumulator The initial inverted object.
	     * @returns {Function} Returns `accumulator`.
	     */function baseInverter(object,setter,iteratee,accumulator){baseForOwn(object,function(value,key,object){setter(accumulator,iteratee(value),key,object);});return accumulator;}/**
	     * The base implementation of `_.invoke` without support for individual
	     * method arguments.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {Array} args The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     */function baseInvoke(object,path,args){path=castPath(path,object);object=parent(object,path);var func=object==null?object:object[toKey(last(path))];return func==null?undefined:apply(func,object,args);}/**
	     * The base implementation of `_.isArguments`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	     */function baseIsArguments(value){return isObjectLike(value)&&baseGetTag(value)==argsTag;}/**
	     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
	     */function baseIsArrayBuffer(value){return isObjectLike(value)&&baseGetTag(value)==arrayBufferTag;}/**
	     * The base implementation of `_.isDate` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
	     */function baseIsDate(value){return isObjectLike(value)&&baseGetTag(value)==dateTag;}/**
	     * The base implementation of `_.isEqual` which supports partial comparisons
	     * and tracks traversed objects.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {boolean} bitmask The bitmask flags.
	     *  1 - Unordered comparison
	     *  2 - Partial comparison
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     */function baseIsEqual(value,other,bitmask,customizer,stack){if(value===other){return true;}if(value==null||other==null||!isObjectLike(value)&&!isObjectLike(other)){return value!==value&&other!==other;}return baseIsEqualDeep(value,other,bitmask,customizer,baseIsEqual,stack);}/**
	     * A specialized version of `baseIsEqual` for arrays and objects which performs
	     * deep comparisons and tracks traversed objects enabling objects with circular
	     * references to be compared.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */function baseIsEqualDeep(object,other,bitmask,customizer,equalFunc,stack){var objIsArr=isArray(object),othIsArr=isArray(other),objTag=objIsArr?arrayTag:getTag(object),othTag=othIsArr?arrayTag:getTag(other);objTag=objTag==argsTag?objectTag:objTag;othTag=othTag==argsTag?objectTag:othTag;var objIsObj=objTag==objectTag,othIsObj=othTag==objectTag,isSameTag=objTag==othTag;if(isSameTag&&isBuffer(object)){if(!isBuffer(other)){return false;}objIsArr=true;objIsObj=false;}if(isSameTag&&!objIsObj){stack||(stack=new Stack());return objIsArr||isTypedArray(object)?equalArrays(object,other,bitmask,customizer,equalFunc,stack):equalByTag(object,other,objTag,bitmask,customizer,equalFunc,stack);}if(!(bitmask&COMPARE_PARTIAL_FLAG)){var objIsWrapped=objIsObj&&hasOwnProperty.call(object,'__wrapped__'),othIsWrapped=othIsObj&&hasOwnProperty.call(other,'__wrapped__');if(objIsWrapped||othIsWrapped){var objUnwrapped=objIsWrapped?object.value():object,othUnwrapped=othIsWrapped?other.value():other;stack||(stack=new Stack());return equalFunc(objUnwrapped,othUnwrapped,bitmask,customizer,stack);}}if(!isSameTag){return false;}stack||(stack=new Stack());return equalObjects(object,other,bitmask,customizer,equalFunc,stack);}/**
	     * The base implementation of `_.isMap` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	     */function baseIsMap(value){return isObjectLike(value)&&getTag(value)==mapTag;}/**
	     * The base implementation of `_.isMatch` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Array} matchData The property names, values, and compare flags to match.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     */function baseIsMatch(object,source,matchData,customizer){var index=matchData.length,length=index,noCustomizer=!customizer;if(object==null){return!length;}object=Object(object);while(index--){var data=matchData[index];if(noCustomizer&&data[2]?data[1]!==object[data[0]]:!(data[0]in object)){return false;}}while(++index<length){data=matchData[index];var key=data[0],objValue=object[key],srcValue=data[1];if(noCustomizer&&data[2]){if(objValue===undefined&&!(key in object)){return false;}}else{var stack=new Stack();if(customizer){var result=customizer(objValue,srcValue,key,object,source,stack);}if(!(result===undefined?baseIsEqual(srcValue,objValue,COMPARE_PARTIAL_FLAG|COMPARE_UNORDERED_FLAG,customizer,stack):result)){return false;}}}return true;}/**
	     * The base implementation of `_.isNative` without bad shim checks.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function,
	     *  else `false`.
	     */function baseIsNative(value){if(!isObject(value)||isMasked(value)){return false;}var pattern=isFunction(value)?reIsNative:reIsHostCtor;return pattern.test(toSource(value));}/**
	     * The base implementation of `_.isRegExp` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
	     */function baseIsRegExp(value){return isObjectLike(value)&&baseGetTag(value)==regexpTag;}/**
	     * The base implementation of `_.isSet` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	     */function baseIsSet(value){return isObjectLike(value)&&getTag(value)==setTag;}/**
	     * The base implementation of `_.isTypedArray` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	     */function baseIsTypedArray(value){return isObjectLike(value)&&isLength(value.length)&&!!typedArrayTags[baseGetTag(value)];}/**
	     * The base implementation of `_.iteratee`.
	     *
	     * @private
	     * @param {*} [value=_.identity] The value to convert to an iteratee.
	     * @returns {Function} Returns the iteratee.
	     */function baseIteratee(value){// Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
	// See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
	if(typeof value=='function'){return value;}if(value==null){return identity;}if((typeof value==='undefined'?'undefined':_typeof(value))=='object'){return isArray(value)?baseMatchesProperty(value[0],value[1]):baseMatches(value);}return property(value);}/**
	     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */function baseKeys(object){if(!isPrototype(object)){return nativeKeys(object);}var result=[];for(var key in Object(object)){if(hasOwnProperty.call(object,key)&&key!='constructor'){result.push(key);}}return result;}/**
	     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */function baseKeysIn(object){if(!isObject(object)){return nativeKeysIn(object);}var isProto=isPrototype(object),result=[];for(var key in object){if(!(key=='constructor'&&(isProto||!hasOwnProperty.call(object,key)))){result.push(key);}}return result;}/**
	     * The base implementation of `_.lt` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`,
	     *  else `false`.
	     */function baseLt(value,other){return value<other;}/**
	     * The base implementation of `_.map` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */function baseMap(collection,iteratee){var index=-1,result=isArrayLike(collection)?Array(collection.length):[];baseEach(collection,function(value,key,collection){result[++index]=iteratee(value,key,collection);});return result;}/**
	     * The base implementation of `_.matches` which doesn't clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new spec function.
	     */function baseMatches(source){var matchData=getMatchData(source);if(matchData.length==1&&matchData[0][2]){return matchesStrictComparable(matchData[0][0],matchData[0][1]);}return function(object){return object===source||baseIsMatch(object,source,matchData);};}/**
	     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
	     *
	     * @private
	     * @param {string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     */function baseMatchesProperty(path,srcValue){if(isKey(path)&&isStrictComparable(srcValue)){return matchesStrictComparable(toKey(path),srcValue);}return function(object){var objValue=get(object,path);return objValue===undefined&&objValue===srcValue?hasIn(object,path):baseIsEqual(srcValue,objValue,COMPARE_PARTIAL_FLAG|COMPARE_UNORDERED_FLAG);};}/**
	     * The base implementation of `_.merge` without support for multiple sources.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {number} srcIndex The index of `source`.
	     * @param {Function} [customizer] The function to customize merged values.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     */function baseMerge(object,source,srcIndex,customizer,stack){if(object===source){return;}baseFor(source,function(srcValue,key){if(isObject(srcValue)){stack||(stack=new Stack());baseMergeDeep(object,source,key,srcIndex,baseMerge,customizer,stack);}else{var newValue=customizer?customizer(safeGet(object,key),srcValue,key+'',object,source,stack):undefined;if(newValue===undefined){newValue=srcValue;}assignMergeValue(object,key,newValue);}},keysIn);}/**
	     * A specialized version of `baseMerge` for arrays and objects which performs
	     * deep merges and tracks traversed objects enabling objects with circular
	     * references to be merged.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {string} key The key of the value to merge.
	     * @param {number} srcIndex The index of `source`.
	     * @param {Function} mergeFunc The function to merge values.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     */function baseMergeDeep(object,source,key,srcIndex,mergeFunc,customizer,stack){var objValue=safeGet(object,key),srcValue=safeGet(source,key),stacked=stack.get(srcValue);if(stacked){assignMergeValue(object,key,stacked);return;}var newValue=customizer?customizer(objValue,srcValue,key+'',object,source,stack):undefined;var isCommon=newValue===undefined;if(isCommon){var isArr=isArray(srcValue),isBuff=!isArr&&isBuffer(srcValue),isTyped=!isArr&&!isBuff&&isTypedArray(srcValue);newValue=srcValue;if(isArr||isBuff||isTyped){if(isArray(objValue)){newValue=objValue;}else if(isArrayLikeObject(objValue)){newValue=copyArray(objValue);}else if(isBuff){isCommon=false;newValue=cloneBuffer(srcValue,true);}else if(isTyped){isCommon=false;newValue=cloneTypedArray(srcValue,true);}else{newValue=[];}}else if(isPlainObject(srcValue)||isArguments(srcValue)){newValue=objValue;if(isArguments(objValue)){newValue=toPlainObject(objValue);}else if(!isObject(objValue)||srcIndex&&isFunction(objValue)){newValue=initCloneObject(srcValue);}}else{isCommon=false;}}if(isCommon){// Recursively merge objects and arrays (susceptible to call stack limits).
	stack.set(srcValue,newValue);mergeFunc(newValue,srcValue,srcIndex,customizer,stack);stack['delete'](srcValue);}assignMergeValue(object,key,newValue);}/**
	     * The base implementation of `_.nth` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {number} n The index of the element to return.
	     * @returns {*} Returns the nth element of `array`.
	     */function baseNth(array,n){var length=array.length;if(!length){return;}n+=n<0?length:0;return isIndex(n,length)?array[n]:undefined;}/**
	     * The base implementation of `_.orderBy` without param guards.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {string[]} orders The sort orders of `iteratees`.
	     * @returns {Array} Returns the new sorted array.
	     */function baseOrderBy(collection,iteratees,orders){var index=-1;iteratees=arrayMap(iteratees.length?iteratees:[identity],baseUnary(getIteratee()));var result=baseMap(collection,function(value,key,collection){var criteria=arrayMap(iteratees,function(iteratee){return iteratee(value);});return{'criteria':criteria,'index':++index,'value':value};});return baseSortBy(result,function(object,other){return compareMultiple(object,other,orders);});}/**
	     * The base implementation of `_.pick` without support for individual
	     * property identifiers.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} paths The property paths to pick.
	     * @returns {Object} Returns the new object.
	     */function basePick(object,paths){return basePickBy(object,paths,function(value,path){return hasIn(object,path);});}/**
	     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} paths The property paths to pick.
	     * @param {Function} predicate The function invoked per property.
	     * @returns {Object} Returns the new object.
	     */function basePickBy(object,paths,predicate){var index=-1,length=paths.length,result={};while(++index<length){var path=paths[index],value=baseGet(object,path);if(predicate(value,path)){baseSet(result,castPath(path,object),value);}}return result;}/**
	     * A specialized version of `baseProperty` which supports deep paths.
	     *
	     * @private
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new accessor function.
	     */function basePropertyDeep(path){return function(object){return baseGet(object,path);};}/**
	     * The base implementation of `_.pullAllBy` without support for iteratee
	     * shorthands.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns `array`.
	     */function basePullAll(array,values,iteratee,comparator){var indexOf=comparator?baseIndexOfWith:baseIndexOf,index=-1,length=values.length,seen=array;if(array===values){values=copyArray(values);}if(iteratee){seen=arrayMap(array,baseUnary(iteratee));}while(++index<length){var fromIndex=0,value=values[index],computed=iteratee?iteratee(value):value;while((fromIndex=indexOf(seen,computed,fromIndex,comparator))>-1){if(seen!==array){splice.call(seen,fromIndex,1);}splice.call(array,fromIndex,1);}}return array;}/**
	     * The base implementation of `_.pullAt` without support for individual
	     * indexes or capturing the removed elements.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {number[]} indexes The indexes of elements to remove.
	     * @returns {Array} Returns `array`.
	     */function basePullAt(array,indexes){var length=array?indexes.length:0,lastIndex=length-1;while(length--){var index=indexes[length];if(length==lastIndex||index!==previous){var previous=index;if(isIndex(index)){splice.call(array,index,1);}else{baseUnset(array,index);}}}return array;}/**
	     * The base implementation of `_.random` without support for returning
	     * floating-point numbers.
	     *
	     * @private
	     * @param {number} lower The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the random number.
	     */function baseRandom(lower,upper){return lower+nativeFloor(nativeRandom()*(upper-lower+1));}/**
	     * The base implementation of `_.range` and `_.rangeRight` which doesn't
	     * coerce arguments.
	     *
	     * @private
	     * @param {number} start The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} step The value to increment or decrement by.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the range of numbers.
	     */function baseRange(start,end,step,fromRight){var index=-1,length=nativeMax(nativeCeil((end-start)/(step||1)),0),result=Array(length);while(length--){result[fromRight?length:++index]=start;start+=step;}return result;}/**
	     * The base implementation of `_.repeat` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {string} string The string to repeat.
	     * @param {number} n The number of times to repeat the string.
	     * @returns {string} Returns the repeated string.
	     */function baseRepeat(string,n){var result='';if(!string||n<1||n>MAX_SAFE_INTEGER){return result;}// Leverage the exponentiation by squaring algorithm for a faster repeat.
	// See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
	do{if(n%2){result+=string;}n=nativeFloor(n/2);if(n){string+=string;}}while(n);return result;}/**
	     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     */function baseRest(func,start){return setToString(overRest(func,start,identity),func+'');}/**
	     * The base implementation of `_.sample`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to sample.
	     * @returns {*} Returns the random element.
	     */function baseSample(collection){return arraySample(values(collection));}/**
	     * The base implementation of `_.sampleSize` without param guards.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to sample.
	     * @param {number} n The number of elements to sample.
	     * @returns {Array} Returns the random elements.
	     */function baseSampleSize(collection,n){var array=values(collection);return shuffleSelf(array,baseClamp(n,0,array.length));}/**
	     * The base implementation of `_.set`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @param {Function} [customizer] The function to customize path creation.
	     * @returns {Object} Returns `object`.
	     */function baseSet(object,path,value,customizer){if(!isObject(object)){return object;}path=castPath(path,object);var index=-1,length=path.length,lastIndex=length-1,nested=object;while(nested!=null&&++index<length){var key=toKey(path[index]),newValue=value;if(index!=lastIndex){var objValue=nested[key];newValue=customizer?customizer(objValue,key,nested):undefined;if(newValue===undefined){newValue=isObject(objValue)?objValue:isIndex(path[index+1])?[]:{};}}assignValue(nested,key,newValue);nested=nested[key];}return object;}/**
	     * The base implementation of `setData` without support for hot loop shorting.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */var baseSetData=!metaMap?identity:function(func,data){metaMap.set(func,data);return func;};/**
	     * The base implementation of `setToString` without support for hot loop shorting.
	     *
	     * @private
	     * @param {Function} func The function to modify.
	     * @param {Function} string The `toString` result.
	     * @returns {Function} Returns `func`.
	     */var baseSetToString=!defineProperty?identity:function(func,string){return defineProperty(func,'toString',{'configurable':true,'enumerable':false,'value':constant(string),'writable':true});};/**
	     * The base implementation of `_.shuffle`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     */function baseShuffle(collection){return shuffleSelf(values(collection));}/**
	     * The base implementation of `_.slice` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */function baseSlice(array,start,end){var index=-1,length=array.length;if(start<0){start=-start>length?0:length+start;}end=end>length?length:end;if(end<0){end+=length;}length=start>end?0:end-start>>>0;start>>>=0;var result=Array(length);while(++index<length){result[index]=array[index+start];}return result;}/**
	     * The base implementation of `_.some` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */function baseSome(collection,predicate){var result;baseEach(collection,function(value,index,collection){result=predicate(value,index,collection);return!result;});return!!result;}/**
	     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
	     * performs a binary search of `array` to determine the index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */function baseSortedIndex(array,value,retHighest){var low=0,high=array==null?low:array.length;if(typeof value=='number'&&value===value&&high<=HALF_MAX_ARRAY_LENGTH){while(low<high){var mid=low+high>>>1,computed=array[mid];if(computed!==null&&!isSymbol(computed)&&(retHighest?computed<=value:computed<value)){low=mid+1;}else{high=mid;}}return high;}return baseSortedIndexBy(array,value,identity,retHighest);}/**
	     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
	     * which invokes `iteratee` for `value` and each element of `array` to compute
	     * their sort ranking. The iteratee is invoked with one argument; (value).
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} iteratee The iteratee invoked per element.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */function baseSortedIndexBy(array,value,iteratee,retHighest){value=iteratee(value);var low=0,high=array==null?0:array.length,valIsNaN=value!==value,valIsNull=value===null,valIsSymbol=isSymbol(value),valIsUndefined=value===undefined;while(low<high){var mid=nativeFloor((low+high)/2),computed=iteratee(array[mid]),othIsDefined=computed!==undefined,othIsNull=computed===null,othIsReflexive=computed===computed,othIsSymbol=isSymbol(computed);if(valIsNaN){var setLow=retHighest||othIsReflexive;}else if(valIsUndefined){setLow=othIsReflexive&&(retHighest||othIsDefined);}else if(valIsNull){setLow=othIsReflexive&&othIsDefined&&(retHighest||!othIsNull);}else if(valIsSymbol){setLow=othIsReflexive&&othIsDefined&&!othIsNull&&(retHighest||!othIsSymbol);}else if(othIsNull||othIsSymbol){setLow=false;}else{setLow=retHighest?computed<=value:computed<value;}if(setLow){low=mid+1;}else{high=mid;}}return nativeMin(high,MAX_ARRAY_INDEX);}/**
	     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
	     * support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     */function baseSortedUniq(array,iteratee){var index=-1,length=array.length,resIndex=0,result=[];while(++index<length){var value=array[index],computed=iteratee?iteratee(value):value;if(!index||!eq(computed,seen)){var seen=computed;result[resIndex++]=value===0?0:value;}}return result;}/**
	     * The base implementation of `_.toNumber` which doesn't ensure correct
	     * conversions of binary, hexadecimal, or octal string values.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {number} Returns the number.
	     */function baseToNumber(value){if(typeof value=='number'){return value;}if(isSymbol(value)){return NAN;}return+value;}/**
	     * The base implementation of `_.toString` which doesn't convert nullish
	     * values to empty strings.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {string} Returns the string.
	     */function baseToString(value){// Exit early for strings to avoid a performance hit in some environments.
	if(typeof value=='string'){return value;}if(isArray(value)){// Recursively convert values (susceptible to call stack limits).
	return arrayMap(value,baseToString)+'';}if(isSymbol(value)){return symbolToString?symbolToString.call(value):'';}var result=value+'';return result=='0'&&1/value==-INFINITY?'-0':result;}/**
	     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     */function baseUniq(array,iteratee,comparator){var index=-1,includes=arrayIncludes,length=array.length,isCommon=true,result=[],seen=result;if(comparator){isCommon=false;includes=arrayIncludesWith;}else if(length>=LARGE_ARRAY_SIZE){var set=iteratee?null:createSet(array);if(set){return setToArray(set);}isCommon=false;includes=cacheHas;seen=new SetCache();}else{seen=iteratee?[]:result;}outer:while(++index<length){var value=array[index],computed=iteratee?iteratee(value):value;value=comparator||value!==0?value:0;if(isCommon&&computed===computed){var seenIndex=seen.length;while(seenIndex--){if(seen[seenIndex]===computed){continue outer;}}if(iteratee){seen.push(computed);}result.push(value);}else if(!includes(seen,computed,comparator)){if(seen!==result){seen.push(computed);}result.push(value);}}return result;}/**
	     * The base implementation of `_.unset`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The property path to unset.
	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	     */function baseUnset(object,path){path=castPath(path,object);object=parent(object,path);return object==null||delete object[toKey(last(path))];}/**
	     * The base implementation of `_.update`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to update.
	     * @param {Function} updater The function to produce the updated value.
	     * @param {Function} [customizer] The function to customize path creation.
	     * @returns {Object} Returns `object`.
	     */function baseUpdate(object,path,updater,customizer){return baseSet(object,path,updater(baseGet(object,path)),customizer);}/**
	     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
	     * without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the slice of `array`.
	     */function baseWhile(array,predicate,isDrop,fromRight){var length=array.length,index=fromRight?length:-1;while((fromRight?index--:++index<length)&&predicate(array[index],index,array)){}return isDrop?baseSlice(array,fromRight?0:index,fromRight?index+1:length):baseSlice(array,fromRight?index+1:0,fromRight?length:index);}/**
	     * The base implementation of `wrapperValue` which returns the result of
	     * performing a sequence of actions on the unwrapped `value`, where each
	     * successive action is supplied the return value of the previous.
	     *
	     * @private
	     * @param {*} value The unwrapped value.
	     * @param {Array} actions Actions to perform to resolve the unwrapped value.
	     * @returns {*} Returns the resolved value.
	     */function baseWrapperValue(value,actions){var result=value;if(result instanceof LazyWrapper){result=result.value();}return arrayReduce(actions,function(result,action){return action.func.apply(action.thisArg,arrayPush([result],action.args));},result);}/**
	     * The base implementation of methods like `_.xor`, without support for
	     * iteratee shorthands, that accepts an array of arrays to inspect.
	     *
	     * @private
	     * @param {Array} arrays The arrays to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of values.
	     */function baseXor(arrays,iteratee,comparator){var length=arrays.length;if(length<2){return length?baseUniq(arrays[0]):[];}var index=-1,result=Array(length);while(++index<length){var array=arrays[index],othIndex=-1;while(++othIndex<length){if(othIndex!=index){result[index]=baseDifference(result[index]||array,arrays[othIndex],iteratee,comparator);}}}return baseUniq(baseFlatten(result,1),iteratee,comparator);}/**
	     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
	     *
	     * @private
	     * @param {Array} props The property identifiers.
	     * @param {Array} values The property values.
	     * @param {Function} assignFunc The function to assign values.
	     * @returns {Object} Returns the new object.
	     */function baseZipObject(props,values,assignFunc){var index=-1,length=props.length,valsLength=values.length,result={};while(++index<length){var value=index<valsLength?values[index]:undefined;assignFunc(result,props[index],value);}return result;}/**
	     * Casts `value` to an empty array if it's not an array like object.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Array|Object} Returns the cast array-like object.
	     */function castArrayLikeObject(value){return isArrayLikeObject(value)?value:[];}/**
	     * Casts `value` to `identity` if it's not a function.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Function} Returns cast function.
	     */function castFunction(value){return typeof value=='function'?value:identity;}/**
	     * Casts `value` to a path array if it's not one.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {Array} Returns the cast property path array.
	     */function castPath(value,object){if(isArray(value)){return value;}return isKey(value,object)?[value]:stringToPath(toString(value));}/**
	     * A `baseRest` alias which can be replaced with `identity` by module
	     * replacement plugins.
	     *
	     * @private
	     * @type {Function}
	     * @param {Function} func The function to apply a rest parameter to.
	     * @returns {Function} Returns the new function.
	     */var castRest=baseRest;/**
	     * Casts `array` to a slice if it's needed.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {number} start The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the cast slice.
	     */function castSlice(array,start,end){var length=array.length;end=end===undefined?length:end;return!start&&end>=length?array:baseSlice(array,start,end);}/**
	     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
	     *
	     * @private
	     * @param {number|Object} id The timer id or timeout object of the timer to clear.
	     */var clearTimeout=ctxClearTimeout||function(id){return root.clearTimeout(id);};/**
	     * Creates a clone of  `buffer`.
	     *
	     * @private
	     * @param {Buffer} buffer The buffer to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Buffer} Returns the cloned buffer.
	     */function cloneBuffer(buffer,isDeep){if(isDeep){return buffer.slice();}var length=buffer.length,result=allocUnsafe?allocUnsafe(length):new buffer.constructor(length);buffer.copy(result);return result;}/**
	     * Creates a clone of `arrayBuffer`.
	     *
	     * @private
	     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	     * @returns {ArrayBuffer} Returns the cloned array buffer.
	     */function cloneArrayBuffer(arrayBuffer){var result=new arrayBuffer.constructor(arrayBuffer.byteLength);new Uint8Array(result).set(new Uint8Array(arrayBuffer));return result;}/**
	     * Creates a clone of `dataView`.
	     *
	     * @private
	     * @param {Object} dataView The data view to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned data view.
	     */function cloneDataView(dataView,isDeep){var buffer=isDeep?cloneArrayBuffer(dataView.buffer):dataView.buffer;return new dataView.constructor(buffer,dataView.byteOffset,dataView.byteLength);}/**
	     * Creates a clone of `regexp`.
	     *
	     * @private
	     * @param {Object} regexp The regexp to clone.
	     * @returns {Object} Returns the cloned regexp.
	     */function cloneRegExp(regexp){var result=new regexp.constructor(regexp.source,reFlags.exec(regexp));result.lastIndex=regexp.lastIndex;return result;}/**
	     * Creates a clone of the `symbol` object.
	     *
	     * @private
	     * @param {Object} symbol The symbol object to clone.
	     * @returns {Object} Returns the cloned symbol object.
	     */function cloneSymbol(symbol){return symbolValueOf?Object(symbolValueOf.call(symbol)):{};}/**
	     * Creates a clone of `typedArray`.
	     *
	     * @private
	     * @param {Object} typedArray The typed array to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned typed array.
	     */function cloneTypedArray(typedArray,isDeep){var buffer=isDeep?cloneArrayBuffer(typedArray.buffer):typedArray.buffer;return new typedArray.constructor(buffer,typedArray.byteOffset,typedArray.length);}/**
	     * Compares values to sort them in ascending order.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {number} Returns the sort order indicator for `value`.
	     */function compareAscending(value,other){if(value!==other){var valIsDefined=value!==undefined,valIsNull=value===null,valIsReflexive=value===value,valIsSymbol=isSymbol(value);var othIsDefined=other!==undefined,othIsNull=other===null,othIsReflexive=other===other,othIsSymbol=isSymbol(other);if(!othIsNull&&!othIsSymbol&&!valIsSymbol&&value>other||valIsSymbol&&othIsDefined&&othIsReflexive&&!othIsNull&&!othIsSymbol||valIsNull&&othIsDefined&&othIsReflexive||!valIsDefined&&othIsReflexive||!valIsReflexive){return 1;}if(!valIsNull&&!valIsSymbol&&!othIsSymbol&&value<other||othIsSymbol&&valIsDefined&&valIsReflexive&&!valIsNull&&!valIsSymbol||othIsNull&&valIsDefined&&valIsReflexive||!othIsDefined&&valIsReflexive||!othIsReflexive){return-1;}}return 0;}/**
	     * Used by `_.orderBy` to compare multiple properties of a value to another
	     * and stable sort them.
	     *
	     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
	     * specify an order of "desc" for descending or "asc" for ascending sort order
	     * of corresponding values.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {boolean[]|string[]} orders The order to sort by for each property.
	     * @returns {number} Returns the sort order indicator for `object`.
	     */function compareMultiple(object,other,orders){var index=-1,objCriteria=object.criteria,othCriteria=other.criteria,length=objCriteria.length,ordersLength=orders.length;while(++index<length){var result=compareAscending(objCriteria[index],othCriteria[index]);if(result){if(index>=ordersLength){return result;}var order=orders[index];return result*(order=='desc'?-1:1);}}// Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	// that causes it, under certain circumstances, to provide the same value for
	// `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	// for more details.
	//
	// This also ensures a stable sort in V8 and other engines.
	// See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
	return object.index-other.index;}/**
	     * Creates an array that is the composition of partially applied arguments,
	     * placeholders, and provided arguments into a single array of arguments.
	     *
	     * @private
	     * @param {Array} args The provided arguments.
	     * @param {Array} partials The arguments to prepend to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @params {boolean} [isCurried] Specify composing for a curried function.
	     * @returns {Array} Returns the new array of composed arguments.
	     */function composeArgs(args,partials,holders,isCurried){var argsIndex=-1,argsLength=args.length,holdersLength=holders.length,leftIndex=-1,leftLength=partials.length,rangeLength=nativeMax(argsLength-holdersLength,0),result=Array(leftLength+rangeLength),isUncurried=!isCurried;while(++leftIndex<leftLength){result[leftIndex]=partials[leftIndex];}while(++argsIndex<holdersLength){if(isUncurried||argsIndex<argsLength){result[holders[argsIndex]]=args[argsIndex];}}while(rangeLength--){result[leftIndex++]=args[argsIndex++];}return result;}/**
	     * This function is like `composeArgs` except that the arguments composition
	     * is tailored for `_.partialRight`.
	     *
	     * @private
	     * @param {Array} args The provided arguments.
	     * @param {Array} partials The arguments to append to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @params {boolean} [isCurried] Specify composing for a curried function.
	     * @returns {Array} Returns the new array of composed arguments.
	     */function composeArgsRight(args,partials,holders,isCurried){var argsIndex=-1,argsLength=args.length,holdersIndex=-1,holdersLength=holders.length,rightIndex=-1,rightLength=partials.length,rangeLength=nativeMax(argsLength-holdersLength,0),result=Array(rangeLength+rightLength),isUncurried=!isCurried;while(++argsIndex<rangeLength){result[argsIndex]=args[argsIndex];}var offset=argsIndex;while(++rightIndex<rightLength){result[offset+rightIndex]=partials[rightIndex];}while(++holdersIndex<holdersLength){if(isUncurried||argsIndex<argsLength){result[offset+holders[holdersIndex]]=args[argsIndex++];}}return result;}/**
	     * Copies the values of `source` to `array`.
	     *
	     * @private
	     * @param {Array} source The array to copy values from.
	     * @param {Array} [array=[]] The array to copy values to.
	     * @returns {Array} Returns `array`.
	     */function copyArray(source,array){var index=-1,length=source.length;array||(array=Array(length));while(++index<length){array[index]=source[index];}return array;}/**
	     * Copies properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy properties from.
	     * @param {Array} props The property identifiers to copy.
	     * @param {Object} [object={}] The object to copy properties to.
	     * @param {Function} [customizer] The function to customize copied values.
	     * @returns {Object} Returns `object`.
	     */function copyObject(source,props,object,customizer){var isNew=!object;object||(object={});var index=-1,length=props.length;while(++index<length){var key=props[index];var newValue=customizer?customizer(object[key],source[key],key,object,source):undefined;if(newValue===undefined){newValue=source[key];}if(isNew){baseAssignValue(object,key,newValue);}else{assignValue(object,key,newValue);}}return object;}/**
	     * Copies own symbols of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy symbols from.
	     * @param {Object} [object={}] The object to copy symbols to.
	     * @returns {Object} Returns `object`.
	     */function copySymbols(source,object){return copyObject(source,getSymbols(source),object);}/**
	     * Copies own and inherited symbols of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy symbols from.
	     * @param {Object} [object={}] The object to copy symbols to.
	     * @returns {Object} Returns `object`.
	     */function copySymbolsIn(source,object){return copyObject(source,getSymbolsIn(source),object);}/**
	     * Creates a function like `_.groupBy`.
	     *
	     * @private
	     * @param {Function} setter The function to set accumulator values.
	     * @param {Function} [initializer] The accumulator object initializer.
	     * @returns {Function} Returns the new aggregator function.
	     */function createAggregator(setter,initializer){return function(collection,iteratee){var func=isArray(collection)?arrayAggregator:baseAggregator,accumulator=initializer?initializer():{};return func(collection,setter,getIteratee(iteratee,2),accumulator);};}/**
	     * Creates a function like `_.assign`.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @returns {Function} Returns the new assigner function.
	     */function createAssigner(assigner){return baseRest(function(object,sources){var index=-1,length=sources.length,customizer=length>1?sources[length-1]:undefined,guard=length>2?sources[2]:undefined;customizer=assigner.length>3&&typeof customizer=='function'?(length--,customizer):undefined;if(guard&&isIterateeCall(sources[0],sources[1],guard)){customizer=length<3?undefined:customizer;length=1;}object=Object(object);while(++index<length){var source=sources[index];if(source){assigner(object,source,index,customizer);}}return object;});}/**
	     * Creates a `baseEach` or `baseEachRight` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */function createBaseEach(eachFunc,fromRight){return function(collection,iteratee){if(collection==null){return collection;}if(!isArrayLike(collection)){return eachFunc(collection,iteratee);}var length=collection.length,index=fromRight?length:-1,iterable=Object(collection);while(fromRight?index--:++index<length){if(iteratee(iterable[index],index,iterable)===false){break;}}return collection;};}/**
	     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */function createBaseFor(fromRight){return function(object,iteratee,keysFunc){var index=-1,iterable=Object(object),props=keysFunc(object),length=props.length;while(length--){var key=props[fromRight?length:++index];if(iteratee(iterable[key],key,iterable)===false){break;}}return object;};}/**
	     * Creates a function that wraps `func` to invoke it with the optional `this`
	     * binding of `thisArg`.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */function createBind(func,bitmask,thisArg){var isBind=bitmask&WRAP_BIND_FLAG,Ctor=createCtor(func);function wrapper(){var fn=this&&this!==root&&this instanceof wrapper?Ctor:func;return fn.apply(isBind?thisArg:this,arguments);}return wrapper;}/**
	     * Creates a function like `_.lowerFirst`.
	     *
	     * @private
	     * @param {string} methodName The name of the `String` case method to use.
	     * @returns {Function} Returns the new case function.
	     */function createCaseFirst(methodName){return function(string){string=toString(string);var strSymbols=hasUnicode(string)?stringToArray(string):undefined;var chr=strSymbols?strSymbols[0]:string.charAt(0);var trailing=strSymbols?castSlice(strSymbols,1).join(''):string.slice(1);return chr[methodName]()+trailing;};}/**
	     * Creates a function like `_.camelCase`.
	     *
	     * @private
	     * @param {Function} callback The function to combine each word.
	     * @returns {Function} Returns the new compounder function.
	     */function createCompounder(callback){return function(string){return arrayReduce(words(deburr(string).replace(reApos,'')),callback,'');};}/**
	     * Creates a function that produces an instance of `Ctor` regardless of
	     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
	     *
	     * @private
	     * @param {Function} Ctor The constructor to wrap.
	     * @returns {Function} Returns the new wrapped function.
	     */function createCtor(Ctor){return function(){// Use a `switch` statement to work with class constructors. See
	// http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
	// for more details.
	var args=arguments;switch(args.length){case 0:return new Ctor();case 1:return new Ctor(args[0]);case 2:return new Ctor(args[0],args[1]);case 3:return new Ctor(args[0],args[1],args[2]);case 4:return new Ctor(args[0],args[1],args[2],args[3]);case 5:return new Ctor(args[0],args[1],args[2],args[3],args[4]);case 6:return new Ctor(args[0],args[1],args[2],args[3],args[4],args[5]);case 7:return new Ctor(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);}var thisBinding=baseCreate(Ctor.prototype),result=Ctor.apply(thisBinding,args);// Mimic the constructor's `return` behavior.
	// See https://es5.github.io/#x13.2.2 for more details.
	return isObject(result)?result:thisBinding;};}/**
	     * Creates a function that wraps `func` to enable currying.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {number} arity The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */function createCurry(func,bitmask,arity){var Ctor=createCtor(func);function wrapper(){var length=arguments.length,args=Array(length),index=length,placeholder=getHolder(wrapper);while(index--){args[index]=arguments[index];}var holders=length<3&&args[0]!==placeholder&&args[length-1]!==placeholder?[]:replaceHolders(args,placeholder);length-=holders.length;if(length<arity){return createRecurry(func,bitmask,createHybrid,wrapper.placeholder,undefined,args,holders,undefined,undefined,arity-length);}var fn=this&&this!==root&&this instanceof wrapper?Ctor:func;return apply(fn,this,args);}return wrapper;}/**
	     * Creates a `_.find` or `_.findLast` function.
	     *
	     * @private
	     * @param {Function} findIndexFunc The function to find the collection index.
	     * @returns {Function} Returns the new find function.
	     */function createFind(findIndexFunc){return function(collection,predicate,fromIndex){var iterable=Object(collection);if(!isArrayLike(collection)){var iteratee=getIteratee(predicate,3);collection=keys(collection);predicate=function predicate(key){return iteratee(iterable[key],key,iterable);};}var index=findIndexFunc(collection,predicate,fromIndex);return index>-1?iterable[iteratee?collection[index]:index]:undefined;};}/**
	     * Creates a `_.flow` or `_.flowRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new flow function.
	     */function createFlow(fromRight){return flatRest(function(funcs){var length=funcs.length,index=length,prereq=LodashWrapper.prototype.thru;if(fromRight){funcs.reverse();}while(index--){var func=funcs[index];if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}if(prereq&&!wrapper&&getFuncName(func)=='wrapper'){var wrapper=new LodashWrapper([],true);}}index=wrapper?index:length;while(++index<length){func=funcs[index];var funcName=getFuncName(func),data=funcName=='wrapper'?getData(func):undefined;if(data&&isLaziable(data[0])&&data[1]==(WRAP_ARY_FLAG|WRAP_CURRY_FLAG|WRAP_PARTIAL_FLAG|WRAP_REARG_FLAG)&&!data[4].length&&data[9]==1){wrapper=wrapper[getFuncName(data[0])].apply(wrapper,data[3]);}else{wrapper=func.length==1&&isLaziable(func)?wrapper[funcName]():wrapper.thru(func);}}return function(){var args=arguments,value=args[0];if(wrapper&&args.length==1&&isArray(value)){return wrapper.plant(value).value();}var index=0,result=length?funcs[index].apply(this,args):value;while(++index<length){result=funcs[index].call(this,result);}return result;};});}/**
	     * Creates a function that wraps `func` to invoke it with optional `this`
	     * binding of `thisArg`, partial application, and currying.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to
	     *  the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [partialsRight] The arguments to append to those provided
	     *  to the new function.
	     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */function createHybrid(func,bitmask,thisArg,partials,holders,partialsRight,holdersRight,argPos,ary,arity){var isAry=bitmask&WRAP_ARY_FLAG,isBind=bitmask&WRAP_BIND_FLAG,isBindKey=bitmask&WRAP_BIND_KEY_FLAG,isCurried=bitmask&(WRAP_CURRY_FLAG|WRAP_CURRY_RIGHT_FLAG),isFlip=bitmask&WRAP_FLIP_FLAG,Ctor=isBindKey?undefined:createCtor(func);function wrapper(){var length=arguments.length,args=Array(length),index=length;while(index--){args[index]=arguments[index];}if(isCurried){var placeholder=getHolder(wrapper),holdersCount=countHolders(args,placeholder);}if(partials){args=composeArgs(args,partials,holders,isCurried);}if(partialsRight){args=composeArgsRight(args,partialsRight,holdersRight,isCurried);}length-=holdersCount;if(isCurried&&length<arity){var newHolders=replaceHolders(args,placeholder);return createRecurry(func,bitmask,createHybrid,wrapper.placeholder,thisArg,args,newHolders,argPos,ary,arity-length);}var thisBinding=isBind?thisArg:this,fn=isBindKey?thisBinding[func]:func;length=args.length;if(argPos){args=reorder(args,argPos);}else if(isFlip&&length>1){args.reverse();}if(isAry&&ary<length){args.length=ary;}if(this&&this!==root&&this instanceof wrapper){fn=Ctor||createCtor(fn);}return fn.apply(thisBinding,args);}return wrapper;}/**
	     * Creates a function like `_.invertBy`.
	     *
	     * @private
	     * @param {Function} setter The function to set accumulator values.
	     * @param {Function} toIteratee The function to resolve iteratees.
	     * @returns {Function} Returns the new inverter function.
	     */function createInverter(setter,toIteratee){return function(object,iteratee){return baseInverter(object,setter,toIteratee(iteratee),{});};}/**
	     * Creates a function that performs a mathematical operation on two values.
	     *
	     * @private
	     * @param {Function} operator The function to perform the operation.
	     * @param {number} [defaultValue] The value used for `undefined` arguments.
	     * @returns {Function} Returns the new mathematical operation function.
	     */function createMathOperation(operator,defaultValue){return function(value,other){var result;if(value===undefined&&other===undefined){return defaultValue;}if(value!==undefined){result=value;}if(other!==undefined){if(result===undefined){return other;}if(typeof value=='string'||typeof other=='string'){value=baseToString(value);other=baseToString(other);}else{value=baseToNumber(value);other=baseToNumber(other);}result=operator(value,other);}return result;};}/**
	     * Creates a function like `_.over`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over iteratees.
	     * @returns {Function} Returns the new over function.
	     */function createOver(arrayFunc){return flatRest(function(iteratees){iteratees=arrayMap(iteratees,baseUnary(getIteratee()));return baseRest(function(args){var thisArg=this;return arrayFunc(iteratees,function(iteratee){return apply(iteratee,thisArg,args);});});});}/**
	     * Creates the padding for `string` based on `length`. The `chars` string
	     * is truncated if the number of characters exceeds `length`.
	     *
	     * @private
	     * @param {number} length The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padding for `string`.
	     */function createPadding(length,chars){chars=chars===undefined?' ':baseToString(chars);var charsLength=chars.length;if(charsLength<2){return charsLength?baseRepeat(chars,length):chars;}var result=baseRepeat(chars,nativeCeil(length/stringSize(chars)));return hasUnicode(chars)?castSlice(stringToArray(result),0,length).join(''):result.slice(0,length);}/**
	     * Creates a function that wraps `func` to invoke it with the `this` binding
	     * of `thisArg` and `partials` prepended to the arguments it receives.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {Array} partials The arguments to prepend to those provided to
	     *  the new function.
	     * @returns {Function} Returns the new wrapped function.
	     */function createPartial(func,bitmask,thisArg,partials){var isBind=bitmask&WRAP_BIND_FLAG,Ctor=createCtor(func);function wrapper(){var argsIndex=-1,argsLength=arguments.length,leftIndex=-1,leftLength=partials.length,args=Array(leftLength+argsLength),fn=this&&this!==root&&this instanceof wrapper?Ctor:func;while(++leftIndex<leftLength){args[leftIndex]=partials[leftIndex];}while(argsLength--){args[leftIndex++]=arguments[++argsIndex];}return apply(fn,isBind?thisArg:this,args);}return wrapper;}/**
	     * Creates a `_.range` or `_.rangeRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new range function.
	     */function createRange(fromRight){return function(start,end,step){if(step&&typeof step!='number'&&isIterateeCall(start,end,step)){end=step=undefined;}// Ensure the sign of `-0` is preserved.
	start=toFinite(start);if(end===undefined){end=start;start=0;}else{end=toFinite(end);}step=step===undefined?start<end?1:-1:toFinite(step);return baseRange(start,end,step,fromRight);};}/**
	     * Creates a function that performs a relational operation on two values.
	     *
	     * @private
	     * @param {Function} operator The function to perform the operation.
	     * @returns {Function} Returns the new relational operation function.
	     */function createRelationalOperation(operator){return function(value,other){if(!(typeof value=='string'&&typeof other=='string')){value=toNumber(value);other=toNumber(other);}return operator(value,other);};}/**
	     * Creates a function that wraps `func` to continue currying.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {Function} wrapFunc The function to create the `func` wrapper.
	     * @param {*} placeholder The placeholder value.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to
	     *  the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */function createRecurry(func,bitmask,wrapFunc,placeholder,thisArg,partials,holders,argPos,ary,arity){var isCurry=bitmask&WRAP_CURRY_FLAG,newHolders=isCurry?holders:undefined,newHoldersRight=isCurry?undefined:holders,newPartials=isCurry?partials:undefined,newPartialsRight=isCurry?undefined:partials;bitmask|=isCurry?WRAP_PARTIAL_FLAG:WRAP_PARTIAL_RIGHT_FLAG;bitmask&=~(isCurry?WRAP_PARTIAL_RIGHT_FLAG:WRAP_PARTIAL_FLAG);if(!(bitmask&WRAP_CURRY_BOUND_FLAG)){bitmask&=~(WRAP_BIND_FLAG|WRAP_BIND_KEY_FLAG);}var newData=[func,bitmask,thisArg,newPartials,newHolders,newPartialsRight,newHoldersRight,argPos,ary,arity];var result=wrapFunc.apply(undefined,newData);if(isLaziable(func)){setData(result,newData);}result.placeholder=placeholder;return setWrapToString(result,func,bitmask);}/**
	     * Creates a function like `_.round`.
	     *
	     * @private
	     * @param {string} methodName The name of the `Math` method to use when rounding.
	     * @returns {Function} Returns the new round function.
	     */function createRound(methodName){var func=Math[methodName];return function(number,precision){number=toNumber(number);precision=precision==null?0:nativeMin(toInteger(precision),292);if(precision){// Shift with exponential notation to avoid floating-point issues.
	// See [MDN](https://mdn.io/round#Examples) for more details.
	var pair=(toString(number)+'e').split('e'),value=func(pair[0]+'e'+(+pair[1]+precision));pair=(toString(value)+'e').split('e');return+(pair[0]+'e'+(+pair[1]-precision));}return func(number);};}/**
	     * Creates a set object of `values`.
	     *
	     * @private
	     * @param {Array} values The values to add to the set.
	     * @returns {Object} Returns the new set.
	     */var createSet=!(Set&&1/setToArray(new Set([,-0]))[1]==INFINITY)?noop:function(values){return new Set(values);};/**
	     * Creates a `_.toPairs` or `_.toPairsIn` function.
	     *
	     * @private
	     * @param {Function} keysFunc The function to get the keys of a given object.
	     * @returns {Function} Returns the new pairs function.
	     */function createToPairs(keysFunc){return function(object){var tag=getTag(object);if(tag==mapTag){return mapToArray(object);}if(tag==setTag){return setToPairs(object);}return baseToPairs(object,keysFunc(object));};}/**
	     * Creates a function that either curries or invokes `func` with optional
	     * `this` binding and partially applied arguments.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to wrap.
	     * @param {number} bitmask The bitmask flags.
	     *    1 - `_.bind`
	     *    2 - `_.bindKey`
	     *    4 - `_.curry` or `_.curryRight` of a bound function
	     *    8 - `_.curry`
	     *   16 - `_.curryRight`
	     *   32 - `_.partial`
	     *   64 - `_.partialRight`
	     *  128 - `_.rearg`
	     *  256 - `_.ary`
	     *  512 - `_.flip`
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to be partially applied.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */function createWrap(func,bitmask,thisArg,partials,holders,argPos,ary,arity){var isBindKey=bitmask&WRAP_BIND_KEY_FLAG;if(!isBindKey&&typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}var length=partials?partials.length:0;if(!length){bitmask&=~(WRAP_PARTIAL_FLAG|WRAP_PARTIAL_RIGHT_FLAG);partials=holders=undefined;}ary=ary===undefined?ary:nativeMax(toInteger(ary),0);arity=arity===undefined?arity:toInteger(arity);length-=holders?holders.length:0;if(bitmask&WRAP_PARTIAL_RIGHT_FLAG){var partialsRight=partials,holdersRight=holders;partials=holders=undefined;}var data=isBindKey?undefined:getData(func);var newData=[func,bitmask,thisArg,partials,holders,partialsRight,holdersRight,argPos,ary,arity];if(data){mergeData(newData,data);}func=newData[0];bitmask=newData[1];thisArg=newData[2];partials=newData[3];holders=newData[4];arity=newData[9]=newData[9]===undefined?isBindKey?0:func.length:nativeMax(newData[9]-length,0);if(!arity&&bitmask&(WRAP_CURRY_FLAG|WRAP_CURRY_RIGHT_FLAG)){bitmask&=~(WRAP_CURRY_FLAG|WRAP_CURRY_RIGHT_FLAG);}if(!bitmask||bitmask==WRAP_BIND_FLAG){var result=createBind(func,bitmask,thisArg);}else if(bitmask==WRAP_CURRY_FLAG||bitmask==WRAP_CURRY_RIGHT_FLAG){result=createCurry(func,bitmask,arity);}else if((bitmask==WRAP_PARTIAL_FLAG||bitmask==(WRAP_BIND_FLAG|WRAP_PARTIAL_FLAG))&&!holders.length){result=createPartial(func,bitmask,thisArg,partials);}else{result=createHybrid.apply(undefined,newData);}var setter=data?baseSetData:setData;return setWrapToString(setter(result,newData),func,bitmask);}/**
	     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
	     * of source objects to the destination object for all destination properties
	     * that resolve to `undefined`.
	     *
	     * @private
	     * @param {*} objValue The destination value.
	     * @param {*} srcValue The source value.
	     * @param {string} key The key of the property to assign.
	     * @param {Object} object The parent object of `objValue`.
	     * @returns {*} Returns the value to assign.
	     */function customDefaultsAssignIn(objValue,srcValue,key,object){if(objValue===undefined||eq(objValue,objectProto[key])&&!hasOwnProperty.call(object,key)){return srcValue;}return objValue;}/**
	     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
	     * objects into destination objects that are passed thru.
	     *
	     * @private
	     * @param {*} objValue The destination value.
	     * @param {*} srcValue The source value.
	     * @param {string} key The key of the property to merge.
	     * @param {Object} object The parent object of `objValue`.
	     * @param {Object} source The parent object of `srcValue`.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     * @returns {*} Returns the value to assign.
	     */function customDefaultsMerge(objValue,srcValue,key,object,source,stack){if(isObject(objValue)&&isObject(srcValue)){// Recursively merge objects and arrays (susceptible to call stack limits).
	stack.set(srcValue,objValue);baseMerge(objValue,srcValue,undefined,customDefaultsMerge,stack);stack['delete'](srcValue);}return objValue;}/**
	     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
	     * objects.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @param {string} key The key of the property to inspect.
	     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
	     */function customOmitClone(value){return isPlainObject(value)?undefined:value;}/**
	     * A specialized version of `baseIsEqualDeep` for arrays with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Array} array The array to compare.
	     * @param {Array} other The other array to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} stack Tracks traversed `array` and `other` objects.
	     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	     */function equalArrays(array,other,bitmask,customizer,equalFunc,stack){var isPartial=bitmask&COMPARE_PARTIAL_FLAG,arrLength=array.length,othLength=other.length;if(arrLength!=othLength&&!(isPartial&&othLength>arrLength)){return false;}// Assume cyclic values are equal.
	var stacked=stack.get(array);if(stacked&&stack.get(other)){return stacked==other;}var index=-1,result=true,seen=bitmask&COMPARE_UNORDERED_FLAG?new SetCache():undefined;stack.set(array,other);stack.set(other,array);// Ignore non-index properties.
	while(++index<arrLength){var arrValue=array[index],othValue=other[index];if(customizer){var compared=isPartial?customizer(othValue,arrValue,index,other,array,stack):customizer(arrValue,othValue,index,array,other,stack);}if(compared!==undefined){if(compared){continue;}result=false;break;}// Recursively compare arrays (susceptible to call stack limits).
	if(seen){if(!arraySome(other,function(othValue,othIndex){if(!cacheHas(seen,othIndex)&&(arrValue===othValue||equalFunc(arrValue,othValue,bitmask,customizer,stack))){return seen.push(othIndex);}})){result=false;break;}}else if(!(arrValue===othValue||equalFunc(arrValue,othValue,bitmask,customizer,stack))){result=false;break;}}stack['delete'](array);stack['delete'](other);return result;}/**
	     * A specialized version of `baseIsEqualDeep` for comparing objects of
	     * the same `toStringTag`.
	     *
	     * **Note:** This function only supports comparing values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {string} tag The `toStringTag` of the objects to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} stack Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */function equalByTag(object,other,tag,bitmask,customizer,equalFunc,stack){switch(tag){case dataViewTag:if(object.byteLength!=other.byteLength||object.byteOffset!=other.byteOffset){return false;}object=object.buffer;other=other.buffer;case arrayBufferTag:if(object.byteLength!=other.byteLength||!equalFunc(new Uint8Array(object),new Uint8Array(other))){return false;}return true;case boolTag:case dateTag:case numberTag:// Coerce booleans to `1` or `0` and dates to milliseconds.
	// Invalid dates are coerced to `NaN`.
	return eq(+object,+other);case errorTag:return object.name==other.name&&object.message==other.message;case regexpTag:case stringTag:// Coerce regexes to strings and treat strings, primitives and objects,
	// as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
	// for more details.
	return object==other+'';case mapTag:var convert=mapToArray;case setTag:var isPartial=bitmask&COMPARE_PARTIAL_FLAG;convert||(convert=setToArray);if(object.size!=other.size&&!isPartial){return false;}// Assume cyclic values are equal.
	var stacked=stack.get(object);if(stacked){return stacked==other;}bitmask|=COMPARE_UNORDERED_FLAG;// Recursively compare objects (susceptible to call stack limits).
	stack.set(object,other);var result=equalArrays(convert(object),convert(other),bitmask,customizer,equalFunc,stack);stack['delete'](object);return result;case symbolTag:if(symbolValueOf){return symbolValueOf.call(object)==symbolValueOf.call(other);}}return false;}/**
	     * A specialized version of `baseIsEqualDeep` for objects with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} stack Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */function equalObjects(object,other,bitmask,customizer,equalFunc,stack){var isPartial=bitmask&COMPARE_PARTIAL_FLAG,objProps=getAllKeys(object),objLength=objProps.length,othProps=getAllKeys(other),othLength=othProps.length;if(objLength!=othLength&&!isPartial){return false;}var index=objLength;while(index--){var key=objProps[index];if(!(isPartial?key in other:hasOwnProperty.call(other,key))){return false;}}// Assume cyclic values are equal.
	var stacked=stack.get(object);if(stacked&&stack.get(other)){return stacked==other;}var result=true;stack.set(object,other);stack.set(other,object);var skipCtor=isPartial;while(++index<objLength){key=objProps[index];var objValue=object[key],othValue=other[key];if(customizer){var compared=isPartial?customizer(othValue,objValue,key,other,object,stack):customizer(objValue,othValue,key,object,other,stack);}// Recursively compare objects (susceptible to call stack limits).
	if(!(compared===undefined?objValue===othValue||equalFunc(objValue,othValue,bitmask,customizer,stack):compared)){result=false;break;}skipCtor||(skipCtor=key=='constructor');}if(result&&!skipCtor){var objCtor=object.constructor,othCtor=other.constructor;// Non `Object` object instances with different constructors are not equal.
	if(objCtor!=othCtor&&'constructor'in object&&'constructor'in other&&!(typeof objCtor=='function'&&objCtor instanceof objCtor&&typeof othCtor=='function'&&othCtor instanceof othCtor)){result=false;}}stack['delete'](object);stack['delete'](other);return result;}/**
	     * A specialized version of `baseRest` which flattens the rest array.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @returns {Function} Returns the new function.
	     */function flatRest(func){return setToString(overRest(func,undefined,flatten),func+'');}/**
	     * Creates an array of own enumerable property names and symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names and symbols.
	     */function getAllKeys(object){return baseGetAllKeys(object,keys,getSymbols);}/**
	     * Creates an array of own and inherited enumerable property names and
	     * symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names and symbols.
	     */function getAllKeysIn(object){return baseGetAllKeys(object,keysIn,getSymbolsIn);}/**
	     * Gets metadata for `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {*} Returns the metadata for `func`.
	     */var getData=!metaMap?noop:function(func){return metaMap.get(func);};/**
	     * Gets the name of `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {string} Returns the function name.
	     */function getFuncName(func){var result=func.name+'',array=realNames[result],length=hasOwnProperty.call(realNames,result)?array.length:0;while(length--){var data=array[length],otherFunc=data.func;if(otherFunc==null||otherFunc==func){return data.name;}}return result;}/**
	     * Gets the argument placeholder value for `func`.
	     *
	     * @private
	     * @param {Function} func The function to inspect.
	     * @returns {*} Returns the placeholder value.
	     */function getHolder(func){var object=hasOwnProperty.call(lodash,'placeholder')?lodash:func;return object.placeholder;}/**
	     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
	     * this function returns the custom method, otherwise it returns `baseIteratee`.
	     * If arguments are provided, the chosen function is invoked with them and
	     * its result is returned.
	     *
	     * @private
	     * @param {*} [value] The value to convert to an iteratee.
	     * @param {number} [arity] The arity of the created iteratee.
	     * @returns {Function} Returns the chosen function or its result.
	     */function getIteratee(){var result=lodash.iteratee||iteratee;result=result===iteratee?baseIteratee:result;return arguments.length?result(arguments[0],arguments[1]):result;}/**
	     * Gets the data for `map`.
	     *
	     * @private
	     * @param {Object} map The map to query.
	     * @param {string} key The reference key.
	     * @returns {*} Returns the map data.
	     */function getMapData(map,key){var data=map.__data__;return isKeyable(key)?data[typeof key=='string'?'string':'hash']:data.map;}/**
	     * Gets the property names, values, and compare flags of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the match data of `object`.
	     */function getMatchData(object){var result=keys(object),length=result.length;while(length--){var key=result[length],value=object[key];result[length]=[key,value,isStrictComparable(value)];}return result;}/**
	     * Gets the native function at `key` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {string} key The key of the method to get.
	     * @returns {*} Returns the function if it's native, else `undefined`.
	     */function getNative(object,key){var value=getValue(object,key);return baseIsNative(value)?value:undefined;}/**
	     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the raw `toStringTag`.
	     */function getRawTag(value){var isOwn=hasOwnProperty.call(value,symToStringTag),tag=value[symToStringTag];try{value[symToStringTag]=undefined;var unmasked=true;}catch(e){}var result=nativeObjectToString.call(value);if(unmasked){if(isOwn){value[symToStringTag]=tag;}else{delete value[symToStringTag];}}return result;}/**
	     * Creates an array of the own enumerable symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */var getSymbols=!nativeGetSymbols?stubArray:function(object){if(object==null){return[];}object=Object(object);return arrayFilter(nativeGetSymbols(object),function(symbol){return propertyIsEnumerable.call(object,symbol);});};/**
	     * Creates an array of the own and inherited enumerable symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */var getSymbolsIn=!nativeGetSymbols?stubArray:function(object){var result=[];while(object){arrayPush(result,getSymbols(object));object=getPrototype(object);}return result;};/**
	     * Gets the `toStringTag` of `value`.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the `toStringTag`.
	     */var getTag=baseGetTag;// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
	if(DataView&&getTag(new DataView(new ArrayBuffer(1)))!=dataViewTag||Map&&getTag(new Map())!=mapTag||Promise&&getTag(Promise.resolve())!=promiseTag||Set&&getTag(new Set())!=setTag||WeakMap&&getTag(new WeakMap())!=weakMapTag){getTag=function getTag(value){var result=baseGetTag(value),Ctor=result==objectTag?value.constructor:undefined,ctorString=Ctor?toSource(Ctor):'';if(ctorString){switch(ctorString){case dataViewCtorString:return dataViewTag;case mapCtorString:return mapTag;case promiseCtorString:return promiseTag;case setCtorString:return setTag;case weakMapCtorString:return weakMapTag;}}return result;};}/**
	     * Gets the view, applying any `transforms` to the `start` and `end` positions.
	     *
	     * @private
	     * @param {number} start The start of the view.
	     * @param {number} end The end of the view.
	     * @param {Array} transforms The transformations to apply to the view.
	     * @returns {Object} Returns an object containing the `start` and `end`
	     *  positions of the view.
	     */function getView(start,end,transforms){var index=-1,length=transforms.length;while(++index<length){var data=transforms[index],size=data.size;switch(data.type){case'drop':start+=size;break;case'dropRight':end-=size;break;case'take':end=nativeMin(end,start+size);break;case'takeRight':start=nativeMax(start,end-size);break;}}return{'start':start,'end':end};}/**
	     * Extracts wrapper details from the `source` body comment.
	     *
	     * @private
	     * @param {string} source The source to inspect.
	     * @returns {Array} Returns the wrapper details.
	     */function getWrapDetails(source){var match=source.match(reWrapDetails);return match?match[1].split(reSplitDetails):[];}/**
	     * Checks if `path` exists on `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @param {Function} hasFunc The function to check properties.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     */function hasPath(object,path,hasFunc){path=castPath(path,object);var index=-1,length=path.length,result=false;while(++index<length){var key=toKey(path[index]);if(!(result=object!=null&&hasFunc(object,key))){break;}object=object[key];}if(result||++index!=length){return result;}length=object==null?0:object.length;return!!length&&isLength(length)&&isIndex(key,length)&&(isArray(object)||isArguments(object));}/**
	     * Initializes an array clone.
	     *
	     * @private
	     * @param {Array} array The array to clone.
	     * @returns {Array} Returns the initialized clone.
	     */function initCloneArray(array){var length=array.length,result=new array.constructor(length);// Add properties assigned by `RegExp#exec`.
	if(length&&typeof array[0]=='string'&&hasOwnProperty.call(array,'index')){result.index=array.index;result.input=array.input;}return result;}/**
	     * Initializes an object clone.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @returns {Object} Returns the initialized clone.
	     */function initCloneObject(object){return typeof object.constructor=='function'&&!isPrototype(object)?baseCreate(getPrototype(object)):{};}/**
	     * Initializes an object clone based on its `toStringTag`.
	     *
	     * **Note:** This function only supports cloning values with tags of
	     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @param {string} tag The `toStringTag` of the object to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the initialized clone.
	     */function initCloneByTag(object,tag,isDeep){var Ctor=object.constructor;switch(tag){case arrayBufferTag:return cloneArrayBuffer(object);case boolTag:case dateTag:return new Ctor(+object);case dataViewTag:return cloneDataView(object,isDeep);case float32Tag:case float64Tag:case int8Tag:case int16Tag:case int32Tag:case uint8Tag:case uint8ClampedTag:case uint16Tag:case uint32Tag:return cloneTypedArray(object,isDeep);case mapTag:return new Ctor();case numberTag:case stringTag:return new Ctor(object);case regexpTag:return cloneRegExp(object);case setTag:return new Ctor();case symbolTag:return cloneSymbol(object);}}/**
	     * Inserts wrapper `details` in a comment at the top of the `source` body.
	     *
	     * @private
	     * @param {string} source The source to modify.
	     * @returns {Array} details The details to insert.
	     * @returns {string} Returns the modified source.
	     */function insertWrapDetails(source,details){var length=details.length;if(!length){return source;}var lastIndex=length-1;details[lastIndex]=(length>1?'& ':'')+details[lastIndex];details=details.join(length>2?', ':' ');return source.replace(reWrapComment,'{\n/* [wrapped with '+details+'] */\n');}/**
	     * Checks if `value` is a flattenable `arguments` object or array.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
	     */function isFlattenable(value){return isArray(value)||isArguments(value)||!!(spreadableSymbol&&value&&value[spreadableSymbol]);}/**
	     * Checks if `value` is a valid array-like index.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	     */function isIndex(value,length){var type=typeof value==='undefined'?'undefined':_typeof(value);length=length==null?MAX_SAFE_INTEGER:length;return!!length&&(type=='number'||type!='symbol'&&reIsUint.test(value))&&value>-1&&value%1==0&&value<length;}/**
	     * Checks if the given arguments are from an iteratee call.
	     *
	     * @private
	     * @param {*} value The potential iteratee value argument.
	     * @param {*} index The potential iteratee index or key argument.
	     * @param {*} object The potential iteratee object argument.
	     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	     *  else `false`.
	     */function isIterateeCall(value,index,object){if(!isObject(object)){return false;}var type=typeof index==='undefined'?'undefined':_typeof(index);if(type=='number'?isArrayLike(object)&&isIndex(index,object.length):type=='string'&&index in object){return eq(object[index],value);}return false;}/**
	     * Checks if `value` is a property name and not a property path.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	     */function isKey(value,object){if(isArray(value)){return false;}var type=typeof value==='undefined'?'undefined':_typeof(value);if(type=='number'||type=='symbol'||type=='boolean'||value==null||isSymbol(value)){return true;}return reIsPlainProp.test(value)||!reIsDeepProp.test(value)||object!=null&&value in Object(object);}/**
	     * Checks if `value` is suitable for use as unique object key.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	     */function isKeyable(value){var type=typeof value==='undefined'?'undefined':_typeof(value);return type=='string'||type=='number'||type=='symbol'||type=='boolean'?value!=='__proto__':value===null;}/**
	     * Checks if `func` has a lazy counterpart.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
	     *  else `false`.
	     */function isLaziable(func){var funcName=getFuncName(func),other=lodash[funcName];if(typeof other!='function'||!(funcName in LazyWrapper.prototype)){return false;}if(func===other){return true;}var data=getData(other);return!!data&&func===data[0];}/**
	     * Checks if `func` has its source masked.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	     */function isMasked(func){return!!maskSrcKey&&maskSrcKey in func;}/**
	     * Checks if `func` is capable of being masked.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
	     */var isMaskable=coreJsData?isFunction:stubFalse;/**
	     * Checks if `value` is likely a prototype object.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	     */function isPrototype(value){var Ctor=value&&value.constructor,proto=typeof Ctor=='function'&&Ctor.prototype||objectProto;return value===proto;}/**
	     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` if suitable for strict
	     *  equality comparisons, else `false`.
	     */function isStrictComparable(value){return value===value&&!isObject(value);}/**
	     * A specialized version of `matchesProperty` for source values suitable
	     * for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {string} key The key of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     */function matchesStrictComparable(key,srcValue){return function(object){if(object==null){return false;}return object[key]===srcValue&&(srcValue!==undefined||key in Object(object));};}/**
	     * A specialized version of `_.memoize` which clears the memoized function's
	     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
	     *
	     * @private
	     * @param {Function} func The function to have its output memoized.
	     * @returns {Function} Returns the new memoized function.
	     */function memoizeCapped(func){var result=memoize(func,function(key){if(cache.size===MAX_MEMOIZE_SIZE){cache.clear();}return key;});var cache=result.cache;return result;}/**
	     * Merges the function metadata of `source` into `data`.
	     *
	     * Merging metadata reduces the number of wrappers used to invoke a function.
	     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
	     * may be applied regardless of execution order. Methods like `_.ary` and
	     * `_.rearg` modify function arguments, making the order in which they are
	     * executed important, preventing the merging of metadata. However, we make
	     * an exception for a safe combined case where curried functions have `_.ary`
	     * and or `_.rearg` applied.
	     *
	     * @private
	     * @param {Array} data The destination metadata.
	     * @param {Array} source The source metadata.
	     * @returns {Array} Returns `data`.
	     */function mergeData(data,source){var bitmask=data[1],srcBitmask=source[1],newBitmask=bitmask|srcBitmask,isCommon=newBitmask<(WRAP_BIND_FLAG|WRAP_BIND_KEY_FLAG|WRAP_ARY_FLAG);var isCombo=srcBitmask==WRAP_ARY_FLAG&&bitmask==WRAP_CURRY_FLAG||srcBitmask==WRAP_ARY_FLAG&&bitmask==WRAP_REARG_FLAG&&data[7].length<=source[8]||srcBitmask==(WRAP_ARY_FLAG|WRAP_REARG_FLAG)&&source[7].length<=source[8]&&bitmask==WRAP_CURRY_FLAG;// Exit early if metadata can't be merged.
	if(!(isCommon||isCombo)){return data;}// Use source `thisArg` if available.
	if(srcBitmask&WRAP_BIND_FLAG){data[2]=source[2];// Set when currying a bound function.
	newBitmask|=bitmask&WRAP_BIND_FLAG?0:WRAP_CURRY_BOUND_FLAG;}// Compose partial arguments.
	var value=source[3];if(value){var partials=data[3];data[3]=partials?composeArgs(partials,value,source[4]):value;data[4]=partials?replaceHolders(data[3],PLACEHOLDER):source[4];}// Compose partial right arguments.
	value=source[5];if(value){partials=data[5];data[5]=partials?composeArgsRight(partials,value,source[6]):value;data[6]=partials?replaceHolders(data[5],PLACEHOLDER):source[6];}// Use source `argPos` if available.
	value=source[7];if(value){data[7]=value;}// Use source `ary` if it's smaller.
	if(srcBitmask&WRAP_ARY_FLAG){data[8]=data[8]==null?source[8]:nativeMin(data[8],source[8]);}// Use source `arity` if one is not provided.
	if(data[9]==null){data[9]=source[9];}// Use source `func` and merge bitmasks.
	data[0]=source[0];data[1]=newBitmask;return data;}/**
	     * This function is like
	     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	     * except that it includes inherited enumerable properties.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */function nativeKeysIn(object){var result=[];if(object!=null){for(var key in Object(object)){result.push(key);}}return result;}/**
	     * Converts `value` to a string using `Object.prototype.toString`.
	     *
	     * @private
	     * @param {*} value The value to convert.
	     * @returns {string} Returns the converted string.
	     */function objectToString(value){return nativeObjectToString.call(value);}/**
	     * A specialized version of `baseRest` which transforms the rest array.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @param {Function} transform The rest array transform.
	     * @returns {Function} Returns the new function.
	     */function overRest(func,start,transform){start=nativeMax(start===undefined?func.length-1:start,0);return function(){var args=arguments,index=-1,length=nativeMax(args.length-start,0),array=Array(length);while(++index<length){array[index]=args[start+index];}index=-1;var otherArgs=Array(start+1);while(++index<start){otherArgs[index]=args[index];}otherArgs[start]=transform(array);return apply(func,this,otherArgs);};}/**
	     * Gets the parent value at `path` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} path The path to get the parent value of.
	     * @returns {*} Returns the parent value.
	     */function parent(object,path){return path.length<2?object:baseGet(object,baseSlice(path,0,-1));}/**
	     * Reorder `array` according to the specified indexes where the element at
	     * the first index is assigned as the first element, the element at
	     * the second index is assigned as the second element, and so on.
	     *
	     * @private
	     * @param {Array} array The array to reorder.
	     * @param {Array} indexes The arranged array indexes.
	     * @returns {Array} Returns `array`.
	     */function reorder(array,indexes){var arrLength=array.length,length=nativeMin(indexes.length,arrLength),oldArray=copyArray(array);while(length--){var index=indexes[length];array[length]=isIndex(index,arrLength)?oldArray[index]:undefined;}return array;}/**
	     * Sets metadata for `func`.
	     *
	     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
	     * period of time, it will trip its breaker and transition to an identity
	     * function to avoid garbage collection pauses in V8. See
	     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
	     * for more details.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */var setData=shortOut(baseSetData);/**
	     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @returns {number|Object} Returns the timer id or timeout object.
	     */var setTimeout=ctxSetTimeout||function(func,wait){return root.setTimeout(func,wait);};/**
	     * Sets the `toString` method of `func` to return `string`.
	     *
	     * @private
	     * @param {Function} func The function to modify.
	     * @param {Function} string The `toString` result.
	     * @returns {Function} Returns `func`.
	     */var setToString=shortOut(baseSetToString);/**
	     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
	     * with wrapper details in a comment at the top of the source body.
	     *
	     * @private
	     * @param {Function} wrapper The function to modify.
	     * @param {Function} reference The reference function.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @returns {Function} Returns `wrapper`.
	     */function setWrapToString(wrapper,reference,bitmask){var source=reference+'';return setToString(wrapper,insertWrapDetails(source,updateWrapDetails(getWrapDetails(source),bitmask)));}/**
	     * Creates a function that'll short out and invoke `identity` instead
	     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
	     * milliseconds.
	     *
	     * @private
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new shortable function.
	     */function shortOut(func){var count=0,lastCalled=0;return function(){var stamp=nativeNow(),remaining=HOT_SPAN-(stamp-lastCalled);lastCalled=stamp;if(remaining>0){if(++count>=HOT_COUNT){return arguments[0];}}else{count=0;}return func.apply(undefined,arguments);};}/**
	     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
	     *
	     * @private
	     * @param {Array} array The array to shuffle.
	     * @param {number} [size=array.length] The size of `array`.
	     * @returns {Array} Returns `array`.
	     */function shuffleSelf(array,size){var index=-1,length=array.length,lastIndex=length-1;size=size===undefined?length:size;while(++index<size){var rand=baseRandom(index,lastIndex),value=array[rand];array[rand]=array[index];array[index]=value;}array.length=size;return array;}/**
	     * Converts `string` to a property path array.
	     *
	     * @private
	     * @param {string} string The string to convert.
	     * @returns {Array} Returns the property path array.
	     */var stringToPath=memoizeCapped(function(string){var result=[];if(string.charCodeAt(0)===46/* . */){result.push('');}string.replace(rePropName,function(match,number,quote,subString){result.push(quote?subString.replace(reEscapeChar,'$1'):number||match);});return result;});/**
	     * Converts `value` to a string key if it's not a string or symbol.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {string|symbol} Returns the key.
	     */function toKey(value){if(typeof value=='string'||isSymbol(value)){return value;}var result=value+'';return result=='0'&&1/value==-INFINITY?'-0':result;}/**
	     * Converts `func` to its source code.
	     *
	     * @private
	     * @param {Function} func The function to convert.
	     * @returns {string} Returns the source code.
	     */function toSource(func){if(func!=null){try{return funcToString.call(func);}catch(e){}try{return func+'';}catch(e){}}return'';}/**
	     * Updates wrapper `details` based on `bitmask` flags.
	     *
	     * @private
	     * @returns {Array} details The details to modify.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @returns {Array} Returns `details`.
	     */function updateWrapDetails(details,bitmask){arrayEach(wrapFlags,function(pair){var value='_.'+pair[0];if(bitmask&pair[1]&&!arrayIncludes(details,value)){details.push(value);}});return details.sort();}/**
	     * Creates a clone of `wrapper`.
	     *
	     * @private
	     * @param {Object} wrapper The wrapper to clone.
	     * @returns {Object} Returns the cloned wrapper.
	     */function wrapperClone(wrapper){if(wrapper instanceof LazyWrapper){return wrapper.clone();}var result=new LodashWrapper(wrapper.__wrapped__,wrapper.__chain__);result.__actions__=copyArray(wrapper.__actions__);result.__index__=wrapper.__index__;result.__values__=wrapper.__values__;return result;}/*------------------------------------------------------------------------*//**
	     * Creates an array of elements split into groups the length of `size`.
	     * If `array` can't be split evenly, the final chunk will be the remaining
	     * elements.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to process.
	     * @param {number} [size=1] The length of each chunk
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the new array of chunks.
	     * @example
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 2);
	     * // => [['a', 'b'], ['c', 'd']]
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 3);
	     * // => [['a', 'b', 'c'], ['d']]
	     */function chunk(array,size,guard){if(guard?isIterateeCall(array,size,guard):size===undefined){size=1;}else{size=nativeMax(toInteger(size),0);}var length=array==null?0:array.length;if(!length||size<1){return[];}var index=0,resIndex=0,result=Array(nativeCeil(length/size));while(index<length){result[resIndex++]=baseSlice(array,index,index+=size);}return result;}/**
	     * Creates an array with all falsey values removed. The values `false`, `null`,
	     * `0`, `""`, `undefined`, and `NaN` are falsey.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to compact.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.compact([0, 1, false, 2, '', 3]);
	     * // => [1, 2, 3]
	     */function compact(array){var index=-1,length=array==null?0:array.length,resIndex=0,result=[];while(++index<length){var value=array[index];if(value){result[resIndex++]=value;}}return result;}/**
	     * Creates a new array concatenating `array` with any additional arrays
	     * and/or values.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to concatenate.
	     * @param {...*} [values] The values to concatenate.
	     * @returns {Array} Returns the new concatenated array.
	     * @example
	     *
	     * var array = [1];
	     * var other = _.concat(array, 2, [3], [[4]]);
	     *
	     * console.log(other);
	     * // => [1, 2, 3, [4]]
	     *
	     * console.log(array);
	     * // => [1]
	     */function concat(){var length=arguments.length;if(!length){return[];}var args=Array(length-1),array=arguments[0],index=length;while(index--){args[index-1]=arguments[index];}return arrayPush(isArray(array)?copyArray(array):[array],baseFlatten(args,1));}/**
	     * Creates an array of `array` values not included in the other given arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. The order and references of result values are
	     * determined by the first array.
	     *
	     * **Note:** Unlike `_.pullAll`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.without, _.xor
	     * @example
	     *
	     * _.difference([2, 1], [2, 3]);
	     * // => [1]
	     */var difference=baseRest(function(array,values){return isArrayLikeObject(array)?baseDifference(array,baseFlatten(values,1,isArrayLikeObject,true)):[];});/**
	     * This method is like `_.difference` except that it accepts `iteratee` which
	     * is invoked for each element of `array` and `values` to generate the criterion
	     * by which they're compared. The order and references of result values are
	     * determined by the first array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
	     * // => [{ 'x': 2 }]
	     */var differenceBy=baseRest(function(array,values){var iteratee=last(values);if(isArrayLikeObject(iteratee)){iteratee=undefined;}return isArrayLikeObject(array)?baseDifference(array,baseFlatten(values,1,isArrayLikeObject,true),getIteratee(iteratee,2)):[];});/**
	     * This method is like `_.difference` except that it accepts `comparator`
	     * which is invoked to compare elements of `array` to `values`. The order and
	     * references of result values are determined by the first array. The comparator
	     * is invoked with two arguments: (arrVal, othVal).
	     *
	     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     *
	     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
	     * // => [{ 'x': 2, 'y': 1 }]
	     */var differenceWith=baseRest(function(array,values){var comparator=last(values);if(isArrayLikeObject(comparator)){comparator=undefined;}return isArrayLikeObject(array)?baseDifference(array,baseFlatten(values,1,isArrayLikeObject,true),undefined,comparator):[];});/**
	     * Creates a slice of `array` with `n` elements dropped from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.drop([1, 2, 3]);
	     * // => [2, 3]
	     *
	     * _.drop([1, 2, 3], 2);
	     * // => [3]
	     *
	     * _.drop([1, 2, 3], 5);
	     * // => []
	     *
	     * _.drop([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */function drop(array,n,guard){var length=array==null?0:array.length;if(!length){return[];}n=guard||n===undefined?1:toInteger(n);return baseSlice(array,n<0?0:n,length);}/**
	     * Creates a slice of `array` with `n` elements dropped from the end.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRight([1, 2, 3]);
	     * // => [1, 2]
	     *
	     * _.dropRight([1, 2, 3], 2);
	     * // => [1]
	     *
	     * _.dropRight([1, 2, 3], 5);
	     * // => []
	     *
	     * _.dropRight([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */function dropRight(array,n,guard){var length=array==null?0:array.length;if(!length){return[];}n=guard||n===undefined?1:toInteger(n);n=length-n;return baseSlice(array,0,n<0?0:n);}/**
	     * Creates a slice of `array` excluding elements dropped from the end.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.dropRightWhile(users, function(o) { return !o.active; });
	     * // => objects for ['barney']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.dropRightWhile(users, ['active', false]);
	     * // => objects for ['barney']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.dropRightWhile(users, 'active');
	     * // => objects for ['barney', 'fred', 'pebbles']
	     */function dropRightWhile(array,predicate){return array&&array.length?baseWhile(array,getIteratee(predicate,3),true,true):[];}/**
	     * Creates a slice of `array` excluding elements dropped from the beginning.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.dropWhile(users, function(o) { return !o.active; });
	     * // => objects for ['pebbles']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.dropWhile(users, { 'user': 'barney', 'active': false });
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.dropWhile(users, ['active', false]);
	     * // => objects for ['pebbles']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.dropWhile(users, 'active');
	     * // => objects for ['barney', 'fred', 'pebbles']
	     */function dropWhile(array,predicate){return array&&array.length?baseWhile(array,getIteratee(predicate,3),true):[];}/**
	     * Fills elements of `array` with `value` from `start` up to, but not
	     * including, `end`.
	     *
	     * **Note:** This method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Array
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.fill(array, 'a');
	     * console.log(array);
	     * // => ['a', 'a', 'a']
	     *
	     * _.fill(Array(3), 2);
	     * // => [2, 2, 2]
	     *
	     * _.fill([4, 6, 8, 10], '*', 1, 3);
	     * // => [4, '*', '*', 10]
	     */function fill(array,value,start,end){var length=array==null?0:array.length;if(!length){return[];}if(start&&typeof start!='number'&&isIterateeCall(array,value,start)){start=0;end=length;}return baseFill(array,value,start,end);}/**
	     * This method is like `_.find` except that it returns the index of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.findIndex(users, function(o) { return o.user == 'barney'; });
	     * // => 0
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findIndex(users, { 'user': 'fred', 'active': false });
	     * // => 1
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findIndex(users, ['active', false]);
	     * // => 0
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findIndex(users, 'active');
	     * // => 2
	     */function findIndex(array,predicate,fromIndex){var length=array==null?0:array.length;if(!length){return-1;}var index=fromIndex==null?0:toInteger(fromIndex);if(index<0){index=nativeMax(length+index,0);}return baseFindIndex(array,getIteratee(predicate,3),index);}/**
	     * This method is like `_.findIndex` except that it iterates over elements
	     * of `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=array.length-1] The index to search from.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
	     * // => 2
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
	     * // => 0
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findLastIndex(users, ['active', false]);
	     * // => 2
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findLastIndex(users, 'active');
	     * // => 0
	     */function findLastIndex(array,predicate,fromIndex){var length=array==null?0:array.length;if(!length){return-1;}var index=length-1;if(fromIndex!==undefined){index=toInteger(fromIndex);index=fromIndex<0?nativeMax(length+index,0):nativeMin(index,length-1);}return baseFindIndex(array,getIteratee(predicate,3),index,true);}/**
	     * Flattens `array` a single level deep.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flatten([1, [2, [3, [4]], 5]]);
	     * // => [1, 2, [3, [4]], 5]
	     */function flatten(array){var length=array==null?0:array.length;return length?baseFlatten(array,1):[];}/**
	     * Recursively flattens `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flattenDeep([1, [2, [3, [4]], 5]]);
	     * // => [1, 2, 3, 4, 5]
	     */function flattenDeep(array){var length=array==null?0:array.length;return length?baseFlatten(array,INFINITY):[];}/**
	     * Recursively flatten `array` up to `depth` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.4.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @param {number} [depth=1] The maximum recursion depth.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * var array = [1, [2, [3, [4]], 5]];
	     *
	     * _.flattenDepth(array, 1);
	     * // => [1, 2, [3, [4]], 5]
	     *
	     * _.flattenDepth(array, 2);
	     * // => [1, 2, 3, [4], 5]
	     */function flattenDepth(array,depth){var length=array==null?0:array.length;if(!length){return[];}depth=depth===undefined?1:toInteger(depth);return baseFlatten(array,depth);}/**
	     * The inverse of `_.toPairs`; this method returns an object composed
	     * from key-value `pairs`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} pairs The key-value pairs.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.fromPairs([['a', 1], ['b', 2]]);
	     * // => { 'a': 1, 'b': 2 }
	     */function fromPairs(pairs){var index=-1,length=pairs==null?0:pairs.length,result={};while(++index<length){var pair=pairs[index];result[pair[0]]=pair[1];}return result;}/**
	     * Gets the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @alias first
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the first element of `array`.
	     * @example
	     *
	     * _.head([1, 2, 3]);
	     * // => 1
	     *
	     * _.head([]);
	     * // => undefined
	     */function head(array){return array&&array.length?array[0]:undefined;}/**
	     * Gets the index at which the first occurrence of `value` is found in `array`
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. If `fromIndex` is negative, it's used as the
	     * offset from the end of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.indexOf([1, 2, 1, 2], 2);
	     * // => 1
	     *
	     * // Search from the `fromIndex`.
	     * _.indexOf([1, 2, 1, 2], 2, 2);
	     * // => 3
	     */function indexOf(array,value,fromIndex){var length=array==null?0:array.length;if(!length){return-1;}var index=fromIndex==null?0:toInteger(fromIndex);if(index<0){index=nativeMax(length+index,0);}return baseIndexOf(array,value,index);}/**
	     * Gets all but the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.initial([1, 2, 3]);
	     * // => [1, 2]
	     */function initial(array){var length=array==null?0:array.length;return length?baseSlice(array,0,-1):[];}/**
	     * Creates an array of unique values that are included in all given arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. The order and references of result values are
	     * determined by the first array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * _.intersection([2, 1], [2, 3]);
	     * // => [2]
	     */var intersection=baseRest(function(arrays){var mapped=arrayMap(arrays,castArrayLikeObject);return mapped.length&&mapped[0]===arrays[0]?baseIntersection(mapped):[];});/**
	     * This method is like `_.intersection` except that it accepts `iteratee`
	     * which is invoked for each element of each `arrays` to generate the criterion
	     * by which they're compared. The order and references of result values are
	     * determined by the first array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [2.1]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }]
	     */var intersectionBy=baseRest(function(arrays){var iteratee=last(arrays),mapped=arrayMap(arrays,castArrayLikeObject);if(iteratee===last(mapped)){iteratee=undefined;}else{mapped.pop();}return mapped.length&&mapped[0]===arrays[0]?baseIntersection(mapped,getIteratee(iteratee,2)):[];});/**
	     * This method is like `_.intersection` except that it accepts `comparator`
	     * which is invoked to compare elements of `arrays`. The order and references
	     * of result values are determined by the first array. The comparator is
	     * invoked with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.intersectionWith(objects, others, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }]
	     */var intersectionWith=baseRest(function(arrays){var comparator=last(arrays),mapped=arrayMap(arrays,castArrayLikeObject);comparator=typeof comparator=='function'?comparator:undefined;if(comparator){mapped.pop();}return mapped.length&&mapped[0]===arrays[0]?baseIntersection(mapped,undefined,comparator):[];});/**
	     * Converts all elements in `array` into a string separated by `separator`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to convert.
	     * @param {string} [separator=','] The element separator.
	     * @returns {string} Returns the joined string.
	     * @example
	     *
	     * _.join(['a', 'b', 'c'], '~');
	     * // => 'a~b~c'
	     */function join(array,separator){return array==null?'':nativeJoin.call(array,separator);}/**
	     * Gets the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the last element of `array`.
	     * @example
	     *
	     * _.last([1, 2, 3]);
	     * // => 3
	     */function last(array){var length=array==null?0:array.length;return length?array[length-1]:undefined;}/**
	     * This method is like `_.indexOf` except that it iterates over elements of
	     * `array` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=array.length-1] The index to search from.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.lastIndexOf([1, 2, 1, 2], 2);
	     * // => 3
	     *
	     * // Search from the `fromIndex`.
	     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
	     * // => 1
	     */function lastIndexOf(array,value,fromIndex){var length=array==null?0:array.length;if(!length){return-1;}var index=length;if(fromIndex!==undefined){index=toInteger(fromIndex);index=index<0?nativeMax(length+index,0):nativeMin(index,length-1);}return value===value?strictLastIndexOf(array,value,index):baseFindIndex(array,baseIsNaN,index,true);}/**
	     * Gets the element at index `n` of `array`. If `n` is negative, the nth
	     * element from the end is returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.11.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=0] The index of the element to return.
	     * @returns {*} Returns the nth element of `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'd'];
	     *
	     * _.nth(array, 1);
	     * // => 'b'
	     *
	     * _.nth(array, -2);
	     * // => 'c';
	     */function nth(array,n){return array&&array.length?baseNth(array,toInteger(n)):undefined;}/**
	     * Removes all given values from `array` using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
	     * to remove elements from an array by predicate.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...*} [values] The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
	     *
	     * _.pull(array, 'a', 'c');
	     * console.log(array);
	     * // => ['b', 'b']
	     */var pull=baseRest(pullAll);/**
	     * This method is like `_.pull` except that it accepts an array of values to remove.
	     *
	     * **Note:** Unlike `_.difference`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
	     *
	     * _.pullAll(array, ['a', 'c']);
	     * console.log(array);
	     * // => ['b', 'b']
	     */function pullAll(array,values){return array&&array.length&&values&&values.length?basePullAll(array,values):array;}/**
	     * This method is like `_.pullAll` except that it accepts `iteratee` which is
	     * invoked for each element of `array` and `values` to generate the criterion
	     * by which they're compared. The iteratee is invoked with one argument: (value).
	     *
	     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
	     *
	     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
	     * console.log(array);
	     * // => [{ 'x': 2 }]
	     */function pullAllBy(array,values,iteratee){return array&&array.length&&values&&values.length?basePullAll(array,values,getIteratee(iteratee,2)):array;}/**
	     * This method is like `_.pullAll` except that it accepts `comparator` which
	     * is invoked to compare elements of `array` to `values`. The comparator is
	     * invoked with two arguments: (arrVal, othVal).
	     *
	     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
	     *
	     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
	     * console.log(array);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
	     */function pullAllWith(array,values,comparator){return array&&array.length&&values&&values.length?basePullAll(array,values,undefined,comparator):array;}/**
	     * Removes elements from `array` corresponding to `indexes` and returns an
	     * array of removed elements.
	     *
	     * **Note:** Unlike `_.at`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'd'];
	     * var pulled = _.pullAt(array, [1, 3]);
	     *
	     * console.log(array);
	     * // => ['a', 'c']
	     *
	     * console.log(pulled);
	     * // => ['b', 'd']
	     */var pullAt=flatRest(function(array,indexes){var length=array==null?0:array.length,result=baseAt(array,indexes);basePullAt(array,arrayMap(indexes,function(index){return isIndex(index,length)?+index:index;}).sort(compareAscending));return result;});/**
	     * Removes all elements from `array` that `predicate` returns truthy for
	     * and returns an array of the removed elements. The predicate is invoked
	     * with three arguments: (value, index, array).
	     *
	     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
	     * to pull elements from an array by value.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [1, 2, 3, 4];
	     * var evens = _.remove(array, function(n) {
	     *   return n % 2 == 0;
	     * });
	     *
	     * console.log(array);
	     * // => [1, 3]
	     *
	     * console.log(evens);
	     * // => [2, 4]
	     */function remove(array,predicate){var result=[];if(!(array&&array.length)){return result;}var index=-1,indexes=[],length=array.length;predicate=getIteratee(predicate,3);while(++index<length){var value=array[index];if(predicate(value,index,array)){result.push(value);indexes.push(index);}}basePullAt(array,indexes);return result;}/**
	     * Reverses `array` so that the first element becomes the last, the second
	     * element becomes the second to last, and so on.
	     *
	     * **Note:** This method mutates `array` and is based on
	     * [`Array#reverse`](https://mdn.io/Array/reverse).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.reverse(array);
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */function reverse(array){return array==null?array:nativeReverse.call(array);}/**
	     * Creates a slice of `array` from `start` up to, but not including, `end`.
	     *
	     * **Note:** This method is used instead of
	     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
	     * returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */function slice(array,start,end){var length=array==null?0:array.length;if(!length){return[];}if(end&&typeof end!='number'&&isIterateeCall(array,start,end)){start=0;end=length;}else{start=start==null?0:toInteger(start);end=end===undefined?length:toInteger(end);}return baseSlice(array,start,end);}/**
	     * Uses a binary search to determine the lowest index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedIndex([30, 50], 40);
	     * // => 1
	     */function sortedIndex(array,value){return baseSortedIndex(array,value);}/**
	     * This method is like `_.sortedIndex` except that it accepts `iteratee`
	     * which is invoked for `value` and each element of `array` to compute their
	     * sort ranking. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * var objects = [{ 'x': 4 }, { 'x': 5 }];
	     *
	     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
	     * // => 0
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
	     * // => 0
	     */function sortedIndexBy(array,value,iteratee){return baseSortedIndexBy(array,value,getIteratee(iteratee,2));}/**
	     * This method is like `_.indexOf` except that it performs a binary
	     * search on a sorted `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
	     * // => 1
	     */function sortedIndexOf(array,value){var length=array==null?0:array.length;if(length){var index=baseSortedIndex(array,value);if(index<length&&eq(array[index],value)){return index;}}return-1;}/**
	     * This method is like `_.sortedIndex` except that it returns the highest
	     * index at which `value` should be inserted into `array` in order to
	     * maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
	     * // => 4
	     */function sortedLastIndex(array,value){return baseSortedIndex(array,value,true);}/**
	     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
	     * which is invoked for `value` and each element of `array` to compute their
	     * sort ranking. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * var objects = [{ 'x': 4 }, { 'x': 5 }];
	     *
	     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
	     * // => 1
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
	     * // => 1
	     */function sortedLastIndexBy(array,value,iteratee){return baseSortedIndexBy(array,value,getIteratee(iteratee,2),true);}/**
	     * This method is like `_.lastIndexOf` except that it performs a binary
	     * search on a sorted `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
	     * // => 3
	     */function sortedLastIndexOf(array,value){var length=array==null?0:array.length;if(length){var index=baseSortedIndex(array,value,true)-1;if(eq(array[index],value)){return index;}}return-1;}/**
	     * This method is like `_.uniq` except that it's designed and optimized
	     * for sorted arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.sortedUniq([1, 1, 2]);
	     * // => [1, 2]
	     */function sortedUniq(array){return array&&array.length?baseSortedUniq(array):[];}/**
	     * This method is like `_.uniqBy` except that it's designed and optimized
	     * for sorted arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
	     * // => [1.1, 2.3]
	     */function sortedUniqBy(array,iteratee){return array&&array.length?baseSortedUniq(array,getIteratee(iteratee,2)):[];}/**
	     * Gets all but the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.tail([1, 2, 3]);
	     * // => [2, 3]
	     */function tail(array){var length=array==null?0:array.length;return length?baseSlice(array,1,length):[];}/**
	     * Creates a slice of `array` with `n` elements taken from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.take([1, 2, 3]);
	     * // => [1]
	     *
	     * _.take([1, 2, 3], 2);
	     * // => [1, 2]
	     *
	     * _.take([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.take([1, 2, 3], 0);
	     * // => []
	     */function take(array,n,guard){if(!(array&&array.length)){return[];}n=guard||n===undefined?1:toInteger(n);return baseSlice(array,0,n<0?0:n);}/**
	     * Creates a slice of `array` with `n` elements taken from the end.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRight([1, 2, 3]);
	     * // => [3]
	     *
	     * _.takeRight([1, 2, 3], 2);
	     * // => [2, 3]
	     *
	     * _.takeRight([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.takeRight([1, 2, 3], 0);
	     * // => []
	     */function takeRight(array,n,guard){var length=array==null?0:array.length;if(!length){return[];}n=guard||n===undefined?1:toInteger(n);n=length-n;return baseSlice(array,n<0?0:n,length);}/**
	     * Creates a slice of `array` with elements taken from the end. Elements are
	     * taken until `predicate` returns falsey. The predicate is invoked with
	     * three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.takeRightWhile(users, function(o) { return !o.active; });
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
	     * // => objects for ['pebbles']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.takeRightWhile(users, ['active', false]);
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.takeRightWhile(users, 'active');
	     * // => []
	     */function takeRightWhile(array,predicate){return array&&array.length?baseWhile(array,getIteratee(predicate,3),false,true):[];}/**
	     * Creates a slice of `array` with elements taken from the beginning. Elements
	     * are taken until `predicate` returns falsey. The predicate is invoked with
	     * three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.takeWhile(users, function(o) { return !o.active; });
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.takeWhile(users, { 'user': 'barney', 'active': false });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.takeWhile(users, ['active', false]);
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.takeWhile(users, 'active');
	     * // => []
	     */function takeWhile(array,predicate){return array&&array.length?baseWhile(array,getIteratee(predicate,3)):[];}/**
	     * Creates an array of unique values, in order, from all given arrays using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.union([2], [1, 2]);
	     * // => [2, 1]
	     */var union=baseRest(function(arrays){return baseUniq(baseFlatten(arrays,1,isArrayLikeObject,true));});/**
	     * This method is like `_.union` except that it accepts `iteratee` which is
	     * invoked for each element of each `arrays` to generate the criterion by
	     * which uniqueness is computed. Result values are chosen from the first
	     * array in which the value occurs. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
	     * // => [2.1, 1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */var unionBy=baseRest(function(arrays){var iteratee=last(arrays);if(isArrayLikeObject(iteratee)){iteratee=undefined;}return baseUniq(baseFlatten(arrays,1,isArrayLikeObject,true),getIteratee(iteratee,2));});/**
	     * This method is like `_.union` except that it accepts `comparator` which
	     * is invoked to compare elements of `arrays`. Result values are chosen from
	     * the first array in which the value occurs. The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.unionWith(objects, others, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
	     */var unionWith=baseRest(function(arrays){var comparator=last(arrays);comparator=typeof comparator=='function'?comparator:undefined;return baseUniq(baseFlatten(arrays,1,isArrayLikeObject,true),undefined,comparator);});/**
	     * Creates a duplicate-free version of an array, using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons, in which only the first occurrence of each element
	     * is kept. The order of result values is determined by the order they occur
	     * in the array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.uniq([2, 1, 2]);
	     * // => [2, 1]
	     */function uniq(array){return array&&array.length?baseUniq(array):[];}/**
	     * This method is like `_.uniq` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * uniqueness is computed. The order of result values is determined by the
	     * order they occur in the array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
	     * // => [2.1, 1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */function uniqBy(array,iteratee){return array&&array.length?baseUniq(array,getIteratee(iteratee,2)):[];}/**
	     * This method is like `_.uniq` except that it accepts `comparator` which
	     * is invoked to compare elements of `array`. The order of result values is
	     * determined by the order they occur in the array.The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.uniqWith(objects, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
	     */function uniqWith(array,comparator){comparator=typeof comparator=='function'?comparator:undefined;return array&&array.length?baseUniq(array,undefined,comparator):[];}/**
	     * This method is like `_.zip` except that it accepts an array of grouped
	     * elements and creates an array regrouping the elements to their pre-zip
	     * configuration.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.2.0
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
	     * // => [['a', 1, true], ['b', 2, false]]
	     *
	     * _.unzip(zipped);
	     * // => [['a', 'b'], [1, 2], [true, false]]
	     */function unzip(array){if(!(array&&array.length)){return[];}var length=0;array=arrayFilter(array,function(group){if(isArrayLikeObject(group)){length=nativeMax(group.length,length);return true;}});return baseTimes(length,function(index){return arrayMap(array,baseProperty(index));});}/**
	     * This method is like `_.unzip` except that it accepts `iteratee` to specify
	     * how regrouped values should be combined. The iteratee is invoked with the
	     * elements of each group: (...group).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @param {Function} [iteratee=_.identity] The function to combine
	     *  regrouped values.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
	     * // => [[1, 10, 100], [2, 20, 200]]
	     *
	     * _.unzipWith(zipped, _.add);
	     * // => [3, 30, 300]
	     */function unzipWith(array,iteratee){if(!(array&&array.length)){return[];}var result=unzip(array);if(iteratee==null){return result;}return arrayMap(result,function(group){return apply(iteratee,undefined,group);});}/**
	     * Creates an array excluding all given values using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.pull`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...*} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.difference, _.xor
	     * @example
	     *
	     * _.without([2, 1, 2, 3], 1, 2);
	     * // => [3]
	     */var without=baseRest(function(array,values){return isArrayLikeObject(array)?baseDifference(array,values):[];});/**
	     * Creates an array of unique values that is the
	     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
	     * of the given arrays. The order of result values is determined by the order
	     * they occur in the arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.difference, _.without
	     * @example
	     *
	     * _.xor([2, 1], [2, 3]);
	     * // => [1, 3]
	     */var xor=baseRest(function(arrays){return baseXor(arrayFilter(arrays,isArrayLikeObject));});/**
	     * This method is like `_.xor` except that it accepts `iteratee` which is
	     * invoked for each element of each `arrays` to generate the criterion by
	     * which by which they're compared. The order of result values is determined
	     * by the order they occur in the arrays. The iteratee is invoked with one
	     * argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [1.2, 3.4]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 2 }]
	     */var xorBy=baseRest(function(arrays){var iteratee=last(arrays);if(isArrayLikeObject(iteratee)){iteratee=undefined;}return baseXor(arrayFilter(arrays,isArrayLikeObject),getIteratee(iteratee,2));});/**
	     * This method is like `_.xor` except that it accepts `comparator` which is
	     * invoked to compare elements of `arrays`. The order of result values is
	     * determined by the order they occur in the arrays. The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.xorWith(objects, others, _.isEqual);
	     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
	     */var xorWith=baseRest(function(arrays){var comparator=last(arrays);comparator=typeof comparator=='function'?comparator:undefined;return baseXor(arrayFilter(arrays,isArrayLikeObject),undefined,comparator);});/**
	     * Creates an array of grouped elements, the first of which contains the
	     * first elements of the given arrays, the second of which contains the
	     * second elements of the given arrays, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zip(['a', 'b'], [1, 2], [true, false]);
	     * // => [['a', 1, true], ['b', 2, false]]
	     */var zip=baseRest(unzip);/**
	     * This method is like `_.fromPairs` except that it accepts two arrays,
	     * one of property identifiers and one of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.4.0
	     * @category Array
	     * @param {Array} [props=[]] The property identifiers.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObject(['a', 'b'], [1, 2]);
	     * // => { 'a': 1, 'b': 2 }
	     */function zipObject(props,values){return baseZipObject(props||[],values||[],assignValue);}/**
	     * This method is like `_.zipObject` except that it supports property paths.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.1.0
	     * @category Array
	     * @param {Array} [props=[]] The property identifiers.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
	     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
	     */function zipObjectDeep(props,values){return baseZipObject(props||[],values||[],baseSet);}/**
	     * This method is like `_.zip` except that it accepts `iteratee` to specify
	     * how grouped values should be combined. The iteratee is invoked with the
	     * elements of each group: (...group).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @param {Function} [iteratee=_.identity] The function to combine
	     *  grouped values.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
	     *   return a + b + c;
	     * });
	     * // => [111, 222]
	     */var zipWith=baseRest(function(arrays){var length=arrays.length,iteratee=length>1?arrays[length-1]:undefined;iteratee=typeof iteratee=='function'?(arrays.pop(),iteratee):undefined;return unzipWith(arrays,iteratee);});/*------------------------------------------------------------------------*//**
	     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
	     * chain sequences enabled. The result of such sequences must be unwrapped
	     * with `_#value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.3.0
	     * @category Seq
	     * @param {*} value The value to wrap.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36 },
	     *   { 'user': 'fred',    'age': 40 },
	     *   { 'user': 'pebbles', 'age': 1 }
	     * ];
	     *
	     * var youngest = _
	     *   .chain(users)
	     *   .sortBy('age')
	     *   .map(function(o) {
	     *     return o.user + ' is ' + o.age;
	     *   })
	     *   .head()
	     *   .value();
	     * // => 'pebbles is 1'
	     */function chain(value){var result=lodash(value);result.__chain__=true;return result;}/**
	     * This method invokes `interceptor` and returns `value`. The interceptor
	     * is invoked with one argument; (value). The purpose of this method is to
	     * "tap into" a method chain sequence in order to modify intermediate results.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * _([1, 2, 3])
	     *  .tap(function(array) {
	     *    // Mutate input array.
	     *    array.pop();
	     *  })
	     *  .reverse()
	     *  .value();
	     * // => [2, 1]
	     */function tap(value,interceptor){interceptor(value);return value;}/**
	     * This method is like `_.tap` except that it returns the result of `interceptor`.
	     * The purpose of this method is to "pass thru" values replacing intermediate
	     * results in a method chain sequence.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Seq
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns the result of `interceptor`.
	     * @example
	     *
	     * _('  abc  ')
	     *  .chain()
	     *  .trim()
	     *  .thru(function(value) {
	     *    return [value];
	     *  })
	     *  .value();
	     * // => ['abc']
	     */function thru(value,interceptor){return interceptor(value);}/**
	     * This method is the wrapper version of `_.at`.
	     *
	     * @name at
	     * @memberOf _
	     * @since 1.0.0
	     * @category Seq
	     * @param {...(string|string[])} [paths] The property paths to pick.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	     *
	     * _(object).at(['a[0].b.c', 'a[1]']).value();
	     * // => [3, 4]
	     */var wrapperAt=flatRest(function(paths){var length=paths.length,start=length?paths[0]:0,value=this.__wrapped__,interceptor=function interceptor(object){return baseAt(object,paths);};if(length>1||this.__actions__.length||!(value instanceof LazyWrapper)||!isIndex(start)){return this.thru(interceptor);}value=value.slice(start,+start+(length?1:0));value.__actions__.push({'func':thru,'args':[interceptor],'thisArg':undefined});return new LodashWrapper(value,this.__chain__).thru(function(array){if(length&&!array.length){array.push(undefined);}return array;});});/**
	     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
	     *
	     * @name chain
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // A sequence without explicit chaining.
	     * _(users).head();
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // A sequence with explicit chaining.
	     * _(users)
	     *   .chain()
	     *   .head()
	     *   .pick('user')
	     *   .value();
	     * // => { 'user': 'barney' }
	     */function wrapperChain(){return chain(this);}/**
	     * Executes the chain sequence and returns the wrapped result.
	     *
	     * @name commit
	     * @memberOf _
	     * @since 3.2.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapped = _(array).push(3);
	     *
	     * console.log(array);
	     * // => [1, 2]
	     *
	     * wrapped = wrapped.commit();
	     * console.log(array);
	     * // => [1, 2, 3]
	     *
	     * wrapped.last();
	     * // => 3
	     *
	     * console.log(array);
	     * // => [1, 2, 3]
	     */function wrapperCommit(){return new LodashWrapper(this.value(),this.__chain__);}/**
	     * Gets the next value on a wrapped object following the
	     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
	     *
	     * @name next
	     * @memberOf _
	     * @since 4.0.0
	     * @category Seq
	     * @returns {Object} Returns the next iterator value.
	     * @example
	     *
	     * var wrapped = _([1, 2]);
	     *
	     * wrapped.next();
	     * // => { 'done': false, 'value': 1 }
	     *
	     * wrapped.next();
	     * // => { 'done': false, 'value': 2 }
	     *
	     * wrapped.next();
	     * // => { 'done': true, 'value': undefined }
	     */function wrapperNext(){if(this.__values__===undefined){this.__values__=toArray(this.value());}var done=this.__index__>=this.__values__.length,value=done?undefined:this.__values__[this.__index__++];return{'done':done,'value':value};}/**
	     * Enables the wrapper to be iterable.
	     *
	     * @name Symbol.iterator
	     * @memberOf _
	     * @since 4.0.0
	     * @category Seq
	     * @returns {Object} Returns the wrapper object.
	     * @example
	     *
	     * var wrapped = _([1, 2]);
	     *
	     * wrapped[Symbol.iterator]() === wrapped;
	     * // => true
	     *
	     * Array.from(wrapped);
	     * // => [1, 2]
	     */function wrapperToIterator(){return this;}/**
	     * Creates a clone of the chain sequence planting `value` as the wrapped value.
	     *
	     * @name plant
	     * @memberOf _
	     * @since 3.2.0
	     * @category Seq
	     * @param {*} value The value to plant.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var wrapped = _([1, 2]).map(square);
	     * var other = wrapped.plant([3, 4]);
	     *
	     * other.value();
	     * // => [9, 16]
	     *
	     * wrapped.value();
	     * // => [1, 4]
	     */function wrapperPlant(value){var result,parent=this;while(parent instanceof baseLodash){var clone=wrapperClone(parent);clone.__index__=0;clone.__values__=undefined;if(result){previous.__wrapped__=clone;}else{result=clone;}var previous=clone;parent=parent.__wrapped__;}previous.__wrapped__=value;return result;}/**
	     * This method is the wrapper version of `_.reverse`.
	     *
	     * **Note:** This method mutates the wrapped array.
	     *
	     * @name reverse
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _(array).reverse().value()
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */function wrapperReverse(){var value=this.__wrapped__;if(value instanceof LazyWrapper){var wrapped=value;if(this.__actions__.length){wrapped=new LazyWrapper(this);}wrapped=wrapped.reverse();wrapped.__actions__.push({'func':thru,'args':[reverse],'thisArg':undefined});return new LodashWrapper(wrapped,this.__chain__);}return this.thru(reverse);}/**
	     * Executes the chain sequence to resolve the unwrapped value.
	     *
	     * @name value
	     * @memberOf _
	     * @since 0.1.0
	     * @alias toJSON, valueOf
	     * @category Seq
	     * @returns {*} Returns the resolved unwrapped value.
	     * @example
	     *
	     * _([1, 2, 3]).value();
	     * // => [1, 2, 3]
	     */function wrapperValue(){return baseWrapperValue(this.__wrapped__,this.__actions__);}/*------------------------------------------------------------------------*//**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The corresponding value of
	     * each key is the number of times the key was returned by `iteratee`. The
	     * iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.countBy([6.1, 4.2, 6.3], Math.floor);
	     * // => { '4': 1, '6': 2 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.countBy(['one', 'two', 'three'], 'length');
	     * // => { '3': 2, '5': 1 }
	     */var countBy=createAggregator(function(result,value,key){if(hasOwnProperty.call(result,key)){++result[key];}else{baseAssignValue(result,key,1);}});/**
	     * Checks if `predicate` returns truthy for **all** elements of `collection`.
	     * Iteration is stopped once `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * **Note:** This method returns `true` for
	     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
	     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
	     * elements of empty collections.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.every([true, 1, null, 'yes'], Boolean);
	     * // => false
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.every(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.every(users, ['active', false]);
	     * // => true
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.every(users, 'active');
	     * // => false
	     */function every(collection,predicate,guard){var func=isArray(collection)?arrayEvery:baseEvery;if(guard&&isIterateeCall(collection,predicate,guard)){predicate=undefined;}return func(collection,getIteratee(predicate,3));}/**
	     * Iterates over elements of `collection`, returning an array of all elements
	     * `predicate` returns truthy for. The predicate is invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * **Note:** Unlike `_.remove`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     * @see _.reject
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.filter(users, function(o) { return !o.active; });
	     * // => objects for ['fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.filter(users, { 'age': 36, 'active': true });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.filter(users, ['active', false]);
	     * // => objects for ['fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.filter(users, 'active');
	     * // => objects for ['barney']
	     */function filter(collection,predicate){var func=isArray(collection)?arrayFilter:baseFilter;return func(collection,getIteratee(predicate,3));}/**
	     * Iterates over elements of `collection`, returning the first element
	     * `predicate` returns truthy for. The predicate is invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': true },
	     *   { 'user': 'fred',    'age': 40, 'active': false },
	     *   { 'user': 'pebbles', 'age': 1,  'active': true }
	     * ];
	     *
	     * _.find(users, function(o) { return o.age < 40; });
	     * // => object for 'barney'
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.find(users, { 'age': 1, 'active': true });
	     * // => object for 'pebbles'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.find(users, ['active', false]);
	     * // => object for 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.find(users, 'active');
	     * // => object for 'barney'
	     */var find=createFind(findIndex);/**
	     * This method is like `_.find` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=collection.length-1] The index to search from.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * _.findLast([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 1;
	     * });
	     * // => 3
	     */var findLast=createFind(findLastIndex);/**
	     * Creates a flattened array of values by running each element in `collection`
	     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
	     * with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [n, n];
	     * }
	     *
	     * _.flatMap([1, 2], duplicate);
	     * // => [1, 1, 2, 2]
	     */function flatMap(collection,iteratee){return baseFlatten(map(collection,iteratee),1);}/**
	     * This method is like `_.flatMap` except that it recursively flattens the
	     * mapped results.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [[[n, n]]];
	     * }
	     *
	     * _.flatMapDeep([1, 2], duplicate);
	     * // => [1, 1, 2, 2]
	     */function flatMapDeep(collection,iteratee){return baseFlatten(map(collection,iteratee),INFINITY);}/**
	     * This method is like `_.flatMap` except that it recursively flattens the
	     * mapped results up to `depth` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {number} [depth=1] The maximum recursion depth.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [[[n, n]]];
	     * }
	     *
	     * _.flatMapDepth([1, 2], duplicate, 2);
	     * // => [[1, 1], [2, 2]]
	     */function flatMapDepth(collection,iteratee,depth){depth=depth===undefined?1:toInteger(depth);return baseFlatten(map(collection,iteratee),depth);}/**
	     * Iterates over elements of `collection` and invokes `iteratee` for each element.
	     * The iteratee is invoked with three arguments: (value, index|key, collection).
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * **Note:** As with other "Collections" methods, objects with a "length"
	     * property are iterated like arrays. To avoid this behavior use `_.forIn`
	     * or `_.forOwn` for object iteration.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @alias each
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     * @see _.forEachRight
	     * @example
	     *
	     * _.forEach([1, 2], function(value) {
	     *   console.log(value);
	     * });
	     * // => Logs `1` then `2`.
	     *
	     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	     */function forEach(collection,iteratee){var func=isArray(collection)?arrayEach:baseEach;return func(collection,getIteratee(iteratee,3));}/**
	     * This method is like `_.forEach` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @alias eachRight
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     * @see _.forEach
	     * @example
	     *
	     * _.forEachRight([1, 2], function(value) {
	     *   console.log(value);
	     * });
	     * // => Logs `2` then `1`.
	     */function forEachRight(collection,iteratee){var func=isArray(collection)?arrayEachRight:baseEachRight;return func(collection,getIteratee(iteratee,3));}/**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The order of grouped values
	     * is determined by the order they occur in `collection`. The corresponding
	     * value of each key is an array of elements responsible for generating the
	     * key. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
	     * // => { '4': [4.2], '6': [6.1, 6.3] }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.groupBy(['one', 'two', 'three'], 'length');
	     * // => { '3': ['one', 'two'], '5': ['three'] }
	     */var groupBy=createAggregator(function(result,value,key){if(hasOwnProperty.call(result,key)){result[key].push(value);}else{baseAssignValue(result,key,[value]);}});/**
	     * Checks if `value` is in `collection`. If `collection` is a string, it's
	     * checked for a substring of `value`, otherwise
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * is used for equality comparisons. If `fromIndex` is negative, it's used as
	     * the offset from the end of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	     * @returns {boolean} Returns `true` if `value` is found, else `false`.
	     * @example
	     *
	     * _.includes([1, 2, 3], 1);
	     * // => true
	     *
	     * _.includes([1, 2, 3], 1, 2);
	     * // => false
	     *
	     * _.includes({ 'a': 1, 'b': 2 }, 1);
	     * // => true
	     *
	     * _.includes('abcd', 'bc');
	     * // => true
	     */function includes(collection,value,fromIndex,guard){collection=isArrayLike(collection)?collection:values(collection);fromIndex=fromIndex&&!guard?toInteger(fromIndex):0;var length=collection.length;if(fromIndex<0){fromIndex=nativeMax(length+fromIndex,0);}return isString(collection)?fromIndex<=length&&collection.indexOf(value,fromIndex)>-1:!!length&&baseIndexOf(collection,value,fromIndex)>-1;}/**
	     * Invokes the method at `path` of each element in `collection`, returning
	     * an array of the results of each invoked method. Any additional arguments
	     * are provided to each invoked method. If `path` is a function, it's invoked
	     * for, and `this` bound to, each element in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|string} path The path of the method to invoke or
	     *  the function invoked per iteration.
	     * @param {...*} [args] The arguments to invoke each method with.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
	     * // => [[1, 5, 7], [1, 2, 3]]
	     *
	     * _.invokeMap([123, 456], String.prototype.split, '');
	     * // => [['1', '2', '3'], ['4', '5', '6']]
	     */var invokeMap=baseRest(function(collection,path,args){var index=-1,isFunc=typeof path=='function',result=isArrayLike(collection)?Array(collection.length):[];baseEach(collection,function(value){result[++index]=isFunc?apply(path,value,args):baseInvoke(value,path,args);});return result;});/**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The corresponding value of
	     * each key is the last element responsible for generating the key. The
	     * iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * var array = [
	     *   { 'dir': 'left', 'code': 97 },
	     *   { 'dir': 'right', 'code': 100 }
	     * ];
	     *
	     * _.keyBy(array, function(o) {
	     *   return String.fromCharCode(o.code);
	     * });
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.keyBy(array, 'dir');
	     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
	     */var keyBy=createAggregator(function(result,value,key){baseAssignValue(result,key,value);});/**
	     * Creates an array of values by running each element in `collection` thru
	     * `iteratee`. The iteratee is invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	     *
	     * The guarded methods are:
	     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
	     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
	     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
	     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * _.map([4, 8], square);
	     * // => [16, 64]
	     *
	     * _.map({ 'a': 4, 'b': 8 }, square);
	     * // => [16, 64] (iteration order is not guaranteed)
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.map(users, 'user');
	     * // => ['barney', 'fred']
	     */function map(collection,iteratee){var func=isArray(collection)?arrayMap:baseMap;return func(collection,getIteratee(iteratee,3));}/**
	     * This method is like `_.sortBy` except that it allows specifying the sort
	     * orders of the iteratees to sort by. If `orders` is unspecified, all values
	     * are sorted in ascending order. Otherwise, specify an order of "desc" for
	     * descending or "asc" for ascending sort order of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
	     *  The iteratees to sort by.
	     * @param {string[]} [orders] The sort orders of `iteratees`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 34 },
	     *   { 'user': 'fred',   'age': 40 },
	     *   { 'user': 'barney', 'age': 36 }
	     * ];
	     *
	     * // Sort by `user` in ascending order and by `age` in descending order.
	     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	     */function orderBy(collection,iteratees,orders,guard){if(collection==null){return[];}if(!isArray(iteratees)){iteratees=iteratees==null?[]:[iteratees];}orders=guard?undefined:orders;if(!isArray(orders)){orders=orders==null?[]:[orders];}return baseOrderBy(collection,iteratees,orders);}/**
	     * Creates an array of elements split into two groups, the first of which
	     * contains elements `predicate` returns truthy for, the second of which
	     * contains elements `predicate` returns falsey for. The predicate is
	     * invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the array of grouped elements.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': false },
	     *   { 'user': 'fred',    'age': 40, 'active': true },
	     *   { 'user': 'pebbles', 'age': 1,  'active': false }
	     * ];
	     *
	     * _.partition(users, function(o) { return o.active; });
	     * // => objects for [['fred'], ['barney', 'pebbles']]
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.partition(users, { 'age': 1, 'active': false });
	     * // => objects for [['pebbles'], ['barney', 'fred']]
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.partition(users, ['active', false]);
	     * // => objects for [['barney', 'pebbles'], ['fred']]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.partition(users, 'active');
	     * // => objects for [['fred'], ['barney', 'pebbles']]
	     */var partition=createAggregator(function(result,value,key){result[key?0:1].push(value);},function(){return[[],[]];});/**
	     * Reduces `collection` to a value which is the accumulated result of running
	     * each element in `collection` thru `iteratee`, where each successive
	     * invocation is supplied the return value of the previous. If `accumulator`
	     * is not given, the first element of `collection` is used as the initial
	     * value. The iteratee is invoked with four arguments:
	     * (accumulator, value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.reduce`, `_.reduceRight`, and `_.transform`.
	     *
	     * The guarded methods are:
	     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
	     * and `sortBy`
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @returns {*} Returns the accumulated value.
	     * @see _.reduceRight
	     * @example
	     *
	     * _.reduce([1, 2], function(sum, n) {
	     *   return sum + n;
	     * }, 0);
	     * // => 3
	     *
	     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     *   return result;
	     * }, {});
	     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
	     */function reduce(collection,iteratee,accumulator){var func=isArray(collection)?arrayReduce:baseReduce,initAccum=arguments.length<3;return func(collection,getIteratee(iteratee,4),accumulator,initAccum,baseEach);}/**
	     * This method is like `_.reduce` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @returns {*} Returns the accumulated value.
	     * @see _.reduce
	     * @example
	     *
	     * var array = [[0, 1], [2, 3], [4, 5]];
	     *
	     * _.reduceRight(array, function(flattened, other) {
	     *   return flattened.concat(other);
	     * }, []);
	     * // => [4, 5, 2, 3, 0, 1]
	     */function reduceRight(collection,iteratee,accumulator){var func=isArray(collection)?arrayReduceRight:baseReduce,initAccum=arguments.length<3;return func(collection,getIteratee(iteratee,4),accumulator,initAccum,baseEachRight);}/**
	     * The opposite of `_.filter`; this method returns the elements of `collection`
	     * that `predicate` does **not** return truthy for.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     * @see _.filter
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': true }
	     * ];
	     *
	     * _.reject(users, function(o) { return !o.active; });
	     * // => objects for ['fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.reject(users, { 'age': 40, 'active': true });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.reject(users, ['active', false]);
	     * // => objects for ['fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.reject(users, 'active');
	     * // => objects for ['barney']
	     */function reject(collection,predicate){var func=isArray(collection)?arrayFilter:baseFilter;return func(collection,negate(getIteratee(predicate,3)));}/**
	     * Gets a random element from `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to sample.
	     * @returns {*} Returns the random element.
	     * @example
	     *
	     * _.sample([1, 2, 3, 4]);
	     * // => 2
	     */function sample(collection){var func=isArray(collection)?arraySample:baseSample;return func(collection);}/**
	     * Gets `n` random elements at unique keys from `collection` up to the
	     * size of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to sample.
	     * @param {number} [n=1] The number of elements to sample.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the random elements.
	     * @example
	     *
	     * _.sampleSize([1, 2, 3], 2);
	     * // => [3, 1]
	     *
	     * _.sampleSize([1, 2, 3], 4);
	     * // => [2, 3, 1]
	     */function sampleSize(collection,n,guard){if(guard?isIterateeCall(collection,n,guard):n===undefined){n=1;}else{n=toInteger(n);}var func=isArray(collection)?arraySampleSize:baseSampleSize;return func(collection,n);}/**
	     * Creates an array of shuffled values, using a version of the
	     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     * @example
	     *
	     * _.shuffle([1, 2, 3, 4]);
	     * // => [4, 1, 3, 2]
	     */function shuffle(collection){var func=isArray(collection)?arrayShuffle:baseShuffle;return func(collection);}/**
	     * Gets the size of `collection` by returning its length for array-like
	     * values or the number of own enumerable string keyed properties for objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @returns {number} Returns the collection size.
	     * @example
	     *
	     * _.size([1, 2, 3]);
	     * // => 3
	     *
	     * _.size({ 'a': 1, 'b': 2 });
	     * // => 2
	     *
	     * _.size('pebbles');
	     * // => 7
	     */function size(collection){if(collection==null){return 0;}if(isArrayLike(collection)){return isString(collection)?stringSize(collection):collection.length;}var tag=getTag(collection);if(tag==mapTag||tag==setTag){return collection.size;}return baseKeys(collection).length;}/**
	     * Checks if `predicate` returns truthy for **any** element of `collection`.
	     * Iteration is stopped once `predicate` returns truthy. The predicate is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.some([null, 0, 'yes', false], Boolean);
	     * // => true
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': true },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.some(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.some(users, ['active', false]);
	     * // => true
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.some(users, 'active');
	     * // => true
	     */function some(collection,predicate,guard){var func=isArray(collection)?arraySome:baseSome;if(guard&&isIterateeCall(collection,predicate,guard)){predicate=undefined;}return func(collection,getIteratee(predicate,3));}/**
	     * Creates an array of elements, sorted in ascending order by the results of
	     * running each element in a collection thru each iteratee. This method
	     * performs a stable sort, that is, it preserves the original sort order of
	     * equal elements. The iteratees are invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {...(Function|Function[])} [iteratees=[_.identity]]
	     *  The iteratees to sort by.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 },
	     *   { 'user': 'barney', 'age': 34 }
	     * ];
	     *
	     * _.sortBy(users, [function(o) { return o.user; }]);
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	     *
	     * _.sortBy(users, ['user', 'age']);
	     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
	     */var sortBy=baseRest(function(collection,iteratees){if(collection==null){return[];}var length=iteratees.length;if(length>1&&isIterateeCall(collection,iteratees[0],iteratees[1])){iteratees=[];}else if(length>2&&isIterateeCall(iteratees[0],iteratees[1],iteratees[2])){iteratees=[iteratees[0]];}return baseOrderBy(collection,baseFlatten(iteratees,1),[]);});/*------------------------------------------------------------------------*//**
	     * Gets the timestamp of the number of milliseconds that have elapsed since
	     * the Unix epoch (1 January 1970 00:00:00 UTC).
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Date
	     * @returns {number} Returns the timestamp.
	     * @example
	     *
	     * _.defer(function(stamp) {
	     *   console.log(_.now() - stamp);
	     * }, _.now());
	     * // => Logs the number of milliseconds it took for the deferred invocation.
	     */var now=ctxNow||function(){return root.Date.now();};/*------------------------------------------------------------------------*//**
	     * The opposite of `_.before`; this method creates a function that invokes
	     * `func` once it's called `n` or more times.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {number} n The number of calls before `func` is invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var saves = ['profile', 'settings'];
	     *
	     * var done = _.after(saves.length, function() {
	     *   console.log('done saving!');
	     * });
	     *
	     * _.forEach(saves, function(type) {
	     *   asyncSave({ 'type': type, 'complete': done });
	     * });
	     * // => Logs 'done saving!' after the two async saves have completed.
	     */function after(n,func){if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}n=toInteger(n);return function(){if(--n<1){return func.apply(this,arguments);}};}/**
	     * Creates a function that invokes `func`, with up to `n` arguments,
	     * ignoring any additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @param {number} [n=func.length] The arity cap.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new capped function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
	     * // => [6, 8, 10]
	     */function ary(func,n,guard){n=guard?undefined:n;n=func&&n==null?func.length:n;return createWrap(func,WRAP_ARY_FLAG,undefined,undefined,undefined,undefined,n);}/**
	     * Creates a function that invokes `func`, with the `this` binding and arguments
	     * of the created function, while it's called less than `n` times. Subsequent
	     * calls to the created function return the result of the last `func` invocation.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {number} n The number of calls at which `func` is no longer invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * jQuery(element).on('click', _.before(5, addContactToList));
	     * // => Allows adding up to 4 contacts to the list.
	     */function before(n,func){var result;if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}n=toInteger(n);return function(){if(--n>0){result=func.apply(this,arguments);}if(n<=1){func=undefined;}return result;};}/**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and `partials` prepended to the arguments it receives.
	     *
	     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
	     * property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * function greet(greeting, punctuation) {
	     *   return greeting + ' ' + this.user + punctuation;
	     * }
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * var bound = _.bind(greet, object, 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * // Bound with placeholders.
	     * var bound = _.bind(greet, object, _, '!');
	     * bound('hi');
	     * // => 'hi fred!'
	     */var bind=baseRest(function(func,thisArg,partials){var bitmask=WRAP_BIND_FLAG;if(partials.length){var holders=replaceHolders(partials,getHolder(bind));bitmask|=WRAP_PARTIAL_FLAG;}return createWrap(func,bitmask,thisArg,partials,holders);});/**
	     * Creates a function that invokes the method at `object[key]` with `partials`
	     * prepended to the arguments it receives.
	     *
	     * This method differs from `_.bind` by allowing bound functions to reference
	     * methods that may be redefined or don't yet exist. See
	     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
	     * for more details.
	     *
	     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.10.0
	     * @category Function
	     * @param {Object} object The object to invoke the method on.
	     * @param {string} key The key of the method.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var object = {
	     *   'user': 'fred',
	     *   'greet': function(greeting, punctuation) {
	     *     return greeting + ' ' + this.user + punctuation;
	     *   }
	     * };
	     *
	     * var bound = _.bindKey(object, 'greet', 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * object.greet = function(greeting, punctuation) {
	     *   return greeting + 'ya ' + this.user + punctuation;
	     * };
	     *
	     * bound('!');
	     * // => 'hiya fred!'
	     *
	     * // Bound with placeholders.
	     * var bound = _.bindKey(object, 'greet', _, '!');
	     * bound('hi');
	     * // => 'hiya fred!'
	     */var bindKey=baseRest(function(object,key,partials){var bitmask=WRAP_BIND_FLAG|WRAP_BIND_KEY_FLAG;if(partials.length){var holders=replaceHolders(partials,getHolder(bindKey));bitmask|=WRAP_PARTIAL_FLAG;}return createWrap(key,bitmask,object,partials,holders);});/**
	     * Creates a function that accepts arguments of `func` and either invokes
	     * `func` returning its result, if at least `arity` number of arguments have
	     * been provided, or returns a function that accepts the remaining `func`
	     * arguments, and so on. The arity of `func` may be specified if `func.length`
	     * is not sufficient.
	     *
	     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curry(abc);
	     *
	     * curried(1)(2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // Curried with placeholders.
	     * curried(1)(_, 3)(2);
	     * // => [1, 2, 3]
	     */function curry(func,arity,guard){arity=guard?undefined:arity;var result=createWrap(func,WRAP_CURRY_FLAG,undefined,undefined,undefined,undefined,undefined,arity);result.placeholder=curry.placeholder;return result;}/**
	     * This method is like `_.curry` except that arguments are applied to `func`
	     * in the manner of `_.partialRight` instead of `_.partial`.
	     *
	     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curryRight(abc);
	     *
	     * curried(3)(2)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(2, 3)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // Curried with placeholders.
	     * curried(3)(1, _)(2);
	     * // => [1, 2, 3]
	     */function curryRight(func,arity,guard){arity=guard?undefined:arity;var result=createWrap(func,WRAP_CURRY_RIGHT_FLAG,undefined,undefined,undefined,undefined,undefined,arity);result.placeholder=curryRight.placeholder;return result;}/**
	     * Creates a debounced function that delays invoking `func` until after `wait`
	     * milliseconds have elapsed since the last time the debounced function was
	     * invoked. The debounced function comes with a `cancel` method to cancel
	     * delayed `func` invocations and a `flush` method to immediately invoke them.
	     * Provide `options` to indicate whether `func` should be invoked on the
	     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
	     * with the last arguments provided to the debounced function. Subsequent
	     * calls to the debounced function return the result of the last `func`
	     * invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is
	     * invoked on the trailing edge of the timeout only if the debounced function
	     * is invoked more than once during the `wait` timeout.
	     *
	     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	     *
	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	     * for details over the differences between `_.debounce` and `_.throttle`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to debounce.
	     * @param {number} [wait=0] The number of milliseconds to delay.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.leading=false]
	     *  Specify invoking on the leading edge of the timeout.
	     * @param {number} [options.maxWait]
	     *  The maximum time `func` is allowed to be delayed before it's invoked.
	     * @param {boolean} [options.trailing=true]
	     *  Specify invoking on the trailing edge of the timeout.
	     * @returns {Function} Returns the new debounced function.
	     * @example
	     *
	     * // Avoid costly calculations while the window size is in flux.
	     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	     *
	     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
	     * jQuery(element).on('click', _.debounce(sendMail, 300, {
	     *   'leading': true,
	     *   'trailing': false
	     * }));
	     *
	     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
	     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
	     * var source = new EventSource('/stream');
	     * jQuery(source).on('message', debounced);
	     *
	     * // Cancel the trailing debounced invocation.
	     * jQuery(window).on('popstate', debounced.cancel);
	     */function debounce(func,wait,options){var lastArgs,lastThis,maxWait,result,timerId,lastCallTime,lastInvokeTime=0,leading=false,maxing=false,trailing=true;if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}wait=toNumber(wait)||0;if(isObject(options)){leading=!!options.leading;maxing='maxWait'in options;maxWait=maxing?nativeMax(toNumber(options.maxWait)||0,wait):maxWait;trailing='trailing'in options?!!options.trailing:trailing;}function invokeFunc(time){var args=lastArgs,thisArg=lastThis;lastArgs=lastThis=undefined;lastInvokeTime=time;result=func.apply(thisArg,args);return result;}function leadingEdge(time){// Reset any `maxWait` timer.
	lastInvokeTime=time;// Start the timer for the trailing edge.
	timerId=setTimeout(timerExpired,wait);// Invoke the leading edge.
	return leading?invokeFunc(time):result;}function remainingWait(time){var timeSinceLastCall=time-lastCallTime,timeSinceLastInvoke=time-lastInvokeTime,timeWaiting=wait-timeSinceLastCall;return maxing?nativeMin(timeWaiting,maxWait-timeSinceLastInvoke):timeWaiting;}function shouldInvoke(time){var timeSinceLastCall=time-lastCallTime,timeSinceLastInvoke=time-lastInvokeTime;// Either this is the first call, activity has stopped and we're at the
	// trailing edge, the system time has gone backwards and we're treating
	// it as the trailing edge, or we've hit the `maxWait` limit.
	return lastCallTime===undefined||timeSinceLastCall>=wait||timeSinceLastCall<0||maxing&&timeSinceLastInvoke>=maxWait;}function timerExpired(){var time=now();if(shouldInvoke(time)){return trailingEdge(time);}// Restart the timer.
	timerId=setTimeout(timerExpired,remainingWait(time));}function trailingEdge(time){timerId=undefined;// Only invoke if we have `lastArgs` which means `func` has been
	// debounced at least once.
	if(trailing&&lastArgs){return invokeFunc(time);}lastArgs=lastThis=undefined;return result;}function cancel(){if(timerId!==undefined){clearTimeout(timerId);}lastInvokeTime=0;lastArgs=lastCallTime=lastThis=timerId=undefined;}function flush(){return timerId===undefined?result:trailingEdge(now());}function debounced(){var time=now(),isInvoking=shouldInvoke(time);lastArgs=arguments;lastThis=this;lastCallTime=time;if(isInvoking){if(timerId===undefined){return leadingEdge(lastCallTime);}if(maxing){// Handle invocations in a tight loop.
	timerId=setTimeout(timerExpired,wait);return invokeFunc(lastCallTime);}}if(timerId===undefined){timerId=setTimeout(timerExpired,wait);}return result;}debounced.cancel=cancel;debounced.flush=flush;return debounced;}/**
	     * Defers invoking the `func` until the current call stack has cleared. Any
	     * additional arguments are provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to defer.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.defer(function(text) {
	     *   console.log(text);
	     * }, 'deferred');
	     * // => Logs 'deferred' after one millisecond.
	     */var defer=baseRest(function(func,args){return baseDelay(func,1,args);});/**
	     * Invokes `func` after `wait` milliseconds. Any additional arguments are
	     * provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.delay(function(text) {
	     *   console.log(text);
	     * }, 1000, 'later');
	     * // => Logs 'later' after one second.
	     */var delay=baseRest(function(func,wait,args){return baseDelay(func,toNumber(wait)||0,args);});/**
	     * Creates a function that invokes `func` with arguments reversed.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to flip arguments for.
	     * @returns {Function} Returns the new flipped function.
	     * @example
	     *
	     * var flipped = _.flip(function() {
	     *   return _.toArray(arguments);
	     * });
	     *
	     * flipped('a', 'b', 'c', 'd');
	     * // => ['d', 'c', 'b', 'a']
	     */function flip(func){return createWrap(func,WRAP_FLIP_FLAG);}/**
	     * Creates a function that memoizes the result of `func`. If `resolver` is
	     * provided, it determines the cache key for storing the result based on the
	     * arguments provided to the memoized function. By default, the first argument
	     * provided to the memoized function is used as the map cache key. The `func`
	     * is invoked with the `this` binding of the memoized function.
	     *
	     * **Note:** The cache is exposed as the `cache` property on the memoized
	     * function. Its creation may be customized by replacing the `_.memoize.Cache`
	     * constructor with one whose instances implement the
	     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
	     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to have its output memoized.
	     * @param {Function} [resolver] The function to resolve the cache key.
	     * @returns {Function} Returns the new memoized function.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     * var other = { 'c': 3, 'd': 4 };
	     *
	     * var values = _.memoize(_.values);
	     * values(object);
	     * // => [1, 2]
	     *
	     * values(other);
	     * // => [3, 4]
	     *
	     * object.a = 2;
	     * values(object);
	     * // => [1, 2]
	     *
	     * // Modify the result cache.
	     * values.cache.set(object, ['a', 'b']);
	     * values(object);
	     * // => ['a', 'b']
	     *
	     * // Replace `_.memoize.Cache`.
	     * _.memoize.Cache = WeakMap;
	     */function memoize(func,resolver){if(typeof func!='function'||resolver!=null&&typeof resolver!='function'){throw new TypeError(FUNC_ERROR_TEXT);}var memoized=function memoized(){var args=arguments,key=resolver?resolver.apply(this,args):args[0],cache=memoized.cache;if(cache.has(key)){return cache.get(key);}var result=func.apply(this,args);memoized.cache=cache.set(key,result)||cache;return result;};memoized.cache=new(memoize.Cache||MapCache)();return memoized;}// Expose `MapCache`.
	memoize.Cache=MapCache;/**
	     * Creates a function that negates the result of the predicate `func`. The
	     * `func` predicate is invoked with the `this` binding and arguments of the
	     * created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} predicate The predicate to negate.
	     * @returns {Function} Returns the new negated function.
	     * @example
	     *
	     * function isEven(n) {
	     *   return n % 2 == 0;
	     * }
	     *
	     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
	     * // => [1, 3, 5]
	     */function negate(predicate){if(typeof predicate!='function'){throw new TypeError(FUNC_ERROR_TEXT);}return function(){var args=arguments;switch(args.length){case 0:return!predicate.call(this);case 1:return!predicate.call(this,args[0]);case 2:return!predicate.call(this,args[0],args[1]);case 3:return!predicate.call(this,args[0],args[1],args[2]);}return!predicate.apply(this,args);};}/**
	     * Creates a function that is restricted to invoking `func` once. Repeat calls
	     * to the function return the value of the first invocation. The `func` is
	     * invoked with the `this` binding and arguments of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var initialize = _.once(createApplication);
	     * initialize();
	     * initialize();
	     * // => `createApplication` is invoked once
	     */function once(func){return before(2,func);}/**
	     * Creates a function that invokes `func` with its arguments transformed.
	     *
	     * @static
	     * @since 4.0.0
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to wrap.
	     * @param {...(Function|Function[])} [transforms=[_.identity]]
	     *  The argument transforms.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function doubled(n) {
	     *   return n * 2;
	     * }
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var func = _.overArgs(function(x, y) {
	     *   return [x, y];
	     * }, [square, doubled]);
	     *
	     * func(9, 3);
	     * // => [81, 6]
	     *
	     * func(10, 5);
	     * // => [100, 10]
	     */var overArgs=castRest(function(func,transforms){transforms=transforms.length==1&&isArray(transforms[0])?arrayMap(transforms[0],baseUnary(getIteratee())):arrayMap(baseFlatten(transforms,1),baseUnary(getIteratee()));var funcsLength=transforms.length;return baseRest(function(args){var index=-1,length=nativeMin(args.length,funcsLength);while(++index<length){args[index]=transforms[index].call(this,args[index]);}return apply(func,this,args);});});/**
	     * Creates a function that invokes `func` with `partials` prepended to the
	     * arguments it receives. This method is like `_.bind` except it does **not**
	     * alter the `this` binding.
	     *
	     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.2.0
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * function greet(greeting, name) {
	     *   return greeting + ' ' + name;
	     * }
	     *
	     * var sayHelloTo = _.partial(greet, 'hello');
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     *
	     * // Partially applied with placeholders.
	     * var greetFred = _.partial(greet, _, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     */var partial=baseRest(function(func,partials){var holders=replaceHolders(partials,getHolder(partial));return createWrap(func,WRAP_PARTIAL_FLAG,undefined,partials,holders);});/**
	     * This method is like `_.partial` except that partially applied arguments
	     * are appended to the arguments it receives.
	     *
	     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * function greet(greeting, name) {
	     *   return greeting + ' ' + name;
	     * }
	     *
	     * var greetFred = _.partialRight(greet, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     *
	     * // Partially applied with placeholders.
	     * var sayHelloTo = _.partialRight(greet, 'hello', _);
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     */var partialRight=baseRest(function(func,partials){var holders=replaceHolders(partials,getHolder(partialRight));return createWrap(func,WRAP_PARTIAL_RIGHT_FLAG,undefined,partials,holders);});/**
	     * Creates a function that invokes `func` with arguments arranged according
	     * to the specified `indexes` where the argument value at the first index is
	     * provided as the first argument, the argument value at the second index is
	     * provided as the second argument, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to rearrange arguments for.
	     * @param {...(number|number[])} indexes The arranged argument indexes.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var rearged = _.rearg(function(a, b, c) {
	     *   return [a, b, c];
	     * }, [2, 0, 1]);
	     *
	     * rearged('b', 'c', 'a')
	     * // => ['a', 'b', 'c']
	     */var rearg=flatRest(function(func,indexes){return createWrap(func,WRAP_REARG_FLAG,undefined,undefined,undefined,indexes);});/**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * created function and arguments from `start` and beyond provided as
	     * an array.
	     *
	     * **Note:** This method is based on the
	     * [rest parameter](https://mdn.io/rest_parameters).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.rest(function(what, names) {
	     *   return what + ' ' + _.initial(names).join(', ') +
	     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	     * });
	     *
	     * say('hello', 'fred', 'barney', 'pebbles');
	     * // => 'hello fred, barney, & pebbles'
	     */function rest(func,start){if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}start=start===undefined?start:toInteger(start);return baseRest(func,start);}/**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * create function and an array of arguments much like
	     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
	     *
	     * **Note:** This method is based on the
	     * [spread operator](https://mdn.io/spread_operator).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Function
	     * @param {Function} func The function to spread arguments over.
	     * @param {number} [start=0] The start position of the spread.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.spread(function(who, what) {
	     *   return who + ' says ' + what;
	     * });
	     *
	     * say(['fred', 'hello']);
	     * // => 'fred says hello'
	     *
	     * var numbers = Promise.all([
	     *   Promise.resolve(40),
	     *   Promise.resolve(36)
	     * ]);
	     *
	     * numbers.then(_.spread(function(x, y) {
	     *   return x + y;
	     * }));
	     * // => a Promise of 76
	     */function spread(func,start){if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}start=start==null?0:nativeMax(toInteger(start),0);return baseRest(function(args){var array=args[start],otherArgs=castSlice(args,0,start);if(array){arrayPush(otherArgs,array);}return apply(func,this,otherArgs);});}/**
	     * Creates a throttled function that only invokes `func` at most once per
	     * every `wait` milliseconds. The throttled function comes with a `cancel`
	     * method to cancel delayed `func` invocations and a `flush` method to
	     * immediately invoke them. Provide `options` to indicate whether `func`
	     * should be invoked on the leading and/or trailing edge of the `wait`
	     * timeout. The `func` is invoked with the last arguments provided to the
	     * throttled function. Subsequent calls to the throttled function return the
	     * result of the last `func` invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is
	     * invoked on the trailing edge of the timeout only if the throttled function
	     * is invoked more than once during the `wait` timeout.
	     *
	     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	     *
	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	     * for details over the differences between `_.throttle` and `_.debounce`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to throttle.
	     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.leading=true]
	     *  Specify invoking on the leading edge of the timeout.
	     * @param {boolean} [options.trailing=true]
	     *  Specify invoking on the trailing edge of the timeout.
	     * @returns {Function} Returns the new throttled function.
	     * @example
	     *
	     * // Avoid excessively updating the position while scrolling.
	     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	     *
	     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
	     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
	     * jQuery(element).on('click', throttled);
	     *
	     * // Cancel the trailing throttled invocation.
	     * jQuery(window).on('popstate', throttled.cancel);
	     */function throttle(func,wait,options){var leading=true,trailing=true;if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}if(isObject(options)){leading='leading'in options?!!options.leading:leading;trailing='trailing'in options?!!options.trailing:trailing;}return debounce(func,wait,{'leading':leading,'maxWait':wait,'trailing':trailing});}/**
	     * Creates a function that accepts up to one argument, ignoring any
	     * additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @returns {Function} Returns the new capped function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.unary(parseInt));
	     * // => [6, 8, 10]
	     */function unary(func){return ary(func,1);}/**
	     * Creates a function that provides `value` to `wrapper` as its first
	     * argument. Any additional arguments provided to the function are appended
	     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
	     * binding of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {*} value The value to wrap.
	     * @param {Function} [wrapper=identity] The wrapper function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var p = _.wrap(_.escape, function(func, text) {
	     *   return '<p>' + func(text) + '</p>';
	     * });
	     *
	     * p('fred, barney, & pebbles');
	     * // => '<p>fred, barney, &amp; pebbles</p>'
	     */function wrap(value,wrapper){return partial(castFunction(wrapper),value);}/*------------------------------------------------------------------------*//**
	     * Casts `value` as an array if it's not one.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.4.0
	     * @category Lang
	     * @param {*} value The value to inspect.
	     * @returns {Array} Returns the cast array.
	     * @example
	     *
	     * _.castArray(1);
	     * // => [1]
	     *
	     * _.castArray({ 'a': 1 });
	     * // => [{ 'a': 1 }]
	     *
	     * _.castArray('abc');
	     * // => ['abc']
	     *
	     * _.castArray(null);
	     * // => [null]
	     *
	     * _.castArray(undefined);
	     * // => [undefined]
	     *
	     * _.castArray();
	     * // => []
	     *
	     * var array = [1, 2, 3];
	     * console.log(_.castArray(array) === array);
	     * // => true
	     */function castArray(){if(!arguments.length){return[];}var value=arguments[0];return isArray(value)?value:[value];}/**
	     * Creates a shallow clone of `value`.
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
	     * and supports cloning arrays, array buffers, booleans, date objects, maps,
	     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
	     * arrays. The own enumerable properties of `arguments` objects are cloned
	     * as plain objects. An empty object is returned for uncloneable values such
	     * as error objects, functions, DOM nodes, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @returns {*} Returns the cloned value.
	     * @see _.cloneDeep
	     * @example
	     *
	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
	     *
	     * var shallow = _.clone(objects);
	     * console.log(shallow[0] === objects[0]);
	     * // => true
	     */function clone(value){return baseClone(value,CLONE_SYMBOLS_FLAG);}/**
	     * This method is like `_.clone` except that it accepts `customizer` which
	     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
	     * cloning is handled by the method instead. The `customizer` is invoked with
	     * up to four arguments; (value [, index|key, object, stack]).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @returns {*} Returns the cloned value.
	     * @see _.cloneDeepWith
	     * @example
	     *
	     * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(false);
	     *   }
	     * }
	     *
	     * var el = _.cloneWith(document.body, customizer);
	     *
	     * console.log(el === document.body);
	     * // => false
	     * console.log(el.nodeName);
	     * // => 'BODY'
	     * console.log(el.childNodes.length);
	     * // => 0
	     */function cloneWith(value,customizer){customizer=typeof customizer=='function'?customizer:undefined;return baseClone(value,CLONE_SYMBOLS_FLAG,customizer);}/**
	     * This method is like `_.clone` except that it recursively clones `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Lang
	     * @param {*} value The value to recursively clone.
	     * @returns {*} Returns the deep cloned value.
	     * @see _.clone
	     * @example
	     *
	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
	     *
	     * var deep = _.cloneDeep(objects);
	     * console.log(deep[0] === objects[0]);
	     * // => false
	     */function cloneDeep(value){return baseClone(value,CLONE_DEEP_FLAG|CLONE_SYMBOLS_FLAG);}/**
	     * This method is like `_.cloneWith` except that it recursively clones `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to recursively clone.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @returns {*} Returns the deep cloned value.
	     * @see _.cloneWith
	     * @example
	     *
	     * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(true);
	     *   }
	     * }
	     *
	     * var el = _.cloneDeepWith(document.body, customizer);
	     *
	     * console.log(el === document.body);
	     * // => false
	     * console.log(el.nodeName);
	     * // => 'BODY'
	     * console.log(el.childNodes.length);
	     * // => 20
	     */function cloneDeepWith(value,customizer){customizer=typeof customizer=='function'?customizer:undefined;return baseClone(value,CLONE_DEEP_FLAG|CLONE_SYMBOLS_FLAG,customizer);}/**
	     * Checks if `object` conforms to `source` by invoking the predicate
	     * properties of `source` with the corresponding property values of `object`.
	     *
	     * **Note:** This method is equivalent to `_.conforms` when `source` is
	     * partially applied.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.14.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     *
	     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
	     * // => true
	     *
	     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
	     * // => false
	     */function conformsTo(object,source){return source==null||baseConformsTo(object,source,keys(source));}/**
	     * Performs a
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * comparison between two values to determine if they are equivalent.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     * var other = { 'a': 1 };
	     *
	     * _.eq(object, object);
	     * // => true
	     *
	     * _.eq(object, other);
	     * // => false
	     *
	     * _.eq('a', 'a');
	     * // => true
	     *
	     * _.eq('a', Object('a'));
	     * // => false
	     *
	     * _.eq(NaN, NaN);
	     * // => true
	     */function eq(value,other){return value===other||value!==value&&other!==other;}/**
	     * Checks if `value` is greater than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
	     *  else `false`.
	     * @see _.lt
	     * @example
	     *
	     * _.gt(3, 1);
	     * // => true
	     *
	     * _.gt(3, 3);
	     * // => false
	     *
	     * _.gt(1, 3);
	     * // => false
	     */var gt=createRelationalOperation(baseGt);/**
	     * Checks if `value` is greater than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than or equal to
	     *  `other`, else `false`.
	     * @see _.lte
	     * @example
	     *
	     * _.gte(3, 1);
	     * // => true
	     *
	     * _.gte(3, 3);
	     * // => true
	     *
	     * _.gte(1, 3);
	     * // => false
	     */var gte=createRelationalOperation(function(value,other){return value>=other;});/**
	     * Checks if `value` is likely an `arguments` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	     *  else `false`.
	     * @example
	     *
	     * _.isArguments(function() { return arguments; }());
	     * // => true
	     *
	     * _.isArguments([1, 2, 3]);
	     * // => false
	     */var isArguments=baseIsArguments(function(){return arguments;}())?baseIsArguments:function(value){return isObjectLike(value)&&hasOwnProperty.call(value,'callee')&&!propertyIsEnumerable.call(value,'callee');};/**
	     * Checks if `value` is classified as an `Array` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	     * @example
	     *
	     * _.isArray([1, 2, 3]);
	     * // => true
	     *
	     * _.isArray(document.body.children);
	     * // => false
	     *
	     * _.isArray('abc');
	     * // => false
	     *
	     * _.isArray(_.noop);
	     * // => false
	     */var isArray=Array.isArray;/**
	     * Checks if `value` is classified as an `ArrayBuffer` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
	     * @example
	     *
	     * _.isArrayBuffer(new ArrayBuffer(2));
	     * // => true
	     *
	     * _.isArrayBuffer(new Array(2));
	     * // => false
	     */var isArrayBuffer=nodeIsArrayBuffer?baseUnary(nodeIsArrayBuffer):baseIsArrayBuffer;/**
	     * Checks if `value` is array-like. A value is considered array-like if it's
	     * not a function and has a `value.length` that's an integer greater than or
	     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	     * @example
	     *
	     * _.isArrayLike([1, 2, 3]);
	     * // => true
	     *
	     * _.isArrayLike(document.body.children);
	     * // => true
	     *
	     * _.isArrayLike('abc');
	     * // => true
	     *
	     * _.isArrayLike(_.noop);
	     * // => false
	     */function isArrayLike(value){return value!=null&&isLength(value.length)&&!isFunction(value);}/**
	     * This method is like `_.isArrayLike` except that it also checks if `value`
	     * is an object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array-like object,
	     *  else `false`.
	     * @example
	     *
	     * _.isArrayLikeObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isArrayLikeObject(document.body.children);
	     * // => true
	     *
	     * _.isArrayLikeObject('abc');
	     * // => false
	     *
	     * _.isArrayLikeObject(_.noop);
	     * // => false
	     */function isArrayLikeObject(value){return isObjectLike(value)&&isArrayLike(value);}/**
	     * Checks if `value` is classified as a boolean primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
	     * @example
	     *
	     * _.isBoolean(false);
	     * // => true
	     *
	     * _.isBoolean(null);
	     * // => false
	     */function isBoolean(value){return value===true||value===false||isObjectLike(value)&&baseGetTag(value)==boolTag;}/**
	     * Checks if `value` is a buffer.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	     * @example
	     *
	     * _.isBuffer(new Buffer(2));
	     * // => true
	     *
	     * _.isBuffer(new Uint8Array(2));
	     * // => false
	     */var isBuffer=nativeIsBuffer||stubFalse;/**
	     * Checks if `value` is classified as a `Date` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
	     * @example
	     *
	     * _.isDate(new Date);
	     * // => true
	     *
	     * _.isDate('Mon April 23 2012');
	     * // => false
	     */var isDate=nodeIsDate?baseUnary(nodeIsDate):baseIsDate;/**
	     * Checks if `value` is likely a DOM element.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
	     * @example
	     *
	     * _.isElement(document.body);
	     * // => true
	     *
	     * _.isElement('<body>');
	     * // => false
	     */function isElement(value){return isObjectLike(value)&&value.nodeType===1&&!isPlainObject(value);}/**
	     * Checks if `value` is an empty object, collection, map, or set.
	     *
	     * Objects are considered empty if they have no own enumerable string keyed
	     * properties.
	     *
	     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
	     * jQuery-like collections are considered empty if they have a `length` of `0`.
	     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	     * @example
	     *
	     * _.isEmpty(null);
	     * // => true
	     *
	     * _.isEmpty(true);
	     * // => true
	     *
	     * _.isEmpty(1);
	     * // => true
	     *
	     * _.isEmpty([1, 2, 3]);
	     * // => false
	     *
	     * _.isEmpty({ 'a': 1 });
	     * // => false
	     */function isEmpty(value){if(value==null){return true;}if(isArrayLike(value)&&(isArray(value)||typeof value=='string'||typeof value.splice=='function'||isBuffer(value)||isTypedArray(value)||isArguments(value))){return!value.length;}var tag=getTag(value);if(tag==mapTag||tag==setTag){return!value.size;}if(isPrototype(value)){return!baseKeys(value).length;}for(var key in value){if(hasOwnProperty.call(value,key)){return false;}}return true;}/**
	     * Performs a deep comparison between two values to determine if they are
	     * equivalent.
	     *
	     * **Note:** This method supports comparing arrays, array buffers, booleans,
	     * date objects, error objects, maps, numbers, `Object` objects, regexes,
	     * sets, strings, symbols, and typed arrays. `Object` objects are compared
	     * by their own, not inherited, enumerable properties. Functions and DOM
	     * nodes are compared by strict equality, i.e. `===`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     * var other = { 'a': 1 };
	     *
	     * _.isEqual(object, other);
	     * // => true
	     *
	     * object === other;
	     * // => false
	     */function isEqual(value,other){return baseIsEqual(value,other);}/**
	     * This method is like `_.isEqual` except that it accepts `customizer` which
	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
	     * are handled by the method instead. The `customizer` is invoked with up to
	     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
	     *
	     * function customizer(objValue, othValue) {
	     *   if (isGreeting(objValue) && isGreeting(othValue)) {
	     *     return true;
	     *   }
	     * }
	     *
	     * var array = ['hello', 'goodbye'];
	     * var other = ['hi', 'goodbye'];
	     *
	     * _.isEqualWith(array, other, customizer);
	     * // => true
	     */function isEqualWith(value,other,customizer){customizer=typeof customizer=='function'?customizer:undefined;var result=customizer?customizer(value,other):undefined;return result===undefined?baseIsEqual(value,other,undefined,customizer):!!result;}/**
	     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
	     * `SyntaxError`, `TypeError`, or `URIError` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
	     * @example
	     *
	     * _.isError(new Error);
	     * // => true
	     *
	     * _.isError(Error);
	     * // => false
	     */function isError(value){if(!isObjectLike(value)){return false;}var tag=baseGetTag(value);return tag==errorTag||tag==domExcTag||typeof value.message=='string'&&typeof value.name=='string'&&!isPlainObject(value);}/**
	     * Checks if `value` is a finite primitive number.
	     *
	     * **Note:** This method is based on
	     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
	     * @example
	     *
	     * _.isFinite(3);
	     * // => true
	     *
	     * _.isFinite(Number.MIN_VALUE);
	     * // => true
	     *
	     * _.isFinite(Infinity);
	     * // => false
	     *
	     * _.isFinite('3');
	     * // => false
	     */function isFinite(value){return typeof value=='number'&&nativeIsFinite(value);}/**
	     * Checks if `value` is classified as a `Function` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	     * @example
	     *
	     * _.isFunction(_);
	     * // => true
	     *
	     * _.isFunction(/abc/);
	     * // => false
	     */function isFunction(value){if(!isObject(value)){return false;}// The use of `Object#toString` avoids issues with the `typeof` operator
	// in Safari 9 which returns 'object' for typed arrays and other constructors.
	var tag=baseGetTag(value);return tag==funcTag||tag==genTag||tag==asyncTag||tag==proxyTag;}/**
	     * Checks if `value` is an integer.
	     *
	     * **Note:** This method is based on
	     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
	     * @example
	     *
	     * _.isInteger(3);
	     * // => true
	     *
	     * _.isInteger(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isInteger(Infinity);
	     * // => false
	     *
	     * _.isInteger('3');
	     * // => false
	     */function isInteger(value){return typeof value=='number'&&value==toInteger(value);}/**
	     * Checks if `value` is a valid array-like length.
	     *
	     * **Note:** This method is loosely based on
	     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	     * @example
	     *
	     * _.isLength(3);
	     * // => true
	     *
	     * _.isLength(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isLength(Infinity);
	     * // => false
	     *
	     * _.isLength('3');
	     * // => false
	     */function isLength(value){return typeof value=='number'&&value>-1&&value%1==0&&value<=MAX_SAFE_INTEGER;}/**
	     * Checks if `value` is the
	     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	     * @example
	     *
	     * _.isObject({});
	     * // => true
	     *
	     * _.isObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isObject(_.noop);
	     * // => true
	     *
	     * _.isObject(null);
	     * // => false
	     */function isObject(value){var type=typeof value==='undefined'?'undefined':_typeof(value);return value!=null&&(type=='object'||type=='function');}/**
	     * Checks if `value` is object-like. A value is object-like if it's not `null`
	     * and has a `typeof` result of "object".
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	     * @example
	     *
	     * _.isObjectLike({});
	     * // => true
	     *
	     * _.isObjectLike([1, 2, 3]);
	     * // => true
	     *
	     * _.isObjectLike(_.noop);
	     * // => false
	     *
	     * _.isObjectLike(null);
	     * // => false
	     */function isObjectLike(value){return value!=null&&(typeof value==='undefined'?'undefined':_typeof(value))=='object';}/**
	     * Checks if `value` is classified as a `Map` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	     * @example
	     *
	     * _.isMap(new Map);
	     * // => true
	     *
	     * _.isMap(new WeakMap);
	     * // => false
	     */var isMap=nodeIsMap?baseUnary(nodeIsMap):baseIsMap;/**
	     * Performs a partial deep comparison between `object` and `source` to
	     * determine if `object` contains equivalent property values.
	     *
	     * **Note:** This method is equivalent to `_.matches` when `source` is
	     * partially applied.
	     *
	     * Partial comparisons will match empty array and empty object `source`
	     * values against any array or object value, respectively. See `_.isEqual`
	     * for a list of supported value comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     *
	     * _.isMatch(object, { 'b': 2 });
	     * // => true
	     *
	     * _.isMatch(object, { 'b': 1 });
	     * // => false
	     */function isMatch(object,source){return object===source||baseIsMatch(object,source,getMatchData(source));}/**
	     * This method is like `_.isMatch` except that it accepts `customizer` which
	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
	     * are handled by the method instead. The `customizer` is invoked with five
	     * arguments: (objValue, srcValue, index|key, object, source).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
	     *
	     * function customizer(objValue, srcValue) {
	     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
	     *     return true;
	     *   }
	     * }
	     *
	     * var object = { 'greeting': 'hello' };
	     * var source = { 'greeting': 'hi' };
	     *
	     * _.isMatchWith(object, source, customizer);
	     * // => true
	     */function isMatchWith(object,source,customizer){customizer=typeof customizer=='function'?customizer:undefined;return baseIsMatch(object,source,getMatchData(source),customizer);}/**
	     * Checks if `value` is `NaN`.
	     *
	     * **Note:** This method is based on
	     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
	     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
	     * `undefined` and other non-number values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	     * @example
	     *
	     * _.isNaN(NaN);
	     * // => true
	     *
	     * _.isNaN(new Number(NaN));
	     * // => true
	     *
	     * isNaN(undefined);
	     * // => true
	     *
	     * _.isNaN(undefined);
	     * // => false
	     */function isNaN(value){// An `NaN` primitive is the only value that is not equal to itself.
	// Perform the `toStringTag` check first to avoid errors with some
	// ActiveX objects in IE.
	return isNumber(value)&&value!=+value;}/**
	     * Checks if `value` is a pristine native function.
	     *
	     * **Note:** This method can't reliably detect native functions in the presence
	     * of the core-js package because core-js circumvents this kind of detection.
	     * Despite multiple requests, the core-js maintainer has made it clear: any
	     * attempt to fix the detection will be obstructed. As a result, we're left
	     * with little choice but to throw an error. Unfortunately, this also affects
	     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
	     * which rely on core-js.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function,
	     *  else `false`.
	     * @example
	     *
	     * _.isNative(Array.prototype.push);
	     * // => true
	     *
	     * _.isNative(_);
	     * // => false
	     */function isNative(value){if(isMaskable(value)){throw new Error(CORE_ERROR_TEXT);}return baseIsNative(value);}/**
	     * Checks if `value` is `null`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
	     * @example
	     *
	     * _.isNull(null);
	     * // => true
	     *
	     * _.isNull(void 0);
	     * // => false
	     */function isNull(value){return value===null;}/**
	     * Checks if `value` is `null` or `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
	     * @example
	     *
	     * _.isNil(null);
	     * // => true
	     *
	     * _.isNil(void 0);
	     * // => true
	     *
	     * _.isNil(NaN);
	     * // => false
	     */function isNil(value){return value==null;}/**
	     * Checks if `value` is classified as a `Number` primitive or object.
	     *
	     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
	     * classified as numbers, use the `_.isFinite` method.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
	     * @example
	     *
	     * _.isNumber(3);
	     * // => true
	     *
	     * _.isNumber(Number.MIN_VALUE);
	     * // => true
	     *
	     * _.isNumber(Infinity);
	     * // => true
	     *
	     * _.isNumber('3');
	     * // => false
	     */function isNumber(value){return typeof value=='number'||isObjectLike(value)&&baseGetTag(value)==numberTag;}/**
	     * Checks if `value` is a plain object, that is, an object created by the
	     * `Object` constructor or one with a `[[Prototype]]` of `null`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.8.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * _.isPlainObject(new Foo);
	     * // => false
	     *
	     * _.isPlainObject([1, 2, 3]);
	     * // => false
	     *
	     * _.isPlainObject({ 'x': 0, 'y': 0 });
	     * // => true
	     *
	     * _.isPlainObject(Object.create(null));
	     * // => true
	     */function isPlainObject(value){if(!isObjectLike(value)||baseGetTag(value)!=objectTag){return false;}var proto=getPrototype(value);if(proto===null){return true;}var Ctor=hasOwnProperty.call(proto,'constructor')&&proto.constructor;return typeof Ctor=='function'&&Ctor instanceof Ctor&&funcToString.call(Ctor)==objectCtorString;}/**
	     * Checks if `value` is classified as a `RegExp` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
	     * @example
	     *
	     * _.isRegExp(/abc/);
	     * // => true
	     *
	     * _.isRegExp('/abc/');
	     * // => false
	     */var isRegExp=nodeIsRegExp?baseUnary(nodeIsRegExp):baseIsRegExp;/**
	     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
	     * double precision number which isn't the result of a rounded unsafe integer.
	     *
	     * **Note:** This method is based on
	     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
	     * @example
	     *
	     * _.isSafeInteger(3);
	     * // => true
	     *
	     * _.isSafeInteger(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isSafeInteger(Infinity);
	     * // => false
	     *
	     * _.isSafeInteger('3');
	     * // => false
	     */function isSafeInteger(value){return isInteger(value)&&value>=-MAX_SAFE_INTEGER&&value<=MAX_SAFE_INTEGER;}/**
	     * Checks if `value` is classified as a `Set` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	     * @example
	     *
	     * _.isSet(new Set);
	     * // => true
	     *
	     * _.isSet(new WeakSet);
	     * // => false
	     */var isSet=nodeIsSet?baseUnary(nodeIsSet):baseIsSet;/**
	     * Checks if `value` is classified as a `String` primitive or object.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
	     * @example
	     *
	     * _.isString('abc');
	     * // => true
	     *
	     * _.isString(1);
	     * // => false
	     */function isString(value){return typeof value=='string'||!isArray(value)&&isObjectLike(value)&&baseGetTag(value)==stringTag;}/**
	     * Checks if `value` is classified as a `Symbol` primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	     * @example
	     *
	     * _.isSymbol(Symbol.iterator);
	     * // => true
	     *
	     * _.isSymbol('abc');
	     * // => false
	     */function isSymbol(value){return(typeof value==='undefined'?'undefined':_typeof(value))=='symbol'||isObjectLike(value)&&baseGetTag(value)==symbolTag;}/**
	     * Checks if `value` is classified as a typed array.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	     * @example
	     *
	     * _.isTypedArray(new Uint8Array);
	     * // => true
	     *
	     * _.isTypedArray([]);
	     * // => false
	     */var isTypedArray=nodeIsTypedArray?baseUnary(nodeIsTypedArray):baseIsTypedArray;/**
	     * Checks if `value` is `undefined`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	     * @example
	     *
	     * _.isUndefined(void 0);
	     * // => true
	     *
	     * _.isUndefined(null);
	     * // => false
	     */function isUndefined(value){return value===undefined;}/**
	     * Checks if `value` is classified as a `WeakMap` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
	     * @example
	     *
	     * _.isWeakMap(new WeakMap);
	     * // => true
	     *
	     * _.isWeakMap(new Map);
	     * // => false
	     */function isWeakMap(value){return isObjectLike(value)&&getTag(value)==weakMapTag;}/**
	     * Checks if `value` is classified as a `WeakSet` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
	     * @example
	     *
	     * _.isWeakSet(new WeakSet);
	     * // => true
	     *
	     * _.isWeakSet(new Set);
	     * // => false
	     */function isWeakSet(value){return isObjectLike(value)&&baseGetTag(value)==weakSetTag;}/**
	     * Checks if `value` is less than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`,
	     *  else `false`.
	     * @see _.gt
	     * @example
	     *
	     * _.lt(1, 3);
	     * // => true
	     *
	     * _.lt(3, 3);
	     * // => false
	     *
	     * _.lt(3, 1);
	     * // => false
	     */var lt=createRelationalOperation(baseLt);/**
	     * Checks if `value` is less than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than or equal to
	     *  `other`, else `false`.
	     * @see _.gte
	     * @example
	     *
	     * _.lte(1, 3);
	     * // => true
	     *
	     * _.lte(3, 3);
	     * // => true
	     *
	     * _.lte(3, 1);
	     * // => false
	     */var lte=createRelationalOperation(function(value,other){return value<=other;});/**
	     * Converts `value` to an array.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the converted array.
	     * @example
	     *
	     * _.toArray({ 'a': 1, 'b': 2 });
	     * // => [1, 2]
	     *
	     * _.toArray('abc');
	     * // => ['a', 'b', 'c']
	     *
	     * _.toArray(1);
	     * // => []
	     *
	     * _.toArray(null);
	     * // => []
	     */function toArray(value){if(!value){return[];}if(isArrayLike(value)){return isString(value)?stringToArray(value):copyArray(value);}if(symIterator&&value[symIterator]){return iteratorToArray(value[symIterator]());}var tag=getTag(value),func=tag==mapTag?mapToArray:tag==setTag?setToArray:values;return func(value);}/**
	     * Converts `value` to a finite number.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.12.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted number.
	     * @example
	     *
	     * _.toFinite(3.2);
	     * // => 3.2
	     *
	     * _.toFinite(Number.MIN_VALUE);
	     * // => 5e-324
	     *
	     * _.toFinite(Infinity);
	     * // => 1.7976931348623157e+308
	     *
	     * _.toFinite('3.2');
	     * // => 3.2
	     */function toFinite(value){if(!value){return value===0?value:0;}value=toNumber(value);if(value===INFINITY||value===-INFINITY){var sign=value<0?-1:1;return sign*MAX_INTEGER;}return value===value?value:0;}/**
	     * Converts `value` to an integer.
	     *
	     * **Note:** This method is loosely based on
	     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toInteger(3.2);
	     * // => 3
	     *
	     * _.toInteger(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toInteger(Infinity);
	     * // => 1.7976931348623157e+308
	     *
	     * _.toInteger('3.2');
	     * // => 3
	     */function toInteger(value){var result=toFinite(value),remainder=result%1;return result===result?remainder?result-remainder:result:0;}/**
	     * Converts `value` to an integer suitable for use as the length of an
	     * array-like object.
	     *
	     * **Note:** This method is based on
	     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toLength(3.2);
	     * // => 3
	     *
	     * _.toLength(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toLength(Infinity);
	     * // => 4294967295
	     *
	     * _.toLength('3.2');
	     * // => 3
	     */function toLength(value){return value?baseClamp(toInteger(value),0,MAX_ARRAY_LENGTH):0;}/**
	     * Converts `value` to a number.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to process.
	     * @returns {number} Returns the number.
	     * @example
	     *
	     * _.toNumber(3.2);
	     * // => 3.2
	     *
	     * _.toNumber(Number.MIN_VALUE);
	     * // => 5e-324
	     *
	     * _.toNumber(Infinity);
	     * // => Infinity
	     *
	     * _.toNumber('3.2');
	     * // => 3.2
	     */function toNumber(value){if(typeof value=='number'){return value;}if(isSymbol(value)){return NAN;}if(isObject(value)){var other=typeof value.valueOf=='function'?value.valueOf():value;value=isObject(other)?other+'':other;}if(typeof value!='string'){return value===0?value:+value;}value=value.replace(reTrim,'');var isBinary=reIsBinary.test(value);return isBinary||reIsOctal.test(value)?freeParseInt(value.slice(2),isBinary?2:8):reIsBadHex.test(value)?NAN:+value;}/**
	     * Converts `value` to a plain object flattening inherited enumerable string
	     * keyed properties of `value` to own properties of the plain object.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Object} Returns the converted plain object.
	     * @example
	     *
	     * function Foo() {
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.assign({ 'a': 1 }, new Foo);
	     * // => { 'a': 1, 'b': 2 }
	     *
	     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	     * // => { 'a': 1, 'b': 2, 'c': 3 }
	     */function toPlainObject(value){return copyObject(value,keysIn(value));}/**
	     * Converts `value` to a safe integer. A safe integer can be compared and
	     * represented correctly.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toSafeInteger(3.2);
	     * // => 3
	     *
	     * _.toSafeInteger(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toSafeInteger(Infinity);
	     * // => 9007199254740991
	     *
	     * _.toSafeInteger('3.2');
	     * // => 3
	     */function toSafeInteger(value){return value?baseClamp(toInteger(value),-MAX_SAFE_INTEGER,MAX_SAFE_INTEGER):value===0?value:0;}/**
	     * Converts `value` to a string. An empty string is returned for `null`
	     * and `undefined` values. The sign of `-0` is preserved.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.toString(null);
	     * // => ''
	     *
	     * _.toString(-0);
	     * // => '-0'
	     *
	     * _.toString([1, 2, 3]);
	     * // => '1,2,3'
	     */function toString(value){return value==null?'':baseToString(value);}/*------------------------------------------------------------------------*//**
	     * Assigns own enumerable string keyed properties of source objects to the
	     * destination object. Source objects are applied from left to right.
	     * Subsequent sources overwrite property assignments of previous sources.
	     *
	     * **Note:** This method mutates `object` and is loosely based on
	     * [`Object.assign`](https://mdn.io/Object/assign).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.10.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.assignIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * function Bar() {
	     *   this.c = 3;
	     * }
	     *
	     * Foo.prototype.b = 2;
	     * Bar.prototype.d = 4;
	     *
	     * _.assign({ 'a': 0 }, new Foo, new Bar);
	     * // => { 'a': 1, 'c': 3 }
	     */var assign=createAssigner(function(object,source){if(isPrototype(source)||isArrayLike(source)){copyObject(source,keys(source),object);return;}for(var key in source){if(hasOwnProperty.call(source,key)){assignValue(object,key,source[key]);}}});/**
	     * This method is like `_.assign` except that it iterates over own and
	     * inherited source properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias extend
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.assign
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * function Bar() {
	     *   this.c = 3;
	     * }
	     *
	     * Foo.prototype.b = 2;
	     * Bar.prototype.d = 4;
	     *
	     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
	     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
	     */var assignIn=createAssigner(function(object,source){copyObject(source,keysIn(source),object);});/**
	     * This method is like `_.assignIn` except that it accepts `customizer`
	     * which is invoked to produce the assigned values. If `customizer` returns
	     * `undefined`, assignment is handled by the method instead. The `customizer`
	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias extendWith
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @see _.assignWith
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   return _.isUndefined(objValue) ? srcValue : objValue;
	     * }
	     *
	     * var defaults = _.partialRight(_.assignInWith, customizer);
	     *
	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */var assignInWith=createAssigner(function(object,source,srcIndex,customizer){copyObject(source,keysIn(source),object,customizer);});/**
	     * This method is like `_.assign` except that it accepts `customizer`
	     * which is invoked to produce the assigned values. If `customizer` returns
	     * `undefined`, assignment is handled by the method instead. The `customizer`
	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @see _.assignInWith
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   return _.isUndefined(objValue) ? srcValue : objValue;
	     * }
	     *
	     * var defaults = _.partialRight(_.assignWith, customizer);
	     *
	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */var assignWith=createAssigner(function(object,source,srcIndex,customizer){copyObject(source,keys(source),object,customizer);});/**
	     * Creates an array of values corresponding to `paths` of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {...(string|string[])} [paths] The property paths to pick.
	     * @returns {Array} Returns the picked values.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	     *
	     * _.at(object, ['a[0].b.c', 'a[1]']);
	     * // => [3, 4]
	     */var at=flatRest(baseAt);/**
	     * Creates an object that inherits from the `prototype` object. If a
	     * `properties` object is given, its own enumerable string keyed properties
	     * are assigned to the created object.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.3.0
	     * @category Object
	     * @param {Object} prototype The object to inherit from.
	     * @param {Object} [properties] The properties to assign to the object.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * function Shape() {
	     *   this.x = 0;
	     *   this.y = 0;
	     * }
	     *
	     * function Circle() {
	     *   Shape.call(this);
	     * }
	     *
	     * Circle.prototype = _.create(Shape.prototype, {
	     *   'constructor': Circle
	     * });
	     *
	     * var circle = new Circle;
	     * circle instanceof Circle;
	     * // => true
	     *
	     * circle instanceof Shape;
	     * // => true
	     */function create(prototype,properties){var result=baseCreate(prototype);return properties==null?result:baseAssign(result,properties);}/**
	     * Assigns own and inherited enumerable string keyed properties of source
	     * objects to the destination object for all destination properties that
	     * resolve to `undefined`. Source objects are applied from left to right.
	     * Once a property is set, additional values of the same property are ignored.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.defaultsDeep
	     * @example
	     *
	     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */var defaults=baseRest(function(object,sources){object=Object(object);var index=-1;var length=sources.length;var guard=length>2?sources[2]:undefined;if(guard&&isIterateeCall(sources[0],sources[1],guard)){length=1;}while(++index<length){var source=sources[index];var props=keysIn(source);var propsIndex=-1;var propsLength=props.length;while(++propsIndex<propsLength){var key=props[propsIndex];var value=object[key];if(value===undefined||eq(value,objectProto[key])&&!hasOwnProperty.call(object,key)){object[key]=source[key];}}}return object;});/**
	     * This method is like `_.defaults` except that it recursively assigns
	     * default properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.defaults
	     * @example
	     *
	     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
	     * // => { 'a': { 'b': 2, 'c': 3 } }
	     */var defaultsDeep=baseRest(function(args){args.push(undefined,customDefaultsMerge);return apply(mergeWith,undefined,args);});/**
	     * This method is like `_.find` except that it returns the key of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {string|undefined} Returns the key of the matched element,
	     *  else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findKey(users, function(o) { return o.age < 40; });
	     * // => 'barney' (iteration order is not guaranteed)
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findKey(users, { 'age': 1, 'active': true });
	     * // => 'pebbles'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findKey(users, ['active', false]);
	     * // => 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findKey(users, 'active');
	     * // => 'barney'
	     */function findKey(object,predicate){return baseFindKey(object,getIteratee(predicate,3),baseForOwn);}/**
	     * This method is like `_.findKey` except that it iterates over elements of
	     * a collection in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {string|undefined} Returns the key of the matched element,
	     *  else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findLastKey(users, function(o) { return o.age < 40; });
	     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findLastKey(users, { 'age': 36, 'active': true });
	     * // => 'barney'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findLastKey(users, ['active', false]);
	     * // => 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findLastKey(users, 'active');
	     * // => 'pebbles'
	     */function findLastKey(object,predicate){return baseFindKey(object,getIteratee(predicate,3),baseForOwnRight);}/**
	     * Iterates over own and inherited enumerable string keyed properties of an
	     * object and invokes `iteratee` for each property. The iteratee is invoked
	     * with three arguments: (value, key, object). Iteratee functions may exit
	     * iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forInRight
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forIn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
	     */function forIn(object,iteratee){return object==null?object:baseFor(object,getIteratee(iteratee,3),keysIn);}/**
	     * This method is like `_.forIn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forInRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
	     */function forInRight(object,iteratee){return object==null?object:baseForRight(object,getIteratee(iteratee,3),keysIn);}/**
	     * Iterates over own enumerable string keyed properties of an object and
	     * invokes `iteratee` for each property. The iteratee is invoked with three
	     * arguments: (value, key, object). Iteratee functions may exit iteration
	     * early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forOwnRight
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	     */function forOwn(object,iteratee){return object&&baseForOwn(object,getIteratee(iteratee,3));}/**
	     * This method is like `_.forOwn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forOwn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwnRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
	     */function forOwnRight(object,iteratee){return object&&baseForOwnRight(object,getIteratee(iteratee,3));}/**
	     * Creates an array of function property names from own enumerable properties
	     * of `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the function names.
	     * @see _.functionsIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
	     *
	     * Foo.prototype.c = _.constant('c');
	     *
	     * _.functions(new Foo);
	     * // => ['a', 'b']
	     */function functions(object){return object==null?[]:baseFunctions(object,keys(object));}/**
	     * Creates an array of function property names from own and inherited
	     * enumerable properties of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the function names.
	     * @see _.functions
	     * @example
	     *
	     * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
	     *
	     * Foo.prototype.c = _.constant('c');
	     *
	     * _.functionsIn(new Foo);
	     * // => ['a', 'b', 'c']
	     */function functionsIn(object){return object==null?[]:baseFunctions(object,keysIn(object));}/**
	     * Gets the value at `path` of `object`. If the resolved value is
	     * `undefined`, the `defaultValue` is returned in its place.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.get(object, 'a[0].b.c');
	     * // => 3
	     *
	     * _.get(object, ['a', '0', 'b', 'c']);
	     * // => 3
	     *
	     * _.get(object, 'a.b.c', 'default');
	     * // => 'default'
	     */function get(object,path,defaultValue){var result=object==null?undefined:baseGet(object,path);return result===undefined?defaultValue:result;}/**
	     * Checks if `path` is a direct property of `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     * @example
	     *
	     * var object = { 'a': { 'b': 2 } };
	     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
	     *
	     * _.has(object, 'a');
	     * // => true
	     *
	     * _.has(object, 'a.b');
	     * // => true
	     *
	     * _.has(object, ['a', 'b']);
	     * // => true
	     *
	     * _.has(other, 'a');
	     * // => false
	     */function has(object,path){return object!=null&&hasPath(object,path,baseHas);}/**
	     * Checks if `path` is a direct or inherited property of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     * @example
	     *
	     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
	     *
	     * _.hasIn(object, 'a');
	     * // => true
	     *
	     * _.hasIn(object, 'a.b');
	     * // => true
	     *
	     * _.hasIn(object, ['a', 'b']);
	     * // => true
	     *
	     * _.hasIn(object, 'b');
	     * // => false
	     */function hasIn(object,path){return object!=null&&hasPath(object,path,baseHasIn);}/**
	     * Creates an object composed of the inverted keys and values of `object`.
	     * If `object` contains duplicate values, subsequent values overwrite
	     * property assignments of previous values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.7.0
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invert(object);
	     * // => { '1': 'c', '2': 'b' }
	     */var invert=createInverter(function(result,value,key){if(value!=null&&typeof value.toString!='function'){value=nativeObjectToString.call(value);}result[value]=key;},constant(identity));/**
	     * This method is like `_.invert` except that the inverted object is generated
	     * from the results of running each element of `object` thru `iteratee`. The
	     * corresponding inverted value of each inverted key is an array of keys
	     * responsible for generating the inverted value. The iteratee is invoked
	     * with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.1.0
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invertBy(object);
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     *
	     * _.invertBy(object, function(value) {
	     *   return 'group' + value;
	     * });
	     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
	     */var invertBy=createInverter(function(result,value,key){if(value!=null&&typeof value.toString!='function'){value=nativeObjectToString.call(value);}if(hasOwnProperty.call(result,value)){result[value].push(key);}else{result[value]=[key];}},getIteratee);/**
	     * Invokes the method at `path` of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
	     *
	     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
	     * // => [2, 3]
	     */var invoke=baseRest(baseInvoke);/**
	     * Creates an array of the own enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects. See the
	     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	     * for more details.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keys(new Foo);
	     * // => ['a', 'b'] (iteration order is not guaranteed)
	     *
	     * _.keys('hi');
	     * // => ['0', '1']
	     */function keys(object){return isArrayLike(object)?arrayLikeKeys(object):baseKeys(object);}/**
	     * Creates an array of the own and inherited enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keysIn(new Foo);
	     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	     */function keysIn(object){return isArrayLike(object)?arrayLikeKeys(object,true):baseKeysIn(object);}/**
	     * The opposite of `_.mapValues`; this method creates an object with the
	     * same values as `object` and keys generated by running each own enumerable
	     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
	     * with three arguments: (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns the new mapped object.
	     * @see _.mapValues
	     * @example
	     *
	     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   return key + value;
	     * });
	     * // => { 'a1': 1, 'b2': 2 }
	     */function mapKeys(object,iteratee){var result={};iteratee=getIteratee(iteratee,3);baseForOwn(object,function(value,key,object){baseAssignValue(result,iteratee(value,key,object),value);});return result;}/**
	     * Creates an object with the same keys as `object` and values generated
	     * by running each own enumerable string keyed property of `object` thru
	     * `iteratee`. The iteratee is invoked with three arguments:
	     * (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns the new mapped object.
	     * @see _.mapKeys
	     * @example
	     *
	     * var users = {
	     *   'fred':    { 'user': 'fred',    'age': 40 },
	     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	     * };
	     *
	     * _.mapValues(users, function(o) { return o.age; });
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.mapValues(users, 'age');
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     */function mapValues(object,iteratee){var result={};iteratee=getIteratee(iteratee,3);baseForOwn(object,function(value,key,object){baseAssignValue(result,key,iteratee(value,key,object));});return result;}/**
	     * This method is like `_.assign` except that it recursively merges own and
	     * inherited enumerable string keyed properties of source objects into the
	     * destination object. Source properties that resolve to `undefined` are
	     * skipped if a destination value exists. Array and plain object properties
	     * are merged recursively. Other objects and value types are overridden by
	     * assignment. Source objects are applied from left to right. Subsequent
	     * sources overwrite property assignments of previous sources.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {
	     *   'a': [{ 'b': 2 }, { 'd': 4 }]
	     * };
	     *
	     * var other = {
	     *   'a': [{ 'c': 3 }, { 'e': 5 }]
	     * };
	     *
	     * _.merge(object, other);
	     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
	     */var merge=createAssigner(function(object,source,srcIndex){baseMerge(object,source,srcIndex);});/**
	     * This method is like `_.merge` except that it accepts `customizer` which
	     * is invoked to produce the merged values of the destination and source
	     * properties. If `customizer` returns `undefined`, merging is handled by the
	     * method instead. The `customizer` is invoked with six arguments:
	     * (objValue, srcValue, key, object, source, stack).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   if (_.isArray(objValue)) {
	     *     return objValue.concat(srcValue);
	     *   }
	     * }
	     *
	     * var object = { 'a': [1], 'b': [2] };
	     * var other = { 'a': [3], 'b': [4] };
	     *
	     * _.mergeWith(object, other, customizer);
	     * // => { 'a': [1, 3], 'b': [2, 4] }
	     */var mergeWith=createAssigner(function(object,source,srcIndex,customizer){baseMerge(object,source,srcIndex,customizer);});/**
	     * The opposite of `_.pick`; this method creates an object composed of the
	     * own and inherited enumerable property paths of `object` that are not omitted.
	     *
	     * **Note:** This method is considerably slower than `_.pick`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {...(string|string[])} [paths] The property paths to omit.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.omit(object, ['a', 'c']);
	     * // => { 'b': '2' }
	     */var omit=flatRest(function(object,paths){var result={};if(object==null){return result;}var isDeep=false;paths=arrayMap(paths,function(path){path=castPath(path,object);isDeep||(isDeep=path.length>1);return path;});copyObject(object,getAllKeysIn(object),result);if(isDeep){result=baseClone(result,CLONE_DEEP_FLAG|CLONE_FLAT_FLAG|CLONE_SYMBOLS_FLAG,customOmitClone);}var length=paths.length;while(length--){baseUnset(result,paths[length]);}return result;});/**
	     * The opposite of `_.pickBy`; this method creates an object composed of
	     * the own and inherited enumerable string keyed properties of `object` that
	     * `predicate` doesn't return truthy for. The predicate is invoked with two
	     * arguments: (value, key).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function} [predicate=_.identity] The function invoked per property.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.omitBy(object, _.isNumber);
	     * // => { 'b': '2' }
	     */function omitBy(object,predicate){return pickBy(object,negate(getIteratee(predicate)));}/**
	     * Creates an object composed of the picked `object` properties.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {...(string|string[])} [paths] The property paths to pick.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.pick(object, ['a', 'c']);
	     * // => { 'a': 1, 'c': 3 }
	     */var pick=flatRest(function(object,paths){return object==null?{}:basePick(object,paths);});/**
	     * Creates an object composed of the `object` properties `predicate` returns
	     * truthy for. The predicate is invoked with two arguments: (value, key).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function} [predicate=_.identity] The function invoked per property.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.pickBy(object, _.isNumber);
	     * // => { 'a': 1, 'c': 3 }
	     */function pickBy(object,predicate){if(object==null){return{};}var props=arrayMap(getAllKeysIn(object),function(prop){return[prop];});predicate=getIteratee(predicate);return basePickBy(object,props,function(value,path){return predicate(value,path[0]);});}/**
	     * This method is like `_.get` except that if the resolved value is a
	     * function it's invoked with the `this` binding of its parent object and
	     * its result is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to resolve.
	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
	     *
	     * _.result(object, 'a[0].b.c1');
	     * // => 3
	     *
	     * _.result(object, 'a[0].b.c2');
	     * // => 4
	     *
	     * _.result(object, 'a[0].b.c3', 'default');
	     * // => 'default'
	     *
	     * _.result(object, 'a[0].b.c3', _.constant('default'));
	     * // => 'default'
	     */function result(object,path,defaultValue){path=castPath(path,object);var index=-1,length=path.length;// Ensure the loop is entered when path is empty.
	if(!length){length=1;object=undefined;}while(++index<length){var value=object==null?undefined:object[toKey(path[index])];if(value===undefined){index=length;value=defaultValue;}object=isFunction(value)?value.call(object):value;}return object;}/**
	     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
	     * it's created. Arrays are created for missing index properties while objects
	     * are created for all other missing properties. Use `_.setWith` to customize
	     * `path` creation.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.set(object, 'a[0].b.c', 4);
	     * console.log(object.a[0].b.c);
	     * // => 4
	     *
	     * _.set(object, ['x', '0', 'y', 'z'], 5);
	     * console.log(object.x[0].y.z);
	     * // => 5
	     */function set(object,path,value){return object==null?object:baseSet(object,path,value);}/**
	     * This method is like `_.set` except that it accepts `customizer` which is
	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	     * path creation is handled by the method instead. The `customizer` is invoked
	     * with three arguments: (nsValue, key, nsObject).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {};
	     *
	     * _.setWith(object, '[0][1]', 'a', Object);
	     * // => { '0': { '1': 'a' } }
	     */function setWith(object,path,value,customizer){customizer=typeof customizer=='function'?customizer:undefined;return object==null?object:baseSet(object,path,value,customizer);}/**
	     * Creates an array of own enumerable string keyed-value pairs for `object`
	     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
	     * entries are returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias entries
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the key-value pairs.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.toPairs(new Foo);
	     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
	     */var toPairs=createToPairs(keys);/**
	     * Creates an array of own and inherited enumerable string keyed-value pairs
	     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
	     * or set, its entries are returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias entriesIn
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the key-value pairs.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.toPairsIn(new Foo);
	     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
	     */var toPairsIn=createToPairs(keysIn);/**
	     * An alternative to `_.reduce`; this method transforms `object` to a new
	     * `accumulator` object which is the result of running each of its own
	     * enumerable string keyed properties thru `iteratee`, with each invocation
	     * potentially mutating the `accumulator` object. If `accumulator` is not
	     * provided, a new object with the same `[[Prototype]]` will be used. The
	     * iteratee is invoked with four arguments: (accumulator, value, key, object).
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The custom accumulator value.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.transform([2, 3, 4], function(result, n) {
	     *   result.push(n *= n);
	     *   return n % 2 == 0;
	     * }, []);
	     * // => [4, 9]
	     *
	     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     * }, {});
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     */function transform(object,iteratee,accumulator){var isArr=isArray(object),isArrLike=isArr||isBuffer(object)||isTypedArray(object);iteratee=getIteratee(iteratee,4);if(accumulator==null){var Ctor=object&&object.constructor;if(isArrLike){accumulator=isArr?new Ctor():[];}else if(isObject(object)){accumulator=isFunction(Ctor)?baseCreate(getPrototype(object)):{};}else{accumulator={};}}(isArrLike?arrayEach:baseForOwn)(object,function(value,index,object){return iteratee(accumulator,value,index,object);});return accumulator;}/**
	     * Removes the property at `path` of `object`.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to unset.
	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
	     * _.unset(object, 'a[0].b.c');
	     * // => true
	     *
	     * console.log(object);
	     * // => { 'a': [{ 'b': {} }] };
	     *
	     * _.unset(object, ['a', '0', 'b', 'c']);
	     * // => true
	     *
	     * console.log(object);
	     * // => { 'a': [{ 'b': {} }] };
	     */function unset(object,path){return object==null?true:baseUnset(object,path);}/**
	     * This method is like `_.set` except that accepts `updater` to produce the
	     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
	     * is invoked with one argument: (value).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {Function} updater The function to produce the updated value.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
	     * console.log(object.a[0].b.c);
	     * // => 9
	     *
	     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
	     * console.log(object.x[0].y.z);
	     * // => 0
	     */function update(object,path,updater){return object==null?object:baseUpdate(object,path,castFunction(updater));}/**
	     * This method is like `_.update` except that it accepts `customizer` which is
	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	     * path creation is handled by the method instead. The `customizer` is invoked
	     * with three arguments: (nsValue, key, nsObject).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {Function} updater The function to produce the updated value.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {};
	     *
	     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
	     * // => { '0': { '1': 'a' } }
	     */function updateWith(object,path,updater,customizer){customizer=typeof customizer=='function'?customizer:undefined;return object==null?object:baseUpdate(object,path,castFunction(updater),customizer);}/**
	     * Creates an array of the own enumerable string keyed property values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.values(new Foo);
	     * // => [1, 2] (iteration order is not guaranteed)
	     *
	     * _.values('hi');
	     * // => ['h', 'i']
	     */function values(object){return object==null?[]:baseValues(object,keys(object));}/**
	     * Creates an array of the own and inherited enumerable string keyed property
	     * values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.valuesIn(new Foo);
	     * // => [1, 2, 3] (iteration order is not guaranteed)
	     */function valuesIn(object){return object==null?[]:baseValues(object,keysIn(object));}/*------------------------------------------------------------------------*//**
	     * Clamps `number` within the inclusive `lower` and `upper` bounds.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Number
	     * @param {number} number The number to clamp.
	     * @param {number} [lower] The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the clamped number.
	     * @example
	     *
	     * _.clamp(-10, -5, 5);
	     * // => -5
	     *
	     * _.clamp(10, -5, 5);
	     * // => 5
	     */function clamp(number,lower,upper){if(upper===undefined){upper=lower;lower=undefined;}if(upper!==undefined){upper=toNumber(upper);upper=upper===upper?upper:0;}if(lower!==undefined){lower=toNumber(lower);lower=lower===lower?lower:0;}return baseClamp(toNumber(number),lower,upper);}/**
	     * Checks if `n` is between `start` and up to, but not including, `end`. If
	     * `end` is not specified, it's set to `start` with `start` then set to `0`.
	     * If `start` is greater than `end` the params are swapped to support
	     * negative ranges.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.3.0
	     * @category Number
	     * @param {number} number The number to check.
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	     * @see _.range, _.rangeRight
	     * @example
	     *
	     * _.inRange(3, 2, 4);
	     * // => true
	     *
	     * _.inRange(4, 8);
	     * // => true
	     *
	     * _.inRange(4, 2);
	     * // => false
	     *
	     * _.inRange(2, 2);
	     * // => false
	     *
	     * _.inRange(1.2, 2);
	     * // => true
	     *
	     * _.inRange(5.2, 4);
	     * // => false
	     *
	     * _.inRange(-3, -2, -6);
	     * // => true
	     */function inRange(number,start,end){start=toFinite(start);if(end===undefined){end=start;start=0;}else{end=toFinite(end);}number=toNumber(number);return baseInRange(number,start,end);}/**
	     * Produces a random number between the inclusive `lower` and `upper` bounds.
	     * If only one argument is provided a number between `0` and the given number
	     * is returned. If `floating` is `true`, or either `lower` or `upper` are
	     * floats, a floating-point number is returned instead of an integer.
	     *
	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
	     * floating-point values which can produce unexpected results.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.7.0
	     * @category Number
	     * @param {number} [lower=0] The lower bound.
	     * @param {number} [upper=1] The upper bound.
	     * @param {boolean} [floating] Specify returning a floating-point number.
	     * @returns {number} Returns the random number.
	     * @example
	     *
	     * _.random(0, 5);
	     * // => an integer between 0 and 5
	     *
	     * _.random(5);
	     * // => also an integer between 0 and 5
	     *
	     * _.random(5, true);
	     * // => a floating-point number between 0 and 5
	     *
	     * _.random(1.2, 5.2);
	     * // => a floating-point number between 1.2 and 5.2
	     */function random(lower,upper,floating){if(floating&&typeof floating!='boolean'&&isIterateeCall(lower,upper,floating)){upper=floating=undefined;}if(floating===undefined){if(typeof upper=='boolean'){floating=upper;upper=undefined;}else if(typeof lower=='boolean'){floating=lower;lower=undefined;}}if(lower===undefined&&upper===undefined){lower=0;upper=1;}else{lower=toFinite(lower);if(upper===undefined){upper=lower;lower=0;}else{upper=toFinite(upper);}}if(lower>upper){var temp=lower;lower=upper;upper=temp;}if(floating||lower%1||upper%1){var rand=nativeRandom();return nativeMin(lower+rand*(upper-lower+freeParseFloat('1e-'+((rand+'').length-1))),upper);}return baseRandom(lower,upper);}/*------------------------------------------------------------------------*//**
	     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the camel cased string.
	     * @example
	     *
	     * _.camelCase('Foo Bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('--foo-bar--');
	     * // => 'fooBar'
	     *
	     * _.camelCase('__FOO_BAR__');
	     * // => 'fooBar'
	     */var camelCase=createCompounder(function(result,word,index){word=word.toLowerCase();return result+(index?capitalize(word):word);});/**
	     * Converts the first character of `string` to upper case and the remaining
	     * to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to capitalize.
	     * @returns {string} Returns the capitalized string.
	     * @example
	     *
	     * _.capitalize('FRED');
	     * // => 'Fred'
	     */function capitalize(string){return upperFirst(toString(string).toLowerCase());}/**
	     * Deburrs `string` by converting
	     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
	     * letters to basic Latin letters and removing
	     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to deburr.
	     * @returns {string} Returns the deburred string.
	     * @example
	     *
	     * _.deburr('déjà vu');
	     * // => 'deja vu'
	     */function deburr(string){string=toString(string);return string&&string.replace(reLatin,deburrLetter).replace(reComboMark,'');}/**
	     * Checks if `string` ends with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=string.length] The position to search up to.
	     * @returns {boolean} Returns `true` if `string` ends with `target`,
	     *  else `false`.
	     * @example
	     *
	     * _.endsWith('abc', 'c');
	     * // => true
	     *
	     * _.endsWith('abc', 'b');
	     * // => false
	     *
	     * _.endsWith('abc', 'b', 2);
	     * // => true
	     */function endsWith(string,target,position){string=toString(string);target=baseToString(target);var length=string.length;position=position===undefined?length:baseClamp(toInteger(position),0,length);var end=position;position-=target.length;return position>=0&&string.slice(position,end)==target;}/**
	     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
	     * corresponding HTML entities.
	     *
	     * **Note:** No other characters are escaped. To escape additional
	     * characters use a third-party library like [_he_](https://mths.be/he).
	     *
	     * Though the ">" character is escaped for symmetry, characters like
	     * ">" and "/" don't need escaping in HTML and have no special meaning
	     * unless they're part of a tag or unquoted attribute value. See
	     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
	     * (under "semi-related fun fact") for more details.
	     *
	     * When working with HTML you should always
	     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
	     * XSS vectors.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escape('fred, barney, & pebbles');
	     * // => 'fred, barney, &amp; pebbles'
	     */function escape(string){string=toString(string);return string&&reHasUnescapedHtml.test(string)?string.replace(reUnescapedHtml,escapeHtmlChar):string;}/**
	     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
	     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escapeRegExp('[lodash](https://lodash.com/)');
	     * // => '\[lodash\]\(https://lodash\.com/\)'
	     */function escapeRegExp(string){string=toString(string);return string&&reHasRegExpChar.test(string)?string.replace(reRegExpChar,'\\$&'):string;}/**
	     * Converts `string` to
	     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the kebab cased string.
	     * @example
	     *
	     * _.kebabCase('Foo Bar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('fooBar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('__FOO_BAR__');
	     * // => 'foo-bar'
	     */var kebabCase=createCompounder(function(result,word,index){return result+(index?'-':'')+word.toLowerCase();});/**
	     * Converts `string`, as space separated words, to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the lower cased string.
	     * @example
	     *
	     * _.lowerCase('--Foo-Bar--');
	     * // => 'foo bar'
	     *
	     * _.lowerCase('fooBar');
	     * // => 'foo bar'
	     *
	     * _.lowerCase('__FOO_BAR__');
	     * // => 'foo bar'
	     */var lowerCase=createCompounder(function(result,word,index){return result+(index?' ':'')+word.toLowerCase();});/**
	     * Converts the first character of `string` to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.lowerFirst('Fred');
	     * // => 'fred'
	     *
	     * _.lowerFirst('FRED');
	     * // => 'fRED'
	     */var lowerFirst=createCaseFirst('toLowerCase');/**
	     * Pads `string` on the left and right sides if it's shorter than `length`.
	     * Padding characters are truncated if they can't be evenly divided by `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.pad('abc', 8);
	     * // => '  abc   '
	     *
	     * _.pad('abc', 8, '_-');
	     * // => '_-abc_-_'
	     *
	     * _.pad('abc', 3);
	     * // => 'abc'
	     */function pad(string,length,chars){string=toString(string);length=toInteger(length);var strLength=length?stringSize(string):0;if(!length||strLength>=length){return string;}var mid=(length-strLength)/2;return createPadding(nativeFloor(mid),chars)+string+createPadding(nativeCeil(mid),chars);}/**
	     * Pads `string` on the right side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padEnd('abc', 6);
	     * // => 'abc   '
	     *
	     * _.padEnd('abc', 6, '_-');
	     * // => 'abc_-_'
	     *
	     * _.padEnd('abc', 3);
	     * // => 'abc'
	     */function padEnd(string,length,chars){string=toString(string);length=toInteger(length);var strLength=length?stringSize(string):0;return length&&strLength<length?string+createPadding(length-strLength,chars):string;}/**
	     * Pads `string` on the left side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padStart('abc', 6);
	     * // => '   abc'
	     *
	     * _.padStart('abc', 6, '_-');
	     * // => '_-_abc'
	     *
	     * _.padStart('abc', 3);
	     * // => 'abc'
	     */function padStart(string,length,chars){string=toString(string);length=toInteger(length);var strLength=length?stringSize(string):0;return length&&strLength<length?createPadding(length-strLength,chars)+string:string;}/**
	     * Converts `string` to an integer of the specified radix. If `radix` is
	     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
	     * hexadecimal, in which case a `radix` of `16` is used.
	     *
	     * **Note:** This method aligns with the
	     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category String
	     * @param {string} string The string to convert.
	     * @param {number} [radix=10] The radix to interpret `value` by.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.parseInt('08');
	     * // => 8
	     *
	     * _.map(['6', '08', '10'], _.parseInt);
	     * // => [6, 8, 10]
	     */function parseInt(string,radix,guard){if(guard||radix==null){radix=0;}else if(radix){radix=+radix;}return nativeParseInt(toString(string).replace(reTrimStart,''),radix||0);}/**
	     * Repeats the given string `n` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to repeat.
	     * @param {number} [n=1] The number of times to repeat the string.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the repeated string.
	     * @example
	     *
	     * _.repeat('*', 3);
	     * // => '***'
	     *
	     * _.repeat('abc', 2);
	     * // => 'abcabc'
	     *
	     * _.repeat('abc', 0);
	     * // => ''
	     */function repeat(string,n,guard){if(guard?isIterateeCall(string,n,guard):n===undefined){n=1;}else{n=toInteger(n);}return baseRepeat(toString(string),n);}/**
	     * Replaces matches for `pattern` in `string` with `replacement`.
	     *
	     * **Note:** This method is based on
	     * [`String#replace`](https://mdn.io/String/replace).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to modify.
	     * @param {RegExp|string} pattern The pattern to replace.
	     * @param {Function|string} replacement The match replacement.
	     * @returns {string} Returns the modified string.
	     * @example
	     *
	     * _.replace('Hi Fred', 'Fred', 'Barney');
	     * // => 'Hi Barney'
	     */function replace(){var args=arguments,string=toString(args[0]);return args.length<3?string:string.replace(args[1],args[2]);}/**
	     * Converts `string` to
	     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the snake cased string.
	     * @example
	     *
	     * _.snakeCase('Foo Bar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('fooBar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('--FOO-BAR--');
	     * // => 'foo_bar'
	     */var snakeCase=createCompounder(function(result,word,index){return result+(index?'_':'')+word.toLowerCase();});/**
	     * Splits `string` by `separator`.
	     *
	     * **Note:** This method is based on
	     * [`String#split`](https://mdn.io/String/split).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to split.
	     * @param {RegExp|string} separator The separator pattern to split by.
	     * @param {number} [limit] The length to truncate results to.
	     * @returns {Array} Returns the string segments.
	     * @example
	     *
	     * _.split('a-b-c', '-', 2);
	     * // => ['a', 'b']
	     */function split(string,separator,limit){if(limit&&typeof limit!='number'&&isIterateeCall(string,separator,limit)){separator=limit=undefined;}limit=limit===undefined?MAX_ARRAY_LENGTH:limit>>>0;if(!limit){return[];}string=toString(string);if(string&&(typeof separator=='string'||separator!=null&&!isRegExp(separator))){separator=baseToString(separator);if(!separator&&hasUnicode(string)){return castSlice(stringToArray(string),0,limit);}}return string.split(separator,limit);}/**
	     * Converts `string` to
	     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.1.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the start cased string.
	     * @example
	     *
	     * _.startCase('--foo-bar--');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('fooBar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('__FOO_BAR__');
	     * // => 'FOO BAR'
	     */var startCase=createCompounder(function(result,word,index){return result+(index?' ':'')+upperFirst(word);});/**
	     * Checks if `string` starts with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=0] The position to search from.
	     * @returns {boolean} Returns `true` if `string` starts with `target`,
	     *  else `false`.
	     * @example
	     *
	     * _.startsWith('abc', 'a');
	     * // => true
	     *
	     * _.startsWith('abc', 'b');
	     * // => false
	     *
	     * _.startsWith('abc', 'b', 1);
	     * // => true
	     */function startsWith(string,target,position){string=toString(string);position=position==null?0:baseClamp(toInteger(position),0,string.length);target=baseToString(target);return string.slice(position,position+target.length)==target;}/**
	     * Creates a compiled template function that can interpolate data properties
	     * in "interpolate" delimiters, HTML-escape interpolated data properties in
	     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
	     * properties may be accessed as free variables in the template. If a setting
	     * object is given, it takes precedence over `_.templateSettings` values.
	     *
	     * **Note:** In the development build `_.template` utilizes
	     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
	     * for easier debugging.
	     *
	     * For more information on precompiling templates see
	     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
	     *
	     * For more information on Chrome extension sandboxes see
	     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The template string.
	     * @param {Object} [options={}] The options object.
	     * @param {RegExp} [options.escape=_.templateSettings.escape]
	     *  The HTML "escape" delimiter.
	     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
	     *  The "evaluate" delimiter.
	     * @param {Object} [options.imports=_.templateSettings.imports]
	     *  An object to import into the template as free variables.
	     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
	     *  The "interpolate" delimiter.
	     * @param {string} [options.sourceURL='lodash.templateSources[n]']
	     *  The sourceURL of the compiled template.
	     * @param {string} [options.variable='obj']
	     *  The data object variable name.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the compiled template function.
	     * @example
	     *
	     * // Use the "interpolate" delimiter to create a compiled template.
	     * var compiled = _.template('hello <%= user %>!');
	     * compiled({ 'user': 'fred' });
	     * // => 'hello fred!'
	     *
	     * // Use the HTML "escape" delimiter to escape data property values.
	     * var compiled = _.template('<b><%- value %></b>');
	     * compiled({ 'value': '<script>' });
	     * // => '<b>&lt;script&gt;</b>'
	     *
	     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
	     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // Use the internal `print` function in "evaluate" delimiters.
	     * var compiled = _.template('<% print("hello " + user); %>!');
	     * compiled({ 'user': 'barney' });
	     * // => 'hello barney!'
	     *
	     * // Use the ES template literal delimiter as an "interpolate" delimiter.
	     * // Disable support by replacing the "interpolate" delimiter.
	     * var compiled = _.template('hello ${ user }!');
	     * compiled({ 'user': 'pebbles' });
	     * // => 'hello pebbles!'
	     *
	     * // Use backslashes to treat delimiters as plain text.
	     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
	     * compiled({ 'value': 'ignored' });
	     * // => '<%- value %>'
	     *
	     * // Use the `imports` option to import `jQuery` as `jq`.
	     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
	     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
	     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
	     * compiled(data);
	     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
	     *
	     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
	     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
	     * compiled.source;
	     * // => function(data) {
	     * //   var __t, __p = '';
	     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
	     * //   return __p;
	     * // }
	     *
	     * // Use custom template delimiters.
	     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
	     * var compiled = _.template('hello {{ user }}!');
	     * compiled({ 'user': 'mustache' });
	     * // => 'hello mustache!'
	     *
	     * // Use the `source` property to inline compiled templates for meaningful
	     * // line numbers in error messages and stack traces.
	     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
	     *   var JST = {\
	     *     "main": ' + _.template(mainText).source + '\
	     *   };\
	     * ');
	     */function template(string,options,guard){// Based on John Resig's `tmpl` implementation
	// (http://ejohn.org/blog/javascript-micro-templating/)
	// and Laura Doktorova's doT.js (https://github.com/olado/doT).
	var settings=lodash.templateSettings;if(guard&&isIterateeCall(string,options,guard)){options=undefined;}string=toString(string);options=assignInWith({},options,settings,customDefaultsAssignIn);var imports=assignInWith({},options.imports,settings.imports,customDefaultsAssignIn),importsKeys=keys(imports),importsValues=baseValues(imports,importsKeys);var isEscaping,isEvaluating,index=0,interpolate=options.interpolate||reNoMatch,source="__p += '";// Compile the regexp to match each delimiter.
	var reDelimiters=RegExp((options.escape||reNoMatch).source+'|'+interpolate.source+'|'+(interpolate===reInterpolate?reEsTemplate:reNoMatch).source+'|'+(options.evaluate||reNoMatch).source+'|$','g');// Use a sourceURL for easier debugging.
	var sourceURL='//# sourceURL='+('sourceURL'in options?options.sourceURL:'lodash.templateSources['+ ++templateCounter+']')+'\n';string.replace(reDelimiters,function(match,escapeValue,interpolateValue,esTemplateValue,evaluateValue,offset){interpolateValue||(interpolateValue=esTemplateValue);// Escape characters that can't be included in string literals.
	source+=string.slice(index,offset).replace(reUnescapedString,escapeStringChar);// Replace delimiters with snippets.
	if(escapeValue){isEscaping=true;source+="' +\n__e("+escapeValue+") +\n'";}if(evaluateValue){isEvaluating=true;source+="';\n"+evaluateValue+";\n__p += '";}if(interpolateValue){source+="' +\n((__t = ("+interpolateValue+")) == null ? '' : __t) +\n'";}index=offset+match.length;// The JS engine embedded in Adobe products needs `match` returned in
	// order to produce the correct `offset` value.
	return match;});source+="';\n";// If `variable` is not specified wrap a with-statement around the generated
	// code to add the data object to the top of the scope chain.
	var variable=options.variable;if(!variable){source='with (obj) {\n'+source+'\n}\n';}// Cleanup code by stripping empty strings.
	source=(isEvaluating?source.replace(reEmptyStringLeading,''):source).replace(reEmptyStringMiddle,'$1').replace(reEmptyStringTrailing,'$1;');// Frame code as the function body.
	source='function('+(variable||'obj')+') {\n'+(variable?'':'obj || (obj = {});\n')+"var __t, __p = ''"+(isEscaping?', __e = _.escape':'')+(isEvaluating?', __j = Array.prototype.join;\n'+"function print() { __p += __j.call(arguments, '') }\n":';\n')+source+'return __p\n}';var result=attempt(function(){return Function(importsKeys,sourceURL+'return '+source).apply(undefined,importsValues);});// Provide the compiled function's source by its `toString` method or
	// the `source` property as a convenience for inlining compiled templates.
	result.source=source;if(isError(result)){throw result;}return result;}/**
	     * Converts `string`, as a whole, to lower case just like
	     * [String#toLowerCase](https://mdn.io/toLowerCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the lower cased string.
	     * @example
	     *
	     * _.toLower('--Foo-Bar--');
	     * // => '--foo-bar--'
	     *
	     * _.toLower('fooBar');
	     * // => 'foobar'
	     *
	     * _.toLower('__FOO_BAR__');
	     * // => '__foo_bar__'
	     */function toLower(value){return toString(value).toLowerCase();}/**
	     * Converts `string`, as a whole, to upper case just like
	     * [String#toUpperCase](https://mdn.io/toUpperCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the upper cased string.
	     * @example
	     *
	     * _.toUpper('--foo-bar--');
	     * // => '--FOO-BAR--'
	     *
	     * _.toUpper('fooBar');
	     * // => 'FOOBAR'
	     *
	     * _.toUpper('__foo_bar__');
	     * // => '__FOO_BAR__'
	     */function toUpper(value){return toString(value).toUpperCase();}/**
	     * Removes leading and trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trim('  abc  ');
	     * // => 'abc'
	     *
	     * _.trim('-_-abc-_-', '_-');
	     * // => 'abc'
	     *
	     * _.map(['  foo  ', '  bar  '], _.trim);
	     * // => ['foo', 'bar']
	     */function trim(string,chars,guard){string=toString(string);if(string&&(guard||chars===undefined)){return string.replace(reTrim,'');}if(!string||!(chars=baseToString(chars))){return string;}var strSymbols=stringToArray(string),chrSymbols=stringToArray(chars),start=charsStartIndex(strSymbols,chrSymbols),end=charsEndIndex(strSymbols,chrSymbols)+1;return castSlice(strSymbols,start,end).join('');}/**
	     * Removes trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimEnd('  abc  ');
	     * // => '  abc'
	     *
	     * _.trimEnd('-_-abc-_-', '_-');
	     * // => '-_-abc'
	     */function trimEnd(string,chars,guard){string=toString(string);if(string&&(guard||chars===undefined)){return string.replace(reTrimEnd,'');}if(!string||!(chars=baseToString(chars))){return string;}var strSymbols=stringToArray(string),end=charsEndIndex(strSymbols,stringToArray(chars))+1;return castSlice(strSymbols,0,end).join('');}/**
	     * Removes leading whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimStart('  abc  ');
	     * // => 'abc  '
	     *
	     * _.trimStart('-_-abc-_-', '_-');
	     * // => 'abc-_-'
	     */function trimStart(string,chars,guard){string=toString(string);if(string&&(guard||chars===undefined)){return string.replace(reTrimStart,'');}if(!string||!(chars=baseToString(chars))){return string;}var strSymbols=stringToArray(string),start=charsStartIndex(strSymbols,stringToArray(chars));return castSlice(strSymbols,start).join('');}/**
	     * Truncates `string` if it's longer than the given maximum string length.
	     * The last characters of the truncated string are replaced with the omission
	     * string which defaults to "...".
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to truncate.
	     * @param {Object} [options={}] The options object.
	     * @param {number} [options.length=30] The maximum string length.
	     * @param {string} [options.omission='...'] The string to indicate text is omitted.
	     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
	     * @returns {string} Returns the truncated string.
	     * @example
	     *
	     * _.truncate('hi-diddly-ho there, neighborino');
	     * // => 'hi-diddly-ho there, neighbo...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': ' '
	     * });
	     * // => 'hi-diddly-ho there,...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': /,? +/
	     * });
	     * // => 'hi-diddly-ho there...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'omission': ' [...]'
	     * });
	     * // => 'hi-diddly-ho there, neig [...]'
	     */function truncate(string,options){var length=DEFAULT_TRUNC_LENGTH,omission=DEFAULT_TRUNC_OMISSION;if(isObject(options)){var separator='separator'in options?options.separator:separator;length='length'in options?toInteger(options.length):length;omission='omission'in options?baseToString(options.omission):omission;}string=toString(string);var strLength=string.length;if(hasUnicode(string)){var strSymbols=stringToArray(string);strLength=strSymbols.length;}if(length>=strLength){return string;}var end=length-stringSize(omission);if(end<1){return omission;}var result=strSymbols?castSlice(strSymbols,0,end).join(''):string.slice(0,end);if(separator===undefined){return result+omission;}if(strSymbols){end+=result.length-end;}if(isRegExp(separator)){if(string.slice(end).search(separator)){var match,substring=result;if(!separator.global){separator=RegExp(separator.source,toString(reFlags.exec(separator))+'g');}separator.lastIndex=0;while(match=separator.exec(substring)){var newEnd=match.index;}result=result.slice(0,newEnd===undefined?end:newEnd);}}else if(string.indexOf(baseToString(separator),end)!=end){var index=result.lastIndexOf(separator);if(index>-1){result=result.slice(0,index);}}return result+omission;}/**
	     * The inverse of `_.escape`; this method converts the HTML entities
	     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
	     * their corresponding characters.
	     *
	     * **Note:** No other HTML entities are unescaped. To unescape additional
	     * HTML entities use a third-party library like [_he_](https://mths.be/he).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.6.0
	     * @category String
	     * @param {string} [string=''] The string to unescape.
	     * @returns {string} Returns the unescaped string.
	     * @example
	     *
	     * _.unescape('fred, barney, &amp; pebbles');
	     * // => 'fred, barney, & pebbles'
	     */function unescape(string){string=toString(string);return string&&reHasEscapedHtml.test(string)?string.replace(reEscapedHtml,unescapeHtmlChar):string;}/**
	     * Converts `string`, as space separated words, to upper case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the upper cased string.
	     * @example
	     *
	     * _.upperCase('--foo-bar');
	     * // => 'FOO BAR'
	     *
	     * _.upperCase('fooBar');
	     * // => 'FOO BAR'
	     *
	     * _.upperCase('__foo_bar__');
	     * // => 'FOO BAR'
	     */var upperCase=createCompounder(function(result,word,index){return result+(index?' ':'')+word.toUpperCase();});/**
	     * Converts the first character of `string` to upper case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.upperFirst('fred');
	     * // => 'Fred'
	     *
	     * _.upperFirst('FRED');
	     * // => 'FRED'
	     */var upperFirst=createCaseFirst('toUpperCase');/**
	     * Splits `string` into an array of its words.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {RegExp|string} [pattern] The pattern to match words.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the words of `string`.
	     * @example
	     *
	     * _.words('fred, barney, & pebbles');
	     * // => ['fred', 'barney', 'pebbles']
	     *
	     * _.words('fred, barney, & pebbles', /[^, ]+/g);
	     * // => ['fred', 'barney', '&', 'pebbles']
	     */function words(string,pattern,guard){string=toString(string);pattern=guard?undefined:pattern;if(pattern===undefined){return hasUnicodeWord(string)?unicodeWords(string):asciiWords(string);}return string.match(pattern)||[];}/*------------------------------------------------------------------------*//**
	     * Attempts to invoke `func`, returning either the result or the caught error
	     * object. Any additional arguments are provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Function} func The function to attempt.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {*} Returns the `func` result or error object.
	     * @example
	     *
	     * // Avoid throwing errors for invalid selectors.
	     * var elements = _.attempt(function(selector) {
	     *   return document.querySelectorAll(selector);
	     * }, '>_>');
	     *
	     * if (_.isError(elements)) {
	     *   elements = [];
	     * }
	     */var attempt=baseRest(function(func,args){try{return apply(func,undefined,args);}catch(e){return isError(e)?e:new Error(e);}});/**
	     * Binds methods of an object to the object itself, overwriting the existing
	     * method.
	     *
	     * **Note:** This method doesn't set the "length" property of bound functions.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {Object} object The object to bind and assign the bound methods to.
	     * @param {...(string|string[])} methodNames The object method names to bind.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var view = {
	     *   'label': 'docs',
	     *   'click': function() {
	     *     console.log('clicked ' + this.label);
	     *   }
	     * };
	     *
	     * _.bindAll(view, ['click']);
	     * jQuery(element).on('click', view.click);
	     * // => Logs 'clicked docs' when clicked.
	     */var bindAll=flatRest(function(object,methodNames){arrayEach(methodNames,function(key){key=toKey(key);baseAssignValue(object,key,bind(object[key],object));});return object;});/**
	     * Creates a function that iterates over `pairs` and invokes the corresponding
	     * function of the first predicate to return truthy. The predicate-function
	     * pairs are invoked with the `this` binding and arguments of the created
	     * function.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {Array} pairs The predicate-function pairs.
	     * @returns {Function} Returns the new composite function.
	     * @example
	     *
	     * var func = _.cond([
	     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
	     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
	     *   [_.stubTrue,                      _.constant('no match')]
	     * ]);
	     *
	     * func({ 'a': 1, 'b': 2 });
	     * // => 'matches A'
	     *
	     * func({ 'a': 0, 'b': 1 });
	     * // => 'matches B'
	     *
	     * func({ 'a': '1', 'b': '2' });
	     * // => 'no match'
	     */function cond(pairs){var length=pairs==null?0:pairs.length,toIteratee=getIteratee();pairs=!length?[]:arrayMap(pairs,function(pair){if(typeof pair[1]!='function'){throw new TypeError(FUNC_ERROR_TEXT);}return[toIteratee(pair[0]),pair[1]];});return baseRest(function(args){var index=-1;while(++index<length){var pair=pairs[index];if(apply(pair[0],this,args)){return apply(pair[1],this,args);}}});}/**
	     * Creates a function that invokes the predicate properties of `source` with
	     * the corresponding property values of a given object, returning `true` if
	     * all predicates return truthy, else `false`.
	     *
	     * **Note:** The created function is equivalent to `_.conformsTo` with
	     * `source` partially applied.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 2, 'b': 1 },
	     *   { 'a': 1, 'b': 2 }
	     * ];
	     *
	     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
	     * // => [{ 'a': 1, 'b': 2 }]
	     */function conforms(source){return baseConforms(baseClone(source,CLONE_DEEP_FLAG));}/**
	     * Creates a function that returns `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Util
	     * @param {*} value The value to return from the new function.
	     * @returns {Function} Returns the new constant function.
	     * @example
	     *
	     * var objects = _.times(2, _.constant({ 'a': 1 }));
	     *
	     * console.log(objects);
	     * // => [{ 'a': 1 }, { 'a': 1 }]
	     *
	     * console.log(objects[0] === objects[1]);
	     * // => true
	     */function constant(value){return function(){return value;};}/**
	     * Checks `value` to determine whether a default value should be returned in
	     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
	     * or `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.14.0
	     * @category Util
	     * @param {*} value The value to check.
	     * @param {*} defaultValue The default value.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * _.defaultTo(1, 10);
	     * // => 1
	     *
	     * _.defaultTo(undefined, 10);
	     * // => 10
	     */function defaultTo(value,defaultValue){return value==null||value!==value?defaultValue:value;}/**
	     * Creates a function that returns the result of invoking the given functions
	     * with the `this` binding of the created function, where each successive
	     * invocation is supplied the return value of the previous.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [funcs] The functions to invoke.
	     * @returns {Function} Returns the new composite function.
	     * @see _.flowRight
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flow([_.add, square]);
	     * addSquare(1, 2);
	     * // => 9
	     */var flow=createFlow();/**
	     * This method is like `_.flow` except that it creates a function that
	     * invokes the given functions from right to left.
	     *
	     * @static
	     * @since 3.0.0
	     * @memberOf _
	     * @category Util
	     * @param {...(Function|Function[])} [funcs] The functions to invoke.
	     * @returns {Function} Returns the new composite function.
	     * @see _.flow
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flowRight([square, _.add]);
	     * addSquare(1, 2);
	     * // => 9
	     */var flowRight=createFlow(true);/**
	     * This method returns the first argument it receives.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {*} value Any value.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     *
	     * console.log(_.identity(object) === object);
	     * // => true
	     */function identity(value){return value;}/**
	     * Creates a function that invokes `func` with the arguments of the created
	     * function. If `func` is a property name, the created function returns the
	     * property value for a given element. If `func` is an array or object, the
	     * created function returns `true` for elements that contain the equivalent
	     * source properties, otherwise it returns `false`.
	     *
	     * @static
	     * @since 4.0.0
	     * @memberOf _
	     * @category Util
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @returns {Function} Returns the callback.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
	     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.filter(users, _.iteratee(['user', 'fred']));
	     * // => [{ 'user': 'fred', 'age': 40 }]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.map(users, _.iteratee('user'));
	     * // => ['barney', 'fred']
	     *
	     * // Create custom iteratee shorthands.
	     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
	     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
	     *     return func.test(string);
	     *   };
	     * });
	     *
	     * _.filter(['abc', 'def'], /ef/);
	     * // => ['def']
	     */function iteratee(func){return baseIteratee(typeof func=='function'?func:baseClone(func,CLONE_DEEP_FLAG));}/**
	     * Creates a function that performs a partial deep comparison between a given
	     * object and `source`, returning `true` if the given object has equivalent
	     * property values, else `false`.
	     *
	     * **Note:** The created function is equivalent to `_.isMatch` with `source`
	     * partially applied.
	     *
	     * Partial comparisons will match empty array and empty object `source`
	     * values against any array or object value, respectively. See `_.isEqual`
	     * for a list of supported value comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 1, 'b': 2, 'c': 3 },
	     *   { 'a': 4, 'b': 5, 'c': 6 }
	     * ];
	     *
	     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
	     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
	     */function matches(source){return baseMatches(baseClone(source,CLONE_DEEP_FLAG));}/**
	     * Creates a function that performs a partial deep comparison between the
	     * value at `path` of a given object to `srcValue`, returning `true` if the
	     * object value is equivalent, else `false`.
	     *
	     * **Note:** Partial comparisons will match empty array and empty object
	     * `srcValue` values against any array or object value, respectively. See
	     * `_.isEqual` for a list of supported value comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Util
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 1, 'b': 2, 'c': 3 },
	     *   { 'a': 4, 'b': 5, 'c': 6 }
	     * ];
	     *
	     * _.find(objects, _.matchesProperty('a', 4));
	     * // => { 'a': 4, 'b': 5, 'c': 6 }
	     */function matchesProperty(path,srcValue){return baseMatchesProperty(path,baseClone(srcValue,CLONE_DEEP_FLAG));}/**
	     * Creates a function that invokes the method at `path` of a given object.
	     * Any additional arguments are provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Util
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new invoker function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': _.constant(2) } },
	     *   { 'a': { 'b': _.constant(1) } }
	     * ];
	     *
	     * _.map(objects, _.method('a.b'));
	     * // => [2, 1]
	     *
	     * _.map(objects, _.method(['a', 'b']));
	     * // => [2, 1]
	     */var method=baseRest(function(path,args){return function(object){return baseInvoke(object,path,args);};});/**
	     * The opposite of `_.method`; this method creates a function that invokes
	     * the method at a given path of `object`. Any additional arguments are
	     * provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Util
	     * @param {Object} object The object to query.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new invoker function.
	     * @example
	     *
	     * var array = _.times(3, _.constant),
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
	     * // => [2, 0]
	     */var methodOf=baseRest(function(object,args){return function(path){return baseInvoke(object,path,args);};});/**
	     * Adds all own enumerable string keyed function properties of a source
	     * object to the destination object. If `object` is a function, then methods
	     * are added to its prototype as well.
	     *
	     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
	     * avoid conflicts caused by modifying the original.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {Function|Object} [object=lodash] The destination object.
	     * @param {Object} source The object of functions to add.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
	     * @returns {Function|Object} Returns `object`.
	     * @example
	     *
	     * function vowels(string) {
	     *   return _.filter(string, function(v) {
	     *     return /[aeiou]/i.test(v);
	     *   });
	     * }
	     *
	     * _.mixin({ 'vowels': vowels });
	     * _.vowels('fred');
	     * // => ['e']
	     *
	     * _('fred').vowels().value();
	     * // => ['e']
	     *
	     * _.mixin({ 'vowels': vowels }, { 'chain': false });
	     * _('fred').vowels();
	     * // => ['e']
	     */function mixin(object,source,options){var props=keys(source),methodNames=baseFunctions(source,props);if(options==null&&!(isObject(source)&&(methodNames.length||!props.length))){options=source;source=object;object=this;methodNames=baseFunctions(source,keys(source));}var chain=!(isObject(options)&&'chain'in options)||!!options.chain,isFunc=isFunction(object);arrayEach(methodNames,function(methodName){var func=source[methodName];object[methodName]=func;if(isFunc){object.prototype[methodName]=function(){var chainAll=this.__chain__;if(chain||chainAll){var result=object(this.__wrapped__),actions=result.__actions__=copyArray(this.__actions__);actions.push({'func':func,'args':arguments,'thisArg':object});result.__chain__=chainAll;return result;}return func.apply(object,arrayPush([this.value()],arguments));};}});return object;}/**
	     * Reverts the `_` variable to its previous value and returns a reference to
	     * the `lodash` function.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @returns {Function} Returns the `lodash` function.
	     * @example
	     *
	     * var lodash = _.noConflict();
	     */function noConflict(){if(root._===this){root._=oldDash;}return this;}/**
	     * This method returns `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.3.0
	     * @category Util
	     * @example
	     *
	     * _.times(2, _.noop);
	     * // => [undefined, undefined]
	     */function noop(){}// No operation performed.
	/**
	     * Creates a function that gets the argument at index `n`. If `n` is negative,
	     * the nth argument from the end is returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {number} [n=0] The index of the argument to return.
	     * @returns {Function} Returns the new pass-thru function.
	     * @example
	     *
	     * var func = _.nthArg(1);
	     * func('a', 'b', 'c', 'd');
	     * // => 'b'
	     *
	     * var func = _.nthArg(-2);
	     * func('a', 'b', 'c', 'd');
	     * // => 'c'
	     */function nthArg(n){n=toInteger(n);return baseRest(function(args){return baseNth(args,n);});}/**
	     * Creates a function that invokes `iteratees` with the arguments it receives
	     * and returns their results.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [iteratees=[_.identity]]
	     *  The iteratees to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.over([Math.max, Math.min]);
	     *
	     * func(1, 2, 3, 4);
	     * // => [4, 1]
	     */var over=createOver(arrayMap);/**
	     * Creates a function that checks if **all** of the `predicates` return
	     * truthy when invoked with the arguments it receives.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [predicates=[_.identity]]
	     *  The predicates to check.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.overEvery([Boolean, isFinite]);
	     *
	     * func('1');
	     * // => true
	     *
	     * func(null);
	     * // => false
	     *
	     * func(NaN);
	     * // => false
	     */var overEvery=createOver(arrayEvery);/**
	     * Creates a function that checks if **any** of the `predicates` return
	     * truthy when invoked with the arguments it receives.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [predicates=[_.identity]]
	     *  The predicates to check.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.overSome([Boolean, isFinite]);
	     *
	     * func('1');
	     * // => true
	     *
	     * func(null);
	     * // => true
	     *
	     * func(NaN);
	     * // => false
	     */var overSome=createOver(arraySome);/**
	     * Creates a function that returns the value at `path` of a given object.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Util
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new accessor function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': 2 } },
	     *   { 'a': { 'b': 1 } }
	     * ];
	     *
	     * _.map(objects, _.property('a.b'));
	     * // => [2, 1]
	     *
	     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
	     * // => [1, 2]
	     */function property(path){return isKey(path)?baseProperty(toKey(path)):basePropertyDeep(path);}/**
	     * The opposite of `_.property`; this method creates a function that returns
	     * the value at a given path of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Object} object The object to query.
	     * @returns {Function} Returns the new accessor function.
	     * @example
	     *
	     * var array = [0, 1, 2],
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
	     * // => [2, 0]
	     */function propertyOf(object){return function(path){return object==null?undefined:baseGet(object,path);};}/**
	     * Creates an array of numbers (positive and/or negative) progressing from
	     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
	     * `start` is specified without an `end` or `step`. If `end` is not specified,
	     * it's set to `start` with `start` then set to `0`.
	     *
	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
	     * floating-point values which can produce unexpected results.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the range of numbers.
	     * @see _.inRange, _.rangeRight
	     * @example
	     *
	     * _.range(4);
	     * // => [0, 1, 2, 3]
	     *
	     * _.range(-4);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 5);
	     * // => [1, 2, 3, 4]
	     *
	     * _.range(0, 20, 5);
	     * // => [0, 5, 10, 15]
	     *
	     * _.range(0, -4, -1);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.range(0);
	     * // => []
	     */var range=createRange();/**
	     * This method is like `_.range` except that it populates values in
	     * descending order.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the range of numbers.
	     * @see _.inRange, _.range
	     * @example
	     *
	     * _.rangeRight(4);
	     * // => [3, 2, 1, 0]
	     *
	     * _.rangeRight(-4);
	     * // => [-3, -2, -1, 0]
	     *
	     * _.rangeRight(1, 5);
	     * // => [4, 3, 2, 1]
	     *
	     * _.rangeRight(0, 20, 5);
	     * // => [15, 10, 5, 0]
	     *
	     * _.rangeRight(0, -4, -1);
	     * // => [-3, -2, -1, 0]
	     *
	     * _.rangeRight(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.rangeRight(0);
	     * // => []
	     */var rangeRight=createRange(true);/**
	     * This method returns a new empty array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {Array} Returns the new empty array.
	     * @example
	     *
	     * var arrays = _.times(2, _.stubArray);
	     *
	     * console.log(arrays);
	     * // => [[], []]
	     *
	     * console.log(arrays[0] === arrays[1]);
	     * // => false
	     */function stubArray(){return[];}/**
	     * This method returns `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {boolean} Returns `false`.
	     * @example
	     *
	     * _.times(2, _.stubFalse);
	     * // => [false, false]
	     */function stubFalse(){return false;}/**
	     * This method returns a new empty object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {Object} Returns the new empty object.
	     * @example
	     *
	     * var objects = _.times(2, _.stubObject);
	     *
	     * console.log(objects);
	     * // => [{}, {}]
	     *
	     * console.log(objects[0] === objects[1]);
	     * // => false
	     */function stubObject(){return{};}/**
	     * This method returns an empty string.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {string} Returns the empty string.
	     * @example
	     *
	     * _.times(2, _.stubString);
	     * // => ['', '']
	     */function stubString(){return'';}/**
	     * This method returns `true`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {boolean} Returns `true`.
	     * @example
	     *
	     * _.times(2, _.stubTrue);
	     * // => [true, true]
	     */function stubTrue(){return true;}/**
	     * Invokes the iteratee `n` times, returning an array of the results of
	     * each invocation. The iteratee is invoked with one argument; (index).
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {number} n The number of times to invoke `iteratee`.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.times(3, String);
	     * // => ['0', '1', '2']
	     *
	     *  _.times(4, _.constant(0));
	     * // => [0, 0, 0, 0]
	     */function times(n,iteratee){n=toInteger(n);if(n<1||n>MAX_SAFE_INTEGER){return[];}var index=MAX_ARRAY_LENGTH,length=nativeMin(n,MAX_ARRAY_LENGTH);iteratee=getIteratee(iteratee);n-=MAX_ARRAY_LENGTH;var result=baseTimes(length,iteratee);while(++index<n){iteratee(index);}return result;}/**
	     * Converts `value` to a property path array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the new property path array.
	     * @example
	     *
	     * _.toPath('a.b.c');
	     * // => ['a', 'b', 'c']
	     *
	     * _.toPath('a[0].b.c');
	     * // => ['a', '0', 'b', 'c']
	     */function toPath(value){if(isArray(value)){return arrayMap(value,toKey);}return isSymbol(value)?[value]:copyArray(stringToPath(toString(value)));}/**
	     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {string} [prefix=''] The value to prefix the ID with.
	     * @returns {string} Returns the unique ID.
	     * @example
	     *
	     * _.uniqueId('contact_');
	     * // => 'contact_104'
	     *
	     * _.uniqueId();
	     * // => '105'
	     */function uniqueId(prefix){var id=++idCounter;return toString(prefix)+id;}/*------------------------------------------------------------------------*//**
	     * Adds two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.4.0
	     * @category Math
	     * @param {number} augend The first number in an addition.
	     * @param {number} addend The second number in an addition.
	     * @returns {number} Returns the total.
	     * @example
	     *
	     * _.add(6, 4);
	     * // => 10
	     */var add=createMathOperation(function(augend,addend){return augend+addend;},0);/**
	     * Computes `number` rounded up to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round up.
	     * @param {number} [precision=0] The precision to round up to.
	     * @returns {number} Returns the rounded up number.
	     * @example
	     *
	     * _.ceil(4.006);
	     * // => 5
	     *
	     * _.ceil(6.004, 2);
	     * // => 6.01
	     *
	     * _.ceil(6040, -2);
	     * // => 6100
	     */var ceil=createRound('ceil');/**
	     * Divide two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {number} dividend The first number in a division.
	     * @param {number} divisor The second number in a division.
	     * @returns {number} Returns the quotient.
	     * @example
	     *
	     * _.divide(6, 4);
	     * // => 1.5
	     */var divide=createMathOperation(function(dividend,divisor){return dividend/divisor;},1);/**
	     * Computes `number` rounded down to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round down.
	     * @param {number} [precision=0] The precision to round down to.
	     * @returns {number} Returns the rounded down number.
	     * @example
	     *
	     * _.floor(4.006);
	     * // => 4
	     *
	     * _.floor(0.046, 2);
	     * // => 0.04
	     *
	     * _.floor(4060, -2);
	     * // => 4000
	     */var floor=createRound('floor');/**
	     * Computes the maximum value of `array`. If `array` is empty or falsey,
	     * `undefined` is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * _.max([4, 2, 8, 6]);
	     * // => 8
	     *
	     * _.max([]);
	     * // => undefined
	     */function max(array){return array&&array.length?baseExtremum(array,identity,baseGt):undefined;}/**
	     * This method is like `_.max` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * the value is ranked. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
	     *
	     * _.maxBy(objects, function(o) { return o.n; });
	     * // => { 'n': 2 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.maxBy(objects, 'n');
	     * // => { 'n': 2 }
	     */function maxBy(array,iteratee){return array&&array.length?baseExtremum(array,getIteratee(iteratee,2),baseGt):undefined;}/**
	     * Computes the mean of the values in `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the mean.
	     * @example
	     *
	     * _.mean([4, 2, 8, 6]);
	     * // => 5
	     */function mean(array){return baseMean(array,identity);}/**
	     * This method is like `_.mean` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the value to be averaged.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the mean.
	     * @example
	     *
	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	     *
	     * _.meanBy(objects, function(o) { return o.n; });
	     * // => 5
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.meanBy(objects, 'n');
	     * // => 5
	     */function meanBy(array,iteratee){return baseMean(array,getIteratee(iteratee,2));}/**
	     * Computes the minimum value of `array`. If `array` is empty or falsey,
	     * `undefined` is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * _.min([4, 2, 8, 6]);
	     * // => 2
	     *
	     * _.min([]);
	     * // => undefined
	     */function min(array){return array&&array.length?baseExtremum(array,identity,baseLt):undefined;}/**
	     * This method is like `_.min` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * the value is ranked. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
	     *
	     * _.minBy(objects, function(o) { return o.n; });
	     * // => { 'n': 1 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.minBy(objects, 'n');
	     * // => { 'n': 1 }
	     */function minBy(array,iteratee){return array&&array.length?baseExtremum(array,getIteratee(iteratee,2),baseLt):undefined;}/**
	     * Multiply two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {number} multiplier The first number in a multiplication.
	     * @param {number} multiplicand The second number in a multiplication.
	     * @returns {number} Returns the product.
	     * @example
	     *
	     * _.multiply(6, 4);
	     * // => 24
	     */var multiply=createMathOperation(function(multiplier,multiplicand){return multiplier*multiplicand;},1);/**
	     * Computes `number` rounded to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round.
	     * @param {number} [precision=0] The precision to round to.
	     * @returns {number} Returns the rounded number.
	     * @example
	     *
	     * _.round(4.006);
	     * // => 4
	     *
	     * _.round(4.006, 2);
	     * // => 4.01
	     *
	     * _.round(4060, -2);
	     * // => 4100
	     */var round=createRound('round');/**
	     * Subtract two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {number} minuend The first number in a subtraction.
	     * @param {number} subtrahend The second number in a subtraction.
	     * @returns {number} Returns the difference.
	     * @example
	     *
	     * _.subtract(6, 4);
	     * // => 2
	     */var subtract=createMathOperation(function(minuend,subtrahend){return minuend-subtrahend;},0);/**
	     * Computes the sum of the values in `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.4.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.sum([4, 2, 8, 6]);
	     * // => 20
	     */function sum(array){return array&&array.length?baseSum(array,identity):0;}/**
	     * This method is like `_.sum` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the value to be summed.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	     *
	     * _.sumBy(objects, function(o) { return o.n; });
	     * // => 20
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sumBy(objects, 'n');
	     * // => 20
	     */function sumBy(array,iteratee){return array&&array.length?baseSum(array,getIteratee(iteratee,2)):0;}/*------------------------------------------------------------------------*/// Add methods that return wrapped values in chain sequences.
	lodash.after=after;lodash.ary=ary;lodash.assign=assign;lodash.assignIn=assignIn;lodash.assignInWith=assignInWith;lodash.assignWith=assignWith;lodash.at=at;lodash.before=before;lodash.bind=bind;lodash.bindAll=bindAll;lodash.bindKey=bindKey;lodash.castArray=castArray;lodash.chain=chain;lodash.chunk=chunk;lodash.compact=compact;lodash.concat=concat;lodash.cond=cond;lodash.conforms=conforms;lodash.constant=constant;lodash.countBy=countBy;lodash.create=create;lodash.curry=curry;lodash.curryRight=curryRight;lodash.debounce=debounce;lodash.defaults=defaults;lodash.defaultsDeep=defaultsDeep;lodash.defer=defer;lodash.delay=delay;lodash.difference=difference;lodash.differenceBy=differenceBy;lodash.differenceWith=differenceWith;lodash.drop=drop;lodash.dropRight=dropRight;lodash.dropRightWhile=dropRightWhile;lodash.dropWhile=dropWhile;lodash.fill=fill;lodash.filter=filter;lodash.flatMap=flatMap;lodash.flatMapDeep=flatMapDeep;lodash.flatMapDepth=flatMapDepth;lodash.flatten=flatten;lodash.flattenDeep=flattenDeep;lodash.flattenDepth=flattenDepth;lodash.flip=flip;lodash.flow=flow;lodash.flowRight=flowRight;lodash.fromPairs=fromPairs;lodash.functions=functions;lodash.functionsIn=functionsIn;lodash.groupBy=groupBy;lodash.initial=initial;lodash.intersection=intersection;lodash.intersectionBy=intersectionBy;lodash.intersectionWith=intersectionWith;lodash.invert=invert;lodash.invertBy=invertBy;lodash.invokeMap=invokeMap;lodash.iteratee=iteratee;lodash.keyBy=keyBy;lodash.keys=keys;lodash.keysIn=keysIn;lodash.map=map;lodash.mapKeys=mapKeys;lodash.mapValues=mapValues;lodash.matches=matches;lodash.matchesProperty=matchesProperty;lodash.memoize=memoize;lodash.merge=merge;lodash.mergeWith=mergeWith;lodash.method=method;lodash.methodOf=methodOf;lodash.mixin=mixin;lodash.negate=negate;lodash.nthArg=nthArg;lodash.omit=omit;lodash.omitBy=omitBy;lodash.once=once;lodash.orderBy=orderBy;lodash.over=over;lodash.overArgs=overArgs;lodash.overEvery=overEvery;lodash.overSome=overSome;lodash.partial=partial;lodash.partialRight=partialRight;lodash.partition=partition;lodash.pick=pick;lodash.pickBy=pickBy;lodash.property=property;lodash.propertyOf=propertyOf;lodash.pull=pull;lodash.pullAll=pullAll;lodash.pullAllBy=pullAllBy;lodash.pullAllWith=pullAllWith;lodash.pullAt=pullAt;lodash.range=range;lodash.rangeRight=rangeRight;lodash.rearg=rearg;lodash.reject=reject;lodash.remove=remove;lodash.rest=rest;lodash.reverse=reverse;lodash.sampleSize=sampleSize;lodash.set=set;lodash.setWith=setWith;lodash.shuffle=shuffle;lodash.slice=slice;lodash.sortBy=sortBy;lodash.sortedUniq=sortedUniq;lodash.sortedUniqBy=sortedUniqBy;lodash.split=split;lodash.spread=spread;lodash.tail=tail;lodash.take=take;lodash.takeRight=takeRight;lodash.takeRightWhile=takeRightWhile;lodash.takeWhile=takeWhile;lodash.tap=tap;lodash.throttle=throttle;lodash.thru=thru;lodash.toArray=toArray;lodash.toPairs=toPairs;lodash.toPairsIn=toPairsIn;lodash.toPath=toPath;lodash.toPlainObject=toPlainObject;lodash.transform=transform;lodash.unary=unary;lodash.union=union;lodash.unionBy=unionBy;lodash.unionWith=unionWith;lodash.uniq=uniq;lodash.uniqBy=uniqBy;lodash.uniqWith=uniqWith;lodash.unset=unset;lodash.unzip=unzip;lodash.unzipWith=unzipWith;lodash.update=update;lodash.updateWith=updateWith;lodash.values=values;lodash.valuesIn=valuesIn;lodash.without=without;lodash.words=words;lodash.wrap=wrap;lodash.xor=xor;lodash.xorBy=xorBy;lodash.xorWith=xorWith;lodash.zip=zip;lodash.zipObject=zipObject;lodash.zipObjectDeep=zipObjectDeep;lodash.zipWith=zipWith;// Add aliases.
	lodash.entries=toPairs;lodash.entriesIn=toPairsIn;lodash.extend=assignIn;lodash.extendWith=assignInWith;// Add methods to `lodash.prototype`.
	mixin(lodash,lodash);/*------------------------------------------------------------------------*/// Add methods that return unwrapped values in chain sequences.
	lodash.add=add;lodash.attempt=attempt;lodash.camelCase=camelCase;lodash.capitalize=capitalize;lodash.ceil=ceil;lodash.clamp=clamp;lodash.clone=clone;lodash.cloneDeep=cloneDeep;lodash.cloneDeepWith=cloneDeepWith;lodash.cloneWith=cloneWith;lodash.conformsTo=conformsTo;lodash.deburr=deburr;lodash.defaultTo=defaultTo;lodash.divide=divide;lodash.endsWith=endsWith;lodash.eq=eq;lodash.escape=escape;lodash.escapeRegExp=escapeRegExp;lodash.every=every;lodash.find=find;lodash.findIndex=findIndex;lodash.findKey=findKey;lodash.findLast=findLast;lodash.findLastIndex=findLastIndex;lodash.findLastKey=findLastKey;lodash.floor=floor;lodash.forEach=forEach;lodash.forEachRight=forEachRight;lodash.forIn=forIn;lodash.forInRight=forInRight;lodash.forOwn=forOwn;lodash.forOwnRight=forOwnRight;lodash.get=get;lodash.gt=gt;lodash.gte=gte;lodash.has=has;lodash.hasIn=hasIn;lodash.head=head;lodash.identity=identity;lodash.includes=includes;lodash.indexOf=indexOf;lodash.inRange=inRange;lodash.invoke=invoke;lodash.isArguments=isArguments;lodash.isArray=isArray;lodash.isArrayBuffer=isArrayBuffer;lodash.isArrayLike=isArrayLike;lodash.isArrayLikeObject=isArrayLikeObject;lodash.isBoolean=isBoolean;lodash.isBuffer=isBuffer;lodash.isDate=isDate;lodash.isElement=isElement;lodash.isEmpty=isEmpty;lodash.isEqual=isEqual;lodash.isEqualWith=isEqualWith;lodash.isError=isError;lodash.isFinite=isFinite;lodash.isFunction=isFunction;lodash.isInteger=isInteger;lodash.isLength=isLength;lodash.isMap=isMap;lodash.isMatch=isMatch;lodash.isMatchWith=isMatchWith;lodash.isNaN=isNaN;lodash.isNative=isNative;lodash.isNil=isNil;lodash.isNull=isNull;lodash.isNumber=isNumber;lodash.isObject=isObject;lodash.isObjectLike=isObjectLike;lodash.isPlainObject=isPlainObject;lodash.isRegExp=isRegExp;lodash.isSafeInteger=isSafeInteger;lodash.isSet=isSet;lodash.isString=isString;lodash.isSymbol=isSymbol;lodash.isTypedArray=isTypedArray;lodash.isUndefined=isUndefined;lodash.isWeakMap=isWeakMap;lodash.isWeakSet=isWeakSet;lodash.join=join;lodash.kebabCase=kebabCase;lodash.last=last;lodash.lastIndexOf=lastIndexOf;lodash.lowerCase=lowerCase;lodash.lowerFirst=lowerFirst;lodash.lt=lt;lodash.lte=lte;lodash.max=max;lodash.maxBy=maxBy;lodash.mean=mean;lodash.meanBy=meanBy;lodash.min=min;lodash.minBy=minBy;lodash.stubArray=stubArray;lodash.stubFalse=stubFalse;lodash.stubObject=stubObject;lodash.stubString=stubString;lodash.stubTrue=stubTrue;lodash.multiply=multiply;lodash.nth=nth;lodash.noConflict=noConflict;lodash.noop=noop;lodash.now=now;lodash.pad=pad;lodash.padEnd=padEnd;lodash.padStart=padStart;lodash.parseInt=parseInt;lodash.random=random;lodash.reduce=reduce;lodash.reduceRight=reduceRight;lodash.repeat=repeat;lodash.replace=replace;lodash.result=result;lodash.round=round;lodash.runInContext=runInContext;lodash.sample=sample;lodash.size=size;lodash.snakeCase=snakeCase;lodash.some=some;lodash.sortedIndex=sortedIndex;lodash.sortedIndexBy=sortedIndexBy;lodash.sortedIndexOf=sortedIndexOf;lodash.sortedLastIndex=sortedLastIndex;lodash.sortedLastIndexBy=sortedLastIndexBy;lodash.sortedLastIndexOf=sortedLastIndexOf;lodash.startCase=startCase;lodash.startsWith=startsWith;lodash.subtract=subtract;lodash.sum=sum;lodash.sumBy=sumBy;lodash.template=template;lodash.times=times;lodash.toFinite=toFinite;lodash.toInteger=toInteger;lodash.toLength=toLength;lodash.toLower=toLower;lodash.toNumber=toNumber;lodash.toSafeInteger=toSafeInteger;lodash.toString=toString;lodash.toUpper=toUpper;lodash.trim=trim;lodash.trimEnd=trimEnd;lodash.trimStart=trimStart;lodash.truncate=truncate;lodash.unescape=unescape;lodash.uniqueId=uniqueId;lodash.upperCase=upperCase;lodash.upperFirst=upperFirst;// Add aliases.
	lodash.each=forEach;lodash.eachRight=forEachRight;lodash.first=head;mixin(lodash,function(){var source={};baseForOwn(lodash,function(func,methodName){if(!hasOwnProperty.call(lodash.prototype,methodName)){source[methodName]=func;}});return source;}(),{'chain':false});/*------------------------------------------------------------------------*//**
	     * The semantic version number.
	     *
	     * @static
	     * @memberOf _
	     * @type {string}
	     */lodash.VERSION=VERSION;// Assign default placeholders.
	arrayEach(['bind','bindKey','curry','curryRight','partial','partialRight'],function(methodName){lodash[methodName].placeholder=lodash;});// Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
	arrayEach(['drop','take'],function(methodName,index){LazyWrapper.prototype[methodName]=function(n){n=n===undefined?1:nativeMax(toInteger(n),0);var result=this.__filtered__&&!index?new LazyWrapper(this):this.clone();if(result.__filtered__){result.__takeCount__=nativeMin(n,result.__takeCount__);}else{result.__views__.push({'size':nativeMin(n,MAX_ARRAY_LENGTH),'type':methodName+(result.__dir__<0?'Right':'')});}return result;};LazyWrapper.prototype[methodName+'Right']=function(n){return this.reverse()[methodName](n).reverse();};});// Add `LazyWrapper` methods that accept an `iteratee` value.
	arrayEach(['filter','map','takeWhile'],function(methodName,index){var type=index+1,isFilter=type==LAZY_FILTER_FLAG||type==LAZY_WHILE_FLAG;LazyWrapper.prototype[methodName]=function(iteratee){var result=this.clone();result.__iteratees__.push({'iteratee':getIteratee(iteratee,3),'type':type});result.__filtered__=result.__filtered__||isFilter;return result;};});// Add `LazyWrapper` methods for `_.head` and `_.last`.
	arrayEach(['head','last'],function(methodName,index){var takeName='take'+(index?'Right':'');LazyWrapper.prototype[methodName]=function(){return this[takeName](1).value()[0];};});// Add `LazyWrapper` methods for `_.initial` and `_.tail`.
	arrayEach(['initial','tail'],function(methodName,index){var dropName='drop'+(index?'':'Right');LazyWrapper.prototype[methodName]=function(){return this.__filtered__?new LazyWrapper(this):this[dropName](1);};});LazyWrapper.prototype.compact=function(){return this.filter(identity);};LazyWrapper.prototype.find=function(predicate){return this.filter(predicate).head();};LazyWrapper.prototype.findLast=function(predicate){return this.reverse().find(predicate);};LazyWrapper.prototype.invokeMap=baseRest(function(path,args){if(typeof path=='function'){return new LazyWrapper(this);}return this.map(function(value){return baseInvoke(value,path,args);});});LazyWrapper.prototype.reject=function(predicate){return this.filter(negate(getIteratee(predicate)));};LazyWrapper.prototype.slice=function(start,end){start=toInteger(start);var result=this;if(result.__filtered__&&(start>0||end<0)){return new LazyWrapper(result);}if(start<0){result=result.takeRight(-start);}else if(start){result=result.drop(start);}if(end!==undefined){end=toInteger(end);result=end<0?result.dropRight(-end):result.take(end-start);}return result;};LazyWrapper.prototype.takeRightWhile=function(predicate){return this.reverse().takeWhile(predicate).reverse();};LazyWrapper.prototype.toArray=function(){return this.take(MAX_ARRAY_LENGTH);};// Add `LazyWrapper` methods to `lodash.prototype`.
	baseForOwn(LazyWrapper.prototype,function(func,methodName){var checkIteratee=/^(?:filter|find|map|reject)|While$/.test(methodName),isTaker=/^(?:head|last)$/.test(methodName),lodashFunc=lodash[isTaker?'take'+(methodName=='last'?'Right':''):methodName],retUnwrapped=isTaker||/^find/.test(methodName);if(!lodashFunc){return;}lodash.prototype[methodName]=function(){var value=this.__wrapped__,args=isTaker?[1]:arguments,isLazy=value instanceof LazyWrapper,iteratee=args[0],useLazy=isLazy||isArray(value);var interceptor=function interceptor(value){var result=lodashFunc.apply(lodash,arrayPush([value],args));return isTaker&&chainAll?result[0]:result;};if(useLazy&&checkIteratee&&typeof iteratee=='function'&&iteratee.length!=1){// Avoid lazy use if the iteratee has a "length" value other than `1`.
	isLazy=useLazy=false;}var chainAll=this.__chain__,isHybrid=!!this.__actions__.length,isUnwrapped=retUnwrapped&&!chainAll,onlyLazy=isLazy&&!isHybrid;if(!retUnwrapped&&useLazy){value=onlyLazy?value:new LazyWrapper(this);var result=func.apply(value,args);result.__actions__.push({'func':thru,'args':[interceptor],'thisArg':undefined});return new LodashWrapper(result,chainAll);}if(isUnwrapped&&onlyLazy){return func.apply(this,args);}result=this.thru(interceptor);return isUnwrapped?isTaker?result.value()[0]:result.value():result;};});// Add `Array` methods to `lodash.prototype`.
	arrayEach(['pop','push','shift','sort','splice','unshift'],function(methodName){var func=arrayProto[methodName],chainName=/^(?:push|sort|unshift)$/.test(methodName)?'tap':'thru',retUnwrapped=/^(?:pop|shift)$/.test(methodName);lodash.prototype[methodName]=function(){var args=arguments;if(retUnwrapped&&!this.__chain__){var value=this.value();return func.apply(isArray(value)?value:[],args);}return this[chainName](function(value){return func.apply(isArray(value)?value:[],args);});};});// Map minified method names to their real names.
	baseForOwn(LazyWrapper.prototype,function(func,methodName){var lodashFunc=lodash[methodName];if(lodashFunc){var key=lodashFunc.name+'',names=realNames[key]||(realNames[key]=[]);names.push({'name':methodName,'func':lodashFunc});}});realNames[createHybrid(undefined,WRAP_BIND_KEY_FLAG).name]=[{'name':'wrapper','func':undefined}];// Add methods to `LazyWrapper`.
	LazyWrapper.prototype.clone=lazyClone;LazyWrapper.prototype.reverse=lazyReverse;LazyWrapper.prototype.value=lazyValue;// Add chain sequence methods to the `lodash` wrapper.
	lodash.prototype.at=wrapperAt;lodash.prototype.chain=wrapperChain;lodash.prototype.commit=wrapperCommit;lodash.prototype.next=wrapperNext;lodash.prototype.plant=wrapperPlant;lodash.prototype.reverse=wrapperReverse;lodash.prototype.toJSON=lodash.prototype.valueOf=lodash.prototype.value=wrapperValue;// Add lazy aliases.
	lodash.prototype.first=lodash.prototype.head;if(symIterator){lodash.prototype[symIterator]=wrapperToIterator;}return lodash;};/*--------------------------------------------------------------------------*/// Export lodash.
	var _=runInContext();// Some AMD build optimizers, like r.js, check for condition patterns like:
	if("function"=='function'&&_typeof(__webpack_require__(674))=='object'&&__webpack_require__(674)){// Expose Lodash on the global object to prevent errors when Lodash is
	// loaded by a script tag in the presence of an AMD loader.
	// See http://requirejs.org/docs/errors.html#mismatch for more details.
	// Use `_.noConflict` to remove Lodash from the global object.
	root._=_;// Define as an anonymous module so, through path mapping, it can be
	// referenced as the "underscore" module.
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function(){return _;}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));}// Check for `exports` after `define` in case a build optimizer adds it.
	else if(freeModule){// Export for Node.js.
	(freeModule.exports=_)._=_;// Export for CommonJS support.
	freeExports._=_;}else{// Export to the global object.
	root._=_;}}).call(undefined);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(324)(module)))

/***/ },
/* 674 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {module.exports = __webpack_amd_options__;
	
	/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ },
/* 675 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
	
	var axios = __webpack_require__(554);
	
	var createDepositWalletEndpoint = __webpack_require__(581) + '/deposit/wallet/create';
	
	/**
	 *
	 * @param {string} email - xxx@domain.com
	 * @param {string} accessToken - hash token
	 * @param {boolean} testnet -  true/false
	 */
	module.exports = function () {
	  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(email, accessToken, testnet) {
	    var headers, depositResponse;
	    return regeneratorRuntime.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            headers = { Authorization: 'Bearer ' + accessToken };
	            _context.prev = 1;
	            _context.next = 4;
	            return create(headers, email, testnet);
	
	          case 4:
	            depositResponse = _context.sent;
	            return _context.abrupt('return', depositResponse);
	
	          case 8:
	            _context.prev = 8;
	            _context.t0 = _context['catch'](1);
	            throw _context.t0;
	
	          case 11:
	          case 'end':
	            return _context.stop();
	        }
	      }
	    }, _callee, undefined, [[1, 8]]);
	  }));
	
	  return function (_x, _x2, _x3) {
	    return _ref.apply(this, arguments);
	  };
	}();
	
	/**
	 * @param {object} headers - { Authorization: 'Bearer jkhjhkhkhkjn' }
	 * @param {string} email - xxx@domain.com
	 * @param {boolean} testnet -  true/false
	 */
	var create = function () {
	  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(headers, email, testnet) {
	    var res;
	    return regeneratorRuntime.wrap(function _callee2$(_context2) {
	      while (1) {
	        switch (_context2.prev = _context2.next) {
	          case 0:
	            _context2.prev = 0;
	            _context2.next = 3;
	            return axios.post(createDepositWalletEndpoint, { email: email, testnet: testnet }, { headers: headers });
	
	          case 3:
	            res = _context2.sent;
	            return _context2.abrupt('return', {
	              BTC: res.data.resultBTC,
	              ETH: res.data.resultETH,
	              LTC: res.data.resultLTC
	            });
	
	          case 7:
	            _context2.prev = 7;
	            _context2.t0 = _context2['catch'](0);
	            throw _context2.t0.response ? _context2.t0.response.data : new Error(_context2.t0);
	
	          case 10:
	          case 'end':
	            return _context2.stop();
	        }
	      }
	    }, _callee2, undefined, [[0, 7]]);
	  }));
	
	  return function create(_x4, _x5, _x6) {
	    return _ref2.apply(this, arguments);
	  };
	}();

/***/ },
/* 676 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
	
	var axios = __webpack_require__(554);
	
	var endpoint = __webpack_require__(581) + '/coins/balance';
	
	module.exports = function () {
	  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(params, accessToken) {
	    var headers, url, res;
	    return regeneratorRuntime.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            headers = { Authorization: 'Bearer ' + accessToken };
	            url = endpoint + '/' + params.coin + '/' + params.address + '?testnet=' + params.testnet;
	            _context.prev = 2;
	            _context.next = 5;
	            return axios.get(url, { headers: headers });
	
	          case 5:
	            res = _context.sent;
	
	            if (!res) {
	              _context.next = 8;
	              break;
	            }
	
	            return _context.abrupt('return', res.data);
	
	          case 8:
	            return _context.abrupt('return', 0);
	
	          case 11:
	            _context.prev = 11;
	            _context.t0 = _context['catch'](2);
	            throw _context.t0.response ? _context.t0.response.data : new Error(_context.t0);
	
	          case 14:
	          case 'end':
	            return _context.stop();
	        }
	      }
	    }, _callee, undefined, [[2, 11]]);
	  }));
	
	  return function (_x, _x2) {
	    return _ref.apply(this, arguments);
	  };
	}();

/***/ },
/* 677 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var buyCoin = __webpack_require__(678);
	var buyConversion = __webpack_require__(679);
	var buyBalance = __webpack_require__(680);
	var buyHistory = __webpack_require__(681);
	var coinAmount = __webpack_require__(682);
	var confirmTerm = __webpack_require__(683);
	var obtainPhase = __webpack_require__(684);
	
	module.exports = {
	  buyCoin: buyCoin,
	  buyConversion: buyConversion,
	  buyHistory: buyHistory,
	  coinAmount: coinAmount,
	  confirmTerm: confirmTerm,
	  obtainPhase: obtainPhase,
	  buyBalance: buyBalance
	};

/***/ },
/* 678 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
	
	var axios = __webpack_require__(554);
	
	var buyEndpoint = __webpack_require__(581) + '/ico/buy';
	
	/**
	 *
	 * @param {*} transactionData - email, pin, receivingAddress, amount, fee, testnet
	 * @param {*} accessToken .
	 */
	module.exports = function () {
	  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(accessToken, email, lunesAmount, coinSymbol, coinAmount, exchangeRate, coupon, network) {
	    var headers, buy;
	    return regeneratorRuntime.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            headers = { Authorization: 'Bearer ' + accessToken };
	            _context.prev = 1;
	            _context.next = 4;
	            return create(headers, email, lunesAmount, coinSymbol, coinAmount, exchangeRate, coupon, network);
	
	          case 4:
	            buy = _context.sent;
	            return _context.abrupt('return', buy);
	
	          case 8:
	            _context.prev = 8;
	            _context.t0 = _context['catch'](1);
	            throw _context.t0;
	
	          case 11:
	          case 'end':
	            return _context.stop();
	        }
	      }
	    }, _callee, undefined, [[1, 8]]);
	  }));
	
	  return function (_x, _x2, _x3, _x4, _x5, _x6, _x7, _x8) {
	    return _ref.apply(this, arguments);
	  };
	}();
	
	var create = function () {
	  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(headers, email, lunesAmount, coinSymbol, coinAmount, exchangeRate, coupon, network) {
	    var res;
	    return regeneratorRuntime.wrap(function _callee2$(_context2) {
	      while (1) {
	        switch (_context2.prev = _context2.next) {
	          case 0:
	            _context2.prev = 0;
	            _context2.next = 3;
	            return axios.post(buyEndpoint, { email: email, lunesAmount: lunesAmount, coinSymbol: coinSymbol, coinAmount: coinAmount, exchangeRate: exchangeRate, coupon: coupon, network: network }, { headers: headers });
	
	          case 3:
	            res = _context2.sent;
	            return _context2.abrupt('return', res.data);
	
	          case 7:
	            _context2.prev = 7;
	            _context2.t0 = _context2['catch'](0);
	            throw _context2.t0.response ? _context2.t0.response.data : new Error(_context2.t0);
	
	          case 10:
	          case 'end':
	            return _context2.stop();
	        }
	      }
	    }, _callee2, undefined, [[0, 7]]);
	  }));
	
	  return function create(_x9, _x10, _x11, _x12, _x13, _x14, _x15, _x16) {
	    return _ref2.apply(this, arguments);
	  };
	}();

/***/ },
/* 679 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * .
	 * @param {*} bonusRate - bonus percentage
	 * @param {*} inputAmount - coin input amount
	 * @param {*} exchangeRate - coin exchange rate
	 * @param {*} unitPrice - price of each LNS in USD
	 * @param {*} coupon - coupon code
	 */
	var toLNS = function toLNS(bonusRate, inputAmount, exchangeRate, unitPrice, coupon) {
	  if (coupon && coupon !== '') {
	    bonusRate += 0.01;
	  }
	
	  bonusRate = Number(bonusRate);
	  inputAmount = Number(inputAmount);
	  exchangeRate = Number(exchangeRate);
	  unitPrice = Number(unitPrice);
	
	  var exchangeUnitPrice = exchangeRate * inputAmount;
	  var buyAmount = exchangeUnitPrice / unitPrice;
	  var bonusAmount = buyAmount * bonusRate;
	  var totalAmount = buyAmount + bonusAmount;
	
	  buyAmount = buyAmount.toFixed(8);
	  bonusAmount = bonusAmount.toFixed(8);
	  totalAmount = totalAmount.toFixed(8);
	
	  return {
	    buyAmount: buyAmount,
	    bonusAmount: bonusAmount,
	    totalAmount: totalAmount
	  };
	};
	
	/**
	 * .
	 * @param {*} bonusRate - bonus percentage
	 * @param {*} inputAmount - LNS input amount
	 * @param {*} exchangeRate - coin exchange rate
	 * @param {*} unitPrice - price of each LNS in USD
	 * @param {*} coupon - coupon code
	 */
	var fromLNS = function fromLNS(bonusRate, inputAmount, exchangeRate, unitPrice, coupon) {
	  if (coupon && coupon !== '') {
	    bonusRate += 0.01;
	  }
	
	  bonusRate = Number(bonusRate);
	  inputAmount = Number(inputAmount);
	  exchangeRate = Number(exchangeRate);
	  unitPrice = Number(unitPrice);
	
	  var exchangeUnitPrice = unitPrice / exchangeRate;
	  var buyAmount = inputAmount * exchangeUnitPrice;
	  var bonusAmount = buyAmount * bonusRate;
	  var totalAmount = buyAmount + bonusAmount;
	
	  buyAmount = buyAmount.toFixed(8);
	  bonusAmount = bonusAmount.toFixed(8);
	  totalAmount = totalAmount.toFixed(8);
	
	  return {
	    buyAmount: buyAmount,
	    bonusAmount: bonusAmount,
	    totalAmount: totalAmount
	  };
	};
	
	module.exports = {
	  toLNS: toLNS,
	  fromLNS: fromLNS
	};

/***/ },
/* 680 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
	
	var axios = __webpack_require__(554);
	
	var buyBalanceEndpoint = __webpack_require__(581) + '/ico/buy-balance';
	
	/**
	 *
	 * @param {*} transactionData - email, pin, receivingAddress, amount, fee, testnet
	 * @param {*} accessToken .
	 */
	module.exports = function () {
	  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(email, accessToken, salePhase) {
	    var headers, buyBalance;
	    return regeneratorRuntime.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            headers = { Authorization: 'Bearer ' + accessToken };
	            _context.prev = 1;
	            _context.next = 4;
	            return create(headers, email, salePhase);
	
	          case 4:
	            buyBalance = _context.sent;
	            return _context.abrupt('return', buyBalance);
	
	          case 8:
	            _context.prev = 8;
	            _context.t0 = _context['catch'](1);
	            throw _context.t0;
	
	          case 11:
	          case 'end':
	            return _context.stop();
	        }
	      }
	    }, _callee, undefined, [[1, 8]]);
	  }));
	
	  return function (_x, _x2, _x3) {
	    return _ref.apply(this, arguments);
	  };
	}();
	
	var create = function () {
	  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(headers, email, salePhase) {
	    var res;
	    return regeneratorRuntime.wrap(function _callee2$(_context2) {
	      while (1) {
	        switch (_context2.prev = _context2.next) {
	          case 0:
	            _context2.prev = 0;
	            _context2.next = 3;
	            return axios.post(buyBalanceEndpoint, { email: email, salePhase: salePhase }, { headers: headers });
	
	          case 3:
	            res = _context2.sent;
	            return _context2.abrupt('return', res.data);
	
	          case 7:
	            _context2.prev = 7;
	            _context2.t0 = _context2['catch'](0);
	            throw _context2.t0.response ? _context2.t0.response.data : new Error(_context2.t0);
	
	          case 10:
	          case 'end':
	            return _context2.stop();
	        }
	      }
	    }, _callee2, undefined, [[0, 7]]);
	  }));
	
	  return function create(_x4, _x5, _x6) {
	    return _ref2.apply(this, arguments);
	  };
	}();

/***/ },
/* 681 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
	
	var axios = __webpack_require__(554);
	
	var buyHistoryEndpoint = __webpack_require__(581) + '/ico/buy-history';
	
	/**
	 *
	 * @param {*} transactionData - email, pin, receivingAddress, amount, fee, testnet
	 * @param {*} accessToken .
	 */
	module.exports = function () {
	  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(email, accessToken) {
	    var headers, buyHistory;
	    return regeneratorRuntime.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            headers = { Authorization: 'Bearer ' + accessToken };
	            _context.prev = 1;
	            _context.next = 4;
	            return create(headers, email);
	
	          case 4:
	            buyHistory = _context.sent;
	            return _context.abrupt('return', buyHistory);
	
	          case 8:
	            _context.prev = 8;
	            _context.t0 = _context['catch'](1);
	            throw _context.t0;
	
	          case 11:
	          case 'end':
	            return _context.stop();
	        }
	      }
	    }, _callee, undefined, [[1, 8]]);
	  }));
	
	  return function (_x, _x2) {
	    return _ref.apply(this, arguments);
	  };
	}();
	
	var create = function () {
	  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(headers, email) {
	    var res;
	    return regeneratorRuntime.wrap(function _callee2$(_context2) {
	      while (1) {
	        switch (_context2.prev = _context2.next) {
	          case 0:
	            _context2.prev = 0;
	            _context2.next = 3;
	            return axios.post(buyHistoryEndpoint, { email: email }, { headers: headers });
	
	          case 3:
	            res = _context2.sent;
	            return _context2.abrupt('return', res.data);
	
	          case 7:
	            _context2.prev = 7;
	            _context2.t0 = _context2['catch'](0);
	            throw _context2.t0.response ? _context2.t0.response.data : new Error(_context2.t0);
	
	          case 10:
	          case 'end':
	            return _context2.stop();
	        }
	      }
	    }, _callee2, undefined, [[0, 7]]);
	  }));
	
	  return function create(_x3, _x4) {
	    return _ref2.apply(this, arguments);
	  };
	}();

/***/ },
/* 682 */
/***/ function(module, exports) {

	"use strict";

/***/ },
/* 683 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
	
	var axios = __webpack_require__(554);
	
	var confirmTermEndpoint = __webpack_require__(581) + '/ico/confirm-term';
	
	/**
	 *
	 * @param {*} transactionData - email, pin, receivingAddress, amount, fee, testnet
	 * @param {*} accessToken .
	 */
	module.exports = function () {
	  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(email, accessToken) {
	    var headers, confirmTerm;
	    return regeneratorRuntime.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            headers = { Authorization: 'Bearer ' + accessToken };
	            _context.prev = 1;
	            _context.next = 4;
	            return create(headers, email);
	
	          case 4:
	            confirmTerm = _context.sent;
	            return _context.abrupt('return', confirmTerm);
	
	          case 8:
	            _context.prev = 8;
	            _context.t0 = _context['catch'](1);
	            throw _context.t0;
	
	          case 11:
	          case 'end':
	            return _context.stop();
	        }
	      }
	    }, _callee, undefined, [[1, 8]]);
	  }));
	
	  return function (_x, _x2) {
	    return _ref.apply(this, arguments);
	  };
	}();
	
	var create = function () {
	  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(headers, email) {
	    var res;
	    return regeneratorRuntime.wrap(function _callee2$(_context2) {
	      while (1) {
	        switch (_context2.prev = _context2.next) {
	          case 0:
	            _context2.prev = 0;
	            _context2.next = 3;
	            return axios.post(confirmTermEndpoint, { email: email }, { headers: headers });
	
	          case 3:
	            res = _context2.sent;
	            return _context2.abrupt('return', res.data);
	
	          case 7:
	            _context2.prev = 7;
	            _context2.t0 = _context2['catch'](0);
	            throw _context2.t0.response ? _context2.t0.response.data : new Error(_context2.t0);
	
	          case 10:
	          case 'end':
	            return _context2.stop();
	        }
	      }
	    }, _callee2, undefined, [[0, 7]]);
	  }));
	
	  return function create(_x3, _x4) {
	    return _ref2.apply(this, arguments);
	  };
	}();

/***/ },
/* 684 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
	
	var axios = __webpack_require__(554);
	
	var BASE_URL = __webpack_require__(581);
	
	var endpoint = BASE_URL + '/ico/phase';
	
	module.exports = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
	  var res;
	  return regeneratorRuntime.wrap(function _callee$(_context) {
	    while (1) {
	      switch (_context.prev = _context.next) {
	        case 0:
	          _context.prev = 0;
	          _context.next = 3;
	          return axios.post(endpoint);
	
	        case 3:
	          res = _context.sent;
	          return _context.abrupt('return', res.data);
	
	        case 7:
	          _context.prev = 7;
	          _context.t0 = _context['catch'](0);
	          throw _context.t0.response ? _context.t0.response.data : new Error(_context.t0);
	
	        case 10:
	        case 'end':
	          return _context.stop();
	      }
	    }
	  }, _callee, undefined, [[0, 7]]);
	}));

/***/ },
/* 685 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = {
	  'en': 'en',
	  'en-US': 'en',
	  'pt': 'pt',
	  'pt-BR': 'pt'
	};
	
	
	exports.STORAGE_KEY = 'lunes.accessToken';
	
	exports.PERIOD = {
	  RANGE_1D: 'RANGE_1D',
	  RANGE_1W: 'RANGE_1W',
	  RANGE_1M: 'RANGE_1M',
	  RANGE_1Y: 'RANGE_1Y',
	  RANGE_MAX: 'RANGE_MAX'
	};
	
	exports.COINS_CONSTANT = [{
	  label: 'Bitcoin',
	  name: 'BTC',
	  img: 'https://res.cloudinary.com/luneswallet/image/upload/v1519442467/icon_btc.svg',
	  selected: true
	}, {
	  label: 'Litecoin',
	  name: 'LTC',
	  img: 'https://res.cloudinary.com/luneswallet/image/upload/v1519442468/icon_ltc.svg',
	  selected: false
	}, {
	  label: 'Ethereum',
	  name: 'ETH',
	  img: 'https://res.cloudinary.com/luneswallet/image/upload/v1519442467/icon_eth.svg',
	  selected: false
	}];

/***/ },
/* 686 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(687);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(689)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../../../node_modules/css-loader/index.js?sourceMap!../../../node_modules/postcss-loader/index.js!../../../node_modules/sass-loader/index.js?config=sassLoader!./header.component.scss", function() {
				var newContent = require("!!../../../node_modules/css-loader/index.js?sourceMap!../../../node_modules/postcss-loader/index.js!../../../node_modules/sass-loader/index.js?config=sassLoader!./header.component.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 687 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(688)(true);
	// imports
	
	
	// module
	exports.push([module.id, ".quotation-coins {\n  margin: 10px 0;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-align: center;\n      align-items: center;\n  -ms-flex-pack: end;\n      justify-content: flex-end; }\n\n@media only screen and (max-width: 426px) {\n  .quotation-coins {\n    -ms-flex-pack: center;\n        justify-content: center; } }\n", "", {"version":3,"sources":["D:/workspaces/lunes/lunes-purchase/src/components/header/src/components/header/header.component.scss"],"names":[],"mappings":"AAAA;EACE,eAAc;EACd,qBAAa;EAAb,cAAa;EACb,uBAAmB;MAAnB,oBAAmB;EACnB,mBAAyB;MAAzB,0BAAyB,EAC1B;;AAED;EACE;IACE,sBAAuB;QAAvB,wBAAuB,EACxB,EAAA","file":"header.component.scss","sourcesContent":[".quotation-coins {\r\n  margin: 10px 0; \r\n  display: flex; \r\n  align-items: center; \r\n  justify-content: flex-end;\r\n}\r\n\r\n@media only screen and (max-width: 426px) {\r\n  .quotation-coins {\r\n    justify-content: center;\r\n  }  \r\n}"],"sourceRoot":""}]);
	
	// exports


/***/ },
/* 688 */
/***/ function(module, exports) {

	"use strict";
	
	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function (useSourceMap) {
		var list = [];
	
		// return the list of modules as css string
		list.toString = function toString() {
			return this.map(function (item) {
				var content = cssWithMappingToString(item, useSourceMap);
				if (item[2]) {
					return "@media " + item[2] + "{" + content + "}";
				} else {
					return content;
				}
			}).join("");
		};
	
		// import a list of modules into the list
		list.i = function (modules, mediaQuery) {
			if (typeof modules === "string") modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for (var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if (typeof id === "number") alreadyImportedModules[id] = true;
			}
			for (i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if (typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if (mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if (mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};
	
	function cssWithMappingToString(item, useSourceMap) {
		var content = item[1] || '';
		var cssMapping = item[3];
		if (!cssMapping) {
			return content;
		}
	
		if (useSourceMap && typeof btoa === 'function') {
			var sourceMapping = toComment(cssMapping);
			var sourceURLs = cssMapping.sources.map(function (source) {
				return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */';
			});
	
			return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
		}
	
		return [content].join('\n');
	}
	
	// Adapted from convert-source-map (MIT)
	function toComment(sourceMap) {
		// eslint-disable-next-line no-undef
		var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
		var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;
	
		return '/*# ' + data + ' */';
	}

/***/ },
/* 689 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			// Test for IE <= 9 as proposed by Browserhacks
			// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
			// Tests for existence of standard globals is to allow style-loader 
			// to operate correctly into non-standard environments
			// @see https://github.com/webpack-contrib/style-loader/issues/177
			return window && document && document.all && !window.atob;
		}),
		getElement = (function(fn) {
			var memo = {};
			return function(selector) {
				if (typeof memo[selector] === "undefined") {
					memo[selector] = fn.call(this, selector);
				}
				return memo[selector]
			};
		})(function (styleTarget) {
			return document.querySelector(styleTarget)
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [],
		fixUrls = __webpack_require__(690);
	
	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}
	
		options = options || {};
		options.attrs = typeof options.attrs === "object" ? options.attrs : {};
	
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();
	
		// By default, add <style> tags to the <head> element
		if (typeof options.insertInto === "undefined") options.insertInto = "head";
	
		// By default, add <style> tags to the bottom of the target
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";
	
		var styles = listToStyles(list);
		addStylesToDom(styles, options);
	
		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	};
	
	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}
	
	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}
	
	function insertStyleElement(options, styleElement) {
		var styleTarget = getElement(options.insertInto)
		if (!styleTarget) {
			throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
		}
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				styleTarget.insertBefore(styleElement, styleTarget.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				styleTarget.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				styleTarget.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			styleTarget.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}
	
	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}
	
	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		options.attrs.type = "text/css";
	
		attachTagAttrs(styleElement, options.attrs);
		insertStyleElement(options, styleElement);
		return styleElement;
	}
	
	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		options.attrs.type = "text/css";
		options.attrs.rel = "stylesheet";
	
		attachTagAttrs(linkElement, options.attrs);
		insertStyleElement(options, linkElement);
		return linkElement;
	}
	
	function attachTagAttrs(element, attrs) {
		Object.keys(attrs).forEach(function (key) {
			element.setAttribute(key, attrs[key]);
		});
	}
	
	function addStyle(obj, options) {
		var styleElement, update, remove;
	
		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement, options);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}
	
		update(obj);
	
		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}
	
	var replaceText = (function () {
		var textStore = [];
	
		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();
	
	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;
	
		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}
	
	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
	
		if(media) {
			styleElement.setAttribute("media", media)
		}
	
		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}
	
	function updateLink(linkElement, options, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;
	
		/* If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
		*/
		var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;
	
		if (options.convertToAbsoluteUrls || autoFixUrls){
			css = fixUrls(css);
		}
	
		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}
	
		var blob = new Blob([css], { type: "text/css" });
	
		var oldSrc = linkElement.href;
	
		linkElement.href = URL.createObjectURL(blob);
	
		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ },
/* 690 */
/***/ function(module, exports) {

	"use strict";
	
	/**
	 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
	 * embed the css on the page. This breaks all relative urls because now they are relative to a
	 * bundle instead of the current page.
	 *
	 * One solution is to only use full urls, but that may be impossible.
	 *
	 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
	 *
	 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
	 *
	 */
	
	module.exports = function (css) {
		// get current location
		var location = typeof window !== "undefined" && window.location;
	
		if (!location) {
			throw new Error("fixUrls requires window.location");
		}
	
		// blank or null?
		if (!css || typeof css !== "string") {
			return css;
		}
	
		var baseUrl = location.protocol + "//" + location.host;
		var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");
	
		// convert each url(...)
		/*
	 This regular expression is just a way to recursively match brackets within
	 a string.
	 	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
	    (  = Start a capturing group
	      (?:  = Start a non-capturing group
	          [^)(]  = Match anything that isn't a parentheses
	          |  = OR
	          \(  = Match a start parentheses
	              (?:  = Start another non-capturing groups
	                  [^)(]+  = Match anything that isn't a parentheses
	                  |  = OR
	                  \(  = Match a start parentheses
	                      [^)(]*  = Match anything that isn't a parentheses
	                  \)  = Match a end parentheses
	              )  = End Group
	              *\) = Match anything and then a close parens
	          )  = Close non-capturing group
	          *  = Match anything
	       )  = Close capturing group
	  \)  = Match a close parens
	 	 /gi  = Get all matches, not the first.  Be case insensitive.
	  */
		var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function (fullMatch, origUrl) {
			// strip quotes (if they exist)
			var unquotedOrigUrl = origUrl.trim().replace(/^"(.*)"$/, function (o, $1) {
				return $1;
			}).replace(/^'(.*)'$/, function (o, $1) {
				return $1;
			});
	
			// already a full url? no change
			if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(unquotedOrigUrl)) {
				return fullMatch;
			}
	
			// convert the url to a full url
			var newUrl;
	
			if (unquotedOrigUrl.indexOf("//") === 0) {
				//TODO: should we add protocol?
				newUrl = unquotedOrigUrl;
			} else if (unquotedOrigUrl.indexOf("/") === 0) {
				// path should be relative to the base url
				newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
			} else {
				// path should be relative to current directory
				newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
			}
	
			// send back the fixed url(...)
			return "url(" + JSON.stringify(newUrl) + ")";
		});
	
		// send back the fixed css
		return fixedCss;
	};

/***/ },
/* 691 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _loginComponent = __webpack_require__(692);
	
	var _loginComponent2 = _interopRequireDefault(_loginComponent);
	
	var _login = __webpack_require__(693);
	
	var _login2 = _interopRequireDefault(_login);
	
	__webpack_require__(695);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var LoginComponent = {
	  template: _loginComponent2.default,
	  controller: _login2.default
	};
	
	exports.default = LoginComponent;

/***/ },
/* 692 */
/***/ function(module, exports) {

	module.exports = "<div class=\"container login\">\n\n  <!-- MODAL - criar directiva depois -->\n  <div id=\"modal-terms\" class=\"modal\">\n    <div class=\"modal-header\">\n      <p class=\"icon-close\" data-dismiss=\"modal\">\n        &times;\n      </p>\n    </div>\n    <div class=\"modal-content\">\n      <div>\n        <script>\n          function openCity(evt, cityName) {\n            // Declare all variables\n            var i, tabcontent, tablinks;\n\n            // Get all elements with class=\"tabcontent\" and hide them\n            tabcontent = document.getElementsByClassName(\"tabcontent\");\n            for (i = 0; i < tabcontent.length; i++) {\n              tabcontent[i].style.display = \"none\";\n            }\n\n            // Get all elements with class=\"tablinks\" and remove the class \"active\"\n            tablinks = document.getElementsByClassName(\"tablinks\");\n            for (i = 0; i < tablinks.length; i++) {\n              tablinks[i].className = tablinks[i].className.replace(\" active\", \"\");\n            }\n\n            // Show the current tab, and add an \"active\" class to the button that opened the tab\n            document.getElementById(cityName).style.display = \"block\";\n            evt.currentTarget.className += \" active\";\n          }\n        </script>\n        <!-- Tab links -->\n        <div class=\"tab\">\n          <button class=\"tablinks\" onclick=\"openCity(event, 'terms_condition')\" id=\"defaultOpen\">{{'TERMS_CONDITION_TITLE' | translate}}</button>\n          <button class=\"tablinks\" onclick=\"openCity(event, 'representation_condition')\">{{'REPRESENTATION_TERM_TITLE' | translate}}</button>\n        </div>\n        <!-- Tab content -->\n        <div id=\"terms_condition\" class=\"tabcontent\">\n          <div class=\"content\" ng-bind-html=\"$ctrl.termsCondition\" style=\"height: 500px; overflow-y: scroll;\"> </div>\n        </div>\n\n        <div id=\"representation_condition\" class=\"tabcontent\">\n          <div class=\"content\" ng-bind-html=\"$ctrl.termsRepresentation\" style=\"height: 500px; overflow-y: scroll;\"> </div>\n        </div>\n      </div>\n\n      <div class=\"footer\">\n        <div>\n          <div class=\"form-check has-success\">\n            <input type=\"checkbox\" name=\"checkboxG1\" id=\"checkboxG1\" class=\"css-checkbox\" ng-model=\"$ctrl.user.check1\" ng-change=\"$ctrl.allCheckboxIsChecked()\">\n            <label for=\"checkboxG1\" class=\"css-label radGroup1 clr\"> {{'US_CITIZEN' | translate}} </label>\n          </div>\n          <div class=\"form-check has-success\">\n            <input type=\"checkbox\" name=\"checkboxG2\" id=\"checkboxG2\" class=\"css-checkbox\" ng-model=\"$ctrl.user.check2\">\n            <label for=\"checkboxG2\" class=\"css-label radGroup1 clr\"> {{'AGREE_TERM' | translate}} </label>\n          </div>\n          <!--<div class=\"form-check has-success\">\n            <input type=\"checkbox\" name=\"checkboxG3\" id=\"checkboxG3\" class=\"css-checkbox\" ng-model=\"$ctrl.user.check3\">\n            <label for=\"checkboxG3\" class=\"css-label radGroup1 clr\"> {{'AGREE_PRIVACY_POLICY' | translate}} </label>\n          </div>-->\n          <div class=\"form-check has-success\">\n            <input type=\"checkbox\" name=\"checkboxG4\" id=\"checkboxG4\" class=\"css-checkbox\" ng-model=\"$ctrl.user.check4\">\n            <label for=\"checkboxG4\" class=\"css-label radGroup1 clr\"> {{'AGREE_FUTURE_VALUE' | translate}}</label>\n          </div>\n          <div class=\"area-button\">\n            <button ng-show=\"$ctrl.allCheckboxIsChecked()\" class=\"primary-button\" data-ng-click=\"$ctrl.doAccept()\" data-dismiss=\"modal\">{{'AGREE' | translate}}</button>\n            <!--<button ng-show=\"!$ctrl.userIsValidToSignup() || !$ctrl.allCheckboxIsChecked()\" class=\"disabled-button\">{{'AGREE' | translate}}</button>-->\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <!-- MODAL - criar directiva change password -->\n  <div id=\"modal-change-password\" class=\"modal\">\n    <div class=\"modal-header\">\n      <p class=\"icon-close\" data-dismiss=\"modal\">\n        &times;\n      </p>\n    </div>\n    <div class=\"modal-content\" style=\"height: 100%;\">\n\n      <div ng-show=\"$ctrl.loadingResetPass\" class=\"loadingResetPass\">\n        {{'LOADING' | translate}}\n      </div>\n\n      <div ng-show=\"$ctrl.showMsgEmailSent\" class=\"showEmailSent\">\n        <h3 for=\"change\">{{'EMAIL_SENT' | translate}}</h3>\n        <div style=\"width: 100px;\">\n          <button class=\"icon-close\" data-dismiss=\"modal\">{{'CLOSE' | translate}}</button>\n        </div>\n      </div>\n\n      <form class=\"form-msg-pass\" ng-show=\"!$ctrl.loadingResetPass && !$ctrl.showMsgEmailSent\">\n        <div style=\"text-align: center;\">\n          <h3 for=\"change\">{{'CHANGE_PASSWORD_INSTRUCTION' | translate}}</h3>\n        </div>\n        <div ng-show=\"$ctrl.showErrorMsgEmailSent\" class=\"showErrorMsg\">\n          <h5 for=\"change\">{{'EMAIL_NOT_SENT' | translate}}</h5>\n          <div style=\"width: 100px;\">\n            <button style=\"border: 0;\n              padding: 5px 20px;\n              border-radius: 20px;\n              cursor: pointer;\" class=\"icon-close\" data-dismiss=\"modal\">{{'CLOSE' | translate}}</button>\n          </div>\n        </div>\n\n        <div>\n          <input type=\"text\" name=\"change-password\" ng-model=\"$ctrl.emailToChangePassword\" style=\"    border: 0;\n          width: 200px;\n          border-bottom: solid 1px #734cb3;\n          background-color: transparent;\n          padding: 20px;\n          color: #fff;\n          margin: 20px;\">\n        </div>\n        <div>\n          <button ng-click=\"$ctrl.doChangePassword()\" style=\"    border: 0;\n          padding: 5px 20px;\n          border-radius: 20px;\n          cursor: pointer;\">{{'CHANGE_PASSWORD' | translate}}</button>\n        </div>\n      </form>\n    </div>\n  </div>\n\n  <lunesheader showlogout='false' showlinks='false'></lunesheader>\n\n  <!-- AUTHENTICATION FORM -->\n  <section class=\"authentication\">\n    <div>\n      <form name=\"$ctrl.loginForm\">\n        <div class=\"row\">\n\n          <div class=\"col-12 title\">\n            <h4>{{'WELCOME' | translate}}</h4>\n          </div>\n\n          <div class=\"col-12 col-lg-12 error-fields\" ng-show=\"$ctrl.showErrorForm\">{{'ALL_FIELDS_REQUIRED' | translate}}</div>\n\n          <div class=\"col-lg-6 col-xs-12\">\n            <div class=\"input-form\">\n              <label for=\"input-email\">{{'EMAIL' | translate}}</label>\n              <input data-ng-model=\"$ctrl.user.email\" id=\"input-email\" name=\"email\" required type=\"text\" placeholder=\"{{'EMAIL_PLACEHOLDER' | translate}}\">\n            </div>\n            <div class=\"input-form\">\n              <label for=\"input-password\">{{'PASSWORD' | translate}}</label>\n              <input data-ng-model=\"$ctrl.user.password\" id=\"input-password\" name=\"password\" minlength=\"8\" required type=\"password\" placeholder=\"{{'PASSWORD_PLACEHOLDER' | translate}}\">\n            </div>\n            <div class=\"area-button txt-center\">\n              <button class=\"rounded-button\" data-toggle=\"modal\" ng-click=\"$ctrl.doLogin()\">\n                <img src=\"https://res.cloudinary.com/luneswallet/image/upload/v1519442470/next_aozz2n.png\" width=\"20px\" alt=\"next\" />\n              </button>\n            </div>\n            <div class=\"dont-have-account\">\n              <label>{{'DONT_HAVE_ACCOUNT' | translate}}</label>\n              <label class=\"txt-green label-signup\" ng-click=\"$ctrl.goToSignup()\">{{'SIGNUP' | translate}}</label>\n              <!--<p class=\"cursor-pointer\">{{'RESET_PASSWORD' | translate}}</p>-->\n            </div>\n            <div style=\"margin: 5px 0 30px 0;\">\n              <label>{{'DO_YOU_CHANGE_PASSWORD' | translate}}</label>\n              <label class=\"txt-green label-signup\" data-toggle=\"modal\" data-target=\"#modal-change-password\">{{'CHANGE_PASSWORD' | translate}}</label>\n            </div>\n\n          </div>\n\n          <div class=\"col-lg-5 col-xs-12\" style=\"margin: 5px 0 30px 0;\">\n            <img src=\"https://res.cloudinary.com/luneswallet/image/upload/v1520387055/illustracao-wallet-lunes_dhikqa.png\" width=\"100%\"\n              alt=\"next\" />\n          </div>\n\n          <div class=\"col-lg-4 col-xs-12\" ng-show=\"false\">\n            <div id=\"counter\" class=\"\">\n              <span id=\"coin_counter\" ng-show=\"false\">$ 00 000 000</span>\n              <div id=\"loading_bar\">\n                <div id=\"loading_bar_green\" style=\"width:50%;\"></div>\n              </div>\n              <div>\n                <div class=\"row\" style=\"text-align: center;\">\n                  <div class=\"col-xs-6 col-lg-6\">\n                    Pre-Ico\n                  </div>\n                  <div class=\"col-xs-6 col-lg-6\">\n                    Ico\n                  </div>\n                </div>\n\n                <!-- conter -->\n                <div class=\"row\" id=\"number\">\n                  <div class=\"col-xs-12\" id=\"time\">\n                    <div id=\"clockdiv\">\n                      <div>\n                        <span class=\"days\"></span>\n                        <div class=\"smalltext\">Days</div>\n                      </div>\n                      <div>\n                        <span class=\"hours\"></span>\n                        <div class=\"smalltext\">Hours</div>\n                      </div>\n                      <div>\n                        <span class=\"minutes\"></span>\n                        <div class=\"smalltext\">Minutes</div>\n                      </div>\n                      <div>\n                        <span class=\"seconds\"></span>\n                        <div class=\"smalltext\">Seconds</div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <!-- hard cap -->\n                <div class=\"row\" id=\"number\">\n                  <div class=\"col-xs-12 col-lg-12\" id=\"hard-cap\">\n                    <p>Hard cap</p>\n                    <p>$ 100 000 000</p>\n                  </div>\n                </div>\n\n              </div>\n            </div>\n\n          </div>\n\n\n\n      </form>\n      </div>\n  </section>\n  </div>\n  <lunesfooter />"

/***/ },
/* 693 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _index = __webpack_require__(685);
	
	var _countdown = __webpack_require__(694);
	
	var _countdown2 = _interopRequireDefault(_countdown);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var LoginController = function () {
	  function LoginController($state, HttpService, $filter, $sce, $timeout, ErrorMessagesService) {
	    _classCallCheck(this, LoginController);
	
	    this.$state = $state;
	    this.$timeout = $timeout;
	    this.currentPhase = [];
	    this.HttpService = HttpService;
	    this.termsCondition = $sce.trustAsHtml($filter('translate')('TERMS_CONDITIONS'));
	    this.termsRepresentation = $sce.trustAsHtml($filter('translate')('REPRESENTATION_TERM'));
	    this.ErrorMessagesService = ErrorMessagesService;
	    this.loadingResetPass = false;
	    this.user = {
	      email: '',
	      password: '',
	      check1: false,
	      check2: false,
	      check3: false,
	      check4: false
	    };
	    this.obtainPhase().catch(function (error) {
	      console.log(error);
	    });
	    (0, _countdown2.default)();
	  }
	
	  LoginController.prototype.doLogin = function () {
	    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
	      var _this = this;
	
	      var a, depositWallet;
	      return regeneratorRuntime.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              this.showLoading(true);
	              _context.next = 3;
	              return this.HttpService.login(this.user).catch(function (error) {
	                _this.notification(true, error);
	              });
	
	            case 3:
	              a = _context.sent;
	
	              this.showLoading(false);
	
	              if (!(a && a.accessToken)) {
	                _context.next = 23;
	                break;
	              }
	
	              localStorage.setItem(_index.STORAGE_KEY, JSON.stringify(a));
	
	              if (!a.confirmIcoTerm) {
	                _context.next = 21;
	                break;
	              }
	
	              if (!(!a.depositWallet || !a.depositWallet.BTC)) {
	                _context.next = 17;
	                break;
	              }
	
	              _context.next = 11;
	              return this.HttpService.createDepositWallet(a).catch(function (error) {
	                if (error && error.response && error.response.data) {
	                  console.log(error);
	                }
	              });
	
	            case 11:
	              depositWallet = _context.sent;
	
	              a.depositWallet = depositWallet;
	              localStorage.setItem(_index.STORAGE_KEY, JSON.stringify(a));
	              this.$state.go('buy');
	              _context.next = 19;
	              break;
	
	            case 17:
	              localStorage.setItem(_index.STORAGE_KEY, JSON.stringify(a));
	              this.$state.go('buy');
	
	            case 19:
	              _context.next = 23;
	              break;
	
	            case 21:
	              $('#modal-terms').modal('show');
	              setTimeout(function () {
	                document.getElementById("defaultOpen").click();
	              }, 200);
	
	            case 23:
	            case 'end':
	              return _context.stop();
	          }
	        }
	      }, _callee, this);
	    }));
	
	    function doLogin() {
	      return _ref.apply(this, arguments);
	    }
	
	    return doLogin;
	  }();
	
	  LoginController.prototype.doChangePassword = function () {
	    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
	      var _this2 = this;
	
	      var a;
	      return regeneratorRuntime.wrap(function _callee2$(_context2) {
	        while (1) {
	          switch (_context2.prev = _context2.next) {
	            case 0:
	              this.loadingResetPass = true;
	              _context2.next = 3;
	              return this.HttpService.changePassword(this.emailToChangePassword).catch(function (error) {
	                _this2.loadingResetPass = false;
	                _this2.$timeout(function () {
	                  _this2.showErrorMsgEmailSent = true;
	                }, 200);
	              });
	
	            case 3:
	              a = _context2.sent;
	
	
	              if (a && a.emailSent) {
	                this.$timeout(function () {
	                  _this2.loadingResetPass = false;
	                  _this2.showMsgEmailSent = true;
	                }, 200);
	              }
	
	            case 5:
	            case 'end':
	              return _context2.stop();
	          }
	        }
	      }, _callee2, this);
	    }));
	
	    function doChangePassword() {
	      return _ref2.apply(this, arguments);
	    }
	
	    return doChangePassword;
	  }();
	
	  LoginController.prototype.goToSignup = function goToSignup() {
	    this.$state.go('signup');
	  };
	
	  LoginController.prototype.allCheckboxIsChecked = function allCheckboxIsChecked() {
	    return this.user.check1 && this.user.check2 && this.user.check4;
	  };
	
	  LoginController.prototype.doAccept = function () {
	    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
	      var _this3 = this;
	
	      var a, depositWallet;
	      return regeneratorRuntime.wrap(function _callee3$(_context3) {
	        while (1) {
	          switch (_context3.prev = _context3.next) {
	            case 0:
	              this.showLoading(true);
	              this.currentUser = JSON.parse(localStorage.getItem(_index.STORAGE_KEY));
	              _context3.next = 4;
	              return this.HttpService.confirmterm(this.currentUser).catch(function (error) {
	                _this3.serverError = true;
	                _this3.serverErrorMessage = error.message;
	                console.log(error);
	              });
	
	            case 4:
	              a = _context3.sent;
	
	              if (!(!this.currentUser.depositWallet || !this.currentUser.depositWallet.BTC)) {
	                _context3.next = 14;
	                break;
	              }
	
	              _context3.next = 8;
	              return this.HttpService.createDepositWallet(this.currentUser).catch(function (error) {
	                if (error && error.response && error.response.data) {
	                  alert(error.response.data.message);
	                }
	                console.log(error);
	              });
	
	            case 8:
	              depositWallet = _context3.sent;
	
	              this.currentUser.depositWallet = depositWallet;
	              localStorage.setItem(_index.STORAGE_KEY, JSON.stringify(this.currentUser));
	              this.$state.go('buy');
	              _context3.next = 17;
	              break;
	
	            case 14:
	              localStorage.setItem(_index.STORAGE_KEY, JSON.stringify(this.currentUser));
	              this.$state.go('buy');
	              console.log(this.currentUser);
	
	            case 17:
	            case 'end':
	              return _context3.stop();
	          }
	        }
	      }, _callee3, this);
	    }));
	
	    function doAccept() {
	      return _ref3.apply(this, arguments);
	    }
	
	    return doAccept;
	  }();
	
	  LoginController.prototype.showLoading = function showLoading(isShow) {
	    if (isShow) {
	      $('<div class="modal-backdrop"><img src="https://res.cloudinary.com/luneswallet/image/upload/v1519442469/loading_y9ob8i.svg" /></div>').appendTo(document.body);
	    } else {
	      this.$timeout(function () {
	        $(".modal-backdrop").remove();
	      }, 1000);
	    }
	  };
	
	  LoginController.prototype.obtainPhase = function () {
	    var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
	      return regeneratorRuntime.wrap(function _callee4$(_context4) {
	        while (1) {
	          switch (_context4.prev = _context4.next) {
	            case 0:
	              _context4.prev = 0;
	
	              console.log("");
	              _context4.next = 4;
	              return this.HttpService.obtainPhase().catch(function (error) {
	                console.log(error);
	                alert('Erro ao tentar recuperar dados da fase da ICO');
	              });
	
	            case 4:
	              this.currentPhase = _context4.sent;
	
	              if (this.currentPhase) {
	                localStorage.setItem('lunes.phase', JSON.stringify(this.currentPhase));
	              }
	              this.showLoading(false);
	              _context4.next = 12;
	              break;
	
	            case 9:
	              _context4.prev = 9;
	              _context4.t0 = _context4['catch'](0);
	
	              console.log(_context4.t0);
	
	            case 12:
	            case 'end':
	              return _context4.stop();
	          }
	        }
	      }, _callee4, this, [[0, 9]]);
	    }));
	
	    function obtainPhase() {
	      return _ref4.apply(this, arguments);
	    }
	
	    return obtainPhase;
	  }();
	
	  LoginController.prototype.notification = function notification(isShow, msg) {
	    if (isShow) {
	      var self = this;
	      $('<div class="modal-backdrop-error"><h4 style="margin-top: 10%;">' + this.ErrorMessagesService.get(msg) + '</h4><button class="close-error">ok</button></div>').appendTo(document.body);
	      $('.close-error').on('click', function () {
	        $(".modal-backdrop-error").remove();
	      });
	    }
	  };
	
	  return LoginController;
	}();
	
	LoginController.$inject = ['$state', 'HttpService', '$filter', '$sce', '$timeout', 'ErrorMessagesService'];
	
	exports.default = LoginController;

/***/ },
/* 694 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var getTimeRemaining = function getTimeRemaining(endtime) {
	  var t = Date.parse(endtime) - Date.parse(new Date());
	  var seconds = Math.floor(t / 1000 % 60);
	  var minutes = Math.floor(t / 1000 / 60 % 60);
	  var hours = Math.floor(t / (1000 * 60 * 60) % 24);
	  var days = Math.floor(t / (1000 * 60 * 60 * 24));
	  return {
	    total: t,
	    days: days,
	    hours: hours,
	    minutes: minutes,
	    seconds: seconds
	  };
	};
	
	var initializeClock = function initializeClock(id, endtime) {
	  var clock = document.getElementById(id);
	  var daysSpan = clock.querySelector('.days');
	  var hoursSpan = clock.querySelector('.hours');
	  var minutesSpan = clock.querySelector('.minutes');
	  var secondsSpan = clock.querySelector('.seconds');
	
	  var updateClock = function updateClock() {
	    var t = getTimeRemaining(endtime);
	
	    daysSpan.innerHTML = t.days;
	    hoursSpan.innerHTML = ('0' + t.hours).slice(-2);
	    minutesSpan.innerHTML = ('0' + t.minutes).slice(-2);
	    secondsSpan.innerHTML = ('0' + t.seconds).slice(-2);
	
	    if (t.total <= 0) {
	      clearInterval(timeinterval);
	    }
	  };
	
	  updateClock();
	  var timeinterval = setInterval(updateClock, 1000);
	};
	
	var start = function start() {
	  var deadline = new Date(Date.parse(new Date()) + 25 * 24 * 60 * 60 * 1000);
	  initializeClock('time', deadline);
	};
	
	exports.default = start;

/***/ },
/* 695 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(696);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(689)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../../node_modules/css-loader/index.js?sourceMap!../../node_modules/postcss-loader/index.js!../../node_modules/sass-loader/index.js?config=sassLoader!./login.component.scss", function() {
				var newContent = require("!!../../node_modules/css-loader/index.js?sourceMap!../../node_modules/postcss-loader/index.js!../../node_modules/sass-loader/index.js?config=sassLoader!./login.component.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 696 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(688)(true);
	// imports
	
	
	// module
	exports.push([module.id, ".dont-have-account {\n  margin-top: 50px; }\n  .dont-have-account .label-signup {\n    cursor: pointer; }\n\n.modal-backdrop-error {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 1040;\n  background-color: #4c2b82;\n  opacity: 0.7;\n  text-align: center; }\n  .modal-backdrop-error .close-error {\n    border: 0;\n    border-radius: 30px;\n    padding: 5px 50px;\n    background-color: #4cd466;\n    color: #fff;\n    cursor: pointer; }\n\n/* counter */\n#counter {\n  font-family: 'Offside', cursive;\n  margin-top: 20px;\n  margin-bottom: 20px; }\n\n#counter #coin_counter {\n  display: block;\n  text-align: right;\n  font-size: 1.3em;\n  margin-bottom: 10px;\n  padding-right: 20px; }\n\n#counter #loading_bar {\n  display: block;\n  background-color: #fff;\n  height: 5px; }\n\n#counter #loading_bar_green {\n  display: block;\n  background-color: #4cd566;\n  height: 5px; }\n\n#counter #base_counter {\n  background-color: #544d8f;\n  padding: 20px;\n  border-radius: 0px 0px 4px 4px; }\n\n#counter #number {\n  margin-top: 30px;\n  display: block;\n  text-align: center; }\n\n#counter #number span {\n  font-size: .2em;\n  color: #fff;\n  display: block;\n  margin-top: 20px; }\n\n#counter #hard-cap {\n  display: block;\n  background-color: #544d8f;\n  max-width: 160px;\n  margin-left: auto;\n  margin-right: auto;\n  color: #4cd566;\n  font-size: .8em;\n  text-align: center;\n  padding: 10px;\n  border-radius: 4px;\n  margin-top: -40px; }\n\n#counter #hard-cap span {\n  display: block;\n  color: #fff;\n  font-size: 1.2em; }\n\n#clockdiv {\n  font-family: sans-serif;\n  color: #fff;\n  display: inline-block;\n  font-weight: 100;\n  text-align: center;\n  font-size: 30px; }\n\n#clockdiv > div {\n  padding: 5px;\n  border-radius: 3px;\n  background: #00BF96;\n  display: inline-block;\n  width: 80px; }\n\n#clockdiv div > span {\n  padding: 15px;\n  border-radius: 3px;\n  background: #00816A;\n  display: inline-block; }\n\n.smalltext {\n  padding-top: 5px;\n  font-size: 16px; }\n\n.login #modal-change-password {\n  box-shadow: #3a2261 1px 0px 5px 4px;\n  margin: 10px;\n  overflow-y: hidden; }\n\n.login .loadingResetPass {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-direction: column;\n      flex-direction: column;\n  -ms-flex-align: center;\n      align-items: center;\n  -ms-flex-pack: center;\n      justify-content: center;\n  height: 100%; }\n\n.login .showEmailSent {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-direction: column;\n      flex-direction: column;\n  -ms-flex-align: center;\n      align-items: center;\n  -ms-flex-pack: center;\n      justify-content: center;\n  height: 100%; }\n\n.login .showErrorMsg {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-direction: column;\n      flex-direction: column;\n  -ms-flex-align: center;\n      align-items: center;\n  -ms-flex-pack: center;\n      justify-content: center;\n  height: 100%; }\n  .login .showErrorMsg h5 {\n    padding: 2px 10px;\n    background-color: #d83636;\n    border-radius: 20px; }\n  .login .showErrorMsg button {\n    border: 0;\n    padding: 5px 20px;\n    border-radius: 20px;\n    cursor: pointer; }\n\n.login .form-msg-pass {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-direction: column;\n      flex-direction: column;\n  -ms-flex-align: center;\n      align-items: center;\n  -ms-flex-pack: center;\n      justify-content: center;\n  height: 100%; }\n", "", {"version":3,"sources":["D:/workspaces/lunes/lunes-purchase/src/login/src/login/login.component.scss"],"names":[],"mappings":"AAAA;EACE,iBAAgB,EAIjB;EALD;IAGI,gBAAe,EAChB;;AAGH;EACE,gBAAe;EACf,OAAM;EACN,SAAQ;EACR,UAAS;EACT,QAAO;EACP,cAAa;EACb,0BAAyB;EACzB,aAAY;EACZ,mBAAkB,EASnB;EAlBD;IAWI,UAAS;IACT,oBAAmB;IACnB,kBAAiB;IACjB,0BAAyB;IACzB,YAAW;IACX,gBAAe,EAChB;;AAGH,aAAa;AACb;EACE,gCAA+B;EAC/B,iBAAe;EACf,oBAAkB,EAEnB;;AACD;EACE,eAAc;EACd,kBAAiB;EACjB,iBAAgB;EAChB,oBAAmB;EACnB,oBAAmB,EACpB;;AACD;EACE,eAAa;EACb,uBAAsB;EACtB,YAAW,EACZ;;AACD;EACE,eAAc;EACd,0BAAyB;EACzB,YAAW,EACZ;;AACD;EACE,0BAAyB;EACzB,cAAY;EACZ,+BAA8B,EAC/B;;AACD;EACE,iBAAgB;EAChB,eAAc;EACd,mBAAkB,EACnB;;AACD;EACE,gBAAe;EACf,YAAU;EACV,eAAc;EACd,iBAAgB,EACjB;;AACD;EACE,eAAc;EACd,0BAAyB;EACzB,iBAAgB;EAChB,kBAAiB;EACjB,mBAAkB;EAClB,eAAc;EACd,gBAAe;EACf,mBAAkB;EAClB,cAAa;EACb,mBAAkB;EAClB,kBAAiB,EAClB;;AACD;EACE,eAAc;EACd,YAAW;EACX,iBAAgB,EACjB;;AAED;EACE,wBAAuB;EACvB,YAAW;EACX,sBAAqB;EACrB,iBAAgB;EAChB,mBAAkB;EAClB,gBAAe,EAChB;;AAED;EACE,aAAY;EACZ,mBAAkB;EAClB,oBAAmB;EACnB,sBAAqB;EACrB,YAAW,EACZ;;AAED;EACE,cAAa;EACb,mBAAkB;EAClB,oBAAmB;EACnB,sBAAqB,EACtB;;AAED;EACE,iBAAgB;EAChB,gBAAe,EAChB;;AAED;EAGI,oCAAmC;EACnC,aAAY;EACZ,mBAAkB,EACnB;;AANH;EASI,qBAAa;EAAb,cAAa;EACb,2BAAsB;MAAtB,uBAAsB;EACtB,uBAAmB;MAAnB,oBAAmB;EACnB,sBAAuB;MAAvB,wBAAuB;EACvB,aAAY,EACb;;AAdH;EAiBI,qBAAa;EAAb,cAAa;EACb,2BAAsB;MAAtB,uBAAsB;EACtB,uBAAmB;MAAnB,oBAAmB;EACnB,sBAAuB;MAAvB,wBAAuB;EACvB,aAAY,EACb;;AAtBH;EAyBI,qBAAa;EAAb,cAAa;EACb,2BAAsB;MAAtB,uBAAsB;EACtB,uBAAmB;MAAnB,oBAAmB;EACnB,sBAAuB;MAAvB,wBAAuB;EACvB,aAAY,EAYb;EAzCH;IA+BM,kBAAiB;IACjB,0BAAyB;IACzB,oBAAmB,EACpB;EAlCL;IAoCM,UAAS;IACT,kBAAiB;IACjB,oBAAmB;IACnB,gBAAe,EAChB;;AAxCL;EA4CI,qBAAa;EAAb,cAAa;EACb,2BAAsB;MAAtB,uBAAsB;EACtB,uBAAmB;MAAnB,oBAAmB;EACnB,sBAAuB;MAAvB,wBAAuB;EACvB,aAAY,EACb","file":"login.component.scss","sourcesContent":[".dont-have-account {\r\n  margin-top: 50px;\r\n  .label-signup {\r\n    cursor: pointer;\r\n  }\r\n}\r\n\r\n.modal-backdrop-error {\r\n  position: fixed;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  z-index: 1040;\r\n  background-color: #4c2b82;\r\n  opacity: 0.7;\r\n  text-align: center;\r\n  .close-error {\r\n    border: 0;\r\n    border-radius: 30px;\r\n    padding: 5px 50px;\r\n    background-color: #4cd466;\r\n    color: #fff;\r\n    cursor: pointer;\r\n  }\r\n}\r\n\r\n/* counter */\r\n#counter {\r\n  font-family: 'Offside', cursive;\r\n  margin-top:20px;\r\n  margin-bottom:20px;\r\n  \r\n}\r\n#counter #coin_counter {\r\n  display: block;\r\n  text-align: right;\r\n  font-size: 1.3em;\r\n  margin-bottom: 10px;\r\n  padding-right: 20px;\r\n}\r\n#counter #loading_bar {\r\n  display:block;\r\n  background-color: #fff;\r\n  height: 5px;\r\n}\r\n#counter #loading_bar_green {\r\n  display: block;\r\n  background-color: #4cd566;\r\n  height: 5px;\r\n}\r\n#counter #base_counter {\r\n  background-color: #544d8f;\r\n  padding:20px;\r\n  border-radius: 0px 0px 4px 4px;\r\n}\r\n#counter #number {\r\n  margin-top: 30px;\r\n  display: block;\r\n  text-align: center;\r\n}\r\n#counter #number span {\r\n  font-size: .2em;\r\n  color:#fff;\r\n  display: block;\r\n  margin-top: 20px;\r\n}\r\n#counter #hard-cap {\r\n  display: block;\r\n  background-color: #544d8f;\r\n  max-width: 160px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  color: #4cd566;\r\n  font-size: .8em;\r\n  text-align: center;\r\n  padding: 10px;\r\n  border-radius: 4px;\r\n  margin-top: -40px;\r\n}\r\n#counter #hard-cap span {\r\n  display: block;\r\n  color: #fff;\r\n  font-size: 1.2em;\r\n}\r\n\r\n#clockdiv{\r\n  font-family: sans-serif;\r\n  color: #fff;\r\n  display: inline-block;\r\n  font-weight: 100;\r\n  text-align: center;\r\n  font-size: 30px;\r\n}\r\n\r\n#clockdiv > div{\r\n  padding: 5px;\r\n  border-radius: 3px;\r\n  background: #00BF96;\r\n  display: inline-block;\r\n  width: 80px;\r\n}\r\n\r\n#clockdiv div > span{\r\n  padding: 15px;\r\n  border-radius: 3px;\r\n  background: #00816A;\r\n  display: inline-block;\r\n}\r\n\r\n.smalltext{\r\n  padding-top: 5px;\r\n  font-size: 16px;\r\n}\r\n\r\n.login {\r\n\r\n  #modal-change-password {\r\n    box-shadow: #3a2261 1px 0px 5px 4px;\r\n    margin: 10px;\r\n    overflow-y: hidden;\r\n  }\r\n\r\n  .loadingResetPass {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 100%;\r\n  }\r\n  \r\n  .showEmailSent {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 100%;\r\n  }\r\n  \r\n  .showErrorMsg {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 100%;\r\n    h5 {\r\n      padding: 2px 10px;\r\n      background-color: #d83636;\r\n      border-radius: 20px;\r\n    }\r\n    button {\r\n      border: 0;\r\n      padding: 5px 20px;\r\n      border-radius: 20px;\r\n      cursor: pointer;\r\n    }\r\n  }\r\n  \r\n  .form-msg-pass {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 100%;\r\n  }\r\n\r\n}\r\n\r\n"],"sourceRoot":""}]);
	
	// exports


/***/ },
/* 697 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _signupComponent = __webpack_require__(698);
	
	var _signupComponent2 = _interopRequireDefault(_signupComponent);
	
	var _signup = __webpack_require__(699);
	
	var _signup2 = _interopRequireDefault(_signup);
	
	__webpack_require__(700);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var SignupComponent = {
	  template: _signupComponent2.default,
	  controller: _signup2.default
	};
	
	exports.default = SignupComponent;

/***/ },
/* 698 */
/***/ function(module, exports) {

	module.exports = "<div class=\"container\">\n\n  <!-- MODAL - criar directiva depois -->\n  <div id=\"modal-terms\" class=\"modal\">\n    <div class=\"modal-header\">\n      <p class=\"icon-close\" data-dismiss=\"modal\">\n        &times;\n      </p>\n    </div>\n    <div class=\"modal-content\">\n      <div>\n        <script>\n          function openCity(evt, cityName) {\n            // Declare all variables\n            var i, tabcontent, tablinks;\n\n            // Get all elements with class=\"tabcontent\" and hide them\n            tabcontent = document.getElementsByClassName(\"tabcontent\");\n            for (i = 0; i < tabcontent.length; i++) {\n              tabcontent[i].style.display = \"none\";\n            }\n\n            // Get all elements with class=\"tablinks\" and remove the class \"active\"\n            tablinks = document.getElementsByClassName(\"tablinks\");\n            for (i = 0; i < tablinks.length; i++) {\n              tablinks[i].className = tablinks[i].className.replace(\" active\", \"\");\n            }\n\n            // Show the current tab, and add an \"active\" class to the button that opened the tab\n            document.getElementById(cityName).style.display = \"block\";\n            evt.currentTarget.className += \" active\";\n          }\n        </script>\n        <!-- Tab links -->\n        <div class=\"tab\">\n          <button class=\"tablinks\" onclick=\"openCity(event, 'terms_condition')\" id=\"defaultOpen\">{{'TERMS_CONDITION_TITLE' | translate}}</button>\n          <button class=\"tablinks\" onclick=\"openCity(event, 'representation_condition')\">{{'REPRESENTATION_TERM_TITLE' | translate}}</button>\n        </div>\n        <!-- Tab content -->\n        <div id=\"terms_condition\" class=\"tabcontent\">\n          <div class=\"content\" ng-bind-html=\"$ctrl.termsCondition\" style=\"height: 500px; overflow-y: scroll;\"> </div>\n        </div>\n\n        <div id=\"representation_condition\" class=\"tabcontent\">\n          <div class=\"content\" ng-bind-html=\"$ctrl.termsRepresentation\" style=\"height: 500px; overflow-y: scroll;\"> </div>\n        </div>\n      </div>\n\n      <div class=\"footer\">\n        <div>\n          <div class=\"form-check has-success\">\n            <input type=\"checkbox\" name=\"checkboxG1\" id=\"checkboxG1\" class=\"css-checkbox\" ng-model=\"$ctrl.user.check1\" ng-change=\"$ctrl.allCheckboxIsChecked()\">\n            <label for=\"checkboxG1\" class=\"css-label radGroup1 clr\"> {{'US_CITIZEN' | translate}} </label>\n          </div>\n          <div class=\"form-check has-success\">\n            <input type=\"checkbox\" name=\"checkboxG2\" id=\"checkboxG2\" class=\"css-checkbox\" ng-model=\"$ctrl.user.check2\">\n            <label for=\"checkboxG2\" class=\"css-label radGroup1 clr\"> {{'AGREE_TERM' | translate}} </label>\n          </div>\n          <!--<div class=\"form-check has-success\">\n            <input type=\"checkbox\" name=\"checkboxG3\" id=\"checkboxG3\" class=\"css-checkbox\" ng-model=\"$ctrl.user.check3\">\n            <label for=\"checkboxG3\" class=\"css-label radGroup1 clr\"> {{'AGREE_PRIVACY_POLICY' | translate}} </label>\n          </div>-->\n          <div class=\"form-check has-success\">\n            <input type=\"checkbox\" name=\"checkboxG4\" id=\"checkboxG4\" class=\"css-checkbox\" ng-model=\"$ctrl.user.check4\">\n            <label for=\"checkboxG4\" class=\"css-label radGroup1 clr\"> {{'AGREE_FUTURE_VALUE' | translate}}</label>\n          </div>\n          <div class=\"area-button\">\n            <button ng-show=\"$ctrl.allCheckboxIsChecked()\" class=\"primary-button\" data-ng-click=\"$ctrl.doSignup()\" data-dismiss=\"modal\">{{'AGREE' | translate}}</button>\n            <!--<button ng-show=\"!$ctrl.userIsValidToSignup() || !$ctrl.allCheckboxIsChecked()\" class=\"disabled-button\">{{'AGREE' | translate}}</button>-->\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <lunesheader showlogout='false' showlinks='false'></lunesheader>\n\n  <!-- AUTHENTICATION FORM -->\n  <section class=\"authentication\">\n    <div>\n      <form name=\"$ctrl.loginForm\">\n\n        <div class=\"row\">\n          <div class=\"col-xs-12 col-lg-12 title\">\n            <h4>{{'WELCOME' | translate}}</h4>\n            <h4>{{'BEGIN_YOUR_REGISTRATION' | translate}}</h4>\n          </div>\n\n          <div class=\"col-xs-12 col-lg-12 error-fields\" ng-show=\"$ctrl.showErrorForm\">{{'ALL_FIELDS_REQUIRED' | translate}}</div>\n\n          <div class=\"alert alert-danger\" ng-show=\"$ctrl.serverError\" role=\"alert\">\n            <h4 class=\"alert-heading\">{{'AN_ERROR_CREATE_ACCOUNT' | translate}}</h4>\n            <p>{{$ctrl.serverErrorMessage</p>\n          </div>\n\n          <!-- USER INFO -->\n          <div class=\"col-xs-12 col-lg-6\">\n            <div class=\"input-form\">\n              <label for=\"input-name\">* {{'NAME' | translate}}</label>\n              <input data-ng-model=\"$ctrl.user.name\" id=\"input-name\" name=\"name\" required type=\"text\" placeholder=\"{{'NAME_PLACEHOLDER' | translate}}\">\n            </div>\n          </div>\n\n          <div class=\"col-xs-12 col-lg-6\">\n            <div class=\"input-form\">\n              <label for=\"input-lastname\">* {{'LAST_NAME' | translate}}</label>\n              <input data-ng-model=\"$ctrl.user.lastname\" id=\"input-lastname\" name=\"lastname\" required type=\"text\" placeholder=\"{{'LAST_NAME_PLACEHOLDER' | translate}}\">\n            </div>\n          </div>\n        </div>\n\n        <!-- EMAIL INFO -->\n        <div class=\"row\">\n          <div class=\"col-xs-12 col-lg-6\">\n            <div class=\"input-form\">\n              <label for=\"input-email\">* {{'EMAIL' | translate}}</label>\n              <input data-ng-model=\"$ctrl.user.email\" id=\"input-email\" name=\"email\" ng-model-options=\"{ debounce: 3000 }\" required type=\"email\"\n                placeholder=\"{{'EMAIL_PLACEHOLDER' | translate}}\">\n            </div>\n          </div>\n\n          <div class=\"col-xs-12 col-lg-6\">\n            <div class=\"input-form\">\n              <label for=\"input-confirm-email\">* {{'CONFIRM_EMAIL' | translate}}</label>\n              <input data-ng-model=\"$ctrl.user.confirmEmail\" id=\"input-confirm-email\" email name=\"confirmEmail\" email-match required type=\"email\"\n                placeholder=\"{{'CONFIRM_EMAIL_PLACEHOLDER' | translate}}\">\n            </div>\n\n            <!-- VALIDATION EMAIL -->\n            <span style=\"color:#f8b61c;\" ng-show=\"$ctrl.loginForm.email.$dirty && $ctrl.loginForm.email.$invalid\">\n              <span ng-show=\"$ctrl.loginForm.email.$error.required\">{{'EMAIL_REQUIRED' | translate}}\n                <br>\n              </span>\n              <span ng-show=\"$ctrl.loginForm.email.$error.email\">{{'EMAIL_INVALID' | translate}}\n                <br>\n              </span>\n            </span>\n            <span style=\"color:#f8b61c;\" ng-show=\"$ctrl.loginForm.confirmEmail.$dirty && $ctrl.loginForm.confirmEmail.$invalid\">\n              <span ng-show=\"$ctrl.user.email !== $ctrl.user.confirmEmail\">{{'EMAIL_MATCH' | translate}}\n                <br> </span>\n            </span>\n\n          </div>\n        </div>\n\n        <!-- PASSWORD INFO -->\n        <div class=\"row\">\n          <div class=\"col-xs-12 col-lg-6\">\n            <div class=\"input-form\">\n              <label for=\"input-password\">* {{'PASSWORD' | translate}}</label>\n              <input type=\"password\" data-ng-model=\"$ctrl.user.password\" id=\"input-password\" ng-model-options=\"{ debounce: 500 }\" uppercase\n                lowercase numeric special-character required name=\"password\" ng-minlength=\"8\" placeholder=\"{{'PASSWORD_PLACEHOLDER' | translate}}\">\n            </div>\n          </div>\n\n          <div class=\"col-xs-12 col-lg-6\">\n            <div class=\"input-form\">\n              <label for=\"input-confirm-password\">* {{'CONFIRM_PASSWORD' | translate}}</label>\n              <input type=\"password\" data-ng-model=\"$ctrl.user.confirmPassword\" id=\"input-confirm-password\" ng-model-options=\"{ debounce: 500 }\"\n                required name=\"confirmPassword\" ng-minlength=\"8\" placeholder=\"{{'CONFIRM_PASSWORD_PLACEHOLDER' | translate}}\">\n            </div>\n            <!-- VALIDATION PASSWORD -->\n            <span style=\"color:#f8b61c;\" ng-show=\"$ctrl.loginForm.password.$dirty && $ctrl.loginForm.password.$invalid\">\n              <span ng-show=\"$ctrl.loginForm.password.$error.required\">{{'PASSWORD_REQUIRED' | translate}}\n                <br>\n              </span>\n              <span ng-show=\"$ctrl.loginForm.password.$error.minlength\">{{'PASSWORD_LENGTH' | translate}}\n                <br>\n              </span>\n            </span>\n            <span style=\"color:#f8b61c;\" ng-show=\"$ctrl.loginForm.confirmPassword.$dirty && $ctrl.loginForm.confirmPassword.$invalid\">\n              <span ng-show=\"$ctrl.user.confirmPassword !== $ctrl.user.password\">{{'PASSWORD_MATCH' | translate}}\n                <br>\n              </span>\n            </span>\n          </div>\n\n        </div>\n\n        <!-- CUPOM -->\n        <div class=\"row\">\n          <div class=\"col-xs-12 col-lg-6\">\n            <div class=\"input-form\">\n              <label for=\"input-coupon\">{{'DO_YOU_HAVE_A_COUPON' | translate}}</label>\n              <input data-ng-model=\"$ctrl.user.coupon\" id=\"input-coupon\" name=\"coupon\" type=\"text\" placeholder=\"{{'COUPON_PLACEHOLDER' | translate}}\">\n            </div>\n          </div>\n          <div class=\"col-xs-12 col-lg-6\" style=\"margin-top: 15px;\">\n            <div class=\"area-button txt-right\" style=\"display: flex;justify-content: center;\">\n              <button class=\"rounded-button ng-hide\" data-toggle=\"modal\" data-target=\"#modal-terms\" ng-show=\"$ctrl.loginForm.$valid\" ng-click=\"$ctrl.enableTab()\">\n                <img src=\"https://res.cloudinary.com/luneswallet/image/upload/v1519442470/next_aozz2n.png\" width=\"20px\" alt=\"next\">\n              </button>\n\n              <button class=\"rounded-button\" ng-show=\"!$ctrl.loginForm.$valid\" ng-click=\"$ctrl.showError()\">\n                <img src=\"https://res.cloudinary.com/luneswallet/image/upload/v1519442470/next_aozz2n.png\" width=\"20px\" alt=\"next\">\n              </button>\n            </div>\n            <div style=\"display: flex;justify-content: center;\" ng-show=\"false\">\n              <a href=\"#!/login\" style=\"font-size: 10px;color: #fff;\">{{'BACK' | translate}}</p>\n            </div>\n          </div>\n\n        </div>\n\n      </form>\n    </div>\n  </section>\n</div>\n<lunesfooter />"

/***/ },
/* 699 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _index = __webpack_require__(685);
	
	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var SignupController = function () {
	  function SignupController($state, HttpService, $filter, $sce, $injector, $timeout, $translate, ErrorMessagesService) {
	    _classCallCheck(this, SignupController);
	
	    this.$state = $state;
	    this.$timeout = $timeout;
	    this.HttpService = HttpService;
	    this.$translate = $translate;
	    this.ErrorMessagesService = ErrorMessagesService;
	    this.showErrorForm = false;
	    this.termsCondition = $sce.trustAsHtml($filter('translate')('TERMS_CONDITIONS'));
	    this.termsRepresentation = $sce.trustAsHtml($filter('translate')('REPRESENTATION_TERM'));
	    this.serverError = false;
	    this.user = {
	      name: '',
	      lastname: '',
	      email: '',
	      confirmEmail: '',
	      password: '',
	      confirmPassword: '',
	      coupon: '',
	      check1: false,
	      check2: false,
	      check3: false,
	      check4: false
	    };
	  }
	
	  SignupController.prototype.doSignup = function () {
	    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
	      var _this = this;
	
	      var obj, a, b, depositWallet;
	      return regeneratorRuntime.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              this.showLoading(true);
	              obj = {
	                name: this.user.name,
	                lastname: this.user.lastname,
	                email: this.user.email,
	                password: this.user.password,
	                coupon: this.user.coupon,
	                testnet: false
	              };
	              _context.next = 4;
	              return this.HttpService.signup(obj).catch(function (error) {
	                //this.serverError = true
	                //this.serverErrorMessage = error.message
	                _this.notificationError(true, error);
	              });
	
	            case 4:
	              a = _context.sent;
	
	              if (!(a && a.accessToken)) {
	                _context.next = 25;
	                break;
	              }
	
	              this.serverError = false;
	              this.serverErrorMessage = '';
	              localStorage.setItem('lunes.accessToken', JSON.stringify(a));
	              this.showLoading(false);
	              _context.next = 12;
	              return this.HttpService.confirmterm(a).catch(function (error) {
	                _this.serverError = true;
	                _this.serverErrorMessage = error.message;
	                console.log(error);
	              });
	
	            case 12:
	              b = _context.sent;
	
	              if (!(!a.depositWallet || !a.depositWallet.BTC)) {
	                _context.next = 22;
	                break;
	              }
	
	              _context.next = 16;
	              return this.HttpService.createDepositWallet(a).catch(function (error) {
	                if (error && error.response && error.response.data) {
	                  alert(error.response.data.message);
	                }
	                console.log(error);
	              });
	
	            case 16:
	              depositWallet = _context.sent;
	
	              a.depositWallet = depositWallet;
	              localStorage.setItem(_index.STORAGE_KEY, JSON.stringify(a));
	              this.$state.go('historic');
	              _context.next = 25;
	              break;
	
	            case 22:
	              localStorage.setItem(_index.STORAGE_KEY, JSON.stringify(a));
	              this.$state.go('historic');
	              console.log(a);
	
	            case 25:
	            case 'end':
	              return _context.stop();
	          }
	        }
	      }, _callee, this);
	    }));
	
	    function doSignup() {
	      return _ref.apply(this, arguments);
	    }
	
	    return doSignup;
	  }();
	
	  SignupController.prototype.userIsValidToSignup = function userIsValidToSignup() {
	    return this.user.name && this.user.email && this.user.password && this.user.lastname && this.user.confirmEmail && this.user.confirmPassword;
	  };
	
	  SignupController.prototype.enableTab = function enableTab() {
	    setTimeout(function () {
	      document.getElementById("defaultOpen").click();
	    }, 200);
	  };
	
	  SignupController.prototype.allCheckboxIsChecked = function allCheckboxIsChecked() {
	    return this.user.check1 && this.user.check2 && this.user.check4;
	  };
	
	  SignupController.prototype.showError = function showError() {
	    this.showErrorForm = true;
	  };
	
	  SignupController.prototype.goToLogin = function goToLogin() {
	    this.$state.go('login');
	  };
	
	  SignupController.prototype.showLoading = function showLoading(isShow) {
	    if (isShow) {
	      this.notification(false);
	      $('<div class="modal-backdrop"><img src="https://res.cloudinary.com/luneswallet/image/upload/v1519442469/loading_y9ob8i.svg" /></div>').appendTo(document.body);
	    } else {
	      this.$timeout(function () {
	        $(".modal-backdrop").remove();
	      }, 1000);
	    }
	  };
	
	  SignupController.prototype.notificationError = function notificationError(isShow, msg) {
	    if (isShow) {
	      var self = this;
	      $('<div class="modal-backdrop-error"><h4 style="margin-top: 10%;">' + this.ErrorMessagesService.get(msg) + '</h4><button class="close-error">ok</button></div>').appendTo(document.body);
	      $('.close-error').on('click', function () {
	        $(".modal-backdrop-error").remove();
	      });
	    }
	  };
	
	  SignupController.prototype.notification = function notification(isShow) {
	    if (isShow) {
	      var self = this;
	      $('<div class="modal-backdrop"><h4>' + this.$translate.instant('SIGNUP_SUCCESSFULY') + '</h4><br /><p>' + this.$translate.instant('REDIRECTING') + '</p></div>').appendTo(document.body);
	      this.$timeout(function () {
	        self.notification(false);
	        self.$state.go('login');
	      }, 5000);
	    } else {
	      this.$timeout(function () {
	        $(".modal-backdrop").remove();
	      }, 1000);
	    }
	  };
	
	  return SignupController;
	}();
	
	SignupController.$inject = ['$state', 'HttpService', '$filter', '$sce', '$injector', '$timeout', '$translate', 'ErrorMessagesService'];
	
	exports.default = SignupController;

/***/ },
/* 700 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(701);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(689)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../../node_modules/css-loader/index.js?sourceMap!../../node_modules/postcss-loader/index.js!../../node_modules/sass-loader/index.js?config=sassLoader!./signup.component.scss", function() {
				var newContent = require("!!../../node_modules/css-loader/index.js?sourceMap!../../node_modules/postcss-loader/index.js!../../node_modules/sass-loader/index.js?config=sassLoader!./signup.component.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 701 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(688)(true);
	// imports
	
	
	// module
	exports.push([module.id, "/* Style the tab */\n.tab {\n  overflow: hidden;\n  padding: 0 22px; }\n\n/* Style the buttons that are used to open the tab content */\n.tab button {\n  border: 0;\n  border-radius: 20px;\n  padding: 5px 20px;\n  background-color: #f9f9f9;\n  float: left;\n  outline: none;\n  cursor: pointer;\n  transition: 0.3s;\n  margin-right: 10px; }\n\n/* Change background color of buttons on hover */\n.tab button:hover {\n  background-color: #44af57; }\n\n/* Create an active/current tablink class */\n.tab button.active {\n  background-color: #44af57;\n  color: #fff; }\n\n/* Style the tab content */\n.tabcontent {\n  display: none;\n  padding: 6px 12px;\n  border-top: none; }\n", "", {"version":3,"sources":["D:/workspaces/lunes/lunes-purchase/src/signup/src/signup/signup.component.scss","D:/workspaces/lunes/lunes-purchase/src/signup/src/scss/base/_color.scss"],"names":[],"mappings":"AAEA,mBAAmB;AACnB;EACE,iBAAgB;EAChB,gBAAe,EAChB;;AAED,6DAA6D;AAC7D;EACE,UAAS;EACT,oBAAmB;EACnB,kBAAiB;EACjB,0BAAyB;EACzB,YAAW;EACX,cAAa;EACb,gBAAe;EACf,iBAAgB;EAChB,mBAAkB,EACnB;;AAED,iDAAiD;AACjD;EACE,0BClBa,EDmBd;;AAED,4CAA4C;AAC5C;EACE,0BCvBa;EDwBb,YAAW,EACZ;;AAED,2BAA2B;AAC3B;EACE,cAAa;EACb,kBAAiB;EACjB,iBAAgB,EACjB","file":"signup.component.scss","sourcesContent":["@import '../scss/base/_color';\r\n\r\n/* Style the tab */\r\n.tab {\r\n  overflow: hidden;\r\n  padding: 0 22px;\r\n}\r\n\r\n/* Style the buttons that are used to open the tab content */\r\n.tab button {\r\n  border: 0;\r\n  border-radius: 20px;\r\n  padding: 5px 20px;\r\n  background-color: #f9f9f9;\r\n  float: left;\r\n  outline: none;\r\n  cursor: pointer;\r\n  transition: 0.3s;\r\n  margin-right: 10px;\r\n}\r\n\r\n/* Change background color of buttons on hover */\r\n.tab button:hover {\r\n  background-color: $green;\r\n}\r\n\r\n/* Create an active/current tablink class */\r\n.tab button.active {\r\n  background-color: $green;\r\n  color: #fff;\r\n}\r\n\r\n/* Style the tab content */\r\n.tabcontent {\r\n  display: none;\r\n  padding: 6px 12px;\r\n  border-top: none;\r\n}","$primary: #4c2b82 !default;\r\n$lightPrimary: #654fa4;\r\n$extraLightPrimary: #876fc6;\r\n$darkPrimary: #41256f;\r\n$extraDarkPrimary: #3f2569;\r\n$green: #44af57;\r\n$darkGreen: #44af57;\r\n$yellow: #f9d660;\r\n$darkGray: #333;"],"sourceRoot":""}]);
	
	// exports


/***/ },
/* 702 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _buyComponent = __webpack_require__(703);
	
	var _buyComponent2 = _interopRequireDefault(_buyComponent);
	
	var _buy = __webpack_require__(704);
	
	var _buy2 = _interopRequireDefault(_buy);
	
	__webpack_require__(705);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var BuyComponent = {
	  template: _buyComponent2.default,
	  controller: _buy2.default
	};
	
	exports.default = BuyComponent;

/***/ },
/* 703 */
/***/ function(module, exports) {

	module.exports = "<!--<loading show=\"$ctrl.loading\"></loading>-->\n<div class=\"container\">\n\n  <lunesheader showlinks=\"true\" balanceuser=\"$ctrl.balanceUser.confirmed_balance\"></lunesheader>\n\n  <!-- BUY -->\n  <section class=\"buy\">\n    <div class=\"row\">\n      <div class=\"title user-menu\">\n        <a href=\"\" id=\"user-menu\" ng-click=\"$ctrl.toogleUserMenu()\">\n          <h4>\n            {{'WELCOME' | translate}}, {{$ctrl.currentUser.fullname}}\n            <span ng-show=\"!$ctrl.showUserMenu\">\n              <i class=\"fas fa-angle-right green\"></i>\n            </span>\n            <span ng-show=\"$ctrl.showUserMenu\">\n              <i class=\"fas fa-angle-down green\"></i>\n            </span>\n          </h4>\n        </a>\n        <div class=\"logout area-button\" ng-show=\"$ctrl.showUserMenu\">\n          <a href=\"#!/login\" class=\"primary-button\" ng-click=\"$ctrl.logout()\">\n            {{'LOGOUT' | translate}}\n          </a>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"col-12 error-fields\" ng-show=\"$ctrl.showErrorForm\">{{'ALL_FIELDS_REQUIRED' | translate}}</div>\n\n    <div class=\"row\">\n      <div class=\"col-xs-12 col-sm-12 col-md-6 col-lg-6\">\n        <!-- ERROR LIMIT -->\n        <div class=\"row\">\n          <div ng-show=\"$ctrl.showErrorLimit\" class=\"col-xs-12 col-lg-12 error-limit\">{{$ctrl.showErrorLimit}}</div>\n        </div>\n\n        <!-- CALCULATOR -->\n        <div class=\"row\">\n          <div class=\"calculator col-lg-12\">\n            <div class=\"select-coin\">\n              <ul>\n                <li ng-repeat=\"coin in $ctrl.coins\" ng-click=\"$ctrl.selectCoin(coin)\" ng-class=\"coin.selected ? 'selected': ''\">\n                  <img ng-src=\"{{coin.img}}\" alt=\"coin.label\">\n                </li>\n              </ul>\n            </div>\n            <div class=\"valueCripto\">\n              <input type=\"text\" class=\"input-calculator\" name=\"value\" ng-model=\"$ctrl.valueToDeposit\" ng-change=\"$ctrl.calcValue()\" />\n              <div class=\"lunesAmount\">\n                <img style=\"position: absolute;\n                top: 0;\n                left: 0;\n                z-index: 99;\" class=\"flag-lns\" src=\"https://res.cloudinary.com/luneswallet/image/upload/v1519442468/icon-lunes_qhumiw.png\"\n                  alt=\"Icon Lunes\">\n                <input type=\"text\" placeholder=\"000.000\" class=\"input-calculator\" name=\"value\" ng-model=\"$ctrl.valueToReceive\" ng-change=\"$ctrl.calcValue('LNS')\"\n                />\n              </div>\n              <div class=\"lunes-current-price\">\n                <small>1 LNS = {{$ctrl.currentPhaseActive.price_value}}</small>\n              </div>\n            </div>\n            <div ng-show=\"$ctrl.errorTypeValueToReceive\" style=\"padding: 0 0 10px;font-size: 11px;text-align: center;color: #cf4444;text-shadow: none;\">\n              {{$ctrl.errorTypeValueToReceive}}\n            </div>\n          </div>\n        </div>\n\n        <!-- SHOW TOTAL -->\n        <div class=\"row\">\n          <div class=\"amountBalance col-lg-12\">\n            <div class=\"total\">\n              <div class=\"result\">\n                <div>{{'BONUS' | translate}} {{$ctrl.percentBonus}}%</div>\n                <div>{{$ctrl.bonusAmountFinal}}</div>\n              </div>\n              <hr />\n              <div class=\"result\">\n                <div>Total</div>\n                <div>{{$ctrl.getTotal()}}</div>\n              </div>\n            </div>\n            <div style=\"text-align: center; margin: 10px 0 30px 0;\">\n              * {{'BUY_LIMIT_PHASE' | translate}}\n              <span style=\"font-size:15px;font-weight:bold\">{{$ctrl.getBuyLimit();}} LNS </span>\n            </div>\n          </div>\n        </div>\n\n        <!-- ADVICE\n        <div class=\"row\">\n          <div class=\"col-lg-12 no-padding\">\n            <div class=\"area-button\" ng-show=\"false\">\n              <button class=\"primary-button\" data-ng-click=\"$ctrl.doSignup()\">{{'BUY' | translate}}</button>\n            </div>\n          </div>\n          <div class=\"col-lg-12\" style=\"text-align: left; margin: 10px 0;\" ng-show=\"false\">\n            * {{'MSG_BALANCE_DEPOSITED' | translate}}\n          </div>\n          <div class=\"col-lg-12\" style=\"text-align: left; margin: 10px 0 30px 0;\">\n            * {{'BUY_LIMIT_PHASE' | translate}}\n            <span style=\"font-size:15px;font-weight:bold\">{{$ctrl.getBuyLimit();}} LNS </span>\n          </div>\n        </div> -->\n      </div>\n      <!-- QR CODE -->\n      <div class=\"col-xs-12 col-sm-12 col-md-6 col-lg-6\">\n        <div class=\"area-button\" ng-show=\"!$ctrl.showQrCode\">\n          <a href=\"\" class=\"primary-button\" ng-click=\"$ctrl.toogleShowQrCode()\">{{'BUY' | translate}}</a>\n        </div>\n        <div class=\"container-qr-code col-lg-8 offset-lg-2\" ng-show=\"$ctrl.showQrCode\">\n          <div class=\"debosit-advice\">\n            <span>\n              {{'SEND_TO_THIS_ADDRESS' | translate}} {{$ctrl.valueToDeposit}} {{$ctrl.currentCoinSelected.name}} {{'TO' | translate}}\n            </span>\n            <div class=\"address\">\n              {{$ctrl.currentQRCode.address}}\n            </div>\n            <span>{{'DEPOSIT_CONFIRMATION_ADVICE' | translate}}</span>\n          </div>\n          <div class=\"qr-code\">\n            <img ng-src=\"{{$ctrl.currentQRCode.img}}\" class=\"qr-code img-thumbnail img-responsive\" />\n          </div>\n        </div>\n      </div>\n    </div>\n  </section>\n</div>\n<lunesfooter />"

/***/ },
/* 704 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _lunesLib = __webpack_require__(477);
	
	var _lunesLib2 = _interopRequireDefault(_lunesLib);
	
	var _index = __webpack_require__(685);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var initialValue = '0.00000000';
	
	var BuyController = function () {
	  function BuyController($rootScope, $scope, HttpService, $translate, $timeout, $state) {
	    _classCallCheck(this, BuyController);
	
	    $rootScope.$on('unauthorized', function () {
	      $state.go('login');
	    });
	    if (!localStorage.getItem(_index.STORAGE_KEY)) {
	      $state.go('login');
	    }
	    this.$scope = $scope;
	    this.HttpService = HttpService;
	    this.$translate = $translate;
	    this.$timeout = $timeout;
	    this.$state = $state;
	    this.currentUser = JSON.parse(localStorage.getItem(_index.STORAGE_KEY));
	    this.showContainerCoins = false;
	    this.balanceCoins = {};
	    this.currentPhase = [];
	    this.currentPhaseActive = {};
	    this.buyHistoryUser = {};
	    this.valueToDeposit = initialValue;
	    this.valueToReceive = '000000';
	    this.bonusAmountFinal = initialValue;
	    this.buyLimit = '0';
	    this.coins = _index.COINS_CONSTANT;
	    this.currentCoinSelected = JSON.parse(JSON.stringify(this.coins[0]));
	    this.currentQRCode = { address: '', img: '' };
	    this.showUserMenu = false;
	    this.showQrCode = false;
	    this.getBalanceCoin('BTC').catch(function (error) {
	      console.log(error);
	    });
	    this.getBalanceCoin('LTC').catch(function (error) {
	      console.log(error);
	    });
	    this.getBalanceCoin('ETH').catch(function (error) {
	      console.log(error);
	    });
	    this.showDepositWalletAddressQRCode(this.currentUser, this.currentCoinSelected);
	    this.obtainPhase().catch(function (error) {
	      console.log(error);
	    });
	    this.getBuyHistory().catch(function (error) {
	      console.log(error);
	    });
	    this.showLoading(true);
	  }
	
	  BuyController.prototype.getBuyHistory = function () {
	    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
	      var buyHistory;
	      return regeneratorRuntime.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              _context.next = 2;
	              return this.HttpService.buyHistory(this.currentUser.email, this.currentUser.accessToken);
	
	            case 2:
	              buyHistory = _context.sent;
	
	              this.buyHistoryUser = buyHistory;
	
	            case 4:
	            case 'end':
	              return _context.stop();
	          }
	        }
	      }, _callee, this);
	    }));
	
	    function getBuyHistory() {
	      return _ref.apply(this, arguments);
	    }
	
	    return getBuyHistory;
	  }();
	
	  BuyController.prototype.showDepositWalletAddressQRCode = function () {
	    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(currentUser, coin) {
	      var a;
	      return regeneratorRuntime.wrap(function _callee2$(_context2) {
	        while (1) {
	          switch (_context2.prev = _context2.next) {
	            case 0:
	              _context2.next = 2;
	              return this.HttpService.showDepositWalletAddressQRCode(this.currentUser, this.currentCoinSelected);
	
	            case 2:
	              a = _context2.sent;
	
	              this.currentQRCode = JSON.parse(JSON.stringify(a));
	              if (coin) {
	                this.getCurrentBalanceUser(coin.name, this.currentQRCode.address, this.currentUser);
	              }
	
	            case 5:
	            case 'end':
	              return _context2.stop();
	          }
	        }
	      }, _callee2, this);
	    }));
	
	    function showDepositWalletAddressQRCode(_x, _x2) {
	      return _ref2.apply(this, arguments);
	    }
	
	    return showDepositWalletAddressQRCode;
	  }();
	
	  BuyController.prototype.getPhaseActive = function getPhaseActive() {
	    var phase = this.currentPhase.filter(function (f) {
	      return f.sale_status === 'active';
	    });
	    if (phase && phase.length) {
	      return phase[0];
	    }
	    return {};
	  };
	
	  BuyController.prototype.obtainPhase = function () {
	    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
	      var phase;
	      return regeneratorRuntime.wrap(function _callee3$(_context3) {
	        while (1) {
	          switch (_context3.prev = _context3.next) {
	            case 0:
	              _context3.prev = 0;
	              phase = void 0;
	
	              if (!localStorage.getItem('lunes.phase')) {
	                _context3.next = 11;
	                break;
	              }
	
	              this.currentPhase = JSON.parse(localStorage.getItem('lunes.phase'));
	              phase = this.getPhaseActive();
	              this.currentPhaseActive = JSON.parse(JSON.stringify(phase));
	
	              this.percentBonus = phase.bonus * 100;
	              this.priceValueLunes = parseFloat(phase.price_value);
	
	              if (this.currentUser.whitelist && phase.name === 'Whitelist') {
	                this.buyLimit = 1000000;
	              } else {
	                this.buyLimit = phase.maximum_individual_limit;
	              }
	
	              this.showLoading(false);
	              return _context3.abrupt('return');
	
	            case 11:
	              _context3.next = 13;
	              return this.HttpService.obtainPhase().catch(function (error) {
	                //alert('Erro ao tentar recuperar dados da fase da ICO');
	                console.log("Erro on get phase");
	              });
	
	            case 13:
	              this.currentPhase = _context3.sent;
	
	
	              phase = this.getPhaseActive();
	
	              this.percentBonus = phase.bonus * 100;
	              this.priceValueLunes = parseFloat(phase.price_value);
	
	              if (this.currentUser.whitelist && phase.name === 'Whitelist') {
	                this.buyLimit = 1000000;
	              } else {
	                this.buyLimit = phase.maximum_individual_limit;
	              }
	
	              if (this.currentPhase) {
	                localStorage.setItem('lunes.phase', JSON.stringify(this.currentPhase));
	              }
	              this.showLoading(false);
	              _context3.next = 25;
	              break;
	
	            case 22:
	              _context3.prev = 22;
	              _context3.t0 = _context3['catch'](0);
	
	              console.log(_context3.t0);
	
	            case 25:
	            case 'end':
	              return _context3.stop();
	          }
	        }
	      }, _callee3, this, [[0, 22]]);
	    }));
	
	    function obtainPhase() {
	      return _ref3.apply(this, arguments);
	    }
	
	    return obtainPhase;
	  }();
	
	  BuyController.prototype.getBalanceCoin = function () {
	    var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(coin) {
	      var balance;
	      return regeneratorRuntime.wrap(function _callee4$(_context4) {
	        while (1) {
	          switch (_context4.prev = _context4.next) {
	            case 0:
	              _context4.next = 2;
	              return this.HttpService.getBitcoinBalance(coin);
	
	            case 2:
	              balance = _context4.sent;
	
	              this.balanceCoins[coin] = { balance: balance };
	
	            case 4:
	            case 'end':
	              return _context4.stop();
	          }
	        }
	      }, _callee4, this);
	    }));
	
	    function getBalanceCoin(_x3) {
	      return _ref4.apply(this, arguments);
	    }
	
	    return getBalanceCoin;
	  }();
	
	  BuyController.prototype.getBalanceCoinETH = function () {
	    var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(coin) {
	      var balance;
	      return regeneratorRuntime.wrap(function _callee5$(_context5) {
	        while (1) {
	          switch (_context5.prev = _context5.next) {
	            case 0:
	              _context5.next = 2;
	              return this.HttpService.getBalanceCoinETH(coin);
	
	            case 2:
	              balance = _context5.sent;
	
	              this.balanceCoins[coin] = { balance: balance };
	
	            case 4:
	            case 'end':
	              return _context5.stop();
	          }
	        }
	      }, _callee5, this);
	    }));
	
	    function getBalanceCoinETH(_x4) {
	      return _ref5.apply(this, arguments);
	    }
	
	    return getBalanceCoinETH;
	  }();
	
	  BuyController.prototype.getBalanceLunes = function () {
	    var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(coin, currentUser) {
	      var balance;
	      return regeneratorRuntime.wrap(function _callee6$(_context6) {
	        while (1) {
	          switch (_context6.prev = _context6.next) {
	            case 0:
	              _context6.next = 2;
	              return this.HttpService.getBalanceLunes(coin, currentUser);
	
	            case 2:
	              balance = _context6.sent;
	
	              this.balanceCoins[coin] = { balance: balance };
	
	            case 4:
	            case 'end':
	              return _context6.stop();
	          }
	        }
	      }, _callee6, this);
	    }));
	
	    function getBalanceLunes(_x5, _x6) {
	      return _ref6.apply(this, arguments);
	    }
	
	    return getBalanceLunes;
	  }();
	
	  BuyController.prototype.goToHome = function goToHome() {
	    this.$state.go('buy');
	  };
	
	  BuyController.prototype.showLoading = function showLoading(isShow) {
	    if (isShow) {
	      $('<div class="modal-backdrop"><img src="https://res.cloudinary.com/luneswallet/image/upload/v1519442469/loading_y9ob8i.svg" /></div>').appendTo(document.body);
	    } else {
	      this.$timeout(function () {
	        $(".modal-backdrop").remove();
	      }, 1000);
	    }
	  };
	
	  /**
	   * coinDestination, bonusRate, coinAmount, exchangeRate, unitPrice, coupon
	   * coinDestination  - eh o simbolo da moeda,
	   * bonusRate        - eh a taxa de bonus da fase atual da ico,
	   * coinAmount       - eh a quantidade de criptomoeda,
	   * exchangeRate     - o preco em dolar,
	   * unitPrice        - o preco atual da lunes em dolar e
	   * coupon           - eh o cupom de bonus do usuario se houver
	   * 
	   * Example: 30000 LNS => 0.27285849
	   * Example: 1000  LNS => 0.00090953
	   * Example: 500   LNS => 0.00045476
	   * Example: 10    LNS => 0.00000910
	  */
	
	
	  BuyController.prototype.calcValue = function calcValue(LNS) {
	    var _this = this;
	
	    if (!this.valueToReceive) {
	      this.valueToReceive = '000000';
	    }
	
	    if (!this.valueToDeposit) {
	      this.valueToDeposit = initialValue;
	    }
	
	    if (this.valueToReceive.length > 7) {
	      this.valueToReceive = this.valueToReceive.substr(0, 7);
	    }
	
	    if (this.valueToReceive.replace) {
	      this.valueToReceive = this.valueToReceive.replace(/[^0-9.]+/, '');
	    }
	
	    var valueToReceive = parseFloat(this.valueToReceive);
	    var valueToDeposit = parseFloat(this.valueToDeposit);
	
	    // hide message error to value LNS less than 0
	    this.errorTypeValueToReceive = false;
	
	    if (isNaN(valueToReceive) || isNaN(valueToDeposit)) {
	      this.valueToDeposit = initialValue;
	      this.valueToReceive = '000000';
	    }
	
	    if (LNS) {
	      if (this.valueToReceive.indexOf && this.valueToReceive.indexOf(',') !== -1) {
	        this.valueToReceive = this.valueToReceive.replace(/[, ]+/g, "0").trim();
	      }
	    } else if (this.valueToDeposit.indexOf && this.valueToDeposit.indexOf(',') !== -1) {
	      this.valueToDeposit = this.valueToDeposit.replace(/[,]+/g, '').trim();
	    }
	
	    this.checkMaxLength();
	    var phase = this.getPhaseActive();
	    var bonusRate = phase.bonus;
	    var currentPrice = this.balanceCoins[this.currentCoinSelected.name].balance.PRICE;
	    var coupon = this.currentUser.coupon;
	
	    this.buyLimit = parseFloat(this.buyLimit);
	
	    var coinAmount = LNS ? valueToReceive : valueToDeposit;
	    coinAmount = parseFloat(coinAmount);
	    if (isNaN(coinAmount)) {
	      coinAmount = 0;
	    }
	    var unitPrice = phase.price_value;
	    var calculateFinal = 0;
	
	    if (LNS) {
	      if (coinAmount > this.buyLimit) {
	        coinAmount = this.buyLimit;
	        this.valueToReceive = this.buyLimit;
	      }
	
	      calculateFinal = _lunesLib2.default.ico.buyConversion.fromLNS(bonusRate, coinAmount, currentPrice, unitPrice, coupon);
	      this.valueToDeposit = calculateFinal.buyAmount;
	      this.bonusAmountFinal = (parseFloat(phase.bonus) * this.valueToReceive).toString();
	
	      this.$timeout(function () {
	        _this.valueToReceive = parseFloat(_this.valueToReceive);
	        //this.valueToDeposit = parseFloat(this.valueToDeposit);
	      }, 2000);
	
	      return;
	    }
	
	    calculateFinal = _lunesLib2.default.ico.buyConversion.toLNS(bonusRate, coinAmount, currentPrice, unitPrice, coupon);
	
	    this.$timeout(function () {
	      if (_this.valueToReceive !== '0.00000000') {
	        _this.valueToReceive = parseFloat(_this.valueToReceive);
	      }
	      //this.valueToDeposit = parseFloat(this.valueToDeposit);
	    }, 2000);
	
	    this.valueToReceive = calculateFinal.buyAmount.toString();
	    this.bonusAmountFinal = calculateFinal.bonusAmount;
	
	    if (this.valueToReceive > this.buyLimit) {
	      coinAmount = this.buyLimit;
	      this.valueToReceive = this.buyLimit;
	      this.bonusAmountFinal = (parseFloat(phase.bonus) * this.buyLimit).toString();
	      this.calcValue('LNS');
	    }
	  };
	
	  BuyController.prototype.getBuyLimit = function getBuyLimit() {
	    return parseFloat(this.buyLimit);
	  };
	
	  /**
	   * Quantidade de Lunes (qtd) = resultado da calculadora
	   * 30% Bônus (bonus) = 30% de qtd
	   * Total = qtd + bonus
	  */
	
	
	  BuyController.prototype.getTotal = function getTotal() {
	    var amountLNS = parseFloat(this.valueToReceive);
	    var bonus = parseFloat(this.getPhaseActive().bonus) * amountLNS;
	    var total = amountLNS + bonus;
	    return total.toFixed(8);
	  };
	
	  BuyController.prototype.getTotalLNSParcial = function getTotalLNSParcial() {
	    return this.valueToReceive.toFixed ? this.valueToReceive.toFixed(8) : this.valueToReceive;
	  };
	
	  BuyController.prototype.checkMaxLength = function checkMaxLength() {
	    if (typeof this.valueToDeposit === 'number') {
	      this.valueToDeposit = this.valueToDeposit.toString();
	    }
	    var numberMax = 10;
	    if (!isNaN(this.valueToDeposit) && this.valueToDeposit.indexOf(',') !== -1) {
	      this.valueToDeposit = this.valueToDeposit.replace(",", ".");
	    }
	    if (this.valueToDeposit.length > numberMax) {
	      this.valueToDeposit = this.valueToDeposit.substring(0, numberMax);
	    }
	  };
	
	  BuyController.prototype.showQuotation = function showQuotation() {
	    if (Object.keys(this.balanceCoins).length) {
	      return this.balanceCoins[this.currentCoinSelected.name].balance.PRICE;
	    } else {
	      return this.$translate.instant('LOADING');
	    }
	  };
	
	  BuyController.prototype.getFlag = function getFlag() {
	    var flagUS = 'https://res.cloudinary.com/luneswallet/image/upload/v1519442468/flag-us_jxifyu.png';
	    var flagBR = 'https://res.cloudinary.com/luneswallet/image/upload/v1519442467/flag-br_ksncrn.png';
	    return this.$translate.instant('CURRENCY_USER') === 'USD' ? flagUS : flagBR;
	  };
	
	  BuyController.prototype.logout = function logout() {
	    localStorage.removeItem(_index.STORAGE_KEY);
	  };
	
	  BuyController.prototype.getCurrentBalanceUser = function () {
	    var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(coin, address, currentUser) {
	      var _this2 = this;
	
	      var balance;
	      return regeneratorRuntime.wrap(function _callee7$(_context7) {
	        while (1) {
	          switch (_context7.prev = _context7.next) {
	            case 0:
	              _context7.next = 2;
	              return this.HttpService.getBalance(coin, address, currentUser);
	
	            case 2:
	              balance = _context7.sent;
	
	              this.$timeout(function () {
	                if (balance && balance.network === 'ETH') {
	                  _this2.balanceUser = {
	                    confirmed_balance: balance.balance
	                  };
	                } else {
	                  _this2.balanceUser = balance;
	                }
	              }, 200);
	
	            case 4:
	            case 'end':
	              return _context7.stop();
	          }
	        }
	      }, _callee7, this);
	    }));
	
	    function getCurrentBalanceUser(_x7, _x8, _x9) {
	      return _ref7.apply(this, arguments);
	    }
	
	    return getCurrentBalanceUser;
	  }();
	
	  BuyController.prototype.selectCoin = function selectCoin(coinSelected) {
	    var _this3 = this;
	
	    this.showQrCode = false;
	    this.valueToDeposit = initialValue;
	    this.valueToReceive = initialValue;
	    var self = this;
	    this.coins = this.coins.filter(function (coin) {
	      coin.selected = false;
	      if (coin.label === coinSelected.label) {
	        self.currentCoinSelected = JSON.parse(JSON.stringify(coin));
	        self.showDepositWalletAddressQRCode(self.currentUser, coin);
	        coin.selected = true;
	      }
	      return coin;
	    });
	    this.$timeout(function () {
	      _this3.$scope.$apply();
	    }, 200);
	    //this.openCoinSelect();
	  };
	
	  BuyController.prototype.openCoinSelect = function openCoinSelect() {
	    this.showContainerCoins = !this.showContainerCoins;
	  };
	
	  BuyController.prototype.toogleUserMenu = function toogleUserMenu() {
	    this.showUserMenu = !this.showUserMenu;
	  };
	
	  BuyController.prototype.toogleShowQrCode = function toogleShowQrCode() {
	    if (parseFloat(this.valueToReceive) === 0) {
	      this.errorTypeValueToReceive = this.$translate.instant('AMOUNT_MINIMUN_VALIDATION');
	      return;
	    }
	    this.HttpService.toBuy(this.currentQRCode.address).catch(function (error) {
	      console.log(error);
	    });
	    this.showQrCode = !this.showQrCode;
	  };
	
	  return BuyController;
	}();
	
	BuyController.$inject = ['$rootScope', '$scope', 'HttpService', '$translate', '$timeout', '$state'];
	
	exports.default = BuyController;

/***/ },
/* 705 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(706);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(689)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../../node_modules/css-loader/index.js?sourceMap!../../node_modules/postcss-loader/index.js!../../node_modules/sass-loader/index.js?config=sassLoader!./buy.component.scss", function() {
				var newContent = require("!!../../node_modules/css-loader/index.js?sourceMap!../../node_modules/postcss-loader/index.js!../../node_modules/sass-loader/index.js?config=sassLoader!./buy.component.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 706 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(688)(true);
	// imports
	
	
	// module
	exports.push([module.id, ".input-calculator {\n  background-color: #41256f;\n  border: 0;\n  border-radius: 5px;\n  color: #fff;\n  font-size: 18px;\n  margin-bottom: 15px;\n  padding: 13px;\n  text-align: right;\n  width: 100%; }\n\n.equal {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-pack: center;\n      justify-content: center;\n  -ms-flex-align: center;\n      align-items: center;\n  font-size: 30px;\n  text-align: center; }\n\n.calculator .valueCripto {\n  margin-top: 15px; }\n\n.calculator .valueMoney {\n  height: 80px;\n  background-color: rgba(65, 37, 111, 0.8);\n  color: #fff;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: right;\n  font-size: 18px; }\n  .calculator .valueMoney .currency {\n    width: 100%;\n    text-align: right;\n    font-size: 10px;\n    padding-right: 9px;\n    padding-top: 3px; }\n\n.lunesAmount .input-calculator {\n  margin-left: 0;\n  border-radius: 0 5px 5px 0;\n  padding: 15px 10px; }\n\n.lunesAmount .flag-lns {\n  background-color: #fff;\n  border-radius: 5px 0 0 5px;\n  margin-bottom: 5px;\n  margin-right: -5px;\n  padding: 10px 10px 14px 15px; }\n\n.amountBalance {\n  text-align: center; }\n  .amountBalance .total {\n    background-color: rgba(65, 37, 111, 0.8);\n    border-radius: 5px;\n    margin: 0 auto;\n    padding: 10px;\n    width: 100%; }\n    .amountBalance .total hr {\n      border-top: solid 1px #44af57; }\n  .amountBalance .result {\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex-direction: row;\n        flex-direction: row;\n    -ms-flex-pack: justify;\n        justify-content: space-between;\n    -ms-flex-align: center;\n        align-items: center;\n    padding: 0 10px; }\n\n.select-coin {\n  display: -ms-flexbox;\n  display: flex; }\n  .select-coin ul {\n    display: -ms-flexbox;\n    display: flex;\n    margin: 0;\n    padding: 0;\n    text-align: center; }\n    .select-coin ul li {\n      border: 2px solid #41256f;\n      list-style: none;\n      cursor: pointer;\n      margin: 0 20px 0 0;\n      width: 50px;\n      border-radius: 5px;\n      opacity: 0.6; }\n      .select-coin ul li img {\n        display: block;\n        margin: 10px auto;\n        max-width: 25px; }\n      .select-coin ul li:hover, .select-coin ul li.selected {\n        background-color: #44af57;\n        opacity: 1;\n        border: 2px solid #44af57; }\n\n.container-coins {\n  width: 70px;\n  height: 210px;\n  position: absolute;\n  border-radius: 5px;\n  background-color: #e4e4e5;\n  top: 50px;\n  z-index: 99;\n  text-align: center; }\n  .container-coins ul {\n    margin: 0;\n    padding: 0; }\n    .container-coins ul li {\n      list-style: none;\n      text-align: center;\n      padding: 5px 10px;\n      cursor: pointer; }\n      .container-coins ul li.selected, .container-coins ul li:hover {\n        background-color: #c7c7c7;\n        border-radius: 5px; }\n\n.container-qr-code {\n  border-radius: 15px;\n  box-shadow: 0px 0px 25px 0px #41256f;\n  text-align: center;\n  padding: 30px; }\n  .container-qr-code .qr-code {\n    margin-top: 15px; }\n  .container-qr-code .debosit-advice {\n    color: #fff;\n    font-size: 12px; }\n  .container-qr-code .address {\n    color: #44af57;\n    margin-top: 15px 0; }\n\n.show-balance .show-balance-btc {\n  margin-top: 1rem;\n  font-size: 2rem; }\n  .show-balance .show-balance-btc .coin-name {\n    color: #e0972f; }\n\n.show-balance .show-balance-ltc {\n  margin-top: 1rem;\n  font-size: 2rem; }\n  .show-balance .show-balance-ltc .coin-name {\n    color: #9f9aa4; }\n\n.show-balance .show-balance-eth {\n  margin-top: 1rem;\n  font-size: 2rem; }\n  .show-balance .show-balance-eth .coin-name {\n    color: #b4d0cd; }\n\n.flex-right {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-pack: end;\n      justify-content: flex-end; }\n\n.container-logo-header .logo {\n  text-align: left;\n  padding: 10px; }\n\n.container-logo-header .container-data {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-align: center;\n      align-items: center;\n  font-size: 14px; }\n  .container-logo-header .container-data .container-balance {\n    text-align: right; }\n  .container-logo-header .container-data .coupom {\n    text-align: center; }\n\n.error-limit {\n  padding: 10px;\n  background-color: #df3535;\n  text-align: center;\n  margin: 10px; }\n\n.lunes-current-price {\n  text-align: right;\n  margin-bottom: 20px; }\n\n@media only screen and (max-width: 426px) {\n  .container-logo-header .logo {\n    text-align: center;\n    margin-bottom: 20px; }\n  .valueCripto .select-coin {\n    clear: both;\n    min-height: 60px;\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex-pack: center;\n        justify-content: center; }\n  .valueCripto .area-field input {\n    text-align: center; }\n  .container-qr-code {\n    padding: 30px 15px; } }\n\n@media only screen and (max-width: 321px) {\n  .header {\n    display: block !important; }\n  .container-logo-header {\n    text-align: center; }\n    .container-logo-header .container-quotation {\n      margin: 10px 0 0 0; }\n    .container-logo-header .logo {\n      text-align: center;\n      padding: 10px; }\n    .container-logo-header .quotation {\n      text-align: center;\n      display: -ms-flexbox;\n      display: flex;\n      -ms-flex-pack: center;\n          justify-content: center;\n      -ms-flex-direction: row;\n          flex-direction: row; }\n      .container-logo-header .quotation .container-quotation {\n        padding: 0 5px; }\n  .round-menu img {\n    width: 100%; }\n  .flex-right {\n    display: block; }\n  .menu.menu-top {\n    display: -ms-flexbox !important;\n    display: flex !important;\n    -ms-flex-pack: center !important;\n        justify-content: center !important; }\n    .menu.menu-top li img {\n      width: 25px; } }\n", "", {"version":3,"sources":["D:/workspaces/lunes/lunes-purchase/src/buy/src/buy/buy.component.scss","D:/workspaces/lunes/lunes-purchase/src/buy/src/scss/base/_color.scss"],"names":[],"mappings":"AAEA;EACE,0BCAmB;EDCnB,UAAS;EACT,mBAAkB;EAClB,YAAW;EACX,gBAAe;EACf,oBAAmB;EACnB,cAAa;EACb,kBAAiB;EACjB,YAAW,EACZ;;AAED;EACE,qBAAa;EAAb,cAAa;EACb,sBAAuB;MAAvB,wBAAuB;EACvB,uBAAmB;MAAnB,oBAAmB;EACnB,gBAAe;EACf,mBAAkB,EACnB;;AAED;EAEI,iBAAgB,EACjB;;AAHH;EAKI,aAAY;EACZ,yCCzBiB;ED0BjB,YAAW;EACX,cAAa;EACb,mBAAkB;EAClB,kBAAiB;EACjB,gBAAe,EAQhB;EAnBH;IAaM,YAAW;IACX,kBAAiB;IACjB,gBAAe;IACf,mBAAkB;IAClB,iBAAgB,EACjB;;AAIL;EAEI,eAAc;EACd,2BAA0B;EAC1B,mBAAkB,EACnB;;AALH;EAQI,uBAAsB;EACtB,2BAA0B;EAC1B,mBAAkB;EAClB,mBAAkB;EAClB,6BAA4B,EAC7B;;AAGH;EACE,mBAAkB,EAmBnB;EApBD;IAGI,yCC5DiB;ID6DjB,mBAAkB;IAClB,eAAc;IACd,cAAa;IACb,YAAW,EAIZ;IAXH;MASM,8BChES,EDiEV;EAVL;IAcI,qBAAa;IAAb,cAAa;IACb,wBAAmB;QAAnB,oBAAmB;IACnB,uBAA8B;QAA9B,+BAA8B;IAC9B,uBAAmB;QAAnB,oBAAmB;IACnB,gBAAe,EAChB;;AAGH;EACE,qBAAa;EAAb,cAAa,EA2Bd;EA5BD;IAII,qBAAa;IAAb,cAAa;IACb,UAAS;IACT,WAAU;IACV,mBAAkB,EAoBnB;IA3BH;MASM,0BCxFe;MDyFf,iBAAgB;MAChB,gBAAe;MACf,mBAAkB;MAClB,YAAW;MACX,mBAAkB;MAClB,aAAY,EAWb;MA1BL;QAiBQ,eAAc;QACd,kBAAiB;QACjB,gBAAe,EAChB;MApBP;QAsBQ,0BCnGO;QDoGP,WAAU;QACV,0BCrGO,EDsGR;;AAKP;EACE,YAAW;EACX,cAAa;EACb,mBAAkB;EAClB,mBAAkB;EAClB,0BAAyB;EACzB,UAAS;EACT,YAAW;EACX,mBAAkB,EAenB;EAvBD;IAUI,UAAS;IACT,WAAU,EAWX;IAtBH;MAaM,iBAAgB;MAChB,mBAAkB;MAClB,kBAAiB;MACjB,gBAAe,EAKhB;MArBL;QAkBQ,0BAAyB;QACzB,mBAAkB,EACnB;;AAKP;EACE,oBAAmB;EACnB,qCAA8C;EAC9C,mBAAkB;EAClB,cAAa,EAYd;EAhBD;IAMI,iBAAgB,EACjB;EAPH;IASI,YAAW;IACX,gBAAe,EAChB;EAXH;IAaI,eCjJW;IDkJX,mBAAkB,EACnB;;AAGH;EASM,iBAAgB;EAChB,gBAAe,EAKhB;EAfL;IAaQ,eAXQ,EAYT;;AAdP;EASM,iBAAgB;EAChB,gBAAe,EAKhB;EAfL;IAaQ,eAVQ,EAWT;;AAdP;EASM,iBAAgB;EAChB,gBAAe,EAKhB;EAfL;IAaQ,eATQ,EAUT;;AAKP;EACE,qBAAa;EAAb,cAAa;EACb,mBAAyB;MAAzB,0BAAyB,EAC1B;;AAED;EAEI,iBAAgB;EAChB,cAAa,EACd;;AAJH;EAOI,qBAAa;EAAb,cAAa;EACb,uBAAmB;MAAnB,oBAAmB;EACnB,gBAAe,EAOhB;EAhBH;IAWM,kBAAiB,EAClB;EAZL;IAcM,mBAAkB,EACnB;;AAIL;EACE,cAAa;EACb,0BAAyB;EACzB,mBAAkB;EAClB,aAAY,EACb;;AAED;EACE,kBAAiB;EACjB,oBAAmB,EACpB;;AAED;EACE;IAEI,mBAAkB;IAClB,oBAAmB,EACpB;EAEH;IAEI,YAAW;IACX,iBAAgB;IAChB,qBAAa;IAAb,cAAa;IACb,sBAAuB;QAAvB,wBAAuB,EACxB;EANH;IAQI,mBAAkB,EACnB;EAEH;IACE,mBAAkB,EACnB,EAAA;;AAGH;EACE;IACE,0BAAwB,EACzB;EACD;IACE,mBAAkB,EAiBnB;IAlBD;MAGI,mBAAkB,EACnB;IAJH;MAMI,mBAAkB;MAClB,cAAa,EACd;IARH;MAUI,mBAAkB;MAClB,qBAAa;MAAb,cAAa;MACb,sBAAuB;UAAvB,wBAAuB;MACvB,wBAAmB;UAAnB,oBAAmB,EAIpB;MAjBH;QAeM,eAAc,EACf;EAGL;IACE,YAAW,EACZ;EACD;IACE,eAAc,EACf;EACD;IACE,gCAAuB;IAAvB,yBAAuB;IACvB,iCAAiC;QAAjC,mCAAiC,EAMlC;IARD;MAKM,YAAW,EACZ,EAAA","file":"buy.component.scss","sourcesContent":["@import '../scss/base/_color';\r\n\r\n.input-calculator {\r\n  background-color: $darkPrimary;\r\n  border: 0;\r\n  border-radius: 5px;\r\n  color: #fff;\r\n  font-size: 18px;\r\n  margin-bottom: 15px;\r\n  padding: 13px;\r\n  text-align: right;\r\n  width: 100%;\r\n}\r\n\r\n.equal {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 30px;\r\n  text-align: center;\r\n}\r\n\r\n.calculator {\r\n  .valueCripto {\r\n    margin-top: 15px;\r\n  }\r\n  .valueMoney {\r\n    height: 80px;\r\n    background-color: rgba($color: $darkPrimary, $alpha: 0.8);\r\n    color: #fff;\r\n    padding: 20px;\r\n    border-radius: 5px;\r\n    text-align: right;\r\n    font-size: 18px;\r\n    .currency {\r\n      width: 100%;\r\n      text-align: right;\r\n      font-size: 10px;\r\n      padding-right: 9px;\r\n      padding-top: 3px;\r\n    }\r\n  }\r\n}\r\n\r\n.lunesAmount {\r\n  .input-calculator {\r\n    margin-left: 0;\r\n    border-radius: 0 5px 5px 0;\r\n    padding: 15px 10px;\r\n  }\r\n\r\n  .flag-lns {\r\n    background-color: #fff;\r\n    border-radius: 5px 0 0 5px;\r\n    margin-bottom: 5px;\r\n    margin-right: -5px;\r\n    padding: 10px 10px 14px 15px;\r\n  }\r\n}\r\n\r\n.amountBalance {\r\n  text-align: center;\r\n  .total {\r\n    background-color: rgba($color: $darkPrimary, $alpha: 0.8); \r\n    border-radius: 5px;\r\n    margin: 0 auto;\r\n    padding: 10px;\r\n    width: 100%;\r\n    hr {\r\n      border-top: solid 1px $green;\r\n    }\r\n  }\r\n\r\n  .result {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 0 10px;\r\n  }\r\n}\r\n\r\n.select-coin {\r\n  display: flex;\r\n\r\n  ul {\r\n    display: flex;\r\n    margin: 0;\r\n    padding: 0;\r\n    text-align: center;\r\n    li {\r\n      border: 2px solid $darkPrimary;        \r\n      list-style: none;\r\n      cursor: pointer;\r\n      margin: 0 20px 0 0;\r\n      width: 50px;\r\n      border-radius: 5px;\r\n      opacity: 0.6;\r\n      img {\r\n        display: block;\r\n        margin: 10px auto;\r\n        max-width: 25px;\r\n      }\r\n      &:hover, &.selected {\r\n        background-color: $green;\r\n        opacity: 1;\r\n        border: 2px solid $green;        \r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.container-coins {\r\n  width: 70px;\r\n  height: 210px;\r\n  position: absolute;\r\n  border-radius: 5px;\r\n  background-color: #e4e4e5;\r\n  top: 50px;\r\n  z-index: 99;\r\n  text-align: center;\r\n  ul {\r\n    margin: 0;\r\n    padding: 0;\r\n    li {\r\n      list-style: none;\r\n      text-align: center;\r\n      padding: 5px 10px;\r\n      cursor: pointer;\r\n      &.selected, &:hover {\r\n        background-color: #c7c7c7;\r\n        border-radius: 5px;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.container-qr-code {\r\n  border-radius: 15px;\r\n  box-shadow: 0px 0px 25px 0px rgba(65,37,111,1);\r\n  text-align: center;\r\n  padding: 30px;\r\n  .qr-code {\r\n    margin-top: 15px;\r\n  }\r\n  .debosit-advice {\r\n    color: #fff;\r\n    font-size: 12px;\r\n  }\r\n  .address {\r\n    color: $green;\r\n    margin-top: 15px 0;\r\n  }\r\n}\r\n\r\n.show-balance {\r\n  $coins: (\r\n    btc: #e0972f,\r\n    ltc: #9f9aa4,\r\n    eth: #b4d0cd\r\n  );\r\n\r\n  @each $coin, $color in $coins {\r\n    .show-balance-#{$coin} {\r\n      margin-top: 1rem;\r\n      font-size: 2rem;\r\n\r\n      .coin-name {\r\n        color: $color;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.flex-right {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n}\r\n\r\n.container-logo-header {\r\n  .logo {\r\n    text-align: left;\r\n    padding: 10px;\r\n  }\r\n  .container-data {\r\n    // padding: 5px 20px; \r\n    display: flex;\r\n    align-items: center;\r\n    font-size: 14px;\r\n    .container-balance {\r\n      text-align: right;\r\n    }\r\n    .coupom {    \r\n      text-align: center;\r\n    }\r\n  }\r\n}\r\n\r\n.error-limit {\r\n  padding: 10px;\r\n  background-color: #df3535;\r\n  text-align: center;\r\n  margin: 10px;\r\n}\r\n\r\n.lunes-current-price {\r\n  text-align: right;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n@media only screen and (max-width: 426px) {\r\n  .container-logo-header {\r\n    .logo {\r\n      text-align: center;\r\n      margin-bottom: 20px;\r\n    }\r\n  }\r\n  .valueCripto {\r\n    .select-coin {\r\n      clear: both;\r\n      min-height: 60px;\r\n      display: flex;\r\n      justify-content: center;\r\n    }\r\n    .area-field input {\r\n      text-align: center;\r\n    }\r\n  }\r\n  .container-qr-code {\r\n    padding: 30px 15px;\r\n  }\r\n}\r\n\r\n@media only screen and (max-width: 321px) {\r\n  .header {\r\n    display: block!important;\r\n  }\r\n  .container-logo-header {\r\n    text-align: center;\r\n    .container-quotation {\r\n      margin: 10px 0 0 0;\r\n    }\r\n    .logo {\r\n      text-align: center;\r\n      padding: 10px;\r\n    }\r\n    .quotation {\r\n      text-align: center;\r\n      display: flex;\r\n      justify-content: center;\r\n      flex-direction: row;\r\n      .container-quotation {\r\n        padding: 0 5px;\r\n      }\r\n    }\r\n  }\r\n  .round-menu img {\r\n    width: 100%;\r\n  }\r\n  .flex-right {\r\n    display: block;\r\n  }\r\n  .menu.menu-top {\r\n    display: flex!important;\r\n    justify-content: center!important;\r\n    li {\r\n      img {\r\n        width: 25px;\r\n      }\r\n    }\r\n  }\r\n}\r\n  ","$primary: #4c2b82 !default;\r\n$lightPrimary: #654fa4;\r\n$extraLightPrimary: #876fc6;\r\n$darkPrimary: #41256f;\r\n$extraDarkPrimary: #3f2569;\r\n$green: #44af57;\r\n$darkGreen: #44af57;\r\n$yellow: #f9d660;\r\n$darkGray: #333;"],"sourceRoot":""}]);
	
	// exports


/***/ },
/* 707 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _faqComponent = __webpack_require__(708);
	
	var _faqComponent2 = _interopRequireDefault(_faqComponent);
	
	var _faq = __webpack_require__(709);
	
	var _faq2 = _interopRequireDefault(_faq);
	
	__webpack_require__(710);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var FAQComponent = {
	  template: _faqComponent2.default,
	  controller: _faq2.default
	};
	
	exports.default = FAQComponent;

/***/ },
/* 708 */
/***/ function(module, exports) {

	module.exports = "<div class=\"container faq\">\n\n  <span onclick=\"window.history.back();\" style=\"cursor: pointer;font-size: 10px;border-radius: 10px;background-color: #4c2b82;box-shadow: #392060 1px 1px 1px;padding: 2px 10px;\">\n    <i class=\"fas fa-angle-left\"></i>&nbsp;&nbsp;&nbsp; {{'BACK' | translate}}\n  </span>\n\n  <h3 style=\"margin: 20px 0;\" id=\"here\">{{'FAQ' | translate}}</h3>\n\n  <p ng-show=\"false\" ng-bind-html=\"$ctrl.faqText\"></p>\n\n  <div style=\"text-align: left;\">\n    <ul style=\"margin: 0;padding: 0;\">\n      <li class=\"containerQuestion\" ng-repeat=\"question in $ctrl.questions\">\n\n        <div class=\"question\" ng-click=\"$ctrl.open(question)\">\n          <p class=\"title\">{{question.question}}</p>\n          <small class=\"smalGreen\" ng-show=\"!question.show\">\n            <i class=\"fas fa-angle-right\"></i>\n          </small>\n          <small class=\"smallGreen\" ng-show=\"question.show\">\n            <i class=\"fas fa-angle-down\"></i>\n          </small>\n        </div>\n\n        <ul class=\"containerAnswer\" ng-show=\"question.show\">\n          <li class=\"answer\">\n            <p style=\"color: #5ad68c; margin: 0;\">{{question.answer}}</p>\n            <p ng-repeat=\"item in question.items\" style=\"margin: 0;font-size: 10px;\">{{item.translate | translate}} {{item.value}}</p>\n          </li>\n        </ul>\n      </li>\n    </ul>\n  </div>\n</div>"

/***/ },
/* 709 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var FAQController = function () {
	  function FAQController($sce, $filter, $translate, $window) {
	    _classCallCheck(this, FAQController);
	
	    this.faqText = $sce.trustAsHtml($filter('translate')('FAQ_TEXT'));
	    this.questions = [{
	      question: $translate.instant('WHATS_LUNES'),
	      answer: $translate.instant('WHATS_LUNES_A'),
	      show: false
	    }, {
	      question: $translate.instant('DOUBT_01'),
	      answer: $translate.instant('DOUBT_01_A'),
	      show: false
	    }, {
	      question: $translate.instant('DOUBT_02'),
	      answer: $translate.instant('DOUBT_02_A'),
	      show: false
	    }, {
	      question: $translate.instant('DOUBT_03'),
	      answer: $translate.instant('DOUBT_03_A'),
	      show: false
	    }, {
	      question: $translate.instant('DOUBT_04'),
	      answer: $translate.instant('DOUBT_04_A'),
	      show: false
	    }, {
	      question: $translate.instant('DOUBT_05'),
	      answer: $translate.instant('DOUBT_05_A'),
	      show: false
	    }, {
	      question: $translate.instant('DOUBT_06'),
	      answer: $translate.instant('DOUBT_06_A'),
	      show: false
	    }, {
	      question: $translate.instant('DOUBT_07'),
	      answer: $translate.instant('DOUBT_07_A'),
	      items: [{
	        translate: 'ITEM_07_1',
	        value: '$ 0.01'
	      }, {
	        translate: 'ITEM_07_2',
	        value: '$ 0.08'
	      }, {
	        translate: 'ITEM_07_3',
	        value: '$ 0.15'
	      }, {
	        translate: 'ITEM_07_4',
	        value: '$ 0.30'
	      }],
	      show: false
	    }, {
	      question: $translate.instant('DOUBT_08'),
	      answer: $sce.trustAsHtml($filter('translate')('DOUBT_08_A')),
	      show: false
	    }, {
	      question: $translate.instant('DOUBT_09'),
	      answer: $translate.instant('DOUBT_09_A'),
	      show: false
	    }, {
	      question: $translate.instant('DOUBT_10'),
	      answer: $translate.instant('DOUBT_10_A'),
	      show: false
	    }, {
	      question: $translate.instant('DOUBT_11'),
	      answer: $translate.instant('DOUBT_11_A'),
	      show: false
	    }, {
	      question: $translate.instant('DOUBT_12'),
	      answer: $translate.instant('DOUBT_12_A'),
	      show: false
	    }, {
	      question: $translate.instant('DOUBT_13'),
	      answer: $translate.instant('DOUBT_13_A'),
	      show: false
	    }, {
	      question: $translate.instant('DOUBT_14'),
	      answer: $translate.instant('DOUBT_14_A'),
	      show: false
	    }, {
	      question: $translate.instant('DOUBT_15'),
	      answer: $translate.instant('DOUBT_15_A'),
	      show: false
	    }, {
	      question: $translate.instant('DOUBT_16'),
	      answer: $translate.instant('DOUBT_16_A'),
	      show: false
	    }, {
	      question: $translate.instant('DOUBT_17'),
	      answer: $translate.instant('DOUBT_17_A'),
	      show: false
	    }, {
	      question: $translate.instant('DOUBT_18'),
	      answer: $translate.instant('DOUBT_18_A'),
	      show: false
	    }];
	
	    // scroll to top page
	    $window.scrollTo(0, 0);
	  }
	
	  FAQController.prototype.open = function open(question) {
	    this.questions = this.questions.map(function (q) {
	      if (question.question !== q.question) {
	        q.show = false;
	      }
	      return q;
	    });
	    question.show = !question.show;
	  };
	
	  return FAQController;
	}();
	
	FAQController.$inject = ['$sce', '$filter', '$translate', '$window'];
	
	exports.default = FAQController;

/***/ },
/* 710 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(711);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(689)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../../node_modules/css-loader/index.js?sourceMap!../../node_modules/postcss-loader/index.js!../../node_modules/sass-loader/index.js?config=sassLoader!./faq.component.scss", function() {
				var newContent = require("!!../../node_modules/css-loader/index.js?sourceMap!../../node_modules/postcss-loader/index.js!../../node_modules/sass-loader/index.js?config=sassLoader!./faq.component.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 711 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(688)(true);
	// imports
	
	
	// module
	exports.push([module.id, ".question {\n  font-weight: bold;\n  color: #5dcd5d;\n  margin-top: 20px; }\n\n.faq {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-pack: center;\n      justify-content: center;\n  -ms-flex-align: center;\n      align-items: center;\n  -ms-flex-direction: column;\n      flex-direction: column;\n  margin-top: 40px; }\n  .faq .containerQuestion {\n    width: 100%;\n    background-color: #532e95;\n    padding: 5px 10px;\n    border-bottom: solid 1px #4a2782;\n    width: 500px;\n    list-style: none; }\n  .faq .question {\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex-align: center;\n        align-items: center;\n    -ms-flex-pack: justify;\n        justify-content: space-between;\n    cursor: pointer; }\n    .faq .question .title {\n      padding: 10px 20px 10px 0;\n      color: #fff; }\n  .faq .smallGreen {\n    color: #64de74; }\n  .faq .containerAnswer {\n    margin: 0;\n    padding: 0;\n    list-style: none; }\n    .faq .containerAnswer .answer {\n      margin: 0;\n      padding: 5px;\n      list-style: none;\n      width: 480px;\n      background-color: #4d2b8a;\n      font-size: 11px; }\n\n@media only screen and (max-width: 426px) {\n  .faq h3 {\n    text-align: center; }\n  .containerQuestion {\n    width: 425px !important; }\n    .containerQuestion .containerAnswer .answer {\n      width: 405px; } }\n\n@media only screen and (max-width: 376px) {\n  .faq h3 {\n    text-align: center; }\n  .containerQuestion {\n    width: 375px !important; }\n    .containerQuestion .containerAnswer .answer {\n      width: 355px; } }\n\n@media only screen and (max-width: 321px) {\n  .faq h3 {\n    text-align: center; }\n  .containerQuestion {\n    width: 320px !important; }\n    .containerQuestion .containerAnswer .answer {\n      width: 298px; } }\n", "", {"version":3,"sources":["D:/workspaces/lunes/lunes-purchase/src/faq/src/faq/faq.component.scss"],"names":[],"mappings":"AAAA;EACE,kBAAiB;EACjB,eAAc;EACd,iBAAgB,EACjB;;AAED;EACE,qBAAa;EAAb,cAAa;EACb,sBAAuB;MAAvB,wBAAuB;EACvB,uBAAmB;MAAnB,oBAAmB;EACnB,2BAAsB;MAAtB,uBAAsB;EACtB,iBAAgB,EAoCjB;EAzCD;IAQI,YAAW;IACX,0BAAyB;IACzB,kBAAiB;IACjB,iCAAgC;IAChC,aAAY;IACZ,iBAAgB,EACjB;EAdH;IAgBI,qBAAa;IAAb,cAAa;IACb,uBAAmB;QAAnB,oBAAmB;IACnB,uBAA8B;QAA9B,+BAA8B;IAC9B,gBAAe,EAKhB;IAxBH;MAqBM,0BAAyB;MACzB,YAAW,EACZ;EAvBL;IA0BI,eAAc,EACf;EA3BH;IA6BI,UAAS;IACT,WAAU;IACV,iBAAgB,EASjB;IAxCH;MAiCM,UAAS;MACT,aAAY;MACZ,iBAAgB;MAChB,aAAY;MACZ,0BAAyB;MACzB,gBAAe,EAChB;;AAIL;EACE;IAEI,mBAAkB,EACnB;EAEH;IACE,wBAAsB,EAMvB;IAPD;MAIM,aAAY,EACb,EAAA;;AAKP;EACE;IAEI,mBAAkB,EACnB;EAEH;IACE,wBAAsB,EAMvB;IAPD;MAIM,aAAY,EACb,EAAA;;AAKP;EACE;IAEI,mBAAkB,EACnB;EAEH;IACE,wBAAsB,EAMvB;IAPD;MAIM,aAAY,EACb,EAAA","file":"faq.component.scss","sourcesContent":[".question {\r\n  font-weight: bold;\r\n  color: #5dcd5d;\r\n  margin-top: 20px;\r\n}\r\n\r\n.faq {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  margin-top: 40px;\r\n\r\n  .containerQuestion {\r\n    width: 100%;\r\n    background-color: #532e95;\r\n    padding: 5px 10px;\r\n    border-bottom: solid 1px #4a2782;\r\n    width: 500px;\r\n    list-style: none;\r\n  }\r\n  .question {\r\n    display: flex; \r\n    align-items: center;\r\n    justify-content: space-between;\r\n    cursor: pointer;\r\n    .title {\r\n      padding: 10px 20px 10px 0;\r\n      color: #fff;\r\n    }\r\n  }\r\n  .smallGreen {\r\n    color: #64de74;\r\n  }\r\n  .containerAnswer {\r\n    margin: 0;\r\n    padding: 0;\r\n    list-style: none;\r\n    .answer {\r\n      margin: 0;\r\n      padding: 5px;\r\n      list-style: none;\r\n      width: 480px;\r\n      background-color: #4d2b8a;\r\n      font-size: 11px;\r\n    }\r\n  }\r\n}\r\n\r\n@media only screen and (max-width: 426px) {\r\n  .faq {\r\n    h3 {\r\n      text-align: center;\r\n    }\r\n  }\r\n  .containerQuestion {\r\n    width: 425px!important;\r\n    .containerAnswer {\r\n      .answer {\r\n        width: 405px;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@media only screen and (max-width: 376px) {\r\n  .faq {\r\n    h3 {\r\n      text-align: center;\r\n    }\r\n  }\r\n  .containerQuestion {\r\n    width: 375px!important;\r\n    .containerAnswer {\r\n      .answer {\r\n        width: 355px;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@media only screen and (max-width: 321px) {\r\n  .faq {\r\n    h3 {\r\n      text-align: center;\r\n    }\r\n  }\r\n  .containerQuestion {\r\n    width: 320px!important;\r\n    .containerAnswer {\r\n      .answer {\r\n        width: 298px;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n"],"sourceRoot":""}]);
	
	// exports


/***/ },
/* 712 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _dashboardComponent = __webpack_require__(713);
	
	var _dashboardComponent2 = _interopRequireDefault(_dashboardComponent);
	
	var _dashboard = __webpack_require__(714);
	
	var _dashboard2 = _interopRequireDefault(_dashboard);
	
	__webpack_require__(715);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var DashboardComponent = {
	  template: _dashboardComponent2.default,
	  controller: _dashboard2.default
	};
	
	exports.default = DashboardComponent;

/***/ },
/* 713 */
/***/ function(module, exports) {

	module.exports = "<div class=\"container\">\n\n  <lunesheader showlogout=\"true\" showlinks=\"true\"></lunesheader>\n\n  <!-- DASHBOARD -->\n  <section class=\"dashboard\">\n    <div>\n      <div class=\"title user-menu\" style=\"padding-left: 0;\">\n        <a href=\"\" id=\"user-menu\" ng-click=\"$ctrl.toogleUserMenu()\">\n          <h4>\n            {{'WELCOME' | translate}}, {{$ctrl.currentUser.fullname}}\n            <span ng-show=\"!$ctrl.showUserMenu\">\n              <i class=\"fas fa-angle-right green\"></i>\n            </span>\n            <span ng-show=\"$ctrl.showUserMenu\">\n              <i class=\"fas fa-angle-down green\"></i>\n            </span>\n          </h4>\n        </a>\n        <div class=\"logout area-button\" ng-show=\"$ctrl.showUserMenu\">\n          <a href=\"#!/login\" class=\"primary-button\" ng-click=\"$ctrl.logout()\">\n            {{'LOGOUT' | translate}}\n          </a>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <!-- BALANCE FOR EACH COIN -->\n      <div class=\"col-xs-12 col-md-6 col-lg-6 transaction-coins\">\n        <div class=\"show-balance\" ng-repeat=\"coin in $ctrl.coins\" style=\"margin-right: 15px;text-align: center;\">\n          <img ng-src=\"{{coin.img}}\" alt=\"{{coin.label}}\">\n          <p style=\"font-size: 10px;margin: 0;\">{{coin.label}}</p>\n          <small ng-show=\"false\" style=\"font-size: 8px;color: #ce3e3e;\">{{'UNCONFIRMED_BALANCE' | translate}}</small>\n          <p ng-show=\"false\" style=\"font-size: 10px;margin: 0;\">{{$ctrl.balanceProcessed[coin.name].unconfirmed_balance}}</p>\n        </div>\n      </div>\n\n      <div class=\"col-xs-12 col-md-6 col-lg-6 balance lns\">\n        <span>{{'MY_BALANCE' | translate}}:</span>\n        <span class=\"monetary\">{{ $ctrl.totalLns }}</span>\n        <span class=\"coin\">LNS</span>\n      </div>\n\n      <!-- end -->\n\n      <!-- TABLE RESUME HISTORIC PURCHASE -->\n      <div class=\"col-12 history\">\n        <table class=\"lunes-table\" ng-if=\"$ctrl.checkWidthScreenDesktop()\">\n          <thead>\n            <tr>\n              <td>{{ 'DASHBOARD.DATE' | translate }}</td>\n              <td>{{ 'DASHBOARD.PHASE' | translate }}</td>\n              <td>{{ 'DASHBOARD.DEPOSIT' | translate }}</td>\n              <td>Lunes</td>\n              <td>{{ 'DASHBOARD.BONUS' | translate }}</td>\n              <td>Total</td>\n            </tr>\n          </thead>\n          <tbody data-ng-if=\"$ctrl.history.length > 0\">\n            <tr data-ng-repeat=\"history in $ctrl.history\" ng-class-odd=\"'odd'\" ng-class-even=\"'even'\">\n              <td>{{ history.created | date: 'yyyy-MM-dd HH:mm:ss Z' }}</td>\n              <td>{{ history.phase || 1 }}</td>\n              <td>{{ history.deposit_value }} {{ history.deposit_coin }}</td>\n              <td>{{ history.credit_value }} LNS</td>\n              <td>{{ history.bonus_value }} LNS </td>\n              <td>{{ history.total }} LNS</td>\n            </tr>\n          </tbody>\n          <tfoot data-ng-if=\"$ctrl.history.length === 0\">\n            <tr>\n              <td colspan=\"6\" style=\"text-align: center;\">{{ 'DASHBOARD.NO_HISTORY' | translate }}</td>\n            </tr>\n          </tfoot>\n        </table>\n\n        <div ng-if=\"$ctrl.checkWidthScreenMobile()\">\n          <div data-ng-repeat=\"history in $ctrl.history\" ng-class-odd=\"'odd'\" ng-class-even=\"'even'\" style=\"border-radius: 5px;\">\n            <h6 style=\"text-align: center; padding: 10px; color: #4cd468;\">{{'TRANSACTION' | translate}} {{$index+1}}</h6>\n            <div class=\"responsive-table-card\">\n              <div>{{ 'DASHBOARD.DATE' | translate }}</div>\n              <div>{{ history.created | date: 'yyyy-MM-dd HH:mm:ss Z' }}</div>\n            </div>\n            <div class=\"responsive-table-card\">\n              <div>{{ 'DASHBOARD.PHASE' | translate }}</div>\n              <div>{{ history.phase || 1 }}</div>\n            </div>\n            <div class=\"responsive-table-card\">\n              <div>{{ 'DASHBOARD.DEPOSIT' | translate }}</div>\n              <div>{{ history.deposit_value }} {{history.deposit_coin}}</div>\n            </div>\n            <div class=\"responsive-table-card\">\n              <div>Lunes</div>\n              <div>{{ history.credit_value }} LNS</div>\n            </div>\n            <div class=\"responsive-table-card\">\n              <div>{{ 'DASHBOARD.BONUS' | translate }}</div>\n              <div>{{ history.bonus_value }} LNS</div>\n            </div>\n            <div class=\"responsive-table-card total-footer\" ng-show=\"false\">\n              <div>Total</div>\n              <div>{{ history.total }} LNS</div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    </div>\n  </section>\n</div>\n<lunesfooter />"

/***/ },
/* 714 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _lunesLib = __webpack_require__(477);
	
	var _lunesLib2 = _interopRequireDefault(_lunesLib);
	
	var _index = __webpack_require__(685);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var DashboardController = function () {
	  function DashboardController($scope, HttpService, $translate, $timeout, $state) {
	    _classCallCheck(this, DashboardController);
	
	    this.$scope = $scope;
	    this.HttpService = HttpService;
	    this.$timeout = $timeout;
	    this.$translate = $translate;
	    this.$state = $state;
	    this.currentUser = JSON.parse(localStorage.getItem(_index.STORAGE_KEY));
	    this.phases = [];
	    this.phaseName = '';
	    this.history = [];
	    this.totalLns = 0;
	    this.coins = _index.COINS_CONSTANT;
	    this.showUserMenu = false;
	    this.getHistory();
	    this.getProcessedBalanceUser();
	  }
	
	  DashboardController.prototype.getProcessedBalanceUser = function () {
	    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
	      var _this = this;
	
	      var BTC, LTC, ETH;
	      return regeneratorRuntime.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              _context.next = 2;
	              return this.HttpService.showDepositWalletAddressQRCode(this.currentUser, this.coins[0]);
	
	            case 2:
	              BTC = _context.sent;
	              _context.next = 5;
	              return this.HttpService.showDepositWalletAddressQRCode(this.currentUser, this.coins[1]);
	
	            case 5:
	              LTC = _context.sent;
	              _context.next = 8;
	              return this.HttpService.showDepositWalletAddressQRCode(this.currentUser, this.coins[2]);
	
	            case 8:
	              ETH = _context.sent;
	              _context.next = 11;
	              return this.getCurrentBalanceUser(this.coins[0].name, BTC.address, this.currentUser);
	
	            case 11:
	              this.balanceBTC = _context.sent;
	              _context.next = 14;
	              return this.getCurrentBalanceUser(this.coins[1].name, LTC.address, this.currentUser);
	
	            case 14:
	              this.balanceLTC = _context.sent;
	              _context.next = 17;
	              return this.getCurrentBalanceUser(this.coins[2].name, ETH.address, this.currentUser);
	
	            case 17:
	              this.balanceETH = _context.sent;
	
	
	              if (this.balanceETH && this.balanceETH.network === 'ETH') {
	                if (this.balanceETH.balance === '0') {
	                  this.balanceETH.balance = '0.00000000';
	                }
	                this.balanceETH.confirmed_balance = this.balanceETH.balance;
	              }
	
	              this.$timeout(function () {
	                _this.balanceProcessed = {
	                  BTC: JSON.parse(JSON.stringify(_this.balanceBTC)),
	                  LTC: JSON.parse(JSON.stringify(_this.balanceLTC)),
	                  ETH: JSON.parse(JSON.stringify(_this.balanceETH))
	                };
	              }, 200);
	
	            case 20:
	            case 'end':
	              return _context.stop();
	          }
	        }
	      }, _callee, this);
	    }));
	
	    function getProcessedBalanceUser() {
	      return _ref.apply(this, arguments);
	    }
	
	    return getProcessedBalanceUser;
	  }();
	
	  DashboardController.prototype.getCurrentBalanceUser = function () {
	    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(coin, address, currentUser) {
	      var balance;
	      return regeneratorRuntime.wrap(function _callee2$(_context2) {
	        while (1) {
	          switch (_context2.prev = _context2.next) {
	            case 0:
	              _context2.next = 2;
	              return this.HttpService.getBalance(coin, address, currentUser);
	
	            case 2:
	              balance = _context2.sent;
	              return _context2.abrupt('return', balance);
	
	            case 4:
	            case 'end':
	              return _context2.stop();
	          }
	        }
	      }, _callee2, this);
	    }));
	
	    function getCurrentBalanceUser(_x, _x2, _x3) {
	      return _ref2.apply(this, arguments);
	    }
	
	    return getCurrentBalanceUser;
	  }();
	
	  DashboardController.prototype.showLoading = function showLoading(isShow) {
	    if (isShow) {
	      $('<div class="modal-backdrop"><img src="https://res.cloudinary.com/luneswallet/image/upload/v1519442469/loading_y9ob8i.svg" /></div>').appendTo(document.body);
	    } else {
	      this.$timeout(function () {
	        $(".modal-backdrop").remove();
	      }, 1000);
	    }
	  };
	
	  DashboardController.prototype.logout = function logout() {
	    localStorage.removeItem(_index.STORAGE_KEY);
	  };
	
	  DashboardController.prototype.checkWidthScreenDesktop = function checkWidthScreenDesktop() {
	    return window.innerWidth >= 768;
	  };
	
	  DashboardController.prototype.checkWidthScreenMobile = function checkWidthScreenMobile() {
	    return window.innerWidth < 768;
	  };
	
	  DashboardController.prototype.getHistory = function () {
	    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
	      var _this2 = this;
	
	      var history;
	      return regeneratorRuntime.wrap(function _callee3$(_context3) {
	        while (1) {
	          switch (_context3.prev = _context3.next) {
	            case 0:
	              this.showLoading(true);
	              if (!this.currentUser) {
	                this.$state.go('login');
	              }
	              _context3.next = 4;
	              return _lunesLib2.default.ico.buyHistory(this.currentUser.email, this.currentUser.accessToken, 1).catch(function (err) {
	                if (err && err.error && err.error.status === 401) {
	                  localStorage.removeItem(_index.STORAGE_KEY);
	                  _this2.$state.go('login');
	                }
	              });
	
	            case 4:
	              history = _context3.sent;
	
	              this.getPhases();
	              this.$timeout(function () {
	                _this2.showLoading(false);
	                _this2.history = history.map(function (item) {
	                  var total = parseFloat(item.credit_value) + parseFloat(item.bonus_value);
	                  _this2.getHistoryPhase(item.sale_phase_id);
	
	                  return {
	                    total: total.toFixed(8),
	                    created: item.created,
	                    phase: _this2.phaseName,
	                    deposit_value: parseFloat(item.deposit_value),
	                    deposit_coin: item.deposit_coin,
	                    credit_value: parseFloat(item.credit_value),
	                    bonus_value: parseFloat(item.bonus_value)
	                  };
	                });
	
	                _this2.getTotalLns();
	              }, 100);
	
	            case 7:
	            case 'end':
	              return _context3.stop();
	          }
	        }
	      }, _callee3, this);
	    }));
	
	    function getHistory() {
	      return _ref3.apply(this, arguments);
	    }
	
	    return getHistory;
	  }();
	
	  DashboardController.prototype.getTotalLns = function () {
	    var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
	      var totalLns;
	      return regeneratorRuntime.wrap(function _callee4$(_context4) {
	        while (1) {
	          switch (_context4.prev = _context4.next) {
	            case 0:
	              totalLns = this.history.reduce(function (total, item) {
	                return total + parseFloat(item.credit_value) + parseFloat(item.bonus_value);
	              }, 0);
	
	
	              this.totalLns = totalLns.toFixed(8);
	
	            case 2:
	            case 'end':
	              return _context4.stop();
	          }
	        }
	      }, _callee4, this);
	    }));
	
	    function getTotalLns() {
	      return _ref4.apply(this, arguments);
	    }
	
	    return getTotalLns;
	  }();
	
	  DashboardController.prototype.getPhases = function () {
	    var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
	      return regeneratorRuntime.wrap(function _callee5$(_context5) {
	        while (1) {
	          switch (_context5.prev = _context5.next) {
	            case 0:
	              if (!localStorage.getItem('lunes.phase')) {
	                _context5.next = 3;
	                break;
	              }
	
	              this.phases = JSON.parse(localStorage.getItem('lunes.phase'));
	              return _context5.abrupt('return');
	
	            case 3:
	              _context5.next = 5;
	              return this.HttpService.obtainPhase().catch(function (error) {
	                console.log('Erro ao tentar recuperar dados da fase');
	              });
	
	            case 5:
	              this.phases = _context5.sent;
	
	            case 6:
	            case 'end':
	              return _context5.stop();
	          }
	        }
	      }, _callee5, this);
	    }));
	
	    function getPhases() {
	      return _ref5.apply(this, arguments);
	    }
	
	    return getPhases;
	  }();
	
	  DashboardController.prototype.getHistoryPhase = function () {
	    var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(phase) {
	      var historyPhase;
	      return regeneratorRuntime.wrap(function _callee6$(_context6) {
	        while (1) {
	          switch (_context6.prev = _context6.next) {
	            case 0:
	              historyPhase = this.phases.filter(function (item) {
	                return item.sale_id === phase;
	              });
	
	              if (!(historyPhase.length === 0)) {
	                _context6.next = 4;
	                break;
	              }
	
	              this.phaseName = '-';
	              return _context6.abrupt('return');
	
	            case 4:
	
	              this.phaseName = historyPhase[0].name;
	
	            case 5:
	            case 'end':
	              return _context6.stop();
	          }
	        }
	      }, _callee6, this);
	    }));
	
	    function getHistoryPhase(_x4) {
	      return _ref6.apply(this, arguments);
	    }
	
	    return getHistoryPhase;
	  }();
	
	  DashboardController.prototype.toogleUserMenu = function toogleUserMenu() {
	    this.showUserMenu = !this.showUserMenu;
	  };
	
	  return DashboardController;
	}();
	
	DashboardController.$inject = ['$scope', 'HttpService', '$translate', '$timeout', '$state'];
	
	exports.default = DashboardController;

/***/ },
/* 715 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(716);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(689)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../../node_modules/css-loader/index.js?sourceMap!../../node_modules/postcss-loader/index.js!../../node_modules/sass-loader/index.js?config=sassLoader!./dashboard.component.scss", function() {
				var newContent = require("!!../../node_modules/css-loader/index.js?sourceMap!../../node_modules/postcss-loader/index.js!../../node_modules/sass-loader/index.js?config=sassLoader!./dashboard.component.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 716 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(688)(true);
	// imports
	
	
	// module
	exports.push([module.id, ".green {\n  color: #44af57; }\n\n.mb-1-rem {\n  margin-bottom: 1rem; }\n\n.mb-2-rem {\n  margin-bottom: 2rem; }\n\n.history {\n  margin-bottom: 2rem; }\n\n.balance {\n  font-family: 'Offside', cursive;\n  text-align: right; }\n\n.monetary {\n  font-size: 1.2rem;\n  margin-left: 10px; }\n\n.coin {\n  font-size: 1.5rem;\n  color: #44af57; }\n\n.lunes-table {\n  border-top-left-radius: 5px;\n  border-top-right-radius: 5px;\n  font-weight: lighter;\n  font-size: 12px;\n  overflow: hidden;\n  text-align: center;\n  width: 100%; }\n  .lunes-table td {\n    padding: 0.75rem; }\n  .lunes-table thead {\n    background: linear-gradient(to right, #654fa4, #876fc6, #654fa4); }\n  .lunes-table tbody {\n    background-color: #41256f; }\n    .lunes-table tbody tr:hover {\n      background-color: #3f2569; }\n\n/* \r\nMax width before this PARTICULAR table gets nasty\r\nThis query will take effect for any screen smaller than 760px\r\nand also iPads specifically.\r\n*/\n@media only screen and (max-width: 699px) {\n  /* Force table to not be like tables anymore */\n  table, thead, tbody, th, td, tr {\n    display: block; }\n  /* Hide table headers (but not display: none;, for accessibility) */\n  thead tr {\n    position: absolute;\n    top: -9999px;\n    left: -9999px; }\n  tr {\n    border: 1px solid #3f2669; }\n  td {\n    /* Behave  like a \"row\" */\n    border: none;\n    border-bottom: 1px solid #4b2d7d;\n    position: relative;\n    padding-left: 50%; }\n  td:before {\n    /* Now like a table header */\n    position: absolute;\n    /* Top/left values mimic padding */\n    top: 6px;\n    left: 6px;\n    width: 45%;\n    padding-right: 10px;\n    white-space: nowrap; }\n  .monetary {\n    font-size: 1rem;\n    margin-left: 10px; }\n  .coin {\n    font-size: 1.5rem;\n    color: #4cd466; } }\n\n@media only screen and (min-width: 700px) and (max-width: 768px) {\n  .lunes-table {\n    table-layout: fixed; }\n    .lunes-table tbody {\n      max-height: 400px;\n      overflow-y: auto;\n      display: block;\n      width: 690px; } }\n\n.odd {\n  background-color: #41256f; }\n\n.even {\n  background-color: #351e5a; }\n\n.responsive-table-card {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-direction: row;\n      flex-direction: row;\n  -ms-flex-pack: justify;\n      justify-content: space-between;\n  padding: 10px;\n  margin-bottom: 10px;\n  border-bottom: solid 1px #4c2c7f; }\n  .responsive-table-card div {\n    font-size: 12px; }\n  .responsive-table-card.total-footer {\n    background-color: #4cd468;\n    border-radius: 0 0 5px 5px; }\n\n.transaction-coins {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-direction: row;\n      flex-direction: row;\n  -ms-flex-pack: start;\n      justify-content: flex-start; }\n\n.balance.lns {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-pack: end;\n      justify-content: flex-end;\n  -ms-flex-align: center;\n      align-items: center; }\n\n@media only screen and (max-width: 426px) {\n  .transaction-coins {\n    -ms-flex-pack: center;\n        justify-content: center;\n    margin-bottom: 20px; }\n  .balance.lns {\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex-pack: end;\n        justify-content: flex-end;\n    -ms-flex-align: center;\n        align-items: center;\n    margin-bottom: 20px; } }\n", "", {"version":3,"sources":["D:/workspaces/lunes/lunes-purchase/src/dashboard/src/dashboard/dashboard.component.scss","D:/workspaces/lunes/lunes-purchase/src/dashboard/src/scss/base/_color.scss"],"names":[],"mappings":"AAEA;EACI,eCEW,EDDd;;AAED;EACI,oBAAmB,EACtB;;AAED;EACI,oBAAmB,EACtB;;AAED;EACI,oBAAmB,EACtB;;AAED;EACI,gCAA+B;EAC/B,kBAAiB,EACpB;;AAED;EACI,kBAAiB;EACjB,kBAAiB,EACpB;;AAED;EACI,kBAAiB;EACjB,eCzBW,ED0Bd;;AAED;EAEI,4BAA2B;EAC3B,6BAA4B;EAC5B,qBAAoB;EACpB,gBAAe;EACf,iBAAgB;EAChB,mBAAkB;EAClB,YAAW,EAiBd;EAzBD;IAWQ,iBAAgB,EACnB;EAZL;IAeQ,iEAAwF,EAC3F;EAhBL;IAmBQ,0BCjDa,EDsDhB;IAxBL;MAsBY,0BCnDc,EDoDjB;;AAIT;;;;EAIE;AACF;EAGC,+CAA+C;EAC/C;IACC,eAAc,EACd;EAED,oEAAoE;EACpE;IACC,mBAAkB;IAClB,aAAY;IACZ,cAAa,EACb;EAED;IAAK,0BAAyB,EAAK;EAEnC;IACC,0BAA0B;IAC1B,aAAY;IACZ,iCAAgC;IAChC,mBAAkB;IAClB,kBAAiB,EACjB;EAED;IACC,6BAA6B;IAC7B,mBAAkB;IAClB,mCAAmC;IACnC,SAAQ;IACR,UAAS;IACT,WAAU;IACV,oBAAmB;IACnB,oBAAmB,EAChB;EAED;IACI,gBAAe;IACf,kBAAiB,EACpB;EAED;IACI,kBAAiB;IACjB,eAAc,EACjB,EAAA;;AAGL;EAEI;IACI,oBAAmB,EAOtB;IARD;MAGQ,kBAAiB;MACjB,iBAAgB;MAChB,eAAc;MACd,aAAY,EACf,EAAA;;AAIT;EACI,0BAAyB,EAC5B;;AACD;EACI,0BAAyB,EAC5B;;AAED;EACI,qBAAa;EAAb,cAAa;EACb,wBAAmB;MAAnB,oBAAmB;EACnB,uBAA8B;MAA9B,+BAA8B;EAC9B,cAAa;EACb,oBAAmB;EACnB,iCAAgC,EAQnC;EAdD;IAQQ,gBAAe,EAClB;EATL;IAWQ,0BAAyB;IACzB,2BAA0B,EAC7B;;AAGL;EACI,qBAAa;EAAb,cAAa;EACb,wBAAmB;MAAnB,oBAAmB;EACnB,qBAA2B;MAA3B,4BAA2B,EAC9B;;AAED;EACI,qBAAa;EAAb,cAAa;EACb,mBAAyB;MAAzB,0BAAyB;EACzB,uBAAmB;MAAnB,oBAAmB,EACtB;;AAED;EACI;IACI,sBAAuB;QAAvB,wBAAuB;IACvB,oBAAmB,EACtB;EAED;IACI,qBAAa;IAAb,cAAa;IACb,mBAAyB;QAAzB,0BAAyB;IACzB,uBAAmB;QAAnB,oBAAmB;IACnB,oBAAmB,EACtB,EAAA","file":"dashboard.component.scss","sourcesContent":["@import '../scss/base/_color';\r\n\r\n.green {\r\n    color: $green;\r\n}\r\n\r\n.mb-1-rem {\r\n    margin-bottom: 1rem;\r\n}\r\n\r\n.mb-2-rem {\r\n    margin-bottom: 2rem;\r\n}\r\n\r\n.history {\r\n    margin-bottom: 2rem;\r\n}\r\n\r\n.balance {\r\n    font-family: 'Offside', cursive;\r\n    text-align: right;\r\n}\r\n\r\n.monetary {\r\n    font-size: 1.2rem;\r\n    margin-left: 10px;\r\n}\r\n\r\n.coin {\r\n    font-size: 1.5rem;\r\n    color: $green;\r\n}\r\n\r\n.lunes-table {\r\n    // background: transparent;\r\n    border-top-left-radius: 5px;\r\n    border-top-right-radius: 5px;\r\n    font-weight: lighter;\r\n    font-size: 12px;\r\n    overflow: hidden;\r\n    text-align: center;\r\n    width: 100%;\r\n\r\n    td {\r\n        padding: 0.75rem;\r\n    }\r\n\r\n    thead {\r\n        background: linear-gradient(to right , $lightPrimary, $extraLightPrimary, $lightPrimary);\r\n    }\r\n\r\n    tbody {\r\n        background-color: $darkPrimary;\r\n        \r\n        tr:hover {\r\n            background-color: $extraDarkPrimary;\r\n        }\r\n    }\r\n}\r\n\r\n/* \r\nMax width before this PARTICULAR table gets nasty\r\nThis query will take effect for any screen smaller than 760px\r\nand also iPads specifically.\r\n*/\r\n@media \r\nonly screen and (max-width: 699px)  {\r\n\r\n\t/* Force table to not be like tables anymore */\r\n\ttable, thead, tbody, th, td, tr { \r\n\t\tdisplay: block; \r\n\t}\r\n\t\r\n\t/* Hide table headers (but not display: none;, for accessibility) */\r\n\tthead tr { \r\n\t\tposition: absolute;\r\n\t\ttop: -9999px;\r\n\t\tleft: -9999px;\r\n\t}\r\n\t\r\n\ttr { border: 1px solid #3f2669; }\r\n\t\r\n\ttd { \r\n\t\t/* Behave  like a \"row\" */\r\n\t\tborder: none;\r\n\t\tborder-bottom: 1px solid #4b2d7d; \r\n\t\tposition: relative;\r\n\t\tpadding-left: 50%; \r\n\t}\r\n\t\r\n\ttd:before { \r\n\t\t/* Now like a table header */\r\n\t\tposition: absolute;\r\n\t\t/* Top/left values mimic padding */\r\n\t\ttop: 6px;\r\n\t\tleft: 6px;\r\n\t\twidth: 45%; \r\n\t\tpadding-right: 10px; \r\n\t\twhite-space: nowrap;\r\n    }\r\n\r\n    .monetary {\r\n        font-size: 1rem;\r\n        margin-left: 10px;\r\n    }\r\n    \r\n    .coin {\r\n        font-size: 1.5rem;\r\n        color: #4cd466;\r\n    }\r\n}\r\n\r\n@media\r\nonly screen and (min-width: 700px) and (max-width: 768px) {\r\n    .lunes-table {\r\n        table-layout: fixed;\r\n        tbody {\r\n            max-height: 400px;\r\n            overflow-y: auto;\r\n            display: block;\r\n            width: 690px;\r\n        }\r\n    }\r\n}\r\n\r\n.odd {\r\n    background-color: #41256f;\r\n}\r\n.even {\r\n    background-color: #351e5a;\r\n}\r\n\r\n.responsive-table-card {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    padding: 10px;\r\n    margin-bottom: 10px;\r\n    border-bottom: solid 1px #4c2c7f;\r\n    div {\r\n        font-size: 12px;\r\n    }\r\n    &.total-footer {\r\n        background-color: #4cd468;\r\n        border-radius: 0 0 5px 5px;\r\n    }\r\n}\r\n\r\n.transaction-coins {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: flex-start;\r\n}\r\n\r\n.balance.lns {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    align-items: center;\r\n}\r\n\r\n@media only screen and (max-width: 426px) {\r\n    .transaction-coins {\r\n        justify-content: center;\r\n        margin-bottom: 20px;\r\n    }\r\n    \r\n    .balance.lns {\r\n        display: flex;\r\n        justify-content: flex-end;\r\n        align-items: center;\r\n        margin-bottom: 20px;\r\n    }    \r\n}","$primary: #4c2b82 !default;\r\n$lightPrimary: #654fa4;\r\n$extraLightPrimary: #876fc6;\r\n$darkPrimary: #41256f;\r\n$extraDarkPrimary: #3f2569;\r\n$green: #44af57;\r\n$darkGreen: #44af57;\r\n$yellow: #f9d660;\r\n$darkGray: #333;"],"sourceRoot":""}]);
	
	// exports


/***/ },
/* 717 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _fixComponent = __webpack_require__(718);
	
	var _fixComponent2 = _interopRequireDefault(_fixComponent);
	
	var _fix = __webpack_require__(719);
	
	var _fix2 = _interopRequireDefault(_fix);
	
	__webpack_require__(720);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var FixComponent = {
	  template: _fixComponent2.default,
	  controller: _fix2.default
	};
	
	exports.default = FixComponent;

/***/ },
/* 718 */
/***/ function(module, exports) {

	module.exports = "<div class=\"container\">\n  <div style=\"display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  height: 100vh;\n  text-align: center;\">\n    <div class=\"col-xs-12 col-lg-2 logo\" style=\"margin-bottom: 50px;\">\n      <!-- eslint-disable -->\n      <span>L</span>\n      <span>u</span>\n      <span>n</span>\n      <span class=\"txt-green\">e</span>\n      <span>s</span>\n      <!-- eslint-disable -->\n    </div>\n    <h2>{{'PAGE_FIX' | translate}}</h2>\n  </div>\n</div>"

/***/ },
/* 719 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var FixController = function FixController($scope) {
	  _classCallCheck(this, FixController);
	
	  this.$scope = $scope;
	};
	
	FixController.$inject = ['$scope'];
	
	exports.default = FixController;

/***/ },
/* 720 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(721);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(689)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../../node_modules/css-loader/index.js?sourceMap!../../node_modules/postcss-loader/index.js!../../node_modules/sass-loader/index.js?config=sassLoader!./fix.component.scss", function() {
				var newContent = require("!!../../node_modules/css-loader/index.js?sourceMap!../../node_modules/postcss-loader/index.js!../../node_modules/sass-loader/index.js?config=sassLoader!./fix.component.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 721 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(688)(true);
	// imports
	
	
	// module
	exports.push([module.id, "", "", {"version":3,"sources":[],"names":[],"mappings":"","file":"fix.component.scss","sourceRoot":""}]);
	
	// exports


/***/ },
/* 722 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _constants = __webpack_require__(685);
	
	var _constants2 = _interopRequireDefault(_constants);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function () {
	    var DEFAULT_VALUE = 'en';
	    var languageDefault = navigator.language || navigator.userLanguage || navigator.browserLanguage || navigator.systemLanguage || DEFAULT_VALUE;
	
	    return _constants2.default[languageDefault] || _constants2.default.en;
	};

/***/ },
/* 723 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _USER$PASSWORD$PASSWO;
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	exports.default = (_USER$PASSWORD$PASSWO = {
	  USER: 'User',
	  PASSWORD: 'Password',
	  PASSWORD_PLACEHOLDER: 'Type your password here',
	  NAME: 'Name',
	  NAME_PLACEHOLDER: 'Type your name here',
	  LAST_NAME: 'Last Name',
	  LAST_NAME_PLACEHOLDER: 'Type your last name here',
	  EMAIL: 'Email',
	  EMAIL_PLACEHOLDER: 'Type your email here',
	  CONFIRM_EMAIL: 'Confirm Email',
	  CONFIRM_EMAIL_PLACEHOLDER: 'Type your email again',
	  ALL_FIELDS_REQUIRED: 'Please, type the fields required',
	  BACK: 'click here to back',
	  CONFIRM_PASSWORD: 'Confirm Password',
	  CONFIRM_PASSWORD_PLACEHOLDER: 'Type your password again',
	  COUPON: 'Do you have any coupon code?',
	  COUPON_PLACEHOLDER: 'If yes, please type here',
	  WELCOME: 'Welcome',
	  BEGIN_YOUR_REGISTRATION: 'Begin your registration',
	  TRANSACTION: 'Transaction',
	  MY_BALANCE: 'My balance',
	  IN: 'in',
	  DATE_FORMAT: 'MM-dd-yyyy',
	  AGREE: 'Agree',
	  DONT_HAVE_ACCOUNT: 'Don\'t have an account?',
	  SIGNUP: 'Signup',
	  RESET_PASSWORD: 'Reset your password',
	  WHITELIST: 'Whitelist',
	  BUY: 'Buy',
	  DASHBOARD: 'Dashboard',
	  PURCHASE_HISTORY: 'Purchase History',
	  CURRENCY_SYMBOL: 'U$',
	  CURRENCY_USER: 'USD',
	  CURRENCY_EXCHANGE: 'bitstamp',
	  PRICE_LUNES: '1 LNS',
	  COIN_SELECTED: 'coin selected',
	  LOADING: 'loading...',
	  AMOUNT_LUNES: 'Amount LNS',
	  DO_YOU_HAVE_A_COUPON: 'Do you have a coupon?',
	  BONUS: 'Bonus',
	  SIGNUP_SUCCESSFULY: 'Sucessful Registration',
	  REDIRECTING: 'redirecting to login...',
	  LOGOUT: 'logout',
	  AUTHENTICATE_INVALID: 'Invalid Authentication',
	  BUY_LIMIT_PHASE: 'Buy limit for this phase:',
	  QUOTATION: 'Price:',
	  BALANCE: 'Balance',
	  AN_ERROR_CREATE_ACCOUNT: 'An error occured while creating account',
	  MSG_BALANCE_DEPOSITED: 'All balance deposited in the address will automatically be converted to Lunes on 02/26/2018',
	  DEPOSIT_CONFIRMATION_ADVICE: 'Your deposit will be added by our system automatically once we receive 3 confirmations',
	  US_CITIZEN: 'I agree i am not a citizen of the United States of America.',
	  AGREE_TERM: 'I agree with the above terms of use.',
	  AGREE_FUTURE_VALUE: 'I agree the price of the lunes cryptocurrency is not guaranteed in the future.',
	  TERM_TITLE: 'Terms and conditions',
	  PAGE_FIX: 'Page under maintenance',
	  EMAIL_REQUIRED: 'Email is required',
	  EMAIL_INVALID: 'Invalid email address',
	  PASSWORD_REQUIRED: 'Password is required',
	  PASSWORD_LENGTH: 'Password length must be greater than 8 characters',
	  PASSWORD_UPPERCASE: 'At least one character in the password must be uppercase',
	  PASSWORD_LOWERCASE: 'At least one character in the password must be lowercase',
	  PASSWORD_SPECIALCHARACTER: 'At least one character in the password must be a special character [*&%$#@]',
	  PASSWORD_ALPHANUMERIC: 'At least one character in the password must be a number',
	  EMAIL_MATCH: 'E-mail must match',
	  PASSWORD_MATCH: 'Password must match',
	  SEND_TO_THIS_ADDRESS: 'Please, send',
	  UNCONFIRMED_BALANCE: 'Unconfirmed',
	  AMOUNT_MINIMUN_VALIDATION: 'The amount of LNS must be greater than zero',
	  FAQ: 'F.A.Q',
	  EXCEED_LIMIT_BUY: 'You exceeded your limit buy'
	}, _defineProperty(_USER$PASSWORD$PASSWO, 'DASHBOARD', {
	  NO_HISTORY: 'You have no history yet',
	  DATE: 'Date',
	  PHASE: 'Phase',
	  DEPOSIT: 'Deposit',
	  BONUS: 'Bonus'
	}), _defineProperty(_USER$PASSWORD$PASSWO, 'TO', 'to'), _defineProperty(_USER$PASSWORD$PASSWO, 'EMAIL_ALREADY', 'The email address already exists'), _defineProperty(_USER$PASSWORD$PASSWO, 'TERMS_CONDITION_TITLE', 'Terms and Conditions'), _defineProperty(_USER$PASSWORD$PASSWO, 'REPRESENTATION_TERM_TITLE', 'Representation and Warranties'), _defineProperty(_USER$PASSWORD$PASSWO, 'ERROR_SERVER', 'Error on server'), _defineProperty(_USER$PASSWORD$PASSWO, 'COUPON', 'Coupon'), _defineProperty(_USER$PASSWORD$PASSWO, 'OWN_COUPON', 'My Coupon'), _defineProperty(_USER$PASSWORD$PASSWO, 'TYPE_COUPON', 'Type your coupon bonus'), _defineProperty(_USER$PASSWORD$PASSWO, 'CHANGE_PASSWORD', 'Change Password'), _defineProperty(_USER$PASSWORD$PASSWO, 'EMAIL_SENT', 'Email sent successfully'), _defineProperty(_USER$PASSWORD$PASSWO, 'CLOSE', 'Close'), _defineProperty(_USER$PASSWORD$PASSWO, 'EMAIL_NOT_SENT', 'Email not sent or not exists'), _defineProperty(_USER$PASSWORD$PASSWO, 'DO_YOU_CHANGE_PASSWORD', 'Do you want change you password?'), _defineProperty(_USER$PASSWORD$PASSWO, 'CHANGE_PASSWORD_INSTRUCTION', 'Type your email for us send for you the instructions to change password'), _defineProperty(_USER$PASSWORD$PASSWO, 'WHATS_LUNES', 'What is Lunes?'), _defineProperty(_USER$PASSWORD$PASSWO, 'WHATS_LUNES_A', 'Lunes is a platform that provides a set of solutions that is decentralized by utilizing blockchain\n    technology: such as creating tokens, authenticity records, and making payment processing possible through our gateway operators by using \u201Cfiat\u201D \n    currencies and cryptocurrencies.'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_01', 'Is Lunes a Waves or Ethereum token?'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_01_A', 'Our blockchain is a fork of the Waves code, but we have very different functionalities. So Lunes is NOT an ethereum token.'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_02', 'When does PRE_ICO start?'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_02_A', 'The PRE-ICO starts on February 25 and runs until March 30.'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_03', 'When does ICO start?'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_03_A', 'ICO starts on April 15 and runs until May 20.'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_04', 'How to buy Lunes?'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_04_A', 'Visit the website https://ico.lunes.io, register and log in. Just choose the desired payment A- method and send to the address of your choice. That simple.'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_05', 'What currencies will you be accepting?'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_05_A', 'Bitcoin, Ethereum and Litecoin.'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_06', 'How do I convert my payment for Lunes in the website?'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_06_A', 'There is no need to convert it. Your Lunes will be automatically converted within 20 minutes to 1 hour after payment is confirmed.'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_07', 'What is the price of 1 LNS?'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_07_A', 'We will have 4 lots with the following prices:'), _defineProperty(_USER$PASSWORD$PASSWO, 'ITEM_07_1', '1st lot:'), _defineProperty(_USER$PASSWORD$PASSWO, 'ITEM_07_2', '2nd lot:'), _defineProperty(_USER$PASSWORD$PASSWO, 'ITEM_07_3', '3rd lot:'), _defineProperty(_USER$PASSWORD$PASSWO, 'ITEM_07_4', '4th lot:'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_08', 'What is the limit of purchase per investor?'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_08_A', '1st lot: $ 0.01 - 300.000 coins\n    <br />2nd lot: $ 0.08 - 5.000.000 coins\n    <br />3rd lot: $ 0.15 - 8.000.000 coins\n    <br />4th lot: $ 0.30 10.000.000 coins'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_09', 'What is the max supply of coins?'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_09_A', '600.000.000 coins. Total coins available for ICO process is 450.000.000.'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_10', 'What is the Soft Cap?'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_10_A', '10.92M USD.'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_11', 'Can I buy with fiat currency?'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_11_A', 'No. We will accept only cryptocurrency.'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_12', 'When can I transfer my Lunes?'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_12_A', 'After ICO is finished, you will be able to transfer your Lunes coins.'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_13', 'Is Lunes a security token?'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_13_A', 'No. Lunes is a utility token.'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_14', 'Is Lunes going to be listed at any exchange?'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_14_A', 'Yes, but we cannot confirm any at the moment. We will negotiate with exchanges after the ICO is finished.'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_15', 'When Lunes wallet will be released for iOS?'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_15_A', 'We do not have a specific date. Apple has been very bureaucratic when it comes to cryptocurrencies. Although we are fully committed to making our app \n    available to iOS system.'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_16', 'What is the mining algorithm, PoW or PoS?'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_16_A', 'LPoS, or Leased Proof of Stake, in which the Lunes tokens that are in your wallet can be used to "forge" tokens through the leasing process, safely \n    and without having to keep an open wallet.'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_17', 'What the price to 1LNS?'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_17_A', 'We not have how to control of the price in the exchanges, the market dictates the rules'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_18', 'How can I create a Lunes Node?'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_18_A', 'The Lunes Node (still in development) is an application in Java, compatible with any operating system which offers support. In order to your Lunes \n    Node has the chance to mine the transactions, it is necessary for the Wallet set up in the Lunes.conf to hold at least 5,000 coins.'), _defineProperty(_USER$PASSWORD$PASSWO, 'FAQ_TEXT', '\n      \n    '), _defineProperty(_USER$PASSWORD$PASSWO, 'REPRESENTATION_TERM', '\n      <h3>Representation and Warranties</h3>\n      <p>By participating in the Initial Coin Offering, the User agrees to the T&C and in particular, they represent and warrant that they:</p>\n      <br>1. are authorized and have full power to purchase LNS according to the laws that apply in their jurisdiction of domicile;\n      <br>2. live in a jurisdiction which allows Lunes to sell the Lunes tokens through a Initial Coin Offering without requiring any local authorization;\n      <br>3. are familiar with all related regulations in the specific jurisdiction in which they are based and that purchasing cryptographic tokens in that jurisdiction is not prohibited, restricted or subject to additional conditions of any kind;\n      <br>4. are not a U.S., or Canadian, or Chinese, or South Korean, or Singaporean citizen, resident or entity (a \u201CU.S., or Canadian, or Chinese, or South Korean, or Singaporean Person\u201D) nor are they purchasing Lunes Tokens or signing on behalf of a U.S., or Canadian, or Chinese, or South Korean, or Singaporean Person. Are not acting for the purpose of speculative investment; will not use the Token Sale for any illegal activity, including but not limited to money laundering and the financing of terrorism;\n      <br>5. are solely responsible for determining whether the acquisition of LNS is appropriate for them; are acquiring LNS for future use of the Lunes Platform; understand the risks associated with the Initial Coin Offering (incl. the risks related to the non-development of Lunes Platform and operations);\n      <br>6. understand the use of cryptocurrencies and the associated risks\n    '), _defineProperty(_USER$PASSWORD$PASSWO, 'TERMS_CONDITIONS', '\n      <h3>Terms and Conditions</h3>\n      <p>The Terms and Conditions (the \u201CT&C\u201D) apply to the buyer of the Lunes token\n      (\u201CLNS\u201D) and future user of the Lunes Platform. You should carefully read the T&C, as well as the white paper of the Lunes project before participating in the Initial Coin Offering.</p>\n\n      <h5>Applicability</h5>\n      <p>The following T&C constitute the agreement (the \u201CAgreement\u201D) between Lunes Platform (hereinafter \u201CLunes\u201D or the \u201CCompany\u201D), and you (the \u201CUser\u201D) with respect to\n      the purchase of the Lunes Token and the future services offered through the Lunes Platform. By using our services, you are agreeing to be bound by the T&C in\n      its latest version. You are aware that Lunes may change this T&C at any time. Your continued use of the Lunes Platform means that you accept any new or modified\n      terms.</p>\n\n      <h5>Services</h5>\n      <p>Lunes is a platform which provides a set of decentralized solutions through blockchain.\n      In an uncomplicated and affordable way, we will pulverize our technologies into the population. With real solutions for daily life, we deliver services and\n      products ranging from payment processes and fundraising, to authenticity records.</p>\n\n      <h5>The Lunes Token (LNS)</h5>\n      <p>LNS does not have the legal qualification as a security. LNS is final and non-refundable. LNS is not a share and does not give any right to participate in the\n      general meetings of Lunes. LNS will not have a particular usage outside the Lunes Platform. The purchase of LNS shall therefore not be done for speculative usage.</p>\n\n      <p>LNS can be purchased during the Initial Coin Offering directly from the Company or after the ICO at the Company or exchanger.</p>\n\n      <p>Any future User purchasing LNS expressly acknowledges and represents that she/he has carefully reviewed the T&C and fully understands the risks, costs and\n      benefits associated with the purchase of this token as indicated in the T&C.</p>\n\n      <h5>Knowledge required<h5>\n      <p>A future User undertaking to purchase LNS in relation to the token sale,  should ensure that she/he understands and has significant experience of cryptocurrencies,\n      blockchain systems and services, and that she/he fully understands the risks associated with the token sale as well as the mechanism related to the use of\n      cryptocurrencies (incl. storage).</p>\n\n      <p>Lunes shall not be responsible for any loss of LNS or situations making it impossible to access to LNS, which may result in any actions or omissions of the future\n      User or any person undertaking to acquire LNS.</p>\n\n      <h5>Risks</h5>\n      <p>Acquiring LNS involves various risks, in particular that Lunes may not be able to launch its operations and develop its platform. Therefore, and prior to\n      acquiring\n      LNS, any future user should carefully consider the risks, costs, and benefits of acquiring LNS within the Initial Coin Offering, and, if necessary, obtain\n      independent advice in this regard. Any interested person who is not in the position to accept or to understand the risks associated with the Initial Coin\n      Offering (incl. the risks related to the non- development of Lunes Platform and operations) or any other risks as indicated in the T&C, should not acquire\n      LNS, at this stage or later.</p>\n\n      <h5>Self-Acquisition</h5>\n      <p>Lunes is allowed to acquire LNS from the market at market price as value disbursement method. The acquisition must be authorized by the Board of Directors,\n      under\n      the condition that no conflict of interests is identified. Through acquisition of LNS, Lunes is not allowed to perform operations such as manipulation of LNS\n      market.</p>\n\n      <h5>Important Disclaimer</h5>\n      <p>The T&C shall not and cannot be considered as an invitation to enter into an investment. They do not constitute or relate in any way nor should they be\n      considered\n      as an offering of securities in any jurisdiction. The T&C do not include or contain any information or indication that might be considered as a recommendation\n      or that might be used to base any investment decision. LNS is a utility token and is not intended to be used as an investment.</p>\n\n      <p>Lunes will be an operative entity managing a platform and LNS is only a utility token. Therefore, Lunes is not a financial intermediary and is not\n      required to obtain any authorization for anti-money laundering purposes.</p>\n\n      <p>Acquiring LNS shall not grant any right or influence over Lunes\u2019 organization and governance to the purchasers.</p>\n\n      <p>Employees of Lunes are allowed to operate with LNS at market price if they are in knowledge of information that may modify the price of the token.</p>\n\n      <p>Regulatory authorities are carefully scrutinizing businesses and operations associated to cryptocurrencies in the world. In that respect, regulatory measures,\n      investigations or actions may impact Lunes\u2019 business and even limit or prevent it from developing its operations in the future. Any person undertaking to acquire\n      LNS must be aware that the Lunes business model and the T&C may change or need to be modified because of new regulatory and compliance requirements from any\n      applicable laws in any jurisdictions. In such case, purchasers and any person undertaking to acquire LNS acknowledge and understand that neither Lunes nor any\n      of its affiliates shall be held liable for any direct or indirect loss or damages caused by such changes.</p>\n\n      <p>Lunes will do its best to launch its operations and develop the Lunes Platform. Any person undertaking to acquire LNS acknowledges and understands that Lunes does\n      not provide any guarantee that it will manage to establish an operative platform and therefore it cannot guarantee that the LNS can be used for social trading on\n      the platform. They acknowledge and understand therefore that Lunes (incl. its bodies and employees) assumes no liability or responsibility for any loss or damage\n      that would result from or relate to the incapacity to use LNS, except in the case of intentional misconduct or gross negligence.</p>\n\n      <h5>Intellectual Property Rights</h5>\n      <p>To the extent that copyright or other intellectual property rights exist in the Lunes Platform, such as software, know-how, analysis or programs, those copyrights\n      and other intellectual and industrial rights belong to Lunes.</p>\n\n      <h5>Limitation of Liability</h5>\n      <p>Lunes, as well as its officers, directors, agents, joint ventures, employees and suppliers, assumes no liability or responsibility for any loss arising out of or\n      related to the use of the Lunes Platform or any technical, interruption or malfunction of the platform.</p>\n\n      <p>The limitation of liability set out above shall not be applicable in the event that Lunes, or a Lunes-employee, has caused the damage by intentional misconduct or\n      by gross negligence.</p>\n\n      <h5>Severability</h5>\n      <p>If any of the provisions of the T&C or of the Agreement are deemed to be invalid, void or unenforceable, the remaining provisions shall continue in full force and\n      effect.</p>\n    '), _USER$PASSWORD$PASSWO);

/***/ },
/* 724 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _USER$PASSWORD$PASSWO;
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	exports.default = (_USER$PASSWORD$PASSWO = {
	  USER: 'Usuário',
	  PASSWORD: 'Senha',
	  PASSWORD_PLACEHOLDER: 'Digite aqui sua senha',
	  NAME: 'Nome',
	  NAME_PLACEHOLDER: 'Digite aqui seu nome',
	  LAST_NAME: 'Sobrenome',
	  LAST_NAME_PLACEHOLDER: 'Digite aqui seu sobrenome',
	  WELCOME: 'Bem-vindo',
	  EMAIL: 'Email',
	  EMAIL_PLACEHOLDER: 'Digite aqui seu email',
	  CONFIRM_EMAIL: 'Confirmar Email',
	  CONFIRM_EMAIL_PLACEHOLDER: 'Digite seu email novamente',
	  CONFIRM_PASSWORD: 'Confirmar Senha',
	  CONFIRM_PASSWORD_PLACEHOLDER: 'Digite sua senha novamente',
	  COUPON: 'Você tem algum cupom de desconto?',
	  COUPON_PLACEHOLDER: 'Se sim, por favor digite aqui',
	  ALL_FIELDS_REQUIRED: 'Por favor, preencha os campos obrigatórios',
	  BACK: 'clique aqui para voltar',
	  BEGIN_YOUR_REGISTRATION: 'Comece seu cadastro',
	  AGREE: 'Concordo',
	  DONT_HAVE_ACCOUNT: 'Não possui uma conta?',
	  SIGNUP: 'Cadastrar',
	  RESET_PASSWORD: 'Esqueceu sua senha?',
	  WHITELIST: 'Whitelist',
	  BUY: 'Comprar',
	  DASHBOARD: 'Dashboard',
	  PURCHASE_HISTORY: 'Histórico de Compras',
	  DATE_FORMAT: 'dd-MM-yyyy',
	  TRANSACTION: 'Transação',
	  MY_BALANCE: 'Meu saldo',
	  IN: 'em',
	  CURRENCY_SYMBOL: 'R$',
	  CURRENCY_USER: 'BRL',
	  CURRENCY_EXCHANGE: 'bitstamp',
	  PRICE_LUNES: '1 LNS',
	  COIN_SELECTED: 'moeda selecionada',
	  LOADING: 'carregando...',
	  AMOUNT_LUNES: 'Quantidade de LNS',
	  DO_YOU_HAVE_A_COUPON: 'Você possui cupom de desconto?',
	  BONUS: 'Bônus',
	  BUY_LIMIT_PHASE: 'Compra limite nessa fase:',
	  SIGNUP_SUCCESSFULY: 'Cadastro Realizado',
	  REDIRECTING: 'redirecionando para o login...',
	  LOGOUT: 'sair',
	  AUTHENTICATE_INVALID: 'Autenticação Inválida',
	  AN_ERROR_CREATE_ACCOUNT: 'Um erro ocorreu ao criar a conta',
	  MSG_BALANCE_DEPOSITED: 'Todo saldo depositado nesse endereço será automaticamente convertido em Lunes no dia 26/02/2018 às 23:00',
	  DEPOSIT_CONFIRMATION_ADVICE: 'Seu depósito será adicionado pelo nosso sistema automaticamente quando recebermos 3 confirmações',
	  US_CITIZEN: 'Eu concordo que não sou um cidadão dos Estados Unidos da América.',
	  AGREE_TERM: 'Eu concordo com os termos de uso acima.',
	  AGREE_FUTURE_VALUE: 'Eu concordo que não há garantia do valor futuro da moeda Lunes.',
	  TERM_TITLE: 'Termos e condições',
	  EMAIL_REQUIRED: 'Email é obrigatório',
	  EMAIL_INVALID: 'Endereço de email inválido',
	  PASSWORD_REQUIRED: 'Senha é obrigatório',
	  PASSWORD_LENGTH: 'Senha deve ser maior ou igual a 8 caracteres',
	  PASSWORD_UPPERCASE: 'Ao menos um dos caracteres deve ser maiúsculo.',
	  PASSWORD_LOWERCASE: 'Ao menos um dos caracteres deve minúscula',
	  PASSWORD_SPECIALCHARACTER: 'Ao menos um dos caracteres deve ser um caractere especial [*&%$#@]',
	  PASSWORD_ALPHANUMERIC: 'Ao menos um dos caracteres deve ser um número',
	  EMAIL_MATCH: 'E-mail deve combinar com a confirmação',
	  PASSWORD_MATCH: 'Senha deve combinar com a confirmação',
	  SEND_TO_THIS_ADDRESS: 'Por favor, envie',
	  UNCONFIRMED_BALANCE: 'Não confirmado',
	  FAQ: 'Perguntas Frequentes',
	  QUOTATION: 'Cotação:',
	  EXCEED_LIMIT_BUY: 'Você excedeu seu limite de compra'
	}, _defineProperty(_USER$PASSWORD$PASSWO, 'DASHBOARD', {
	  NO_HISTORY: 'Você ainda não possui histórico',
	  DATE: 'Data',
	  PHASE: 'Fase',
	  DEPOSIT: 'Depósito',
	  BONUS: 'Bônus'
	}), _defineProperty(_USER$PASSWORD$PASSWO, 'TO', 'para'), _defineProperty(_USER$PASSWORD$PASSWO, 'BALANCE', 'Saldo'), _defineProperty(_USER$PASSWORD$PASSWO, 'EMAIL_ALREADY', 'Email já cadastrado'), _defineProperty(_USER$PASSWORD$PASSWO, 'ERROR_SERVER', 'Erro interno no servidor'), _defineProperty(_USER$PASSWORD$PASSWO, 'COUPON', 'Cupom'), _defineProperty(_USER$PASSWORD$PASSWO, 'OWN_COUPON', 'Meu Cupom'), _defineProperty(_USER$PASSWORD$PASSWO, 'TYPE_COUPON', 'Insira seu cupom de bônus'), _defineProperty(_USER$PASSWORD$PASSWO, 'TERMS_CONDITION_TITLE', 'Termos e Condições'), _defineProperty(_USER$PASSWORD$PASSWO, 'REPRESENTATION_TERM_TITLE', 'Representações e Garantias'), _defineProperty(_USER$PASSWORD$PASSWO, 'CHANGE_PASSWORD', 'Alterar Senha'), _defineProperty(_USER$PASSWORD$PASSWO, 'EMAIL_SENT', 'Email enviado com sucesso'), _defineProperty(_USER$PASSWORD$PASSWO, 'CLOSE', 'Fechar'), _defineProperty(_USER$PASSWORD$PASSWO, 'EMAIL_NOT_SENT', 'Email não enviado ou não existe'), _defineProperty(_USER$PASSWORD$PASSWO, 'AMOUNT_MINIMUN_VALIDATION', 'A quantidade mínima de LNS deve ser maior do que zero'), _defineProperty(_USER$PASSWORD$PASSWO, 'PAGE_FIX', 'Página em manutenção'), _defineProperty(_USER$PASSWORD$PASSWO, 'DO_YOU_CHANGE_PASSWORD', 'Você deseja alterar a senha?'), _defineProperty(_USER$PASSWORD$PASSWO, 'CHANGE_PASSWORD_INSTRUCTION', 'Digite seu email para enviarmos as instruções de alteração de sua senha'), _defineProperty(_USER$PASSWORD$PASSWO, 'WHATS_LUNES', 'O que é a Lunes?'), _defineProperty(_USER$PASSWORD$PASSWO, 'WHATS_LUNES_A', 'A plataforma Lunes, viabiliza o fornecimento de um conjunto de solu\xE7\xF5es constru\xEDdas de forma descentralizada utilizando a \n    tecnologia de blockchain como cria\xE7\xE3o de tokens, registros de autenticidade e processamentos de pagamentos atrav\xE9s de operadores de gateway, \n    tanto de moedas fiduci\xE1rias quanto criptomoedas, facilitando a capta\xE7\xE3o de recursos e private labels.'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_01', 'A Lunes \xE9 um token do Ethereum ou da Waves?'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_01_A', 'Nosso blockchain \xE9 um fork do c\xF3digo da Waves, por\xE9m temos funcionalidades bem distintas. Portanto a Lunes N\xC3O \xE9 um token ethereum.'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_02', 'Quando come\xE7a a PR\xC9-ICO?'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_02_A', 'A pr\xE9-ICO come\xE7a no dia 25 de Fevereiro e vai at\xE9 o dia 30 de Mar\xE7o.'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_03', 'Quando come\xE7a a ICO?'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_03_A', 'A ICO come\xE7a no dia 15 de Abril e vai at\xE9 o dia 20 de Maio.'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_04', 'Como comprar Lunes?'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_04_A', 'Visite o site https://ico.lunes.io , fa\xE7a o cadastro e efetue o login. Basta escolher a forma de pagamento desejada e enviar para o endere\xE7o de sua escolha. Simples assim.'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_05', 'Quais formas de pagamentos aceitas?'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_05_A', 'Bitcoin, Ethereum e Litecoin.'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_06', 'Como eu compro Lunes dentro do website?'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_06_A', 'N\xE3o h\xE1 necessidade de fazer a compra. As suas Lunes ser\xE3o convertidas automaticamente dentro de 20 minutos a 1 hora.'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_07', 'Qual o pre\xE7o de 1 LNS?'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_07_A', 'Teremos 4 lotes, com os pre\xE7os de acordo com a seguinte ordem:'), _defineProperty(_USER$PASSWORD$PASSWO, 'ITEM_07_1', 'lote 1'), _defineProperty(_USER$PASSWORD$PASSWO, 'ITEM_07_2', 'lote 2'), _defineProperty(_USER$PASSWORD$PASSWO, 'ITEM_07_3', 'lote 3'), _defineProperty(_USER$PASSWORD$PASSWO, 'ITEM_07_4', 'lote 4'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_08', 'Qual o valor m\xEDnimo para compra?'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_08_A', 'N\xE3o h\xE1 valor m\xEDnimo de compra.'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_09', 'Qual o valor m\xE1ximo de compra por usu\xE1rio?'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_09_A', '1\xBA lote: $ 0.01 - 300.000 de moedas\n    <br />2\xBA lote: $ 0.08 - 5.000.000 de moedas\n    <br />3\xBA lote: $ 0.15 - 8.000.000 de moedas\n    <br />4\xBA lote: $ 0.30 - 10.000.000 de moedas'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_09', 'Qual o m\xE1ximo de moedas emitidas?'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_09_A', '600 milh\xF5es de moedas. Sendo que 450 milh\xF5es est\xE3o dispon\xEDveis \xE0 venda.'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_10', 'Qual o Soft Cap?'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_10_A', '10.92M de d\xF3lares.'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_11', 'Posso comprar Lunes em Real(BRL)?'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_11_A', 'N\xE3o, ser\xE1 aceito apenas BTC, ETH e LTC como forma de pagamento.'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_12', 'Quando poderei transferir minhas Lunes?'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_12_A', 'Ap\xF3s o final da ICO voc\xEA poder\xE1 transferir suas Lunes para a carteira mobile ou web.'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_13', 'A Lunes vai ser listada em alguma exchange?'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_13_A', 'Pretendemos listar nossa moeda nas exchanges, por\xE9m ainda n\xE3o podemos confirmar em quais. Ap\xF3s a ICO iremos come\xE7ar as negocia\xE7\xF5es e iremos inform\xE1-los.'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_14', 'A Lunes \xE9 uma security token?'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_14_A', 'N\xE3o. A Lunes \xE9 uma utility token.'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_15', 'Quando sai a Lunes Wallet para iOS?'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_15_A', 'N\xE3o temos uma data definida, a Apple \xE9 muito burocr\xE1tica em rela\xE7\xE3o as criptomoedas. Estamos com empenho total para disponibilizar nosso app tamb\xE9m para o sistema iOS, por\xE9m dependemos da aprova\xE7\xE3o da Apple.'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_16', 'Qual o algoritmo de minera\xE7\xE3o, PoW ou PoS?'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_16_A', 'LPoS, ou Leased Proof of Stake. Onde os tokens Lunes que est\xE3o na sua carteira podem ser utilizados para "forjar" tokens atrav\xE9s do processo de leasing, com seguran\xE7a e sem necessidade de manter uma carteira aberta.'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_17', 'Quanto valer\xE1 1 LNS nas exchanges?'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_17_A', 'N\xE3o h\xE1 como ter um controle de quanto valer\xE1 nas exchanges, o mercado \xE9 quem dita as regras.'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_18', 'Como montar um Lunes Node?'), _defineProperty(_USER$PASSWORD$PASSWO, 'DOUBT_18_A', 'O Lunes Node (ainda em desenvolvimento) \xE9 uma aplica\xE7\xE3o em java, compat\xEDvel com qualquer sistema operacional que tenha suporte. Para o seu Lunes Node tenha a chance de minerar as transa\xE7\xF5es, \xE9 necess\xE1rio que a carteira configurada no lunes.conf tenha o saldo m\xEDnimo de 5000 Lunes.'), _defineProperty(_USER$PASSWORD$PASSWO, 'FAQ_TEXT', ''), _defineProperty(_USER$PASSWORD$PASSWO, 'REPRESENTATION_TERM', '\n      <h3>Representa\xE7\xE3o e Garantias</h3>\n      <p>Ao participar da ICO o usu\xE1rio concorda com o T&C e, em particular, eles representam e garantem que:</p>\n      <br>1. S\xE3o autorizados e t\xEAm poder completo para comprar LNS de acordo com as leis que se aplicam em sua jurisdi\xE7\xE3o do domic\xEDlio;\n      <br>2. vivem em uma jurisdi\xE7\xE3o que permite que Lunes venda tokens atrav\xE9s de uma ICO sem exigir qualquer autoriza\xE7\xE3o local;\n      <br>3. est\xE3o familiarizados com todos os regulamentos relacionados na jurisdi\xE7\xE3o espec\xEDficas em que eles vivem e que a compra de tokens criptografados na jurisdi\xE7\xE3o n\xE3o \xE9 proibida, restrita ou sujeitas a qualquer tipo de condi\xE7\xF5es adicionais;\n      <br>4. N\xE3o s\xE3o um cidad\xE3o dos Estados Unidos, do Canad\xE1, de Singapura, da China ou da Cor\xE9ia do Sul ou residente ou entidade e nem est\xE3o comprando tokens Lunes ou assinando em nome de um cidad\xE3o americano, ou canadense, ou singapurense, ou sul coreano, ou chin\xEAs. N\xE3o est\xE3o agindo para fins de investimento especulativo; n\xE3o utilizar\xE1 a venda simb\xF3lica para qualquer actividade ilegal, incluindo, mas n\xE3o se limitando \xE0 lavagem de dinheiro e ao financiamento do terrorismo;\n      <br>5. s\xE3o os \xFAnicos respons\xE1veis por determinar se a aquisi\xE7\xE3o de LNS \xE9 adequada para eles; est\xE3o adquirindo LNS para uso futuro da plataforma Lunes; compreender os riscos associados \xE0 ICO (incl. os riscos relacionados com o n\xE3o desenvolvimento da plataforma e opera\xE7\xF5es da Lunes); e\n      <br>6. compreender o uso de criptomoedas e os riscos associados.\n    '), _defineProperty(_USER$PASSWORD$PASSWO, 'TERMS_CONDITIONS', '\n    <h3>Termos e condi\xE7\xF5es</h3>\n    <p>Os termos e condi\xE7\xF5es aplicam-se ao comprador do token Lunes ("LNS") e ao usu\xE1rio futuro da plataforma Lunes. Voc\xEA deve ler atentamente os termos e condi\xE7\xF5es,\n    bem como o Whitepaper do projeto Lunes antes de participar na ICO.</p>\n\n    <h5>Aplicabilidade</h5>\n    <p>Os seguintes termos e condi\xE7\xF5es constituem o acordo entre a plataforma Lunes (doravante "Lunes" ou a "empresa"), e voc\xEA (o "usu\xE1rio") no que diz respeito \xE0 compra dos tokens Lunes e aos servi\xE7os futuros oferecidos atrav\xE9s da Lunes Plataforma. Ao utilizar os nossos servi\xE7os, voc\xEA est\xE1 concordando em ser vinculado pelos termos e condi\xE7\xF5es em sua vers\xE3o mais recente. Voc\xEA est\xE1 ciente de que a Lunes pode mudar estes termos e condi\xE7\xF5es a qualquer momento. O uso continuado da plataforma Lunes significa que voc\xEA aceita quaisquer termos novos ou modificados.\n    Servi\xE7os\n    Lunes \xE9 uma plataforma que fornece um conjunto de solu\xE7\xF5es descentralizadas atrav\xE9s blockchain.\n    De uma forma descomplicada e acess\xEDvel, vamos pulverizar as nossas tecnologias para a  popula\xE7\xE3o. Com solu\xE7\xF5es reais para a vida cotidiana, entregamos servi\xE7os e\n    produtos que v\xE3o desde processos de pagamento e capta\xE7\xE3o de recursos, at\xE9 registros de autenticidade.</p>\n\n    <h5>O token Lunes (LNS)</h5>\n\n    <p>LNS n\xE3o tem a qualifica\xE7\xE3o legal de um cau\xE7\xE3o. Uma vez comprado o LNS n\xE3o \xE9 reembols\xE1vel. LNS n\xE3o \xE9 uma participa\xE7\xE3o da Lunes e n\xE3o d\xE1 qualquer direito de intera\xE7\xE3o nas reuni\xF5es gerais da Lunes. Os LNS podem ser adquiridos durante a fase de ICO diretamente da empresa ou ap\xF3s a ICO na empresa ou em certas exchanges.\n    Qualquer futuro usu\xE1rio que comprar LNS, expressamente reconhece que reviu cuidadosamente os termos e condi\xE7\xF5es e compreende plenamente os riscos, custos e benef\xEDcios associados com a compra deste token, como indicado nos termos e condi\xE7\xF5es.\n    Um futuro usu\xE1rio comprador de LNS tokens deve assegurar que compreenda e tenha uma experi\xEAncia significativa com crypto moedas, sistemas e servi\xE7os blockchain, e que compreenda plenamente os riscos associados a venda de tokens, bem como o mecanismo relacionado ao uso de crypto moedas.\n    A Lunes n\xE3o ser\xE1 respons\xE1vel por qualquer perda de LNS ou situa\xE7\xF5es que impossibilitam o acesso \xE0 LNS, o que pode resultar em quaisquer a\xE7\xF5es ou omiss\xF5es do futuro\n    usu\xE1rio ou de qualquer pessoa que se comprometa a adquirir ins.</p>\n\n    <h5>Os riscos</h5>\n\n    <p>A aquisi\xE7\xE3o de LNS envolve v\xE1rios riscos, em particular que a Lunes pode n\xE3o ser capaz de lan\xE7ar suas opera\xE7\xF5es e desenvolver sua plataforma. Portanto, e\n    antes de adquirir LNS, qualquer futuro usu\xE1rio deve considerar cuidadosamente os riscos, custos e benef\xEDcios da aquisi\xE7\xE3o de LNS dentro da ICO, e, se necess\xE1rio,\n    obter aconselhamento independente a este respeito. Qualquer pessoa interessada que n\xE3o esteja em posi\xE7\xE3o de aceitar ou de compreender os riscos associados \xE0\n    ICO (incl. os riscos relacionados com o n\xE3o desenvolvimento da plataforma e opera\xE7\xF5es da Lunes) ou quaisquer outros riscos conforme indicado nos termos e condi\xE7\xF5es,\n    n\xE3o devem adquirir LNS, nesta fase ou mais tarde.</p>\n\n    <h5>Auto-aquisi\xE7\xE3o</h5>\n\n    <p>\xC9 permitido a Lunes adquirir LNS do mercado a pre\xE7o de mercado como o m\xE9todo do desembolso do valor. A aquisi\xE7\xE3o deve ser autorizada pelo Conselho de\n    administra\xE7\xE3o, a condi\xE7\xE3o de n\xE3o se identificar nenhum conflito de interesses. Atrav\xE9s da aquisi\xE7\xE3o de LNS, Lunes n\xE3o tem permiss\xE3o para realizar opera\xE7\xF5es\n    como a manipula\xE7\xE3o do mercado de LNS.</p>\n\n    <h5>Importante Aviso De Isen\xE7\xE3o</h5>\n\n    <p>Os termos e condi\xE7\xF5es n\xE3o devem e n\xE3o podem ser considerados como um convite para entrar em um investimento. Eles n\xE3o constituem ou se relacionam de forma alguma, nem devem ser considerados como uma oferta de t\xEDtulos em qualquer jurisdi\xE7\xE3o. Os termos e condi\xE7\xF5es n\xE3o incluem nem cont\xE9m qualquer informa\xE7\xE3o ou indica\xE7\xE3o que possa ser considerada como uma recomenda\xE7\xE3o ou que possa ser usada para basear qualquer decis\xE3o de investimento. LNS \xE9 um token utilit\xE1rio e n\xE3o se destina a ser usado como um investimento.\n    A Lunes ser\xE1 uma entidade operativa gerenciando uma plataforma e LNS \xE9 apenas um token utilit\xE1rio. Portanto, Lunes n\xE3o \xE9 um intermedi\xE1rio financeiro, portanto n\xE3o \xE9 obrigado a obter qualquer autoriza\xE7\xE3o para fins anti-lavagem de dinheiro.\n    A aquisi\xE7\xE3o de LNS n\xE3o conceder\xE1 qualquer direito ou influ\xEAncia sobre a organiza\xE7\xE3o e governan\xE7a sobre a Lunes aos compradores.\n    Os funcion\xE1rios de Lunes est\xE3o autorizados a operar com o LNS a pre\xE7o de mercado, caso conhe\xE7am informa\xE7\xF5es que possam modificar o pre\xE7o do token.\n    As autoridades reguladoras est\xE3o examinando cuidadosamente as empresas e opera\xE7\xF5es associadas \xE0 crypto moedas no mundo. Nesse sentido, as medidas regulat\xF3rias, investiga\xE7\xF5es ou a\xE7\xF5es podem impactar os neg\xF3cios da Lunes e at\xE9 mesmo limit\xE1-la ou impedi-la de desenvolver suas opera\xE7\xF5es no futuro. Qualquer pessoa que se comprometa a adquirir o LNS deve estar ciente de que o modelo de neg\xF3cios Lunes e o T&C podem mudar ou precisar ser modificados devido a novos requisitos regulat\xF3rios e de conformidade de quaisquer leis aplic\xE1veis em qualquer jurisdi\xE7\xE3o. Nesse caso, os compradores e qualquer pessoa que se comprometa a adquirir LNS reconhecem e compreendem que a Lunes e suas filiais n\xE3o ser\xE3o responsabilizadas por quaisquer perdas ou danos diretos ou indiretos causados por tais altera\xE7\xF5es.\n    Lunes far\xE1 o seu melhor para lan\xE7ar suas opera\xE7\xF5es e desenvolver a plataforma Lunes. Qualquer pessoa que empreender na aquisi\xE7\xE3o de LNS reconhece e entende que\n    Lunes n\xE3o fornece qualquer garantia de que vai conseguir estabelecer uma plataforma operativa e, portanto, n\xE3o pode garantir que os LNS podem ser utilizados\n    para o com\xE9rcio social na plataforma. Reconhecem e compreendem conseq\xFCentemente que Lunes (incl. seus empregados) n\xE3o assume nenhuma responsabilidade por qualquer\n    perda ou dano que resulte ou se relacione com a incapacidade de usar o LNS, exceto no caso de m\xE1 conduta intencional ou bruta neglig\xEAncia.</p>\n\n    <h5>Direitos de propriedade intelectual</h5>\n\n    <p>Na medida em que o copyright ou outros direitos de propriedade intelectual existem na plataforma Lunes, tais como software, know-how, an\xE1lise ou programas,\n    os direitos autorais e outros direitos intelectuais e industriais pertencem a Lunes.</p>\n\n    <h5>Limita\xE7\xE3o da responsabilidade</h5>\n\n    <p>Lunes, bem como seus oficiais, diretores, agentes, joint-ventures, funcion\xE1rios e fornecedores, n\xE3o assume qualquer responsabilidade por qualquer perda resultante, ou relacionada ao uso, da plataforma Lunes ou qualquer t\xE9cnica, interrup\xE7\xE3o ou avaria da plataforma.\n    A limita\xE7\xE3o da responsabilidade acima referida n\xE3o \xE9 aplic\xE1vel no caso de Lunes, ou de um trabalhador Lunes, ter causado o dano por m\xE1 conduta intencional ou por\n    neglig\xEAncia grosseira.</p>\n\n    <h5>Separa\xE7\xE3o</h5>\n\n    <p>Se qualquer das disposi\xE7\xF5es do T&C ou do acordo for considerada inv\xE1lida, nula ou inexequ\xEDvel, as restantes disposi\xE7\xF5es continuar\xE3o em pleno vigor e efeito.</p>\n'), _USER$PASSWORD$PASSWO);

/***/ },
/* 725 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _http = __webpack_require__(726);
	
	Object.defineProperty(exports, 'HttpService', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_http).default;
	  }
	});
	
	var _cheapflights = __webpack_require__(729);
	
	Object.defineProperty(exports, 'CheapFlightService', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_cheapflights).default;
	  }
	});
	
	var _errormessagesService = __webpack_require__(730);
	
	Object.defineProperty(exports, 'ErrorMessagesService', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_errormessagesService).default;
	  }
	});
	
	var _apiInterceptorService = __webpack_require__(731);
	
	Object.defineProperty(exports, 'APIInterceptorService', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_apiInterceptorService).default;
	  }
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ },
/* 726 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _lunesLib = __webpack_require__(477);
	
	var _lunesLib2 = _interopRequireDefault(_lunesLib);
	
	var _axios = __webpack_require__(554);
	
	var _axios2 = _interopRequireDefault(_axios);
	
	var _constants = __webpack_require__(685);
	
	var _cccStreamerUtilities = __webpack_require__(727);
	
	var _cccStreamerUtilities2 = _interopRequireDefault(_cccStreamerUtilities);
	
	var _interceptor = __webpack_require__(728);
	
	var _interceptor2 = _interopRequireDefault(_interceptor);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var HttpService = function () {
	  HttpService.$inject = ["$http", "$translate"];
	  function HttpService($http, $translate) {
	    'ngInject';
	
	    _classCallCheck(this, HttpService);
	
	    this.http = $http;
	    this.$translate = $translate;
	  }
	
	  HttpService.prototype.login = function () {
	    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(userData) {
	      var data;
	      return regeneratorRuntime.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              if (userData.email) {
	                userData.email = userData.email.toLowerCase();
	              }
	              _context.next = 3;
	              return _lunesLib2.default.users.login(userData);
	
	            case 3:
	              data = _context.sent;
	              return _context.abrupt('return', data);
	
	            case 5:
	            case 'end':
	              return _context.stop();
	          }
	        }
	      }, _callee, this);
	    }));
	
	    function login(_x) {
	      return _ref.apply(this, arguments);
	    }
	
	    return login;
	  }();
	
	  HttpService.prototype.signup = function () {
	    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(userData) {
	      var obj, data;
	      return regeneratorRuntime.wrap(function _callee2$(_context2) {
	        while (1) {
	          switch (_context2.prev = _context2.next) {
	            case 0:
	              if (userData.email) {
	                userData.email = userData.email.toLowerCase();
	              }
	              obj = {
	                email: userData.email,
	                password: userData.password,
	                fullname: userData.name + ' ' + userData.lastname,
	                coupon: userData.coupon,
	                testnet: userData.testnet || false
	              };
	              _context2.next = 4;
	              return _lunesLib2.default.users.create(obj);
	
	            case 4:
	              data = _context2.sent;
	              return _context2.abrupt('return', data);
	
	            case 6:
	            case 'end':
	              return _context2.stop();
	          }
	        }
	      }, _callee2, this);
	    }));
	
	    function signup(_x2) {
	      return _ref2.apply(this, arguments);
	    }
	
	    return signup;
	  }();
	
	  HttpService.prototype.toBuy = function () {
	    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(address) {
	      var buyed;
	      return regeneratorRuntime.wrap(function _callee3$(_context3) {
	        while (1) {
	          switch (_context3.prev = _context3.next) {
	            case 0:
	              if (address) {
	                _context3.next = 2;
	                break;
	              }
	
	              return _context3.abrupt('return');
	
	            case 2:
	              _context3.next = 4;
	              return _axios2.default.get('https://apiw.lunes.io/api/ico/request-buy/' + address).catch(function (error) {
	                throw new Error(error);
	              });
	
	            case 4:
	              buyed = _context3.sent;
	              return _context3.abrupt('return', buyed);
	
	            case 6:
	            case 'end':
	              return _context3.stop();
	          }
	        }
	      }, _callee3, this);
	    }));
	
	    function toBuy(_x3) {
	      return _ref3.apply(this, arguments);
	    }
	
	    return toBuy;
	  }();
	
	  HttpService.prototype.changePassword = function () {
	    var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(email, accessToken) {
	      var a;
	      return regeneratorRuntime.wrap(function _callee4$(_context4) {
	        while (1) {
	          switch (_context4.prev = _context4.next) {
	            case 0:
	              _context4.next = 2;
	              return _lunesLib2.default.users.resetPassword({ email: email });
	
	            case 2:
	              a = _context4.sent;
	              return _context4.abrupt('return', a);
	
	            case 4:
	            case 'end':
	              return _context4.stop();
	          }
	        }
	      }, _callee4, this);
	    }));
	
	    function changePassword(_x4, _x5) {
	      return _ref4.apply(this, arguments);
	    }
	
	    return changePassword;
	  }();
	
	  HttpService.prototype.confirmterm = function () {
	    var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(currentUser) {
	      var confirmTerm;
	      return regeneratorRuntime.wrap(function _callee5$(_context5) {
	        while (1) {
	          switch (_context5.prev = _context5.next) {
	            case 0:
	              _context5.prev = 0;
	              _context5.next = 3;
	              return _lunesLib2.default.ico.confirmTerm(currentUser.email, currentUser.accessToken);
	
	            case 3:
	              confirmTerm = _context5.sent;
	              return _context5.abrupt('return', confirmTerm);
	
	            case 7:
	              _context5.prev = 7;
	              _context5.t0 = _context5['catch'](0);
	              throw new Error(_context5.t0);
	
	            case 10:
	            case 'end':
	              return _context5.stop();
	          }
	        }
	      }, _callee5, this, [[0, 7]]);
	    }));
	
	    function confirmterm(_x6) {
	      return _ref5.apply(this, arguments);
	    }
	
	    return confirmterm;
	  }();
	
	  HttpService.prototype.obtainPhase = function () {
	    var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
	      var phase;
	      return regeneratorRuntime.wrap(function _callee6$(_context6) {
	        while (1) {
	          switch (_context6.prev = _context6.next) {
	            case 0:
	              _context6.next = 2;
	              return _lunesLib2.default.ico.obtainPhase();
	
	            case 2:
	              phase = _context6.sent;
	              return _context6.abrupt('return', phase);
	
	            case 4:
	            case 'end':
	              return _context6.stop();
	          }
	        }
	      }, _callee6, this);
	    }));
	
	    function obtainPhase() {
	      return _ref6.apply(this, arguments);
	    }
	
	    return obtainPhase;
	  }();
	
	  /**
	   * @param {object} currentUser - { user info }
	   * @param {object} currentCoiSelected - { name: 'BTC' }
	  */
	
	
	  HttpService.prototype.showDepositWalletAddressQRCode = function () {
	    var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(currentUser, currentCoinSelected) {
	      var address;
	      return regeneratorRuntime.wrap(function _callee7$(_context7) {
	        while (1) {
	          switch (_context7.prev = _context7.next) {
	            case 0:
	              _context7.prev = 0;
	              address = JSON.parse(JSON.stringify(currentUser.depositWallet[currentCoinSelected.name].address));
	              return _context7.abrupt('return', {
	                address: address,
	                img: 'https://chart.googleapis.com/chart?cht=qr&chl=' + address + '&chs=200x200&chld=L|0")'
	              });
	
	            case 5:
	              _context7.prev = 5;
	              _context7.t0 = _context7['catch'](0);
	              return _context7.abrupt('return', {
	                address: 'error',
	                img: 'https://www.computerhope.com/jargon/e/error.gif'
	              });
	
	            case 8:
	            case 'end':
	              return _context7.stop();
	          }
	        }
	      }, _callee7, this, [[0, 5]]);
	    }));
	
	    function showDepositWalletAddressQRCode(_x7, _x8) {
	      return _ref7.apply(this, arguments);
	    }
	
	    return showDepositWalletAddressQRCode;
	  }();
	
	  HttpService.prototype.createDepositWallet = function () {
	    var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(currentUser) {
	      var depositWalletAddresses;
	      return regeneratorRuntime.wrap(function _callee8$(_context8) {
	        while (1) {
	          switch (_context8.prev = _context8.next) {
	            case 0:
	              _context8.prev = 0;
	              _context8.next = 3;
	              return _lunesLib2.default.coins.createDepositWallet(currentUser.email, currentUser.accessToken, false);
	
	            case 3:
	              depositWalletAddresses = _context8.sent;
	              return _context8.abrupt('return', depositWalletAddresses);
	
	            case 7:
	              _context8.prev = 7;
	              _context8.t0 = _context8['catch'](0);
	              throw new Error(_context8.t0);
	
	            case 10:
	            case 'end':
	              return _context8.stop();
	          }
	        }
	      }, _callee8, this, [[0, 7]]);
	    }));
	
	    function createDepositWallet(_x9) {
	      return _ref8.apply(this, arguments);
	    }
	
	    return createDepositWallet;
	  }();
	
	  HttpService.prototype.getBalanceLunes = function () {
	    var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(coin, currentUser) {
	      var address, balance;
	      return regeneratorRuntime.wrap(function _callee9$(_context9) {
	        while (1) {
	          switch (_context9.prev = _context9.next) {
	            case 0:
	              _context9.prev = 0;
	              address = currentUser.wallet.coins[0].addresses[0].address;
	              _context9.next = 4;
	              return _lunesLib2.default.coins.bitcoin.getBalance({ address: address }, currentUser.accessToken);
	
	            case 4:
	              balance = _context9.sent;
	              return _context9.abrupt('return', {
	                COIN: 'LNS',
	                CURRENTPRICE: balance
	              });
	
	            case 8:
	              _context9.prev = 8;
	              _context9.t0 = _context9['catch'](0);
	              throw new Error(_context9.t0);
	
	            case 11:
	            case 'end':
	              return _context9.stop();
	          }
	        }
	      }, _callee9, this, [[0, 8]]);
	    }));
	
	    function getBalanceLunes(_x10, _x11) {
	      return _ref9.apply(this, arguments);
	    }
	
	    return getBalanceLunes;
	  }();
	
	  HttpService.prototype.getBalanceCoinETH = function () {
	    var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(coin) {
	      var toSymbol, currencySymbol, priceData, price;
	      return regeneratorRuntime.wrap(function _callee10$(_context10) {
	        while (1) {
	          switch (_context10.prev = _context10.next) {
	            case 0:
	              toSymbol = this.$translate.instant('CURRENCY_USER');
	              currencySymbol = this.$translate.instant('CURRENCY_SYMBOL');
	              _context10.next = 4;
	              return _axios2.default.get('https://braziliex.com/api/v1/public/ticker/eth_usd', {});
	
	            case 4:
	              priceData = _context10.sent;
	              price = parseFloat(priceData.data.last).toFixed(2);
	              return _context10.abrupt('return', {
	                COIN: 'ETH',
	                CURRENTPRICE: currencySymbol + ' ' + price,
	                DISPLAYPRICE: '1 ETH | ' + price
	              });
	
	            case 7:
	            case 'end':
	              return _context10.stop();
	          }
	        }
	      }, _callee10, this);
	    }));
	
	    function getBalanceCoinETH(_x12) {
	      return _ref10.apply(this, arguments);
	    }
	
	    return getBalanceCoinETH;
	  }();
	
	  HttpService.prototype.buyHistory = function () {
	    var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(email, accessToken) {
	      var a;
	      return regeneratorRuntime.wrap(function _callee11$(_context11) {
	        while (1) {
	          switch (_context11.prev = _context11.next) {
	            case 0:
	              _context11.next = 2;
	              return _lunesLib2.default.ico.buyBalance(email, accessToken, 1).catch(function (error) {
	                _interceptor2.default.responseError(error);
	              });
	
	            case 2:
	              a = _context11.sent;
	              return _context11.abrupt('return', a);
	
	            case 4:
	            case 'end':
	              return _context11.stop();
	          }
	        }
	      }, _callee11, this);
	    }));
	
	    function buyHistory(_x13, _x14) {
	      return _ref11.apply(this, arguments);
	    }
	
	    return buyHistory;
	  }();
	
	  HttpService.prototype.getBalance = function () {
	    var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(coin, address, currentUser) {
	      var underCoin, balance;
	      return regeneratorRuntime.wrap(function _callee12$(_context12) {
	        while (1) {
	          switch (_context12.prev = _context12.next) {
	            case 0:
	              if (!(coin && address && currentUser)) {
	                _context12.next = 6;
	                break;
	              }
	
	              underCoin = coin.toLowerCase();
	              _context12.next = 4;
	              return _lunesLib2.default.coins.getBalance({ address: address, coin: underCoin, testnet: false }, currentUser.accessToken).catch(function (error) {
	                _interceptor2.default.responseError(error);
	              });
	
	            case 4:
	              balance = _context12.sent;
	              return _context12.abrupt('return', balance && balance.data ? balance.data : {});
	
	            case 6:
	              return _context12.abrupt('return', {});
	
	            case 7:
	            case 'end':
	              return _context12.stop();
	          }
	        }
	      }, _callee12, this);
	    }));
	
	    function getBalance(_x15, _x16, _x17) {
	      return _ref12.apply(this, arguments);
	    }
	
	    return getBalance;
	  }();
	
	  HttpService.prototype.getBitcoinBalance = function () {
	    var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(coin) {
	      var toSymbol, queryObj, tsym, priceData, currentPrice, displayPrice, ticker;
	      return regeneratorRuntime.wrap(function _callee13$(_context13) {
	        while (1) {
	          switch (_context13.prev = _context13.next) {
	            case 0:
	              toSymbol = 'USD';
	              queryObj = {
	                fromSymbol: coin,
	                toSymbol: toSymbol,
	                exchange: this.$translate.instant('CURRENCY_EXCHANGE')
	              };
	              tsym = _cccStreamerUtilities2.default.STATIC.CURRENCY.getSymbol(toSymbol);
	              _context13.next = 5;
	              return _lunesLib2.default.coins.getPrice(queryObj);
	
	            case 5:
	              priceData = _context13.sent;
	              currentPrice = _cccStreamerUtilities2.default.convertValueToDisplay(tsym, priceData[toSymbol]);
	              displayPrice = '1 ' + coin + ' | ' + currentPrice;
	              ticker = {
	                DISPLAYPRICE: displayPrice,
	                CURRENTPRICE: currentPrice,
	                PRICE: priceData[toSymbol],
	                CHANGE24HOUR: '-',
	                CHANGEHOURPCT: '0%',
	                CHANGE: 'up',
	                COIN: coin
	              };
	              return _context13.abrupt('return', ticker);
	
	            case 10:
	            case 'end':
	              return _context13.stop();
	          }
	        }
	      }, _callee13, this);
	    }));
	
	    function getBitcoinBalance(_x18) {
	      return _ref13.apply(this, arguments);
	    }
	
	    return getBitcoinBalance;
	  }();
	
	  return HttpService;
	}();
	
	HttpService.$inject = ['$http', '$translate'];
	
	exports.default = HttpService;

/***/ },
/* 727 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var CCC = {};
	
	CCC.STATIC = CCC.STATIC || {};
	
	CCC.STATIC.TYPE = {
	  TRADE: '0',
	  FEEDNEWS: '1',
	  CURRENT: '2',
	  LOADCOMPLATE: '3',
	  COINPAIRS: '4',
	  CURRENTAGG: '5',
	  TOPLIST: '6',
	  TOPLISTCHANGE: '7',
	  ORDERBOOK: '8',
	  FULLORDERBOOK: '9',
	  ACTIVATION: '10',
	
	  TRADECATCHUP: '100',
	  NEWSCATCHUP: '101',
	
	  TRADECATCHUPCOMPLETE: '300',
	  NEWSCATCHUPCOMPLETE: '301'
	};
	
	CCC.STATIC.CURRENCY = CCC.STATIC.CURRENCY || {};
	
	CCC.STATIC.CURRENCY.SYMBOL = {
	  BTC: 'Ƀ',
	  LTC: 'Ł',
	  DAO: 'Ð',
	  USD: '$',
	  CNY: '¥',
	  EUR: '€',
	  GBP: '£',
	  JPY: '¥',
	  PLN: 'zł',
	  RUB: '₽',
	  ETH: 'Ξ',
	  GOLD: 'Gold g',
	  INR: '₹',
	  BRL: 'R$'
	};
	
	CCC.STATIC.CURRENCY.getSymbol = function (symbol) {
	  return CCC.STATIC.CURRENCY.SYMBOL[symbol] || symbol;
	};
	
	CCC.STATIC.UTIL = {
	  exchangeNameMapping: {
	    CCCAGG: 'CryptoCompare Index',
	    BTCChina: 'BTCC'
	  },
	  isMobile: function isMobile(userAgent) {
	    if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(userAgent) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(userAgent.substr(0, 4))) return true;
	    return false;
	  },
	  convertToMB: function convertToMB(bytes) {
	    return (parseInt(bytes, 10) / 1024 / 1024).toFixed(2) + ' MB';
	  },
	  getNameForExchange: function getNameForExchange(exchangeName) {
	    if (this.exchangeNameMapping.hasOwnProperty(exchangeName)) {
	      return this.exchangeNameMapping[exchangeName];
	    }
	    return exchangeName;
	  },
	  noExponents: function noExponents(value) {
	    var data = String(value).split(/[eE]/);
	    if (data.length === 1) return data[0];
	
	    var z = '',
	        sign = value < 0 ? '-' : '',
	        str = data[0].replace('.', ''),
	        mag = Number(data[1]) + 1;
	
	    if (mag < 0) {
	      z = sign + '0.';
	      while (mag++) {
	        z += '0';
	      }return z + str.replace(/^\-/, '');
	    }
	    mag -= str.length;
	    while (mag--) {
	      z += '0';
	    }return str + z;
	  },
	  reduceFloatVal: function reduceFloatVal(value) {
	    value = parseFloat(value);
	    if (value > 1) {
	      value = Math.round(value * 100) / 100;
	      return value;
	    }
	    if (value >= 0.00001) {
	      return parseFloat(value.toPrecision(4));
	    }
	    if (value >= 0.000001) {
	      return parseFloat(value.toPrecision(3));
	    }
	    if (value >= 0.0000001) {
	      return parseFloat(value.toPrecision(2));
	    }
	    return parseFloat(value.toPrecision(1));
	  },
	  reduceReal: function reduceReal(value) {
	    value = parseFloat(value);
	    return parseFloat(value.toFixed(8));
	  },
	  convertCurrentKeyToAll: function convertCurrentKeyToAll(key) {
	    var valuesArray = key.split('~');
	    valuesArray[0] = CCC.STATIC.TYPE.CURRENTAGG;
	    valuesArray[1] = 'CCCAGG';
	    return valuesArray.join('~');
	  },
	  convertCurrentKeyToTrade: function convertCurrentKeyToTrade(key) {
	    var valuesArray = key.split('~');
	    valuesArray[0] = CCC.STATIC.TYPE.TRADE;
	    return valuesArray.join('~');
	  },
	  convertValueToDisplay: function convertValueToDisplay(symbol, value, filterNumberFunctionAngularJS, type, fullNumbers) {
	    var prefix = '';
	    var valueSign = 1;
	    value = parseFloat(value);
	    var valueAbs = Math.abs(value);
	    var decimalsOnBigNumbers = 2;
	    var decimalsOnNormalNumbers = 2;
	    var decimalsOnSmallNumbers = 4;
	    if (fullNumbers === true) {
	      decimalsOnBigNumbers = 2;
	      decimalsOnNormalNumbers = 0;
	      decimalsOnSmallNumbers = 4;
	    }
	    if (type === '8decimals') {
	      decimalsOnBigNumbers = 4;
	      decimalsOnNormalNumbers = 8;
	      decimalsOnSmallNumbers = 8;
	      if (value < 0.0001 && value >= 0.00001) {
	        decimalsOnSmallNumbers = 4;
	      }
	      if (value < 0.001 && value >= 0.0001) {
	        decimalsOnSmallNumbers = 5;
	      }
	      if (value < 0.01 && value >= 0.001) {
	        decimalsOnSmallNumbers = 6;
	      }
	      if (value < 0.1 && value >= 0.01) {
	        decimalsOnSmallNumbers = 7;
	      }
	    }
	    if (symbol !== '') {
	      prefix = symbol + ' ';
	    }
	    if (value < 0) {
	      valueSign = -1;
	    }
	    if (value === 0) {
	      return prefix + '0';
	    }
	
	    if (value < 0.00001 && value >= 0.000001 && decimalsOnSmallNumbers > 3) {
	      decimalsOnSmallNumbers = 3;
	    }
	    if (value < 0.000001 && value >= 0.0000001 && decimalsOnSmallNumbers > 2) {
	      decimalsOnSmallNumbers = 2;
	    }
	    if (value < 0.0000001 && decimalsOnSmallNumbers > 1) {
	      decimalsOnSmallNumbers = 1;
	    }
	
	    if (type === 'short' || type === '8decimals') {
	      if (valueAbs > 10000000000) {
	        valueAbs = valueAbs / 1000000000;
	        return prefix + filterNumberFunctionAngularJS(valueSign * valueAbs, decimalsOnBigNumbers) + ' B';
	      }
	      if (valueAbs > 10000000) {
	        valueAbs = valueAbs / 1000000;
	        return prefix + filterNumberFunctionAngularJS(valueSign * valueAbs, decimalsOnBigNumbers) + ' M';
	      }
	      if (valueAbs > 10000) {
	        valueAbs = valueAbs / 1000;
	        return prefix + filterNumberFunctionAngularJS(valueSign * valueAbs, decimalsOnBigNumbers) + ' K';
	      }
	      if (type === '8decimals' && valueAbs >= 100) {
	        return prefix + filterNumberFunctionAngularJS(valueSign * valueAbs, decimalsOnBigNumbers);
	      }
	      if (valueAbs >= 1) {
	        return prefix + filterNumberFunctionAngularJS(valueSign * valueAbs, decimalsOnNormalNumbers);
	      }
	      return prefix + (valueSign * valueAbs).toPrecision(decimalsOnSmallNumbers);
	    } else {
	      if (valueAbs >= 1) {
	        return prefix + filterNumberFunctionAngularJS(valueSign * valueAbs, decimalsOnNormalNumbers);
	      }
	
	      return prefix + this.noExponents((valueSign * valueAbs).toPrecision(decimalsOnSmallNumbers));
	    }
	  }
	};
	
	CCC.TRADE = CCC.TRADE || {};
	/*
	trade fields binary values always in the last ~
	*/
	
	CCC.TRADE.FLAGS = {
	  SELL: 0x1, // hex for binary 1
	  BUY: 0x2, // hex for binary 10
	  UNKNOWN: 0x4 // hex for binary 100
	};
	
	CCC.TRADE.FIELDS = {
	  T: 0x0, // hex for binary 0, it is a special case of fields that are always there TYPE
	  M: 0x0, // hex for binary 0, it is a special case of fields that are always there MARKET
	  FSYM: 0x0, // hex for binary 0, it is a special case of fields that are always there FROM SYMBOL
	  TSYM: 0x0, // hex for binary 0, it is a special case of fields that are always there TO SYMBOL
	  F: 0x0, // hex for binary 0, it is a special case of fields that are always there FLAGS
	  ID: 0x1, // hex for binary 1                                                       ID
	  TS: 0x2, // hex for binary 10                                                      TIMESTAMP
	  Q: 0x4, // hex for binary 100                                                     QUANTITY
	  P: 0x8, // hex for binary 1000                                                    PRICE
	  TOTAL: 0x10 // hex for binary 10000                                                   TOTAL
	};
	
	CCC.TRADE.DISPLAY = CCC.TRADE.DISPLAY || {};
	CCC.TRADE.DISPLAY.FIELDS = {
	  T: { Show: false },
	  M: { Show: true, Filter: 'Market' },
	  FSYM: { Show: true, Filter: 'CurrencySymbol' },
	  TSYM: { Show: true, Filter: 'CurrencySymbol' },
	  F: { Show: true, Filter: 'TradeFlag' },
	  ID: { Show: true, Filter: 'Text' },
	  TS: { Show: true, Filter: 'Date', Format: 'yyyy MMMM dd HH:mm:ss' },
	  Q: { Show: true, Filter: 'Number', Symbol: 'FSYM' },
	  P: { Show: true, Filter: 'Number', Symbol: 'TSYM' },
	  TOTAL: { Show: true, Filter: 'Number', Symbol: 'TSYM' }
	};
	
	CCC.TRADE.pack = function (tradeObject) {
	  var mask = 0;
	  var packedTrade = '';
	  for (var field in tradeObject) {
	    packedTrade += '~' + tradeObject[field];
	    mask |= this.FIELDS[field];
	  }
	  return packedTrade.substr(1) + '~' + mask.toString(16);
	};
	
	CCC.TRADE.unpack = function (tradeString) {
	  var valuesArray = tradeString.split('~');
	  var valuesArrayLenght = valuesArray.length;
	  var mask = valuesArray[valuesArrayLenght - 1];
	  var maskInt = parseInt(mask, 16);
	  var unpackedTrade = {};
	  var currentField = 0;
	  for (var property in this.FIELDS) {
	    if (this.FIELDS[property] === 0) {
	      unpackedTrade[property] = valuesArray[currentField];
	      currentField++;
	    } else if (maskInt & this.FIELDS[property]) {
	      unpackedTrade[property] = valuesArray[currentField];
	      currentField++;
	    }
	  }
	
	  return unpackedTrade;
	};
	
	CCC.TRADE.getKey = function (tradeObject) {
	  return tradeObject['T'] + '~' + tradeObject['M'] + '~' + tradeObject['FSYM'] + '~' + tradeObject['TSYM'];
	};
	
	CCC.CURRENT = CCC.CURRENT || {};
	/*
	current fields mask values always in the last ~
	*/
	
	CCC.CURRENT.FLAGS = {
	  PRICEUP: 0x1, // hex for binary 1
	  PRICEDOWN: 0x2, // hex for binary 10
	  PRICEUNCHANGED: 0x4, // hex for binary 100
	  BIDUP: 0x8, // hex for binary 1000
	  BIDDOWN: 0x10, // hex for binary 10000
	  BIDUNCHANGED: 0x20, // hex for binary 100000
	  OFFERUP: 0x40, // hex for binary 1000000
	  OFFERDOWN: 0x80, // hex for binary 10000000
	  OFFERUNCHANGED: 0x100, // hex for binary 100000000
	  AVGUP: 0x200, // hex for binary 1000000000
	  AVGDOWN: 0x400, // hex for binary 10000000000
	  AVGUNCHANGED: 0x800 // hex for binary 100000000000
	};
	
	CCC.CURRENT.FIELDS = {
	  TYPE: 0x0, // hex for binary 0, it is a special case of fields that are always there
	  MARKET: 0x0, // hex for binary 0, it is a special case of fields that are always there
	  FROMSYMBOL: 0x0, // hex for binary 0, it is a special case of fields that are always there
	  TOSYMBOL: 0x0, // hex for binary 0, it is a special case of fields that are always there
	  FLAGS: 0x0, // hex for binary 0, it is a special case of fields that are always there
	  PRICE: 0x1, // hex for binary 1
	  BID: 0x2, // hex for binary 10
	  OFFER: 0x4, // hex for binary 100
	  LASTUPDATE: 0x8, // hex for binary 1000
	  AVG: 0x10, // hex for binary 10000
	  LASTVOLUME: 0x20, // hex for binary 100000
	  LASTVOLUMETO: 0x40, // hex for binary 1000000
	  LASTTRADEID: 0x80, // hex for binary 10000000
	  VOLUMEHOUR: 0x100, // hex for binary 100000000
	  VOLUMEHOURTO: 0x200, // hex for binary 1000000000
	  VOLUME24HOUR: 0x400, // hex for binary 10000000000
	  VOLUME24HOURTO: 0x800, // hex for binary 100000000000
	  OPENHOUR: 0x1000, // hex for binary 1000000000000
	  HIGHHOUR: 0x2000, // hex for binary 10000000000000
	  LOWHOUR: 0x4000, // hex for binary 100000000000000
	  OPEN24HOUR: 0x8000, // hex for binary 1000000000000000
	  HIGH24HOUR: 0x10000, // hex for binary 10000000000000000
	  LOW24HOUR: 0x20000, // hex for binary 100000000000000000
	  LASTMARKET: 0x40000 // hex for binary 1000000000000000000, this is a special case and will only appear on CCCAGG messages
	};
	
	CCC.CURRENT.DISPLAY = CCC.CURRENT.DISPLAY || {};
	CCC.CURRENT.DISPLAY.FIELDS = {
	  TYPE: { Show: false },
	  MARKET: { Show: true, Filter: 'Market' },
	  FROMSYMBOL: { Show: false },
	  TOSYMBOL: { Show: false },
	  FLAGS: { Show: false },
	  PRICE: { Show: true, Filter: 'Number', Symbol: 'TOSYMBOL' },
	  BID: { Show: true, Filter: 'Number', Symbol: 'TOSYMBOL' },
	  OFFER: { Show: true, Filter: 'Number', Symbol: 'TOSYMBOL' },
	  LASTUPDATE: { Show: true, Filter: 'Date', Format: 'yyyy MMMM dd HH:mm:ss' },
	  AVG: { Show: true, ' Filter': 'Number', Symbol: 'TOSYMBOL' },
	  LASTVOLUME: { Show: true, Filter: 'Number', Symbol: 'FROMSYMBOL' },
	  LASTVOLUMETO: { Show: true, Filter: 'Number', Symbol: 'TOSYMBOL' },
	  LASTTRADEID: { Show: true, Filter: 'String' },
	  VOLUMEHOUR: { Show: true, Filter: 'Number', Symbol: 'FROMSYMBOL' },
	  VOLUMEHOURTO: { Show: true, Filter: 'Number', Symbol: 'TOSYMBOL' },
	  VOLUME24HOUR: { Show: true, Filter: 'Number', Symbol: 'FROMSYMBOL' },
	  VOLUME24HOURTO: { Show: true, Filter: 'Number', Symbol: 'TOSYMBOL' },
	  OPENHOUR: { Show: true, Filter: 'Number', Symbol: 'TOSYMBOL' },
	  HIGHHOUR: { Show: true, Filter: 'Number', Symbol: 'TOSYMBOL' },
	  LOWHOUR: { Show: true, Filter: 'Number', Symbol: 'TOSYMBOL' },
	  OPEN24HOUR: { Show: true, Filter: 'Number', Symbol: 'TOSYMBOL' },
	  HIGH24HOUR: { Show: true, Filter: 'Number', Symbol: 'TOSYMBOL' },
	  LOW24HOUR: { Show: true, Filter: 'Number', Symbol: 'TOSYMBOL' },
	  LASTMARKET: { Show: true, Filter: 'String' }
	};
	
	CCC.CURRENT.pack = function (currentObject) {
	  var mask = 0;
	  var packedCurrent = '';
	  for (var property in this.FIELDS) {
	    if (currentObject.hasOwnProperty(property)) {
	      packedCurrent += '~' + currentObject[property];
	      mask |= this.FIELDS[property];
	    }
	  }
	  //removing first character beacsue it is a ~
	  return packedCurrent.substr(1) + '~' + mask.toString(16);
	};
	
	CCC.CURRENT.unpack = function (value) {
	  var valuesArray = value.split('~');
	  var valuesArrayLenght = valuesArray.length;
	  var mask = valuesArray[valuesArrayLenght - 1];
	  var maskInt = parseInt(mask, 16);
	  var unpackedCurrent = {};
	  var currentField = 0;
	  for (var property in this.FIELDS) {
	    if (this.FIELDS[property] === 0) {
	      unpackedCurrent[property] = valuesArray[currentField];
	      currentField++;
	    } else if (maskInt & this.FIELDS[property]) {
	      //i know this is a hack, for cccagg, future code please don't hate me:(, i did this to avoid
	      //subscribing to trades as well in order to show the last market
	      if (property === 'LASTMARKET') {
	        unpackedCurrent[property] = valuesArray[currentField];
	      } else {
	        unpackedCurrent[property] = parseFloat(valuesArray[currentField]);
	      }
	      currentField++;
	    }
	  }
	
	  return unpackedCurrent;
	};
	CCC.CURRENT.getKey = function (currentObject) {
	  return currentObject['TYPE'] + '~' + currentObject['MARKET'] + '~' + currentObject['FROMSYMBOL'] + '~' + currentObject['TOSYMBOL'];
	};
	CCC.CURRENT.getKeyFromStreamerData = function (streamerData) {
	  var valuesArray = streamerData.split('~');
	  return valuesArray[0] + '~' + valuesArray[1] + '~' + valuesArray[2] + '~' + valuesArray[3];
	};
	
	CCC.noExponents = function (value) {
	  var data = String(value).split(/[eE]/);
	  if (data.length === 1) return data[0];
	
	  var z = '',
	      sign = value < 0 ? '-' : '',
	      str = data[0].replace('.', ''),
	      mag = Number(data[1]) + 1;
	
	  if (mag < 0) {
	    z = sign + '0.';
	    while (mag++) {
	      z += '0';
	    }return z + str.replace(/^\-/, '');
	  }
	  mag -= str.length;
	  while (mag--) {
	    z += '0';
	  }return str + z;
	};
	
	CCC.filterNumberFunctionPolyfill = function (value, decimals) {
	  var decimalsDenominator = Math.pow(10, decimals);
	  var numberWithCorrectDecimals = Math.round(value * decimalsDenominator) / decimalsDenominator;
	  var parts = numberWithCorrectDecimals.toString().split('.');
	  parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ',');
	  return parts.join('.');
	};
	
	CCC.convertValueToDisplay = function (symbol, value, type, fullNumbers) {
	  var prefix = '';
	  var valueSign = 1;
	  value = parseFloat(value);
	  var valueAbs = Math.abs(value);
	  var decimalsOnBigNumbers = 2;
	  var decimalsOnNormalNumbers = 2;
	  var decimalsOnSmallNumbers = 4;
	  if (fullNumbers === true) {
	    decimalsOnBigNumbers = 2;
	    decimalsOnNormalNumbers = 0;
	    decimalsOnSmallNumbers = 4;
	  }
	  if (symbol !== '') {
	    prefix = symbol + ' ';
	  }
	  if (value < 0) {
	    valueSign = -1;
	  }
	
	  if (value === 0) {
	    return prefix + '0';
	  }
	
	  if (value < 0.00001 && value >= 0.000001 && decimalsOnSmallNumbers > 3) {
	    decimalsOnSmallNumbers = 3;
	  }
	  if (value < 0.000001 && value >= 0.0000001 && decimalsOnSmallNumbers > 2) {
	    decimalsOnSmallNumbers = 2;
	  }
	  if (value < 0.0000001 && value >= 0.00000001 && decimalsOnSmallNumbers > 1) {
	    decimalsOnSmallNumbers = 1;
	  }
	
	  if (type === 'short') {
	    if (valueAbs > 10000000000) {
	      valueAbs = valueAbs / 1000000000;
	      return prefix + CCC.filterNumberFunctionPolyfill(valueSign * valueAbs, decimalsOnBigNumbers) + ' B';
	    }
	    if (valueAbs > 10000000) {
	      valueAbs = valueAbs / 1000000;
	      return prefix + CCC.filterNumberFunctionPolyfill(valueSign * valueAbs, decimalsOnBigNumbers) + ' M';
	    }
	    if (valueAbs > 10000) {
	      valueAbs = valueAbs / 1000;
	      return prefix + CCC.filterNumberFunctionPolyfill(valueSign * valueAbs, decimalsOnBigNumbers) + ' K';
	    }
	    if (valueAbs >= 1) {
	      return prefix + CCC.filterNumberFunctionPolyfill(valueSign * valueAbs, decimalsOnNormalNumbers);
	    }
	    return prefix + (valueSign * valueAbs).toPrecision(decimalsOnSmallNumbers);
	  } else {
	    if (valueAbs >= 1) {
	      return prefix + CCC.filterNumberFunctionPolyfill(valueSign * valueAbs, decimalsOnNormalNumbers);
	    }
	
	    return prefix + CCC.noExponents((valueSign * valueAbs).toPrecision(decimalsOnSmallNumbers));
	  }
	};
	
	exports.default = CCC;

/***/ },
/* 728 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _constants = __webpack_require__(685);
	
	exports.default = {
	  responseError: function responseError(response) {
	    if (response && response.error && response.error.status === 401) {
	      localStorage.removeItem(_constants.STORAGE_KEY);
	      window.location.href = "#!/login";
	    }
	  }
	};

/***/ },
/* 729 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var CheapFlightService = function CheapFlightService() {
	  'ngInject';
	
	  _classCallCheck(this, CheapFlightService);
	};
	
	exports.default = CheapFlightService;

/***/ },
/* 730 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _constants = __webpack_require__(685);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var ErrorMessagesService = function () {
	  ErrorMessagesService.$inject = ["$translate"];
	  function ErrorMessagesService($translate) {
	    'ngInject';
	
	    _classCallCheck(this, ErrorMessagesService);
	
	    this.$translate = $translate;
	  }
	
	  ErrorMessagesService.prototype.get = function get(msg) {
	    try {
	      if (msg && msg.message.indexOf("is not a valid email") !== -1) {
	        msg = this.$translate.instant('AUTHENTICATE_INVALID');
	      } else if (msg.messageKey === 'auth/user-not-found') {
	        msg = this.$translate.instant('AUTHENTICATE_INVALID');
	      } else if (msg.messageKey === 'auth/email-already-in-use') {
	        msg = this.$translate.instant('EMAIL_ALREADY');
	      } else if (msg.messageKey === 'auth/wrong-password') {
	        msg = this.$translate.instant('AUTHENTICATE_INVALID');
	      }
	      return msg && msg.messageKey ? msg.messageKey : JSON.stringify(msg);
	    } catch (e) {
	      return this.$translate.instant('ERROR_SERVER');
	    }
	  };
	
	  return ErrorMessagesService;
	}();
	
	ErrorMessagesService.$inject = ['$translate'];
	
	exports.default = ErrorMessagesService;

/***/ },
/* 731 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _constants = __webpack_require__(685);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var APIInterceptorService = function () {
	  APIInterceptorService.$inject = ["$rootScope"];
	  function APIInterceptorService($rootScope) {
	    'ngInject';
	
	    _classCallCheck(this, APIInterceptorService);
	
	    this.$rootScope = $rootScope;
	  }
	
	  APIInterceptorService.prototype.request = function request(config) {
	    if (!localStorage.getItem(_constants.STORAGE_KEY)) {
	      this.$rootScope.$broadcast('unauthorized');
	    }
	    return config;
	  };
	
	  APIInterceptorService.prototype.responseError = function responseError(response) {
	    if (response.status === 401) {
	      this.$rootScope.$broadcast('unauthorized');
	    }
	    return response;
	  };
	
	  return APIInterceptorService;
	}();
	
	APIInterceptorService.$inject = ['$rootScope'];
	
	exports.default = APIInterceptorService;

/***/ },
/* 732 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(733);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(689)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../../node_modules/css-loader/index.js?sourceMap!../../node_modules/postcss-loader/index.js!../../node_modules/sass-loader/index.js?config=sassLoader!./main.scss", function() {
				var newContent = require("!!../../node_modules/css-loader/index.js?sourceMap!../../node_modules/postcss-loader/index.js!../../node_modules/sass-loader/index.js?config=sassLoader!./main.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 733 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(688)(true);
	// imports
	
	
	// module
	exports.push([module.id, "input {\n  outline: none; }\n\nbody {\n  background-color: #4c2b82;\n  font-family: 'Roboto', sans-serif;\n  color: #fff;\n  font-size: 14px;\n  line-height: 20px;\n  font-weight: 100; }\n\n*, *:before, *:after {\n  box-sizing: border-box;\n  position: relative;\n  -webkit-box-sizing: border-box; }\n\n.center {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  height: 100%;\n  overflow: auto;\n  overflow-y: auto; }\n  @media (min-width: 768px) {\n    .center {\n      max-height: 780px; } }\n\nh1, h2, h3, h4 {\n  font-family: 'Offside', cursive;\n  line-height: 1.4em; }\n\nh2 {\n  font-size: 4em;\n  line-height: 1em; }\n\nh3 {\n  font-size: 2em;\n  line-height: 1.3em; }\n\n.txt-green {\n  color: #44af57; }\n\n.txt-center {\n  text-align: center !important; }\n\n.txt-left {\n  text-align: left !important; }\n\n.txt-right {\n  text-align: right !important; }\n\n.no-padding {\n  padding: 0; }\n\n.cursor-pointer {\n  cursor: pointer; }\n\n.round-menu {\n  text-decoration: none;\n  padding: 10px; }\n  .round-menu img {\n    vertical-align: middle; }\n\n.modal-backdrop {\n  background-color: #4c2b82;\n  opacity: 0.7;\n  text-align: center; }\n\n/* Logo */\n.logo {\n  font-size: 40px;\n  font-family: 'Offside', cursive;\n  letter-spacing: -7px; }\n\n/* Header */\n.header {\n  margin: 20px 0;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-align: center;\n      align-items: center;\n  padding: 10px 0; }\n\n.nav-menu {\n  padding-left: 0;\n  width: 100%; }\n\n/* MENU horizontal */\nul.menu {\n  padding-right: 0; }\n  ul.menu.horizontal {\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex-direction: row;\n        flex-direction: row;\n    -ms-flex-align: center;\n        align-items: center;\n    -ms-flex-pack: distribute;\n        justify-content: space-around; }\n    ul.menu.horizontal li {\n      list-style: none;\n      padding: 10px; }\n      ul.menu.horizontal li a {\n        text-transform: uppercase;\n        text-decoration: none;\n        color: #fff; }\n        ul.menu.horizontal li a:hover {\n          color: #44af57; }\n\n.menu-top {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-direction: row;\n      flex-direction: row;\n  list-style: none;\n  color: #fff;\n  text-transform: uppercase;\n  margin: 0; }\n  .menu-top a {\n    padding: 20px;\n    color: #fff;\n    text-decoration: none; }\n  .menu-top li {\n    margin-right: 15px;\n    font-size: 12px;\n    min-height: 2.2rem; }\n    .menu-top li:hover {\n      border-bottom: 2px solid #44af57; }\n      .menu-top li:hover a {\n        color: #44af57; }\n  .menu-top .active {\n    border-bottom: 2px solid #44af57; }\n    .menu-top .active a {\n      color: #44af57; }\n\n/* authentication */\n.authentication {\n  margin-top: 50px; }\n  .authentication .title {\n    margin: 20px 0; }\n\n.error-fields {\n  padding: 10px;\n  background-color: #f9d660;\n  color: #9b853b;\n  border-radius: 5px;\n  margin-left: 10px;\n  margin-bottom: 20px; }\n\n/* Modal Customized */\n.modal {\n  margin: 20px;\n  background-color: #4c2b82;\n  border-radius: 5px;\n  box-shadow: #4c2b82 1px 1px 17px 5px; }\n  .modal .icon-close {\n    text-align: center;\n    position: absolute;\n    right: 30px;\n    padding: 0 10px;\n    cursor: pointer;\n    font-weight: bold; }\n  .modal .modal-title {\n    margin-left: 2em;\n    font-weight: bold; }\n  .modal .modal-header {\n    border: 0; }\n  .modal .modal-content {\n    background-color: transparent;\n    padding: 10px;\n    border: 0;\n    /*\r\n    *  SCROLL BAR\r\n    */ }\n    .modal .modal-content .content {\n      background-color: #4c2b82;\n      border-radius: 5px;\n      box-shadow: #311d53 1px 1px 32px 0px;\n      color: #fff;\n      padding: 20px;\n      margin: 20px;\n      max-height: 100%;\n      overflow-y: overlay;\n      border: solid 8px #4c2b82; }\n    .modal .modal-content .content::-webkit-scrollbar-track {\n      -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\n      background-color: #4c2b82; }\n    .modal .modal-content .content::-webkit-scrollbar {\n      width: 6px;\n      background-color: #4c2b82; }\n    .modal .modal-content .content::-webkit-scrollbar-thumb {\n      background-color: #4f2f85; }\n    .modal .modal-content .footer {\n      display: -ms-flexbox;\n      display: flex;\n      text-align: left;\n      -ms-flex-align: center;\n          align-items: center;\n      -ms-flex-direction: column;\n          flex-direction: column; }\n\n/* container button */\n.area-button {\n  text-align: center;\n  padding: 10px;\n  /* primary-button */\n  /* disabled button */ }\n  .area-button .primary-button {\n    border: 0;\n    border-radius: 22px;\n    padding: 11px 80px;\n    text-align: center;\n    background-color: #4cd566;\n    color: #fff;\n    font-size: 16px;\n    transition: all .3s ease-in-out;\n    text-decoration: none; }\n    .area-button .primary-button:hover {\n      background-color: #44af57; }\n  .area-button .disabled-button {\n    padding: 10px 80px;\n    border: 0px solid #4e1f85;\n    border-radius: 25px;\n    font-size: 16px;\n    text-decoration: none;\n    display: inline-block;\n    text-shadow: -1px -1px 0 rgba(0, 0, 0, 0.3);\n    color: #FFFFFF;\n    background-color: #6929B3;\n    background-image: linear-gradient(to bottom, #6929B3, #6622B3);\n    filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0,startColorstr=#6929B3, endColorstr=#6622B3); }\n  .area-button .rounded-button {\n    border: 0;\n    border-radius: 100%;\n    width: 40px;\n    height: 40px;\n    background-color: #fff;\n    color: #44af57;\n    box-shadow: #444343 0px 1px 6px 0px; }\n\n/* Input customized */\n.input-form label {\n  display: block;\n  font-size: 10px;\n  padding: 0;\n  margin: 0;\n  color: #90df4a; }\n\n.input-form input {\n  width: 90%;\n  border: 0;\n  border-bottom: solid 1px #9c9c9c;\n  background-color: transparent;\n  padding: 10px 0;\n  margin-bottom: 15px;\n  color: #fff;\n  outline: none; }\n  .input-form input::-webkit-input-placeholder {\n    /* Chrome, Firefox, Opera, Safari 10.1+ */\n    color: #adadad;\n    opacity: 1;\n    /* Firefox */ }\n  .input-form input:-ms-input-placeholder {\n    /* Chrome, Firefox, Opera, Safari 10.1+ */\n    color: #adadad;\n    opacity: 1;\n    /* Firefox */ }\n  .input-form input::placeholder {\n    /* Chrome, Firefox, Opera, Safari 10.1+ */\n    color: #adadad;\n    opacity: 1;\n    /* Firefox */ }\n  .input-form input:-ms-input-placeholder {\n    /* Internet Explorer 10-11 */\n    color: #adadad; }\n  .input-form input::-ms-input-placeholder {\n    /* Microsoft Edge */\n    color: #adadad; }\n\n/* Custom Checkbox */\ninput[type=checkbox].css-checkbox {\n  height: 1px;\n  width: 1px;\n  margin: -1px;\n  padding: 0;\n  border: 0; }\n\ninput[type=checkbox].css-checkbox + label.css-label, input[type=checkbox].css-checkbox + label.css-label.clr {\n  padding-left: 23px;\n  height: 18px;\n  display: inline-block;\n  line-height: 18px;\n  background-repeat: no-repeat;\n  background-position: 0 0;\n  font-size: 12px;\n  vertical-align: middle;\n  cursor: pointer; }\n\ninput[type=checkbox].css-checkbox:checked + label.css-label, input[type=checkbox].css-checkbox + label.css-label.chk {\n  background-position: 0 -18px; }\n\nlabel.css-label {\n  background-image: url(https://res.cloudinary.com/luneswallet/image/upload/v1519425382/check.png);\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none; }\n\nbutton:focus {\n  outline: none !important; }\n\nfooter .social {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-pack: end;\n      justify-content: flex-end; }\n  footer .social li {\n    list-style: none;\n    padding: 2rem 0 0 1rem; }\n    footer .social li img {\n      width: 30px; }\n\nfooter .container-footer {\n  margin-top: 30px;\n  padding: 10px;\n  background-color: #432773;\n  border-radius: 5px; }\n  footer .container-footer .row {\n    padding: 15px;\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex-pack: justify;\n        justify-content: space-between; }\n    footer .container-footer .row a {\n      color: #fff; }\n\n.user-menu {\n  position: relative;\n  display: inline-block;\n  height: 100px;\n  margin-top: 1rem;\n  padding-left: 10px; }\n  @media only screen and (max-width: 460px) {\n    .user-menu {\n      height: 150px;\n      text-align: center;\n      width: 100%; } }\n  .user-menu a {\n    color: #fff;\n    text-decoration: none; }\n  .user-menu .logout {\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex-pack: end;\n        justify-content: flex-end;\n    margin-top: -5px; }\n    @media only screen and (max-width: 460px) {\n      .user-menu .logout {\n        -ms-flex-pack: start;\n            justify-content: flex-start; } }\n    .user-menu .logout a {\n      text-decoration: none !important; }\n\n@media only screen and (max-width: 460px) {\n  footer .container-social {\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex-align: center;\n        align-items: center;\n    -ms-flex-pack: center;\n        justify-content: center; }\n  .menu-top a {\n    padding: 0; } }\n", "", {"version":3,"sources":["D:/workspaces/lunes/lunes-purchase/src/scss/src/scss/base/_reset.scss","D:/workspaces/lunes/lunes-purchase/src/scss/src/scss/base/_color.scss"],"names":[],"mappings":"AAKA;EACE,cAAa,EACd;;AAED;EACE,0BCVe;EDWf,kCAAiC;EACjC,YAAW;EACX,gBAAe;EACf,kBAAiB;EACjB,iBAAgB,EACjB;;AAED;EACE,uBAAsB;EACtB,mBAAkB;EAClB,+BAA8B,EAC/B;;AAED;EACE,gBAAe;EACf,SAAQ;EACR,UAAS;EACT,iCAAgC;EAChC,aAAY;EACZ,eAAc;EACd,iBAAgB,EAIjB;EAHC;IARF;MASI,kBAAiB,EAEpB,EAAA;;AAED;EACE,gCAA+B;EAC/B,mBAAkB,EACnB;;AAED;EACE,eAAc;EACd,iBAAgB,EACjB;;AACD;EACE,eAAc;EACd,mBAAkB,EACnB;;AAED;EACE,eC/Ca,EDgDd;;AAED;EACE,8BAA4B,EAC7B;;AAED;EACE,4BAA0B,EAC3B;;AAED;EACE,6BAA2B,EAC5B;;AACD;EACE,WAAU,EACX;;AACD;EACE,gBAAe,EAChB;;AAED;EACE,sBAAqB;EACrB,cAAa,EAId;EAND;IAII,uBAAsB,EACvB;;AAGH;EACE,0BClFe;EDmFf,aAAY;EACZ,mBAAkB,EACnB;;AACD,UAAU;AACV;EACE,gBAAe;EACf,gCAA+B;EAC/B,qBAAoB,EACrB;;AAED,YAAY;AACZ;EACE,eAAc;EACd,qBAAa;EAAb,cAAa;EACb,uBAAmB;MAAnB,oBAAmB;EACnB,gBAAe,EAChB;;AAED;EACE,gBAAe;EACf,YAAW,EACZ;;AAED,qBAAqB;AACrB;EACE,iBAAgB,EAmBjB;EApBD;IAGI,qBAAa;IAAb,cAAa;IACb,wBAAmB;QAAnB,oBAAmB;IACnB,uBAAmB;QAAnB,oBAAmB;IACnB,0BAA6B;QAA7B,8BAA6B,EAa9B;IAnBH;MAQM,iBAAgB;MAChB,cAAa,EASd;MAlBL;QAWQ,0BAAyB;QACzB,sBAAqB;QACrB,YAAW,EAIZ;QAjBP;UAeU,eCrHK,EDsHN;;AAOT;EACE,qBAAa;EAAb,cAAa;EACb,wBAAmB;MAAnB,oBAAmB;EACnB,iBAAgB;EAChB,YAAW;EACX,0BAAyB;EACzB,UAAS,EAuBV;EA7BD;IAQI,cAAa;IACb,YAAW;IACX,sBAAqB,EACtB;EAXH;IAaI,mBAAkB;IAClB,gBAAe;IACf,mBAAkB,EAOnB;IAtBH;MAiBM,iCC9IS,EDkJV;MArBL;QAmBQ,eChJO,EDiJR;EApBP;IAwBI,iCCrJW,EDyJZ;IA5BH;MA0BM,eCvJS,EDwJV;;AAIL,oBAAoB;AACpB;EACE,iBAAgB,EAIjB;EALD;IAGI,eAAc,EACf;;AAGH;EACE,cAAa;EACb,0BCpKc;EDqKd,eAAc;EACd,mBAAkB;EAClB,kBAAiB;EACjB,oBAAmB,EACpB;;AAED,sBAAsB;AACtB;EACE,aAAY;EACZ,0BCrLe;EDsLf,mBAAkB;EAClB,qCAAqC,EAiEtC;EArED;IAOI,mBAAkB;IAClB,mBAAkB;IAClB,YAAW;IACX,gBAAe;IACf,gBAAe;IACf,kBAAiB,EAClB;EAbH;IAgBI,iBAAe;IACf,kBAAgB,EACjB;EAlBH;IAqBI,UAAS,EACV;EAtBH;IAyBI,8BAA6B;IAC7B,cAAa;IACb,UAAS;IAeT;;MAEE,EAuBH;IAnEH;MA8BM,0BCjNW;MDkNX,mBAAkB;MAClB,qCAAoC;MACpC,YAAW;MACX,cAAa;MACb,aAAY;MACZ,iBAAgB;MAEhB,oBAAmB;MACnB,0BAAyB,EAC1B;IAxCL;MA+CM,qDAAiD;MACjD,0BAAyB,EAC1B;IAjDL;MAoDM,WAAU;MACV,0BAAyB,EAC1B;IAtDL;MAyDM,0BAAyB,EAC1B;IA1DL;MA6DM,qBAAa;MAAb,cAAa;MACb,iBAAgB;MAChB,uBAAmB;UAAnB,oBAAmB;MACnB,2BAAsB;UAAtB,uBAAsB,EACvB;;AAML,sBAAsB;AACtB;EACE,mBAAkB;EAClB,cAAa;EAEb,oBAAoB;EAgBpB,qBAAqB,EA+BtB;EAnDD;IAMI,UAAS;IACT,oBAAmB;IACnB,mBAAkB;IAClB,mBAAkB;IAClB,0BAAyB;IACzB,YAAW;IACX,gBAAe;IACf,gCAA+B;IAC/B,sBAAqB,EAItB;IAlBH;MAgBM,0BCrQa,EDsQd;EAjBL;IAsBI,mBAAkB;IAClB,0BAAyB;IAGzB,oBAAmB;IACnB,gBAAe;IACf,sBAAoB;IACpB,sBAAoB;IACpB,4CAAwC;IACxC,eAAc;IACd,0BAAyB;IAMzB,+DAA8D;IAAC,8GAA4G,EAC5K;EAvCH;IA0CI,UAAS;IACT,oBAAmB;IACnB,YAAW;IACX,aAAY;IACZ,uBAAsB;IACtB,eCrSW;IDsSX,oCAAmC,EACpC;;AAIH,sBAAsB;AACtB;EACE,eAAc;EACd,gBAAe;EACf,WAAU;EACV,UAAS;EACT,eAAc,EACf;;AACD;EACE,WAAU;EACV,UAAS;EACT,iCAAgC;EAChC,8BAA6B;EAC7B,gBAAe;EACf,oBAAmB;EACnB,YAAW;EACX,cAAa,EAad;EArBD;IASmB,0CAA0C;IACvD,eAAc;IACd,WAAU;IAAG,aAAa,EAC7B;EAZH;IASmB,0CAA0C;IACvD,eAAc;IACd,WAAU;IAAG,aAAa,EAC7B;EAZH;IASmB,0CAA0C;IACvD,eAAc;IACd,WAAU;IAAG,aAAa,EAC7B;EAZH;IAc4B,6BAA6B;IACnD,eAAc,EACjB;EAhBH;IAkB6B,oBAAoB;IAC3C,eAAc,EACjB;;AAGH,qBAAqB;AACrB;EACC,YAAU;EAAG,WAAS;EAAG,aAAW;EAAG,WAAS;EAAG,UAAQ,EAC3D;;AAED;EACC,mBAAiB;EAChB,aAAW;EACZ,sBAAoB;EACpB,kBAAgB;EAChB,6BAA2B;EAC3B,yBAAwB;EACxB,gBAAc;EACd,uBAAqB;EACrB,gBAAc,EAEd;;AAED;EACC,6BAA4B,EAC5B;;AACD;EACC,iGAA+F;EAC/F,4BAA2B;EAC3B,0BAAyB;EAEzB,uBAAsB;EACtB,sBAAqB;EACrB,kBAAiB,EACjB;;AAED;EACI,yBAAwB,EAC3B;;AAED;EAEI,qBAAa;EAAb,cAAa;EACb,mBAAyB;MAAzB,0BAAyB,EAQ1B;EAXH;IAKM,iBAAgB;IAChB,uBAAsB,EAIvB;IAVL;MAQQ,YAAW,EACZ;;AATP;EAaI,iBAAgB;EAChB,cAAa;EACb,0BAAyB;EACzB,mBAAkB,EASnB;EAzBH;IAkBM,cAAa;IACb,qBAAa;IAAb,cAAa;IACb,uBAA8B;QAA9B,+BAA8B,EAI/B;IAxBL;MAsBQ,YAAW,EACZ;;AAIP;EACE,mBAAkB;EAClB,sBAAqB;EACrB,cAAa;EACb,iBAAgB;EAChB,mBAAkB,EAoCnB;EAlCC;IAPF;MAQI,cAAa;MACb,mBAAkB;MAClB,YAAW,EA+Bd,EAAA;EAzCD;IAcI,YAAW;IACX,sBAAqB,EACtB;EAhBH;IAmBI,qBAAa;IAAb,cAAa;IACb,mBAAyB;QAAzB,0BAAyB;IACzB,iBAAgB,EAmBjB;IAjBC;MAvBJ;QAwBM,qBAA2B;YAA3B,4BAA2B,EAgB9B,EAAA;IAxCH;MAsCM,iCAAgC,EACjC;;AAIL;EACE;IACE,qBAAa;IAAb,cAAa;IACb,uBAAmB;QAAnB,oBAAmB;IACnB,sBAAuB;QAAvB,wBAAuB,EACxB;EACD;IAEI,WAAU,EACX,EAAA","file":"main.scss","sourcesContent":["@import 'color';\r\n\r\n$break-small: 320px;\r\n$break-large: 1200px;\r\n\r\ninput {\r\n  outline: none;\r\n}\r\n\r\nbody {\r\n  background-color: $primary;\r\n  font-family: 'Roboto', sans-serif;\r\n  color: #fff;\r\n  font-size: 14px;\r\n  line-height: 20px;\r\n  font-weight: 100;\r\n};\r\n\r\n*, *:before, *:after {\r\n  box-sizing: border-box;\r\n  position: relative;\r\n  -webkit-box-sizing: border-box;\r\n}\r\n\r\n.center {\r\n  position: fixed;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  height: 100%;\r\n  overflow: auto;\r\n  overflow-y: auto;\r\n  @media (min-width: 768px) {\r\n    max-height: 780px;\r\n  }\r\n}\r\n\r\nh1, h2, h3, h4 {\r\n  font-family: 'Offside', cursive;\r\n  line-height: 1.4em;\r\n}\r\n\r\nh2 {\r\n  font-size: 4em;\r\n  line-height: 1em;\r\n}\r\nh3 {\r\n  font-size: 2em;\r\n  line-height: 1.3em;\r\n}\r\n\r\n.txt-green {\r\n  color: $green;\r\n}\r\n\r\n.txt-center {\r\n  text-align: center!important;\r\n}\r\n\r\n.txt-left {\r\n  text-align: left!important;\r\n}\r\n\r\n.txt-right {\r\n  text-align: right!important;\r\n}\r\n.no-padding {\r\n  padding: 0;\r\n}\r\n.cursor-pointer {\r\n  cursor: pointer;\r\n}\r\n\r\n.round-menu {\r\n  text-decoration: none;\r\n  padding: 10px;\r\n  img {\r\n    vertical-align: middle; \r\n  }\r\n}\r\n\r\n.modal-backdrop {\r\n  background-color: $primary;\r\n  opacity: 0.7;\r\n  text-align: center;\r\n}\r\n/* Logo */\r\n.logo {\r\n  font-size: 40px;\r\n  font-family: 'Offside', cursive;\r\n  letter-spacing: -7px;\r\n}\r\n\r\n/* Header */\r\n.header {\r\n  margin: 20px 0;\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 10px 0;\r\n}\r\n\r\n.nav-menu {\r\n  padding-left: 0;\r\n  width: 100%;\r\n}\r\n\r\n/* MENU horizontal */\r\nul.menu {\r\n  padding-right: 0;\r\n  &.horizontal {\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    justify-content: space-around;\r\n    li {\r\n      list-style: none;\r\n      padding: 10px;\r\n      a {\r\n        text-transform: uppercase;\r\n        text-decoration: none;\r\n        color: #fff;\r\n        &:hover {\r\n          color: $green;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// TODO: verificar se pode mesclar essa com a de cima\r\n.menu-top {\r\n  display: flex;\r\n  flex-direction: row;\r\n  list-style: none;\r\n  color: #fff;\r\n  text-transform: uppercase;\r\n  margin: 0;\r\n  a {\r\n    padding: 20px;  \r\n    color: #fff;\r\n    text-decoration: none;\r\n  }\r\n  li {  \r\n    margin-right: 15px;\r\n    font-size: 12px;\r\n    min-height: 2.2rem;\r\n    &:hover {\r\n      border-bottom: 2px solid $green;      \r\n      a {\r\n        color: $green;\r\n      }\r\n    }\r\n  }\r\n  .active {\r\n    border-bottom: 2px solid $green;\r\n    a {\r\n      color: $green;\r\n    }\r\n  }\r\n}\r\n\r\n/* authentication */\r\n.authentication {\r\n  margin-top: 50px;\r\n  .title {\r\n    margin: 20px 0;\r\n  }\r\n}\r\n\r\n.error-fields {\r\n  padding: 10px;\r\n  background-color: $yellow;\r\n  color: #9b853b;\r\n  border-radius: 5px;\r\n  margin-left: 10px;\r\n  margin-bottom: 20px;\r\n}\r\n \r\n/* Modal Customized */\r\n.modal {\r\n  margin: 20px;\r\n  background-color: $primary;\r\n  border-radius: 5px;\r\n  box-shadow: $primary 1px 1px 17px 5px;\r\n\r\n  .icon-close {\r\n    text-align: center;\r\n    position: absolute;\r\n    right: 30px;\r\n    padding: 0 10px;\r\n    cursor: pointer;\r\n    font-weight: bold;\r\n  }\r\n  \r\n  .modal-title{\r\n    margin-left:2em;\r\n    font-weight:bold;\r\n  }\r\n\r\n  .modal-header {\r\n    border: 0;\r\n  }\r\n  \r\n  .modal-content {\r\n    background-color: transparent;\r\n    padding: 10px;\r\n    border: 0;\r\n\r\n    .content {\r\n      background-color: $primary;\r\n      border-radius: 5px;\r\n      box-shadow: #311d53 1px 1px 32px 0px;\r\n      color: #fff;\r\n      padding: 20px;\r\n      margin: 20px;\r\n      max-height: 100%;\r\n      \r\n      overflow-y: overlay;\r\n      border: solid 8px #4c2b82;\r\n    }\r\n\r\n    /*\r\n    *  SCROLL BAR\r\n    */\r\n    .content::-webkit-scrollbar-track\r\n    {\r\n      -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3);\r\n      background-color: #4c2b82;\r\n    }\r\n    .content::-webkit-scrollbar\r\n    {\r\n      width: 6px;\r\n      background-color: #4c2b82;\r\n    }\r\n    .content::-webkit-scrollbar-thumb\r\n    {\r\n      background-color: #4f2f85;\r\n    }\r\n\r\n    .footer {\r\n      display: flex;\r\n      text-align: left;\r\n      align-items: center;\r\n      flex-direction: column;\r\n    }\r\n\r\n  }\r\n\r\n}\r\n\r\n/* container button */\r\n.area-button {\r\n  text-align: center;\r\n  padding: 10px;\r\n  \r\n  /* primary-button */\r\n  .primary-button {\r\n    border: 0;\r\n    border-radius: 22px;\r\n    padding: 11px 80px;\r\n    text-align: center;\r\n    background-color: #4cd566;\r\n    color: #fff;\r\n    font-size: 16px;\r\n    transition: all .3s ease-in-out;\r\n    text-decoration: none;\r\n    &:hover {\r\n      background-color: $darkGreen;\r\n    }\r\n  }\r\n\r\n  /* disabled button */\r\n  .disabled-button {\r\n    padding: 10px 80px;\r\n    border: 0px solid #4e1f85;\r\n    -webkit-border-radius: 25px; \r\n    -moz-border-radius: 25px;\r\n    border-radius: 25px;\r\n    font-size: 16px;\r\n    text-decoration:none; \r\n    display:inline-block;\r\n    text-shadow: -1px -1px 0 rgba(0,0,0,0.3); \r\n    color: #FFFFFF;\r\n    background-color: #6929B3; \r\n    background-image: -webkit-gradient(linear, left top, left bottom, from(#6929B3), to(#6622B3));\r\n    background-image: -webkit-linear-gradient(top, #6929B3, #6622B3);\r\n    background-image: -moz-linear-gradient(top, #6929B3, #6622B3);\r\n    background-image: -ms-linear-gradient(top, #6929B3, #6622B3);\r\n    background-image: -o-linear-gradient(top, #6929B3, #6622B3);\r\n    background-image: linear-gradient(to bottom, #6929B3, #6622B3);filter:progid:DXImageTransform.Microsoft.gradient(GradientType=0,startColorstr=#6929B3, endColorstr=#6622B3);\r\n  }\r\n\r\n  .rounded-button {\r\n    border: 0;\r\n    border-radius: 100%;\r\n    width: 40px;\r\n    height: 40px;\r\n    background-color: #fff;\r\n    color: $green;\r\n    box-shadow: #444343 0px 1px 6px 0px;\r\n  }\r\n\r\n}\r\n\r\n/* Input customized */\r\n.input-form label {\r\n  display: block;\r\n  font-size: 10px;\r\n  padding: 0;\r\n  margin: 0;\r\n  color: #90df4a;\r\n}\r\n.input-form input {\r\n  width: 90%;\r\n  border: 0;\r\n  border-bottom: solid 1px #9c9c9c;\r\n  background-color: transparent;\r\n  padding: 10px 0;\r\n  margin-bottom: 15px;\r\n  color: #fff;\r\n  outline: none;\r\n  &::placeholder { /* Chrome, Firefox, Opera, Safari 10.1+ */\r\n      color: #adadad;\r\n      opacity: 1; /* Firefox */\r\n  }\r\n\r\n  &:-ms-input-placeholder { /* Internet Explorer 10-11 */\r\n      color: #adadad;\r\n  }\r\n\r\n  &::-ms-input-placeholder { /* Microsoft Edge */\r\n      color: #adadad;\r\n  }\r\n}\r\n\r\n/* Custom Checkbox */\r\ninput[type=checkbox].css-checkbox {\r\n\theight:1px; width:1px; margin:-1px; padding:0; border:0;\r\n}\r\n\r\ninput[type=checkbox].css-checkbox + label.css-label, input[type=checkbox].css-checkbox + label.css-label.clr {\r\n\tpadding-left:23px;\r\n  height:18px; \r\n\tdisplay:inline-block;\r\n\tline-height:18px;\r\n\tbackground-repeat:no-repeat;\r\n\tbackground-position: 0 0;\r\n\tfont-size:12px;\r\n\tvertical-align:middle;\r\n\tcursor:pointer;\r\n\r\n}\r\n\r\ninput[type=checkbox].css-checkbox:checked + label.css-label, input[type=checkbox].css-checkbox + label.css-label.chk {\r\n\tbackground-position: 0 -18px;\r\n}\r\nlabel.css-label {\r\n\tbackground-image:url(https://res.cloudinary.com/luneswallet/image/upload/v1519425382/check.png);\r\n\t-webkit-touch-callout: none;\r\n\t-webkit-user-select: none;\r\n\t-khtml-user-select: none;\r\n\t-moz-user-select: none;\r\n\t-ms-user-select: none;\r\n\tuser-select: none;\r\n}\r\n\r\nbutton:focus {\r\n    outline: none !important;\r\n}\r\n\r\nfooter {\r\n  .social {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    li {\r\n      list-style: none;\r\n      padding: 2rem 0 0 1rem;\r\n      img {\r\n        width: 30px;\r\n      }\r\n    }\r\n  }\r\n  .container-footer {\r\n    margin-top: 30px;\r\n    padding: 10px;\r\n    background-color: #432773;\r\n    border-radius: 5px;\r\n    .row {\r\n      padding: 15px;\r\n      display: flex;\r\n      justify-content: space-between;\r\n      a {\r\n        color: #fff;\r\n      }\r\n    }\r\n  }\r\n}\r\n.user-menu {\r\n  position: relative;\r\n  display: inline-block;\r\n  height: 100px;\r\n  margin-top: 1rem;\r\n  padding-left: 10px;\r\n\r\n  @media only screen and (max-width: 460px) {\r\n    height: 150px;\r\n    text-align: center;\r\n    width: 100%;\r\n  }\r\n\r\n  a {\r\n    color: #fff;\r\n    text-decoration: none;\r\n  }\r\n\r\n  .logout {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    margin-top: -5px;\r\n\r\n    @media only screen and (max-width: 460px) {\r\n      justify-content: flex-start;\r\n    }\r\n\r\n    // TODO: aplicar suavidade ao exibir o menu\r\n    // .ng-hide {\r\n    //   opacity: 0;\r\n    // }\r\n    \r\n    // .ng-hide-add,\r\n    // .ng-hide-remove {\r\n    //   transition: all linear .5s;\r\n    // }\r\n\r\n    a {\r\n      text-decoration: none !important;\r\n    }\r\n  }\r\n}\r\n\r\n@media only screen and (max-width: 460px) {\r\n  footer .container-social {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n  .menu-top {\r\n    a {\r\n      padding: 0;\r\n    }\r\n  }\r\n}","$primary: #4c2b82 !default;\r\n$lightPrimary: #654fa4;\r\n$extraLightPrimary: #876fc6;\r\n$darkPrimary: #41256f;\r\n$extraDarkPrimary: #3f2569;\r\n$green: #44af57;\r\n$darkGreen: #44af57;\r\n$yellow: #f9d660;\r\n$darkGray: #333;"],"sourceRoot":""}]);
	
	// exports


/***/ }
/******/ ]);
//# sourceMappingURL=app.js.map?v=1520391898414